-- modified by ket.kio.RPCGen.

local require = require

require("i3k_sstream")

i3k_sbean = { }

i3k_sbean.ArmorDamage = i3k_class("ArmorDamage")
function i3k_sbean.ArmorDamage:ctor()
	--self.damage:		int32	
	--self.suck:		int32	
	--self.destroy:		int32	
	--self.weak:		int32	
end

function i3k_sbean.ArmorDamage:clone()
	return clone(self)
end

function i3k_sbean.ArmorDamage:decode(is)
	self.damage = is:popNumber()
	self.suck = is:popNumber()
	self.destroy = is:popNumber()
	self.weak = is:popNumber()
end

function i3k_sbean.ArmorDamage:encode(os)
	os:pushNumber(self.damage)
	os:pushNumber(self.suck)
	os:pushNumber(self.destroy)
	os:pushNumber(self.weak)
end


i3k_sbean.KnockoutTimeCFGS = i3k_class("KnockoutTimeCFGS")
function i3k_sbean.KnockoutTimeCFGS:ctor()
	--self.startTime:		int32	
	--self.lastTime:		int32	
	--self.resultDelayTime:		int32	
end

function i3k_sbean.KnockoutTimeCFGS:clone()
	return clone(self)
end

function i3k_sbean.KnockoutTimeCFGS:decode(is)
	self.startTime = is:popNumber()
	self.lastTime = is:popNumber()
	self.resultDelayTime = is:popNumber()
end

function i3k_sbean.KnockoutTimeCFGS:encode(os)
	os:pushNumber(self.startTime)
	os:pushNumber(self.lastTime)
	os:pushNumber(self.resultDelayTime)
end


i3k_sbean.TournamentSeason = i3k_class("TournamentSeason")
function i3k_sbean.TournamentSeason:ctor()
	--self.id:		int32	
	--self.startTime:		int32	
	--self.qualifying:		QualifyingTime	
	--self.sixtyfour:		KnockoutTime	
	--self.thirtytwo:		KnockoutTime	
	--self.sixteen:		KnockoutTime	
	--self.quarter:		KnockoutTime	
	--self.semi:		KnockoutTime	
	--self.finals:		KnockoutTime	
end

function i3k_sbean.TournamentSeason:clone()
	return clone(self)
end

function i3k_sbean.TournamentSeason:decode(is)
	self.id = is:popNumber()
	self.startTime = is:popNumber()
	self.qualifying = is:pop(i3k_sbean.QualifyingTime)
	self.sixtyfour = is:pop(i3k_sbean.KnockoutTime)
	self.thirtytwo = is:pop(i3k_sbean.KnockoutTime)
	self.sixteen = is:pop(i3k_sbean.KnockoutTime)
	self.quarter = is:pop(i3k_sbean.KnockoutTime)
	self.semi = is:pop(i3k_sbean.KnockoutTime)
	self.finals = is:pop(i3k_sbean.KnockoutTime)
end

function i3k_sbean.TournamentSeason:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.startTime)
	os:push(self.qualifying)
	os:push(self.sixtyfour)
	os:push(self.thirtytwo)
	os:push(self.sixteen)
	os:push(self.quarter)
	os:push(self.semi)
	os:push(self.finals)
end


i3k_sbean.QualifyingTime = i3k_class("QualifyingTime")
function i3k_sbean.QualifyingTime:ctor()
	--self.openDays:		set[int32]	
	--self.startTime:		int32	
	--self.endTime:		int32	
	--self.dayStartTime:		int32	
	--self.dayEndTime:		int32	
	--self.resultTime:		int32	
end

function i3k_sbean.QualifyingTime:clone()
	return clone(self)
end

function i3k_sbean.QualifyingTime:decode(is)
	self.openDays = is:popNumberSet()
	self.startTime = is:popNumber()
	self.endTime = is:popNumber()
	self.dayStartTime = is:popNumber()
	self.dayEndTime = is:popNumber()
	self.resultTime = is:popNumber()
end

function i3k_sbean.QualifyingTime:encode(os)
	os:pushNumberSet(self.openDays)
	os:pushNumber(self.startTime)
	os:pushNumber(self.endTime)
	os:pushNumber(self.dayStartTime)
	os:pushNumber(self.dayEndTime)
	os:pushNumber(self.resultTime)
end


i3k_sbean.KnockoutTime = i3k_class("KnockoutTime")
function i3k_sbean.KnockoutTime:ctor()
	--self.startJoinTime:		int32	
	--self.startFightTime:		int32	
	--self.resultTime:		int32	
end

function i3k_sbean.KnockoutTime:clone()
	return clone(self)
end

function i3k_sbean.KnockoutTime:decode(is)
	self.startJoinTime = is:popNumber()
	self.startFightTime = is:popNumber()
	self.resultTime = is:popNumber()
end

function i3k_sbean.KnockoutTime:encode(os)
	os:pushNumber(self.startJoinTime)
	os:pushNumber(self.startFightTime)
	os:pushNumber(self.resultTime)
end


i3k_sbean.DBRegisterID = i3k_class("DBRegisterID")
function i3k_sbean.DBRegisterID:ctor()
	--self.gameId:		string	
	--self.zoneId:		int32	
	--self.uid:		string	
	--self.channel:		string	
end

function i3k_sbean.DBRegisterID:clone()
	return clone(self)
end

function i3k_sbean.DBRegisterID:decode(is)
	self.gameId = is:popString()
	self.zoneId = is:popNumber()
	self.uid = is:popString()
	self.channel = is:popString()
end

function i3k_sbean.DBRegisterID:encode(os)
	os:pushString(self.gameId)
	os:pushNumber(self.zoneId)
	os:pushString(self.uid)
	os:pushString(self.channel)
end


i3k_sbean.DBRegister = i3k_class("DBRegister")
function i3k_sbean.DBRegister:ctor()
	--self.id:		DBRegisterID	
	--self.createTime:		int32	
end

function i3k_sbean.DBRegister:clone()
	return clone(self)
end

function i3k_sbean.DBRegister:decode(is)
	self.id = is:pop(i3k_sbean.DBRegisterID)
	self.createTime = is:popNumber()
end

function i3k_sbean.DBRegister:encode(os)
	os:push(self.id)
	os:pushNumber(self.createTime)
end


i3k_sbean.DBBanData = i3k_class("DBBanData")
function i3k_sbean.DBBanData:ctor()
	--self.banEndTime:		int32	
	--self.banReason:		string	
end

function i3k_sbean.DBBanData:clone()
	return clone(self)
end

function i3k_sbean.DBBanData:decode(is)
	self.banEndTime = is:popNumber()
	self.banReason = is:popString()
end

function i3k_sbean.DBBanData:encode(os)
	os:pushNumber(self.banEndTime)
	os:pushString(self.banReason)
end


i3k_sbean.DBPayLog = i3k_class("DBPayLog")
function i3k_sbean.DBPayLog:ctor()
	--self.orderId:		string	
	--self.payRoleId:		int32	
	--self.payLevel:		int32	
	--self.timeStamp:		int32	
end

function i3k_sbean.DBPayLog:clone()
	return clone(self)
end

function i3k_sbean.DBPayLog:decode(is)
	self.orderId = is:popString()
	self.payRoleId = is:popNumber()
	self.payLevel = is:popNumber()
	self.timeStamp = is:popNumber()
end

function i3k_sbean.DBPayLog:encode(os)
	os:pushString(self.orderId)
	os:pushNumber(self.payRoleId)
	os:pushNumber(self.payLevel)
	os:pushNumber(self.timeStamp)
end


i3k_sbean.DBVipPay = i3k_class("DBVipPay")
function i3k_sbean.DBVipPay:ctor()
	--self.vipLvl:		int32	
	--self.payPoints:		int32	
	--self.presentPoints:		int32	
	--self.gmPoints:		int32	
	--self.payDiamond:		int32	
	--self.paylog:		vector[DBPayLog]	
	--self.payLvlLog:		map[int32, int32]	
end

function i3k_sbean.DBVipPay:clone()
	return clone(self)
end

function i3k_sbean.DBVipPay:decode(is)
	self.vipLvl = is:popNumber()
	self.payPoints = is:popNumber()
	self.presentPoints = is:popNumber()
	self.gmPoints = is:popNumber()
	self.payDiamond = is:popNumber()
	self.paylog = is:popList(i3k_sbean.DBPayLog)
	self.payLvlLog = is:popNumberNumberMap()
end

function i3k_sbean.DBVipPay:encode(os)
	os:pushNumber(self.vipLvl)
	os:pushNumber(self.payPoints)
	os:pushNumber(self.presentPoints)
	os:pushNumber(self.gmPoints)
	os:pushNumber(self.payDiamond)
	os:pushList(self.paylog)
	os:pushNumberNumberMap(self.payLvlLog)
end


i3k_sbean.DBMail = i3k_class("DBMail")
function i3k_sbean.DBMail:ctor()
	--self.id:		int32	
	--self.type:		int8	
	--self.state:		int8	
	--self.fromID:		int32	
	--self.fromName:		string	
	--self.sendTime:		int32	
	--self.lifeTime:		int32	
	--self.title:		string	
	--self.content:		string	
	--self.attachment:		vector[GameItem]	
	--self.additional:		vector[int32]	
end

function i3k_sbean.DBMail:clone()
	return clone(self)
end

function i3k_sbean.DBMail:decode(is)
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.state = is:popNumber()
	self.fromID = is:popNumber()
	self.fromName = is:popString()
	self.sendTime = is:popNumber()
	self.lifeTime = is:popNumber()
	self.title = is:popString()
	self.content = is:popString()
	self.attachment = is:popList(i3k_sbean.GameItem)
	self.additional = is:popNumberList()
end

function i3k_sbean.DBMail:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.state)
	os:pushNumber(self.fromID)
	os:pushString(self.fromName)
	os:pushNumber(self.sendTime)
	os:pushNumber(self.lifeTime)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.attachment)
	os:pushNumberList(self.additional)
end


i3k_sbean.DBExchangeBottle = i3k_class("DBExchangeBottle")
function i3k_sbean.DBExchangeBottle:ctor()
	--self.item:		int32	
	--self.count:		int32	
	--self.msg:		string	
end

function i3k_sbean.DBExchangeBottle:clone()
	return clone(self)
end

function i3k_sbean.DBExchangeBottle:decode(is)
	self.item = is:popNumber()
	self.count = is:popNumber()
	self.msg = is:popString()
end

function i3k_sbean.DBExchangeBottle:encode(os)
	os:pushNumber(self.item)
	os:pushNumber(self.count)
	os:pushString(self.msg)
end


i3k_sbean.DBWorldMail = i3k_class("DBWorldMail")
function i3k_sbean.DBWorldMail:ctor()
	--self.id:		int32	
	--self.lvlMin:		int16	
	--self.lvlMax:		int16	
	--self.vipMin:		int16	
	--self.vipMax:		int16	
	--self.channelReq:		set[string]	
	--self.sendTime:		int32	
	--self.lifeTime:		int32	
	--self.title:		string	
	--self.content:		string	
	--self.attachment:		vector[DummyGoods]	
end

function i3k_sbean.DBWorldMail:clone()
	return clone(self)
end

function i3k_sbean.DBWorldMail:decode(is)
	self.id = is:popNumber()
	self.lvlMin = is:popNumber()
	self.lvlMax = is:popNumber()
	self.vipMin = is:popNumber()
	self.vipMax = is:popNumber()
	self.channelReq = is:popStringSet()
	self.sendTime = is:popNumber()
	self.lifeTime = is:popNumber()
	self.title = is:popString()
	self.content = is:popString()
	self.attachment = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.DBWorldMail:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.lvlMin)
	os:pushNumber(self.lvlMax)
	os:pushNumber(self.vipMin)
	os:pushNumber(self.vipMax)
	os:pushStringSet(self.channelReq)
	os:pushNumber(self.sendTime)
	os:pushNumber(self.lifeTime)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.attachment)
end


i3k_sbean.DBRollNotice = i3k_class("DBRollNotice")
function i3k_sbean.DBRollNotice:ctor()
	--self.id:		int32	
	--self.sendTime:		int32	
	--self.freq:		int32	
	--self.lifeTime:		int32	
	--self.content:		string	
	--self.type:		int8	
end

function i3k_sbean.DBRollNotice:clone()
	return clone(self)
end

function i3k_sbean.DBRollNotice:decode(is)
	self.id = is:popNumber()
	self.sendTime = is:popNumber()
	self.freq = is:popNumber()
	self.lifeTime = is:popNumber()
	self.content = is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.DBRollNotice:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.sendTime)
	os:pushNumber(self.freq)
	os:pushNumber(self.lifeTime)
	os:pushString(self.content)
	os:pushNumber(self.type)
end


i3k_sbean.DBMarriageBespeak = i3k_class("DBMarriageBespeak")
function i3k_sbean.DBMarriageBespeak:ctor()
	--self.line:		int32	
	--self.timeIndex:		int32	
	--self.marriageId:		int32	
	--self.manId:		int32	
	--self.ladyId:		int32	
	--self.manName:		string	
	--self.ladyName:		string	
	--self.time:		int32	
end

function i3k_sbean.DBMarriageBespeak:clone()
	return clone(self)
end

function i3k_sbean.DBMarriageBespeak:decode(is)
	self.line = is:popNumber()
	self.timeIndex = is:popNumber()
	self.marriageId = is:popNumber()
	self.manId = is:popNumber()
	self.ladyId = is:popNumber()
	self.manName = is:popString()
	self.ladyName = is:popString()
	self.time = is:popNumber()
end

function i3k_sbean.DBMarriageBespeak:encode(os)
	os:pushNumber(self.line)
	os:pushNumber(self.timeIndex)
	os:pushNumber(self.marriageId)
	os:pushNumber(self.manId)
	os:pushNumber(self.ladyId)
	os:pushString(self.manName)
	os:pushString(self.ladyName)
	os:pushNumber(self.time)
end


i3k_sbean.DBWearEquip = i3k_class("DBWearEquip")
function i3k_sbean.DBWearEquip:ctor()
	--self.wid:		int32	
	--self.equip:		DBEquip	
end

function i3k_sbean.DBWearEquip:clone()
	return clone(self)
end

function i3k_sbean.DBWearEquip:decode(is)
	self.wid = is:popNumber()
	self.equip = is:pop(i3k_sbean.DBEquip)
end

function i3k_sbean.DBWearEquip:encode(os)
	os:pushNumber(self.wid)
	os:push(self.equip)
end


i3k_sbean.DBEquip = i3k_class("DBEquip")
function i3k_sbean.DBEquip:ctor()
	--self.guid:		string	
	--self.id:		int32	
	--self.addValues:		vector[int32]	
	--self.durability:		int32	
	--self.refine:		vector[Prop]	
	--self.legends:		vector[int32]	
	--self.smeltingProps:		vector[Prop]	
	--self.hammerSkill:		map[int32, int32]	
	--self.padding1:		int32	
end

function i3k_sbean.DBEquip:clone()
	return clone(self)
end

function i3k_sbean.DBEquip:decode(is)
	self.guid = is:popString()
	self.id = is:popNumber()
	self.addValues = is:popNumberList()
	self.durability = is:popNumber()
	self.refine = is:popList(i3k_sbean.Prop)
	self.legends = is:popNumberList()
	self.smeltingProps = is:popList(i3k_sbean.Prop)
	self.hammerSkill = is:popNumberNumberMap()
	self.padding1 = is:popNumber()
end

function i3k_sbean.DBEquip:encode(os)
	os:pushString(self.guid)
	os:pushNumber(self.id)
	os:pushNumberList(self.addValues)
	os:pushNumber(self.durability)
	os:pushList(self.refine)
	os:pushNumberList(self.legends)
	os:pushList(self.smeltingProps)
	os:pushNumberNumberMap(self.hammerSkill)
	os:pushNumber(self.padding1)
end


i3k_sbean.DBMiscellaneous = i3k_class("DBMiscellaneous")
function i3k_sbean.DBMiscellaneous:ctor()
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.DBMiscellaneous:clone()
	return clone(self)
end

function i3k_sbean.DBMiscellaneous:decode(is)
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.DBMiscellaneous:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


i3k_sbean.DBItemCells = i3k_class("DBItemCells")
function i3k_sbean.DBItemCells:ctor()
	--self.cellSize:		int32	
	--self.expandTimes:		int32	
	--self.items:		map[int32, GameItem]	
end

function i3k_sbean.DBItemCells:clone()
	return clone(self)
end

function i3k_sbean.DBItemCells:decode(is)
	self.cellSize = is:popNumber()
	self.expandTimes = is:popNumber()
	self.items = is:popNumberMap(i3k_sbean.GameItem)
end

function i3k_sbean.DBItemCells:encode(os)
	os:pushNumber(self.cellSize)
	os:pushNumber(self.expandTimes)
	os:pushNumberMap(self.items)
end


i3k_sbean.DBRecoverPoint = i3k_class("DBRecoverPoint")
function i3k_sbean.DBRecoverPoint:ctor()
	--self.value:		int32	
	--self.recoverTime:		int32	
end

function i3k_sbean.DBRecoverPoint:clone()
	return clone(self)
end

function i3k_sbean.DBRecoverPoint:decode(is)
	self.value = is:popNumber()
	self.recoverTime = is:popNumber()
end

function i3k_sbean.DBRecoverPoint:encode(os)
	os:pushNumber(self.value)
	os:pushNumber(self.recoverTime)
end


i3k_sbean.DBVitality = i3k_class("DBVitality")
function i3k_sbean.DBVitality:ctor()
	--self.value:		int32	
	--self.recoverTime:		int32	
end

function i3k_sbean.DBVitality:clone()
	return clone(self)
end

function i3k_sbean.DBVitality:decode(is)
	self.value = is:popNumber()
	self.recoverTime = is:popNumber()
end

function i3k_sbean.DBVitality:encode(os)
	os:pushNumber(self.value)
	os:pushNumber(self.recoverTime)
end


i3k_sbean.DBActivity = i3k_class("DBActivity")
function i3k_sbean.DBActivity:ctor()
	--self.value:		int32	
end

function i3k_sbean.DBActivity:clone()
	return clone(self)
end

function i3k_sbean.DBActivity:decode(is)
	self.value = is:popNumber()
end

function i3k_sbean.DBActivity:encode(os)
	os:pushNumber(self.value)
end


i3k_sbean.DBRoleProperties = i3k_class("DBRoleProperties")
function i3k_sbean.DBRoleProperties:ctor()
	--self.equipEnergy:		int32	
	--self.gemEnergy:		int32	
	--self.runeEnergy:		int32	
end

function i3k_sbean.DBRoleProperties:clone()
	return clone(self)
end

function i3k_sbean.DBRoleProperties:decode(is)
	self.equipEnergy = is:popNumber()
	self.gemEnergy = is:popNumber()
	self.runeEnergy = is:popNumber()
end

function i3k_sbean.DBRoleProperties:encode(os)
	os:pushNumber(self.equipEnergy)
	os:pushNumber(self.gemEnergy)
	os:pushNumber(self.runeEnergy)
end


i3k_sbean.DBShopGoods = i3k_class("DBShopGoods")
function i3k_sbean.DBShopGoods:ctor()
	--self.id:		int32	
	--self.buyTimes:		int32	
end

function i3k_sbean.DBShopGoods:clone()
	return clone(self)
end

function i3k_sbean.DBShopGoods:decode(is)
	self.id = is:popNumber()
	self.buyTimes = is:popNumber()
end

function i3k_sbean.DBShopGoods:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.buyTimes)
end


i3k_sbean.DBShop = i3k_class("DBShop")
function i3k_sbean.DBShop:ctor()
	--self.type:		int32	
	--self.refreshTimes:		int32	
	--self.stamp:		int32	
	--self.goods:		vector[DBShopGoods]	
end

function i3k_sbean.DBShop:clone()
	return clone(self)
end

function i3k_sbean.DBShop:decode(is)
	self.type = is:popNumber()
	self.refreshTimes = is:popNumber()
	self.stamp = is:popNumber()
	self.goods = is:popList(i3k_sbean.DBShopGoods)
end

function i3k_sbean.DBShop:encode(os)
	os:pushNumber(self.type)
	os:pushNumber(self.refreshTimes)
	os:pushNumber(self.stamp)
	os:pushList(self.goods)
end


i3k_sbean.DBGambleShopGoods = i3k_class("DBGambleShopGoods")
function i3k_sbean.DBGambleShopGoods:ctor()
	--self.id:		int32	
	--self.buyTimes:		int32	
end

function i3k_sbean.DBGambleShopGoods:clone()
	return clone(self)
end

function i3k_sbean.DBGambleShopGoods:decode(is)
	self.id = is:popNumber()
	self.buyTimes = is:popNumber()
end

function i3k_sbean.DBGambleShopGoods:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.buyTimes)
end


i3k_sbean.DBGambleShop = i3k_class("DBGambleShop")
function i3k_sbean.DBGambleShop:ctor()
	--self.type:		int32	
	--self.refreshTimes:		int32	
	--self.stamp:		int32	
	--self.goods:		vector[DBGambleShopGoods]	
end

function i3k_sbean.DBGambleShop:clone()
	return clone(self)
end

function i3k_sbean.DBGambleShop:decode(is)
	self.type = is:popNumber()
	self.refreshTimes = is:popNumber()
	self.stamp = is:popNumber()
	self.goods = is:popList(i3k_sbean.DBGambleShopGoods)
end

function i3k_sbean.DBGambleShop:encode(os)
	os:pushNumber(self.type)
	os:pushNumber(self.refreshTimes)
	os:pushNumber(self.stamp)
	os:pushList(self.goods)
end


i3k_sbean.DBSkill = i3k_class("DBSkill")
function i3k_sbean.DBSkill:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.bourn:		int32	
end

function i3k_sbean.DBSkill:clone()
	return clone(self)
end

function i3k_sbean.DBSkill:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.bourn = is:popNumber()
end

function i3k_sbean.DBSkill:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.bourn)
end


i3k_sbean.DBCurSkill = i3k_class("DBCurSkill")
function i3k_sbean.DBCurSkill:ctor()
	--self.curSkills:		vector[int32]	
end

function i3k_sbean.DBCurSkill:clone()
	return clone(self)
end

function i3k_sbean.DBCurSkill:decode(is)
	self.curSkills = is:popNumberList()
end

function i3k_sbean.DBCurSkill:encode(os)
	os:pushNumberList(self.curSkills)
end


i3k_sbean.DBSpirit = i3k_class("DBSpirit")
function i3k_sbean.DBSpirit:ctor()
	--self.id:		int32	
	--self.level:		int32	
end

function i3k_sbean.DBSpirit:clone()
	return clone(self)
end

function i3k_sbean.DBSpirit:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.DBSpirit:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
end


i3k_sbean.DBEquipPartShow = i3k_class("DBEquipPartShow")
function i3k_sbean.DBEquipPartShow:ctor()
	--self.growLvl:		int32	
	--self.evoLvl:		int32	
end

function i3k_sbean.DBEquipPartShow:clone()
	return clone(self)
end

function i3k_sbean.DBEquipPartShow:decode(is)
	self.growLvl = is:popNumber()
	self.evoLvl = is:popNumber()
end

function i3k_sbean.DBEquipPartShow:encode(os)
	os:pushNumber(self.growLvl)
	os:pushNumber(self.evoLvl)
end


i3k_sbean.DBEquipPart = i3k_class("DBEquipPart")
function i3k_sbean.DBEquipPart:ctor()
	--self.id:		int32	
	--self.eqGrowLvl:		int32	
	--self.eqEvoLvl:		int32	
	--self.eqSlots:		vector[int32]	
	--self.upcnt:		int8	
	--self.gemBless:		map[int32, int32]	
	--self.show:		DBEquipPartShow	
	--self.extra:		DBEquipPartExtra	
end

function i3k_sbean.DBEquipPart:clone()
	return clone(self)
end

function i3k_sbean.DBEquipPart:decode(is)
	self.id = is:popNumber()
	self.eqGrowLvl = is:popNumber()
	self.eqEvoLvl = is:popNumber()
	self.eqSlots = is:popNumberList()
	self.upcnt = is:popNumber()
	self.gemBless = is:popNumberNumberMap()
	self.show = is:pop(i3k_sbean.DBEquipPartShow)
	self.extra = is:pop(i3k_sbean.DBEquipPartExtra)
end

function i3k_sbean.DBEquipPart:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.eqGrowLvl)
	os:pushNumber(self.eqEvoLvl)
	os:pushNumberList(self.eqSlots)
	os:pushNumber(self.upcnt)
	os:pushNumberNumberMap(self.gemBless)
	os:push(self.show)
	os:push(self.extra)
end


i3k_sbean.DBEquipPartExtra = i3k_class("DBEquipPartExtra")
function i3k_sbean.DBEquipPartExtra:ctor()
	--self.eqGrowBreakLvl:		int32	
	--self.padding1:		int32	
	--self.padding2:		int32	
	--self.padding3:		int32	
	--self.padding4:		int32	
end

function i3k_sbean.DBEquipPartExtra:clone()
	return clone(self)
end

function i3k_sbean.DBEquipPartExtra:decode(is)
	self.eqGrowBreakLvl = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
	self.padding3 = is:popNumber()
	self.padding4 = is:popNumber()
end

function i3k_sbean.DBEquipPartExtra:encode(os)
	os:pushNumber(self.eqGrowBreakLvl)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
	os:pushNumber(self.padding3)
	os:pushNumber(self.padding4)
end


i3k_sbean.DBWeapon = i3k_class("DBWeapon")
function i3k_sbean.DBWeapon:ctor()
	--self.id:		int32	
	--self.level:		int16	
	--self.awake:		DBWeaponAwake	
	--self.padding:		int8	
	--self.exp:		int32	
	--self.star:		int32	
	--self.fightPower:		int32	
	--self.skills:		vector[int32]	
	--self.talent:		vector[int32]	
	--self.canUseTalentPoint:		int32	
	--self.uniqueSkill:		WeaponUSkill	
	--self.form:		int8	
end

function i3k_sbean.DBWeapon:clone()
	return clone(self)
end

function i3k_sbean.DBWeapon:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.awake = is:pop(i3k_sbean.DBWeaponAwake)
	self.padding = is:popNumber()
	self.exp = is:popNumber()
	self.star = is:popNumber()
	self.fightPower = is:popNumber()
	self.skills = is:popNumberList()
	self.talent = is:popNumberList()
	self.canUseTalentPoint = is:popNumber()
	self.uniqueSkill = is:pop(i3k_sbean.WeaponUSkill)
	self.form = is:popNumber()
end

function i3k_sbean.DBWeapon:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:push(self.awake)
	os:pushNumber(self.padding)
	os:pushNumber(self.exp)
	os:pushNumber(self.star)
	os:pushNumber(self.fightPower)
	os:pushNumberList(self.skills)
	os:pushNumberList(self.talent)
	os:pushNumber(self.canUseTalentPoint)
	os:push(self.uniqueSkill)
	os:pushNumber(self.form)
end


i3k_sbean.DBWeaponAwake = i3k_class("DBWeaponAwake")
function i3k_sbean.DBWeaponAwake:ctor()
	--self.awake:		int8	
	--self.skillsLvl:		map[int32, int32]	
	--self.padding:		int32	
end

function i3k_sbean.DBWeaponAwake:clone()
	return clone(self)
end

function i3k_sbean.DBWeaponAwake:decode(is)
	self.awake = is:popNumber()
	self.skillsLvl = is:popNumberNumberMap()
	self.padding = is:popNumber()
end

function i3k_sbean.DBWeaponAwake:encode(os)
	os:pushNumber(self.awake)
	os:pushNumberNumberMap(self.skillsLvl)
	os:pushNumber(self.padding)
end


i3k_sbean.WeaponUSkill = i3k_class("WeaponUSkill")
function i3k_sbean.WeaponUSkill:ctor()
	--self.open:		int8	
	--self.master:		int32	
end

function i3k_sbean.WeaponUSkill:clone()
	return clone(self)
end

function i3k_sbean.WeaponUSkill:decode(is)
	self.open = is:popNumber()
	self.master = is:popNumber()
end

function i3k_sbean.WeaponUSkill:encode(os)
	os:pushNumber(self.open)
	os:pushNumber(self.master)
end


i3k_sbean.DBWeaponMapLog = i3k_class("DBWeaponMapLog")
function i3k_sbean.DBWeaponMapLog:ctor()
	--self.dayEnterTimes:		int32	
	--self.enterTimes:		int32	
	--self.logs:		map[int32, int32]	
end

function i3k_sbean.DBWeaponMapLog:clone()
	return clone(self)
end

function i3k_sbean.DBWeaponMapLog:decode(is)
	self.dayEnterTimes = is:popNumber()
	self.enterTimes = is:popNumber()
	self.logs = is:popNumberNumberMap()
end

function i3k_sbean.DBWeaponMapLog:encode(os)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.enterTimes)
	os:pushNumberNumberMap(self.logs)
end


i3k_sbean.BuffDrug = i3k_class("BuffDrug")
function i3k_sbean.BuffDrug:ctor()
	--self.id:		int32	
	--self.endTime:		int32	
	--self.value:		int32	
end

function i3k_sbean.BuffDrug:clone()
	return clone(self)
end

function i3k_sbean.BuffDrug:decode(is)
	self.id = is:popNumber()
	self.endTime = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.BuffDrug:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.endTime)
	os:pushNumber(self.value)
end


i3k_sbean.CBuff = i3k_class("CBuff")
function i3k_sbean.CBuff:ctor()
	--self.id:		int32	
	--self.remainTime:		int32	
	--self.realmLvl:		int32	
end

function i3k_sbean.CBuff:clone()
	return clone(self)
end

function i3k_sbean.CBuff:decode(is)
	self.id = is:popNumber()
	self.remainTime = is:popNumber()
	self.realmLvl = is:popNumber()
end

function i3k_sbean.CBuff:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.remainTime)
	os:pushNumber(self.realmLvl)
end


i3k_sbean.Buff = i3k_class("Buff")
function i3k_sbean.Buff:ctor()
	--self.id:		int32	
	--self.overLays:		int32	
	--self.value:		int32	
	--self.attackerType:		int32	
end

function i3k_sbean.Buff:clone()
	return clone(self)
end

function i3k_sbean.Buff:decode(is)
	self.id = is:popNumber()
	self.overLays = is:popNumber()
	self.value = is:popNumber()
	self.attackerType = is:popNumber()
end

function i3k_sbean.Buff:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.overLays)
	os:pushNumber(self.value)
	os:pushNumber(self.attackerType)
end


i3k_sbean.DBMainTask = i3k_class("DBMainTask")
function i3k_sbean.DBMainTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int8	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBMainTask:clone()
	return clone(self)
end

function i3k_sbean.DBMainTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBMainTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.DBTimeLimitTask = i3k_class("DBTimeLimitTask")
function i3k_sbean.DBTimeLimitTask:ctor()
	--self.id:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBTimeLimitTask:clone()
	return clone(self)
end

function i3k_sbean.DBTimeLimitTask:decode(is)
	self.id = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBTimeLimitTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.DBAlterState = i3k_class("DBAlterState")
function i3k_sbean.DBAlterState:ctor()
	--self.alterID:		int32	
	--self.attrEndTime:		int32	
end

function i3k_sbean.DBAlterState:clone()
	return clone(self)
end

function i3k_sbean.DBAlterState:decode(is)
	self.alterID = is:popNumber()
	self.attrEndTime = is:popNumber()
end

function i3k_sbean.DBAlterState:encode(os)
	os:pushNumber(self.alterID)
	os:pushNumber(self.attrEndTime)
end


i3k_sbean.DBWeaponTask = i3k_class("DBWeaponTask")
function i3k_sbean.DBWeaponTask:ctor()
	--self.type:		int32	
	--self.id:		int32	
	--self.values:		vector[int32]	
	--self.dayLoopCount:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBWeaponTask:clone()
	return clone(self)
end

function i3k_sbean.DBWeaponTask:decode(is)
	self.type = is:popNumber()
	self.id = is:popNumber()
	self.values = is:popNumberList()
	self.dayLoopCount = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBWeaponTask:encode(os)
	os:pushNumber(self.type)
	os:pushNumber(self.id)
	os:pushNumberList(self.values)
	os:pushNumber(self.dayLoopCount)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.DBPetTask = i3k_class("DBPetTask")
function i3k_sbean.DBPetTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
end

function i3k_sbean.DBPetTask:clone()
	return clone(self)
end

function i3k_sbean.DBPetTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.DBPetTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
end


i3k_sbean.DBPetLifeTask = i3k_class("DBPetLifeTask")
function i3k_sbean.DBPetLifeTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.reward:		int32	
end

function i3k_sbean.DBPetLifeTask:clone()
	return clone(self)
end

function i3k_sbean.DBPetLifeTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.DBPetLifeTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.reward)
end


i3k_sbean.DBDIYSkillData = i3k_class("DBDIYSkillData")
function i3k_sbean.DBDIYSkillData:ctor()
	--self.gradeId:		int32	
	--self.damageArgs:		vector[float]	
	--self.atrDecrease:		float	
	--self.acrDecrease:		float	
	--self.skillActionID:		int32	
	--self.damageTimes:		int8	
	--self.cd:		int32	
	--self.addSP:		int32	
	--self.scope:		vector[int32]	
	--self.buffs:		vector[DBDIYBUFF]	
end

function i3k_sbean.DBDIYSkillData:clone()
	return clone(self)
end

function i3k_sbean.DBDIYSkillData:decode(is)
	self.gradeId = is:popNumber()
	self.damageArgs = is:popNumberList()
	self.atrDecrease = is:popNumber()
	self.acrDecrease = is:popNumber()
	self.skillActionID = is:popNumber()
	self.damageTimes = is:popNumber()
	self.cd = is:popNumber()
	self.addSP = is:popNumber()
	self.scope = is:popNumberList()
	self.buffs = is:popList(i3k_sbean.DBDIYBUFF)
end

function i3k_sbean.DBDIYSkillData:encode(os)
	os:pushNumber(self.gradeId)
	os:pushNumberList(self.damageArgs)
	os:pushNumber(self.atrDecrease)
	os:pushNumber(self.acrDecrease)
	os:pushNumber(self.skillActionID)
	os:pushNumber(self.damageTimes)
	os:pushNumber(self.cd)
	os:pushNumber(self.addSP)
	os:pushNumberList(self.scope)
	os:pushList(self.buffs)
end


i3k_sbean.DBDIYBUFF = i3k_class("DBDIYBUFF")
function i3k_sbean.DBDIYBUFF:ctor()
	--self.status:		SubStatus	
	--self.loopTime:		int32	
	--self.affectValue:		int32	
end

function i3k_sbean.DBDIYBUFF:clone()
	return clone(self)
end

function i3k_sbean.DBDIYBUFF:decode(is)
	self.status = is:pop(i3k_sbean.SubStatus)
	self.loopTime = is:popNumber()
	self.affectValue = is:popNumber()
end

function i3k_sbean.DBDIYBUFF:encode(os)
	os:push(self.status)
	os:pushNumber(self.loopTime)
	os:pushNumber(self.affectValue)
end


i3k_sbean.DBDiySkill = i3k_class("DBDiySkill")
function i3k_sbean.DBDiySkill:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.iconId:		int32	
	--self.diySkillData:		DBDIYSkillData	
end

function i3k_sbean.DBDiySkill:clone()
	return clone(self)
end

function i3k_sbean.DBDiySkill:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.iconId = is:popNumber()
	self.diySkillData = is:pop(i3k_sbean.DBDIYSkillData)
end

function i3k_sbean.DBDiySkill:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushNumber(self.iconId)
	os:push(self.diySkillData)
end


i3k_sbean.DBRoleDiySkillData = i3k_class("DBRoleDiySkillData")
function i3k_sbean.DBRoleDiySkillData:ctor()
	--self.level:		int32	
	--self.exp:		int32	
	--self.slot:		int32	
	--self.curSkillId:		int32	
	--self.dayUnlockCount:		int32	
	--self.dayCreateCount:		int32	
	--self.dayBuyCount:		int32	
	--self.historyCreateCount:		int32	
	--self.diySkills:		vector[DBDiySkill]	
	--self.tmpDiySkill:		DBDIYSkillData	
	--self.borrowDiySkill:		DBDiySkill	
	--self.borrowTime:		int32	
end

function i3k_sbean.DBRoleDiySkillData:clone()
	return clone(self)
end

function i3k_sbean.DBRoleDiySkillData:decode(is)
	self.level = is:popNumber()
	self.exp = is:popNumber()
	self.slot = is:popNumber()
	self.curSkillId = is:popNumber()
	self.dayUnlockCount = is:popNumber()
	self.dayCreateCount = is:popNumber()
	self.dayBuyCount = is:popNumber()
	self.historyCreateCount = is:popNumber()
	self.diySkills = is:popList(i3k_sbean.DBDiySkill)
	self.tmpDiySkill = is:pop(i3k_sbean.DBDIYSkillData)
	self.borrowDiySkill = is:pop(i3k_sbean.DBDiySkill)
	self.borrowTime = is:popNumber()
end

function i3k_sbean.DBRoleDiySkillData:encode(os)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
	os:pushNumber(self.slot)
	os:pushNumber(self.curSkillId)
	os:pushNumber(self.dayUnlockCount)
	os:pushNumber(self.dayCreateCount)
	os:pushNumber(self.dayBuyCount)
	os:pushNumber(self.historyCreateCount)
	os:pushList(self.diySkills)
	os:push(self.tmpDiySkill)
	os:push(self.borrowDiySkill)
	os:pushNumber(self.borrowTime)
end


i3k_sbean.DBMarriageTask = i3k_class("DBMarriageTask")
function i3k_sbean.DBMarriageTask:ctor()
	--self.series:		DBMarriageSeriesTask	
	--self.loop:		DBMarriageLoopTask	
	--self.open:		int8	
end

function i3k_sbean.DBMarriageTask:clone()
	return clone(self)
end

function i3k_sbean.DBMarriageTask:decode(is)
	self.series = is:pop(i3k_sbean.DBMarriageSeriesTask)
	self.loop = is:pop(i3k_sbean.DBMarriageLoopTask)
	self.open = is:popNumber()
end

function i3k_sbean.DBMarriageTask:encode(os)
	os:push(self.series)
	os:push(self.loop)
	os:pushNumber(self.open)
end


i3k_sbean.DBMarriageSeriesTask = i3k_class("DBMarriageSeriesTask")
function i3k_sbean.DBMarriageSeriesTask:ctor()
	--self.group:		int32	
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int8	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBMarriageSeriesTask:clone()
	return clone(self)
end

function i3k_sbean.DBMarriageSeriesTask:decode(is)
	self.group = is:popNumber()
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBMarriageSeriesTask:encode(os)
	os:pushNumber(self.group)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.DBMarriageLoopTask = i3k_class("DBMarriageLoopTask")
function i3k_sbean.DBMarriageLoopTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int8	
	--self.leftCount:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBMarriageLoopTask:clone()
	return clone(self)
end

function i3k_sbean.DBMarriageLoopTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.leftCount = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBMarriageLoopTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.leftCount)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.DBCheckInLog = i3k_class("DBCheckInLog")
function i3k_sbean.DBCheckInLog:ctor()
	--self.checkinId:		int32	
	--self.finishedDays:		int32	
	--self.lastCheckInDaySeq:		int32	
end

function i3k_sbean.DBCheckInLog:clone()
	return clone(self)
end

function i3k_sbean.DBCheckInLog:decode(is)
	self.checkinId = is:popNumber()
	self.finishedDays = is:popNumber()
	self.lastCheckInDaySeq = is:popNumber()
end

function i3k_sbean.DBCheckInLog:encode(os)
	os:pushNumber(self.checkinId)
	os:pushNumber(self.finishedDays)
	os:pushNumber(self.lastCheckInDaySeq)
end


i3k_sbean.DBCheckInAdditionalLog = i3k_class("DBCheckInAdditionalLog")
function i3k_sbean.DBCheckInAdditionalLog:ctor()
	--self.log:		map[int32, int32]	
end

function i3k_sbean.DBCheckInAdditionalLog:clone()
	return clone(self)
end

function i3k_sbean.DBCheckInAdditionalLog:decode(is)
	self.log = is:popNumberNumberMap()
end

function i3k_sbean.DBCheckInAdditionalLog:encode(os)
	os:pushNumberNumberMap(self.log)
end


i3k_sbean.DBGoodsBuyLog = i3k_class("DBGoodsBuyLog")
function i3k_sbean.DBGoodsBuyLog:ctor()
	--self.id:		int32	
	--self.allBuyTimes:		int32	
	--self.dayBuyTimes:		int32	
	--self.weekBuyTimes:		int32	
end

function i3k_sbean.DBGoodsBuyLog:clone()
	return clone(self)
end

function i3k_sbean.DBGoodsBuyLog:decode(is)
	self.id = is:popNumber()
	self.allBuyTimes = is:popNumber()
	self.dayBuyTimes = is:popNumber()
	self.weekBuyTimes = is:popNumber()
end

function i3k_sbean.DBGoodsBuyLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.allBuyTimes)
	os:pushNumber(self.dayBuyTimes)
	os:pushNumber(self.weekBuyTimes)
end


i3k_sbean.DBRoleMallLogScrap = i3k_class("DBRoleMallLogScrap")
function i3k_sbean.DBRoleMallLogScrap:ctor()
	--self.id:		int32	
	--self.logTime:		int32	
	--self.fbuyLogs:		map[int32, DBGoodsBuyLog]	
	--self.rbuyLogs:		map[int32, DBGoodsBuyLog]	
end

function i3k_sbean.DBRoleMallLogScrap:clone()
	return clone(self)
end

function i3k_sbean.DBRoleMallLogScrap:decode(is)
	self.id = is:popNumber()
	self.logTime = is:popNumber()
	self.fbuyLogs = is:popNumberMap(i3k_sbean.DBGoodsBuyLog)
	self.rbuyLogs = is:popNumberMap(i3k_sbean.DBGoodsBuyLog)
end

function i3k_sbean.DBRoleMallLogScrap:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.logTime)
	os:pushNumberMap(self.fbuyLogs)
	os:pushNumberMap(self.rbuyLogs)
end


i3k_sbean.DBRoleMallLog = i3k_class("DBRoleMallLog")
function i3k_sbean.DBRoleMallLog:ctor()
	--self.id:		int32	
	--self.logTime:		int32	
	--self.buyLogs:		map[int32, DBMallBuyLogs]	
end

function i3k_sbean.DBRoleMallLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleMallLog:decode(is)
	self.id = is:popNumber()
	self.logTime = is:popNumber()
	self.buyLogs = is:popNumberMap(i3k_sbean.DBMallBuyLogs)
end

function i3k_sbean.DBRoleMallLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.logTime)
	os:pushNumberMap(self.buyLogs)
end


i3k_sbean.DBMallBuyLogs = i3k_class("DBMallBuyLogs")
function i3k_sbean.DBMallBuyLogs:ctor()
	--self.buyLogs:		map[int32, DBGoodsBuyLog]	
end

function i3k_sbean.DBMallBuyLogs:clone()
	return clone(self)
end

function i3k_sbean.DBMallBuyLogs:decode(is)
	self.buyLogs = is:popNumberMap(i3k_sbean.DBGoodsBuyLog)
end

function i3k_sbean.DBMallBuyLogs:encode(os)
	os:pushNumberMap(self.buyLogs)
end


i3k_sbean.DBRoleFirstPayGiftLog = i3k_class("DBRoleFirstPayGiftLog")
function i3k_sbean.DBRoleFirstPayGiftLog:ctor()
	--self.id:		int32	
	--self.pay:		int32	
	--self.reward:		int32	
end

function i3k_sbean.DBRoleFirstPayGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleFirstPayGiftLog:decode(is)
	self.id = is:popNumber()
	self.pay = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.DBRoleFirstPayGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.pay)
	os:pushNumber(self.reward)
end


i3k_sbean.DBRoleDailyPayGiftLog = i3k_class("DBRoleDailyPayGiftLog")
function i3k_sbean.DBRoleDailyPayGiftLog:ctor()
	--self.id:		int32	
	--self.pay:		map[int32, int32]	
	--self.reward:		set[int32]	
end

function i3k_sbean.DBRoleDailyPayGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleDailyPayGiftLog:decode(is)
	self.id = is:popNumber()
	self.pay = is:popNumberNumberMap()
	self.reward = is:popNumberSet()
end

function i3k_sbean.DBRoleDailyPayGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumberNumberMap(self.pay)
	os:pushNumberSet(self.reward)
end


i3k_sbean.DBRoleLastPayGiftLog = i3k_class("DBRoleLastPayGiftLog")
function i3k_sbean.DBRoleLastPayGiftLog:ctor()
	--self.id:		int32	
	--self.dayPayNum:		map[int32, int32]	
	--self.payDay:		set[int32]	
	--self.reward:		set[int32]	
end

function i3k_sbean.DBRoleLastPayGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleLastPayGiftLog:decode(is)
	self.id = is:popNumber()
	self.dayPayNum = is:popNumberNumberMap()
	self.payDay = is:popNumberSet()
	self.reward = is:popNumberSet()
end

function i3k_sbean.DBRoleLastPayGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumberNumberMap(self.dayPayNum)
	os:pushNumberSet(self.payDay)
	os:pushNumberSet(self.reward)
end


i3k_sbean.DBRoleActivityChallengeGiftLog = i3k_class("DBRoleActivityChallengeGiftLog")
function i3k_sbean.DBRoleActivityChallengeGiftLog:ctor()
	--self.id:		int32	
	--self.reward:		map[int32, DBRoleChallengeGiftLog]	
end

function i3k_sbean.DBRoleActivityChallengeGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleActivityChallengeGiftLog:decode(is)
	self.id = is:popNumber()
	self.reward = is:popNumberMap(i3k_sbean.DBRoleChallengeGiftLog)
end

function i3k_sbean.DBRoleActivityChallengeGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumberMap(self.reward)
end


i3k_sbean.DBRoleChallengeGiftLog = i3k_class("DBRoleChallengeGiftLog")
function i3k_sbean.DBRoleChallengeGiftLog:ctor()
	--self.id:		int32	
	--self.times:		int32	
	--self.reward:		set[int32]	
end

function i3k_sbean.DBRoleChallengeGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleChallengeGiftLog:decode(is)
	self.id = is:popNumber()
	self.times = is:popNumber()
	self.reward = is:popNumberSet()
end

function i3k_sbean.DBRoleChallengeGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.times)
	os:pushNumberSet(self.reward)
end


i3k_sbean.DBRolePayGiftLog = i3k_class("DBRolePayGiftLog")
function i3k_sbean.DBRolePayGiftLog:ctor()
	--self.id:		int32	
	--self.pay:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBRolePayGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRolePayGiftLog:decode(is)
	self.id = is:popNumber()
	self.pay = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBRolePayGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.pay)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBRolePayDiscountGiftLog = i3k_class("DBRolePayDiscountGiftLog")
function i3k_sbean.DBRolePayDiscountGiftLog:ctor()
	--self.id:		int32	
	--self.pay:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBRolePayDiscountGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRolePayDiscountGiftLog:decode(is)
	self.id = is:popNumber()
	self.pay = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBRolePayDiscountGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.pay)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBRoleSchduleGiftLog = i3k_class("DBRoleSchduleGiftLog")
function i3k_sbean.DBRoleSchduleGiftLog:ctor()
	--self.id:		int32	
	--self.schdule:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBRoleSchduleGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSchduleGiftLog:decode(is)
	self.id = is:popNumber()
	self.schdule = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBRoleSchduleGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.schdule)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBRoleLegendMakeLog = i3k_class("DBRoleLegendMakeLog")
function i3k_sbean.DBRoleLegendMakeLog:ctor()
	--self.id:		int32	
	--self.conditionTimes:		int32	
	--self.rewardTimes:		int32	
end

function i3k_sbean.DBRoleLegendMakeLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleLegendMakeLog:decode(is)
	self.id = is:popNumber()
	self.conditionTimes = is:popNumber()
	self.rewardTimes = is:popNumber()
end

function i3k_sbean.DBRoleLegendMakeLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.conditionTimes)
	os:pushNumber(self.rewardTimes)
end


i3k_sbean.DBRoleConsumeGiftLog = i3k_class("DBRoleConsumeGiftLog")
function i3k_sbean.DBRoleConsumeGiftLog:ctor()
	--self.id:		int32	
	--self.consume:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBRoleConsumeGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleConsumeGiftLog:decode(is)
	self.id = is:popNumber()
	self.consume = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBRoleConsumeGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.consume)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBRoleUpgradeGiftLog = i3k_class("DBRoleUpgradeGiftLog")
function i3k_sbean.DBRoleUpgradeGiftLog:ctor()
	--self.id:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBRoleUpgradeGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleUpgradeGiftLog:decode(is)
	self.id = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBRoleUpgradeGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBRoleInvestmentFundLog = i3k_class("DBRoleInvestmentFundLog")
function i3k_sbean.DBRoleInvestmentFundLog:ctor()
	--self.id:		int32	
	--self.buyTime:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBRoleInvestmentFundLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleInvestmentFundLog:decode(is)
	self.id = is:popNumber()
	self.buyTime = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBRoleInvestmentFundLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.buyTime)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBRoleGrowthFundLog = i3k_class("DBRoleGrowthFundLog")
function i3k_sbean.DBRoleGrowthFundLog:ctor()
	--self.id:		int32	
	--self.buyCount:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBRoleGrowthFundLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleGrowthFundLog:decode(is)
	self.id = is:popNumber()
	self.buyCount = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBRoleGrowthFundLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.buyCount)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBRoleExchangeGiftLog = i3k_class("DBRoleExchangeGiftLog")
function i3k_sbean.DBRoleExchangeGiftLog:ctor()
	--self.id:		int32	
	--self.exchangeCount:		map[int32, int32]	
end

function i3k_sbean.DBRoleExchangeGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleExchangeGiftLog:decode(is)
	self.id = is:popNumber()
	self.exchangeCount = is:popNumberNumberMap()
end

function i3k_sbean.DBRoleExchangeGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumberNumberMap(self.exchangeCount)
end


i3k_sbean.DBRoleLoginGiftLog = i3k_class("DBRoleLoginGiftLog")
function i3k_sbean.DBRoleLoginGiftLog:ctor()
	--self.id:		int32	
	--self.loginDays:		int32	
	--self.lastLoginTime:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBRoleLoginGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleLoginGiftLog:decode(is)
	self.id = is:popNumber()
	self.loginDays = is:popNumber()
	self.lastLoginTime = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBRoleLoginGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.loginDays)
	os:pushNumber(self.lastLoginTime)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBRoleLuckyGiftLog = i3k_class("DBRoleLuckyGiftLog")
function i3k_sbean.DBRoleLuckyGiftLog:ctor()
	--self.id:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBRoleLuckyGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleLuckyGiftLog:decode(is)
	self.id = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBRoleLuckyGiftLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBGoodsGroupBuyLog = i3k_class("DBGoodsGroupBuyLog")
function i3k_sbean.DBGoodsGroupBuyLog:ctor()
	--self.id:		int32	
	--self.allBuyTimes:		int32	
	--self.dayBuyTimes:		int32	
end

function i3k_sbean.DBGoodsGroupBuyLog:clone()
	return clone(self)
end

function i3k_sbean.DBGoodsGroupBuyLog:decode(is)
	self.id = is:popNumber()
	self.allBuyTimes = is:popNumber()
	self.dayBuyTimes = is:popNumber()
end

function i3k_sbean.DBGoodsGroupBuyLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.allBuyTimes)
	os:pushNumber(self.dayBuyTimes)
end


i3k_sbean.DBRoleGroupBuyLog = i3k_class("DBRoleGroupBuyLog")
function i3k_sbean.DBRoleGroupBuyLog:ctor()
	--self.logTime:		int32	
	--self.logs:		map[int32, DBGoodsGroupBuyLog]	
end

function i3k_sbean.DBRoleGroupBuyLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleGroupBuyLog:decode(is)
	self.logTime = is:popNumber()
	self.logs = is:popNumberMap(i3k_sbean.DBGoodsGroupBuyLog)
end

function i3k_sbean.DBRoleGroupBuyLog:encode(os)
	os:pushNumber(self.logTime)
	os:pushNumberMap(self.logs)
end


i3k_sbean.DBRoleSharedPayLog = i3k_class("DBRoleSharedPayLog")
function i3k_sbean.DBRoleSharedPayLog:ctor()
	--self.id:		int32	
	--self.totalPay:		int32	
	--self.takedRewards:		map[int32, DBRoleSharedPayRewardLog]	
end

function i3k_sbean.DBRoleSharedPayLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSharedPayLog:decode(is)
	self.id = is:popNumber()
	self.totalPay = is:popNumber()
	self.takedRewards = is:popNumberMap(i3k_sbean.DBRoleSharedPayRewardLog)
end

function i3k_sbean.DBRoleSharedPayLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.totalPay)
	os:pushNumberMap(self.takedRewards)
end


i3k_sbean.DBDonateLog = i3k_class("DBDonateLog")
function i3k_sbean.DBDonateLog:ctor()
	--self.dayDonateTimes:		int32	
	--self.revRewards:		set[int32]	
end

function i3k_sbean.DBDonateLog:clone()
	return clone(self)
end

function i3k_sbean.DBDonateLog:decode(is)
	self.dayDonateTimes = is:popNumber()
	self.revRewards = is:popNumberSet()
end

function i3k_sbean.DBDonateLog:encode(os)
	os:pushNumber(self.dayDonateTimes)
	os:pushNumberSet(self.revRewards)
end


i3k_sbean.DBRoleUseItemActLog = i3k_class("DBRoleUseItemActLog")
function i3k_sbean.DBRoleUseItemActLog:ctor()
	--self.id:		int32	
	--self.log:		map[int32,int32]	
	--self.takedRewards:		vector[int32]	
end

function i3k_sbean.DBRoleUseItemActLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleUseItemActLog:decode(is)
	self.id = is:popNumber()
	self.log = is:popNumberNumberMap()
	self.takedRewards = is:popNumberList()
end

function i3k_sbean.DBRoleUseItemActLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumberNumberMap(self.log)
	os:pushNumberList(self.takedRewards)
end


i3k_sbean.DBRoleRedPackLog = i3k_class("DBRoleRedPackLog")
function i3k_sbean.DBRoleRedPackLog:ctor()
	--self.id:		int32	
	--self.diamondLog:		map[int32,int32]	
	--self.coinLog:		map[int32,int32]	
	--self.takedRewards:		set[int32]	
end

function i3k_sbean.DBRoleRedPackLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleRedPackLog:decode(is)
	self.id = is:popNumber()
	self.diamondLog = is:popNumberNumberMap()
	self.coinLog = is:popNumberNumberMap()
	self.takedRewards = is:popNumberSet()
end

function i3k_sbean.DBRoleRedPackLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumberNumberMap(self.diamondLog)
	os:pushNumberNumberMap(self.coinLog)
	os:pushNumberSet(self.takedRewards)
end


i3k_sbean.DBRolePayRebateLog = i3k_class("DBRolePayRebateLog")
function i3k_sbean.DBRolePayRebateLog:ctor()
	--self.id:		int32	
	--self.payNum:		int32	
	--self.finishDay:		int32	
	--self.rewardIndex:		int32	
end

function i3k_sbean.DBRolePayRebateLog:clone()
	return clone(self)
end

function i3k_sbean.DBRolePayRebateLog:decode(is)
	self.id = is:popNumber()
	self.payNum = is:popNumber()
	self.finishDay = is:popNumber()
	self.rewardIndex = is:popNumber()
end

function i3k_sbean.DBRolePayRebateLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.payNum)
	os:pushNumber(self.finishDay)
	os:pushNumber(self.rewardIndex)
end


i3k_sbean.DBRoleSharedPayRewardLog = i3k_class("DBRoleSharedPayRewardLog")
function i3k_sbean.DBRoleSharedPayRewardLog:ctor()
	--self.payReq:		int32	
	--self.takedRewards:		set[int32]	
end

function i3k_sbean.DBRoleSharedPayRewardLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSharedPayRewardLog:decode(is)
	self.payReq = is:popNumber()
	self.takedRewards = is:popNumberSet()
end

function i3k_sbean.DBRoleSharedPayRewardLog:encode(os)
	os:pushNumber(self.payReq)
	os:pushNumberSet(self.takedRewards)
end


i3k_sbean.DBRoleFlashSaleNewLog = i3k_class("DBRoleFlashSaleNewLog")
function i3k_sbean.DBRoleFlashSaleNewLog:ctor()
	--self.logTime:		int32	
	--self.logs:		map[int32,int32]	
	--self.hasReward:		int32	
end

function i3k_sbean.DBRoleFlashSaleNewLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleFlashSaleNewLog:decode(is)
	self.logTime = is:popNumber()
	self.logs = is:popNumberNumberMap()
	self.hasReward = is:popNumber()
end

function i3k_sbean.DBRoleFlashSaleNewLog:encode(os)
	os:pushNumber(self.logTime)
	os:pushNumberNumberMap(self.logs)
	os:pushNumber(self.hasReward)
end


i3k_sbean.DBRoleFlashSaleLog = i3k_class("DBRoleFlashSaleLog")
function i3k_sbean.DBRoleFlashSaleLog:ctor()
	--self.logTime:		int32	
	--self.logs:		map[int32,int32]	
end

function i3k_sbean.DBRoleFlashSaleLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleFlashSaleLog:decode(is)
	self.logTime = is:popNumber()
	self.logs = is:popNumberNumberMap()
end

function i3k_sbean.DBRoleFlashSaleLog:encode(os)
	os:pushNumber(self.logTime)
	os:pushNumberNumberMap(self.logs)
end


i3k_sbean.DBRoleUpgradePurchaseLog = i3k_class("DBRoleUpgradePurchaseLog")
function i3k_sbean.DBRoleUpgradePurchaseLog:ctor()
	--self.id:		int32	
	--self.reward:		int32	
end

function i3k_sbean.DBRoleUpgradePurchaseLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleUpgradePurchaseLog:decode(is)
	self.id = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.DBRoleUpgradePurchaseLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.reward)
end


i3k_sbean.DBRoleDirectPurchaseLog = i3k_class("DBRoleDirectPurchaseLog")
function i3k_sbean.DBRoleDirectPurchaseLog:ctor()
	--self.id:		int32	
	--self.lastRewardTime:		int32	
	--self.rewardTimes:		map[int32, int32]	
end

function i3k_sbean.DBRoleDirectPurchaseLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleDirectPurchaseLog:decode(is)
	self.id = is:popNumber()
	self.lastRewardTime = is:popNumber()
	self.rewardTimes = is:popNumberNumberMap()
end

function i3k_sbean.DBRoleDirectPurchaseLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.lastRewardTime)
	os:pushNumberNumberMap(self.rewardTimes)
end


i3k_sbean.DBRoleOneArmBanditLog = i3k_class("DBRoleOneArmBanditLog")
function i3k_sbean.DBRoleOneArmBanditLog:ctor()
	--self.id:		int32	
	--self.pay:		int32	
	--self.useTimes:		int32	
end

function i3k_sbean.DBRoleOneArmBanditLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleOneArmBanditLog:decode(is)
	self.id = is:popNumber()
	self.pay = is:popNumber()
	self.useTimes = is:popNumber()
end

function i3k_sbean.DBRoleOneArmBanditLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.pay)
	os:pushNumber(self.useTimes)
end


i3k_sbean.DBRoleGoldenEggLog = i3k_class("DBRoleGoldenEggLog")
function i3k_sbean.DBRoleGoldenEggLog:ctor()
	--self.id:		int32	
	--self.curReward:		vector[EggReward]	
	--self.takeReward:		set[int32]	
	--self.useEgg:		set[int32]	
	--self.playTimes:		int32	
	--self.dayPlayTimes:		int32	
	--self.dayRefreshTimes:		int32	
	--self.lastPlayTime:		int32	
end

function i3k_sbean.DBRoleGoldenEggLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleGoldenEggLog:decode(is)
	self.id = is:popNumber()
	self.curReward = is:popList(i3k_sbean.EggReward)
	self.takeReward = is:popNumberSet()
	self.useEgg = is:popNumberSet()
	self.playTimes = is:popNumber()
	self.dayPlayTimes = is:popNumber()
	self.dayRefreshTimes = is:popNumber()
	self.lastPlayTime = is:popNumber()
end

function i3k_sbean.DBRoleGoldenEggLog:encode(os)
	os:pushNumber(self.id)
	os:pushList(self.curReward)
	os:pushNumberSet(self.takeReward)
	os:pushNumberSet(self.useEgg)
	os:pushNumber(self.playTimes)
	os:pushNumber(self.dayPlayTimes)
	os:pushNumber(self.dayRefreshTimes)
	os:pushNumber(self.lastPlayTime)
end


i3k_sbean.DBRoleLuckyRollerLog = i3k_class("DBRoleLuckyRollerLog")
function i3k_sbean.DBRoleLuckyRollerLog:ctor()
	--self.id:		int32	
	--self.seq:		int32	
	--self.lastPlayTime:		int32	
	--self.dayPlayTimes:		int32	
end

function i3k_sbean.DBRoleLuckyRollerLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleLuckyRollerLog:decode(is)
	self.id = is:popNumber()
	self.seq = is:popNumber()
	self.lastPlayTime = is:popNumber()
	self.dayPlayTimes = is:popNumber()
end

function i3k_sbean.DBRoleLuckyRollerLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.seq)
	os:pushNumber(self.lastPlayTime)
	os:pushNumber(self.dayPlayTimes)
end


i3k_sbean.DBActivityRank = i3k_class("DBActivityRank")
function i3k_sbean.DBActivityRank:ctor()
	--self.id:		int32	
	--self.lastTipMailDay:		int32	
	--self.isFinishReturn:		bool	
	--self.ranks:		vector[RankRole]	
end

function i3k_sbean.DBActivityRank:clone()
	return clone(self)
end

function i3k_sbean.DBActivityRank:decode(is)
	self.id = is:popNumber()
	self.lastTipMailDay = is:popNumber()
	self.isFinishReturn = is:popBool()
	self.ranks = is:popList(i3k_sbean.RankRole)
end

function i3k_sbean.DBActivityRank:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.lastTipMailDay)
	os:pushBool(self.isFinishReturn)
	os:pushList(self.ranks)
end


i3k_sbean.DBRolePayRankLog = i3k_class("DBRolePayRankLog")
function i3k_sbean.DBRolePayRankLog:ctor()
	--self.id:		int32	
	--self.pay:		int32	
end

function i3k_sbean.DBRolePayRankLog:clone()
	return clone(self)
end

function i3k_sbean.DBRolePayRankLog:decode(is)
	self.id = is:popNumber()
	self.pay = is:popNumber()
end

function i3k_sbean.DBRolePayRankLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.pay)
end


i3k_sbean.DBRoleConsumeRankLog = i3k_class("DBRoleConsumeRankLog")
function i3k_sbean.DBRoleConsumeRankLog:ctor()
	--self.id:		int32	
	--self.consume:		int32	
end

function i3k_sbean.DBRoleConsumeRankLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleConsumeRankLog:decode(is)
	self.id = is:popNumber()
	self.consume = is:popNumber()
end

function i3k_sbean.DBRoleConsumeRankLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.consume)
end


i3k_sbean.DBRoleCycleFundLog = i3k_class("DBRoleCycleFundLog")
function i3k_sbean.DBRoleCycleFundLog:ctor()
	--self.id:		int32	
	--self.lastTakeRewardTime:		int32	
	--self.seq:		int32	
end

function i3k_sbean.DBRoleCycleFundLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleCycleFundLog:decode(is)
	self.id = is:popNumber()
	self.lastTakeRewardTime = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.DBRoleCycleFundLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.lastTakeRewardTime)
	os:pushNumber(self.seq)
end


i3k_sbean.DBArenaReward = i3k_class("DBArenaReward")
function i3k_sbean.DBArenaReward:ctor()
	--self.rewardTime:		int32	
	--self.rewardRoles:		hashmap[int32, int32]	role - rank
end

function i3k_sbean.DBArenaReward:clone()
	return clone(self)
end

function i3k_sbean.DBArenaReward:decode(is)
	self.rewardTime = is:popNumber()
	self.rewardRoles = is:popNumberNumberMap()
end

function i3k_sbean.DBArenaReward:encode(os)
	os:pushNumber(self.rewardTime)
	os:pushNumberNumberMap(self.rewardRoles)
end


-- 普通竞技场
i3k_sbean.DBArena = i3k_class("DBArena")
function i3k_sbean.DBArena:ctor()
	--self.normal:		hashmap[int32, int32]	rank - role
	--self.reward:		DBArenaReward	
	--self.padding:		int32	
end

function i3k_sbean.DBArena:clone()
	return clone(self)
end

function i3k_sbean.DBArena:decode(is)
	self.normal = is:popNumberNumberMap()
	self.reward = is:pop(i3k_sbean.DBArenaReward)
	self.padding = is:popNumber()
end

function i3k_sbean.DBArena:encode(os)
	os:pushNumberNumberMap(self.normal)
	os:push(self.reward)
	os:pushNumber(self.padding)
end


-- 会武
i3k_sbean.DBSuperArenaData = i3k_class("DBSuperArenaData")
function i3k_sbean.DBSuperArenaData:ctor()
	--self.weekRank:		DBRoleRanks	
	--self.historyRank:		DBRoleRanks	
	--self.weekRankLastClearWeek:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBSuperArenaData:clone()
	return clone(self)
end

function i3k_sbean.DBSuperArenaData:decode(is)
	self.weekRank = is:pop(i3k_sbean.DBRoleRanks)
	self.historyRank = is:pop(i3k_sbean.DBRoleRanks)
	self.weekRankLastClearWeek = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBSuperArenaData:encode(os)
	os:push(self.weekRank)
	os:push(self.historyRank)
	os:pushNumber(self.weekRankLastClearWeek)
	os:pushNumber(self.padding)
end


i3k_sbean.DBBWArena = i3k_class("DBBWArena")
function i3k_sbean.DBBWArena:ctor()
	--self.whiteRanks:		vector[BWArenaRankRole]	
	--self.whiteSnapshot:		vector[BWArenaRankRole]	
	--self.blackRanks:		vector[BWArenaRankRole]	
	--self.blackSnapshot:		vector[BWArenaRankRole]	
	--self.whiteRankRewards:		map[int32, BWArenaRewardRole]	
	--self.blackRankRewards:		map[int32, BWArenaRewardRole]	
	--self.rankRefreshStamp:		int32	
	--self.rankRewardStamp:		int32	
	--self.lvlCaches:		map[int32, DBBWArenaLvlCache]	
	--self.version:		int8	
	--self.padding_2:		int8	
	--self.padding_3:		int8	
	--self.padding_4:		int8	
end

function i3k_sbean.DBBWArena:clone()
	return clone(self)
end

function i3k_sbean.DBBWArena:decode(is)
	self.whiteRanks = is:popList(i3k_sbean.BWArenaRankRole)
	self.whiteSnapshot = is:popList(i3k_sbean.BWArenaRankRole)
	self.blackRanks = is:popList(i3k_sbean.BWArenaRankRole)
	self.blackSnapshot = is:popList(i3k_sbean.BWArenaRankRole)
	self.whiteRankRewards = is:popNumberMap(i3k_sbean.BWArenaRewardRole)
	self.blackRankRewards = is:popNumberMap(i3k_sbean.BWArenaRewardRole)
	self.rankRefreshStamp = is:popNumber()
	self.rankRewardStamp = is:popNumber()
	self.lvlCaches = is:popNumberMap(i3k_sbean.DBBWArenaLvlCache)
	self.version = is:popNumber()
	self.padding_2 = is:popNumber()
	self.padding_3 = is:popNumber()
	self.padding_4 = is:popNumber()
end

function i3k_sbean.DBBWArena:encode(os)
	os:pushList(self.whiteRanks)
	os:pushList(self.whiteSnapshot)
	os:pushList(self.blackRanks)
	os:pushList(self.blackSnapshot)
	os:pushNumberMap(self.whiteRankRewards)
	os:pushNumberMap(self.blackRankRewards)
	os:pushNumber(self.rankRefreshStamp)
	os:pushNumber(self.rankRewardStamp)
	os:pushNumberMap(self.lvlCaches)
	os:pushNumber(self.version)
	os:pushNumber(self.padding_2)
	os:pushNumber(self.padding_3)
	os:pushNumber(self.padding_4)
end


i3k_sbean.DBBWArenaLvlCache = i3k_class("DBBWArenaLvlCache")
function i3k_sbean.DBBWArenaLvlCache:ctor()
	--self.cache:		map[int32, int8]	
end

function i3k_sbean.DBBWArenaLvlCache:clone()
	return clone(self)
end

function i3k_sbean.DBBWArenaLvlCache:decode(is)
	self.cache = is:popNumberNumberMap()
end

function i3k_sbean.DBBWArenaLvlCache:encode(os)
	os:pushNumberNumberMap(self.cache)
end


i3k_sbean.BWArenaRankRole = i3k_class("BWArenaRankRole")
function i3k_sbean.BWArenaRankRole:ctor()
	--self.roleSocial:		RoleSocial	
	--self.lvl:		int16	
	--self.exp:		int16	
	--self.score:		int32	
end

function i3k_sbean.BWArenaRankRole:clone()
	return clone(self)
end

function i3k_sbean.BWArenaRankRole:decode(is)
	self.roleSocial = is:pop(i3k_sbean.RoleSocial)
	self.lvl = is:popNumber()
	self.exp = is:popNumber()
	self.score = is:popNumber()
end

function i3k_sbean.BWArenaRankRole:encode(os)
	os:push(self.roleSocial)
	os:pushNumber(self.lvl)
	os:pushNumber(self.exp)
	os:pushNumber(self.score)
end


i3k_sbean.BWArenaRewardRole = i3k_class("BWArenaRewardRole")
function i3k_sbean.BWArenaRewardRole:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.rank:		int32	
end

function i3k_sbean.BWArenaRewardRole:clone()
	return clone(self)
end

function i3k_sbean.BWArenaRewardRole:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.rank = is:popNumber()
end

function i3k_sbean.BWArenaRewardRole:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushNumber(self.rank)
end


i3k_sbean.RoleNormalArenaData = i3k_class("RoleNormalArenaData")
function i3k_sbean.RoleNormalArenaData:ctor()
	--self.winTimes:		int32	
	--self.enterTimes:		int32	
	--self.point:		int32	
	--self.historyPoint:		int32	
	--self.score:		int32	
	--self.rewardScores:		vector[int32]	
	--self.timesUsed:		int32	
	--self.timesBuy:		int32	
	--self.lastFightTime:		int32	
	--self.bestRank:		int32	
	--self.defencePets:		vector[int32]	
	--self.logs:		vector[DBRoleArenaLog]	
	--self.top500Days:		int32	
	--self.curTop500Days:		int32	
	--self.hideDefence:		int8	
	--self.padding:		int32	
end

function i3k_sbean.RoleNormalArenaData:clone()
	return clone(self)
end

function i3k_sbean.RoleNormalArenaData:decode(is)
	self.winTimes = is:popNumber()
	self.enterTimes = is:popNumber()
	self.point = is:popNumber()
	self.historyPoint = is:popNumber()
	self.score = is:popNumber()
	self.rewardScores = is:popNumberList()
	self.timesUsed = is:popNumber()
	self.timesBuy = is:popNumber()
	self.lastFightTime = is:popNumber()
	self.bestRank = is:popNumber()
	self.defencePets = is:popNumberList()
	self.logs = is:popList(i3k_sbean.DBRoleArenaLog)
	self.top500Days = is:popNumber()
	self.curTop500Days = is:popNumber()
	self.hideDefence = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.RoleNormalArenaData:encode(os)
	os:pushNumber(self.winTimes)
	os:pushNumber(self.enterTimes)
	os:pushNumber(self.point)
	os:pushNumber(self.historyPoint)
	os:pushNumber(self.score)
	os:pushNumberList(self.rewardScores)
	os:pushNumber(self.timesUsed)
	os:pushNumber(self.timesBuy)
	os:pushNumber(self.lastFightTime)
	os:pushNumber(self.bestRank)
	os:pushNumberList(self.defencePets)
	os:pushList(self.logs)
	os:pushNumber(self.top500Days)
	os:pushNumber(self.curTop500Days)
	os:pushNumber(self.hideDefence)
	os:pushNumber(self.padding)
end


i3k_sbean.RoleSuperArenaData = i3k_class("RoleSuperArenaData")
function i3k_sbean.RoleSuperArenaData:ctor()
	--self.weekHonor:		int32	
	--self.rankClearTime:		int32	
	--self.point:		int32	
	--self.historyPoint:		int32	
	--self.logs:		map[int32, SuperArenaLog]	
	--self.pets:		set[int32]	
	--self.weaponSeq:		vector[int32]	
	--self.chessArmLog:		map[int32, int32]	
	--self.padding3:		int8	
	--self.padding4:		int8	
end

function i3k_sbean.RoleSuperArenaData:clone()
	return clone(self)
end

function i3k_sbean.RoleSuperArenaData:decode(is)
	self.weekHonor = is:popNumber()
	self.rankClearTime = is:popNumber()
	self.point = is:popNumber()
	self.historyPoint = is:popNumber()
	self.logs = is:popNumberMap(i3k_sbean.SuperArenaLog)
	self.pets = is:popNumberSet()
	self.weaponSeq = is:popNumberList()
	self.chessArmLog = is:popNumberNumberMap()
	self.padding3 = is:popNumber()
	self.padding4 = is:popNumber()
end

function i3k_sbean.RoleSuperArenaData:encode(os)
	os:pushNumber(self.weekHonor)
	os:pushNumber(self.rankClearTime)
	os:pushNumber(self.point)
	os:pushNumber(self.historyPoint)
	os:pushNumberMap(self.logs)
	os:pushNumberSet(self.pets)
	os:pushNumberList(self.weaponSeq)
	os:pushNumberNumberMap(self.chessArmLog)
	os:pushNumber(self.padding3)
	os:pushNumber(self.padding4)
end


i3k_sbean.SuperArenaLog = i3k_class("SuperArenaLog")
function i3k_sbean.SuperArenaLog:ctor()
	--self.dayEnterTimes:		int32	
	--self.enterTimes:		int32	
	--self.winTimes:		int32	
	--self.dayHonor:		int32	
	--self.padding:		int32	
	--self.dayFailedStreak:		int16	
	--self.elo:		int16	
end

function i3k_sbean.SuperArenaLog:clone()
	return clone(self)
end

function i3k_sbean.SuperArenaLog:decode(is)
	self.dayEnterTimes = is:popNumber()
	self.enterTimes = is:popNumber()
	self.winTimes = is:popNumber()
	self.dayHonor = is:popNumber()
	self.padding = is:popNumber()
	self.dayFailedStreak = is:popNumber()
	self.elo = is:popNumber()
end

function i3k_sbean.SuperArenaLog:encode(os)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.enterTimes)
	os:pushNumber(self.winTimes)
	os:pushNumber(self.dayHonor)
	os:pushNumber(self.padding)
	os:pushNumber(self.dayFailedStreak)
	os:pushNumber(self.elo)
end


i3k_sbean.DBRoleArenaData = i3k_class("DBRoleArenaData")
function i3k_sbean.DBRoleArenaData:ctor()
	--self.normal:		RoleNormalArenaData	
	--self.superarena:		RoleSuperArenaData	
	--self.bwarena:		RoleBWArenaData	
	--self.padding:		int32	
end

function i3k_sbean.DBRoleArenaData:clone()
	return clone(self)
end

function i3k_sbean.DBRoleArenaData:decode(is)
	self.normal = is:pop(i3k_sbean.RoleNormalArenaData)
	self.superarena = is:pop(i3k_sbean.RoleSuperArenaData)
	self.bwarena = is:pop(i3k_sbean.RoleBWArenaData)
	self.padding = is:popNumber()
end

function i3k_sbean.DBRoleArenaData:encode(os)
	os:push(self.normal)
	os:push(self.superarena)
	os:push(self.bwarena)
	os:pushNumber(self.padding)
end


i3k_sbean.DBRoleArenaLog = i3k_class("DBRoleArenaLog")
function i3k_sbean.DBRoleArenaLog:ctor()
	--self.time:		int32	
	--self.win:		int32	
	--self.attackingSideRank:		int32	
	--self.defendingSideRank:		int32	
	--self.attackingSide:		BattleArrayProfile	
	--self.defendingSide:		BattleArrayProfile	
end

function i3k_sbean.DBRoleArenaLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleArenaLog:decode(is)
	self.time = is:popNumber()
	self.win = is:popNumber()
	self.attackingSideRank = is:popNumber()
	self.defendingSideRank = is:popNumber()
	self.attackingSide = is:pop(i3k_sbean.BattleArrayProfile)
	self.defendingSide = is:pop(i3k_sbean.BattleArrayProfile)
end

function i3k_sbean.DBRoleArenaLog:encode(os)
	os:pushNumber(self.time)
	os:pushNumber(self.win)
	os:pushNumber(self.attackingSideRank)
	os:pushNumber(self.defendingSideRank)
	os:push(self.attackingSide)
	os:push(self.defendingSide)
end


i3k_sbean.RoleBWArenaData = i3k_class("RoleBWArenaData")
function i3k_sbean.RoleBWArenaData:ctor()
	--self.winTimes:		int32	
	--self.timesUsed:		int32	
	--self.timesBuy:		int32	
	--self.timesRefresh:		int32	
	--self.pets:		set[int32]	
	--self.lvl:		int32	
	--self.exp:		int32	
	--self.rankScore:		int32	
	--self.rewardScore:		int32	
	--self.curEnemies:		map[int32, int32]	
	--self.lastScoreClearWeek:		int32	
	--self.logs:		vector[DBRoleArenaLog]	
	--self.padding:		int32	
end

function i3k_sbean.RoleBWArenaData:clone()
	return clone(self)
end

function i3k_sbean.RoleBWArenaData:decode(is)
	self.winTimes = is:popNumber()
	self.timesUsed = is:popNumber()
	self.timesBuy = is:popNumber()
	self.timesRefresh = is:popNumber()
	self.pets = is:popNumberSet()
	self.lvl = is:popNumber()
	self.exp = is:popNumber()
	self.rankScore = is:popNumber()
	self.rewardScore = is:popNumber()
	self.curEnemies = is:popNumberNumberMap()
	self.lastScoreClearWeek = is:popNumber()
	self.logs = is:popList(i3k_sbean.DBRoleArenaLog)
	self.padding = is:popNumber()
end

function i3k_sbean.RoleBWArenaData:encode(os)
	os:pushNumber(self.winTimes)
	os:pushNumber(self.timesUsed)
	os:pushNumber(self.timesBuy)
	os:pushNumber(self.timesRefresh)
	os:pushNumberSet(self.pets)
	os:pushNumber(self.lvl)
	os:pushNumber(self.exp)
	os:pushNumber(self.rankScore)
	os:pushNumber(self.rewardScore)
	os:pushNumberNumberMap(self.curEnemies)
	os:pushNumber(self.lastScoreClearWeek)
	os:pushList(self.logs)
	os:pushNumber(self.padding)
end


i3k_sbean.DBRoleForceWar = i3k_class("DBRoleForceWar")
function i3k_sbean.DBRoleForceWar:ctor()
	--self.weekFeats:		int32	
	--self.totalFeats:		int32	
	--self.punishEndTime:		int32	
	--self.rankClearTime:		int32	
	--self.log:		ForceWarLog	
	--self.lotteryLog:		DBRoleForceWarLotteryLog	
	--self.padding1_2:		int8	
	--self.padding1_3:		int8	
	--self.padding1_4:		int8	
	--self.padding2:		int32	
end

function i3k_sbean.DBRoleForceWar:clone()
	return clone(self)
end

function i3k_sbean.DBRoleForceWar:decode(is)
	self.weekFeats = is:popNumber()
	self.totalFeats = is:popNumber()
	self.punishEndTime = is:popNumber()
	self.rankClearTime = is:popNumber()
	self.log = is:pop(i3k_sbean.ForceWarLog)
	self.lotteryLog = is:pop(i3k_sbean.DBRoleForceWarLotteryLog)
	self.padding1_2 = is:popNumber()
	self.padding1_3 = is:popNumber()
	self.padding1_4 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBRoleForceWar:encode(os)
	os:pushNumber(self.weekFeats)
	os:pushNumber(self.totalFeats)
	os:pushNumber(self.punishEndTime)
	os:pushNumber(self.rankClearTime)
	os:push(self.log)
	os:push(self.lotteryLog)
	os:pushNumber(self.padding1_2)
	os:pushNumber(self.padding1_3)
	os:pushNumber(self.padding1_4)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBRoleForceWarLotteryLog = i3k_class("DBRoleForceWarLotteryLog")
function i3k_sbean.DBRoleForceWarLotteryLog:ctor()
	--self.dayEnterCnt:		int32	
	--self.totalCnt:		int32	
end

function i3k_sbean.DBRoleForceWarLotteryLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleForceWarLotteryLog:decode(is)
	self.dayEnterCnt = is:popNumber()
	self.totalCnt = is:popNumber()
end

function i3k_sbean.DBRoleForceWarLotteryLog:encode(os)
	os:pushNumber(self.dayEnterCnt)
	os:pushNumber(self.totalCnt)
end


i3k_sbean.ForceWarLog = i3k_class("ForceWarLog")
function i3k_sbean.ForceWarLog:ctor()
	--self.dayEnterTimes:		int32	
	--self.enterTimes:		int32	
	--self.winTimes:		int32	
	--self.bestRank:		int32	
	--self.dayFailedStreak:		int32	
end

function i3k_sbean.ForceWarLog:clone()
	return clone(self)
end

function i3k_sbean.ForceWarLog:decode(is)
	self.dayEnterTimes = is:popNumber()
	self.enterTimes = is:popNumber()
	self.winTimes = is:popNumber()
	self.bestRank = is:popNumber()
	self.dayFailedStreak = is:popNumber()
end

function i3k_sbean.ForceWarLog:encode(os)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.enterTimes)
	os:pushNumber(self.winTimes)
	os:pushNumber(self.bestRank)
	os:pushNumber(self.dayFailedStreak)
end


i3k_sbean.DBFriend = i3k_class("DBFriend")
function i3k_sbean.DBFriend:ctor()
	--self.focusValue:		int32	
	--self.addTime:		int32	
	--self.receiveVit:		int8	
end

function i3k_sbean.DBFriend:clone()
	return clone(self)
end

function i3k_sbean.DBFriend:decode(is)
	self.focusValue = is:popNumber()
	self.addTime = is:popNumber()
	self.receiveVit = is:popNumber()
end

function i3k_sbean.DBFriend:encode(os)
	os:pushNumber(self.focusValue)
	os:pushNumber(self.addTime)
	os:pushNumber(self.receiveVit)
end


i3k_sbean.DBFriendData = i3k_class("DBFriendData")
function i3k_sbean.DBFriendData:ctor()
	--self.friends:		map[int32, DBFriend]	
	--self.sendVitRoles:		set[int32]	
	--self.fans:		set[int32]	
	--self.enemys:		map[int32,int32]	
	--self.dayVitTakeTimes:		int16	
	--self.dayStaywithRewardTimes:		int16	
	--self.vitLvl:		int32	
	--self.vitExp:		int32	
	--self.personalMsg:		string	
	--self.giveFlower:		set[int64]	
	--self.acceptFlower:		set[int64]	
	--self.charm:		int32	
	--self.historyMaxFriends:		int16	
	--self.banInteractionList:		set[int32]	
	--self.padding:		int8	
	--self.blacklist:		map[int32, int32]	
end

function i3k_sbean.DBFriendData:clone()
	return clone(self)
end

function i3k_sbean.DBFriendData:decode(is)
	self.friends = is:popNumberMap(i3k_sbean.DBFriend)
	self.sendVitRoles = is:popNumberSet()
	self.fans = is:popNumberSet()
	self.enemys = is:popNumberNumberMap()
	self.dayVitTakeTimes = is:popNumber()
	self.dayStaywithRewardTimes = is:popNumber()
	self.vitLvl = is:popNumber()
	self.vitExp = is:popNumber()
	self.personalMsg = is:popString()
	self.giveFlower = is:popNumberSet()
	self.acceptFlower = is:popNumberSet()
	self.charm = is:popNumber()
	self.historyMaxFriends = is:popNumber()
	self.banInteractionList = is:popNumberSet()
	self.padding = is:popNumber()
	self.blacklist = is:popNumberNumberMap()
end

function i3k_sbean.DBFriendData:encode(os)
	os:pushNumberMap(self.friends)
	os:pushNumberSet(self.sendVitRoles)
	os:pushNumberSet(self.fans)
	os:pushNumberNumberMap(self.enemys)
	os:pushNumber(self.dayVitTakeTimes)
	os:pushNumber(self.dayStaywithRewardTimes)
	os:pushNumber(self.vitLvl)
	os:pushNumber(self.vitExp)
	os:pushString(self.personalMsg)
	os:pushNumberSet(self.giveFlower)
	os:pushNumberSet(self.acceptFlower)
	os:pushNumber(self.charm)
	os:pushNumber(self.historyMaxFriends)
	os:pushNumberSet(self.banInteractionList)
	os:pushNumber(self.padding)
	os:pushNumberNumberMap(self.blacklist)
end


i3k_sbean.DBTempVIP = i3k_class("DBTempVIP")
function i3k_sbean.DBTempVIP:ctor()
	--self.vipLvl:		int32	
	--self.vipEndtime:		int32	
end

function i3k_sbean.DBTempVIP:clone()
	return clone(self)
end

function i3k_sbean.DBTempVIP:decode(is)
	self.vipLvl = is:popNumber()
	self.vipEndtime = is:popNumber()
end

function i3k_sbean.DBTempVIP:encode(os)
	os:pushNumber(self.vipLvl)
	os:pushNumber(self.vipEndtime)
end


i3k_sbean.DBDailyVitData = i3k_class("DBDailyVitData")
function i3k_sbean.DBDailyVitData:ctor()
	--self.lastReceiveVitTime:		int32	
	--self.reward:		set[int32]	
end

function i3k_sbean.DBDailyVitData:clone()
	return clone(self)
end

function i3k_sbean.DBDailyVitData:decode(is)
	self.lastReceiveVitTime = is:popNumber()
	self.reward = is:popNumberSet()
end

function i3k_sbean.DBDailyVitData:encode(os)
	os:pushNumber(self.lastReceiveVitTime)
	os:pushNumberSet(self.reward)
end


i3k_sbean.DBMonthlyCardData = i3k_class("DBMonthlyCardData")
function i3k_sbean.DBMonthlyCardData:ctor()
	--self.monthlyCardEndTime:		int32	
	--self.reward:		int8	
end

function i3k_sbean.DBMonthlyCardData:clone()
	return clone(self)
end

function i3k_sbean.DBMonthlyCardData:decode(is)
	self.monthlyCardEndTime = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.DBMonthlyCardData:encode(os)
	os:pushNumber(self.monthlyCardEndTime)
	os:pushNumber(self.reward)
end


i3k_sbean.DBSpecialCardData = i3k_class("DBSpecialCardData")
function i3k_sbean.DBSpecialCardData:ctor()
	--self.cardEndTime:		int32	
	--self.reward:		int8	
end

function i3k_sbean.DBSpecialCardData:clone()
	return clone(self)
end

function i3k_sbean.DBSpecialCardData:decode(is)
	self.cardEndTime = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.DBSpecialCardData:encode(os)
	os:pushNumber(self.cardEndTime)
	os:pushNumber(self.reward)
end


i3k_sbean.SectTask = i3k_class("SectTask")
function i3k_sbean.SectTask:ctor()
	--self.sid:		int32	任务刷新后的序号Id
	--self.taskId:		int32	
end

function i3k_sbean.SectTask:clone()
	return clone(self)
end

function i3k_sbean.SectTask:decode(is)
	self.sid = is:popNumber()
	self.taskId = is:popNumber()
end

function i3k_sbean.SectTask:encode(os)
	os:pushNumber(self.sid)
	os:pushNumber(self.taskId)
end


i3k_sbean.SectReceivedTask = i3k_class("SectReceivedTask")
function i3k_sbean.SectReceivedTask:ctor()
	--self.task:		SectTask	
	--self.value:		int32	
	--self.ownerId:		int32	
	--self.ownerName:		string	
	--self.receiveTime:		int32	
end

function i3k_sbean.SectReceivedTask:clone()
	return clone(self)
end

function i3k_sbean.SectReceivedTask:decode(is)
	self.task = is:pop(i3k_sbean.SectTask)
	self.value = is:popNumber()
	self.ownerId = is:popNumber()
	self.ownerName = is:popString()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.SectReceivedTask:encode(os)
	os:push(self.task)
	os:pushNumber(self.value)
	os:pushNumber(self.ownerId)
	os:pushString(self.ownerName)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.SectFinishedSelfTask = i3k_class("SectFinishedSelfTask")
function i3k_sbean.SectFinishedSelfTask:ctor()
	--self.task:		SectTask	
	--self.shared:		int32	是否共享
end

function i3k_sbean.SectFinishedSelfTask:clone()
	return clone(self)
end

function i3k_sbean.SectFinishedSelfTask:decode(is)
	self.task = is:pop(i3k_sbean.SectTask)
	self.shared = is:popNumber()
end

function i3k_sbean.SectFinishedSelfTask:encode(os)
	os:push(self.task)
	os:pushNumber(self.shared)
end


i3k_sbean.SectFinishedSharedTask = i3k_class("SectFinishedSharedTask")
function i3k_sbean.SectFinishedSharedTask:ctor()
	--self.roleId:		int32	
	--self.tasks:		set[int32]	
end

function i3k_sbean.SectFinishedSharedTask:clone()
	return clone(self)
end

function i3k_sbean.SectFinishedSharedTask:decode(is)
	self.roleId = is:popNumber()
	self.tasks = is:popNumberSet()
end

function i3k_sbean.SectFinishedSharedTask:encode(os)
	os:pushNumber(self.roleId)
	os:pushNumberSet(self.tasks)
end


i3k_sbean.RoleSectTask = i3k_class("RoleSectTask")
function i3k_sbean.RoleSectTask:ctor()
	--self.maxSeqId:		int32	
	--self.lastRefreshTime:		int32	
	--self.dayRefreshCount:		int32	
	--self.refreshedTasks:		map[int32, SectTask]	
	--self.finishedSelfTasks:		map[int32, SectFinishedSelfTask]	
	--self.finishedSharedTasks:		map[int32, SectFinishedSharedTask]	
	--self.curTask:		SectReceivedTask	
	--self.stCancelTime:		int32	
end

function i3k_sbean.RoleSectTask:clone()
	return clone(self)
end

function i3k_sbean.RoleSectTask:decode(is)
	self.maxSeqId = is:popNumber()
	self.lastRefreshTime = is:popNumber()
	self.dayRefreshCount = is:popNumber()
	self.refreshedTasks = is:popNumberMap(i3k_sbean.SectTask)
	self.finishedSelfTasks = is:popNumberMap(i3k_sbean.SectFinishedSelfTask)
	self.finishedSharedTasks = is:popNumberMap(i3k_sbean.SectFinishedSharedTask)
	self.curTask = is:pop(i3k_sbean.SectReceivedTask)
	self.stCancelTime = is:popNumber()
end

function i3k_sbean.RoleSectTask:encode(os)
	os:pushNumber(self.maxSeqId)
	os:pushNumber(self.lastRefreshTime)
	os:pushNumber(self.dayRefreshCount)
	os:pushNumberMap(self.refreshedTasks)
	os:pushNumberMap(self.finishedSelfTasks)
	os:pushNumberMap(self.finishedSharedTasks)
	os:push(self.curTask)
	os:pushNumber(self.stCancelTime)
end


i3k_sbean.SectRoleSharedTask = i3k_class("SectRoleSharedTask")
function i3k_sbean.SectRoleSharedTask:ctor()
	--self.task:		SectTask	
	--self.sharedTime:		int32	
	--self.receivedByTimes:		int32	
	--self.leftRewardTimes:		int32	
end

function i3k_sbean.SectRoleSharedTask:clone()
	return clone(self)
end

function i3k_sbean.SectRoleSharedTask:decode(is)
	self.task = is:pop(i3k_sbean.SectTask)
	self.sharedTime = is:popNumber()
	self.receivedByTimes = is:popNumber()
	self.leftRewardTimes = is:popNumber()
end

function i3k_sbean.SectRoleSharedTask:encode(os)
	os:push(self.task)
	os:pushNumber(self.sharedTime)
	os:pushNumber(self.receivedByTimes)
	os:pushNumber(self.leftRewardTimes)
end


i3k_sbean.SectRoleSharedTasks = i3k_class("SectRoleSharedTasks")
function i3k_sbean.SectRoleSharedTasks:ctor()
	--self.ownerId:		int32	
	--self.ownerName:		string	
	--self.tasks:		map[int32, SectRoleSharedTask]	
end

function i3k_sbean.SectRoleSharedTasks:clone()
	return clone(self)
end

function i3k_sbean.SectRoleSharedTasks:decode(is)
	self.ownerId = is:popNumber()
	self.ownerName = is:popString()
	self.tasks = is:popNumberMap(i3k_sbean.SectRoleSharedTask)
end

function i3k_sbean.SectRoleSharedTasks:encode(os)
	os:pushNumber(self.ownerId)
	os:pushString(self.ownerName)
	os:pushNumberMap(self.tasks)
end


i3k_sbean.SectSelfTaskInfo = i3k_class("SectSelfTaskInfo")
function i3k_sbean.SectSelfTaskInfo:ctor()
	--self.dayRefreshCount:		int32	
	--self.dayFinishedCount:		int32	
	--self.tasks:		vector[SectTask]	
end

function i3k_sbean.SectSelfTaskInfo:clone()
	return clone(self)
end

function i3k_sbean.SectSelfTaskInfo:decode(is)
	self.dayRefreshCount = is:popNumber()
	self.dayFinishedCount = is:popNumber()
	self.tasks = is:popList(i3k_sbean.SectTask)
end

function i3k_sbean.SectSelfTaskInfo:encode(os)
	os:pushNumber(self.dayRefreshCount)
	os:pushNumber(self.dayFinishedCount)
	os:pushList(self.tasks)
end


i3k_sbean.SectSharedTask = i3k_class("SectSharedTask")
function i3k_sbean.SectSharedTask:ctor()
	--self.ownerId:		int32	
	--self.ownerName:		string	
	--self.task:		vector[SectTask]	
end

function i3k_sbean.SectSharedTask:clone()
	return clone(self)
end

function i3k_sbean.SectSharedTask:decode(is)
	self.ownerId = is:popNumber()
	self.ownerName = is:popString()
	self.task = is:popList(i3k_sbean.SectTask)
end

function i3k_sbean.SectSharedTask:encode(os)
	os:pushNumber(self.ownerId)
	os:pushString(self.ownerName)
	os:pushList(self.task)
end


i3k_sbean.DBPetAwakeTask = i3k_class("DBPetAwakeTask")
function i3k_sbean.DBPetAwakeTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int8	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBPetAwakeTask:clone()
	return clone(self)
end

function i3k_sbean.DBPetAwakeTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBPetAwakeTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.DBPetAwake = i3k_class("DBPetAwake")
function i3k_sbean.DBPetAwake:ctor()
	--self.awake:		int32	
	--self.use:		int32	
	--self.task:		DBPetAwakeTask	
end

function i3k_sbean.DBPetAwake:clone()
	return clone(self)
end

function i3k_sbean.DBPetAwake:decode(is)
	self.awake = is:popNumber()
	self.use = is:popNumber()
	self.task = is:pop(i3k_sbean.DBPetAwakeTask)
end

function i3k_sbean.DBPetAwake:encode(os)
	os:pushNumber(self.awake)
	os:pushNumber(self.use)
	os:push(self.task)
end


i3k_sbean.DBPet = i3k_class("DBPet")
function i3k_sbean.DBPet:ctor()
	--self.fightPet:		DBFightPet	
	--self.exp:		int32	
	--self.coPracticeExp:		int32	
	--self.transformLvl:		int16	
	--self.awake:		DBPetAwake	
	--self.name:		string	
	--self.mapLogs:		set[int32]	
	--self.dailyCompleteTask:		int32	
	--self.task:		DBPetTask	
	--self.lifetask:		DBPetLifeTask	
	--self.exploit:		int32	
end

function i3k_sbean.DBPet:clone()
	return clone(self)
end

function i3k_sbean.DBPet:decode(is)
	self.fightPet = is:pop(i3k_sbean.DBFightPet)
	self.exp = is:popNumber()
	self.coPracticeExp = is:popNumber()
	self.transformLvl = is:popNumber()
	self.awake = is:pop(i3k_sbean.DBPetAwake)
	self.name = is:popString()
	self.mapLogs = is:popNumberSet()
	self.dailyCompleteTask = is:popNumber()
	self.task = is:pop(i3k_sbean.DBPetTask)
	self.lifetask = is:pop(i3k_sbean.DBPetLifeTask)
	self.exploit = is:popNumber()
end

function i3k_sbean.DBPet:encode(os)
	os:push(self.fightPet)
	os:pushNumber(self.exp)
	os:pushNumber(self.coPracticeExp)
	os:pushNumber(self.transformLvl)
	os:push(self.awake)
	os:pushString(self.name)
	os:pushNumberSet(self.mapLogs)
	os:pushNumber(self.dailyCompleteTask)
	os:push(self.task)
	os:push(self.lifetask)
	os:pushNumber(self.exploit)
end


i3k_sbean.DBFightPet = i3k_class("DBFightPet")
function i3k_sbean.DBFightPet:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.star:		int32	
	--self.breakSkills:		map[int32, int32]	
	--self.coPracticeLvl:		int32	
	--self.fightPower:		int32	
	--self.skill:		vector[int32]	
	--self.curSpirits:		vector[PetSpirit]	
end

function i3k_sbean.DBFightPet:clone()
	return clone(self)
end

function i3k_sbean.DBFightPet:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.star = is:popNumber()
	self.breakSkills = is:popNumberNumberMap()
	self.coPracticeLvl = is:popNumber()
	self.fightPower = is:popNumber()
	self.skill = is:popNumberList()
	self.curSpirits = is:popList(i3k_sbean.PetSpirit)
end

function i3k_sbean.DBFightPet:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.star)
	os:pushNumberNumberMap(self.breakSkills)
	os:pushNumber(self.coPracticeLvl)
	os:pushNumber(self.fightPower)
	os:pushNumberList(self.skill)
	os:pushList(self.curSpirits)
end


i3k_sbean.PetSpirit = i3k_class("PetSpirit")
function i3k_sbean.PetSpirit:ctor()
	--self.id:		int32	
	--self.level:		int32	
end

function i3k_sbean.PetSpirit:clone()
	return clone(self)
end

function i3k_sbean.PetSpirit:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.PetSpirit:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
end


i3k_sbean.DBSuite = i3k_class("DBSuite")
function i3k_sbean.DBSuite:ctor()
	--self.id:		int32	
	--self.collect:		set[int32]	
end

function i3k_sbean.DBSuite:clone()
	return clone(self)
end

function i3k_sbean.DBSuite:decode(is)
	self.id = is:popNumber()
	self.collect = is:popNumberSet()
end

function i3k_sbean.DBSuite:encode(os)
	os:pushNumber(self.id)
	os:pushNumberSet(self.collect)
end


i3k_sbean.DBNormalMapCopyLog = i3k_class("DBNormalMapCopyLog")
function i3k_sbean.DBNormalMapCopyLog:ctor()
	--self.finishTimes:		int32	
	--self.enterTimes:		int32	
	--self.bestScore:		int32	
	--self.dayEnterTimes:		int32	
	--self.dayBuyTimes:		int32	
	--self.rewardTimes:		int32	
end

function i3k_sbean.DBNormalMapCopyLog:clone()
	return clone(self)
end

function i3k_sbean.DBNormalMapCopyLog:decode(is)
	self.finishTimes = is:popNumber()
	self.enterTimes = is:popNumber()
	self.bestScore = is:popNumber()
	self.dayEnterTimes = is:popNumber()
	self.dayBuyTimes = is:popNumber()
	self.rewardTimes = is:popNumber()
end

function i3k_sbean.DBNormalMapCopyLog:encode(os)
	os:pushNumber(self.finishTimes)
	os:pushNumber(self.enterTimes)
	os:pushNumber(self.bestScore)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.dayBuyTimes)
	os:pushNumber(self.rewardTimes)
end


i3k_sbean.DBActivityMapGroupLog = i3k_class("DBActivityMapGroupLog")
function i3k_sbean.DBActivityMapGroupLog:ctor()
	--self.historyEnterTimes:		int32	
	--self.enterMaps:		set[int32]	
	--self.dayEnterTimes:		int32	
	--self.dayVIPBuyTimes:		int8	
	--self.dayItemAddTimes:		int8	
	--self.padding1:		int8	
	--self.padding2:		int8	
	--self.records:		map[int32,int32]	
end

function i3k_sbean.DBActivityMapGroupLog:clone()
	return clone(self)
end

function i3k_sbean.DBActivityMapGroupLog:decode(is)
	self.historyEnterTimes = is:popNumber()
	self.enterMaps = is:popNumberSet()
	self.dayEnterTimes = is:popNumber()
	self.dayVIPBuyTimes = is:popNumber()
	self.dayItemAddTimes = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
	self.records = is:popNumberNumberMap()
end

function i3k_sbean.DBActivityMapGroupLog:encode(os)
	os:pushNumber(self.historyEnterTimes)
	os:pushNumberSet(self.enterMaps)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.dayVIPBuyTimes)
	os:pushNumber(self.dayItemAddTimes)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
	os:pushNumberNumberMap(self.records)
end


i3k_sbean.DBTowerDefenceMapLog = i3k_class("DBTowerDefenceMapLog")
function i3k_sbean.DBTowerDefenceMapLog:ctor()
	--self.finishTimes:		int32	
	--self.enterTimes:		int32	
	--self.dayEnterTimes:		int32	
	--self.dayBuyTimes:		int32	
	--self.bestCount:		int32	
	--self.bestScore:		int32	
	--self.useTime:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBTowerDefenceMapLog:clone()
	return clone(self)
end

function i3k_sbean.DBTowerDefenceMapLog:decode(is)
	self.finishTimes = is:popNumber()
	self.enterTimes = is:popNumber()
	self.dayEnterTimes = is:popNumber()
	self.dayBuyTimes = is:popNumber()
	self.bestCount = is:popNumber()
	self.bestScore = is:popNumber()
	self.useTime = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBTowerDefenceMapLog:encode(os)
	os:pushNumber(self.finishTimes)
	os:pushNumber(self.enterTimes)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.dayBuyTimes)
	os:pushNumber(self.bestCount)
	os:pushNumber(self.bestScore)
	os:pushNumber(self.useTime)
	os:pushNumber(self.padding)
end


i3k_sbean.DBCurPet = i3k_class("DBCurPet")
function i3k_sbean.DBCurPet:ctor()
	--self.curPets:		vector[int32]	
end

function i3k_sbean.DBCurPet:clone()
	return clone(self)
end

function i3k_sbean.DBCurPet:decode(is)
	self.curPets = is:popNumberList()
end

function i3k_sbean.DBCurPet:encode(os)
	os:pushNumberList(self.curPets)
end


i3k_sbean.DBSectAura = i3k_class("DBSectAura")
function i3k_sbean.DBSectAura:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.items:		map[int32, int32]	
end

function i3k_sbean.DBSectAura:clone()
	return clone(self)
end

function i3k_sbean.DBSectAura:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.DBSectAura:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumberNumberMap(self.items)
end


i3k_sbean.DBSectHistory = i3k_class("DBSectHistory")
function i3k_sbean.DBSectHistory:ctor()
	--self.time:		int32	
	--self.eid:		int32	
	--self.memberName:		string	
	--self.operatorName:		string	
	--self.arg:		int32	
	--self.arg2:		int32	
end

function i3k_sbean.DBSectHistory:clone()
	return clone(self)
end

function i3k_sbean.DBSectHistory:decode(is)
	self.time = is:popNumber()
	self.eid = is:popNumber()
	self.memberName = is:popString()
	self.operatorName = is:popString()
	self.arg = is:popNumber()
	self.arg2 = is:popNumber()
end

function i3k_sbean.DBSectHistory:encode(os)
	os:pushNumber(self.time)
	os:pushNumber(self.eid)
	os:pushString(self.memberName)
	os:pushString(self.operatorName)
	os:pushNumber(self.arg)
	os:pushNumber(self.arg2)
end


i3k_sbean.SectShareTaskLibInfo = i3k_class("SectShareTaskLibInfo")
function i3k_sbean.SectShareTaskLibInfo:ctor()
	--self.roleId:		int32	
	--self.taskId:		int32	
	--self.count:		int32	
end

function i3k_sbean.SectShareTaskLibInfo:clone()
	return clone(self)
end

function i3k_sbean.SectShareTaskLibInfo:decode(is)
	self.roleId = is:popNumber()
	self.taskId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.SectShareTaskLibInfo:encode(os)
	os:pushNumber(self.roleId)
	os:pushNumber(self.taskId)
	os:pushNumber(self.count)
end


i3k_sbean.SectTaskResetInfo = i3k_class("SectTaskResetInfo")
function i3k_sbean.SectTaskResetInfo:ctor()
	--self.tasks:		vector[int32]	
	--self.resetTime:		int32	
end

function i3k_sbean.SectTaskResetInfo:clone()
	return clone(self)
end

function i3k_sbean.SectTaskResetInfo:decode(is)
	self.tasks = is:popNumberList()
	self.resetTime = is:popNumber()
end

function i3k_sbean.SectTaskResetInfo:encode(os)
	os:pushNumberList(self.tasks)
	os:pushNumber(self.resetTime)
end


i3k_sbean.DBSectShareTaskInfo = i3k_class("DBSectShareTaskInfo")
function i3k_sbean.DBSectShareTaskInfo:ctor()
	--self.residual:		int32	
	--self.alreadyAward:		int32	
end

function i3k_sbean.DBSectShareTaskInfo:clone()
	return clone(self)
end

function i3k_sbean.DBSectShareTaskInfo:decode(is)
	self.residual = is:popNumber()
	self.alreadyAward = is:popNumber()
end

function i3k_sbean.DBSectShareTaskInfo:encode(os)
	os:pushNumber(self.residual)
	os:pushNumber(self.alreadyAward)
end


i3k_sbean.DBSectMember = i3k_class("DBSectMember")
function i3k_sbean.DBSectMember:ctor()
	--self.data:		SectMember	
	--self.worshiped:		SectWorshipedData	
	--self.padding:		int32	
end

function i3k_sbean.DBSectMember:clone()
	return clone(self)
end

function i3k_sbean.DBSectMember:decode(is)
	self.data = is:pop(i3k_sbean.SectMember)
	self.worshiped = is:pop(i3k_sbean.SectWorshipedData)
	self.padding = is:popNumber()
end

function i3k_sbean.DBSectMember:encode(os)
	os:push(self.data)
	os:push(self.worshiped)
	os:pushNumber(self.padding)
end


i3k_sbean.DBRoleSectData = i3k_class("DBRoleSectData")
function i3k_sbean.DBRoleSectData:ctor()
	--self.data:		RoleSectData	
	--self.task:		RoleSectTask	
	--self.dayFinishTime:		int16	
	--self.luckyStarTaskCnts:		int16	
	--self.takeMapRewardCnt:		int8	
	--self.padding1:		int8	
	--self.padding2:		int8	
	--self.padding3:		int8	
end

function i3k_sbean.DBRoleSectData:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSectData:decode(is)
	self.data = is:pop(i3k_sbean.RoleSectData)
	self.task = is:pop(i3k_sbean.RoleSectTask)
	self.dayFinishTime = is:popNumber()
	self.luckyStarTaskCnts = is:popNumber()
	self.takeMapRewardCnt = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
	self.padding3 = is:popNumber()
end

function i3k_sbean.DBRoleSectData:encode(os)
	os:push(self.data)
	os:push(self.task)
	os:pushNumber(self.dayFinishTime)
	os:pushNumber(self.luckyStarTaskCnts)
	os:pushNumber(self.takeMapRewardCnt)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
	os:pushNumber(self.padding3)
end


i3k_sbean.DBDailyTask = i3k_class("DBDailyTask")
function i3k_sbean.DBDailyTask:ctor()
	--self.id:		int32	
	--self.times:		int32	
	--self.rewards:		int32	
end

function i3k_sbean.DBDailyTask:clone()
	return clone(self)
end

function i3k_sbean.DBDailyTask:decode(is)
	self.id = is:popNumber()
	self.times = is:popNumber()
	self.rewards = is:popNumber()
end

function i3k_sbean.DBDailyTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.times)
	os:pushNumber(self.rewards)
end


i3k_sbean.DBQuizGift = i3k_class("DBQuizGift")
function i3k_sbean.DBQuizGift:ctor()
	--self.bonus:		int32	
	--self.expReward:		int32	
	--self.doubleBonusUsed:		int32	
	--self.continuousRightAnswer:		int32	
	--self.lastAnsweredQuestionSeq:		int32	
	--self.lastAnsweredQuestionResult:		int32	
end

function i3k_sbean.DBQuizGift:clone()
	return clone(self)
end

function i3k_sbean.DBQuizGift:decode(is)
	self.bonus = is:popNumber()
	self.expReward = is:popNumber()
	self.doubleBonusUsed = is:popNumber()
	self.continuousRightAnswer = is:popNumber()
	self.lastAnsweredQuestionSeq = is:popNumber()
	self.lastAnsweredQuestionResult = is:popNumber()
end

function i3k_sbean.DBQuizGift:encode(os)
	os:pushNumber(self.bonus)
	os:pushNumber(self.expReward)
	os:pushNumber(self.doubleBonusUsed)
	os:pushNumber(self.continuousRightAnswer)
	os:pushNumber(self.lastAnsweredQuestionSeq)
	os:pushNumber(self.lastAnsweredQuestionResult)
end


i3k_sbean.DBLuckyWheel = i3k_class("DBLuckyWheel")
function i3k_sbean.DBLuckyWheel:ctor()
	--self.totalDrawTimes:		int32	
	--self.buyTimes:		int32	
	--self.Id:		int32	
end

function i3k_sbean.DBLuckyWheel:clone()
	return clone(self)
end

function i3k_sbean.DBLuckyWheel:decode(is)
	self.totalDrawTimes = is:popNumber()
	self.buyTimes = is:popNumber()
	self.Id = is:popNumber()
end

function i3k_sbean.DBLuckyWheel:encode(os)
	os:pushNumber(self.totalDrawTimes)
	os:pushNumber(self.buyTimes)
	os:pushNumber(self.Id)
end


i3k_sbean.DBChallengeTask = i3k_class("DBChallengeTask")
function i3k_sbean.DBChallengeTask:ctor()
	--self.type:		int32	
	--self.seq:		int8	
	--self.logCnt:		DBChallengeTaskLog	
	--self.padding1:		int8	
	--self.padding2:		int8	
	--self.reward:		int8	
end

function i3k_sbean.DBChallengeTask:clone()
	return clone(self)
end

function i3k_sbean.DBChallengeTask:decode(is)
	self.type = is:popNumber()
	self.seq = is:popNumber()
	self.logCnt = is:pop(i3k_sbean.DBChallengeTaskLog)
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.DBChallengeTask:encode(os)
	os:pushNumber(self.type)
	os:pushNumber(self.seq)
	os:push(self.logCnt)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
	os:pushNumber(self.reward)
end


i3k_sbean.DBChallengeTaskLog = i3k_class("DBChallengeTaskLog")
function i3k_sbean.DBChallengeTaskLog:ctor()
	--self.cnt:		int32	
end

function i3k_sbean.DBChallengeTaskLog:clone()
	return clone(self)
end

function i3k_sbean.DBChallengeTaskLog:decode(is)
	self.cnt = is:popNumber()
end

function i3k_sbean.DBChallengeTaskLog:encode(os)
	os:pushNumber(self.cnt)
end


i3k_sbean.DBFame = i3k_class("DBFame")
function i3k_sbean.DBFame:ctor()
	--self.level:		int32	
	--self.upgradeTime:		int32	
	--self.reward:		int8	
end

function i3k_sbean.DBFame:clone()
	return clone(self)
end

function i3k_sbean.DBFame:decode(is)
	self.level = is:popNumber()
	self.upgradeTime = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.DBFame:encode(os)
	os:pushNumber(self.level)
	os:pushNumber(self.upgradeTime)
	os:pushNumber(self.reward)
end


i3k_sbean.DBDailyOnlineGift = i3k_class("DBDailyOnlineGift")
function i3k_sbean.DBDailyOnlineGift:ctor()
	--self.dayOnlineTime:		int32	
	--self.rewards:		set[int32]	
end

function i3k_sbean.DBDailyOnlineGift:clone()
	return clone(self)
end

function i3k_sbean.DBDailyOnlineGift:decode(is)
	self.dayOnlineTime = is:popNumber()
	self.rewards = is:popNumberSet()
end

function i3k_sbean.DBDailyOnlineGift:encode(os)
	os:pushNumber(self.dayOnlineTime)
	os:pushNumberSet(self.rewards)
end


i3k_sbean.DBOfflineExp = i3k_class("DBOfflineExp")
function i3k_sbean.DBOfflineExp:ctor()
	--self.accTimeTotal:		int32	
	--self.accExpTotal:		int64	
	--self.accDrops:		vector[DummyGoods]	
	--self.dailyOfflineExp:		int64	
	--self.lastLogTime:		int32	
	--self.lastDayTakeMin:		int32	
end

function i3k_sbean.DBOfflineExp:clone()
	return clone(self)
end

function i3k_sbean.DBOfflineExp:decode(is)
	self.accTimeTotal = is:popNumber()
	self.accExpTotal = is:popNumber()
	self.accDrops = is:popList(i3k_sbean.DummyGoods)
	self.dailyOfflineExp = is:popNumber()
	self.lastLogTime = is:popNumber()
	self.lastDayTakeMin = is:popNumber()
end

function i3k_sbean.DBOfflineExp:encode(os)
	os:pushNumber(self.accTimeTotal)
	os:pushNumber(self.accExpTotal)
	os:pushList(self.accDrops)
	os:pushNumber(self.dailyOfflineExp)
	os:pushNumber(self.lastLogTime)
	os:pushNumber(self.lastDayTakeMin)
end


i3k_sbean.DBShareDiySkillList = i3k_class("DBShareDiySkillList")
function i3k_sbean.DBShareDiySkillList:ctor()
	--self.diyskills:		vector[DBShareDiySkill]	
end

function i3k_sbean.DBShareDiySkillList:clone()
	return clone(self)
end

function i3k_sbean.DBShareDiySkillList:decode(is)
	self.diyskills = is:popList(i3k_sbean.DBShareDiySkill)
end

function i3k_sbean.DBShareDiySkillList:encode(os)
	os:pushList(self.diyskills)
end


i3k_sbean.DBShareDiySkill = i3k_class("DBShareDiySkill")
function i3k_sbean.DBShareDiySkill:ctor()
	--self.skill:		DBDiySkill	
	--self.shareTime:		int32	
	--self.takeCount:		int32	
	--self.awardCount:		int32	
end

function i3k_sbean.DBShareDiySkill:clone()
	return clone(self)
end

function i3k_sbean.DBShareDiySkill:decode(is)
	self.skill = is:pop(i3k_sbean.DBDiySkill)
	self.shareTime = is:popNumber()
	self.takeCount = is:popNumber()
	self.awardCount = is:popNumber()
end

function i3k_sbean.DBShareDiySkill:encode(os)
	os:push(self.skill)
	os:pushNumber(self.shareTime)
	os:pushNumber(self.takeCount)
	os:pushNumber(self.awardCount)
end


i3k_sbean.DBDiySkillShare = i3k_class("DBDiySkillShare")
function i3k_sbean.DBDiySkillShare:ctor()
	--self.diySkill:		DBShareDiySkill	
	--self.roleId:		int32	
	--self.serverId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.DBDiySkillShare:clone()
	return clone(self)
end

function i3k_sbean.DBDiySkillShare:decode(is)
	self.diySkill = is:pop(i3k_sbean.DBShareDiySkill)
	self.roleId = is:popNumber()
	self.serverId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.DBDiySkillShare:encode(os)
	os:push(self.diySkill)
	os:pushNumber(self.roleId)
	os:pushNumber(self.serverId)
	os:pushString(self.roleName)
end


i3k_sbean.DBShareDiySkillData = i3k_class("DBShareDiySkillData")
function i3k_sbean.DBShareDiySkillData:ctor()
	--self.diySkillData:		DBRoleDiySkillData	
	--self.diySkillShare:		vector[DBDiySkillShare]	
end

function i3k_sbean.DBShareDiySkillData:clone()
	return clone(self)
end

function i3k_sbean.DBShareDiySkillData:decode(is)
	self.diySkillData = is:pop(i3k_sbean.DBRoleDiySkillData)
	self.diySkillShare = is:popList(i3k_sbean.DBDiySkillShare)
end

function i3k_sbean.DBShareDiySkillData:encode(os)
	os:push(self.diySkillData)
	os:pushList(self.diySkillShare)
end


i3k_sbean.DBConsignItems = i3k_class("DBConsignItems")
function i3k_sbean.DBConsignItems:ctor()
	--self.id:		int32	
	--self.count:		int32	
	--self.equip:		DBEquip	
	--self.price:		int32	
	--self.time:		int32	
	--self.showTime:		int32	
end

function i3k_sbean.DBConsignItems:clone()
	return clone(self)
end

function i3k_sbean.DBConsignItems:decode(is)
	self.id = is:popNumber()
	self.count = is:popNumber()
	self.equip = is:pop(i3k_sbean.DBEquip)
	self.price = is:popNumber()
	self.time = is:popNumber()
	self.showTime = is:popNumber()
end

function i3k_sbean.DBConsignItems:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
	os:push(self.equip)
	os:pushNumber(self.price)
	os:pushNumber(self.time)
	os:pushNumber(self.showTime)
end


i3k_sbean.DBAuctionInfo = i3k_class("DBAuctionInfo")
function i3k_sbean.DBAuctionInfo:ctor()
	--self.consignments:		set[int32]	
	--self.cellSize:		int32	
	--self.expandTimes:		int32	
	--self.tradeLogs:		vector[DBConsignItems]	
	--self.buyItemsCnt:		int32	
	--self.sellItemsCnt:		int32	
end

function i3k_sbean.DBAuctionInfo:clone()
	return clone(self)
end

function i3k_sbean.DBAuctionInfo:decode(is)
	self.consignments = is:popNumberSet()
	self.cellSize = is:popNumber()
	self.expandTimes = is:popNumber()
	self.tradeLogs = is:popList(i3k_sbean.DBConsignItems)
	self.buyItemsCnt = is:popNumber()
	self.sellItemsCnt = is:popNumber()
end

function i3k_sbean.DBAuctionInfo:encode(os)
	os:pushNumberSet(self.consignments)
	os:pushNumber(self.cellSize)
	os:pushNumber(self.expandTimes)
	os:pushList(self.tradeLogs)
	os:pushNumber(self.buyItemsCnt)
	os:pushNumber(self.sellItemsCnt)
end


i3k_sbean.DBTreasure = i3k_class("DBTreasure")
function i3k_sbean.DBTreasure:ctor()
	--self.npcInfo:		TreasureNPC	
	--self.mapInfo:		TreasureMap	
	--self.medals:		map[int32,int8]	
	--self.padding:		int32	
end

function i3k_sbean.DBTreasure:clone()
	return clone(self)
end

function i3k_sbean.DBTreasure:decode(is)
	self.npcInfo = is:pop(i3k_sbean.TreasureNPC)
	self.mapInfo = is:pop(i3k_sbean.TreasureMap)
	self.medals = is:popNumberNumberMap()
	self.padding = is:popNumber()
end

function i3k_sbean.DBTreasure:encode(os)
	os:push(self.npcInfo)
	os:push(self.mapInfo)
	os:pushNumberNumberMap(self.medals)
	os:pushNumber(self.padding)
end


i3k_sbean.DBRanks = i3k_class("DBRanks")
function i3k_sbean.DBRanks:ctor()
	--self.roleRanks:		vector[DBRoleRanks]	
	--self.sectRanks:		vector[DBSectRanks]	
	--self.fTeamRanks:		vector[DBFightTeamRanks]	
	--self.padding1_2:		int8	
	--self.padding1_3:		int8	
	--self.padding1_4:		int8	
	--self.padding2:		int32	
end

function i3k_sbean.DBRanks:clone()
	return clone(self)
end

function i3k_sbean.DBRanks:decode(is)
	self.roleRanks = is:popList(i3k_sbean.DBRoleRanks)
	self.sectRanks = is:popList(i3k_sbean.DBSectRanks)
	self.fTeamRanks = is:popList(i3k_sbean.DBFightTeamRanks)
	self.padding1_2 = is:popNumber()
	self.padding1_3 = is:popNumber()
	self.padding1_4 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBRanks:encode(os)
	os:pushList(self.roleRanks)
	os:pushList(self.sectRanks)
	os:pushList(self.fTeamRanks)
	os:pushNumber(self.padding1_2)
	os:pushNumber(self.padding1_3)
	os:pushNumber(self.padding1_4)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBRoleRanks = i3k_class("DBRoleRanks")
function i3k_sbean.DBRoleRanks:ctor()
	--self.id:		int32	
	--self.ranks:		vector[RankRole]	
	--self.snapshot:		vector[RankRole]	
	--self.snapshotCreateTime:		int32	
	--self.lastRewardTime:		int32	
end

function i3k_sbean.DBRoleRanks:clone()
	return clone(self)
end

function i3k_sbean.DBRoleRanks:decode(is)
	self.id = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.snapshot = is:popList(i3k_sbean.RankRole)
	self.snapshotCreateTime = is:popNumber()
	self.lastRewardTime = is:popNumber()
end

function i3k_sbean.DBRoleRanks:encode(os)
	os:pushNumber(self.id)
	os:pushList(self.ranks)
	os:pushList(self.snapshot)
	os:pushNumber(self.snapshotCreateTime)
	os:pushNumber(self.lastRewardTime)
end


i3k_sbean.DBSectRanks = i3k_class("DBSectRanks")
function i3k_sbean.DBSectRanks:ctor()
	--self.id:		int32	
	--self.ranks:		vector[RankSect]	
	--self.snapshot:		vector[RankSect]	
	--self.snapshotCreateTime:		int32	
	--self.lastRewardTime:		int32	
end

function i3k_sbean.DBSectRanks:clone()
	return clone(self)
end

function i3k_sbean.DBSectRanks:decode(is)
	self.id = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankSect)
	self.snapshot = is:popList(i3k_sbean.RankSect)
	self.snapshotCreateTime = is:popNumber()
	self.lastRewardTime = is:popNumber()
end

function i3k_sbean.DBSectRanks:encode(os)
	os:pushNumber(self.id)
	os:pushList(self.ranks)
	os:pushList(self.snapshot)
	os:pushNumber(self.snapshotCreateTime)
	os:pushNumber(self.lastRewardTime)
end


i3k_sbean.DBFightGroupRanks = i3k_class("DBFightGroupRanks")
function i3k_sbean.DBFightGroupRanks:ctor()
	--self.id:		int32	
	--self.ranks:		vector[RankFightGroup]	
	--self.snapshot:		vector[RankFightGroup]	
	--self.snapshotCreateTime:		int32	
	--self.lastRewardTime:		int32	
end

function i3k_sbean.DBFightGroupRanks:clone()
	return clone(self)
end

function i3k_sbean.DBFightGroupRanks:decode(is)
	self.id = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankFightGroup)
	self.snapshot = is:popList(i3k_sbean.RankFightGroup)
	self.snapshotCreateTime = is:popNumber()
	self.lastRewardTime = is:popNumber()
end

function i3k_sbean.DBFightGroupRanks:encode(os)
	os:pushNumber(self.id)
	os:pushList(self.ranks)
	os:pushList(self.snapshot)
	os:pushNumber(self.snapshotCreateTime)
	os:pushNumber(self.lastRewardTime)
end


i3k_sbean.DBFightTeamRanks = i3k_class("DBFightTeamRanks")
function i3k_sbean.DBFightTeamRanks:ctor()
	--self.id:		int32	
	--self.ranks:		vector[RankFightTeam]	
	--self.snapshot:		vector[RankFightTeam]	
	--self.snapshotCreateTime:		int32	
	--self.lastRewardTime:		int32	
end

function i3k_sbean.DBFightTeamRanks:clone()
	return clone(self)
end

function i3k_sbean.DBFightTeamRanks:decode(is)
	self.id = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankFightTeam)
	self.snapshot = is:popList(i3k_sbean.RankFightTeam)
	self.snapshotCreateTime = is:popNumber()
	self.lastRewardTime = is:popNumber()
end

function i3k_sbean.DBFightTeamRanks:encode(os)
	os:pushNumber(self.id)
	os:pushList(self.ranks)
	os:pushList(self.snapshot)
	os:pushNumber(self.snapshotCreateTime)
	os:pushNumber(self.lastRewardTime)
end


i3k_sbean.TreasureNPC = i3k_class("TreasureNPC")
function i3k_sbean.TreasureNPC:ctor()
	--self.npcs:		map[int32, NPCState]	
	--self.finishMaps:		set[int32]	
	--self.lastRefreshDay:		int32	
	--self.pieceLog:		set[int32]	
end

function i3k_sbean.TreasureNPC:clone()
	return clone(self)
end

function i3k_sbean.TreasureNPC:decode(is)
	self.npcs = is:popNumberMap(i3k_sbean.NPCState)
	self.finishMaps = is:popNumberSet()
	self.lastRefreshDay = is:popNumber()
	self.pieceLog = is:popNumberSet()
end

function i3k_sbean.TreasureNPC:encode(os)
	os:pushNumberMap(self.npcs)
	os:pushNumberSet(self.finishMaps)
	os:pushNumber(self.lastRefreshDay)
	os:pushNumberSet(self.pieceLog)
end


i3k_sbean.TreasureMap = i3k_class("TreasureMap")
function i3k_sbean.TreasureMap:ctor()
	--self.curMap:		MapState	
	--self.pieces:		map[int32, int32]	
end

function i3k_sbean.TreasureMap:clone()
	return clone(self)
end

function i3k_sbean.TreasureMap:decode(is)
	self.curMap = is:pop(i3k_sbean.MapState)
	self.pieces = is:popNumberNumberMap()
end

function i3k_sbean.TreasureMap:encode(os)
	os:push(self.curMap)
	os:pushNumberNumberMap(self.pieces)
end


i3k_sbean.NPCState = i3k_class("NPCState")
function i3k_sbean.NPCState:ctor()
	--self.open:		int8	
	--self.lib:		map[int32, int32]	
	--self.fame:		int32	
	--self.reward:		int8	
	--self.refreshTimes:		int32	
end

function i3k_sbean.NPCState:clone()
	return clone(self)
end

function i3k_sbean.NPCState:decode(is)
	self.open = is:popNumber()
	self.lib = is:popNumberNumberMap()
	self.fame = is:popNumber()
	self.reward = is:popNumber()
	self.refreshTimes = is:popNumber()
end

function i3k_sbean.NPCState:encode(os)
	os:pushNumber(self.open)
	os:pushNumberNumberMap(self.lib)
	os:pushNumber(self.fame)
	os:pushNumber(self.reward)
	os:pushNumber(self.refreshTimes)
end


i3k_sbean.MapState = i3k_class("MapState")
function i3k_sbean.MapState:ctor()
	--self.mapID:		int32	
	--self.open:		int8	
	--self.points:		map[int32, int8]	
end

function i3k_sbean.MapState:clone()
	return clone(self)
end

function i3k_sbean.MapState:decode(is)
	self.mapID = is:popNumber()
	self.open = is:popNumber()
	self.points = is:popNumberNumberMap()
end

function i3k_sbean.MapState:encode(os)
	os:pushNumber(self.mapID)
	os:pushNumber(self.open)
	os:pushNumberNumberMap(self.points)
end


-- showIDs、curShowID废弃字段
i3k_sbean.HorseInfo = i3k_class("HorseInfo")
function i3k_sbean.HorseInfo:ctor()
	--self.id:		int32	
	--self.star:		int8	
	--self.enhanceAttrs:		vector[Prop]	
	--self.enhanceTimes:		int32	
	--self.curHorseSkills:		map[int32, int32]	
	--self.enhanceLvl:		int16	
	--self.breakLvl:		int16	
	--self.enhanceExp:		int32	
	--self.showIDs:		set[int32]	
	--self.curShowID:		int32	
end

function i3k_sbean.HorseInfo:clone()
	return clone(self)
end

function i3k_sbean.HorseInfo:decode(is)
	self.id = is:popNumber()
	self.star = is:popNumber()
	self.enhanceAttrs = is:popList(i3k_sbean.Prop)
	self.enhanceTimes = is:popNumber()
	self.curHorseSkills = is:popNumberNumberMap()
	self.enhanceLvl = is:popNumber()
	self.breakLvl = is:popNumber()
	self.enhanceExp = is:popNumber()
	self.showIDs = is:popNumberSet()
	self.curShowID = is:popNumber()
end

function i3k_sbean.HorseInfo:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.star)
	os:pushList(self.enhanceAttrs)
	os:pushNumber(self.enhanceTimes)
	os:pushNumberNumberMap(self.curHorseSkills)
	os:pushNumber(self.enhanceLvl)
	os:pushNumber(self.breakLvl)
	os:pushNumber(self.enhanceExp)
	os:pushNumberSet(self.showIDs)
	os:pushNumber(self.curShowID)
end


i3k_sbean.HorseShow = i3k_class("HorseShow")
function i3k_sbean.HorseShow:ctor()
	--self.showIDs:		map[int32, int32]	
	--self.curShowID:		int32	
end

function i3k_sbean.HorseShow:clone()
	return clone(self)
end

function i3k_sbean.HorseShow:decode(is)
	self.showIDs = is:popNumberNumberMap()
	self.curShowID = is:popNumber()
end

function i3k_sbean.HorseShow:encode(os)
	os:pushNumberNumberMap(self.showIDs)
	os:pushNumber(self.curShowID)
end


i3k_sbean.HorseMaster = i3k_class("HorseMaster")
function i3k_sbean.HorseMaster:ctor()
	--self.unLocks:		set[int32]	
end

function i3k_sbean.HorseMaster:clone()
	return clone(self)
end

function i3k_sbean.HorseMaster:decode(is)
	self.unLocks = is:popNumberSet()
end

function i3k_sbean.HorseMaster:encode(os)
	os:pushNumberSet(self.unLocks)
end


i3k_sbean.HorseFight = i3k_class("HorseFight")
function i3k_sbean.HorseFight:ctor()
	--self.fightShowIDs:		set[int32]	
	--self.exp:		int32	
	--self.level:		int32	
	--self.masters:		map[int32, HorseMaster]	
	--self.padding:		int32	
end

function i3k_sbean.HorseFight:clone()
	return clone(self)
end

function i3k_sbean.HorseFight:decode(is)
	self.fightShowIDs = is:popNumberSet()
	self.exp = is:popNumber()
	self.level = is:popNumber()
	self.masters = is:popNumberMap(i3k_sbean.HorseMaster)
	self.padding = is:popNumber()
end

function i3k_sbean.HorseFight:encode(os)
	os:pushNumberSet(self.fightShowIDs)
	os:pushNumber(self.exp)
	os:pushNumber(self.level)
	os:pushNumberMap(self.masters)
	os:pushNumber(self.padding)
end


i3k_sbean.DBHorse = i3k_class("DBHorse")
function i3k_sbean.DBHorse:ctor()
	--self.horses:		map[int32, HorseInfo]	
	--self.allHorseSkills:		map[int32, int32]	
	--self.inuseHorse:		int32	
	--self.show:		HorseShow	
	--self.fightData:		HorseFight	
	--self.spirit:		DBHorseSpirit	
	--self.padding4:		int8	
end

function i3k_sbean.DBHorse:clone()
	return clone(self)
end

function i3k_sbean.DBHorse:decode(is)
	self.horses = is:popNumberMap(i3k_sbean.HorseInfo)
	self.allHorseSkills = is:popNumberNumberMap()
	self.inuseHorse = is:popNumber()
	self.show = is:pop(i3k_sbean.HorseShow)
	self.fightData = is:pop(i3k_sbean.HorseFight)
	self.spirit = is:pop(i3k_sbean.DBHorseSpirit)
	self.padding4 = is:popNumber()
end

function i3k_sbean.DBHorse:encode(os)
	os:pushNumberMap(self.horses)
	os:pushNumberNumberMap(self.allHorseSkills)
	os:pushNumber(self.inuseHorse)
	os:push(self.show)
	os:push(self.fightData)
	os:push(self.spirit)
	os:pushNumber(self.padding4)
end


i3k_sbean.DBHorseSpirit = i3k_class("DBHorseSpirit")
function i3k_sbean.DBHorseSpirit:ctor()
	--self.star:		int32	
	--self.upStarTimes:		int32	
	--self.showIDs:		map[int32, int32]	
	--self.curShowID:		int32	
	--self.hide:		int32	
	--self.autoChange:		int32	
	--self.skills:		map[int32, HorseSpiritSkill]	
	--self.padding:		int32	
end

function i3k_sbean.DBHorseSpirit:clone()
	return clone(self)
end

function i3k_sbean.DBHorseSpirit:decode(is)
	self.star = is:popNumber()
	self.upStarTimes = is:popNumber()
	self.showIDs = is:popNumberNumberMap()
	self.curShowID = is:popNumber()
	self.hide = is:popNumber()
	self.autoChange = is:popNumber()
	self.skills = is:popNumberMap(i3k_sbean.HorseSpiritSkill)
	self.padding = is:popNumber()
end

function i3k_sbean.DBHorseSpirit:encode(os)
	os:pushNumber(self.star)
	os:pushNumber(self.upStarTimes)
	os:pushNumberNumberMap(self.showIDs)
	os:pushNumber(self.curShowID)
	os:pushNumber(self.hide)
	os:pushNumber(self.autoChange)
	os:pushNumberMap(self.skills)
	os:pushNumber(self.padding)
end


i3k_sbean.HorseSpiritSkill = i3k_class("HorseSpiritSkill")
function i3k_sbean.HorseSpiritSkill:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.padding:		int32	
end

function i3k_sbean.HorseSpiritSkill:clone()
	return clone(self)
end

function i3k_sbean.HorseSpiritSkill:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.HorseSpiritSkill:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.padding)
end


i3k_sbean.DBRoleFashion = i3k_class("DBRoleFashion")
function i3k_sbean.DBRoleFashion:ctor()
	--self.allFashions:		map[int32, DBFashion]	
	--self.curFashions:		map[int32, int32]	
	--self.idle:		int8	
end

function i3k_sbean.DBRoleFashion:clone()
	return clone(self)
end

function i3k_sbean.DBRoleFashion:decode(is)
	self.allFashions = is:popNumberMap(i3k_sbean.DBFashion)
	self.curFashions = is:popNumberNumberMap()
	self.idle = is:popNumber()
end

function i3k_sbean.DBRoleFashion:encode(os)
	os:pushNumberMap(self.allFashions)
	os:pushNumberNumberMap(self.curFashions)
	os:pushNumber(self.idle)
end


i3k_sbean.DBFashion = i3k_class("DBFashion")
function i3k_sbean.DBFashion:ctor()
	--self.id:		int32	
	--self.enhanceProps:		vector[Prop]	
	--self.enhanceTimes:		int32	
	--self.isInWardrobe:		int8	
	--self.padding1:		int8	
	--self.padding2:		int8	
	--self.padding3:		int8	
	--self.padding4:		int32	
	--self.padding5:		int32	
end

function i3k_sbean.DBFashion:clone()
	return clone(self)
end

function i3k_sbean.DBFashion:decode(is)
	self.id = is:popNumber()
	self.enhanceProps = is:popList(i3k_sbean.Prop)
	self.enhanceTimes = is:popNumber()
	self.isInWardrobe = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
	self.padding3 = is:popNumber()
	self.padding4 = is:popNumber()
	self.padding5 = is:popNumber()
end

function i3k_sbean.DBFashion:encode(os)
	os:pushNumber(self.id)
	os:pushList(self.enhanceProps)
	os:pushNumber(self.enhanceTimes)
	os:pushNumber(self.isInWardrobe)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
	os:pushNumber(self.padding3)
	os:pushNumber(self.padding4)
	os:pushNumber(self.padding5)
end


i3k_sbean.DBSealData = i3k_class("DBSealData")
function i3k_sbean.DBSealData:ctor()
	--self.grade:		int32	
	--self.skills:		map[int32, int32]	
	--self.enhanceCount:		int32	
	--self.tempSkills:		map[int32, int32]	
end

function i3k_sbean.DBSealData:clone()
	return clone(self)
end

function i3k_sbean.DBSealData:decode(is)
	self.grade = is:popNumber()
	self.skills = is:popNumberNumberMap()
	self.enhanceCount = is:popNumber()
	self.tempSkills = is:popNumberNumberMap()
end

function i3k_sbean.DBSealData:encode(os)
	os:pushNumber(self.grade)
	os:pushNumberNumberMap(self.skills)
	os:pushNumber(self.enhanceCount)
	os:pushNumberNumberMap(self.tempSkills)
end


i3k_sbean.DBExpCoinData = i3k_class("DBExpCoinData")
function i3k_sbean.DBExpCoinData:ctor()
	--self.curExpCoin:		int32	
	--self.outExp:		int32	
	--self.dayTakeTimes:		int32	
end

function i3k_sbean.DBExpCoinData:clone()
	return clone(self)
end

function i3k_sbean.DBExpCoinData:decode(is)
	self.curExpCoin = is:popNumber()
	self.outExp = is:popNumber()
	self.dayTakeTimes = is:popNumber()
end

function i3k_sbean.DBExpCoinData:encode(os)
	os:pushNumber(self.curExpCoin)
	os:pushNumber(self.outExp)
	os:pushNumber(self.dayTakeTimes)
end


i3k_sbean.DBRareBook = i3k_class("DBRareBook")
function i3k_sbean.DBRareBook:ctor()
	--self.books:		map[int32, int32]	
	--self.bag:		map[int32, int32]	
end

function i3k_sbean.DBRareBook:clone()
	return clone(self)
end

function i3k_sbean.DBRareBook:decode(is)
	self.books = is:popNumberNumberMap()
	self.bag = is:popNumberNumberMap()
end

function i3k_sbean.DBRareBook:encode(os)
	os:pushNumberNumberMap(self.books)
	os:pushNumberNumberMap(self.bag)
end


i3k_sbean.DBGrasp = i3k_class("DBGrasp")
function i3k_sbean.DBGrasp:ctor()
	--self.dayFortune:		int8	
	--self.dayGraspTimes:		int8	
	--self.lastGraspTime:		int32	
	--self.dayGraspRids:		set[int32]	
	--self.grasps:		map[int32, GraspInfo]	
end

function i3k_sbean.DBGrasp:clone()
	return clone(self)
end

function i3k_sbean.DBGrasp:decode(is)
	self.dayFortune = is:popNumber()
	self.dayGraspTimes = is:popNumber()
	self.lastGraspTime = is:popNumber()
	self.dayGraspRids = is:popNumberSet()
	self.grasps = is:popNumberMap(i3k_sbean.GraspInfo)
end

function i3k_sbean.DBGrasp:encode(os)
	os:pushNumber(self.dayFortune)
	os:pushNumber(self.dayGraspTimes)
	os:pushNumber(self.lastGraspTime)
	os:pushNumberSet(self.dayGraspRids)
	os:pushNumberMap(self.grasps)
end


i3k_sbean.DBDMGTransfer = i3k_class("DBDMGTransfer")
function i3k_sbean.DBDMGTransfer:ctor()
	--self.levels:		map[int32, int32]	
	--self.usePoints:		int32	
	--self.totalPoints:		int32	
	--self.buyTimes:		int32	
end

function i3k_sbean.DBDMGTransfer:clone()
	return clone(self)
end

function i3k_sbean.DBDMGTransfer:decode(is)
	self.levels = is:popNumberNumberMap()
	self.usePoints = is:popNumber()
	self.totalPoints = is:popNumber()
	self.buyTimes = is:popNumber()
end

function i3k_sbean.DBDMGTransfer:encode(os)
	os:pushNumberNumberMap(self.levels)
	os:pushNumber(self.usePoints)
	os:pushNumber(self.totalPoints)
	os:pushNumber(self.buyTimes)
end


i3k_sbean.GraspInfo = i3k_class("GraspInfo")
function i3k_sbean.GraspInfo:ctor()
	--self.lvl:		int32	
	--self.exp:		int32	
end

function i3k_sbean.GraspInfo:clone()
	return clone(self)
end

function i3k_sbean.GraspInfo:decode(is)
	self.lvl = is:popNumber()
	self.exp = is:popNumber()
end

function i3k_sbean.GraspInfo:encode(os)
	os:pushNumber(self.lvl)
	os:pushNumber(self.exp)
end


i3k_sbean.DBCBOperations = i3k_class("DBCBOperations")
function i3k_sbean.DBCBOperations:ctor()
	--self.userSurvey:		DBUserSurvey	
	--self.dailyLogin:		set[int32]	
	--self.lvlUpRewards:		set[int32]	
	--self.useinfo:		DBUserData	
	--self.countdown:		set[int32]	
	--self.onTime:		set[int32]	
	--self.strengthen:		set[int32]	
	--self.officialResearch:		int8	
end

function i3k_sbean.DBCBOperations:clone()
	return clone(self)
end

function i3k_sbean.DBCBOperations:decode(is)
	self.userSurvey = is:pop(i3k_sbean.DBUserSurvey)
	self.dailyLogin = is:popNumberSet()
	self.lvlUpRewards = is:popNumberSet()
	self.useinfo = is:pop(i3k_sbean.DBUserData)
	self.countdown = is:popNumberSet()
	self.onTime = is:popNumberSet()
	self.strengthen = is:popNumberSet()
	self.officialResearch = is:popNumber()
end

function i3k_sbean.DBCBOperations:encode(os)
	os:push(self.userSurvey)
	os:pushNumberSet(self.dailyLogin)
	os:pushNumberSet(self.lvlUpRewards)
	os:push(self.useinfo)
	os:pushNumberSet(self.countdown)
	os:pushNumberSet(self.onTime)
	os:pushNumberSet(self.strengthen)
	os:pushNumber(self.officialResearch)
end


i3k_sbean.DBUserSurvey = i3k_class("DBUserSurvey")
function i3k_sbean.DBUserSurvey:ctor()
	--self.answers:		vector[IntSet]	
	--self.reward:		int8	
end

function i3k_sbean.DBUserSurvey:clone()
	return clone(self)
end

function i3k_sbean.DBUserSurvey:decode(is)
	self.answers = is:popList(i3k_sbean.IntSet)
	self.reward = is:popNumber()
end

function i3k_sbean.DBUserSurvey:encode(os)
	os:pushList(self.answers)
	os:pushNumber(self.reward)
end


i3k_sbean.DBUserData = i3k_class("DBUserData")
function i3k_sbean.DBUserData:ctor()
	--self.qq:		string	
	--self.cellphone:		string	
	--self.isOldUser:		int8	
	--self.reward:		int8	
end

function i3k_sbean.DBUserData:clone()
	return clone(self)
end

function i3k_sbean.DBUserData:decode(is)
	self.qq = is:popString()
	self.cellphone = is:popString()
	self.isOldUser = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.DBUserData:encode(os)
	os:pushString(self.qq)
	os:pushString(self.cellphone)
	os:pushNumber(self.isOldUser)
	os:pushNumber(self.reward)
end


i3k_sbean.DBBoss = i3k_class("DBBoss")
function i3k_sbean.DBBoss:ctor()
	--self.lastDayRefresh:		int32	
	--self.bosses:		map[int32, DBBossState]	
end

function i3k_sbean.DBBoss:clone()
	return clone(self)
end

function i3k_sbean.DBBoss:decode(is)
	self.lastDayRefresh = is:popNumber()
	self.bosses = is:popNumberMap(i3k_sbean.DBBossState)
end

function i3k_sbean.DBBoss:encode(os)
	os:pushNumber(self.lastDayRefresh)
	os:pushNumberMap(self.bosses)
end


i3k_sbean.DBBossState = i3k_class("DBBossState")
function i3k_sbean.DBBossState:ctor()
	--self.curHp:		int32	
	--self.seq:		int32	
	--self.refreshTime:		int32	
	--self.killerName:		string	
	--self.records:		map[int32, BossRecord]	
end

function i3k_sbean.DBBossState:clone()
	return clone(self)
end

function i3k_sbean.DBBossState:decode(is)
	self.curHp = is:popNumber()
	self.seq = is:popNumber()
	self.refreshTime = is:popNumber()
	self.killerName = is:popString()
	self.records = is:popNumberMap(i3k_sbean.BossRecord)
end

function i3k_sbean.DBBossState:encode(os)
	os:pushNumber(self.curHp)
	os:pushNumber(self.seq)
	os:pushNumber(self.refreshTime)
	os:pushString(self.killerName)
	os:pushNumberMap(self.records)
end


i3k_sbean.DBRoleRobberMonster = i3k_class("DBRoleRobberMonster")
function i3k_sbean.DBRoleRobberMonster:ctor()
	--self.dayRefreshTimes:		int32	
	--self.robbers:		vector[int32]	
	--self.padding:		int32	
end

function i3k_sbean.DBRoleRobberMonster:clone()
	return clone(self)
end

function i3k_sbean.DBRoleRobberMonster:decode(is)
	self.dayRefreshTimes = is:popNumber()
	self.robbers = is:popNumberList()
	self.padding = is:popNumber()
end

function i3k_sbean.DBRoleRobberMonster:encode(os)
	os:pushNumber(self.dayRefreshTimes)
	os:pushNumberList(self.robbers)
	os:pushNumber(self.padding)
end


i3k_sbean.DBStele = i3k_class("DBStele")
function i3k_sbean.DBStele:ctor()
	--self.lastDayRefresh:		int32	
	--self.lastCreateSteleTime:		int32	
	--self.type:		int32	
	--self.remainTimes:		vector[int32]	
	--self.ranks:		vector[RankRole]	
	--self.isRankWeardSend:		int8	
end

function i3k_sbean.DBStele:clone()
	return clone(self)
end

function i3k_sbean.DBStele:decode(is)
	self.lastDayRefresh = is:popNumber()
	self.lastCreateSteleTime = is:popNumber()
	self.type = is:popNumber()
	self.remainTimes = is:popNumberList()
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.isRankWeardSend = is:popNumber()
end

function i3k_sbean.DBStele:encode(os)
	os:pushNumber(self.lastDayRefresh)
	os:pushNumber(self.lastCreateSteleTime)
	os:pushNumber(self.type)
	os:pushNumberList(self.remainTimes)
	os:pushList(self.ranks)
	os:pushNumber(self.isRankWeardSend)
end


i3k_sbean.DBMapFlag = i3k_class("DBMapFlag")
function i3k_sbean.DBMapFlag:ctor()
	--self.mapFlags:		map[int32, DBMapFlagInfo]	
end

function i3k_sbean.DBMapFlag:clone()
	return clone(self)
end

function i3k_sbean.DBMapFlag:decode(is)
	self.mapFlags = is:popNumberMap(i3k_sbean.DBMapFlagInfo)
end

function i3k_sbean.DBMapFlag:encode(os)
	os:pushNumberMap(self.mapFlags)
end


i3k_sbean.DBEmergency = i3k_class("DBEmergency")
function i3k_sbean.DBEmergency:ctor()
	--self.ranks:		vector[RankRole]	
	--self.rankday:		int32	
	--self.isRankWeardSend:		int8	
	--self.joinRoles:		map[int32, int32]	
end

function i3k_sbean.DBEmergency:clone()
	return clone(self)
end

function i3k_sbean.DBEmergency:decode(is)
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.rankday = is:popNumber()
	self.isRankWeardSend = is:popNumber()
	self.joinRoles = is:popNumberNumberMap()
end

function i3k_sbean.DBEmergency:encode(os)
	os:pushList(self.ranks)
	os:pushNumber(self.rankday)
	os:pushNumber(self.isRankWeardSend)
	os:pushNumberNumberMap(self.joinRoles)
end


i3k_sbean.DBMapFlagInfo = i3k_class("DBMapFlagInfo")
function i3k_sbean.DBMapFlagInfo:ctor()
	--self.mapId:		int32	
	--self.curSectId:		int32	
	--self.occupyTime:		int32	
	--self.lastRoleRewardTime:		int32	
	--self.lastSectRewardTime:		int32	
end

function i3k_sbean.DBMapFlagInfo:clone()
	return clone(self)
end

function i3k_sbean.DBMapFlagInfo:decode(is)
	self.mapId = is:popNumber()
	self.curSectId = is:popNumber()
	self.occupyTime = is:popNumber()
	self.lastRoleRewardTime = is:popNumber()
	self.lastSectRewardTime = is:popNumber()
end

function i3k_sbean.DBMapFlagInfo:encode(os)
	os:pushNumber(self.mapId)
	os:pushNumber(self.curSectId)
	os:pushNumber(self.occupyTime)
	os:pushNumber(self.lastRoleRewardTime)
	os:pushNumber(self.lastSectRewardTime)
end


i3k_sbean.DBTitleSlot = i3k_class("DBTitleSlot")
function i3k_sbean.DBTitleSlot:ctor()
	--self.titletype:		int32	
	--self.titleId:		int32	
end

function i3k_sbean.DBTitleSlot:clone()
	return clone(self)
end

function i3k_sbean.DBTitleSlot:decode(is)
	self.titletype = is:popNumber()
	self.titleId = is:popNumber()
end

function i3k_sbean.DBTitleSlot:encode(os)
	os:pushNumber(self.titletype)
	os:pushNumber(self.titleId)
end


i3k_sbean.DBRoleTitle = i3k_class("DBRoleTitle")
function i3k_sbean.DBRoleTitle:ctor()
	--self.titles:		map[int32, int32]	
	--self.curPermanent:		int32	
	--self.curTimedTitles:		vector[DBTitleSlot]	
	--self.slotsize:		int32	
end

function i3k_sbean.DBRoleTitle:clone()
	return clone(self)
end

function i3k_sbean.DBRoleTitle:decode(is)
	self.titles = is:popNumberNumberMap()
	self.curPermanent = is:popNumber()
	self.curTimedTitles = is:popList(i3k_sbean.DBTitleSlot)
	self.slotsize = is:popNumber()
end

function i3k_sbean.DBRoleTitle:encode(os)
	os:pushNumberNumberMap(self.titles)
	os:pushNumber(self.curPermanent)
	os:pushList(self.curTimedTitles)
	os:pushNumber(self.slotsize)
end


i3k_sbean.DBBranchTask = i3k_class("DBBranchTask")
function i3k_sbean.DBBranchTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBBranchTask:clone()
	return clone(self)
end

function i3k_sbean.DBBranchTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBBranchTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.DBForceFameTask = i3k_class("DBForceFameTask")
function i3k_sbean.DBForceFameTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBForceFameTask:clone()
	return clone(self)
end

function i3k_sbean.DBForceFameTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBForceFameTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.DBClimbTower = i3k_class("DBClimbTower")
function i3k_sbean.DBClimbTower:ctor()
	--self.dayTimesBuy:		int32	
	--self.dayTimesUsed:		int32	
	--self.finishFloors:		set[int32]	
	--self.pets:		set[int32]	
	--self.history:		map[int32, int32]	
end

function i3k_sbean.DBClimbTower:clone()
	return clone(self)
end

function i3k_sbean.DBClimbTower:decode(is)
	self.dayTimesBuy = is:popNumber()
	self.dayTimesUsed = is:popNumber()
	self.finishFloors = is:popNumberSet()
	self.pets = is:popNumberSet()
	self.history = is:popNumberNumberMap()
end

function i3k_sbean.DBClimbTower:encode(os)
	os:pushNumber(self.dayTimesBuy)
	os:pushNumber(self.dayTimesUsed)
	os:pushNumberSet(self.finishFloors)
	os:pushNumberSet(self.pets)
	os:pushNumberNumberMap(self.history)
end


i3k_sbean.DBClimbTowerRecordDataCfg = i3k_class("DBClimbTowerRecordDataCfg")
function i3k_sbean.DBClimbTowerRecordDataCfg:ctor()
	--self.roleId:		int32	
	--self.name:		string	
	--self.floor:		int32	
end

function i3k_sbean.DBClimbTowerRecordDataCfg:clone()
	return clone(self)
end

function i3k_sbean.DBClimbTowerRecordDataCfg:decode(is)
	self.roleId = is:popNumber()
	self.name = is:popString()
	self.floor = is:popNumber()
end

function i3k_sbean.DBClimbTowerRecordDataCfg:encode(os)
	os:pushNumber(self.roleId)
	os:pushString(self.name)
	os:pushNumber(self.floor)
end


i3k_sbean.DBClimbTowerServerRecordDataCfg = i3k_class("DBClimbTowerServerRecordDataCfg")
function i3k_sbean.DBClimbTowerServerRecordDataCfg:ctor()
	--self.datas:		map[int32, DBClimbTowerRecordDataCfg]	
end

function i3k_sbean.DBClimbTowerServerRecordDataCfg:clone()
	return clone(self)
end

function i3k_sbean.DBClimbTowerServerRecordDataCfg:decode(is)
	self.datas = is:popNumberMap(i3k_sbean.DBClimbTowerRecordDataCfg)
end

function i3k_sbean.DBClimbTowerServerRecordDataCfg:encode(os)
	os:pushNumberMap(self.datas)
end


i3k_sbean.DBClimbTowerRecordData = i3k_class("DBClimbTowerRecordData")
function i3k_sbean.DBClimbTowerRecordData:ctor()
	--self.ownData:		int32	
	--self.sectData:		DBClimbTowerRecordDataCfg	
	--self.serverData:		DBClimbTowerRecordDataCfg	
end

function i3k_sbean.DBClimbTowerRecordData:clone()
	return clone(self)
end

function i3k_sbean.DBClimbTowerRecordData:decode(is)
	self.ownData = is:popNumber()
	self.sectData = is:pop(i3k_sbean.DBClimbTowerRecordDataCfg)
	self.serverData = is:pop(i3k_sbean.DBClimbTowerRecordDataCfg)
end

function i3k_sbean.DBClimbTowerRecordData:encode(os)
	os:pushNumber(self.ownData)
	os:push(self.sectData)
	os:push(self.serverData)
end


i3k_sbean.DBClimbTowerFame = i3k_class("DBClimbTowerFame")
function i3k_sbean.DBClimbTowerFame:ctor()
	--self.level:		int32	
	--self.fame:		int32	
	--self.reward:		set[int32]	
end

function i3k_sbean.DBClimbTowerFame:clone()
	return clone(self)
end

function i3k_sbean.DBClimbTowerFame:decode(is)
	self.level = is:popNumber()
	self.fame = is:popNumber()
	self.reward = is:popNumberSet()
end

function i3k_sbean.DBClimbTowerFame:encode(os)
	os:pushNumber(self.level)
	os:pushNumber(self.fame)
	os:pushNumberSet(self.reward)
end


i3k_sbean.DBSecretTaskData = i3k_class("DBSecretTaskData")
function i3k_sbean.DBSecretTaskData:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.reward:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBSecretTaskData:clone()
	return clone(self)
end

function i3k_sbean.DBSecretTaskData:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.reward = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBSecretTaskData:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.reward)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.SectDeliverReward = i3k_class("SectDeliverReward")
function i3k_sbean.SectDeliverReward:ctor()
	--self.exp:		int32	
	--self.extTo:		int32	
	--self.money:		int32	
	--self.moneyTo:		int32	
	--self.timeReward:		int32	
	--self.sectWishExp:		int32	
	--self.sectWishMoney:		int32	
	--self.isProtect:		int32	
end

function i3k_sbean.SectDeliverReward:clone()
	return clone(self)
end

function i3k_sbean.SectDeliverReward:decode(is)
	self.exp = is:popNumber()
	self.extTo = is:popNumber()
	self.money = is:popNumber()
	self.moneyTo = is:popNumber()
	self.timeReward = is:popNumber()
	self.sectWishExp = is:popNumber()
	self.sectWishMoney = is:popNumber()
	self.isProtect = is:popNumber()
end

function i3k_sbean.SectDeliverReward:encode(os)
	os:pushNumber(self.exp)
	os:pushNumber(self.extTo)
	os:pushNumber(self.money)
	os:pushNumber(self.moneyTo)
	os:pushNumber(self.timeReward)
	os:pushNumber(self.sectWishExp)
	os:pushNumber(self.sectWishMoney)
	os:pushNumber(self.isProtect)
end


i3k_sbean.DBSectDeliver = i3k_class("DBSectDeliver")
function i3k_sbean.DBSectDeliver:ctor()
	--self.dayAcceptTime:		int32	
	--self.historyAcceptTime:		int32	
	--self.dayRobTime:		int32	
	--self.tasks:		vector[SectDeliverTaskInfo]	
	--self.isProtect:		int32	
	--self.refreshTimes:		int32	
	--self.wishTimes:		int32	
	--self.routeId:		int32	
	--self.vehicleId:		int32	
	--self.startTime:		int32	
	--self.searchHelpTime:		int32	
	--self.beRobbedTimes:		int32	
	--self.tempExp:		int32	
	--self.tempMoney:		int32	
	--self.tempHp:		int32	
	--self.curTaskId:		int32	
	--self.curRouteId:		int32	
	--self.robMoney:		int32	
	--self.historyRobMoney:		int32	
	--self.skinData:		SectDeliverSkinData	
	--self.deliverLottery:		DBDeliverLottery	
	--self.padding1_3:		int8	
	--self.quickDeliverBouns:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBSectDeliver:clone()
	return clone(self)
end

function i3k_sbean.DBSectDeliver:decode(is)
	self.dayAcceptTime = is:popNumber()
	self.historyAcceptTime = is:popNumber()
	self.dayRobTime = is:popNumber()
	self.tasks = is:popList(i3k_sbean.SectDeliverTaskInfo)
	self.isProtect = is:popNumber()
	self.refreshTimes = is:popNumber()
	self.wishTimes = is:popNumber()
	self.routeId = is:popNumber()
	self.vehicleId = is:popNumber()
	self.startTime = is:popNumber()
	self.searchHelpTime = is:popNumber()
	self.beRobbedTimes = is:popNumber()
	self.tempExp = is:popNumber()
	self.tempMoney = is:popNumber()
	self.tempHp = is:popNumber()
	self.curTaskId = is:popNumber()
	self.curRouteId = is:popNumber()
	self.robMoney = is:popNumber()
	self.historyRobMoney = is:popNumber()
	self.skinData = is:pop(i3k_sbean.SectDeliverSkinData)
	self.deliverLottery = is:pop(i3k_sbean.DBDeliverLottery)
	self.padding1_3 = is:popNumber()
	self.quickDeliverBouns = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBSectDeliver:encode(os)
	os:pushNumber(self.dayAcceptTime)
	os:pushNumber(self.historyAcceptTime)
	os:pushNumber(self.dayRobTime)
	os:pushList(self.tasks)
	os:pushNumber(self.isProtect)
	os:pushNumber(self.refreshTimes)
	os:pushNumber(self.wishTimes)
	os:pushNumber(self.routeId)
	os:pushNumber(self.vehicleId)
	os:pushNumber(self.startTime)
	os:pushNumber(self.searchHelpTime)
	os:pushNumber(self.beRobbedTimes)
	os:pushNumber(self.tempExp)
	os:pushNumber(self.tempMoney)
	os:pushNumber(self.tempHp)
	os:pushNumber(self.curTaskId)
	os:pushNumber(self.curRouteId)
	os:pushNumber(self.robMoney)
	os:pushNumber(self.historyRobMoney)
	os:push(self.skinData)
	os:push(self.deliverLottery)
	os:pushNumber(self.padding1_3)
	os:pushNumber(self.quickDeliverBouns)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBDeliverLottery = i3k_class("DBDeliverLottery")
function i3k_sbean.DBDeliverLottery:ctor()
	--self.deliverTimes:		int32	
	--self.takedTimes:		set[int32]	
	--self.lastClearTime:		int32	
end

function i3k_sbean.DBDeliverLottery:clone()
	return clone(self)
end

function i3k_sbean.DBDeliverLottery:decode(is)
	self.deliverTimes = is:popNumber()
	self.takedTimes = is:popNumberSet()
	self.lastClearTime = is:popNumber()
end

function i3k_sbean.DBDeliverLottery:encode(os)
	os:pushNumber(self.deliverTimes)
	os:pushNumberSet(self.takedTimes)
	os:pushNumber(self.lastClearTime)
end


i3k_sbean.DBDeliverInSect = i3k_class("DBDeliverInSect")
function i3k_sbean.DBDeliverInSect:ctor()
	--self.isDeliver:		int32	
end

function i3k_sbean.DBDeliverInSect:clone()
	return clone(self)
end

function i3k_sbean.DBDeliverInSect:decode(is)
	self.isDeliver = is:popNumber()
end

function i3k_sbean.DBDeliverInSect:encode(os)
	os:pushNumber(self.isDeliver)
end


i3k_sbean.DBDeliverWishInSect = i3k_class("DBDeliverWishInSect")
function i3k_sbean.DBDeliverWishInSect:ctor()
	--self.lastChangeTime:		int32	
	--self.exp:		int32	
	--self.money:		int32	
	--self.hp:		int32	
end

function i3k_sbean.DBDeliverWishInSect:clone()
	return clone(self)
end

function i3k_sbean.DBDeliverWishInSect:decode(is)
	self.lastChangeTime = is:popNumber()
	self.exp = is:popNumber()
	self.money = is:popNumber()
	self.hp = is:popNumber()
end

function i3k_sbean.DBDeliverWishInSect:encode(os)
	os:pushNumber(self.lastChangeTime)
	os:pushNumber(self.exp)
	os:pushNumber(self.money)
	os:pushNumber(self.hp)
end


i3k_sbean.DBDeliverWishListItem = i3k_class("DBDeliverWishListItem")
function i3k_sbean.DBDeliverWishListItem:ctor()
	--self.name:		string	
	--self.job:		int32	
	--self.wishTimes:		int32	
end

function i3k_sbean.DBDeliverWishListItem:clone()
	return clone(self)
end

function i3k_sbean.DBDeliverWishListItem:decode(is)
	self.name = is:popString()
	self.job = is:popNumber()
	self.wishTimes = is:popNumber()
end

function i3k_sbean.DBDeliverWishListItem:encode(os)
	os:pushString(self.name)
	os:pushNumber(self.job)
	os:pushNumber(self.wishTimes)
end


i3k_sbean.DBSectDeliverWishChange = i3k_class("DBSectDeliverWishChange")
function i3k_sbean.DBSectDeliverWishChange:ctor()
	--self.exp:		int32	
	--self.expTo:		int32	
	--self.money:		int32	
	--self.moneyTo:		int32	
	--self.hp:		int32	
	--self.hpTo:		int32	
end

function i3k_sbean.DBSectDeliverWishChange:clone()
	return clone(self)
end

function i3k_sbean.DBSectDeliverWishChange:decode(is)
	self.exp = is:popNumber()
	self.expTo = is:popNumber()
	self.money = is:popNumber()
	self.moneyTo = is:popNumber()
	self.hp = is:popNumber()
	self.hpTo = is:popNumber()
end

function i3k_sbean.DBSectDeliverWishChange:encode(os)
	os:pushNumber(self.exp)
	os:pushNumber(self.expTo)
	os:pushNumber(self.money)
	os:pushNumber(self.moneyTo)
	os:pushNumber(self.hp)
	os:pushNumber(self.hpTo)
end


i3k_sbean.DBProduceData = i3k_class("DBProduceData")
function i3k_sbean.DBProduceData:ctor()
	--self.recipes:		set[int32]	
	--self.produceLvl:		int32	
	--self.produceExp:		int32	
	--self.splitSP:		int32	
	--self.splitSPRevertTime:		int32	
	--self.dayBuyTimes:		int32	
end

function i3k_sbean.DBProduceData:clone()
	return clone(self)
end

function i3k_sbean.DBProduceData:decode(is)
	self.recipes = is:popNumberSet()
	self.produceLvl = is:popNumber()
	self.produceExp = is:popNumber()
	self.splitSP = is:popNumber()
	self.splitSPRevertTime = is:popNumber()
	self.dayBuyTimes = is:popNumber()
end

function i3k_sbean.DBProduceData:encode(os)
	os:pushNumberSet(self.recipes)
	os:pushNumber(self.produceLvl)
	os:pushNumber(self.produceExp)
	os:pushNumber(self.splitSP)
	os:pushNumber(self.splitSPRevertTime)
	os:pushNumber(self.dayBuyTimes)
end


i3k_sbean.DBFusionData = i3k_class("DBFusionData")
function i3k_sbean.DBFusionData:ctor()
	--self.fusionPoint:		int32	
	--self.dayFusionItems:		int32	
	--self.isOpened:		int8	
	--self.padding1_2:		int8	
	--self.padding1_3:		int8	
	--self.padding1_4:		int8	
	--self.padding2:		int32	
end

function i3k_sbean.DBFusionData:clone()
	return clone(self)
end

function i3k_sbean.DBFusionData:decode(is)
	self.fusionPoint = is:popNumber()
	self.dayFusionItems = is:popNumber()
	self.isOpened = is:popNumber()
	self.padding1_2 = is:popNumber()
	self.padding1_3 = is:popNumber()
	self.padding1_4 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBFusionData:encode(os)
	os:pushNumber(self.fusionPoint)
	os:pushNumber(self.dayFusionItems)
	os:pushNumber(self.isOpened)
	os:pushNumber(self.padding1_2)
	os:pushNumber(self.padding1_3)
	os:pushNumber(self.padding1_4)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBMessageBoard = i3k_class("DBMessageBoard")
function i3k_sbean.DBMessageBoard:ctor()
	--self.side:		int32	
	--self.id:		int32	
	--self.roleId:		int32	
	--self.roleName:		string	
	--self.sendTime:		int32	
	--self.lifeTime:		int32	
	--self.content:		string	
	--self.anonymous:		int8	
	--self.praiseTime:		int32	
	--self.treadTime:		int32	
end

function i3k_sbean.DBMessageBoard:clone()
	return clone(self)
end

function i3k_sbean.DBMessageBoard:decode(is)
	self.side = is:popNumber()
	self.id = is:popNumber()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
	self.sendTime = is:popNumber()
	self.lifeTime = is:popNumber()
	self.content = is:popString()
	self.anonymous = is:popNumber()
	self.praiseTime = is:popNumber()
	self.treadTime = is:popNumber()
end

function i3k_sbean.DBMessageBoard:encode(os)
	os:pushNumber(self.side)
	os:pushNumber(self.id)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
	os:pushNumber(self.sendTime)
	os:pushNumber(self.lifeTime)
	os:pushString(self.content)
	os:pushNumber(self.anonymous)
	os:pushNumber(self.praiseTime)
	os:pushNumber(self.treadTime)
end


i3k_sbean.DBSchedule = i3k_class("DBSchedule")
function i3k_sbean.DBSchedule:ctor()
	--self.activity:		int32	
	--self.task2num:		map[int32, int32]	
	--self.rewards:		set[int32]	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBSchedule:clone()
	return clone(self)
end

function i3k_sbean.DBSchedule:decode(is)
	self.activity = is:popNumber()
	self.task2num = is:popNumberNumberMap()
	self.rewards = is:popNumberSet()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBSchedule:encode(os)
	os:pushNumber(self.activity)
	os:pushNumberNumberMap(self.task2num)
	os:pushNumberSet(self.rewards)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBArmor = i3k_class("DBArmor")
function i3k_sbean.DBArmor:ctor()
	--self.curArmor:		int32	
	--self.allArmors:		vector[ArmorData]	
	--self.runeBag:		map[int32, int32]	
	--self.curResetTalentTimes:		int32	
	--self.hideEffect:		int8	
	--self.castIngots:		map[int32, DBCastIngot]	
	--self.padding3:		int8	
	--self.padding4:		int8	
end

function i3k_sbean.DBArmor:clone()
	return clone(self)
end

function i3k_sbean.DBArmor:decode(is)
	self.curArmor = is:popNumber()
	self.allArmors = is:popList(i3k_sbean.ArmorData)
	self.runeBag = is:popNumberNumberMap()
	self.curResetTalentTimes = is:popNumber()
	self.hideEffect = is:popNumber()
	self.castIngots = is:popNumberMap(i3k_sbean.DBCastIngot)
	self.padding3 = is:popNumber()
	self.padding4 = is:popNumber()
end

function i3k_sbean.DBArmor:encode(os)
	os:pushNumber(self.curArmor)
	os:pushList(self.allArmors)
	os:pushNumberNumberMap(self.runeBag)
	os:pushNumber(self.curResetTalentTimes)
	os:pushNumber(self.hideEffect)
	os:pushNumberMap(self.castIngots)
	os:pushNumber(self.padding3)
	os:pushNumber(self.padding4)
end


i3k_sbean.ArmorData = i3k_class("ArmorData")
function i3k_sbean.ArmorData:ctor()
	--self.id:		int32	
	--self.unlocked:		int8	
	--self.level:		int32	
	--self.exp:		int32	
	--self.useTalentPoint:		int32	
	--self.rank:		int32	
	--self.wishPoint:		int32	
	--self.talentPoint:		map[int32, int32]	
	--self.soltGroupData:		vector[SoltData]	
	--self.curUpRankTime:		int32	
end

function i3k_sbean.ArmorData:clone()
	return clone(self)
end

function i3k_sbean.ArmorData:decode(is)
	self.id = is:popNumber()
	self.unlocked = is:popNumber()
	self.level = is:popNumber()
	self.exp = is:popNumber()
	self.useTalentPoint = is:popNumber()
	self.rank = is:popNumber()
	self.wishPoint = is:popNumber()
	self.talentPoint = is:popNumberNumberMap()
	self.soltGroupData = is:popList(i3k_sbean.SoltData)
	self.curUpRankTime = is:popNumber()
end

function i3k_sbean.ArmorData:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.unlocked)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
	os:pushNumber(self.useTalentPoint)
	os:pushNumber(self.rank)
	os:pushNumber(self.wishPoint)
	os:pushNumberNumberMap(self.talentPoint)
	os:pushList(self.soltGroupData)
	os:pushNumber(self.curUpRankTime)
end


i3k_sbean.ArmorFightData = i3k_class("ArmorFightData")
function i3k_sbean.ArmorFightData:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.rank:		int32	
	--self.soltGroupData:		vector[SoltData]	
	--self.talentPoint:		map[int32, int32]	
	--self.runeLangLvls:		map[int32, int32]	
	--self.hideEffect:		int8	
	--self.castIngots:		map[int32, DBCastIngot]	
end

function i3k_sbean.ArmorFightData:clone()
	return clone(self)
end

function i3k_sbean.ArmorFightData:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.rank = is:popNumber()
	self.soltGroupData = is:popList(i3k_sbean.SoltData)
	self.talentPoint = is:popNumberNumberMap()
	self.runeLangLvls = is:popNumberNumberMap()
	self.hideEffect = is:popNumber()
	self.castIngots = is:popNumberMap(i3k_sbean.DBCastIngot)
end

function i3k_sbean.ArmorFightData:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.rank)
	os:pushList(self.soltGroupData)
	os:pushNumberNumberMap(self.talentPoint)
	os:pushNumberNumberMap(self.runeLangLvls)
	os:pushNumber(self.hideEffect)
	os:pushNumberMap(self.castIngots)
end


i3k_sbean.SoltData = i3k_class("SoltData")
function i3k_sbean.SoltData:ctor()
	--self.unlocked:		int8	
	--self.solts:		vector[int32]	
end

function i3k_sbean.SoltData:clone()
	return clone(self)
end

function i3k_sbean.SoltData:decode(is)
	self.unlocked = is:popNumber()
	self.solts = is:popNumberList()
end

function i3k_sbean.SoltData:encode(os)
	os:pushNumber(self.unlocked)
	os:pushNumberList(self.solts)
end


i3k_sbean.DBSkillPreset = i3k_class("DBSkillPreset")
function i3k_sbean.DBSkillPreset:ctor()
	--self.skillPresetName:		string	
	--self.skillPreset:		vector[int32]	
	--self.diySkill:		int32	
	--self.uniqueSkill:		int32	
end

function i3k_sbean.DBSkillPreset:clone()
	return clone(self)
end

function i3k_sbean.DBSkillPreset:decode(is)
	self.skillPresetName = is:popString()
	self.skillPreset = is:popNumberList()
	self.diySkill = is:popNumber()
	self.uniqueSkill = is:popNumber()
end

function i3k_sbean.DBSkillPreset:encode(os)
	os:pushString(self.skillPresetName)
	os:pushNumberList(self.skillPreset)
	os:pushNumber(self.diySkill)
	os:pushNumber(self.uniqueSkill)
end


i3k_sbean.DBSpiritsPreset = i3k_class("DBSpiritsPreset")
function i3k_sbean.DBSpiritsPreset:ctor()
	--self.spiritsPresetName:		string	
	--self.spiritsPreset:		vector[int32]	
end

function i3k_sbean.DBSpiritsPreset:clone()
	return clone(self)
end

function i3k_sbean.DBSpiritsPreset:decode(is)
	self.spiritsPresetName = is:popString()
	self.spiritsPreset = is:popNumberList()
end

function i3k_sbean.DBSpiritsPreset:encode(os)
	os:pushString(self.spiritsPresetName)
	os:pushNumberList(self.spiritsPreset)
end


i3k_sbean.DBRoleMarriageData = i3k_class("DBRoleMarriageData")
function i3k_sbean.DBRoleMarriageData:ctor()
	--self.divorceTime:		int32	
	--self.marriageShareId:		int32	
	--self.lastTransformTime:		int32	
	--self.dayTakeWeddingBoxTimes:		int32	
	--self.dayTakeBanquetTimes:		int32	
	--self.partnerName:		string	
end

function i3k_sbean.DBRoleMarriageData:clone()
	return clone(self)
end

function i3k_sbean.DBRoleMarriageData:decode(is)
	self.divorceTime = is:popNumber()
	self.marriageShareId = is:popNumber()
	self.lastTransformTime = is:popNumber()
	self.dayTakeWeddingBoxTimes = is:popNumber()
	self.dayTakeBanquetTimes = is:popNumber()
	self.partnerName = is:popString()
end

function i3k_sbean.DBRoleMarriageData:encode(os)
	os:pushNumber(self.divorceTime)
	os:pushNumber(self.marriageShareId)
	os:pushNumber(self.lastTransformTime)
	os:pushNumber(self.dayTakeWeddingBoxTimes)
	os:pushNumber(self.dayTakeBanquetTimes)
	os:pushString(self.partnerName)
end


i3k_sbean.DBSectGroupMapData = i3k_class("DBSectGroupMapData")
function i3k_sbean.DBSectGroupMapData:ctor()
	--self.lastStartTime:		int32	
	--self.lastEndTime:		int32	
	--self.isfinish:		int8	
	--self.killNum:		map[int32, int32]	
	--self.monsterProcess:		map[int32, int32]	
	--self.damageRank:		map[int32, int32]	
end

function i3k_sbean.DBSectGroupMapData:clone()
	return clone(self)
end

function i3k_sbean.DBSectGroupMapData:decode(is)
	self.lastStartTime = is:popNumber()
	self.lastEndTime = is:popNumber()
	self.isfinish = is:popNumber()
	self.killNum = is:popNumberNumberMap()
	self.monsterProcess = is:popNumberNumberMap()
	self.damageRank = is:popNumberNumberMap()
end

function i3k_sbean.DBSectGroupMapData:encode(os)
	os:pushNumber(self.lastStartTime)
	os:pushNumber(self.lastEndTime)
	os:pushNumber(self.isfinish)
	os:pushNumberNumberMap(self.killNum)
	os:pushNumberNumberMap(self.monsterProcess)
	os:pushNumberNumberMap(self.damageRank)
end


i3k_sbean.DBInsightData = i3k_class("DBInsightData")
function i3k_sbean.DBInsightData:ctor()
	--self.lastInsightTime:		int32	
	--self.targetList:		vector[ActivityEntity]	
end

function i3k_sbean.DBInsightData:clone()
	return clone(self)
end

function i3k_sbean.DBInsightData:decode(is)
	self.lastInsightTime = is:popNumber()
	self.targetList = is:popList(i3k_sbean.ActivityEntity)
end

function i3k_sbean.DBInsightData:encode(os)
	os:pushNumber(self.lastInsightTime)
	os:pushList(self.targetList)
end


i3k_sbean.DBRevengeData = i3k_class("DBRevengeData")
function i3k_sbean.DBRevengeData:ctor()
	--self.lastRevengeTime:		int32	
	--self.targetList:		vector[RevengeEntity]	
end

function i3k_sbean.DBRevengeData:clone()
	return clone(self)
end

function i3k_sbean.DBRevengeData:decode(is)
	self.lastRevengeTime = is:popNumber()
	self.targetList = is:popList(i3k_sbean.RevengeEntity)
end

function i3k_sbean.DBRevengeData:encode(os)
	os:pushNumber(self.lastRevengeTime)
	os:pushList(self.targetList)
end


i3k_sbean.DBHeirloom = i3k_class("DBHeirloom")
function i3k_sbean.DBHeirloom:ctor()
	--self.isOpen:		int8	
	--self.dayWipeTimes:		int8	
	--self.wipeTimes:		int8	
	--self.perfectDegree:		int32	
	--self.display:		int8	
	--self.heirloomStrength:		DBHeirloomStrength	
	--self.starSpirit:		DBStarSpirit	
	--self.padding13:		int8	
	--self.padding14:		int8	
	--self.padding2:		int32	
end

function i3k_sbean.DBHeirloom:clone()
	return clone(self)
end

function i3k_sbean.DBHeirloom:decode(is)
	self.isOpen = is:popNumber()
	self.dayWipeTimes = is:popNumber()
	self.wipeTimes = is:popNumber()
	self.perfectDegree = is:popNumber()
	self.display = is:popNumber()
	self.heirloomStrength = is:pop(i3k_sbean.DBHeirloomStrength)
	self.starSpirit = is:pop(i3k_sbean.DBStarSpirit)
	self.padding13 = is:popNumber()
	self.padding14 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBHeirloom:encode(os)
	os:pushNumber(self.isOpen)
	os:pushNumber(self.dayWipeTimes)
	os:pushNumber(self.wipeTimes)
	os:pushNumber(self.perfectDegree)
	os:pushNumber(self.display)
	os:push(self.heirloomStrength)
	os:push(self.starSpirit)
	os:pushNumber(self.padding13)
	os:pushNumber(self.padding14)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBStarSpirit = i3k_class("DBStarSpirit")
function i3k_sbean.DBStarSpirit:ctor()
	--self.rank:		int32	
	--self.miniStars:		map[int32, DBMiniStar]	
	--self.mainStarLvl:		int32	
	--self.mainStarProp:		set[int32]	
	--self.mainStarPropTmp:		set[int32]	
end

function i3k_sbean.DBStarSpirit:clone()
	return clone(self)
end

function i3k_sbean.DBStarSpirit:decode(is)
	self.rank = is:popNumber()
	self.miniStars = is:popNumberMap(i3k_sbean.DBMiniStar)
	self.mainStarLvl = is:popNumber()
	self.mainStarProp = is:popNumberSet()
	self.mainStarPropTmp = is:popNumberSet()
end

function i3k_sbean.DBStarSpirit:encode(os)
	os:pushNumber(self.rank)
	os:pushNumberMap(self.miniStars)
	os:pushNumber(self.mainStarLvl)
	os:pushNumberSet(self.mainStarProp)
	os:pushNumberSet(self.mainStarPropTmp)
end


i3k_sbean.DBMiniStar = i3k_class("DBMiniStar")
function i3k_sbean.DBMiniStar:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.exp:		int32	
end

function i3k_sbean.DBMiniStar:clone()
	return clone(self)
end

function i3k_sbean.DBMiniStar:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.exp = is:popNumber()
end

function i3k_sbean.DBMiniStar:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
end


i3k_sbean.DBOfflineWizard = i3k_class("DBOfflineWizard")
function i3k_sbean.DBOfflineWizard:ctor()
	--self.level:		int32	
	--self.exp:		int32	
	--self.funcPoint:		int32	
	--self.dayBuyPointTimes:		int32	
	--self.wizardEndTimes:		map[int32, int32]	
	--self.curWizard:		int32	
end

function i3k_sbean.DBOfflineWizard:clone()
	return clone(self)
end

function i3k_sbean.DBOfflineWizard:decode(is)
	self.level = is:popNumber()
	self.exp = is:popNumber()
	self.funcPoint = is:popNumber()
	self.dayBuyPointTimes = is:popNumber()
	self.wizardEndTimes = is:popNumberNumberMap()
	self.curWizard = is:popNumber()
end

function i3k_sbean.DBOfflineWizard:encode(os)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
	os:pushNumber(self.funcPoint)
	os:pushNumber(self.dayBuyPointTimes)
	os:pushNumberNumberMap(self.wizardEndTimes)
	os:pushNumber(self.curWizard)
end


i3k_sbean.DBWizardTrip = i3k_class("DBWizardTrip")
function i3k_sbean.DBWizardTrip:ctor()
	--self.currTripWizard:		int32	
	--self.currGetPhotos:		vector[int32]	
	--self.currTripTimeCfg:		int32	
	--self.tripEndTime:		int32	
	--self.lastTryGetPhotoTime:		int32	
	--self.ownPhotos:		map[int32, DBWizardTripPhoto]	
end

function i3k_sbean.DBWizardTrip:clone()
	return clone(self)
end

function i3k_sbean.DBWizardTrip:decode(is)
	self.currTripWizard = is:popNumber()
	self.currGetPhotos = is:popNumberList()
	self.currTripTimeCfg = is:popNumber()
	self.tripEndTime = is:popNumber()
	self.lastTryGetPhotoTime = is:popNumber()
	self.ownPhotos = is:popNumberMap(i3k_sbean.DBWizardTripPhoto)
end

function i3k_sbean.DBWizardTrip:encode(os)
	os:pushNumber(self.currTripWizard)
	os:pushNumberList(self.currGetPhotos)
	os:pushNumber(self.currTripTimeCfg)
	os:pushNumber(self.tripEndTime)
	os:pushNumber(self.lastTryGetPhotoTime)
	os:pushNumberMap(self.ownPhotos)
end


i3k_sbean.DBWizardTripPhoto = i3k_class("DBWizardTripPhoto")
function i3k_sbean.DBWizardTripPhoto:ctor()
	--self.wizardId:		int32	
	--self.photos:		set[int32]	
end

function i3k_sbean.DBWizardTripPhoto:clone()
	return clone(self)
end

function i3k_sbean.DBWizardTripPhoto:decode(is)
	self.wizardId = is:popNumber()
	self.photos = is:popNumberSet()
end

function i3k_sbean.DBWizardTripPhoto:encode(os)
	os:pushNumber(self.wizardId)
	os:pushNumberSet(self.photos)
end


i3k_sbean.DBActivityLastData = i3k_class("DBActivityLastData")
function i3k_sbean.DBActivityLastData:ctor()
	--self.lastTimes:		map[int32, int32]	
	--self.dayBuyTimes:		map[int32, int32]	
end

function i3k_sbean.DBActivityLastData:clone()
	return clone(self)
end

function i3k_sbean.DBActivityLastData:decode(is)
	self.lastTimes = is:popNumberNumberMap()
	self.dayBuyTimes = is:popNumberNumberMap()
end

function i3k_sbean.DBActivityLastData:encode(os)
	os:pushNumberNumberMap(self.lastTimes)
	os:pushNumberNumberMap(self.dayBuyTimes)
end


i3k_sbean.DBRoleStele = i3k_class("DBRoleStele")
function i3k_sbean.DBRoleStele:ctor()
	--self.index:		int32	
	--self.allFinish:		int8	
	--self.card:		int32	
	--self.receiveTime:		int32	
	--self.joinReward:		int8	
	--self.padding:		int32	
end

function i3k_sbean.DBRoleStele:clone()
	return clone(self)
end

function i3k_sbean.DBRoleStele:decode(is)
	self.index = is:popNumber()
	self.allFinish = is:popNumber()
	self.card = is:popNumber()
	self.receiveTime = is:popNumber()
	self.joinReward = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBRoleStele:encode(os)
	os:pushNumber(self.index)
	os:pushNumber(self.allFinish)
	os:pushNumber(self.card)
	os:pushNumber(self.receiveTime)
	os:pushNumber(self.joinReward)
	os:pushNumber(self.padding)
end


i3k_sbean.DBDemonHoleFloor = i3k_class("DBDemonHoleFloor")
function i3k_sbean.DBDemonHoleFloor:ctor()
	--self.roles:		vector[RoleDemonHole]	
end

function i3k_sbean.DBDemonHoleFloor:clone()
	return clone(self)
end

function i3k_sbean.DBDemonHoleFloor:decode(is)
	self.roles = is:popList(i3k_sbean.RoleDemonHole)
end

function i3k_sbean.DBDemonHoleFloor:encode(os)
	os:pushList(self.roles)
end


i3k_sbean.RoleDemonHoleLog = i3k_class("RoleDemonHoleLog")
function i3k_sbean.RoleDemonHoleLog:ctor()
	--self.dayEnterTimes:		int32	
	--self.enterFloors:		set[int32]	
	--self.addExp:		int32	
	--self.lastJoinTime:		int32	
	--self.padding:		int32	
end

function i3k_sbean.RoleDemonHoleLog:clone()
	return clone(self)
end

function i3k_sbean.RoleDemonHoleLog:decode(is)
	self.dayEnterTimes = is:popNumber()
	self.enterFloors = is:popNumberSet()
	self.addExp = is:popNumber()
	self.lastJoinTime = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.RoleDemonHoleLog:encode(os)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumberSet(self.enterFloors)
	os:pushNumber(self.addExp)
	os:pushNumber(self.lastJoinTime)
	os:pushNumber(self.padding)
end


i3k_sbean.DBLucklyStar = i3k_class("DBLucklyStar")
function i3k_sbean.DBLucklyStar:ctor()
	--self.lastGiftTimes:		int32	
	--self.dayRewardTimes:		int32	
	--self.needNotice:		int32	
	--self.dayRecvTimes:		int32	
	--self.sendTime:		int32	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBLucklyStar:clone()
	return clone(self)
end

function i3k_sbean.DBLucklyStar:decode(is)
	self.lastGiftTimes = is:popNumber()
	self.dayRewardTimes = is:popNumber()
	self.needNotice = is:popNumber()
	self.dayRecvTimes = is:popNumber()
	self.sendTime = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBLucklyStar:encode(os)
	os:pushNumber(self.lastGiftTimes)
	os:pushNumber(self.dayRewardTimes)
	os:pushNumber(self.needNotice)
	os:pushNumber(self.dayRecvTimes)
	os:pushNumber(self.sendTime)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBLucklyStarManagerData = i3k_class("DBLucklyStarManagerData")
function i3k_sbean.DBLucklyStarManagerData:ctor()
	--self.lastSendDay:		int32	
	--self.sendTimes:		int32	
end

function i3k_sbean.DBLucklyStarManagerData:clone()
	return clone(self)
end

function i3k_sbean.DBLucklyStarManagerData:decode(is)
	self.lastSendDay = is:popNumber()
	self.sendTimes = is:popNumber()
end

function i3k_sbean.DBLucklyStarManagerData:encode(os)
	os:pushNumber(self.lastSendDay)
	os:pushNumber(self.sendTimes)
end


i3k_sbean.DBFightNpc = i3k_class("DBFightNpc")
function i3k_sbean.DBFightNpc:ctor()
	--self.group:		int32	
	--self.curIndex:		int32	
	--self.state:		int8	
	--self.coolTime:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBFightNpc:clone()
	return clone(self)
end

function i3k_sbean.DBFightNpc:decode(is)
	self.group = is:popNumber()
	self.curIndex = is:popNumber()
	self.state = is:popNumber()
	self.coolTime = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBFightNpc:encode(os)
	os:pushNumber(self.group)
	os:pushNumber(self.curIndex)
	os:pushNumber(self.state)
	os:pushNumber(self.coolTime)
	os:pushNumber(self.padding)
end


i3k_sbean.DBLegendMake = i3k_class("DBLegendMake")
function i3k_sbean.DBLegendMake:ctor()
	--self.equip:		DBEquip	
	--self.legends:		vector[int32]	
	--self.padding:		int32	
end

function i3k_sbean.DBLegendMake:clone()
	return clone(self)
end

function i3k_sbean.DBLegendMake:decode(is)
	self.equip = is:pop(i3k_sbean.DBEquip)
	self.legends = is:popNumberList()
	self.padding = is:popNumber()
end

function i3k_sbean.DBLegendMake:encode(os)
	os:push(self.equip)
	os:pushNumberList(self.legends)
	os:pushNumber(self.padding)
end


i3k_sbean.DBHeirloomStrength = i3k_class("DBHeirloomStrength")
function i3k_sbean.DBHeirloomStrength:ctor()
	--self.props:		map[int32, int32]	
	--self.rank:		int32	
	--self.curStrengthPropIndex:		int32	
	--self.curStrengthIndex:		int32	
	--self.dayStrengthTime:		int32	
end

function i3k_sbean.DBHeirloomStrength:clone()
	return clone(self)
end

function i3k_sbean.DBHeirloomStrength:decode(is)
	self.props = is:popNumberNumberMap()
	self.rank = is:popNumber()
	self.curStrengthPropIndex = is:popNumber()
	self.curStrengthIndex = is:popNumber()
	self.dayStrengthTime = is:popNumber()
end

function i3k_sbean.DBHeirloomStrength:encode(os)
	os:pushNumberNumberMap(self.props)
	os:pushNumber(self.rank)
	os:pushNumber(self.curStrengthPropIndex)
	os:pushNumber(self.curStrengthIndex)
	os:pushNumber(self.dayStrengthTime)
end


i3k_sbean.DBSealAwaken = i3k_class("DBSealAwaken")
function i3k_sbean.DBSealAwaken:ctor()
	--self.awaken:		set[int32]	
	--self.rank:		int32	
	--self.allAwakenTime:		int32	
	--self.padding1:		int32	
end

function i3k_sbean.DBSealAwaken:clone()
	return clone(self)
end

function i3k_sbean.DBSealAwaken:decode(is)
	self.awaken = is:popNumberSet()
	self.rank = is:popNumber()
	self.allAwakenTime = is:popNumber()
	self.padding1 = is:popNumber()
end

function i3k_sbean.DBSealAwaken:encode(os)
	os:pushNumberSet(self.awaken)
	os:pushNumber(self.rank)
	os:pushNumber(self.allAwakenTime)
	os:pushNumber(self.padding1)
end


i3k_sbean.DBRoleExpTree = i3k_class("DBRoleExpTree")
function i3k_sbean.DBRoleExpTree:ctor()
	--self.watchingTimes:		int32	
	--self.wateringTimes:		int32	
	--self.harvestTimes:		int32	
end

function i3k_sbean.DBRoleExpTree:clone()
	return clone(self)
end

function i3k_sbean.DBRoleExpTree:decode(is)
	self.watchingTimes = is:popNumber()
	self.wateringTimes = is:popNumber()
	self.harvestTimes = is:popNumber()
end

function i3k_sbean.DBRoleExpTree:encode(os)
	os:pushNumber(self.watchingTimes)
	os:pushNumber(self.wateringTimes)
	os:pushNumber(self.harvestTimes)
end


i3k_sbean.DBExpTree = i3k_class("DBExpTree")
function i3k_sbean.DBExpTree:ctor()
	--self.level:		int32	
	--self.exp:		int32	
	--self.harvestTime:		int32	
end

function i3k_sbean.DBExpTree:clone()
	return clone(self)
end

function i3k_sbean.DBExpTree:decode(is)
	self.level = is:popNumber()
	self.exp = is:popNumber()
	self.harvestTime = is:popNumber()
end

function i3k_sbean.DBExpTree:encode(os)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
	os:pushNumber(self.harvestTime)
end


i3k_sbean.DBSectFightGroup = i3k_class("DBSectFightGroup")
function i3k_sbean.DBSectFightGroup:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.member:		set[int32]	
	--self.leader:		int32	
	--self.maxRank:		int32	
	--self.applys:		set[int32]	
	--self.winTimes:		int32	
	--self.joinTimes:		int32	
	--self.sectWarScore:		int32	
	--self.rankClearTime:		int32	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBSectFightGroup:clone()
	return clone(self)
end

function i3k_sbean.DBSectFightGroup:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.member = is:popNumberSet()
	self.leader = is:popNumber()
	self.maxRank = is:popNumber()
	self.applys = is:popNumberSet()
	self.winTimes = is:popNumber()
	self.joinTimes = is:popNumber()
	self.sectWarScore = is:popNumber()
	self.rankClearTime = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBSectFightGroup:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushNumberSet(self.member)
	os:pushNumber(self.leader)
	os:pushNumber(self.maxRank)
	os:pushNumberSet(self.applys)
	os:pushNumber(self.winTimes)
	os:pushNumber(self.joinTimes)
	os:pushNumber(self.sectWarScore)
	os:pushNumber(self.rankClearTime)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBRegression = i3k_class("DBRegression")
function i3k_sbean.DBRegression:ctor()
	--self.regressionLogin:		int32	
	--self.inviteRole:		RoleOverview	
	--self.regressionStart:		int32	
	--self.bindRoles:		map[int32, DBRegressionRole]	
	--self.takedRewards:		set[int32]	
	--self.score:		int32	
	--self.regressionReward:		int32	
	--self.payNum:		int32	
	--self.loginGift:		set[int32]	
	--self.dailyDiscount:		set[int32]	
	--self.bindRewardPay:		int32	
	--self.padding5:		int32	
	--self.padding6:		int32	
	--self.padding7:		int32	
	--self.padding8:		int32	
	--self.padding9:		int32	
	--self.padding10:		int32	
end

function i3k_sbean.DBRegression:clone()
	return clone(self)
end

function i3k_sbean.DBRegression:decode(is)
	self.regressionLogin = is:popNumber()
	self.inviteRole = is:pop(i3k_sbean.RoleOverview)
	self.regressionStart = is:popNumber()
	self.bindRoles = is:popNumberMap(i3k_sbean.DBRegressionRole)
	self.takedRewards = is:popNumberSet()
	self.score = is:popNumber()
	self.regressionReward = is:popNumber()
	self.payNum = is:popNumber()
	self.loginGift = is:popNumberSet()
	self.dailyDiscount = is:popNumberSet()
	self.bindRewardPay = is:popNumber()
	self.padding5 = is:popNumber()
	self.padding6 = is:popNumber()
	self.padding7 = is:popNumber()
	self.padding8 = is:popNumber()
	self.padding9 = is:popNumber()
	self.padding10 = is:popNumber()
end

function i3k_sbean.DBRegression:encode(os)
	os:pushNumber(self.regressionLogin)
	os:push(self.inviteRole)
	os:pushNumber(self.regressionStart)
	os:pushNumberMap(self.bindRoles)
	os:pushNumberSet(self.takedRewards)
	os:pushNumber(self.score)
	os:pushNumber(self.regressionReward)
	os:pushNumber(self.payNum)
	os:pushNumberSet(self.loginGift)
	os:pushNumberSet(self.dailyDiscount)
	os:pushNumber(self.bindRewardPay)
	os:pushNumber(self.padding5)
	os:pushNumber(self.padding6)
	os:pushNumber(self.padding7)
	os:pushNumber(self.padding8)
	os:pushNumber(self.padding9)
	os:pushNumber(self.padding10)
end


i3k_sbean.DBRegressionRole = i3k_class("DBRegressionRole")
function i3k_sbean.DBRegressionRole:ctor()
	--self.bindRole:		RegressionRole	
	--self.rewardNum:		int32	
	--self.lastSyncTime:		int32	
end

function i3k_sbean.DBRegressionRole:clone()
	return clone(self)
end

function i3k_sbean.DBRegressionRole:decode(is)
	self.bindRole = is:pop(i3k_sbean.RegressionRole)
	self.rewardNum = is:popNumber()
	self.lastSyncTime = is:popNumber()
end

function i3k_sbean.DBRegressionRole:encode(os)
	os:push(self.bindRole)
	os:pushNumber(self.rewardNum)
	os:pushNumber(self.lastSyncTime)
end


i3k_sbean.RegressionRole = i3k_class("RegressionRole")
function i3k_sbean.RegressionRole:ctor()
	--self.role:		RoleOverview	
	--self.bindTime:		int32	
	--self.lastLoginTime:		int32	
	--self.payNum:		int32	
end

function i3k_sbean.RegressionRole:clone()
	return clone(self)
end

function i3k_sbean.RegressionRole:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.bindTime = is:popNumber()
	self.lastLoginTime = is:popNumber()
	self.payNum = is:popNumber()
end

function i3k_sbean.RegressionRole:encode(os)
	os:push(self.role)
	os:pushNumber(self.bindTime)
	os:pushNumber(self.lastLoginTime)
	os:pushNumber(self.payNum)
end


i3k_sbean.DBPartner = i3k_class("DBPartner")
function i3k_sbean.DBPartner:ctor()
	--self.regressionTime:		int32	
	--self.bindTime:		int32	
	--self.upperRoleId:		int32	
	--self.diamond:		int32	
	--self.dividend:		int32	
	--self.activity:		int32	
	--self.honorReward:		int32	
	--self.parterReward:		map[int32, DBPartnerReward]	
	--self.underRoleIds:		map[int32, DBBindRoleInfo]	
	--self.unBindUnderCdTime:		int32	
	--self.unBindUpperCdTime:		int32	
end

function i3k_sbean.DBPartner:clone()
	return clone(self)
end

function i3k_sbean.DBPartner:decode(is)
	self.regressionTime = is:popNumber()
	self.bindTime = is:popNumber()
	self.upperRoleId = is:popNumber()
	self.diamond = is:popNumber()
	self.dividend = is:popNumber()
	self.activity = is:popNumber()
	self.honorReward = is:popNumber()
	self.parterReward = is:popNumberMap(i3k_sbean.DBPartnerReward)
	self.underRoleIds = is:popNumberMap(i3k_sbean.DBBindRoleInfo)
	self.unBindUnderCdTime = is:popNumber()
	self.unBindUpperCdTime = is:popNumber()
end

function i3k_sbean.DBPartner:encode(os)
	os:pushNumber(self.regressionTime)
	os:pushNumber(self.bindTime)
	os:pushNumber(self.upperRoleId)
	os:pushNumber(self.diamond)
	os:pushNumber(self.dividend)
	os:pushNumber(self.activity)
	os:pushNumber(self.honorReward)
	os:pushNumberMap(self.parterReward)
	os:pushNumberMap(self.underRoleIds)
	os:pushNumber(self.unBindUnderCdTime)
	os:pushNumber(self.unBindUpperCdTime)
end


i3k_sbean.DBBindRoleInfo = i3k_class("DBBindRoleInfo")
function i3k_sbean.DBBindRoleInfo:ctor()
	--self.name:		string	
	--self.level:		int32	
	--self.maxFightPower:		int32	
	--self.isRegression:		int32	
	--self.activity:		int32	
	--self.dividend:		int32	
	--self.score:		int32	
	--self.lastLoginTime:		int32	
end

function i3k_sbean.DBBindRoleInfo:clone()
	return clone(self)
end

function i3k_sbean.DBBindRoleInfo:decode(is)
	self.name = is:popString()
	self.level = is:popNumber()
	self.maxFightPower = is:popNumber()
	self.isRegression = is:popNumber()
	self.activity = is:popNumber()
	self.dividend = is:popNumber()
	self.score = is:popNumber()
	self.lastLoginTime = is:popNumber()
end

function i3k_sbean.DBBindRoleInfo:encode(os)
	os:pushString(self.name)
	os:pushNumber(self.level)
	os:pushNumber(self.maxFightPower)
	os:pushNumber(self.isRegression)
	os:pushNumber(self.activity)
	os:pushNumber(self.dividend)
	os:pushNumber(self.score)
	os:pushNumber(self.lastLoginTime)
end


i3k_sbean.DBPartnerReward = i3k_class("DBPartnerReward")
function i3k_sbean.DBPartnerReward:ctor()
	--self.lastRewardTime:		int32	
	--self.lastRewardId:		int32	
end

function i3k_sbean.DBPartnerReward:clone()
	return clone(self)
end

function i3k_sbean.DBPartnerReward:decode(is)
	self.lastRewardTime = is:popNumber()
	self.lastRewardId = is:popNumber()
end

function i3k_sbean.DBPartnerReward:encode(os)
	os:pushNumber(self.lastRewardTime)
	os:pushNumber(self.lastRewardId)
end


i3k_sbean.DBPetRunRoleData = i3k_class("DBPetRunRoleData")
function i3k_sbean.DBPetRunRoleData:ctor()
	--self.ticketPet:		int32	
	--self.ticketTime:		int32	
	--self.lastUseItem:		int32	
	--self.petRunCoin:		int32	
end

function i3k_sbean.DBPetRunRoleData:clone()
	return clone(self)
end

function i3k_sbean.DBPetRunRoleData:decode(is)
	self.ticketPet = is:popNumber()
	self.ticketTime = is:popNumber()
	self.lastUseItem = is:popNumber()
	self.petRunCoin = is:popNumber()
end

function i3k_sbean.DBPetRunRoleData:encode(os)
	os:pushNumber(self.ticketPet)
	os:pushNumber(self.ticketTime)
	os:pushNumber(self.lastUseItem)
	os:pushNumber(self.petRunCoin)
end


i3k_sbean.DBHotSpringData = i3k_class("DBHotSpringData")
function i3k_sbean.DBHotSpringData:ctor()
	--self.lastOpenDay:		int32	
	--self.lastOpenTime:		int32	
	--self.sectBuff:		map[int32, int32]	
	--self.serverBuff:		int32	
	--self.joinRole:		set[int32]	
	--self.useServerBuffCnt:		map[int32, int32]	
	--self.useSectBuffCnt:		map[int32, int32]	
end

function i3k_sbean.DBHotSpringData:clone()
	return clone(self)
end

function i3k_sbean.DBHotSpringData:decode(is)
	self.lastOpenDay = is:popNumber()
	self.lastOpenTime = is:popNumber()
	self.sectBuff = is:popNumberNumberMap()
	self.serverBuff = is:popNumber()
	self.joinRole = is:popNumberSet()
	self.useServerBuffCnt = is:popNumberNumberMap()
	self.useSectBuffCnt = is:popNumberNumberMap()
end

function i3k_sbean.DBHotSpringData:encode(os)
	os:pushNumber(self.lastOpenDay)
	os:pushNumber(self.lastOpenTime)
	os:pushNumberNumberMap(self.sectBuff)
	os:pushNumber(self.serverBuff)
	os:pushNumberSet(self.joinRole)
	os:pushNumberNumberMap(self.useServerBuffCnt)
	os:pushNumberNumberMap(self.useSectBuffCnt)
end


i3k_sbean.DBHotSpringRankRole = i3k_class("DBHotSpringRankRole")
function i3k_sbean.DBHotSpringRankRole:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.sectName:		string	
	--self.cnt:		int32	
	--self.time:		int32	
	--self.rankKey:		int32	
end

function i3k_sbean.DBHotSpringRankRole:clone()
	return clone(self)
end

function i3k_sbean.DBHotSpringRankRole:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.sectName = is:popString()
	self.cnt = is:popNumber()
	self.time = is:popNumber()
	self.rankKey = is:popNumber()
end

function i3k_sbean.DBHotSpringRankRole:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushString(self.sectName)
	os:pushNumber(self.cnt)
	os:pushNumber(self.time)
	os:pushNumber(self.rankKey)
end


i3k_sbean.DBHotSpringRankData = i3k_class("DBHotSpringRankData")
function i3k_sbean.DBHotSpringRankData:ctor()
	--self.serverBuffRank:		map[int32, DBHotSpringRankRole]	
	--self.sectBuffRank:		map[int32, DBHotSpringRankRole]	
end

function i3k_sbean.DBHotSpringRankData:clone()
	return clone(self)
end

function i3k_sbean.DBHotSpringRankData:decode(is)
	self.serverBuffRank = is:popNumberMap(i3k_sbean.DBHotSpringRankRole)
	self.sectBuffRank = is:popNumberMap(i3k_sbean.DBHotSpringRankRole)
end

function i3k_sbean.DBHotSpringRankData:encode(os)
	os:pushNumberMap(self.serverBuffRank)
	os:pushNumberMap(self.sectBuffRank)
end


i3k_sbean.DBRoleHotSpring = i3k_class("DBRoleHotSpring")
function i3k_sbean.DBRoleHotSpring:ctor()
	--self.addExpCnt:		int32	
	--self.enterTime:		int32	
	--self.singleBeUsedTimes:		int32	
	--self.molestUseCnt:		int32	
	--self.soapUseCnt:		int32	
	--self.rubUseCnt:		int8	
	--self.weekLog:		DBRoleHotSpringWeekLog	
	--self.padding1:		int8	
	--self.padding2:		int8	
end

function i3k_sbean.DBRoleHotSpring:clone()
	return clone(self)
end

function i3k_sbean.DBRoleHotSpring:decode(is)
	self.addExpCnt = is:popNumber()
	self.enterTime = is:popNumber()
	self.singleBeUsedTimes = is:popNumber()
	self.molestUseCnt = is:popNumber()
	self.soapUseCnt = is:popNumber()
	self.rubUseCnt = is:popNumber()
	self.weekLog = is:pop(i3k_sbean.DBRoleHotSpringWeekLog)
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBRoleHotSpring:encode(os)
	os:pushNumber(self.addExpCnt)
	os:pushNumber(self.enterTime)
	os:pushNumber(self.singleBeUsedTimes)
	os:pushNumber(self.molestUseCnt)
	os:pushNumber(self.soapUseCnt)
	os:pushNumber(self.rubUseCnt)
	os:push(self.weekLog)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBRoleHotSpringWeekLog = i3k_class("DBRoleHotSpringWeekLog")
function i3k_sbean.DBRoleHotSpringWeekLog:ctor()
	--self.isDayEnter:		int32	
	--self.weekEnterCnt:		int32	
	--self.enterWeek:		int32	
end

function i3k_sbean.DBRoleHotSpringWeekLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleHotSpringWeekLog:decode(is)
	self.isDayEnter = is:popNumber()
	self.weekEnterCnt = is:popNumber()
	self.enterWeek = is:popNumber()
end

function i3k_sbean.DBRoleHotSpringWeekLog:encode(os)
	os:pushNumber(self.isDayEnter)
	os:pushNumber(self.weekEnterCnt)
	os:pushNumber(self.enterWeek)
end


i3k_sbean.DBChangeProfession = i3k_class("DBChangeProfession")
function i3k_sbean.DBChangeProfession:ctor()
	--self.lastChangeProfession:		int32	
end

function i3k_sbean.DBChangeProfession:clone()
	return clone(self)
end

function i3k_sbean.DBChangeProfession:decode(is)
	self.lastChangeProfession = is:popNumber()
end

function i3k_sbean.DBChangeProfession:encode(os)
	os:pushNumber(self.lastChangeProfession)
end


i3k_sbean.DBFragmentRecycleLog = i3k_class("DBFragmentRecycleLog")
function i3k_sbean.DBFragmentRecycleLog:ctor()
	--self.lastUpdateTime:		int32	
	--self.type2time:		map[int32,int32]	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBFragmentRecycleLog:clone()
	return clone(self)
end

function i3k_sbean.DBFragmentRecycleLog:decode(is)
	self.lastUpdateTime = is:popNumber()
	self.type2time = is:popNumberNumberMap()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBFragmentRecycleLog:encode(os)
	os:pushNumber(self.lastUpdateTime)
	os:pushNumberNumberMap(self.type2time)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBDamageReduction = i3k_class("DBDamageReduction")
function i3k_sbean.DBDamageReduction:ctor()
	--self.coolEndTime:		int32	
	--self.maxReduction:		int32	
	--self.currReduction:		int32	
end

function i3k_sbean.DBDamageReduction:clone()
	return clone(self)
end

function i3k_sbean.DBDamageReduction:decode(is)
	self.coolEndTime = is:popNumber()
	self.maxReduction = is:popNumber()
	self.currReduction = is:popNumber()
end

function i3k_sbean.DBDamageReduction:encode(os)
	os:pushNumber(self.coolEndTime)
	os:pushNumber(self.maxReduction)
	os:pushNumber(self.currReduction)
end


i3k_sbean.DBWeaponSoul = i3k_class("DBWeaponSoul")
function i3k_sbean.DBWeaponSoul:ctor()
	--self.parts:		vector[SoulPart]	
	--self.grade:		int32	
	--self.show:		SoulShow	
	--self.fightPower:		int32	
	--self.coin:		int32	
	--self.curStar:		int32	
	--self.activeStars:		set[int32]	
	--self.activeTimes:		map[int32, int32]	
	--self.godStar:		DBGodStar	
	--self.padding_2:		int8	
	--self.padding_3:		int8	
	--self.padding_4:		int8	
end

function i3k_sbean.DBWeaponSoul:clone()
	return clone(self)
end

function i3k_sbean.DBWeaponSoul:decode(is)
	self.parts = is:popList(i3k_sbean.SoulPart)
	self.grade = is:popNumber()
	self.show = is:pop(i3k_sbean.SoulShow)
	self.fightPower = is:popNumber()
	self.coin = is:popNumber()
	self.curStar = is:popNumber()
	self.activeStars = is:popNumberSet()
	self.activeTimes = is:popNumberNumberMap()
	self.godStar = is:pop(i3k_sbean.DBGodStar)
	self.padding_2 = is:popNumber()
	self.padding_3 = is:popNumber()
	self.padding_4 = is:popNumber()
end

function i3k_sbean.DBWeaponSoul:encode(os)
	os:pushList(self.parts)
	os:pushNumber(self.grade)
	os:push(self.show)
	os:pushNumber(self.fightPower)
	os:pushNumber(self.coin)
	os:pushNumber(self.curStar)
	os:pushNumberSet(self.activeStars)
	os:pushNumberNumberMap(self.activeTimes)
	os:push(self.godStar)
	os:pushNumber(self.padding_2)
	os:pushNumber(self.padding_3)
	os:pushNumber(self.padding_4)
end


i3k_sbean.SoulPart = i3k_class("SoulPart")
function i3k_sbean.SoulPart:ctor()
	--self.level:		int32	
	--self.balls:		map[int32, int32]	
	--self.cache:		map[int32, int32]	
	--self.padding:		int32	
end

function i3k_sbean.SoulPart:clone()
	return clone(self)
end

function i3k_sbean.SoulPart:decode(is)
	self.level = is:popNumber()
	self.balls = is:popNumberNumberMap()
	self.cache = is:popNumberNumberMap()
	self.padding = is:popNumber()
end

function i3k_sbean.SoulPart:encode(os)
	os:pushNumber(self.level)
	os:pushNumberNumberMap(self.balls)
	os:pushNumberNumberMap(self.cache)
	os:pushNumber(self.padding)
end


i3k_sbean.SoulShow = i3k_class("SoulShow")
function i3k_sbean.SoulShow:ctor()
	--self.autoChangeShow:		int32	
	--self.curShow:		int32	
	--self.shows:		map[int32, int32]	
	--self.hide:		int32	
end

function i3k_sbean.SoulShow:clone()
	return clone(self)
end

function i3k_sbean.SoulShow:decode(is)
	self.autoChangeShow = is:popNumber()
	self.curShow = is:popNumber()
	self.shows = is:popNumberNumberMap()
	self.hide = is:popNumber()
end

function i3k_sbean.SoulShow:encode(os)
	os:pushNumber(self.autoChangeShow)
	os:pushNumber(self.curShow)
	os:pushNumberNumberMap(self.shows)
	os:pushNumber(self.hide)
end


i3k_sbean.DBRoleTripod = i3k_class("DBRoleTripod")
function i3k_sbean.DBRoleTripod:ctor()
	--self.dayUseTimes:		int32	
	--self.dayBuyTimes:		int32	
end

function i3k_sbean.DBRoleTripod:clone()
	return clone(self)
end

function i3k_sbean.DBRoleTripod:decode(is)
	self.dayUseTimes = is:popNumber()
	self.dayBuyTimes = is:popNumber()
end

function i3k_sbean.DBRoleTripod:encode(os)
	os:pushNumber(self.dayUseTimes)
	os:pushNumber(self.dayBuyTimes)
end


i3k_sbean.DBWeaponSpirit = i3k_class("DBWeaponSpirit")
function i3k_sbean.DBWeaponSpirit:ctor()
	--self.id:		int32	
	--self.activitePoints:		set[int32]	
	--self.rank:		int32	
	--self.equipWeaponId:		int32	
	--self.skillLevel:		int32	
	--self.power:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBWeaponSpirit:clone()
	return clone(self)
end

function i3k_sbean.DBWeaponSpirit:decode(is)
	self.id = is:popNumber()
	self.activitePoints = is:popNumberSet()
	self.rank = is:popNumber()
	self.equipWeaponId = is:popNumber()
	self.skillLevel = is:popNumber()
	self.power = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBWeaponSpirit:encode(os)
	os:pushNumber(self.id)
	os:pushNumberSet(self.activitePoints)
	os:pushNumber(self.rank)
	os:pushNumber(self.equipWeaponId)
	os:pushNumber(self.skillLevel)
	os:pushNumber(self.power)
	os:pushNumber(self.padding)
end


i3k_sbean.DBSectRedPack = i3k_class("DBSectRedPack")
function i3k_sbean.DBSectRedPack:ctor()
	--self.id:		int32	
	--self.sendRoleId:		int32	
	--self.sendRoleName:		string	
	--self.maxDiamond:		int32	
	--self.packMsg:		string	
	--self.packNum:		int32	
	--self.leftDiamond:		int32	
	--self.emptyTime:		int32	
	--self.takeRoles:		map[int32, SectRedPackTakeHistory]	
	--self.padding:		int32	
end

function i3k_sbean.DBSectRedPack:clone()
	return clone(self)
end

function i3k_sbean.DBSectRedPack:decode(is)
	self.id = is:popNumber()
	self.sendRoleId = is:popNumber()
	self.sendRoleName = is:popString()
	self.maxDiamond = is:popNumber()
	self.packMsg = is:popString()
	self.packNum = is:popNumber()
	self.leftDiamond = is:popNumber()
	self.emptyTime = is:popNumber()
	self.takeRoles = is:popNumberMap(i3k_sbean.SectRedPackTakeHistory)
	self.padding = is:popNumber()
end

function i3k_sbean.DBSectRedPack:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.sendRoleId)
	os:pushString(self.sendRoleName)
	os:pushNumber(self.maxDiamond)
	os:pushString(self.packMsg)
	os:pushNumber(self.packNum)
	os:pushNumber(self.leftDiamond)
	os:pushNumber(self.emptyTime)
	os:pushNumberMap(self.takeRoles)
	os:pushNumber(self.padding)
end


i3k_sbean.DBOil = i3k_class("DBOil")
function i3k_sbean.DBOil:ctor()
	--self.ranks:		vector[RankRole]	
	--self.bath:		int32	
	--self.curindex:		int32	
	--self.lastTime:		int32	
	--self.allscore:		int32	
	--self.joinRoles:		map[int32, int32]	
	--self.luckyRoles:		map[int32, string]	
	--self.roleReward:		map[int32, DBOilRoleReward]	
end

function i3k_sbean.DBOil:clone()
	return clone(self)
end

function i3k_sbean.DBOil:decode(is)
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.bath = is:popNumber()
	self.curindex = is:popNumber()
	self.lastTime = is:popNumber()
	self.allscore = is:popNumber()
	self.joinRoles = is:popNumberNumberMap()
	self.luckyRoles = is:popNumberStringMap()
	self.roleReward = is:popNumberMap(i3k_sbean.DBOilRoleReward)
end

function i3k_sbean.DBOil:encode(os)
	os:pushList(self.ranks)
	os:pushNumber(self.bath)
	os:pushNumber(self.curindex)
	os:pushNumber(self.lastTime)
	os:pushNumber(self.allscore)
	os:pushNumberNumberMap(self.joinRoles)
	os:pushNumberStringMap(self.luckyRoles)
	os:pushNumberMap(self.roleReward)
end


i3k_sbean.DBOilRoleReward = i3k_class("DBOilRoleReward")
function i3k_sbean.DBOilRoleReward:ctor()
	--self.reward:		set[int32]	
end

function i3k_sbean.DBOilRoleReward:clone()
	return clone(self)
end

function i3k_sbean.DBOilRoleReward:decode(is)
	self.reward = is:popNumberSet()
end

function i3k_sbean.DBOilRoleReward:encode(os)
	os:pushNumberSet(self.reward)
end


i3k_sbean.DBRoleRich = i3k_class("DBRoleRich")
function i3k_sbean.DBRoleRich:ctor()
	--self.groupId:		int32	
	--self.dayUseCnt:		int32	
	--self.pos:		int32	
	--self.eventType:		int32	
	--self.eventId:		int32	
	--self.eventStatus:		int32	
	--self.nowEventCounts:		int32	
	--self.slowLastCnt:		int32	
	--self.fastLastCnt:		int32	
	--self.addCnt:		int32	
end

function i3k_sbean.DBRoleRich:clone()
	return clone(self)
end

function i3k_sbean.DBRoleRich:decode(is)
	self.groupId = is:popNumber()
	self.dayUseCnt = is:popNumber()
	self.pos = is:popNumber()
	self.eventType = is:popNumber()
	self.eventId = is:popNumber()
	self.eventStatus = is:popNumber()
	self.nowEventCounts = is:popNumber()
	self.slowLastCnt = is:popNumber()
	self.fastLastCnt = is:popNumber()
	self.addCnt = is:popNumber()
end

function i3k_sbean.DBRoleRich:encode(os)
	os:pushNumber(self.groupId)
	os:pushNumber(self.dayUseCnt)
	os:pushNumber(self.pos)
	os:pushNumber(self.eventType)
	os:pushNumber(self.eventId)
	os:pushNumber(self.eventStatus)
	os:pushNumber(self.nowEventCounts)
	os:pushNumber(self.slowLastCnt)
	os:pushNumber(self.fastLastCnt)
	os:pushNumber(self.addCnt)
end


i3k_sbean.DBRoleBackActivity = i3k_class("DBRoleBackActivity")
function i3k_sbean.DBRoleBackActivity:ctor()
	--self.batch:		int32	
	--self.loginDay:		int32	
	--self.roleType:		int32	
	--self.dayCostNum:		int32	
	--self.dayLoginReward:		int32	
	--self.daySchduleReward:		int32	
	--self.dayPayReward:		int32	
	--self.backNumReward:		set[int32]	
	--self.activityTaskReward:		set[int32]	
end

function i3k_sbean.DBRoleBackActivity:clone()
	return clone(self)
end

function i3k_sbean.DBRoleBackActivity:decode(is)
	self.batch = is:popNumber()
	self.loginDay = is:popNumber()
	self.roleType = is:popNumber()
	self.dayCostNum = is:popNumber()
	self.dayLoginReward = is:popNumber()
	self.daySchduleReward = is:popNumber()
	self.dayPayReward = is:popNumber()
	self.backNumReward = is:popNumberSet()
	self.activityTaskReward = is:popNumberSet()
end

function i3k_sbean.DBRoleBackActivity:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.loginDay)
	os:pushNumber(self.roleType)
	os:pushNumber(self.dayCostNum)
	os:pushNumber(self.dayLoginReward)
	os:pushNumber(self.daySchduleReward)
	os:pushNumber(self.dayPayReward)
	os:pushNumberSet(self.backNumReward)
	os:pushNumberSet(self.activityTaskReward)
end


i3k_sbean.DBBackRoleData = i3k_class("DBBackRoleData")
function i3k_sbean.DBBackRoleData:ctor()
	--self.batch:		int32	
	--self.refreshDay:		int32	
	--self.backNum:		int32	
	--self.taskNum:		int32	
end

function i3k_sbean.DBBackRoleData:clone()
	return clone(self)
end

function i3k_sbean.DBBackRoleData:decode(is)
	self.batch = is:popNumber()
	self.refreshDay = is:popNumber()
	self.backNum = is:popNumber()
	self.taskNum = is:popNumber()
end

function i3k_sbean.DBBackRoleData:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.refreshDay)
	os:pushNumber(self.backNum)
	os:pushNumber(self.taskNum)
end


i3k_sbean.DBRoleChatBox = i3k_class("DBRoleChatBox")
function i3k_sbean.DBRoleChatBox:ctor()
	--self.currId:		int32	
	--self.activityIds:		map[int32, int32]	
end

function i3k_sbean.DBRoleChatBox:clone()
	return clone(self)
end

function i3k_sbean.DBRoleChatBox:decode(is)
	self.currId = is:popNumber()
	self.activityIds = is:popNumberNumberMap()
end

function i3k_sbean.DBRoleChatBox:encode(os)
	os:pushNumber(self.currId)
	os:pushNumberNumberMap(self.activityIds)
end


i3k_sbean.BlackMarketBuyRecordMap = i3k_class("BlackMarketBuyRecordMap")
function i3k_sbean.BlackMarketBuyRecordMap:ctor()
	--self.index:		int64	
	--self.records:		map[int64, BlackMarketBuyRecord]	
end

function i3k_sbean.BlackMarketBuyRecordMap:clone()
	return clone(self)
end

function i3k_sbean.BlackMarketBuyRecordMap:decode(is)
	self.index = is:popNumber()
	self.records = is:popNumberMap(i3k_sbean.BlackMarketBuyRecord)
end

function i3k_sbean.BlackMarketBuyRecordMap:encode(os)
	os:pushNumber(self.index)
	os:pushNumberMap(self.records)
end


i3k_sbean.DBGsBlackMarket = i3k_class("DBGsBlackMarket")
function i3k_sbean.DBGsBlackMarket:ctor()
	--self.records:		map[int32, BlackMarketBuyRecordMap]	
	--self.maxIndex:		int64	
end

function i3k_sbean.DBGsBlackMarket:clone()
	return clone(self)
end

function i3k_sbean.DBGsBlackMarket:decode(is)
	self.records = is:popNumberMap(i3k_sbean.BlackMarketBuyRecordMap)
	self.maxIndex = is:popNumber()
end

function i3k_sbean.DBGsBlackMarket:encode(os)
	os:pushNumberMap(self.records)
	os:pushNumber(self.maxIndex)
end


i3k_sbean.BlackMarketGood = i3k_class("BlackMarketGood")
function i3k_sbean.BlackMarketGood:ctor()
	--self.gid:		int32	
	--self.curPrice:		int32	
	--self.curRole:		int32	
	--self.curRoleName:		string	
	--self.curRoleGsid:		int32	
	--self.isSell:		int32	
	--self.payIndex:		int64	
end

function i3k_sbean.BlackMarketGood:clone()
	return clone(self)
end

function i3k_sbean.BlackMarketGood:decode(is)
	self.gid = is:popNumber()
	self.curPrice = is:popNumber()
	self.curRole = is:popNumber()
	self.curRoleName = is:popString()
	self.curRoleGsid = is:popNumber()
	self.isSell = is:popNumber()
	self.payIndex = is:popNumber()
end

function i3k_sbean.BlackMarketGood:encode(os)
	os:pushNumber(self.gid)
	os:pushNumber(self.curPrice)
	os:pushNumber(self.curRole)
	os:pushString(self.curRoleName)
	os:pushNumber(self.curRoleGsid)
	os:pushNumber(self.isSell)
	os:pushNumber(self.payIndex)
end


i3k_sbean.BlackMarketGoodHis = i3k_class("BlackMarketGoodHis")
function i3k_sbean.BlackMarketGoodHis:ctor()
	--self.gid:		int32	
	--self.buyPrice:		int32	
	--self.buyRole:		int32	
	--self.buyRoleName:		string	
	--self.buyRoleGsid:		int32	
	--self.buyTime:		int32	
end

function i3k_sbean.BlackMarketGoodHis:clone()
	return clone(self)
end

function i3k_sbean.BlackMarketGoodHis:decode(is)
	self.gid = is:popNumber()
	self.buyPrice = is:popNumber()
	self.buyRole = is:popNumber()
	self.buyRoleName = is:popString()
	self.buyRoleGsid = is:popNumber()
	self.buyTime = is:popNumber()
end

function i3k_sbean.BlackMarketGoodHis:encode(os)
	os:pushNumber(self.gid)
	os:pushNumber(self.buyPrice)
	os:pushNumber(self.buyRole)
	os:pushString(self.buyRoleName)
	os:pushNumber(self.buyRoleGsid)
	os:pushNumber(self.buyTime)
end


i3k_sbean.BlackMarketItemRecord = i3k_class("BlackMarketItemRecord")
function i3k_sbean.BlackMarketItemRecord:ctor()
	--self.recordId:		int64	
	--self.time:		int32	
	--self.roleId:		int32	
	--self.itemId:		int32	
	--self.itemNum:		int32	
	--self.payIndex:		int64	
	--self.type:		int32	
end

function i3k_sbean.BlackMarketItemRecord:clone()
	return clone(self)
end

function i3k_sbean.BlackMarketItemRecord:decode(is)
	self.recordId = is:popNumber()
	self.time = is:popNumber()
	self.roleId = is:popNumber()
	self.itemId = is:popNumber()
	self.itemNum = is:popNumber()
	self.payIndex = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.BlackMarketItemRecord:encode(os)
	os:pushNumber(self.recordId)
	os:pushNumber(self.time)
	os:pushNumber(self.roleId)
	os:pushNumber(self.itemId)
	os:pushNumber(self.itemNum)
	os:pushNumber(self.payIndex)
	os:pushNumber(self.type)
end


i3k_sbean.BlackMarketBuyRecord = i3k_class("BlackMarketBuyRecord")
function i3k_sbean.BlackMarketBuyRecord:ctor()
	--self.recordId:		int64	
	--self.gid:		int32	
	--self.roleId:		int32	
	--self.roleName:		string	
	--self.price:		int32	
	--self.displayName:		int32	
end

function i3k_sbean.BlackMarketBuyRecord:clone()
	return clone(self)
end

function i3k_sbean.BlackMarketBuyRecord:decode(is)
	self.recordId = is:popNumber()
	self.gid = is:popNumber()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
	self.price = is:popNumber()
	self.displayName = is:popNumber()
end

function i3k_sbean.BlackMarketBuyRecord:encode(os)
	os:pushNumber(self.recordId)
	os:pushNumber(self.gid)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
	os:pushNumber(self.price)
	os:pushNumber(self.displayName)
end


i3k_sbean.DBDaySectSalaryData = i3k_class("DBDaySectSalaryData")
function i3k_sbean.DBDaySectSalaryData:ctor()
	--self.dayVit:		int32	
	--self.memberData:		map[int32, MemberSectSalaryData]	
end

function i3k_sbean.DBDaySectSalaryData:clone()
	return clone(self)
end

function i3k_sbean.DBDaySectSalaryData:decode(is)
	self.dayVit = is:popNumber()
	self.memberData = is:popNumberMap(i3k_sbean.MemberSectSalaryData)
end

function i3k_sbean.DBDaySectSalaryData:encode(os)
	os:pushNumber(self.dayVit)
	os:pushNumberMap(self.memberData)
end


i3k_sbean.MemberSectSalaryData = i3k_class("MemberSectSalaryData")
function i3k_sbean.MemberSectSalaryData:ctor()
	--self.position:		int32	
	--self.baseSalary:		int32	
	--self.activitySalary:		int32	
end

function i3k_sbean.MemberSectSalaryData:clone()
	return clone(self)
end

function i3k_sbean.MemberSectSalaryData:decode(is)
	self.position = is:popNumber()
	self.baseSalary = is:popNumber()
	self.activitySalary = is:popNumber()
end

function i3k_sbean.MemberSectSalaryData:encode(os)
	os:pushNumber(self.position)
	os:pushNumber(self.baseSalary)
	os:pushNumber(self.activitySalary)
end


i3k_sbean.FightTeamEvent = i3k_class("FightTeamEvent")
function i3k_sbean.FightTeamEvent:ctor()
	--self.time:		int32	
	--self.eventID:		int32	
	--self.iArg1:		int32	
	--self.iArg2:		int32	
end

function i3k_sbean.FightTeamEvent:clone()
	return clone(self)
end

function i3k_sbean.FightTeamEvent:decode(is)
	self.time = is:popNumber()
	self.eventID = is:popNumber()
	self.iArg1 = is:popNumber()
	self.iArg2 = is:popNumber()
end

function i3k_sbean.FightTeamEvent:encode(os)
	os:pushNumber(self.time)
	os:pushNumber(self.eventID)
	os:pushNumber(self.iArg1)
	os:pushNumber(self.iArg2)
end


i3k_sbean.FightTeamInfo = i3k_class("FightTeamInfo")
function i3k_sbean.FightTeamInfo:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.leader:		int32	
	--self.members:		map[int32, FightTeamMember]	
	--self.score:		int32	
	--self.stage:		int32	
	--self.qualifyingJoinTimes:		int32	
	--self.qualifyingBuyTimes:		int32	
	--self.events:		vector[FightTeamEvent]	
end

function i3k_sbean.FightTeamInfo:clone()
	return clone(self)
end

function i3k_sbean.FightTeamInfo:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.leader = is:popNumber()
	self.members = is:popNumberMap(i3k_sbean.FightTeamMember)
	self.score = is:popNumber()
	self.stage = is:popNumber()
	self.qualifyingJoinTimes = is:popNumber()
	self.qualifyingBuyTimes = is:popNumber()
	self.events = is:popList(i3k_sbean.FightTeamEvent)
end

function i3k_sbean.FightTeamInfo:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushNumber(self.leader)
	os:pushNumberMap(self.members)
	os:pushNumber(self.score)
	os:pushNumber(self.stage)
	os:pushNumber(self.qualifyingJoinTimes)
	os:pushNumber(self.qualifyingBuyTimes)
	os:pushList(self.events)
end


i3k_sbean.FightTeamMemberOverview = i3k_class("FightTeamMemberOverview")
function i3k_sbean.FightTeamMemberOverview:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.leader:		int32	
	--self.score:		int32	
	--self.members:		map[int32, RoleOverview]	
end

function i3k_sbean.FightTeamMemberOverview:clone()
	return clone(self)
end

function i3k_sbean.FightTeamMemberOverview:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.leader = is:popNumber()
	self.score = is:popNumber()
	self.members = is:popNumberMap(i3k_sbean.RoleOverview)
end

function i3k_sbean.FightTeamMemberOverview:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushNumber(self.leader)
	os:pushNumber(self.score)
	os:pushNumberMap(self.members)
end


i3k_sbean.FightTeamMember = i3k_class("FightTeamMember")
function i3k_sbean.FightTeamMember:ctor()
	--self.overview:		RoleOverview	
	--self.online:		int32	
	--self.state:		int32	
end

function i3k_sbean.FightTeamMember:clone()
	return clone(self)
end

function i3k_sbean.FightTeamMember:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.online = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.FightTeamMember:encode(os)
	os:push(self.overview)
	os:pushNumber(self.online)
	os:pushNumber(self.state)
end


i3k_sbean.DBMeridian = i3k_class("DBMeridian")
function i3k_sbean.DBMeridian:ctor()
	--self.holes:		map[int32, DBMeridianHole]	
	--self.potentials:		map[int32, int32]	
end

function i3k_sbean.DBMeridian:clone()
	return clone(self)
end

function i3k_sbean.DBMeridian:decode(is)
	self.holes = is:popNumberMap(i3k_sbean.DBMeridianHole)
	self.potentials = is:popNumberNumberMap()
end

function i3k_sbean.DBMeridian:encode(os)
	os:pushNumberMap(self.holes)
	os:pushNumberNumberMap(self.potentials)
end


i3k_sbean.DBMeridianHole = i3k_class("DBMeridianHole")
function i3k_sbean.DBMeridianHole:ctor()
	--self.energy:		int32	
	--self.buff:		vector[int32]	
end

function i3k_sbean.DBMeridianHole:clone()
	return clone(self)
end

function i3k_sbean.DBMeridianHole:decode(is)
	self.energy = is:popNumber()
	self.buff = is:popNumberList()
end

function i3k_sbean.DBMeridianHole:encode(os)
	os:pushNumber(self.energy)
	os:pushNumberList(self.buff)
end


i3k_sbean.DBWeekTask = i3k_class("DBWeekTask")
function i3k_sbean.DBWeekTask:ctor()
	--self.id:		int32	
	--self.times:		int32	
	--self.rewards:		int32	
end

function i3k_sbean.DBWeekTask:clone()
	return clone(self)
end

function i3k_sbean.DBWeekTask:decode(is)
	self.id = is:popNumber()
	self.times = is:popNumber()
	self.rewards = is:popNumber()
end

function i3k_sbean.DBWeekTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.times)
	os:pushNumber(self.rewards)
end


i3k_sbean.RankChristmaxCard = i3k_class("RankChristmaxCard")
function i3k_sbean.RankChristmaxCard:ctor()
	--self.card:		ChristmasCardOverview	
	--self.rankKey:		int32	
end

function i3k_sbean.RankChristmaxCard:clone()
	return clone(self)
end

function i3k_sbean.RankChristmaxCard:decode(is)
	self.card = is:pop(i3k_sbean.ChristmasCardOverview)
	self.rankKey = is:popNumber()
end

function i3k_sbean.RankChristmaxCard:encode(os)
	os:push(self.card)
	os:pushNumber(self.rankKey)
end


i3k_sbean.DBWizardWish = i3k_class("DBWizardWish")
function i3k_sbean.DBWizardWish:ctor()
	--self.wishTime:		int32	
	--self.lastAddTime:		int32	
	--self.selectItem:		map[int32, int32]	
end

function i3k_sbean.DBWizardWish:clone()
	return clone(self)
end

function i3k_sbean.DBWizardWish:decode(is)
	self.wishTime = is:popNumber()
	self.lastAddTime = is:popNumber()
	self.selectItem = is:popNumberNumberMap()
end

function i3k_sbean.DBWizardWish:encode(os)
	os:pushNumber(self.wishTime)
	os:pushNumber(self.lastAddTime)
	os:pushNumberNumberMap(self.selectItem)
end


i3k_sbean.DBRoleAdventureStayInMap = i3k_class("DBRoleAdventureStayInMap")
function i3k_sbean.DBRoleAdventureStayInMap:ctor()
	--self.mapID:		int32	
	--self.startTime:		int32	
end

function i3k_sbean.DBRoleAdventureStayInMap:clone()
	return clone(self)
end

function i3k_sbean.DBRoleAdventureStayInMap:decode(is)
	self.mapID = is:popNumber()
	self.startTime = is:popNumber()
end

function i3k_sbean.DBRoleAdventureStayInMap:encode(os)
	os:pushNumber(self.mapID)
	os:pushNumber(self.startTime)
end


i3k_sbean.DBAdventureReward = i3k_class("DBAdventureReward")
function i3k_sbean.DBAdventureReward:ctor()
	--self.isTake:		int8	
	--self.rewards:		map[int32, int32]	
	--self.taskIDs:		vector[int32]	
end

function i3k_sbean.DBAdventureReward:clone()
	return clone(self)
end

function i3k_sbean.DBAdventureReward:decode(is)
	self.isTake = is:popNumber()
	self.rewards = is:popNumberNumberMap()
	self.taskIDs = is:popNumberList()
end

function i3k_sbean.DBAdventureReward:encode(os)
	os:pushNumber(self.isTake)
	os:pushNumberNumberMap(self.rewards)
	os:pushNumberList(self.taskIDs)
end


i3k_sbean.DBAdventureTask = i3k_class("DBAdventureTask")
function i3k_sbean.DBAdventureTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int8	
	--self.receiveTime:		int32	
	--self.rewards:		map[int32, int32]	
	--self.taskIDs:		vector[int32]	
	--self.padding:		int32	
end

function i3k_sbean.DBAdventureTask:clone()
	return clone(self)
end

function i3k_sbean.DBAdventureTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.receiveTime = is:popNumber()
	self.rewards = is:popNumberNumberMap()
	self.taskIDs = is:popNumberList()
	self.padding = is:popNumber()
end

function i3k_sbean.DBAdventureTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.receiveTime)
	os:pushNumberNumberMap(self.rewards)
	os:pushNumberList(self.taskIDs)
	os:pushNumber(self.padding)
end


i3k_sbean.DBRoleDragonHole = i3k_class("DBRoleDragonHole")
function i3k_sbean.DBRoleDragonHole:ctor()
	--self.curTask:		map[int32, DBDragonHoleTask]	
	--self.curTaskLib:		set[int32]	
	--self.weekFinishTime:		int32	
	--self.score:		int32	
	--self.rankTime:		int32	
	--self.dayRefreshTimes:		int32	
	--self.refreshTime:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBRoleDragonHole:clone()
	return clone(self)
end

function i3k_sbean.DBRoleDragonHole:decode(is)
	self.curTask = is:popNumberMap(i3k_sbean.DBDragonHoleTask)
	self.curTaskLib = is:popNumberSet()
	self.weekFinishTime = is:popNumber()
	self.score = is:popNumber()
	self.rankTime = is:popNumber()
	self.dayRefreshTimes = is:popNumber()
	self.refreshTime = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBRoleDragonHole:encode(os)
	os:pushNumberMap(self.curTask)
	os:pushNumberSet(self.curTaskLib)
	os:pushNumber(self.weekFinishTime)
	os:pushNumber(self.score)
	os:pushNumber(self.rankTime)
	os:pushNumber(self.dayRefreshTimes)
	os:pushNumber(self.refreshTime)
	os:pushNumber(self.padding)
end


i3k_sbean.DBDragonHoleTask = i3k_class("DBDragonHoleTask")
function i3k_sbean.DBDragonHoleTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int8	
	--self.receiveTime:		int32	
end

function i3k_sbean.DBDragonHoleTask:clone()
	return clone(self)
end

function i3k_sbean.DBDragonHoleTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.DBDragonHoleTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.DBSectPopMsg = i3k_class("DBSectPopMsg")
function i3k_sbean.DBSectPopMsg:ctor()
	--self.roleId:		int32	
	--self.msg:		string	
end

function i3k_sbean.DBSectPopMsg:clone()
	return clone(self)
end

function i3k_sbean.DBSectPopMsg:decode(is)
	self.roleId = is:popNumber()
	self.msg = is:popString()
end

function i3k_sbean.DBSectPopMsg:encode(os)
	os:pushNumber(self.roleId)
	os:pushString(self.msg)
end


i3k_sbean.DBSectDragonHoleScore = i3k_class("DBSectDragonHoleScore")
function i3k_sbean.DBSectDragonHoleScore:ctor()
	--self.rankClearTime:		int32	
	--self.score:		map[int32, int32]	
end

function i3k_sbean.DBSectDragonHoleScore:clone()
	return clone(self)
end

function i3k_sbean.DBSectDragonHoleScore:decode(is)
	self.rankClearTime = is:popNumber()
	self.score = is:popNumberNumberMap()
end

function i3k_sbean.DBSectDragonHoleScore:encode(os)
	os:pushNumber(self.rankClearTime)
	os:pushNumberNumberMap(self.score)
end


i3k_sbean.DBNewYearPackTask = i3k_class("DBNewYearPackTask")
function i3k_sbean.DBNewYearPackTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
end

function i3k_sbean.DBNewYearPackTask:clone()
	return clone(self)
end

function i3k_sbean.DBNewYearPackTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.DBNewYearPackTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
end


i3k_sbean.DBNewYearPack = i3k_class("DBNewYearPack")
function i3k_sbean.DBNewYearPack:ctor()
	--self.batch:		int32	
	--self.dayTask:		vector[DBNewYearPackTask]	
	--self.open:		int32	
	--self.score:		int32	
	--self.curPack:		int32	
	--self.reward:		int32	
end

function i3k_sbean.DBNewYearPack:clone()
	return clone(self)
end

function i3k_sbean.DBNewYearPack:decode(is)
	self.batch = is:popNumber()
	self.dayTask = is:popList(i3k_sbean.DBNewYearPackTask)
	self.open = is:popNumber()
	self.score = is:popNumber()
	self.curPack = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.DBNewYearPack:encode(os)
	os:pushNumber(self.batch)
	os:pushList(self.dayTask)
	os:pushNumber(self.open)
	os:pushNumber(self.score)
	os:pushNumber(self.curPack)
	os:pushNumber(self.reward)
end


i3k_sbean.DBLightSecret = i3k_class("DBLightSecret")
function i3k_sbean.DBLightSecret:ctor()
	--self.batch:		int32	
	--self.curDay:		int32	
	--self.curIndex:		int32	
	--self.score:		int32	
	--self.roleReward:		set[int32]	
	--self.worldReward:		set[int32]	
end

function i3k_sbean.DBLightSecret:clone()
	return clone(self)
end

function i3k_sbean.DBLightSecret:decode(is)
	self.batch = is:popNumber()
	self.curDay = is:popNumber()
	self.curIndex = is:popNumber()
	self.score = is:popNumber()
	self.roleReward = is:popNumberSet()
	self.worldReward = is:popNumberSet()
end

function i3k_sbean.DBLightSecret:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.curDay)
	os:pushNumber(self.curIndex)
	os:pushNumber(self.score)
	os:pushNumberSet(self.roleReward)
	os:pushNumberSet(self.worldReward)
end


i3k_sbean.DBPropStone = i3k_class("DBPropStone")
function i3k_sbean.DBPropStone:ctor()
	--self.stones:		vector[PropStone]	
end

function i3k_sbean.DBPropStone:clone()
	return clone(self)
end

function i3k_sbean.DBPropStone:decode(is)
	self.stones = is:popList(i3k_sbean.PropStone)
end

function i3k_sbean.DBPropStone:encode(os)
	os:pushList(self.stones)
end


i3k_sbean.PropStone = i3k_class("PropStone")
function i3k_sbean.PropStone:ctor()
	--self.propId:		int32	
	--self.quality:		int32	
end

function i3k_sbean.PropStone:clone()
	return clone(self)
end

function i3k_sbean.PropStone:decode(is)
	self.propId = is:popNumber()
	self.quality = is:popNumber()
end

function i3k_sbean.PropStone:encode(os)
	os:pushNumber(self.propId)
	os:pushNumber(self.quality)
end


i3k_sbean.DBDiagramStrength = i3k_class("DBDiagramStrength")
function i3k_sbean.DBDiagramStrength:ctor()
	--self.partId:		int32	
	--self.level:		int32	
	--self.failTime:		int32	
	--self.changeInfo:		DBDiagramChangePartInfo	
	--self.padding1_2:		int8	
	--self.padding1_3:		int8	
	--self.padding1_4:		int8	
	--self.padding2:		int32	
end

function i3k_sbean.DBDiagramStrength:clone()
	return clone(self)
end

function i3k_sbean.DBDiagramStrength:decode(is)
	self.partId = is:popNumber()
	self.level = is:popNumber()
	self.failTime = is:popNumber()
	self.changeInfo = is:pop(i3k_sbean.DBDiagramChangePartInfo)
	self.padding1_2 = is:popNumber()
	self.padding1_3 = is:popNumber()
	self.padding1_4 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBDiagramStrength:encode(os)
	os:pushNumber(self.partId)
	os:pushNumber(self.level)
	os:pushNumber(self.failTime)
	os:push(self.changeInfo)
	os:pushNumber(self.padding1_2)
	os:pushNumber(self.padding1_3)
	os:pushNumber(self.padding1_4)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBDiagram = i3k_class("DBDiagram")
function i3k_sbean.DBDiagram:ctor()
	--self.id:		int32	
	--self.part:		int32	
	--self.baseProp:		vector[Prop]	
	--self.additionProp:		vector[int32]	
	--self.padding1:		int32	
	--self.padding2:		int32	
	--self.padding3:		int32	
end

function i3k_sbean.DBDiagram:clone()
	return clone(self)
end

function i3k_sbean.DBDiagram:decode(is)
	self.id = is:popNumber()
	self.part = is:popNumber()
	self.baseProp = is:popList(i3k_sbean.Prop)
	self.additionProp = is:popNumberList()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
	self.padding3 = is:popNumber()
end

function i3k_sbean.DBDiagram:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.part)
	os:pushList(self.baseProp)
	os:pushNumberList(self.additionProp)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
	os:pushNumber(self.padding3)
end


i3k_sbean.DBDiagramChange = i3k_class("DBDiagramChange")
function i3k_sbean.DBDiagramChange:ctor()
	--self.usedChangePoint:		int32	
	--self.buyChangePointNum:		int32	
	--self.changeSkills:		map[int32, int32]	
end

function i3k_sbean.DBDiagramChange:clone()
	return clone(self)
end

function i3k_sbean.DBDiagramChange:decode(is)
	self.usedChangePoint = is:popNumber()
	self.buyChangePointNum = is:popNumber()
	self.changeSkills = is:popNumberNumberMap()
end

function i3k_sbean.DBDiagramChange:encode(os)
	os:pushNumber(self.usedChangePoint)
	os:pushNumber(self.buyChangePointNum)
	os:pushNumberNumberMap(self.changeSkills)
end


i3k_sbean.DBDiagramChangePartInfo = i3k_class("DBDiagramChangePartInfo")
function i3k_sbean.DBDiagramChangePartInfo:ctor()
	--self.equipSkill:		int32	
	--self.propPoints:		map[int32, int32]	
end

function i3k_sbean.DBDiagramChangePartInfo:clone()
	return clone(self)
end

function i3k_sbean.DBDiagramChangePartInfo:decode(is)
	self.equipSkill = is:popNumber()
	self.propPoints = is:popNumberNumberMap()
end

function i3k_sbean.DBDiagramChangePartInfo:encode(os)
	os:pushNumber(self.equipSkill)
	os:pushNumberNumberMap(self.propPoints)
end


i3k_sbean.DBDiagramChangeInfo = i3k_class("DBDiagramChangeInfo")
function i3k_sbean.DBDiagramChangeInfo:ctor()
	--self.changeSkill:		map[int32, int32]	
	--self.changePart:		map[int32, DBDiagramChangePartInfo]	
end

function i3k_sbean.DBDiagramChangeInfo:clone()
	return clone(self)
end

function i3k_sbean.DBDiagramChangeInfo:decode(is)
	self.changeSkill = is:popNumberNumberMap()
	self.changePart = is:popNumberMap(i3k_sbean.DBDiagramChangePartInfo)
end

function i3k_sbean.DBDiagramChangeInfo:encode(os)
	os:pushNumberNumberMap(self.changeSkill)
	os:pushNumberMap(self.changePart)
end


i3k_sbean.DBMapInstanceDropLog = i3k_class("DBMapInstanceDropLog")
function i3k_sbean.DBMapInstanceDropLog:ctor()
	--self.mapID:		int32	
	--self.drops:		map[int32, int32]	
	--self.mines:		map[int32, int32]	
	--self.monsters:		map[int32, int32]	
	--self.padding1_2:		int8	
	--self.padding1_3:		int8	
	--self.padding1_4:		int8	
	--self.padding2:		int32	
end

function i3k_sbean.DBMapInstanceDropLog:clone()
	return clone(self)
end

function i3k_sbean.DBMapInstanceDropLog:decode(is)
	self.mapID = is:popNumber()
	self.drops = is:popNumberNumberMap()
	self.mines = is:popNumberNumberMap()
	self.monsters = is:popNumberNumberMap()
	self.padding1_2 = is:popNumber()
	self.padding1_3 = is:popNumber()
	self.padding1_4 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBMapInstanceDropLog:encode(os)
	os:pushNumber(self.mapID)
	os:pushNumberNumberMap(self.drops)
	os:pushNumberNumberMap(self.mines)
	os:pushNumberNumberMap(self.monsters)
	os:pushNumber(self.padding1_2)
	os:pushNumber(self.padding1_3)
	os:pushNumber(self.padding1_4)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBRoleSectTradeRoute = i3k_class("DBRoleSectTradeRoute")
function i3k_sbean.DBRoleSectTradeRoute:ctor()
	--self.lvl:		int32	
	--self.curRefreshTasks:		vector[int32]	
	--self.curStar:		int32	
	--self.curTask:		int32	
	--self.curValue:		int32	
	--self.curReceiveTime:		int32	
	--self.lastRefreshTasksTime:		int32	
	--self.refreshTime:		int32	
end

function i3k_sbean.DBRoleSectTradeRoute:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSectTradeRoute:decode(is)
	self.lvl = is:popNumber()
	self.curRefreshTasks = is:popNumberList()
	self.curStar = is:popNumber()
	self.curTask = is:popNumber()
	self.curValue = is:popNumber()
	self.curReceiveTime = is:popNumber()
	self.lastRefreshTasksTime = is:popNumber()
	self.refreshTime = is:popNumber()
end

function i3k_sbean.DBRoleSectTradeRoute:encode(os)
	os:pushNumber(self.lvl)
	os:pushNumberList(self.curRefreshTasks)
	os:pushNumber(self.curStar)
	os:pushNumber(self.curTask)
	os:pushNumber(self.curValue)
	os:pushNumber(self.curReceiveTime)
	os:pushNumber(self.lastRefreshTasksTime)
	os:pushNumber(self.refreshTime)
end


i3k_sbean.DBRoleMillionAnswer = i3k_class("DBRoleMillionAnswer")
function i3k_sbean.DBRoleMillionAnswer:ctor()
	--self.answerDay:		int32	
	--self.curQustionIndex:		int32	
	--self.dayWrongTime:		int32	
	--self.sign:		int32	
end

function i3k_sbean.DBRoleMillionAnswer:clone()
	return clone(self)
end

function i3k_sbean.DBRoleMillionAnswer:decode(is)
	self.answerDay = is:popNumber()
	self.curQustionIndex = is:popNumber()
	self.dayWrongTime = is:popNumber()
	self.sign = is:popNumber()
end

function i3k_sbean.DBRoleMillionAnswer:encode(os)
	os:pushNumber(self.answerDay)
	os:pushNumber(self.curQustionIndex)
	os:pushNumber(self.dayWrongTime)
	os:pushNumber(self.sign)
end


i3k_sbean.DBRoleForceFameInfo = i3k_class("DBRoleForceFameInfo")
function i3k_sbean.DBRoleForceFameInfo:ctor()
	--self.fame:		map[int32, int32]	
	--self.tasks:		map[int32, DBForceFameTask]	
	--self.donate:		map[int32, DBForceDonateInfo]	
	--self.padding1:		int32	
	--self.padding2:		int32	
	--self.padding3:		int32	
end

function i3k_sbean.DBRoleForceFameInfo:clone()
	return clone(self)
end

function i3k_sbean.DBRoleForceFameInfo:decode(is)
	self.fame = is:popNumberNumberMap()
	self.tasks = is:popNumberMap(i3k_sbean.DBForceFameTask)
	self.donate = is:popNumberMap(i3k_sbean.DBForceDonateInfo)
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
	self.padding3 = is:popNumber()
end

function i3k_sbean.DBRoleForceFameInfo:encode(os)
	os:pushNumberNumberMap(self.fame)
	os:pushNumberMap(self.tasks)
	os:pushNumberMap(self.donate)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
	os:pushNumber(self.padding3)
end


i3k_sbean.DBForceDonateInfo = i3k_class("DBForceDonateInfo")
function i3k_sbean.DBForceDonateInfo:ctor()
	--self.donateTimes:		map[int32, int32]	
	--self.goods:		set[int32]	
end

function i3k_sbean.DBForceDonateInfo:clone()
	return clone(self)
end

function i3k_sbean.DBForceDonateInfo:decode(is)
	self.donateTimes = is:popNumberNumberMap()
	self.goods = is:popNumberSet()
end

function i3k_sbean.DBForceDonateInfo:encode(os)
	os:pushNumberNumberMap(self.donateTimes)
	os:pushNumberSet(self.goods)
end


i3k_sbean.DBAuctionMillionAnswer = i3k_class("DBAuctionMillionAnswer")
function i3k_sbean.DBAuctionMillionAnswer:ctor()
	--self.zoneSignNum:		map[int32, int32]	
	--self.finishRoles:		set[int32]	
	--self.rewardDay:		int32	
	--self.isReward:		int32	
end

function i3k_sbean.DBAuctionMillionAnswer:clone()
	return clone(self)
end

function i3k_sbean.DBAuctionMillionAnswer:decode(is)
	self.zoneSignNum = is:popNumberNumberMap()
	self.finishRoles = is:popNumberSet()
	self.rewardDay = is:popNumber()
	self.isReward = is:popNumber()
end

function i3k_sbean.DBAuctionMillionAnswer:encode(os)
	os:pushNumberNumberMap(self.zoneSignNum)
	os:pushNumberSet(self.finishRoles)
	os:pushNumber(self.rewardDay)
	os:pushNumber(self.isReward)
end


i3k_sbean.DBWorldMillionAnswer = i3k_class("DBWorldMillionAnswer")
function i3k_sbean.DBWorldMillionAnswer:ctor()
	--self.answerDay:		int32	
	--self.rewardedZones:		set[int32]	
	--self.successPlayer:		map[int32, MillionAnswerRoles]	
	--self.zoneSignRoles:		map[int32, MillionAnswerRoles]	
end

function i3k_sbean.DBWorldMillionAnswer:clone()
	return clone(self)
end

function i3k_sbean.DBWorldMillionAnswer:decode(is)
	self.answerDay = is:popNumber()
	self.rewardedZones = is:popNumberSet()
	self.successPlayer = is:popNumberMap(i3k_sbean.MillionAnswerRoles)
	self.zoneSignRoles = is:popNumberMap(i3k_sbean.MillionAnswerRoles)
end

function i3k_sbean.DBWorldMillionAnswer:encode(os)
	os:pushNumber(self.answerDay)
	os:pushNumberSet(self.rewardedZones)
	os:pushNumberMap(self.successPlayer)
	os:pushNumberMap(self.zoneSignRoles)
end


i3k_sbean.MillionAnswerRoles = i3k_class("MillionAnswerRoles")
function i3k_sbean.MillionAnswerRoles:ctor()
	--self.roles:		set[int32]	
end

function i3k_sbean.MillionAnswerRoles:clone()
	return clone(self)
end

function i3k_sbean.MillionAnswerRoles:decode(is)
	self.roles = is:popNumberSet()
end

function i3k_sbean.MillionAnswerRoles:encode(os)
	os:pushNumberSet(self.roles)
end


i3k_sbean.DBTransformRoad = i3k_class("DBTransformRoad")
function i3k_sbean.DBTransformRoad:ctor()
	--self.level:		int32	
	--self.liftWheel:		set[int32]	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBTransformRoad:clone()
	return clone(self)
end

function i3k_sbean.DBTransformRoad:decode(is)
	self.level = is:popNumber()
	self.liftWheel = is:popNumberSet()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBTransformRoad:encode(os)
	os:pushNumber(self.level)
	os:pushNumberSet(self.liftWheel)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBSingleExplore = i3k_class("DBSingleExplore")
function i3k_sbean.DBSingleExplore:ctor()
	--self.curMapGroup:		int32	
	--self.curNpcMapGroup:		int32	
	--self.isFinish:		int32	
	--self.buffs:		map[int32, int32]	
	--self.buffIndex:		vector[int32]	
	--self.pets:		set[int32]	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBSingleExplore:clone()
	return clone(self)
end

function i3k_sbean.DBSingleExplore:decode(is)
	self.curMapGroup = is:popNumber()
	self.curNpcMapGroup = is:popNumber()
	self.isFinish = is:popNumber()
	self.buffs = is:popNumberNumberMap()
	self.buffIndex = is:popNumberList()
	self.pets = is:popNumberSet()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBSingleExplore:encode(os)
	os:pushNumber(self.curMapGroup)
	os:pushNumber(self.curNpcMapGroup)
	os:pushNumber(self.isFinish)
	os:pushNumberNumberMap(self.buffs)
	os:pushNumberList(self.buffIndex)
	os:pushNumberSet(self.pets)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBDivination = i3k_class("DBDivination")
function i3k_sbean.DBDivination:ctor()
	--self.fortuneId:		int8	
	--self.dayDivinationCount:		int8	
	--self.hasReward:		int8	
	--self.padding:		int32	
end

function i3k_sbean.DBDivination:clone()
	return clone(self)
end

function i3k_sbean.DBDivination:decode(is)
	self.fortuneId = is:popNumber()
	self.dayDivinationCount = is:popNumber()
	self.hasReward = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBDivination:encode(os)
	os:pushNumber(self.fortuneId)
	os:pushNumber(self.dayDivinationCount)
	os:pushNumber(self.hasReward)
	os:pushNumber(self.padding)
end


i3k_sbean.DBRecord = i3k_class("DBRecord")
function i3k_sbean.DBRecord:ctor()
	--self.recordId:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBRecord:clone()
	return clone(self)
end

function i3k_sbean.DBRecord:decode(is)
	self.recordId = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBRecord:encode(os)
	os:pushNumber(self.recordId)
	os:pushNumber(self.padding)
end


i3k_sbean.DBWorldCups = i3k_class("DBWorldCups")
function i3k_sbean.DBWorldCups:ctor()
	--self.roleInfos:		map[int32, DBWorldCupRoleInfos]	
	--self.tempRoleInfos:		map[int32, DBWorldCupRoleInfos]	
end

function i3k_sbean.DBWorldCups:clone()
	return clone(self)
end

function i3k_sbean.DBWorldCups:decode(is)
	self.roleInfos = is:popNumberMap(i3k_sbean.DBWorldCupRoleInfos)
	self.tempRoleInfos = is:popNumberMap(i3k_sbean.DBWorldCupRoleInfos)
end

function i3k_sbean.DBWorldCups:encode(os)
	os:pushNumberMap(self.roleInfos)
	os:pushNumberMap(self.tempRoleInfos)
end


i3k_sbean.DBWorldCupRoleInfos = i3k_class("DBWorldCupRoleInfos")
function i3k_sbean.DBWorldCupRoleInfos:ctor()
	--self.worldCupRoleInfo:		vector[DBWorldCupRoleInfo]	
end

function i3k_sbean.DBWorldCupRoleInfos:clone()
	return clone(self)
end

function i3k_sbean.DBWorldCupRoleInfos:decode(is)
	self.worldCupRoleInfo = is:popList(i3k_sbean.DBWorldCupRoleInfo)
end

function i3k_sbean.DBWorldCupRoleInfos:encode(os)
	os:pushList(self.worldCupRoleInfo)
end


i3k_sbean.DBWorldCupRoleInfo = i3k_class("DBWorldCupRoleInfo")
function i3k_sbean.DBWorldCupRoleInfo:ctor()
	--self.roleId:		int32	
	--self.countryId:		int32	
	--self.recordId:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBWorldCupRoleInfo:clone()
	return clone(self)
end

function i3k_sbean.DBWorldCupRoleInfo:decode(is)
	self.roleId = is:popNumber()
	self.countryId = is:popNumber()
	self.recordId = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBWorldCupRoleInfo:encode(os)
	os:pushNumber(self.roleId)
	os:pushNumber(self.countryId)
	os:pushNumber(self.recordId)
	os:pushNumber(self.padding)
end


i3k_sbean.DBHomeland = i3k_class("DBHomeland")
function i3k_sbean.DBHomeland:ctor()
	--self.level:		int32	
	--self.buildValue:		int32	
	--self.name:		string	
	--self.grounds:		map[int32, DBHomelandGround]	
	--self.fishData:		DBHomelandFishData	
	--self.plantData:		DBHomelandPlantData	
	--self.equipData:		DBHomelandEquipData	
	--self.decorate:		map[int32, DBHomelandDecorate]	
	--self.poolLevel:		int32	
	--self.heat:		int32	
	--self.historys:		vector[DBHomelandHistory]	
	--self.houseData:		DBHomelandHouseData	
	--self.wizzardRewards:		map[int32, int32]	
	--self.homelandPetPositions:		map[int32, DBHomelandPetPosition]	
	--self.maxBuildValue:		int32	
	--self.dayOtherAcionTimes:		int32	
	--self.padding4:		int32	
	--self.padding5:		int32	
end

function i3k_sbean.DBHomeland:clone()
	return clone(self)
end

function i3k_sbean.DBHomeland:decode(is)
	self.level = is:popNumber()
	self.buildValue = is:popNumber()
	self.name = is:popString()
	self.grounds = is:popNumberMap(i3k_sbean.DBHomelandGround)
	self.fishData = is:pop(i3k_sbean.DBHomelandFishData)
	self.plantData = is:pop(i3k_sbean.DBHomelandPlantData)
	self.equipData = is:pop(i3k_sbean.DBHomelandEquipData)
	self.decorate = is:popNumberMap(i3k_sbean.DBHomelandDecorate)
	self.poolLevel = is:popNumber()
	self.heat = is:popNumber()
	self.historys = is:popList(i3k_sbean.DBHomelandHistory)
	self.houseData = is:pop(i3k_sbean.DBHomelandHouseData)
	self.wizzardRewards = is:popNumberNumberMap()
	self.homelandPetPositions = is:popNumberMap(i3k_sbean.DBHomelandPetPosition)
	self.maxBuildValue = is:popNumber()
	self.dayOtherAcionTimes = is:popNumber()
	self.padding4 = is:popNumber()
	self.padding5 = is:popNumber()
end

function i3k_sbean.DBHomeland:encode(os)
	os:pushNumber(self.level)
	os:pushNumber(self.buildValue)
	os:pushString(self.name)
	os:pushNumberMap(self.grounds)
	os:push(self.fishData)
	os:push(self.plantData)
	os:push(self.equipData)
	os:pushNumberMap(self.decorate)
	os:pushNumber(self.poolLevel)
	os:pushNumber(self.heat)
	os:pushList(self.historys)
	os:push(self.houseData)
	os:pushNumberNumberMap(self.wizzardRewards)
	os:pushNumberMap(self.homelandPetPositions)
	os:pushNumber(self.maxBuildValue)
	os:pushNumber(self.dayOtherAcionTimes)
	os:pushNumber(self.padding4)
	os:pushNumber(self.padding5)
end


i3k_sbean.DBHomelandHouseData = i3k_class("DBHomelandHouseData")
function i3k_sbean.DBHomelandHouseData:ctor()
	--self.houseLevel:		int32	
	--self.furnitures:		vector[DBHomelandFurnitures]	
	--self.pendants:		vector[DBHomelandPendant]	
	--self.landFurnitures:		map[int32, int32]	
	--self.wallFurnitures:		map[int32, int32]	
	--self.additionFurnitures:		map[int32, int32]	
	--self.skinData:		DBHomelandHouseSkin	
	--self.useFloorFurnitures:		vector[DBHomelandFloorFurnitures]	
	--self.floorFurnitures:		map[int32, int32]	
	--self.padding1_4:		int8	
end

function i3k_sbean.DBHomelandHouseData:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandHouseData:decode(is)
	self.houseLevel = is:popNumber()
	self.furnitures = is:popList(i3k_sbean.DBHomelandFurnitures)
	self.pendants = is:popList(i3k_sbean.DBHomelandPendant)
	self.landFurnitures = is:popNumberNumberMap()
	self.wallFurnitures = is:popNumberNumberMap()
	self.additionFurnitures = is:popNumberNumberMap()
	self.skinData = is:pop(i3k_sbean.DBHomelandHouseSkin)
	self.useFloorFurnitures = is:popList(i3k_sbean.DBHomelandFloorFurnitures)
	self.floorFurnitures = is:popNumberNumberMap()
	self.padding1_4 = is:popNumber()
end

function i3k_sbean.DBHomelandHouseData:encode(os)
	os:pushNumber(self.houseLevel)
	os:pushList(self.furnitures)
	os:pushList(self.pendants)
	os:pushNumberNumberMap(self.landFurnitures)
	os:pushNumberNumberMap(self.wallFurnitures)
	os:pushNumberNumberMap(self.additionFurnitures)
	os:push(self.skinData)
	os:pushList(self.useFloorFurnitures)
	os:pushNumberNumberMap(self.floorFurnitures)
	os:pushNumber(self.padding1_4)
end


i3k_sbean.DBHomelandHouseSkin = i3k_class("DBHomelandHouseSkin")
function i3k_sbean.DBHomelandHouseSkin:ctor()
	--self.curId:		int32	
	--self.unlockIds:		set[int32]	
end

function i3k_sbean.DBHomelandHouseSkin:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandHouseSkin:decode(is)
	self.curId = is:popNumber()
	self.unlockIds = is:popNumberSet()
end

function i3k_sbean.DBHomelandHouseSkin:encode(os)
	os:pushNumber(self.curId)
	os:pushNumberSet(self.unlockIds)
end


i3k_sbean.DBHomelandPendant = i3k_class("DBHomelandPendant")
function i3k_sbean.DBHomelandPendant:ctor()
	--self.id:		int32	
	--self.wallIndex:		int32	
	--self.position:		double	
	--self.padding1:		int32	
end

function i3k_sbean.DBHomelandPendant:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandPendant:decode(is)
	self.id = is:popNumber()
	self.wallIndex = is:popNumber()
	self.position = is:popNumber()
	self.padding1 = is:popNumber()
end

function i3k_sbean.DBHomelandPendant:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.wallIndex)
	os:pushNumber(self.position)
	os:pushNumber(self.padding1)
end


i3k_sbean.DBHomelandFurnitures = i3k_class("DBHomelandFurnitures")
function i3k_sbean.DBHomelandFurnitures:ctor()
	--self.furnitureId:		int32	
	--self.positionX:		int32	
	--self.positionY:		int32	
	--self.direction:		int32	
	--self.additionId:		int32	
	--self.padding1:		int32	
end

function i3k_sbean.DBHomelandFurnitures:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandFurnitures:decode(is)
	self.furnitureId = is:popNumber()
	self.positionX = is:popNumber()
	self.positionY = is:popNumber()
	self.direction = is:popNumber()
	self.additionId = is:popNumber()
	self.padding1 = is:popNumber()
end

function i3k_sbean.DBHomelandFurnitures:encode(os)
	os:pushNumber(self.furnitureId)
	os:pushNumber(self.positionX)
	os:pushNumber(self.positionY)
	os:pushNumber(self.direction)
	os:pushNumber(self.additionId)
	os:pushNumber(self.padding1)
end


i3k_sbean.DBHomelandFloorFurnitures = i3k_class("DBHomelandFloorFurnitures")
function i3k_sbean.DBHomelandFloorFurnitures:ctor()
	--self.furnitureId:		int32	
	--self.positionX:		int32	
	--self.positionY:		int32	
	--self.direction:		int32	
	--self.padding1:		int32	
end

function i3k_sbean.DBHomelandFloorFurnitures:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandFloorFurnitures:decode(is)
	self.furnitureId = is:popNumber()
	self.positionX = is:popNumber()
	self.positionY = is:popNumber()
	self.direction = is:popNumber()
	self.padding1 = is:popNumber()
end

function i3k_sbean.DBHomelandFloorFurnitures:encode(os)
	os:pushNumber(self.furnitureId)
	os:pushNumber(self.positionX)
	os:pushNumber(self.positionY)
	os:pushNumber(self.direction)
	os:pushNumber(self.padding1)
end


i3k_sbean.DBHomelandHistory = i3k_class("DBHomelandHistory")
function i3k_sbean.DBHomelandHistory:ctor()
	--self.time:		int32	
	--self.type:		int32	
	--self.iArgs:		vector[int32]	
	--self.vArgs:		vector[string]	
	--self.padding1:		int32	
end

function i3k_sbean.DBHomelandHistory:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandHistory:decode(is)
	self.time = is:popNumber()
	self.type = is:popNumber()
	self.iArgs = is:popNumberList()
	self.vArgs = is:popStringList()
	self.padding1 = is:popNumber()
end

function i3k_sbean.DBHomelandHistory:encode(os)
	os:pushNumber(self.time)
	os:pushNumber(self.type)
	os:pushNumberList(self.iArgs)
	os:pushStringList(self.vArgs)
	os:pushNumber(self.padding1)
end


i3k_sbean.DBHomelandDecorate = i3k_class("DBHomelandDecorate")
function i3k_sbean.DBHomelandDecorate:ctor()
	--self.id:		int32	
	--self.endTime:		int32	
	--self.padding1:		int32	
end

function i3k_sbean.DBHomelandDecorate:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandDecorate:decode(is)
	self.id = is:popNumber()
	self.endTime = is:popNumber()
	self.padding1 = is:popNumber()
end

function i3k_sbean.DBHomelandDecorate:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.endTime)
	os:pushNumber(self.padding1)
end


i3k_sbean.DBHomelandEquipData = i3k_class("DBHomelandEquipData")
function i3k_sbean.DBHomelandEquipData:ctor()
	--self.curEquip:		map[int32, DBHomelandEquip]	
	--self.equipBag:		map[int32, DBHomelandEquip]	
	--self.curIndex:		int32	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBHomelandEquipData:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandEquipData:decode(is)
	self.curEquip = is:popNumberMap(i3k_sbean.DBHomelandEquip)
	self.equipBag = is:popNumberMap(i3k_sbean.DBHomelandEquip)
	self.curIndex = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBHomelandEquipData:encode(os)
	os:pushNumberMap(self.curEquip)
	os:pushNumberMap(self.equipBag)
	os:pushNumber(self.curIndex)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBHomelandEquip = i3k_class("DBHomelandEquip")
function i3k_sbean.DBHomelandEquip:ctor()
	--self.id:		int32	
	--self.confId:		int32	
	--self.canUseTime:		int32	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBHomelandEquip:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandEquip:decode(is)
	self.id = is:popNumber()
	self.confId = is:popNumber()
	self.canUseTime = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBHomelandEquip:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.confId)
	os:pushNumber(self.canUseTime)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBHomelandGround = i3k_class("DBHomelandGround")
function i3k_sbean.DBHomelandGround:ctor()
	--self.level:		int32	
	--self.curPlant:		DBHomelandPlant	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBHomelandGround:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandGround:decode(is)
	self.level = is:popNumber()
	self.curPlant = is:pop(i3k_sbean.DBHomelandPlant)
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBHomelandGround:encode(os)
	os:pushNumber(self.level)
	os:push(self.curPlant)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBHomelandPlant = i3k_class("DBHomelandPlant")
function i3k_sbean.DBHomelandPlant:ctor()
	--self.id:		int32	
	--self.plantTime:		int32	
	--self.lastWaterTime:		int32	
	--self.waterTimes:		map[int32, int32]	
	--self.lastStealTime:		int32	
	--self.lastNurseTime:		int32	
	--self.nurseTimes:		int32	
	--self.lastHarvestTime:		int32	
	--self.harvestTimes:		int32	
	--self.plantLevel:		int32	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBHomelandPlant:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandPlant:decode(is)
	self.id = is:popNumber()
	self.plantTime = is:popNumber()
	self.lastWaterTime = is:popNumber()
	self.waterTimes = is:popNumberNumberMap()
	self.lastStealTime = is:popNumber()
	self.lastNurseTime = is:popNumber()
	self.nurseTimes = is:popNumber()
	self.lastHarvestTime = is:popNumber()
	self.harvestTimes = is:popNumber()
	self.plantLevel = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBHomelandPlant:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.plantTime)
	os:pushNumber(self.lastWaterTime)
	os:pushNumberNumberMap(self.waterTimes)
	os:pushNumber(self.lastStealTime)
	os:pushNumber(self.lastNurseTime)
	os:pushNumber(self.nurseTimes)
	os:pushNumber(self.lastHarvestTime)
	os:pushNumber(self.harvestTimes)
	os:pushNumber(self.plantLevel)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBHomelandPlantData = i3k_class("DBHomelandPlantData")
function i3k_sbean.DBHomelandPlantData:ctor()
	--self.plantLevel:		int32	
	--self.plantExp:		int32	
	--self.dayStealTime:		int32	
	--self.allStealTime:		int32	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBHomelandPlantData:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandPlantData:decode(is)
	self.plantLevel = is:popNumber()
	self.plantExp = is:popNumber()
	self.dayStealTime = is:popNumber()
	self.allStealTime = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBHomelandPlantData:encode(os)
	os:pushNumber(self.plantLevel)
	os:pushNumber(self.plantExp)
	os:pushNumber(self.dayStealTime)
	os:pushNumber(self.allStealTime)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBHomelandFishData = i3k_class("DBHomelandFishData")
function i3k_sbean.DBHomelandFishData:ctor()
	--self.fishLevel:		int32	
	--self.fishExp:		int32	
	--self.dayFishTime:		int32	
	--self.dayFishExpTime:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBHomelandFishData:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandFishData:decode(is)
	self.fishLevel = is:popNumber()
	self.fishExp = is:popNumber()
	self.dayFishTime = is:popNumber()
	self.dayFishExpTime = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBHomelandFishData:encode(os)
	os:pushNumber(self.fishLevel)
	os:pushNumber(self.fishExp)
	os:pushNumber(self.dayFishTime)
	os:pushNumber(self.dayFishExpTime)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBVipRewardTakeLog = i3k_class("DBVipRewardTakeLog")
function i3k_sbean.DBVipRewardTakeLog:ctor()
	--self.logKey:		int32	
	--self.takedRewards:		set[int32]	
end

function i3k_sbean.DBVipRewardTakeLog:clone()
	return clone(self)
end

function i3k_sbean.DBVipRewardTakeLog:decode(is)
	self.logKey = is:popNumber()
	self.takedRewards = is:popNumberSet()
end

function i3k_sbean.DBVipRewardTakeLog:encode(os)
	os:pushNumber(self.logKey)
	os:pushNumberSet(self.takedRewards)
end


i3k_sbean.DBSectDonation = i3k_class("DBSectDonation")
function i3k_sbean.DBSectDonation:ctor()
	--self.items:		map[int32, DBSectDonationItem]	
	--self.lastRefresh:		int32	
end

function i3k_sbean.DBSectDonation:clone()
	return clone(self)
end

function i3k_sbean.DBSectDonation:decode(is)
	self.items = is:popNumberMap(i3k_sbean.DBSectDonationItem)
	self.lastRefresh = is:popNumber()
end

function i3k_sbean.DBSectDonation:encode(os)
	os:pushNumberMap(self.items)
	os:pushNumber(self.lastRefresh)
end


i3k_sbean.DBSectDonationItem = i3k_class("DBSectDonationItem")
function i3k_sbean.DBSectDonationItem:ctor()
	--self.id:		int32	
	--self.donationRoles:		set[int32]	
end

function i3k_sbean.DBSectDonationItem:clone()
	return clone(self)
end

function i3k_sbean.DBSectDonationItem:decode(is)
	self.id = is:popNumber()
	self.donationRoles = is:popNumberSet()
end

function i3k_sbean.DBSectDonationItem:encode(os)
	os:pushNumber(self.id)
	os:pushNumberSet(self.donationRoles)
end


i3k_sbean.DBRoleSectDonation = i3k_class("DBRoleSectDonation")
function i3k_sbean.DBRoleSectDonation:ctor()
	--self.hasDonation:		set[int32]	
	--self.honor:		int32	
	--self.lastRefresh:		int32	
end

function i3k_sbean.DBRoleSectDonation:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSectDonation:decode(is)
	self.hasDonation = is:popNumberSet()
	self.honor = is:popNumber()
	self.lastRefresh = is:popNumber()
end

function i3k_sbean.DBRoleSectDonation:encode(os)
	os:pushNumberSet(self.hasDonation)
	os:pushNumber(self.honor)
	os:pushNumber(self.lastRefresh)
end


i3k_sbean.DBSectCityWar = i3k_class("DBSectCityWar")
function i3k_sbean.DBSectCityWar:ctor()
	--self.dragonCrystal:		int32	
	--self.dayCityLightTime:		int32	
	--self.bidPrice:		vector[int32]	
	--self.noticeSignTag:		int32	
	--self.padding2:		int32	
	--self.padding3:		int32	
end

function i3k_sbean.DBSectCityWar:clone()
	return clone(self)
end

function i3k_sbean.DBSectCityWar:decode(is)
	self.dragonCrystal = is:popNumber()
	self.dayCityLightTime = is:popNumber()
	self.bidPrice = is:popNumberList()
	self.noticeSignTag = is:popNumber()
	self.padding2 = is:popNumber()
	self.padding3 = is:popNumber()
end

function i3k_sbean.DBSectCityWar:encode(os)
	os:pushNumber(self.dragonCrystal)
	os:pushNumber(self.dayCityLightTime)
	os:pushNumberList(self.bidPrice)
	os:pushNumber(self.noticeSignTag)
	os:pushNumber(self.padding2)
	os:pushNumber(self.padding3)
end


i3k_sbean.DBWorldCityWar = i3k_class("DBWorldCityWar")
function i3k_sbean.DBWorldCityWar:ctor()
	--self.lastCityLightTime:		int32	
	--self.lastCityId:		int32	
	--self.lastRewardTime:		int32	
	--self.openSect:		string	
	--self.padding1_2:		int8	
	--self.padding1_3:		int8	
	--self.padding1_4:		int8	
	--self.padding2:		int32	
	--self.padding3:		int32	
end

function i3k_sbean.DBWorldCityWar:clone()
	return clone(self)
end

function i3k_sbean.DBWorldCityWar:decode(is)
	self.lastCityLightTime = is:popNumber()
	self.lastCityId = is:popNumber()
	self.lastRewardTime = is:popNumber()
	self.openSect = is:popString()
	self.padding1_2 = is:popNumber()
	self.padding1_3 = is:popNumber()
	self.padding1_4 = is:popNumber()
	self.padding2 = is:popNumber()
	self.padding3 = is:popNumber()
end

function i3k_sbean.DBWorldCityWar:encode(os)
	os:pushNumber(self.lastCityLightTime)
	os:pushNumber(self.lastCityId)
	os:pushNumber(self.lastRewardTime)
	os:pushString(self.openSect)
	os:pushNumber(self.padding1_2)
	os:pushNumber(self.padding1_3)
	os:pushNumber(self.padding1_4)
	os:pushNumber(self.padding2)
	os:pushNumber(self.padding3)
end


i3k_sbean.DBRelease = i3k_class("DBRelease")
function i3k_sbean.DBRelease:ctor()
	--self.kindFate:		int32	
	--self.padding1:		int32	
	--self.padding2:		int32	
end

function i3k_sbean.DBRelease:clone()
	return clone(self)
end

function i3k_sbean.DBRelease:decode(is)
	self.kindFate = is:popNumber()
	self.padding1 = is:popNumber()
	self.padding2 = is:popNumber()
end

function i3k_sbean.DBRelease:encode(os)
	os:pushNumber(self.kindFate)
	os:pushNumber(self.padding1)
	os:pushNumber(self.padding2)
end


i3k_sbean.DBAdmission = i3k_class("DBAdmission")
function i3k_sbean.DBAdmission:ctor()
	--self.dayTimes:		int32	
	--self.actStartTime:		int32	
	--self.rewardTimes:		map[int32, int32]	
end

function i3k_sbean.DBAdmission:clone()
	return clone(self)
end

function i3k_sbean.DBAdmission:decode(is)
	self.dayTimes = is:popNumber()
	self.actStartTime = is:popNumber()
	self.rewardTimes = is:popNumberNumberMap()
end

function i3k_sbean.DBAdmission:encode(os)
	os:pushNumber(self.dayTimes)
	os:pushNumber(self.actStartTime)
	os:pushNumberNumberMap(self.rewardTimes)
end


i3k_sbean.DBMarriageAchieveReward = i3k_class("DBMarriageAchieveReward")
function i3k_sbean.DBMarriageAchieveReward:ctor()
	--self.taskReward:		map[int32, DBMarriageAchieveRewardLog]	
	--self.achieveReward:		vector[int32]	
	--self.achievePoint:		int32	
end

function i3k_sbean.DBMarriageAchieveReward:clone()
	return clone(self)
end

function i3k_sbean.DBMarriageAchieveReward:decode(is)
	self.taskReward = is:popNumberMap(i3k_sbean.DBMarriageAchieveRewardLog)
	self.achieveReward = is:popNumberList()
	self.achievePoint = is:popNumber()
end

function i3k_sbean.DBMarriageAchieveReward:encode(os)
	os:pushNumberMap(self.taskReward)
	os:pushNumberList(self.achieveReward)
	os:pushNumber(self.achievePoint)
end


i3k_sbean.DBMarriageAchieveRewardLog = i3k_class("DBMarriageAchieveRewardLog")
function i3k_sbean.DBMarriageAchieveRewardLog:ctor()
	--self.historyRewardLog:		int32	
	--self.curRewardLog:		int32	
end

function i3k_sbean.DBMarriageAchieveRewardLog:clone()
	return clone(self)
end

function i3k_sbean.DBMarriageAchieveRewardLog:decode(is)
	self.historyRewardLog = is:popNumber()
	self.curRewardLog = is:popNumber()
end

function i3k_sbean.DBMarriageAchieveRewardLog:encode(os)
	os:pushNumber(self.historyRewardLog)
	os:pushNumber(self.curRewardLog)
end


i3k_sbean.DBMarriageAchieveTasks = i3k_class("DBMarriageAchieveTasks")
function i3k_sbean.DBMarriageAchieveTasks:ctor()
	--self.tasks:		map[int32, int32]	
	--self.refreshDay:		int32	
	--self.lastFinishDay:		int32	
end

function i3k_sbean.DBMarriageAchieveTasks:clone()
	return clone(self)
end

function i3k_sbean.DBMarriageAchieveTasks:decode(is)
	self.tasks = is:popNumberNumberMap()
	self.refreshDay = is:popNumber()
	self.lastFinishDay = is:popNumber()
end

function i3k_sbean.DBMarriageAchieveTasks:encode(os)
	os:pushNumberNumberMap(self.tasks)
	os:pushNumber(self.refreshDay)
	os:pushNumber(self.lastFinishDay)
end


i3k_sbean.DBPetTrain = i3k_class("DBPetTrain")
function i3k_sbean.DBPetTrain:ctor()
	--self.dayReward:		map[int32, int32]	
	--self.tasks:		map[int32, DBPetTrainTask]	
	--self.finishTasks:		set[int32]	
	--self.buffs:		map[int32, DBPetTrainBuff]	
	--self.dayMineralTimes:		int32	
end

function i3k_sbean.DBPetTrain:clone()
	return clone(self)
end

function i3k_sbean.DBPetTrain:decode(is)
	self.dayReward = is:popNumberNumberMap()
	self.tasks = is:popNumberMap(i3k_sbean.DBPetTrainTask)
	self.finishTasks = is:popNumberSet()
	self.buffs = is:popNumberMap(i3k_sbean.DBPetTrainBuff)
	self.dayMineralTimes = is:popNumber()
end

function i3k_sbean.DBPetTrain:encode(os)
	os:pushNumberNumberMap(self.dayReward)
	os:pushNumberMap(self.tasks)
	os:pushNumberSet(self.finishTasks)
	os:pushNumberMap(self.buffs)
	os:pushNumber(self.dayMineralTimes)
end


i3k_sbean.DBPetTrainBuff = i3k_class("DBPetTrainBuff")
function i3k_sbean.DBPetTrainBuff:ctor()
	--self.id:		int32	
	--self.canUseTime:		int32	
	--self.useTime:		int32	
end

function i3k_sbean.DBPetTrainBuff:clone()
	return clone(self)
end

function i3k_sbean.DBPetTrainBuff:decode(is)
	self.id = is:popNumber()
	self.canUseTime = is:popNumber()
	self.useTime = is:popNumber()
end

function i3k_sbean.DBPetTrainBuff:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.canUseTime)
	os:pushNumber(self.useTime)
end


i3k_sbean.DBPetTrainTask = i3k_class("DBPetTrainTask")
function i3k_sbean.DBPetTrainTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int32	
	--self.takeTime:		int32	
end

function i3k_sbean.DBPetTrainTask:clone()
	return clone(self)
end

function i3k_sbean.DBPetTrainTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.takeTime = is:popNumber()
end

function i3k_sbean.DBPetTrainTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.takeTime)
end


i3k_sbean.DBFiveHegemonyManager = i3k_class("DBFiveHegemonyManager")
function i3k_sbean.DBFiveHegemonyManager:ctor()
	--self.lastDay:		int32	
	--self.npcInfo:		vector[DBFiveHegemonyNpcInfo]	
end

function i3k_sbean.DBFiveHegemonyManager:clone()
	return clone(self)
end

function i3k_sbean.DBFiveHegemonyManager:decode(is)
	self.lastDay = is:popNumber()
	self.npcInfo = is:popList(i3k_sbean.DBFiveHegemonyNpcInfo)
end

function i3k_sbean.DBFiveHegemonyManager:encode(os)
	os:pushNumber(self.lastDay)
	os:pushList(self.npcInfo)
end


i3k_sbean.DBFiveHegemonyNpcInfo = i3k_class("DBFiveHegemonyNpcInfo")
function i3k_sbean.DBFiveHegemonyNpcInfo:ctor()
	--self.npcId:		int32	
	--self.roles:		set[int32]	
end

function i3k_sbean.DBFiveHegemonyNpcInfo:clone()
	return clone(self)
end

function i3k_sbean.DBFiveHegemonyNpcInfo:decode(is)
	self.npcId = is:popNumber()
	self.roles = is:popNumberSet()
end

function i3k_sbean.DBFiveHegemonyNpcInfo:encode(os)
	os:pushNumber(self.npcId)
	os:pushNumberSet(self.roles)
end


i3k_sbean.DBItemHistory = i3k_class("DBItemHistory")
function i3k_sbean.DBItemHistory:ctor()
	--self.getTime:		int32	
	--self.getId:		int32	
	--self.getNum:		int32	
end

function i3k_sbean.DBItemHistory:clone()
	return clone(self)
end

function i3k_sbean.DBItemHistory:decode(is)
	self.getTime = is:popNumber()
	self.getId = is:popNumber()
	self.getNum = is:popNumber()
end

function i3k_sbean.DBItemHistory:encode(os)
	os:pushNumber(self.getTime)
	os:pushNumber(self.getId)
	os:pushNumber(self.getNum)
end


i3k_sbean.DBActivityMapWeekReward = i3k_class("DBActivityMapWeekReward")
function i3k_sbean.DBActivityMapWeekReward:ctor()
	--self.weekTimes:		int32	
	--self.rewards:		set[int32]	
	--self.lastRefreshTime:		int32	
end

function i3k_sbean.DBActivityMapWeekReward:clone()
	return clone(self)
end

function i3k_sbean.DBActivityMapWeekReward:decode(is)
	self.weekTimes = is:popNumber()
	self.rewards = is:popNumberSet()
	self.lastRefreshTime = is:popNumber()
end

function i3k_sbean.DBActivityMapWeekReward:encode(os)
	os:pushNumber(self.weekTimes)
	os:pushNumberSet(self.rewards)
	os:pushNumber(self.lastRefreshTime)
end


i3k_sbean.DBRoleSuperArenaWeekReward = i3k_class("DBRoleSuperArenaWeekReward")
function i3k_sbean.DBRoleSuperArenaWeekReward:ctor()
	--self.lastRefreshTime:		int32	
	--self.weekTimes:		int32	
	--self.reward:		set[int32]	
end

function i3k_sbean.DBRoleSuperArenaWeekReward:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSuperArenaWeekReward:decode(is)
	self.lastRefreshTime = is:popNumber()
	self.weekTimes = is:popNumber()
	self.reward = is:popNumberSet()
end

function i3k_sbean.DBRoleSuperArenaWeekReward:encode(os)
	os:pushNumber(self.lastRefreshTime)
	os:pushNumber(self.weekTimes)
	os:pushNumberSet(self.reward)
end


i3k_sbean.DBRoleCityLight = i3k_class("DBRoleCityLight")
function i3k_sbean.DBRoleCityLight:ctor()
	--self.endTime:		int32	
	--self.lastCity:		int32	
	--self.addRate:		int32	
	--self.dayCityLight:		set[int32]	
end

function i3k_sbean.DBRoleCityLight:clone()
	return clone(self)
end

function i3k_sbean.DBRoleCityLight:decode(is)
	self.endTime = is:popNumber()
	self.lastCity = is:popNumber()
	self.addRate = is:popNumber()
	self.dayCityLight = is:popNumberSet()
end

function i3k_sbean.DBRoleCityLight:encode(os)
	os:pushNumber(self.endTime)
	os:pushNumber(self.lastCity)
	os:pushNumber(self.addRate)
	os:pushNumberSet(self.dayCityLight)
end


i3k_sbean.DBRoleClearFriend = i3k_class("DBRoleClearFriend")
function i3k_sbean.DBRoleClearFriend:ctor()
	--self.clearFriends:		int8	
	--self.lastSyncFriendTime:		int32	
end

function i3k_sbean.DBRoleClearFriend:clone()
	return clone(self)
end

function i3k_sbean.DBRoleClearFriend:decode(is)
	self.clearFriends = is:popNumber()
	self.lastSyncFriendTime = is:popNumber()
end

function i3k_sbean.DBRoleClearFriend:encode(os)
	os:pushNumber(self.clearFriends)
	os:pushNumber(self.lastSyncFriendTime)
end


i3k_sbean.DBRoleExchange = i3k_class("DBRoleExchange")
function i3k_sbean.DBRoleExchange:ctor()
	--self.npcExchanges:		map[int32, DBRoleCollectExchange]	
end

function i3k_sbean.DBRoleExchange:clone()
	return clone(self)
end

function i3k_sbean.DBRoleExchange:decode(is)
	self.npcExchanges = is:popNumberMap(i3k_sbean.DBRoleCollectExchange)
end

function i3k_sbean.DBRoleExchange:encode(os)
	os:pushNumberMap(self.npcExchanges)
end


i3k_sbean.DBRoleCollectExchange = i3k_class("DBRoleCollectExchange")
function i3k_sbean.DBRoleCollectExchange:ctor()
	--self.exchanges:		map[int32, int32]	
end

function i3k_sbean.DBRoleCollectExchange:clone()
	return clone(self)
end

function i3k_sbean.DBRoleCollectExchange:decode(is)
	self.exchanges = is:popNumberNumberMap()
end

function i3k_sbean.DBRoleCollectExchange:encode(os)
	os:pushNumberNumberMap(self.exchanges)
end


i3k_sbean.DBRoleBackPayActivity = i3k_class("DBRoleBackPayActivity")
function i3k_sbean.DBRoleBackPayActivity:ctor()
	--self.score:		int32	
	--self.rewards:		map[int32, int32]	
end

function i3k_sbean.DBRoleBackPayActivity:clone()
	return clone(self)
end

function i3k_sbean.DBRoleBackPayActivity:decode(is)
	self.score = is:popNumber()
	self.rewards = is:popNumberNumberMap()
end

function i3k_sbean.DBRoleBackPayActivity:encode(os)
	os:pushNumber(self.score)
	os:pushNumberNumberMap(self.rewards)
end


i3k_sbean.DBRoleSchduleLog = i3k_class("DBRoleSchduleLog")
function i3k_sbean.DBRoleSchduleLog:ctor()
	--self.type:		int32	
	--self.time:		int32	
end

function i3k_sbean.DBRoleSchduleLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSchduleLog:decode(is)
	self.type = is:popNumber()
	self.time = is:popNumber()
end

function i3k_sbean.DBRoleSchduleLog:encode(os)
	os:pushNumber(self.type)
	os:pushNumber(self.time)
end


i3k_sbean.DBRoleCombatTypeInfo = i3k_class("DBRoleCombatTypeInfo")
function i3k_sbean.DBRoleCombatTypeInfo:ctor()
	--self.combatType:		int32	
	--self.coolEndTime:		int32	
end

function i3k_sbean.DBRoleCombatTypeInfo:clone()
	return clone(self)
end

function i3k_sbean.DBRoleCombatTypeInfo:decode(is)
	self.combatType = is:popNumber()
	self.coolEndTime = is:popNumber()
end

function i3k_sbean.DBRoleCombatTypeInfo:encode(os)
	os:pushNumber(self.combatType)
	os:pushNumber(self.coolEndTime)
end


i3k_sbean.VipData = i3k_class("VipData")
function i3k_sbean.VipData:ctor()
	--self.diamond:		int32	
	--self.vipLvl:		int32	
	--self.payPoints:		int32	
	--self.payDiamond:		int32	
	--self.paylog:		vector[DBPayLog]	
	--self.payLvlLog:		map[int32, int32]	
end

function i3k_sbean.VipData:clone()
	return clone(self)
end

function i3k_sbean.VipData:decode(is)
	self.diamond = is:popNumber()
	self.vipLvl = is:popNumber()
	self.payPoints = is:popNumber()
	self.payDiamond = is:popNumber()
	self.paylog = is:popList(i3k_sbean.DBPayLog)
	self.payLvlLog = is:popNumberNumberMap()
end

function i3k_sbean.VipData:encode(os)
	os:pushNumber(self.diamond)
	os:pushNumber(self.vipLvl)
	os:pushNumber(self.payPoints)
	os:pushNumber(self.payDiamond)
	os:pushList(self.paylog)
	os:pushNumberNumberMap(self.payLvlLog)
end


i3k_sbean.Vector3F = i3k_class("Vector3F")
function i3k_sbean.Vector3F:ctor()
	--self.x:		float	
	--self.y:		float	
	--self.z:		float	
end

function i3k_sbean.Vector3F:clone()
	return clone(self)
end

function i3k_sbean.Vector3F:decode(is)
	self.x = is:popNumber()
	self.y = is:popNumber()
	self.z = is:popNumber()
end

function i3k_sbean.Vector3F:encode(os)
	os:pushNumber(self.x)
	os:pushNumber(self.y)
	os:pushNumber(self.z)
end


i3k_sbean.Vector3 = i3k_class("Vector3")
function i3k_sbean.Vector3:ctor()
	--self.x:		int32	
	--self.y:		int32	
	--self.z:		int32	
end

function i3k_sbean.Vector3:clone()
	return clone(self)
end

function i3k_sbean.Vector3:decode(is)
	self.x = is:popNumber()
	self.y = is:popNumber()
	self.z = is:popNumber()
end

function i3k_sbean.Vector3:encode(os)
	os:pushNumber(self.x)
	os:pushNumber(self.y)
	os:pushNumber(self.z)
end


i3k_sbean.TimeTick = i3k_class("TimeTick")
function i3k_sbean.TimeTick:ctor()
	--self.tickLine:		int32	
	--self.outTick:		int32	
end

function i3k_sbean.TimeTick:clone()
	return clone(self)
end

function i3k_sbean.TimeTick:decode(is)
	self.tickLine = is:popNumber()
	self.outTick = is:popNumber()
end

function i3k_sbean.TimeTick:encode(os)
	os:pushNumber(self.tickLine)
	os:pushNumber(self.outTick)
end


i3k_sbean.MapPosition = i3k_class("MapPosition")
function i3k_sbean.MapPosition:ctor()
	--self.mapID:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.MapPosition:clone()
	return clone(self)
end

function i3k_sbean.MapPosition:decode(is)
	self.mapID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.MapPosition:encode(os)
	os:pushNumber(self.mapID)
	os:push(self.position)
end


i3k_sbean.MapLocation = i3k_class("MapLocation")
function i3k_sbean.MapLocation:ctor()
	--self.mapID:		int32	
	--self.location:		Location	
end

function i3k_sbean.MapLocation:clone()
	return clone(self)
end

function i3k_sbean.MapLocation:decode(is)
	self.mapID = is:popNumber()
	self.location = is:pop(i3k_sbean.Location)
end

function i3k_sbean.MapLocation:encode(os)
	os:pushNumber(self.mapID)
	os:push(self.location)
end


i3k_sbean.MapProgress = i3k_class("MapProgress")
function i3k_sbean.MapProgress:ctor()
	--self.spawnPoint:		vector[SpawnPointProgress]	
	--self.trap:		vector[TrapState]	
	--self.mapBuffs:		vector[BriefInfo]	
	--self.mineals:		vector[BriefInfo]	
end

function i3k_sbean.MapProgress:clone()
	return clone(self)
end

function i3k_sbean.MapProgress:decode(is)
	self.spawnPoint = is:popList(i3k_sbean.SpawnPointProgress)
	self.trap = is:popList(i3k_sbean.TrapState)
	self.mapBuffs = is:popList(i3k_sbean.BriefInfo)
	self.mineals = is:popList(i3k_sbean.BriefInfo)
end

function i3k_sbean.MapProgress:encode(os)
	os:pushList(self.spawnPoint)
	os:pushList(self.trap)
	os:pushList(self.mapBuffs)
	os:pushList(self.mineals)
end


i3k_sbean.SpawnPointProgress = i3k_class("SpawnPointProgress")
function i3k_sbean.SpawnPointProgress:ctor()
	--self.spawnPointId:		int32	
	--self.killedCount:		int32	
	--self.earlyDrop:		map[int32, int32]	
end

function i3k_sbean.SpawnPointProgress:clone()
	return clone(self)
end

function i3k_sbean.SpawnPointProgress:decode(is)
	self.spawnPointId = is:popNumber()
	self.killedCount = is:popNumber()
	self.earlyDrop = is:popNumberNumberMap()
end

function i3k_sbean.SpawnPointProgress:encode(os)
	os:pushNumber(self.spawnPointId)
	os:pushNumber(self.killedCount)
	os:pushNumberNumberMap(self.earlyDrop)
end


i3k_sbean.TrapState = i3k_class("TrapState")
function i3k_sbean.TrapState:ctor()
	--self.id:		int32	
	--self.state:		int32	
	--self.monsterCount:		int32	
end

function i3k_sbean.TrapState:clone()
	return clone(self)
end

function i3k_sbean.TrapState:decode(is)
	self.id = is:popNumber()
	self.state = is:popNumber()
	self.monsterCount = is:popNumber()
end

function i3k_sbean.TrapState:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.state)
	os:pushNumber(self.monsterCount)
end


i3k_sbean.TrapDetail = i3k_class("TrapDetail")
function i3k_sbean.TrapDetail:ctor()
	--self.id:		int32	
	--self.configID:		int32	
	--self.curState:		int32	
	--self.relatedTraps:		vector[RelatedTrap]	
end

function i3k_sbean.TrapDetail:clone()
	return clone(self)
end

function i3k_sbean.TrapDetail:decode(is)
	self.id = is:popNumber()
	self.configID = is:popNumber()
	self.curState = is:popNumber()
	self.relatedTraps = is:popList(i3k_sbean.RelatedTrap)
end

function i3k_sbean.TrapDetail:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.configID)
	os:pushNumber(self.curState)
	os:pushList(self.relatedTraps)
end


i3k_sbean.RelatedTrap = i3k_class("RelatedTrap")
function i3k_sbean.RelatedTrap:ctor()
	--self.id:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.RelatedTrap:clone()
	return clone(self)
end

function i3k_sbean.RelatedTrap:decode(is)
	self.id = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.RelatedTrap:encode(os)
	os:pushNumber(self.id)
	os:push(self.position)
end


i3k_sbean.PetBase = i3k_class("PetBase")
function i3k_sbean.PetBase:ctor()
	--self.ownerID:		int32	
	--self.pid:		int32	
end

function i3k_sbean.PetBase:clone()
	return clone(self)
end

function i3k_sbean.PetBase:decode(is)
	self.ownerID = is:popNumber()
	self.pid = is:popNumber()
end

function i3k_sbean.PetBase:encode(os)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.pid)
end


i3k_sbean.EnterBase = i3k_class("EnterBase")
function i3k_sbean.EnterBase:ctor()
	--self.id:		int32	
	--self.cfgID:		int32	
	--self.ownerID:		int32	
	--self.location:		Location	
	--self.bwType:		int32	
	--self.sectId:		int32	
	--self.forceType:		int32	
end

function i3k_sbean.EnterBase:clone()
	return clone(self)
end

function i3k_sbean.EnterBase:decode(is)
	self.id = is:popNumber()
	self.cfgID = is:popNumber()
	self.ownerID = is:popNumber()
	self.location = is:pop(i3k_sbean.Location)
	self.bwType = is:popNumber()
	self.sectId = is:popNumber()
	self.forceType = is:popNumber()
end

function i3k_sbean.EnterBase:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.cfgID)
	os:pushNumber(self.ownerID)
	os:push(self.location)
	os:pushNumber(self.bwType)
	os:pushNumber(self.sectId)
	os:pushNumber(self.forceType)
end


i3k_sbean.EnterEntity = i3k_class("EnterEntity")
function i3k_sbean.EnterEntity:ctor()
	--self.id:		int32	
	--self.type:		int32	
	--self.location:		Location	
	--self.iArgs:		vector[int32]	
	--self.vArgs:		vector[string]	
end

function i3k_sbean.EnterEntity:clone()
	return clone(self)
end

function i3k_sbean.EnterEntity:decode(is)
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.location = is:pop(i3k_sbean.Location)
	self.iArgs = is:popNumberList()
	self.vArgs = is:popStringList()
end

function i3k_sbean.EnterEntity:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:push(self.location)
	os:pushNumberList(self.iArgs)
	os:pushStringList(self.vArgs)
end


i3k_sbean.EnterMineral = i3k_class("EnterMineral")
function i3k_sbean.EnterMineral:ctor()
	--self.id:		int32	
	--self.cfgID:		int32	
	--self.location:		Location	
	--self.state:		int32	
	--self.ownType:		int32	
	--self.lastCnt:		int32	
end

function i3k_sbean.EnterMineral:clone()
	return clone(self)
end

function i3k_sbean.EnterMineral:decode(is)
	self.id = is:popNumber()
	self.cfgID = is:popNumber()
	self.location = is:pop(i3k_sbean.Location)
	self.state = is:popNumber()
	self.ownType = is:popNumber()
	self.lastCnt = is:popNumber()
end

function i3k_sbean.EnterMineral:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.cfgID)
	os:push(self.location)
	os:pushNumber(self.state)
	os:pushNumber(self.ownType)
	os:pushNumber(self.lastCnt)
end


i3k_sbean.EnterHonnorStatue = i3k_class("EnterHonnorStatue")
function i3k_sbean.EnterHonnorStatue:ctor()
	--self.id:		int32	
	--self.location:		Location	
	--self.statueType:		int32	
	--self.roleID:		int32	
	--self.classType:		int32	
	--self.bwType:		int32	
	--self.name:		string	
	--self.gender:		int32	
	--self.detail:		RoleWearDetail	
end

function i3k_sbean.EnterHonnorStatue:clone()
	return clone(self)
end

function i3k_sbean.EnterHonnorStatue:decode(is)
	self.id = is:popNumber()
	self.location = is:pop(i3k_sbean.Location)
	self.statueType = is:popNumber()
	self.roleID = is:popNumber()
	self.classType = is:popNumber()
	self.bwType = is:popNumber()
	self.name = is:popString()
	self.gender = is:popNumber()
	self.detail = is:pop(i3k_sbean.RoleWearDetail)
end

function i3k_sbean.EnterHonnorStatue:encode(os)
	os:pushNumber(self.id)
	os:push(self.location)
	os:pushNumber(self.statueType)
	os:pushNumber(self.roleID)
	os:pushNumber(self.classType)
	os:pushNumber(self.bwType)
	os:pushString(self.name)
	os:pushNumber(self.gender)
	os:push(self.detail)
end


i3k_sbean.EnterWeddingCar = i3k_class("EnterWeddingCar")
function i3k_sbean.EnterWeddingCar:ctor()
	--self.id:		int32	
	--self.cfgID:		int32	
	--self.location:		Location	
	--self.manID:		int32	
	--self.womanID:		int32	
	--self.manName:		string	
	--self.womanName:		string	
end

function i3k_sbean.EnterWeddingCar:clone()
	return clone(self)
end

function i3k_sbean.EnterWeddingCar:decode(is)
	self.id = is:popNumber()
	self.cfgID = is:popNumber()
	self.location = is:pop(i3k_sbean.Location)
	self.manID = is:popNumber()
	self.womanID = is:popNumber()
	self.manName = is:popString()
	self.womanName = is:popString()
end

function i3k_sbean.EnterWeddingCar:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.cfgID)
	os:push(self.location)
	os:pushNumber(self.manID)
	os:pushNumber(self.womanID)
	os:pushString(self.manName)
	os:pushString(self.womanName)
end


i3k_sbean.EnterDetail = i3k_class("EnterDetail")
function i3k_sbean.EnterDetail:ctor()
	--self.base:		EnterBase	
	--self.curHP:		int32	
	--self.maxHP:		int32	
	--self.isDead:		int32	
end

function i3k_sbean.EnterDetail:clone()
	return clone(self)
end

function i3k_sbean.EnterDetail:decode(is)
	self.base = is:pop(i3k_sbean.EnterBase)
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
	self.isDead = is:popNumber()
end

function i3k_sbean.EnterDetail:encode(os)
	os:push(self.base)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
	os:pushNumber(self.isDead)
end


i3k_sbean.EnterMonster = i3k_class("EnterMonster")
function i3k_sbean.EnterMonster:ctor()
	--self.base:		EnterBase	
	--self.curHP:		int32	
	--self.maxHP:		int32	
	--self.curArmor:		int32	
	--self.maxArmor:		int32	
	--self.isDead:		int32	
	--self.param1:		int32	
	--self.clickNum:		int32	
	--self.buffs:		map[int32, int32]	
end

function i3k_sbean.EnterMonster:clone()
	return clone(self)
end

function i3k_sbean.EnterMonster:decode(is)
	self.base = is:pop(i3k_sbean.EnterBase)
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
	self.curArmor = is:popNumber()
	self.maxArmor = is:popNumber()
	self.isDead = is:popNumber()
	self.param1 = is:popNumber()
	self.clickNum = is:popNumber()
	self.buffs = is:popNumberNumberMap()
end

function i3k_sbean.EnterMonster:encode(os)
	os:push(self.base)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
	os:pushNumber(self.curArmor)
	os:pushNumber(self.maxArmor)
	os:pushNumber(self.isDead)
	os:pushNumber(self.param1)
	os:pushNumber(self.clickNum)
	os:pushNumberNumberMap(self.buffs)
end


i3k_sbean.EnterPet = i3k_class("EnterPet")
function i3k_sbean.EnterPet:ctor()
	--self.base:		EnterBase	
	--self.curHP:		int32	
	--self.maxHP:		int32	
	--self.seq:		int32	
	--self.isDead:		int32	
end

function i3k_sbean.EnterPet:clone()
	return clone(self)
end

function i3k_sbean.EnterPet:decode(is)
	self.base = is:pop(i3k_sbean.EnterBase)
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
	self.seq = is:popNumber()
	self.isDead = is:popNumber()
end

function i3k_sbean.EnterPet:encode(os)
	os:push(self.base)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
	os:pushNumber(self.seq)
	os:pushNumber(self.isDead)
end


i3k_sbean.EnterSkillEntity = i3k_class("EnterSkillEntity")
function i3k_sbean.EnterSkillEntity:ctor()
	--self.base:		EnterBase	
	--self.modelID:		int32	
end

function i3k_sbean.EnterSkillEntity:clone()
	return clone(self)
end

function i3k_sbean.EnterSkillEntity:decode(is)
	self.base = is:pop(i3k_sbean.EnterBase)
	self.modelID = is:popNumber()
end

function i3k_sbean.EnterSkillEntity:encode(os)
	os:push(self.base)
	os:pushNumber(self.modelID)
end


i3k_sbean.EnterEscortCar = i3k_class("EnterEscortCar")
function i3k_sbean.EnterEscortCar:ctor()
	--self.detail:		EnterDetail	
	--self.curBuffs:		vector[int32]	
	--self.ownerName:		string	
	--self.state:		int32	
	--self.teamID:		int32	
	--self.sectID:		int32	
	--self.skin:		int32	
end

function i3k_sbean.EnterEscortCar:clone()
	return clone(self)
end

function i3k_sbean.EnterEscortCar:decode(is)
	self.detail = is:pop(i3k_sbean.EnterDetail)
	self.curBuffs = is:popNumberList()
	self.ownerName = is:popString()
	self.state = is:popNumber()
	self.teamID = is:popNumber()
	self.sectID = is:popNumber()
	self.skin = is:popNumber()
end

function i3k_sbean.EnterEscortCar:encode(os)
	os:push(self.detail)
	os:pushNumberList(self.curBuffs)
	os:pushString(self.ownerName)
	os:pushNumber(self.state)
	os:pushNumber(self.teamID)
	os:pushNumber(self.sectID)
	os:pushNumber(self.skin)
end


i3k_sbean.BriefInfo = i3k_class("BriefInfo")
function i3k_sbean.BriefInfo:ctor()
	--self.id:		int32	
	--self.cfgID:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.BriefInfo:clone()
	return clone(self)
end

function i3k_sbean.BriefInfo:decode(is)
	self.id = is:popNumber()
	self.cfgID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.BriefInfo:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.cfgID)
	os:push(self.position)
end


-- (state1 活的, 0死的)
i3k_sbean.ForceTypeInfo = i3k_class("ForceTypeInfo")
function i3k_sbean.ForceTypeInfo:ctor()
	--self.forceType:		int32	
	--self.state:		int8	
	--self.info:		BriefInfo	
end

function i3k_sbean.ForceTypeInfo:clone()
	return clone(self)
end

function i3k_sbean.ForceTypeInfo:decode(is)
	self.forceType = is:popNumber()
	self.state = is:popNumber()
	self.info = is:pop(i3k_sbean.BriefInfo)
end

function i3k_sbean.ForceTypeInfo:encode(os)
	os:pushNumber(self.forceType)
	os:pushNumber(self.state)
	os:push(self.info)
end


i3k_sbean.Location = i3k_class("Location")
function i3k_sbean.Location:ctor()
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
end

function i3k_sbean.Location:clone()
	return clone(self)
end

function i3k_sbean.Location:decode(is)
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
end

function i3k_sbean.Location:encode(os)
	os:push(self.position)
	os:push(self.rotation)
end


i3k_sbean.FloorReward = i3k_class("FloorReward")
function i3k_sbean.FloorReward:ctor()
	--self.floor:		int32	
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.FloorReward:clone()
	return clone(self)
end

function i3k_sbean.FloorReward:decode(is)
	self.floor = is:popNumber()
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.FloorReward:encode(os)
	os:pushNumber(self.floor)
	os:pushList(self.items)
end


i3k_sbean.DummyGoods = i3k_class("DummyGoods")
function i3k_sbean.DummyGoods:ctor()
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.DummyGoods:clone()
	return clone(self)
end

function i3k_sbean.DummyGoods:decode(is)
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.DummyGoods:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


i3k_sbean.Rewards = i3k_class("Rewards")
function i3k_sbean.Rewards:ctor()
	--self.items:		map[int32, int32]	
end

function i3k_sbean.Rewards:clone()
	return clone(self)
end

function i3k_sbean.Rewards:decode(is)
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.Rewards:encode(os)
	os:pushNumberNumberMap(self.items)
end


i3k_sbean.DropEntity = i3k_class("DropEntity")
function i3k_sbean.DropEntity:ctor()
	--self.did:		int32	
	--self.minCount:		int32	
	--self.maxCount:		int32	
end

function i3k_sbean.DropEntity:clone()
	return clone(self)
end

function i3k_sbean.DropEntity:decode(is)
	self.did = is:popNumber()
	self.minCount = is:popNumber()
	self.maxCount = is:popNumber()
end

function i3k_sbean.DropEntity:encode(os)
	os:pushNumber(self.did)
	os:pushNumber(self.minCount)
	os:pushNumber(self.maxCount)
end


i3k_sbean.DropEntry = i3k_class("DropEntry")
function i3k_sbean.DropEntry:ctor()
	--self.drop:		DropEntity	
	--self.probability:		float	
end

function i3k_sbean.DropEntry:clone()
	return clone(self)
end

function i3k_sbean.DropEntry:decode(is)
	self.drop = is:pop(i3k_sbean.DropEntity)
	self.probability = is:popNumber()
end

function i3k_sbean.DropEntry:encode(os)
	os:push(self.drop)
	os:pushNumber(self.probability)
end


i3k_sbean.UniqueEquip = i3k_class("UniqueEquip")
function i3k_sbean.UniqueEquip:ctor()
	--self.id:		int32	
	--self.guid:		string	
end

function i3k_sbean.UniqueEquip:clone()
	return clone(self)
end

function i3k_sbean.UniqueEquip:decode(is)
	self.id = is:popNumber()
	self.guid = is:popString()
end

function i3k_sbean.UniqueEquip:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.guid)
end


i3k_sbean.KinEquips = i3k_class("KinEquips")
function i3k_sbean.KinEquips:ctor()
	--self.id:		int32	
	--self.guids:		set[string]	
end

function i3k_sbean.KinEquips:clone()
	return clone(self)
end

function i3k_sbean.KinEquips:decode(is)
	self.id = is:popNumber()
	self.guids = is:popStringSet()
end

function i3k_sbean.KinEquips:encode(os)
	os:pushNumber(self.id)
	os:pushStringSet(self.guids)
end


i3k_sbean.ClassTypeReward = i3k_class("ClassTypeReward")
function i3k_sbean.ClassTypeReward:ctor()
	--self.ids:		vector[int32]	
	--self.count:		int32	
end

function i3k_sbean.ClassTypeReward:clone()
	return clone(self)
end

function i3k_sbean.ClassTypeReward:decode(is)
	self.ids = is:popNumberList()
	self.count = is:popNumber()
end

function i3k_sbean.ClassTypeReward:encode(os)
	os:pushNumberList(self.ids)
	os:pushNumber(self.count)
end


i3k_sbean.ProgressRewards = i3k_class("ProgressRewards")
function i3k_sbean.ProgressRewards:ctor()
	--self.rewards:		map[int32,int32]	
end

function i3k_sbean.ProgressRewards:clone()
	return clone(self)
end

function i3k_sbean.ProgressRewards:decode(is)
	self.rewards = is:popNumberNumberMap()
end

function i3k_sbean.ProgressRewards:encode(os)
	os:pushNumberNumberMap(self.rewards)
end


i3k_sbean.GameItem = i3k_class("GameItem")
function i3k_sbean.GameItem:ctor()
	--self.id:		int32	
	--self.count:		int32	
	--self.equips:		map[string, DBEquip]	
end

function i3k_sbean.GameItem:clone()
	return clone(self)
end

function i3k_sbean.GameItem:decode(is)
	self.id = is:popNumber()
	self.count = is:popNumber()
	self.equips = is:popStringMap(i3k_sbean.DBEquip)
end

function i3k_sbean.GameItem:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
	os:pushStringMap(self.equips)
end


i3k_sbean.DetailConsignItems = i3k_class("DetailConsignItems")
function i3k_sbean.DetailConsignItems:ctor()
	--self.roleID:		int32	
	--self.cid:		int32	
	--self.items:		DBConsignItems	
end

function i3k_sbean.DetailConsignItems:clone()
	return clone(self)
end

function i3k_sbean.DetailConsignItems:decode(is)
	self.roleID = is:popNumber()
	self.cid = is:popNumber()
	self.items = is:pop(i3k_sbean.DBConsignItems)
end

function i3k_sbean.DetailConsignItems:encode(os)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cid)
	os:push(self.items)
end


i3k_sbean.IntSet = i3k_class("IntSet")
function i3k_sbean.IntSet:ctor()
	--self.set:		set[int32]	
end

function i3k_sbean.IntSet:clone()
	return clone(self)
end

function i3k_sbean.IntSet:decode(is)
	self.set = is:popNumberSet()
end

function i3k_sbean.IntSet:encode(os)
	os:pushNumberSet(self.set)
end


i3k_sbean.IntList = i3k_class("IntList")
function i3k_sbean.IntList:ctor()
	--self.list:		vector[int32]	
end

function i3k_sbean.IntList:clone()
	return clone(self)
end

function i3k_sbean.IntList:decode(is)
	self.list = is:popNumberList()
end

function i3k_sbean.IntList:encode(os)
	os:pushNumberList(self.list)
end


i3k_sbean.PayLevelInfo = i3k_class("PayLevelInfo")
function i3k_sbean.PayLevelInfo:ctor()
	--self.level:		int32	
	--self.id:		string	
	--self.buyNum:		int32	
	--self.worth:		int32	
	--self.points:		int32	
	--self.credit:		int32	
	--self.price:		float	
	--self.priceShow:		float	
	--self.rebates:		vector[int32]	
end

function i3k_sbean.PayLevelInfo:clone()
	return clone(self)
end

function i3k_sbean.PayLevelInfo:decode(is)
	self.level = is:popNumber()
	self.id = is:popString()
	self.buyNum = is:popNumber()
	self.worth = is:popNumber()
	self.points = is:popNumber()
	self.credit = is:popNumber()
	self.price = is:popNumber()
	self.priceShow = is:popNumber()
	self.rebates = is:popNumberList()
end

function i3k_sbean.PayLevelInfo:encode(os)
	os:pushNumber(self.level)
	os:pushString(self.id)
	os:pushNumber(self.buyNum)
	os:pushNumber(self.worth)
	os:pushNumber(self.points)
	os:pushNumber(self.credit)
	os:pushNumber(self.price)
	os:pushNumber(self.priceShow)
	os:pushNumberList(self.rebates)
end


i3k_sbean.PayInfo = i3k_class("PayInfo")
function i3k_sbean.PayInfo:ctor()
	--self.id:		int32	
	--self.payLevels:		vector[PayLevelInfo]	
	--self.vipLvl:		int32	
	--self.pointsTotal:		int32	
	--self.payLvlLogs:		map[int32, int32]	
	--self.rewards:		set[int32]	
	--self.newRewards:		map[int32, DBVipRewardTakeLog]	
end

function i3k_sbean.PayInfo:clone()
	return clone(self)
end

function i3k_sbean.PayInfo:decode(is)
	self.id = is:popNumber()
	self.payLevels = is:popList(i3k_sbean.PayLevelInfo)
	self.vipLvl = is:popNumber()
	self.pointsTotal = is:popNumber()
	self.payLvlLogs = is:popNumberNumberMap()
	self.rewards = is:popNumberSet()
	self.newRewards = is:popNumberMap(i3k_sbean.DBVipRewardTakeLog)
end

function i3k_sbean.PayInfo:encode(os)
	os:pushNumber(self.id)
	os:pushList(self.payLevels)
	os:pushNumber(self.vipLvl)
	os:pushNumber(self.pointsTotal)
	os:pushNumberNumberMap(self.payLvlLogs)
	os:pushNumberSet(self.rewards)
	os:pushNumberMap(self.newRewards)
end


i3k_sbean.CheckInInfo = i3k_class("CheckInInfo")
function i3k_sbean.CheckInInfo:ctor()
	--self.checkinId:		int32	
	--self.finishedDays:		int32	
	--self.canCheckIn:		int32	
end

function i3k_sbean.CheckInInfo:clone()
	return clone(self)
end

function i3k_sbean.CheckInInfo:decode(is)
	self.checkinId = is:popNumber()
	self.finishedDays = is:popNumber()
	self.canCheckIn = is:popNumber()
end

function i3k_sbean.CheckInInfo:encode(os)
	os:pushNumber(self.checkinId)
	os:pushNumber(self.finishedDays)
	os:pushNumber(self.canCheckIn)
end


i3k_sbean.MapEntity = i3k_class("MapEntity")
function i3k_sbean.MapEntity:ctor()
	--self.id:		int32	
	--self.count:		int32	
	--self.exp:		int32	
	--self.fixedDropTblId:		int32	
	--self.randomDropTblIds:		vector[int32]	
	--self.randomDropCount:		int32	
end

function i3k_sbean.MapEntity:clone()
	return clone(self)
end

function i3k_sbean.MapEntity:decode(is)
	self.id = is:popNumber()
	self.count = is:popNumber()
	self.exp = is:popNumber()
	self.fixedDropTblId = is:popNumber()
	self.randomDropTblIds = is:popNumberList()
	self.randomDropCount = is:popNumber()
end

function i3k_sbean.MapEntity:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
	os:pushNumber(self.exp)
	os:pushNumber(self.fixedDropTblId)
	os:pushNumberList(self.randomDropTblIds)
	os:pushNumber(self.randomDropCount)
end


i3k_sbean.EntityType = i3k_class("EntityType")
function i3k_sbean.EntityType:ctor()
	--self.entityID:		int32	
	--self.count:		int32	
end

function i3k_sbean.EntityType:clone()
	return clone(self)
end

function i3k_sbean.EntityType:decode(is)
	self.entityID = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.EntityType:encode(os)
	os:pushNumber(self.entityID)
	os:pushNumber(self.count)
end


i3k_sbean.EquipPart = i3k_class("EquipPart")
function i3k_sbean.EquipPart:ctor()
	--self.id:		int32	
	--self.eqGrowLvl:		int32	
	--self.eqEvoLvl:		int32	
end

function i3k_sbean.EquipPart:clone()
	return clone(self)
end

function i3k_sbean.EquipPart:decode(is)
	self.id = is:popNumber()
	self.eqGrowLvl = is:popNumber()
	self.eqEvoLvl = is:popNumber()
end

function i3k_sbean.EquipPart:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.eqGrowLvl)
	os:pushNumber(self.eqEvoLvl)
end


i3k_sbean.Counter = i3k_class("Counter")
function i3k_sbean.Counter:ctor()
	--self.fvalue:		int32	
	--self.rvalue:		int32	
end

function i3k_sbean.Counter:clone()
	return clone(self)
end

function i3k_sbean.Counter:decode(is)
	self.fvalue = is:popNumber()
	self.rvalue = is:popNumber()
end

function i3k_sbean.Counter:encode(os)
	os:pushNumber(self.fvalue)
	os:pushNumber(self.rvalue)
end


i3k_sbean.ItemCounter = i3k_class("ItemCounter")
function i3k_sbean.ItemCounter:ctor()
	--self.id:		int32	
	--self.value:		Counter	
end

function i3k_sbean.ItemCounter:clone()
	return clone(self)
end

function i3k_sbean.ItemCounter:decode(is)
	self.id = is:popNumber()
	self.value = is:pop(i3k_sbean.Counter)
end

function i3k_sbean.ItemCounter:encode(os)
	os:pushNumber(self.id)
	os:push(self.value)
end


i3k_sbean.Prop = i3k_class("Prop")
function i3k_sbean.Prop:ctor()
	--self.id:		int32	
	--self.value:		int32	
end

function i3k_sbean.Prop:clone()
	return clone(self)
end

function i3k_sbean.Prop:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.Prop:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
end


i3k_sbean.PKInfo = i3k_class("PKInfo")
function i3k_sbean.PKInfo:ctor()
	--self.mode:		int32	
	--self.value:		int32	
end

function i3k_sbean.PKInfo:clone()
	return clone(self)
end

function i3k_sbean.PKInfo:decode(is)
	self.mode = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.PKInfo:encode(os)
	os:pushNumber(self.mode)
	os:pushNumber(self.value)
end


i3k_sbean.ArenaBattleInfo = i3k_class("ArenaBattleInfo")
function i3k_sbean.ArenaBattleInfo:ctor()
	--self.defendingSideRank:		int32	
	--self.attackingSide:		BattleArrayOverview	
	--self.defendingSide:		BattleArrayOverview	
end

function i3k_sbean.ArenaBattleInfo:clone()
	return clone(self)
end

function i3k_sbean.ArenaBattleInfo:decode(is)
	self.defendingSideRank = is:popNumber()
	self.attackingSide = is:pop(i3k_sbean.BattleArrayOverview)
	self.defendingSide = is:pop(i3k_sbean.BattleArrayOverview)
end

function i3k_sbean.ArenaBattleInfo:encode(os)
	os:pushNumber(self.defendingSideRank)
	os:push(self.attackingSide)
	os:push(self.defendingSide)
end


i3k_sbean.ArenaBattleResult = i3k_class("ArenaBattleResult")
function i3k_sbean.ArenaBattleResult:ctor()
	--self.win:		int32	
	--self.attackingSideRank:		int32	
	--self.defendingSideRank:		int32	
	--self.defendingSide:		RoleOverview	
end

function i3k_sbean.ArenaBattleResult:clone()
	return clone(self)
end

function i3k_sbean.ArenaBattleResult:decode(is)
	self.win = is:popNumber()
	self.attackingSideRank = is:popNumber()
	self.defendingSideRank = is:popNumber()
	self.defendingSide = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.ArenaBattleResult:encode(os)
	os:pushNumber(self.win)
	os:pushNumber(self.attackingSideRank)
	os:pushNumber(self.defendingSideRank)
	os:push(self.defendingSide)
end


i3k_sbean.SuperArenaBattleResult = i3k_class("SuperArenaBattleResult")
function i3k_sbean.SuperArenaBattleResult:ctor()
	--self.teams:		map[int32, SABattleTeamInfo]	
end

function i3k_sbean.SuperArenaBattleResult:clone()
	return clone(self)
end

function i3k_sbean.SuperArenaBattleResult:decode(is)
	self.teams = is:popNumberMap(i3k_sbean.SABattleTeamInfo)
end

function i3k_sbean.SuperArenaBattleResult:encode(os)
	os:pushNumberMap(self.teams)
end


i3k_sbean.SABattleTeamInfo = i3k_class("SABattleTeamInfo")
function i3k_sbean.SABattleTeamInfo:ctor()
	--self.members:		map[int32, SABattleInfo]	
	--self.results:		vector[int32]	
end

function i3k_sbean.SABattleTeamInfo:clone()
	return clone(self)
end

function i3k_sbean.SABattleTeamInfo:decode(is)
	self.members = is:popNumberMap(i3k_sbean.SABattleInfo)
	self.results = is:popNumberList()
end

function i3k_sbean.SABattleTeamInfo:encode(os)
	os:pushNumberMap(self.members)
	os:pushNumberList(self.results)
end


i3k_sbean.SABattleInfo = i3k_class("SABattleInfo")
function i3k_sbean.SABattleInfo:ctor()
	--self.rid:		int32	
	--self.name:		string	
	--self.level:		int32	
	--self.gender:		int32	
	--self.headIcon:		int32	
	--self.BWType:		int32	
	--self.classType:		int32	
	--self.fightPower:		int32	
	--self.kills:		int32	
	--self.dead:		int32	
	--self.assist:		int32	
	--self.addHonor:		int32	
	--self.addELO:		int32	
	--self.teamScore:		int32	
	--self.result:		int32	
end

function i3k_sbean.SABattleInfo:clone()
	return clone(self)
end

function i3k_sbean.SABattleInfo:decode(is)
	self.rid = is:popNumber()
	self.name = is:popString()
	self.level = is:popNumber()
	self.gender = is:popNumber()
	self.headIcon = is:popNumber()
	self.BWType = is:popNumber()
	self.classType = is:popNumber()
	self.fightPower = is:popNumber()
	self.kills = is:popNumber()
	self.dead = is:popNumber()
	self.assist = is:popNumber()
	self.addHonor = is:popNumber()
	self.addELO = is:popNumber()
	self.teamScore = is:popNumber()
	self.result = is:popNumber()
end

function i3k_sbean.SABattleInfo:encode(os)
	os:pushNumber(self.rid)
	os:pushString(self.name)
	os:pushNumber(self.level)
	os:pushNumber(self.gender)
	os:pushNumber(self.headIcon)
	os:pushNumber(self.BWType)
	os:pushNumber(self.classType)
	os:pushNumber(self.fightPower)
	os:pushNumber(self.kills)
	os:pushNumber(self.dead)
	os:pushNumber(self.assist)
	os:pushNumber(self.addHonor)
	os:pushNumber(self.addELO)
	os:pushNumber(self.teamScore)
	os:pushNumber(self.result)
end


i3k_sbean.SectBrief = i3k_class("SectBrief")
function i3k_sbean.SectBrief:ctor()
	--self.sectID:		int32	
	--self.sectName:		string	
	--self.sectPosition:		int8	
	--self.sectIcon:		int16	
	--self.sectLevel:		int32	
end

function i3k_sbean.SectBrief:clone()
	return clone(self)
end

function i3k_sbean.SectBrief:decode(is)
	self.sectID = is:popNumber()
	self.sectName = is:popString()
	self.sectPosition = is:popNumber()
	self.sectIcon = is:popNumber()
	self.sectLevel = is:popNumber()
end

function i3k_sbean.SectBrief:encode(os)
	os:pushNumber(self.sectID)
	os:pushString(self.sectName)
	os:pushNumber(self.sectPosition)
	os:pushNumber(self.sectIcon)
	os:pushNumber(self.sectLevel)
end


i3k_sbean.TimeSpan = i3k_class("TimeSpan")
function i3k_sbean.TimeSpan:ctor()
	--self.startTime:		int32	
	--self.endTime:		int32	
end

function i3k_sbean.TimeSpan:clone()
	return clone(self)
end

function i3k_sbean.TimeSpan:decode(is)
	self.startTime = is:popNumber()
	self.endTime = is:popNumber()
end

function i3k_sbean.TimeSpan:encode(os)
	os:pushNumber(self.startTime)
	os:pushNumber(self.endTime)
end


i3k_sbean.RoleLifeDaySpan = i3k_class("RoleLifeDaySpan")
function i3k_sbean.RoleLifeDaySpan:ctor()
	--self.offset:		int32	
	--self.duration:		int32	
end

function i3k_sbean.RoleLifeDaySpan:clone()
	return clone(self)
end

function i3k_sbean.RoleLifeDaySpan:decode(is)
	self.offset = is:popNumber()
	self.duration = is:popNumber()
end

function i3k_sbean.RoleLifeDaySpan:encode(os)
	os:pushNumber(self.offset)
	os:pushNumber(self.duration)
end


i3k_sbean.MallGoods = i3k_class("MallGoods")
function i3k_sbean.MallGoods:ctor()
	--self.id:		int32	
	--self.iid:		int32	
	--self.icount:		int32	
	--self.price:		int32	
	--self.time:		TimeSpan	
	--self.vipReq:		int32	
	--self.levelReq:		int32	
	--self.attribute:		int32	
	--self.discount:		MallGoodsDiscount	
	--self.restriction:		MallGoodsRestriction	
end

function i3k_sbean.MallGoods:clone()
	return clone(self)
end

function i3k_sbean.MallGoods:decode(is)
	self.id = is:popNumber()
	self.iid = is:popNumber()
	self.icount = is:popNumber()
	self.price = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.vipReq = is:popNumber()
	self.levelReq = is:popNumber()
	self.attribute = is:popNumber()
	self.discount = is:pop(i3k_sbean.MallGoodsDiscount)
	self.restriction = is:pop(i3k_sbean.MallGoodsRestriction)
end

function i3k_sbean.MallGoods:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.iid)
	os:pushNumber(self.icount)
	os:pushNumber(self.price)
	os:push(self.time)
	os:pushNumber(self.vipReq)
	os:pushNumber(self.levelReq)
	os:pushNumber(self.attribute)
	os:push(self.discount)
	os:push(self.restriction)
end


i3k_sbean.MallGoodsDiscount = i3k_class("MallGoodsDiscount")
function i3k_sbean.MallGoodsDiscount:ctor()
	--self.price:		int32	
	--self.time:		TimeSpan	
end

function i3k_sbean.MallGoodsDiscount:clone()
	return clone(self)
end

function i3k_sbean.MallGoodsDiscount:decode(is)
	self.price = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
end

function i3k_sbean.MallGoodsDiscount:encode(os)
	os:pushNumber(self.price)
	os:push(self.time)
end


i3k_sbean.MallGoodsRestriction = i3k_class("MallGoodsRestriction")
function i3k_sbean.MallGoodsRestriction:ctor()
	--self.times:		int32	
	--self.weekPeriod:		int32	
	--self.vipdouble:		int32	
	--self.time:		TimeSpan	
end

function i3k_sbean.MallGoodsRestriction:clone()
	return clone(self)
end

function i3k_sbean.MallGoodsRestriction:decode(is)
	self.times = is:popNumber()
	self.weekPeriod = is:popNumber()
	self.vipdouble = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
end

function i3k_sbean.MallGoodsRestriction:encode(os)
	os:pushNumber(self.times)
	os:pushNumber(self.weekPeriod)
	os:pushNumber(self.vipdouble)
	os:push(self.time)
end


i3k_sbean.Mall = i3k_class("Mall")
function i3k_sbean.Mall:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.fGoods:		vector[MallGoods]	
	--self.rGoods:		vector[MallGoods]	
	--self.hlGoods:		vector[MallGoods]	
	--self.lhGoods:		vector[MallGoods]	
end

function i3k_sbean.Mall:clone()
	return clone(self)
end

function i3k_sbean.Mall:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.fGoods = is:popList(i3k_sbean.MallGoods)
	self.rGoods = is:popList(i3k_sbean.MallGoods)
	self.hlGoods = is:popList(i3k_sbean.MallGoods)
	self.lhGoods = is:popList(i3k_sbean.MallGoods)
end

function i3k_sbean.Mall:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushList(self.fGoods)
	os:pushList(self.rGoods)
	os:pushList(self.hlGoods)
	os:pushList(self.lhGoods)
end


i3k_sbean.RoleMallInfo = i3k_class("RoleMallInfo")
function i3k_sbean.RoleMallInfo:ctor()
	--self.effectiveTime:		int32	
	--self.mall:		Mall	
	--self.log:		DBRoleMallLog	
	--self.extraGifts:		BuyExtraGift	
end

function i3k_sbean.RoleMallInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleMallInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.mall = is:pop(i3k_sbean.Mall)
	self.log = is:pop(i3k_sbean.DBRoleMallLog)
	self.extraGifts = is:pop(i3k_sbean.BuyExtraGift)
end

function i3k_sbean.RoleMallInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.mall)
	os:push(self.log)
	os:push(self.extraGifts)
end


i3k_sbean.BuyExtraGift = i3k_class("BuyExtraGift")
function i3k_sbean.BuyExtraGift:ctor()
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.gifts:		map[int32, BuyExtraGiftItem]	
end

function i3k_sbean.BuyExtraGift:clone()
	return clone(self)
end

function i3k_sbean.BuyExtraGift:decode(is)
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.gifts = is:popNumberMap(i3k_sbean.BuyExtraGiftItem)
end

function i3k_sbean.BuyExtraGift:encode(os)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumberMap(self.gifts)
end


i3k_sbean.BuyExtraGiftItem = i3k_class("BuyExtraGiftItem")
function i3k_sbean.BuyExtraGiftItem:ctor()
	--self.gid:		int32	
	--self.gitem:		DummyGoods	
	--self.iid:		int32	
	--self.icount:		int32	
end

function i3k_sbean.BuyExtraGiftItem:clone()
	return clone(self)
end

function i3k_sbean.BuyExtraGiftItem:decode(is)
	self.gid = is:popNumber()
	self.gitem = is:pop(i3k_sbean.DummyGoods)
	self.iid = is:popNumber()
	self.icount = is:popNumber()
end

function i3k_sbean.BuyExtraGiftItem:encode(os)
	os:pushNumber(self.gid)
	os:push(self.gitem)
	os:pushNumber(self.iid)
	os:pushNumber(self.icount)
end


i3k_sbean.MoreRoleDiscount = i3k_class("MoreRoleDiscount")
function i3k_sbean.MoreRoleDiscount:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.gift:		MoreRoleDiscountGift	
end

function i3k_sbean.MoreRoleDiscount:clone()
	return clone(self)
end

function i3k_sbean.MoreRoleDiscount:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.gift = is:pop(i3k_sbean.MoreRoleDiscountGift)
end

function i3k_sbean.MoreRoleDiscount:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.gift)
end


i3k_sbean.MoreRoleDiscountGift = i3k_class("MoreRoleDiscountGift")
function i3k_sbean.MoreRoleDiscountGift:ctor()
	--self.levelReq:		int32	
	--self.vipReq:		int32	
	--self.autoAddCD:		int32	
	--self.autoAddMin:		int32	
	--self.autoAddMax:		int32	
	--self.additionRoleNumMax:		int32	
	--self.joinTime:		TimeSpan	
	--self.goods:		map[int32, MoreRoleDiscountGood]	
end

function i3k_sbean.MoreRoleDiscountGift:clone()
	return clone(self)
end

function i3k_sbean.MoreRoleDiscountGift:decode(is)
	self.levelReq = is:popNumber()
	self.vipReq = is:popNumber()
	self.autoAddCD = is:popNumber()
	self.autoAddMin = is:popNumber()
	self.autoAddMax = is:popNumber()
	self.additionRoleNumMax = is:popNumber()
	self.joinTime = is:pop(i3k_sbean.TimeSpan)
	self.goods = is:popNumberMap(i3k_sbean.MoreRoleDiscountGood)
end

function i3k_sbean.MoreRoleDiscountGift:encode(os)
	os:pushNumber(self.levelReq)
	os:pushNumber(self.vipReq)
	os:pushNumber(self.autoAddCD)
	os:pushNumber(self.autoAddMin)
	os:pushNumber(self.autoAddMax)
	os:pushNumber(self.additionRoleNumMax)
	os:push(self.joinTime)
	os:pushNumberMap(self.goods)
end


i3k_sbean.MoreRoleDiscountGood = i3k_class("MoreRoleDiscountGood")
function i3k_sbean.MoreRoleDiscountGood:ctor()
	--self.id:		int32	
	--self.itemId:		int32	
	--self.itemCount:		int32	
	--self.costItem:		int32	
	--self.baseCost:		int32	
	--self.buyTime:		int32	
	--self.discounts:		vector[RoleNumDiscount]	
end

function i3k_sbean.MoreRoleDiscountGood:clone()
	return clone(self)
end

function i3k_sbean.MoreRoleDiscountGood:decode(is)
	self.id = is:popNumber()
	self.itemId = is:popNumber()
	self.itemCount = is:popNumber()
	self.costItem = is:popNumber()
	self.baseCost = is:popNumber()
	self.buyTime = is:popNumber()
	self.discounts = is:popList(i3k_sbean.RoleNumDiscount)
end

function i3k_sbean.MoreRoleDiscountGood:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.itemId)
	os:pushNumber(self.itemCount)
	os:pushNumber(self.costItem)
	os:pushNumber(self.baseCost)
	os:pushNumber(self.buyTime)
	os:pushList(self.discounts)
end


i3k_sbean.RoleNumDiscount = i3k_class("RoleNumDiscount")
function i3k_sbean.RoleNumDiscount:ctor()
	--self.roleCount:		int32	
	--self.price:		int32	
end

function i3k_sbean.RoleNumDiscount:clone()
	return clone(self)
end

function i3k_sbean.RoleNumDiscount:decode(is)
	self.roleCount = is:popNumber()
	self.price = is:popNumber()
end

function i3k_sbean.RoleNumDiscount:encode(os)
	os:pushNumber(self.roleCount)
	os:pushNumber(self.price)
end


i3k_sbean.GroupBuy = i3k_class("GroupBuy")
function i3k_sbean.GroupBuy:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.buyEndTime:		int32	
	--self.returnTime:		int32	
	--self.crossserver:		int8	
	--self.goods:		vector[GroupBuyGoods]	
end

function i3k_sbean.GroupBuy:clone()
	return clone(self)
end

function i3k_sbean.GroupBuy:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.buyEndTime = is:popNumber()
	self.returnTime = is:popNumber()
	self.crossserver = is:popNumber()
	self.goods = is:popList(i3k_sbean.GroupBuyGoods)
end

function i3k_sbean.GroupBuy:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.buyEndTime)
	os:pushNumber(self.returnTime)
	os:pushNumber(self.crossserver)
	os:pushList(self.goods)
end


i3k_sbean.GroupBuyGoods = i3k_class("GroupBuyGoods")
function i3k_sbean.GroupBuyGoods:ctor()
	--self.id:		int32	
	--self.iid:		int32	
	--self.icount:		int32	
	--self.price:		int32	
	--self.vipReq:		int32	
	--self.levelReq:		int32	
	--self.discounts:		vector[GroupBuyDiscount]	
	--self.restriction:		GroupBuyRestriction	
end

function i3k_sbean.GroupBuyGoods:clone()
	return clone(self)
end

function i3k_sbean.GroupBuyGoods:decode(is)
	self.id = is:popNumber()
	self.iid = is:popNumber()
	self.icount = is:popNumber()
	self.price = is:popNumber()
	self.vipReq = is:popNumber()
	self.levelReq = is:popNumber()
	self.discounts = is:popList(i3k_sbean.GroupBuyDiscount)
	self.restriction = is:pop(i3k_sbean.GroupBuyRestriction)
end

function i3k_sbean.GroupBuyGoods:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.iid)
	os:pushNumber(self.icount)
	os:pushNumber(self.price)
	os:pushNumber(self.vipReq)
	os:pushNumber(self.levelReq)
	os:pushList(self.discounts)
	os:push(self.restriction)
end


i3k_sbean.GroupBuyDiscount = i3k_class("GroupBuyDiscount")
function i3k_sbean.GroupBuyDiscount:ctor()
	--self.countReq:		int32	
	--self.discount:		int32	
end

function i3k_sbean.GroupBuyDiscount:clone()
	return clone(self)
end

function i3k_sbean.GroupBuyDiscount:decode(is)
	self.countReq = is:popNumber()
	self.discount = is:popNumber()
end

function i3k_sbean.GroupBuyDiscount:encode(os)
	os:pushNumber(self.countReq)
	os:pushNumber(self.discount)
end


i3k_sbean.GroupBuyRestriction = i3k_class("GroupBuyRestriction")
function i3k_sbean.GroupBuyRestriction:ctor()
	--self.times:		int32	
	--self.dayRefresh:		int8	
end

function i3k_sbean.GroupBuyRestriction:clone()
	return clone(self)
end

function i3k_sbean.GroupBuyRestriction:decode(is)
	self.times = is:popNumber()
	self.dayRefresh = is:popNumber()
end

function i3k_sbean.GroupBuyRestriction:encode(os)
	os:pushNumber(self.times)
	os:pushNumber(self.dayRefresh)
end


i3k_sbean.RoleGroupBuyInfo = i3k_class("RoleGroupBuyInfo")
function i3k_sbean.RoleGroupBuyInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		GroupBuy	
	--self.log:		DBRoleGroupBuyLog	
	--self.buyCounts:		map[int32, int32]	
end

function i3k_sbean.RoleGroupBuyInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleGroupBuyInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.GroupBuy)
	self.log = is:pop(i3k_sbean.DBRoleGroupBuyLog)
	self.buyCounts = is:popNumberNumberMap()
end

function i3k_sbean.RoleGroupBuyInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
	os:pushNumberNumberMap(self.buyCounts)
end


i3k_sbean.MoreRoleDiscountInfo = i3k_class("MoreRoleDiscountInfo")
function i3k_sbean.MoreRoleDiscountInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		MoreRoleDiscount	
	--self.log:		map[int32, RoleMoreRoleDiscountLog]	
end

function i3k_sbean.MoreRoleDiscountInfo:clone()
	return clone(self)
end

function i3k_sbean.MoreRoleDiscountInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.MoreRoleDiscount)
	self.log = is:popNumberMap(i3k_sbean.RoleMoreRoleDiscountLog)
end

function i3k_sbean.MoreRoleDiscountInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:pushNumberMap(self.log)
end


i3k_sbean.RoleMoreRoleDiscountLog = i3k_class("RoleMoreRoleDiscountLog")
function i3k_sbean.RoleMoreRoleDiscountLog:ctor()
	--self.isJoin:		int32	
	--self.buyTime:		int32	
	--self.curRoleSize:		int32	
end

function i3k_sbean.RoleMoreRoleDiscountLog:clone()
	return clone(self)
end

function i3k_sbean.RoleMoreRoleDiscountLog:decode(is)
	self.isJoin = is:popNumber()
	self.buyTime = is:popNumber()
	self.curRoleSize = is:popNumber()
end

function i3k_sbean.RoleMoreRoleDiscountLog:encode(os)
	os:pushNumber(self.isJoin)
	os:pushNumber(self.buyTime)
	os:pushNumber(self.curRoleSize)
end


i3k_sbean.SharedPay = i3k_class("SharedPay")
function i3k_sbean.SharedPay:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.crossserver:		int8	
	--self.gifts:		vector[SharedPayGift]	
end

function i3k_sbean.SharedPay:clone()
	return clone(self)
end

function i3k_sbean.SharedPay:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.crossserver = is:popNumber()
	self.gifts = is:popList(i3k_sbean.SharedPayGift)
end

function i3k_sbean.SharedPay:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.crossserver)
	os:pushList(self.gifts)
end


i3k_sbean.SharedPayGift = i3k_class("SharedPayGift")
function i3k_sbean.SharedPayGift:ctor()
	--self.payReq:		int32	
	--self.lvlReq:		int32	
	--self.levelGifts:		vector[SharedPayLevelGift]	
end

function i3k_sbean.SharedPayGift:clone()
	return clone(self)
end

function i3k_sbean.SharedPayGift:decode(is)
	self.payReq = is:popNumber()
	self.lvlReq = is:popNumber()
	self.levelGifts = is:popList(i3k_sbean.SharedPayLevelGift)
end

function i3k_sbean.SharedPayGift:encode(os)
	os:pushNumber(self.payReq)
	os:pushNumber(self.lvlReq)
	os:pushList(self.levelGifts)
end


i3k_sbean.SharedPayLevelGift = i3k_class("SharedPayLevelGift")
function i3k_sbean.SharedPayLevelGift:ctor()
	--self.payroles:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.SharedPayLevelGift:clone()
	return clone(self)
end

function i3k_sbean.SharedPayLevelGift:decode(is)
	self.payroles = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.SharedPayLevelGift:encode(os)
	os:pushNumber(self.payroles)
	os:pushList(self.gifts)
end


i3k_sbean.RoleSharedPayInfo = i3k_class("RoleSharedPayInfo")
function i3k_sbean.RoleSharedPayInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		SharedPay	
	--self.payRoleCnt:		int32	
	--self.log:		DBRoleSharedPayLog	
end

function i3k_sbean.RoleSharedPayInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleSharedPayInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.SharedPay)
	self.payRoleCnt = is:popNumber()
	self.log = is:pop(i3k_sbean.DBRoleSharedPayLog)
end

function i3k_sbean.RoleSharedPayInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:pushNumber(self.payRoleCnt)
	os:push(self.log)
end


i3k_sbean.UseItemAct = i3k_class("UseItemAct")
function i3k_sbean.UseItemAct:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.levels:		vector[UseItemActLevel]	
end

function i3k_sbean.UseItemAct:clone()
	return clone(self)
end

function i3k_sbean.UseItemAct:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.levels = is:popList(i3k_sbean.UseItemActLevel)
end

function i3k_sbean.UseItemAct:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.levels)
end


i3k_sbean.PayRebate = i3k_class("PayRebate")
function i3k_sbean.PayRebate:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.payEndTime:		int32	
	--self.returnConf:		PayRebateReturnConf	
end

function i3k_sbean.PayRebate:clone()
	return clone(self)
end

function i3k_sbean.PayRebate:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.payEndTime = is:popNumber()
	self.returnConf = is:pop(i3k_sbean.PayRebateReturnConf)
end

function i3k_sbean.PayRebate:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.payEndTime)
	os:push(self.returnConf)
end


i3k_sbean.PayRebateReturnConf = i3k_class("PayRebateReturnConf")
function i3k_sbean.PayRebateReturnConf:ctor()
	--self.payReq:		int32	
	--self.dayReturn:		int32	
	--self.returnDays:		int32	
	--self.takeGift:		vector[DummyGoods]	
end

function i3k_sbean.PayRebateReturnConf:clone()
	return clone(self)
end

function i3k_sbean.PayRebateReturnConf:decode(is)
	self.payReq = is:popNumber()
	self.dayReturn = is:popNumber()
	self.returnDays = is:popNumber()
	self.takeGift = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.PayRebateReturnConf:encode(os)
	os:pushNumber(self.payReq)
	os:pushNumber(self.dayReturn)
	os:pushNumber(self.returnDays)
	os:pushList(self.takeGift)
end


i3k_sbean.RedPack = i3k_class("RedPack")
function i3k_sbean.RedPack:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.vipReq:		int32	
	--self.levelReq:		int32	
	--self.saveConf:		RedPackSaveConf	
	--self.rewardConf:		RedPackRewardConf	
end

function i3k_sbean.RedPack:clone()
	return clone(self)
end

function i3k_sbean.RedPack:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.vipReq = is:popNumber()
	self.levelReq = is:popNumber()
	self.saveConf = is:pop(i3k_sbean.RedPackSaveConf)
	self.rewardConf = is:pop(i3k_sbean.RedPackRewardConf)
end

function i3k_sbean.RedPack:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.vipReq)
	os:pushNumber(self.levelReq)
	os:push(self.saveConf)
	os:push(self.rewardConf)
end


i3k_sbean.RedPackSaveConf = i3k_class("RedPackSaveConf")
function i3k_sbean.RedPackSaveConf:ctor()
	--self.maxDiamondSave:		int32	
	--self.maxCoinSave:		int32	
	--self.saveTime:		TimeSpan	
end

function i3k_sbean.RedPackSaveConf:clone()
	return clone(self)
end

function i3k_sbean.RedPackSaveConf:decode(is)
	self.maxDiamondSave = is:popNumber()
	self.maxCoinSave = is:popNumber()
	self.saveTime = is:pop(i3k_sbean.TimeSpan)
end

function i3k_sbean.RedPackSaveConf:encode(os)
	os:pushNumber(self.maxDiamondSave)
	os:pushNumber(self.maxCoinSave)
	os:push(self.saveTime)
end


i3k_sbean.RedPackRewardConf = i3k_class("RedPackRewardConf")
function i3k_sbean.RedPackRewardConf:ctor()
	--self.diamondRate:		int32	
	--self.coinRate:		int32	
	--self.rewardTime:		TimeSpan	
end

function i3k_sbean.RedPackRewardConf:clone()
	return clone(self)
end

function i3k_sbean.RedPackRewardConf:decode(is)
	self.diamondRate = is:popNumber()
	self.coinRate = is:popNumber()
	self.rewardTime = is:pop(i3k_sbean.TimeSpan)
end

function i3k_sbean.RedPackRewardConf:encode(os)
	os:pushNumber(self.diamondRate)
	os:pushNumber(self.coinRate)
	os:push(self.rewardTime)
end


i3k_sbean.UseItemActLevel = i3k_class("UseItemActLevel")
function i3k_sbean.UseItemActLevel:ctor()
	--self.levelid:		int32	
	--self.uid:		int32	
	--self.ucount:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.UseItemActLevel:clone()
	return clone(self)
end

function i3k_sbean.UseItemActLevel:decode(is)
	self.levelid = is:popNumber()
	self.uid = is:popNumber()
	self.ucount = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.UseItemActLevel:encode(os)
	os:pushNumber(self.levelid)
	os:pushNumber(self.uid)
	os:pushNumber(self.ucount)
	os:pushList(self.gifts)
end


i3k_sbean.RoleUseItemActInfo = i3k_class("RoleUseItemActInfo")
function i3k_sbean.RoleUseItemActInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		UseItemAct	
	--self.log:		DBRoleUseItemActLog	
end

function i3k_sbean.RoleUseItemActInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleUseItemActInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.UseItemAct)
	self.log = is:pop(i3k_sbean.DBRoleUseItemActLog)
end

function i3k_sbean.RoleUseItemActInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.RoleRedPackInfo = i3k_class("RoleRedPackInfo")
function i3k_sbean.RoleRedPackInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RedPack	
	--self.log:		DBRoleRedPackLog	
end

function i3k_sbean.RoleRedPackInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleRedPackInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RedPack)
	self.log = is:pop(i3k_sbean.DBRoleRedPackLog)
end

function i3k_sbean.RoleRedPackInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.RolePayRebateInfo = i3k_class("RolePayRebateInfo")
function i3k_sbean.RolePayRebateInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		PayRebate	
	--self.log:		DBRolePayRebateLog	
end

function i3k_sbean.RolePayRebateInfo:clone()
	return clone(self)
end

function i3k_sbean.RolePayRebateInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.PayRebate)
	self.log = is:pop(i3k_sbean.DBRolePayRebateLog)
end

function i3k_sbean.RolePayRebateInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.LuckyRollerGift = i3k_class("LuckyRollerGift")
function i3k_sbean.LuckyRollerGift:ctor()
	--self.id:		int32	
	--self.gift:		DummyGoods	
	--self.probability:		float	
	--self.valuable:		int32	
	--self.minRoll:		int32	
end

function i3k_sbean.LuckyRollerGift:clone()
	return clone(self)
end

function i3k_sbean.LuckyRollerGift:decode(is)
	self.id = is:popNumber()
	self.gift = is:pop(i3k_sbean.DummyGoods)
	self.probability = is:popNumber()
	self.valuable = is:popNumber()
	self.minRoll = is:popNumber()
end

function i3k_sbean.LuckyRollerGift:encode(os)
	os:pushNumber(self.id)
	os:push(self.gift)
	os:pushNumber(self.probability)
	os:pushNumber(self.valuable)
	os:pushNumber(self.minRoll)
end


i3k_sbean.LuckyRoller = i3k_class("LuckyRoller")
function i3k_sbean.LuckyRoller:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.price:		DummyGoods	
	--self.gifts:		vector[LuckyRollerGift]	
	--self.giftex:		DummyGoods	
	--self.maxRoll:		map[int32, int32]	
	--self.maxLogLength:		int32	
	--self.dayMaxPlayTimes:		int32	
	--self.levelReq:		int32	
end

function i3k_sbean.LuckyRoller:clone()
	return clone(self)
end

function i3k_sbean.LuckyRoller:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.price = is:pop(i3k_sbean.DummyGoods)
	self.gifts = is:popList(i3k_sbean.LuckyRollerGift)
	self.giftex = is:pop(i3k_sbean.DummyGoods)
	self.maxRoll = is:popNumberNumberMap()
	self.maxLogLength = is:popNumber()
	self.dayMaxPlayTimes = is:popNumber()
	self.levelReq = is:popNumber()
end

function i3k_sbean.LuckyRoller:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:push(self.price)
	os:pushList(self.gifts)
	os:push(self.giftex)
	os:pushNumberNumberMap(self.maxRoll)
	os:pushNumber(self.maxLogLength)
	os:pushNumber(self.dayMaxPlayTimes)
	os:pushNumber(self.levelReq)
end


i3k_sbean.LuckyRollerRecord = i3k_class("LuckyRollerRecord")
function i3k_sbean.LuckyRollerRecord:ctor()
	--self.name:		string	
	--self.id:		int32	
end

function i3k_sbean.LuckyRollerRecord:clone()
	return clone(self)
end

function i3k_sbean.LuckyRollerRecord:decode(is)
	self.name = is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.LuckyRollerRecord:encode(os)
	os:pushString(self.name)
	os:pushNumber(self.id)
end


i3k_sbean.RoleLuckyRollerCfg = i3k_class("RoleLuckyRollerCfg")
function i3k_sbean.RoleLuckyRollerCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.price:		DummyGoods	
	--self.gifts:		vector[LuckyRollerGift]	
	--self.giftex:		DummyGoods	
	--self.dayMaxPlayTimes:		int32	
	--self.levelReq:		int32	
end

function i3k_sbean.RoleLuckyRollerCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleLuckyRollerCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.price = is:pop(i3k_sbean.DummyGoods)
	self.gifts = is:popList(i3k_sbean.LuckyRollerGift)
	self.giftex = is:pop(i3k_sbean.DummyGoods)
	self.dayMaxPlayTimes = is:popNumber()
	self.levelReq = is:popNumber()
end

function i3k_sbean.RoleLuckyRollerCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.price)
	os:pushList(self.gifts)
	os:push(self.giftex)
	os:pushNumber(self.dayMaxPlayTimes)
	os:pushNumber(self.levelReq)
end


i3k_sbean.LuckyRollInfo = i3k_class("LuckyRollInfo")
function i3k_sbean.LuckyRollInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleLuckyRollerCfg	
	--self.logs:		vector[LuckyRollerRecord]	
	--self.dayPlayTimes:		int32	
end

function i3k_sbean.LuckyRollInfo:clone()
	return clone(self)
end

function i3k_sbean.LuckyRollInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleLuckyRollerCfg)
	self.logs = is:popList(i3k_sbean.LuckyRollerRecord)
	self.dayPlayTimes = is:popNumber()
end

function i3k_sbean.LuckyRollInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:pushList(self.logs)
	os:pushNumber(self.dayPlayTimes)
end


i3k_sbean.FlashSale = i3k_class("FlashSale")
function i3k_sbean.FlashSale:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.buyStartTime:		int32	
	--self.buyEndTime:		int32	
	--self.goods:		vector[FlashSaleGoods]	
	--self.treasureBox:		vector[DummyGoods]	
	--self.levelLimit:		int32	
end

function i3k_sbean.FlashSale:clone()
	return clone(self)
end

function i3k_sbean.FlashSale:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.buyStartTime = is:popNumber()
	self.buyEndTime = is:popNumber()
	self.goods = is:popList(i3k_sbean.FlashSaleGoods)
	self.treasureBox = is:popList(i3k_sbean.DummyGoods)
	self.levelLimit = is:popNumber()
end

function i3k_sbean.FlashSale:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.buyStartTime)
	os:pushNumber(self.buyEndTime)
	os:pushList(self.goods)
	os:pushList(self.treasureBox)
	os:pushNumber(self.levelLimit)
end


i3k_sbean.FlashSaleVip2Times = i3k_class("FlashSaleVip2Times")
function i3k_sbean.FlashSaleVip2Times:ctor()
	--self.vip:		int32	
	--self.times:		int32	
end

function i3k_sbean.FlashSaleVip2Times:clone()
	return clone(self)
end

function i3k_sbean.FlashSaleVip2Times:decode(is)
	self.vip = is:popNumber()
	self.times = is:popNumber()
end

function i3k_sbean.FlashSaleVip2Times:encode(os)
	os:pushNumber(self.vip)
	os:pushNumber(self.times)
end


i3k_sbean.FlashSaleGoods = i3k_class("FlashSaleGoods")
function i3k_sbean.FlashSaleGoods:ctor()
	--self.id:		int32	
	--self.goodsname:		string	
	--self.moneyid:		int32	
	--self.origprice:		int32	
	--self.nowprice:		int32	
	--self.icon:		int32	
	--self.levelReq:		int32	
	--self.v2t:		vector[FlashSaleVip2Times]	
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.FlashSaleGoods:clone()
	return clone(self)
end

function i3k_sbean.FlashSaleGoods:decode(is)
	self.id = is:popNumber()
	self.goodsname = is:popString()
	self.moneyid = is:popNumber()
	self.origprice = is:popNumber()
	self.nowprice = is:popNumber()
	self.icon = is:popNumber()
	self.levelReq = is:popNumber()
	self.v2t = is:popList(i3k_sbean.FlashSaleVip2Times)
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.FlashSaleGoods:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.goodsname)
	os:pushNumber(self.moneyid)
	os:pushNumber(self.origprice)
	os:pushNumber(self.nowprice)
	os:pushNumber(self.icon)
	os:pushNumber(self.levelReq)
	os:pushList(self.v2t)
	os:pushList(self.items)
end


i3k_sbean.RoleFlashSaleCfg = i3k_class("RoleFlashSaleCfg")
function i3k_sbean.RoleFlashSaleCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.buyStartTime:		int32	
	--self.buyEndTime:		int32	
	--self.goods:		vector[FlashSaleGoods]	
	--self.treasureBox:		vector[DummyGoods]	
end

function i3k_sbean.RoleFlashSaleCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleFlashSaleCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.buyStartTime = is:popNumber()
	self.buyEndTime = is:popNumber()
	self.goods = is:popList(i3k_sbean.FlashSaleGoods)
	self.treasureBox = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.RoleFlashSaleCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.buyStartTime)
	os:pushNumber(self.buyEndTime)
	os:pushList(self.goods)
	os:pushList(self.treasureBox)
end


i3k_sbean.RoleFlashSaleInfo = i3k_class("RoleFlashSaleInfo")
function i3k_sbean.RoleFlashSaleInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleFlashSaleCfg	
	--self.log:		map[int32,int32]	
	--self.isOpen:		int32	
end

function i3k_sbean.RoleFlashSaleInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleFlashSaleInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleFlashSaleCfg)
	self.log = is:popNumberNumberMap()
	self.isOpen = is:popNumber()
end

function i3k_sbean.RoleFlashSaleInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:pushNumberNumberMap(self.log)
	os:pushNumber(self.isOpen)
end


i3k_sbean.Advers = i3k_class("Advers")
function i3k_sbean.Advers:ctor()
	--self.open:		int32	
	--self.effectiveTime:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.icons:		vector[int32]	
end

function i3k_sbean.Advers:clone()
	return clone(self)
end

function i3k_sbean.Advers:decode(is)
	self.open = is:popNumber()
	self.effectiveTime = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.icons = is:popNumberList()
end

function i3k_sbean.Advers:encode(os)
	os:pushNumber(self.open)
	os:pushNumber(self.effectiveTime)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumberList(self.icons)
end


i3k_sbean.AdversInfo = i3k_class("AdversInfo")
function i3k_sbean.AdversInfo:ctor()
	--self.effectiveTime:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.icons:		vector[int32]	
end

function i3k_sbean.AdversInfo:clone()
	return clone(self)
end

function i3k_sbean.AdversInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.icons = is:popNumberList()
end

function i3k_sbean.AdversInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumberList(self.icons)
end


i3k_sbean.FirstPayGift = i3k_class("FirstPayGift")
function i3k_sbean.FirstPayGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.biggift:		DummyGoods	
	--self.gifts:		vector[ClassTypeReward]	
end

function i3k_sbean.FirstPayGift:clone()
	return clone(self)
end

function i3k_sbean.FirstPayGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.biggift = is:pop(i3k_sbean.DummyGoods)
	self.gifts = is:popList(i3k_sbean.ClassTypeReward)
end

function i3k_sbean.FirstPayGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:push(self.biggift)
	os:pushList(self.gifts)
end


i3k_sbean.RoleFirstPayGiftCfg = i3k_class("RoleFirstPayGiftCfg")
function i3k_sbean.RoleFirstPayGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.biggift:		DummyGoods	
	--self.gifts:		vector[ClassTypeReward]	
end

function i3k_sbean.RoleFirstPayGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleFirstPayGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.biggift = is:pop(i3k_sbean.DummyGoods)
	self.gifts = is:popList(i3k_sbean.ClassTypeReward)
end

function i3k_sbean.RoleFirstPayGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.biggift)
	os:pushList(self.gifts)
end


i3k_sbean.RoleFirstPayGiftInfo = i3k_class("RoleFirstPayGiftInfo")
function i3k_sbean.RoleFirstPayGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleFirstPayGiftCfg	
	--self.log:		DBRoleFirstPayGiftLog	
end

function i3k_sbean.RoleFirstPayGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleFirstPayGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleFirstPayGiftCfg)
	self.log = is:pop(i3k_sbean.DBRoleFirstPayGiftLog)
end

function i3k_sbean.RoleFirstPayGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.DailyPayGift = i3k_class("DailyPayGift")
function i3k_sbean.DailyPayGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.phase:		RoleLifeDaySpan	
	--self.gifts:		map[int32, DayPayGift]	
end

function i3k_sbean.DailyPayGift:clone()
	return clone(self)
end

function i3k_sbean.DailyPayGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.gifts = is:popNumberMap(i3k_sbean.DayPayGift)
end

function i3k_sbean.DailyPayGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:push(self.phase)
	os:pushNumberMap(self.gifts)
end


i3k_sbean.DayPayGift = i3k_class("DayPayGift")
function i3k_sbean.DayPayGift:ctor()
	--self.pay:		int32	
	--self.title:		string	
	--self.content:		string	
	--self.biggift:		DummyGoods	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.DayPayGift:clone()
	return clone(self)
end

function i3k_sbean.DayPayGift:decode(is)
	self.pay = is:popNumber()
	self.title = is:popString()
	self.content = is:popString()
	self.biggift = is:pop(i3k_sbean.DummyGoods)
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.DayPayGift:encode(os)
	os:pushNumber(self.pay)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.biggift)
	os:pushList(self.gifts)
end


i3k_sbean.RoleDailyPayGiftCfg = i3k_class("RoleDailyPayGiftCfg")
function i3k_sbean.RoleDailyPayGiftCfg:ctor()
	--self.time:		TimeSpan	
	--self.gifts:		map[int32, DayPayGift]	
end

function i3k_sbean.RoleDailyPayGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleDailyPayGiftCfg:decode(is)
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.gifts = is:popNumberMap(i3k_sbean.DayPayGift)
end

function i3k_sbean.RoleDailyPayGiftCfg:encode(os)
	os:push(self.time)
	os:pushNumberMap(self.gifts)
end


i3k_sbean.RoleDailyPayGiftInfo = i3k_class("RoleDailyPayGiftInfo")
function i3k_sbean.RoleDailyPayGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfgId:		int32	
	--self.curDay:		int32	
	--self.cfg:		DayPayGift	
	--self.log:		DBRoleDailyPayGiftLog	
end

function i3k_sbean.RoleDailyPayGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleDailyPayGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfgId = is:popNumber()
	self.curDay = is:popNumber()
	self.cfg = is:pop(i3k_sbean.DayPayGift)
	self.log = is:pop(i3k_sbean.DBRoleDailyPayGiftLog)
end

function i3k_sbean.RoleDailyPayGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.cfgId)
	os:pushNumber(self.curDay)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.LastPayGift = i3k_class("LastPayGift")
function i3k_sbean.LastPayGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.lastPayNum:		int32	
	--self.fromRegister:		int32	
	--self.gifts:		map[int32, DummyGoodList]	
end

function i3k_sbean.LastPayGift:clone()
	return clone(self)
end

function i3k_sbean.LastPayGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.lastPayNum = is:popNumber()
	self.fromRegister = is:popNumber()
	self.gifts = is:popNumberMap(i3k_sbean.DummyGoodList)
end

function i3k_sbean.LastPayGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.lastPayNum)
	os:pushNumber(self.fromRegister)
	os:pushNumberMap(self.gifts)
end


i3k_sbean.RoleLastPayGiftCfg = i3k_class("RoleLastPayGiftCfg")
function i3k_sbean.RoleLastPayGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.lastPayNum:		int32	
	--self.fromRegister:		int32	
	--self.gifts:		map[int32, DummyGoodList]	
end

function i3k_sbean.RoleLastPayGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleLastPayGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.lastPayNum = is:popNumber()
	self.fromRegister = is:popNumber()
	self.gifts = is:popNumberMap(i3k_sbean.DummyGoodList)
end

function i3k_sbean.RoleLastPayGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.lastPayNum)
	os:pushNumber(self.fromRegister)
	os:pushNumberMap(self.gifts)
end


i3k_sbean.RoleLastPayGiftInfo = i3k_class("RoleLastPayGiftInfo")
function i3k_sbean.RoleLastPayGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleLastPayGiftCfg	
	--self.log:		DBRoleLastPayGiftLog	
end

function i3k_sbean.RoleLastPayGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleLastPayGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleLastPayGiftCfg)
	self.log = is:pop(i3k_sbean.DBRoleLastPayGiftLog)
end

function i3k_sbean.RoleLastPayGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.ActivityChallengeGift = i3k_class("ActivityChallengeGift")
function i3k_sbean.ActivityChallengeGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.levelReq:		int32	
	--self.vipReq:		int32	
	--self.gifts:		vector[ChallengeGift]	
end

function i3k_sbean.ActivityChallengeGift:clone()
	return clone(self)
end

function i3k_sbean.ActivityChallengeGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.levelReq = is:popNumber()
	self.vipReq = is:popNumber()
	self.gifts = is:popList(i3k_sbean.ChallengeGift)
end

function i3k_sbean.ActivityChallengeGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.levelReq)
	os:pushNumber(self.vipReq)
	os:pushList(self.gifts)
end


i3k_sbean.ChallengeGift = i3k_class("ChallengeGift")
function i3k_sbean.ChallengeGift:ctor()
	--self.id:		int32	
	--self.gifts:		vector[ChallengeTimeGift]	
end

function i3k_sbean.ChallengeGift:clone()
	return clone(self)
end

function i3k_sbean.ChallengeGift:decode(is)
	self.id = is:popNumber()
	self.gifts = is:popList(i3k_sbean.ChallengeTimeGift)
end

function i3k_sbean.ChallengeGift:encode(os)
	os:pushNumber(self.id)
	os:pushList(self.gifts)
end


i3k_sbean.ChallengeTimeGift = i3k_class("ChallengeTimeGift")
function i3k_sbean.ChallengeTimeGift:ctor()
	--self.times:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.ChallengeTimeGift:clone()
	return clone(self)
end

function i3k_sbean.ChallengeTimeGift:decode(is)
	self.times = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.ChallengeTimeGift:encode(os)
	os:pushNumber(self.times)
	os:pushList(self.gifts)
end


i3k_sbean.DummyGoodList = i3k_class("DummyGoodList")
function i3k_sbean.DummyGoodList:ctor()
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.DummyGoodList:clone()
	return clone(self)
end

function i3k_sbean.DummyGoodList:decode(is)
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.DummyGoodList:encode(os)
	os:pushList(self.gifts)
end


i3k_sbean.RoleActivityChallengeGiftCfg = i3k_class("RoleActivityChallengeGiftCfg")
function i3k_sbean.RoleActivityChallengeGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.levelReq:		int32	
	--self.vipReq:		int32	
	--self.gifts:		vector[ChallengeGift]	
end

function i3k_sbean.RoleActivityChallengeGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleActivityChallengeGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.levelReq = is:popNumber()
	self.vipReq = is:popNumber()
	self.gifts = is:popList(i3k_sbean.ChallengeGift)
end

function i3k_sbean.RoleActivityChallengeGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.levelReq)
	os:pushNumber(self.vipReq)
	os:pushList(self.gifts)
end


i3k_sbean.RoleActivityChallengeGiftInfo = i3k_class("RoleActivityChallengeGiftInfo")
function i3k_sbean.RoleActivityChallengeGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleActivityChallengeGiftCfg	
	--self.log:		DBRoleActivityChallengeGiftLog	
end

function i3k_sbean.RoleActivityChallengeGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleActivityChallengeGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleActivityChallengeGiftCfg)
	self.log = is:pop(i3k_sbean.DBRoleActivityChallengeGiftLog)
end

function i3k_sbean.RoleActivityChallengeGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.SchduleGift = i3k_class("SchduleGift")
function i3k_sbean.SchduleGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.levelGifts:		vector[SchduleLevelGift]	
end

function i3k_sbean.SchduleGift:clone()
	return clone(self)
end

function i3k_sbean.SchduleGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.levelGifts = is:popList(i3k_sbean.SchduleLevelGift)
end

function i3k_sbean.SchduleGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushList(self.levelGifts)
end


i3k_sbean.SchduleLevelGift = i3k_class("SchduleLevelGift")
function i3k_sbean.SchduleLevelGift:ctor()
	--self.needSchdule:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.SchduleLevelGift:clone()
	return clone(self)
end

function i3k_sbean.SchduleLevelGift:decode(is)
	self.needSchdule = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.SchduleLevelGift:encode(os)
	os:pushNumber(self.needSchdule)
	os:pushList(self.gifts)
end


i3k_sbean.RoleSchduleGiftCfg = i3k_class("RoleSchduleGiftCfg")
function i3k_sbean.RoleSchduleGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.levelGifts:		vector[SchduleLevelGift]	
end

function i3k_sbean.RoleSchduleGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleSchduleGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.levelGifts = is:popList(i3k_sbean.SchduleLevelGift)
end

function i3k_sbean.RoleSchduleGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.levelGifts)
end


i3k_sbean.RoleSchduleGiftInfo = i3k_class("RoleSchduleGiftInfo")
function i3k_sbean.RoleSchduleGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleSchduleGiftCfg	
	--self.log:		DBRoleSchduleGiftLog	
end

function i3k_sbean.RoleSchduleGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleSchduleGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleSchduleGiftCfg)
	self.log = is:pop(i3k_sbean.DBRoleSchduleGiftLog)
end

function i3k_sbean.RoleSchduleGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.RoleLegendMakeCfg = i3k_class("RoleLegendMakeCfg")
function i3k_sbean.RoleLegendMakeCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.reback:		LegendMakeReback	
end

function i3k_sbean.RoleLegendMakeCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleLegendMakeCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.reback = is:pop(i3k_sbean.LegendMakeReback)
end

function i3k_sbean.RoleLegendMakeCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.reback)
end


i3k_sbean.LegendMakeGift = i3k_class("LegendMakeGift")
function i3k_sbean.LegendMakeGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.reback:		LegendMakeReback	
end

function i3k_sbean.LegendMakeGift:clone()
	return clone(self)
end

function i3k_sbean.LegendMakeGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.reback = is:pop(i3k_sbean.LegendMakeReback)
end

function i3k_sbean.LegendMakeGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.reback)
end


i3k_sbean.LegendMakeReback = i3k_class("LegendMakeReback")
function i3k_sbean.LegendMakeReback:ctor()
	--self.maxtime:		int32	
	--self.makeCondition:		set[int32]	
	--self.timeCondition:		int32	
	--self.reward:		vector[DummyGoods]	
end

function i3k_sbean.LegendMakeReback:clone()
	return clone(self)
end

function i3k_sbean.LegendMakeReback:decode(is)
	self.maxtime = is:popNumber()
	self.makeCondition = is:popNumberSet()
	self.timeCondition = is:popNumber()
	self.reward = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.LegendMakeReback:encode(os)
	os:pushNumber(self.maxtime)
	os:pushNumberSet(self.makeCondition)
	os:pushNumber(self.timeCondition)
	os:pushList(self.reward)
end


i3k_sbean.DonateGift = i3k_class("DonateGift")
function i3k_sbean.DonateGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.range:		int32	
	--self.days:		int32	
	--self.addCount:		int32	
	--self.donation:		Donation	
	--self.rewards:		vector[TotalReaward]	
end

function i3k_sbean.DonateGift:clone()
	return clone(self)
end

function i3k_sbean.DonateGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.range = is:popNumber()
	self.days = is:popNumber()
	self.addCount = is:popNumber()
	self.donation = is:pop(i3k_sbean.Donation)
	self.rewards = is:popList(i3k_sbean.TotalReaward)
end

function i3k_sbean.DonateGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.range)
	os:pushNumber(self.days)
	os:pushNumber(self.addCount)
	os:push(self.donation)
	os:pushList(self.rewards)
end


i3k_sbean.Donation = i3k_class("Donation")
function i3k_sbean.Donation:ctor()
	--self.daytimes:		int32	
	--self.inputGifts:		vector[DummyGoods]	
	--self.outputGifts:		vector[DummyGoods]	
end

function i3k_sbean.Donation:clone()
	return clone(self)
end

function i3k_sbean.Donation:decode(is)
	self.daytimes = is:popNumber()
	self.inputGifts = is:popList(i3k_sbean.DummyGoods)
	self.outputGifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.Donation:encode(os)
	os:pushNumber(self.daytimes)
	os:pushList(self.inputGifts)
	os:pushList(self.outputGifts)
end


i3k_sbean.PayLevelGift = i3k_class("PayLevelGift")
function i3k_sbean.PayLevelGift:ctor()
	--self.pay:		int32	
	--self.showReq:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.PayLevelGift:clone()
	return clone(self)
end

function i3k_sbean.PayLevelGift:decode(is)
	self.pay = is:popNumber()
	self.showReq = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.PayLevelGift:encode(os)
	os:pushNumber(self.pay)
	os:pushNumber(self.showReq)
	os:pushList(self.gifts)
end


i3k_sbean.PayDiscountLevelGift = i3k_class("PayDiscountLevelGift")
function i3k_sbean.PayDiscountLevelGift:ctor()
	--self.payReq:		int32	
	--self.title:		string	
	--self.originalCost:		int32	
	--self.buyCost:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.PayDiscountLevelGift:clone()
	return clone(self)
end

function i3k_sbean.PayDiscountLevelGift:decode(is)
	self.payReq = is:popNumber()
	self.title = is:popString()
	self.originalCost = is:popNumber()
	self.buyCost = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.PayDiscountLevelGift:encode(os)
	os:pushNumber(self.payReq)
	os:pushString(self.title)
	os:pushNumber(self.originalCost)
	os:pushNumber(self.buyCost)
	os:pushList(self.gifts)
end


i3k_sbean.PayDiscountGift = i3k_class("PayDiscountGift")
function i3k_sbean.PayDiscountGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.levelGifts:		vector[PayDiscountLevelGift]	
end

function i3k_sbean.PayDiscountGift:clone()
	return clone(self)
end

function i3k_sbean.PayDiscountGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.levelGifts = is:popList(i3k_sbean.PayDiscountLevelGift)
end

function i3k_sbean.PayDiscountGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushList(self.levelGifts)
end


i3k_sbean.RolePayDiscountGiftCfg = i3k_class("RolePayDiscountGiftCfg")
function i3k_sbean.RolePayDiscountGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.levelGifts:		vector[PayDiscountLevelGift]	
end

function i3k_sbean.RolePayDiscountGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RolePayDiscountGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.levelGifts = is:popList(i3k_sbean.PayDiscountLevelGift)
end

function i3k_sbean.RolePayDiscountGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.levelGifts)
end


i3k_sbean.RolePayDiscountGiftInfo = i3k_class("RolePayDiscountGiftInfo")
function i3k_sbean.RolePayDiscountGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RolePayDiscountGiftCfg	
	--self.log:		DBRolePayDiscountGiftLog	
end

function i3k_sbean.RolePayDiscountGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RolePayDiscountGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RolePayDiscountGiftCfg)
	self.log = is:pop(i3k_sbean.DBRolePayDiscountGiftLog)
end

function i3k_sbean.RolePayDiscountGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.PayGift = i3k_class("PayGift")
function i3k_sbean.PayGift:ctor()
	--self.open:		int32	
	--self.specialDisplay:		int8	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.levelGifts:		vector[PayLevelGift]	
end

function i3k_sbean.PayGift:clone()
	return clone(self)
end

function i3k_sbean.PayGift:decode(is)
	self.open = is:popNumber()
	self.specialDisplay = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.levelGifts = is:popList(i3k_sbean.PayLevelGift)
end

function i3k_sbean.PayGift:encode(os)
	os:pushNumber(self.open)
	os:pushNumber(self.specialDisplay)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushList(self.levelGifts)
end


i3k_sbean.RolePayGiftCfg = i3k_class("RolePayGiftCfg")
function i3k_sbean.RolePayGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.levelGifts:		vector[PayLevelGift]	
end

function i3k_sbean.RolePayGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RolePayGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.levelGifts = is:popList(i3k_sbean.PayLevelGift)
end

function i3k_sbean.RolePayGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.levelGifts)
end


i3k_sbean.RolePayGiftInfo = i3k_class("RolePayGiftInfo")
function i3k_sbean.RolePayGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RolePayGiftCfg	
	--self.log:		DBRolePayGiftLog	
end

function i3k_sbean.RolePayGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RolePayGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RolePayGiftCfg)
	self.log = is:pop(i3k_sbean.DBRolePayGiftLog)
end

function i3k_sbean.RolePayGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.ConsumeLevelGift = i3k_class("ConsumeLevelGift")
function i3k_sbean.ConsumeLevelGift:ctor()
	--self.consume:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.ConsumeLevelGift:clone()
	return clone(self)
end

function i3k_sbean.ConsumeLevelGift:decode(is)
	self.consume = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.ConsumeLevelGift:encode(os)
	os:pushNumber(self.consume)
	os:pushList(self.gifts)
end


i3k_sbean.ConsumeGift = i3k_class("ConsumeGift")
function i3k_sbean.ConsumeGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.levelGifts:		vector[ConsumeLevelGift]	
end

function i3k_sbean.ConsumeGift:clone()
	return clone(self)
end

function i3k_sbean.ConsumeGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.levelGifts = is:popList(i3k_sbean.ConsumeLevelGift)
end

function i3k_sbean.ConsumeGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushList(self.levelGifts)
end


i3k_sbean.RoleConsumeGiftCfg = i3k_class("RoleConsumeGiftCfg")
function i3k_sbean.RoleConsumeGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.levelGifts:		vector[ConsumeLevelGift]	
end

function i3k_sbean.RoleConsumeGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleConsumeGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.levelGifts = is:popList(i3k_sbean.ConsumeLevelGift)
end

function i3k_sbean.RoleConsumeGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.levelGifts)
end


i3k_sbean.RoleConsumeGiftInfo = i3k_class("RoleConsumeGiftInfo")
function i3k_sbean.RoleConsumeGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleConsumeGiftCfg	
	--self.log:		DBRoleConsumeGiftLog	
end

function i3k_sbean.RoleConsumeGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleConsumeGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleConsumeGiftCfg)
	self.log = is:pop(i3k_sbean.DBRoleConsumeGiftLog)
end

function i3k_sbean.RoleConsumeGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.UpgradeLevelGift = i3k_class("UpgradeLevelGift")
function i3k_sbean.UpgradeLevelGift:ctor()
	--self.level:		int32	
	--self.gifts:		vector[DummyGoods]	
	--self.giftEx:		DummyGoods	
end

function i3k_sbean.UpgradeLevelGift:clone()
	return clone(self)
end

function i3k_sbean.UpgradeLevelGift:decode(is)
	self.level = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
	self.giftEx = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.UpgradeLevelGift:encode(os)
	os:pushNumber(self.level)
	os:pushList(self.gifts)
	os:push(self.giftEx)
end


i3k_sbean.UpgradeGift = i3k_class("UpgradeGift")
function i3k_sbean.UpgradeGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.limitedTime:		int32	
	--self.levelGifts:		vector[UpgradeLevelGift]	
end

function i3k_sbean.UpgradeGift:clone()
	return clone(self)
end

function i3k_sbean.UpgradeGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.limitedTime = is:popNumber()
	self.levelGifts = is:popList(i3k_sbean.UpgradeLevelGift)
end

function i3k_sbean.UpgradeGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.limitedTime)
	os:pushList(self.levelGifts)
end


i3k_sbean.RoleUpgradeGiftCfg = i3k_class("RoleUpgradeGiftCfg")
function i3k_sbean.RoleUpgradeGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.limitedTime:		int32	
	--self.levelGifts:		vector[UpgradeLevelGift]	
end

function i3k_sbean.RoleUpgradeGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleUpgradeGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.limitedTime = is:popNumber()
	self.levelGifts = is:popList(i3k_sbean.UpgradeLevelGift)
end

function i3k_sbean.RoleUpgradeGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.limitedTime)
	os:pushList(self.levelGifts)
end


i3k_sbean.RoleUpgradeGiftInfo = i3k_class("RoleUpgradeGiftInfo")
function i3k_sbean.RoleUpgradeGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleUpgradeGiftCfg	
	--self.log:		DBRoleUpgradeGiftLog	
end

function i3k_sbean.RoleUpgradeGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleUpgradeGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleUpgradeGiftCfg)
	self.log = is:pop(i3k_sbean.DBRoleUpgradeGiftLog)
end

function i3k_sbean.RoleUpgradeGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.FundDayReturn = i3k_class("FundDayReturn")
function i3k_sbean.FundDayReturn:ctor()
	--self.daySeq:		int32	
	--self.fundReturn:		DummyGoods	
end

function i3k_sbean.FundDayReturn:clone()
	return clone(self)
end

function i3k_sbean.FundDayReturn:decode(is)
	self.daySeq = is:popNumber()
	self.fundReturn = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.FundDayReturn:encode(os)
	os:pushNumber(self.daySeq)
	os:push(self.fundReturn)
end


i3k_sbean.InvestmentFund = i3k_class("InvestmentFund")
function i3k_sbean.InvestmentFund:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.price:		int32	
	--self.buyEndTime:		int32	
	--self.returns:		vector[FundDayReturn]	
	--self.levelNeed:		int32	
	--self.vipLevelNeed:		int32	
end

function i3k_sbean.InvestmentFund:clone()
	return clone(self)
end

function i3k_sbean.InvestmentFund:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.price = is:popNumber()
	self.buyEndTime = is:popNumber()
	self.returns = is:popList(i3k_sbean.FundDayReturn)
	self.levelNeed = is:popNumber()
	self.vipLevelNeed = is:popNumber()
end

function i3k_sbean.InvestmentFund:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.price)
	os:pushNumber(self.buyEndTime)
	os:pushList(self.returns)
	os:pushNumber(self.levelNeed)
	os:pushNumber(self.vipLevelNeed)
end


i3k_sbean.RoleInvestmentFundCfg = i3k_class("RoleInvestmentFundCfg")
function i3k_sbean.RoleInvestmentFundCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.price:		int32	
	--self.buyEndTime:		int32	
	--self.returns:		vector[FundDayReturn]	
	--self.levelNeed:		int32	
	--self.vipLevelNeed:		int32	
end

function i3k_sbean.RoleInvestmentFundCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleInvestmentFundCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.price = is:popNumber()
	self.buyEndTime = is:popNumber()
	self.returns = is:popList(i3k_sbean.FundDayReturn)
	self.levelNeed = is:popNumber()
	self.vipLevelNeed = is:popNumber()
end

function i3k_sbean.RoleInvestmentFundCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.price)
	os:pushNumber(self.buyEndTime)
	os:pushList(self.returns)
	os:pushNumber(self.levelNeed)
	os:pushNumber(self.vipLevelNeed)
end


i3k_sbean.RoleInvestmentFundInfo = i3k_class("RoleInvestmentFundInfo")
function i3k_sbean.RoleInvestmentFundInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleInvestmentFundCfg	
	--self.log:		DBRoleInvestmentFundLog	
end

function i3k_sbean.RoleInvestmentFundInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleInvestmentFundInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleInvestmentFundCfg)
	self.log = is:pop(i3k_sbean.DBRoleInvestmentFundLog)
end

function i3k_sbean.RoleInvestmentFundInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.FundLevelReturn = i3k_class("FundLevelReturn")
function i3k_sbean.FundLevelReturn:ctor()
	--self.levelReq:		int32	
	--self.fundReturn:		DummyGoods	
end

function i3k_sbean.FundLevelReturn:clone()
	return clone(self)
end

function i3k_sbean.FundLevelReturn:decode(is)
	self.levelReq = is:popNumber()
	self.fundReturn = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.FundLevelReturn:encode(os)
	os:pushNumber(self.levelReq)
	os:push(self.fundReturn)
end


i3k_sbean.GrowthFund = i3k_class("GrowthFund")
function i3k_sbean.GrowthFund:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.price:		int32	
	--self.buyEndTime:		int32	
	--self.returns:		vector[FundLevelReturn]	
	--self.levelNeed:		int32	
	--self.vipLevelNeed:		int32	
end

function i3k_sbean.GrowthFund:clone()
	return clone(self)
end

function i3k_sbean.GrowthFund:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.price = is:popNumber()
	self.buyEndTime = is:popNumber()
	self.returns = is:popList(i3k_sbean.FundLevelReturn)
	self.levelNeed = is:popNumber()
	self.vipLevelNeed = is:popNumber()
end

function i3k_sbean.GrowthFund:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.price)
	os:pushNumber(self.buyEndTime)
	os:pushList(self.returns)
	os:pushNumber(self.levelNeed)
	os:pushNumber(self.vipLevelNeed)
end


i3k_sbean.RoleGrowthFundCfg = i3k_class("RoleGrowthFundCfg")
function i3k_sbean.RoleGrowthFundCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.price:		int32	
	--self.buyEndTime:		int32	
	--self.returns:		vector[FundLevelReturn]	
	--self.levelNeed:		int32	
	--self.vipLevelNeed:		int32	
end

function i3k_sbean.RoleGrowthFundCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleGrowthFundCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.price = is:popNumber()
	self.buyEndTime = is:popNumber()
	self.returns = is:popList(i3k_sbean.FundLevelReturn)
	self.levelNeed = is:popNumber()
	self.vipLevelNeed = is:popNumber()
end

function i3k_sbean.RoleGrowthFundCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.price)
	os:pushNumber(self.buyEndTime)
	os:pushList(self.returns)
	os:pushNumber(self.levelNeed)
	os:pushNumber(self.vipLevelNeed)
end


i3k_sbean.RoleGrowthFundInfo = i3k_class("RoleGrowthFundInfo")
function i3k_sbean.RoleGrowthFundInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleGrowthFundCfg	
	--self.log:		DBRoleGrowthFundLog	
end

function i3k_sbean.RoleGrowthFundInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleGrowthFundInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleGrowthFundCfg)
	self.log = is:pop(i3k_sbean.DBRoleGrowthFundLog)
end

function i3k_sbean.RoleGrowthFundInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.FundReturn = i3k_class("FundReturn")
function i3k_sbean.FundReturn:ctor()
	--self.seq:		int32	
	--self.fundReturn:		DummyGoods	
end

function i3k_sbean.FundReturn:clone()
	return clone(self)
end

function i3k_sbean.FundReturn:decode(is)
	self.seq = is:popNumber()
	self.fundReturn = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.FundReturn:encode(os)
	os:pushNumber(self.seq)
	os:push(self.fundReturn)
end


i3k_sbean.CycleFund = i3k_class("CycleFund")
function i3k_sbean.CycleFund:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.price:		int32	
	--self.returns:		vector[FundReturn]	
	--self.levelNeed:		int32	
	--self.vipLevelNeed:		int32	
	--self.cardNeed:		int32	
end

function i3k_sbean.CycleFund:clone()
	return clone(self)
end

function i3k_sbean.CycleFund:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.price = is:popNumber()
	self.returns = is:popList(i3k_sbean.FundReturn)
	self.levelNeed = is:popNumber()
	self.vipLevelNeed = is:popNumber()
	self.cardNeed = is:popNumber()
end

function i3k_sbean.CycleFund:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.price)
	os:pushList(self.returns)
	os:pushNumber(self.levelNeed)
	os:pushNumber(self.vipLevelNeed)
	os:pushNumber(self.cardNeed)
end


i3k_sbean.RoleCycleFundCfg = i3k_class("RoleCycleFundCfg")
function i3k_sbean.RoleCycleFundCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.price:		int32	
	--self.returns:		vector[FundReturn]	
	--self.levelNeed:		int32	
	--self.vipLevelNeed:		int32	
	--self.cardNeed:		int32	
end

function i3k_sbean.RoleCycleFundCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleCycleFundCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.price = is:popNumber()
	self.returns = is:popList(i3k_sbean.FundReturn)
	self.levelNeed = is:popNumber()
	self.vipLevelNeed = is:popNumber()
	self.cardNeed = is:popNumber()
end

function i3k_sbean.RoleCycleFundCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.price)
	os:pushList(self.returns)
	os:pushNumber(self.levelNeed)
	os:pushNumber(self.vipLevelNeed)
	os:pushNumber(self.cardNeed)
end


i3k_sbean.RoleCycleFundInfo = i3k_class("RoleCycleFundInfo")
function i3k_sbean.RoleCycleFundInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleCycleFundCfg	
	--self.log:		DBRoleCycleFundLog	
end

function i3k_sbean.RoleCycleFundInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleCycleFundInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleCycleFundCfg)
	self.log = is:pop(i3k_sbean.DBRoleCycleFundLog)
end

function i3k_sbean.RoleCycleFundInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.DropRatio = i3k_class("DropRatio")
function i3k_sbean.DropRatio:ctor()
	--self.exp:		float	
	--self.fixedDrop:		int32	
	--self.randomDrop:		int32	
end

function i3k_sbean.DropRatio:clone()
	return clone(self)
end

function i3k_sbean.DropRatio:decode(is)
	self.exp = is:popNumber()
	self.fixedDrop = is:popNumber()
	self.randomDrop = is:popNumber()
end

function i3k_sbean.DropRatio:encode(os)
	os:pushNumber(self.exp)
	os:pushNumber(self.fixedDrop)
	os:pushNumber(self.randomDrop)
end


i3k_sbean.RewardRatio = i3k_class("RewardRatio")
function i3k_sbean.RewardRatio:ctor()
	--self.exp:		float	
	--self.fixedDrop:		int32	
end

function i3k_sbean.RewardRatio:clone()
	return clone(self)
end

function i3k_sbean.RewardRatio:decode(is)
	self.exp = is:popNumber()
	self.fixedDrop = is:popNumber()
end

function i3k_sbean.RewardRatio:encode(os)
	os:pushNumber(self.exp)
	os:pushNumber(self.fixedDrop)
end


i3k_sbean.MapcopyDropRatio = i3k_class("MapcopyDropRatio")
function i3k_sbean.MapcopyDropRatio:ctor()
	--self.mapId:		int32	
	--self.drop:		DropRatio	
	--self.reward:		RewardRatio	
end

function i3k_sbean.MapcopyDropRatio:clone()
	return clone(self)
end

function i3k_sbean.MapcopyDropRatio:decode(is)
	self.mapId = is:popNumber()
	self.drop = is:pop(i3k_sbean.DropRatio)
	self.reward = is:pop(i3k_sbean.RewardRatio)
end

function i3k_sbean.MapcopyDropRatio:encode(os)
	os:pushNumber(self.mapId)
	os:push(self.drop)
	os:push(self.reward)
end


i3k_sbean.MonsterDropRatio = i3k_class("MonsterDropRatio")
function i3k_sbean.MonsterDropRatio:ctor()
	--self.monsterId:		int32	
	--self.ratio:		DropRatio	
end

function i3k_sbean.MonsterDropRatio:clone()
	return clone(self)
end

function i3k_sbean.MonsterDropRatio:decode(is)
	self.monsterId = is:popNumber()
	self.ratio = is:pop(i3k_sbean.DropRatio)
end

function i3k_sbean.MonsterDropRatio:encode(os)
	os:pushNumber(self.monsterId)
	os:push(self.ratio)
end


i3k_sbean.DoubleDrop = i3k_class("DoubleDrop")
function i3k_sbean.DoubleDrop:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.mapcopys:		vector[MapcopyDropRatio]	
	--self.monsters:		vector[MonsterDropRatio]	
end

function i3k_sbean.DoubleDrop:clone()
	return clone(self)
end

function i3k_sbean.DoubleDrop:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.mapcopys = is:popList(i3k_sbean.MapcopyDropRatio)
	self.monsters = is:popList(i3k_sbean.MonsterDropRatio)
end

function i3k_sbean.DoubleDrop:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.mapcopys)
	os:pushList(self.monsters)
end


i3k_sbean.DoubleDropInfo = i3k_class("DoubleDropInfo")
function i3k_sbean.DoubleDropInfo:ctor()
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
end

function i3k_sbean.DoubleDropInfo:clone()
	return clone(self)
end

function i3k_sbean.DoubleDropInfo:decode(is)
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
end

function i3k_sbean.DoubleDropInfo:encode(os)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
end


i3k_sbean.DoubleDropCfg = i3k_class("DoubleDropCfg")
function i3k_sbean.DoubleDropCfg:ctor()
	--self.time:		TimeSpan	
	--self.mapcopys:		map[int32, DropRatio]	
	--self.monsters:		map[int32, DropRatio]	
end

function i3k_sbean.DoubleDropCfg:clone()
	return clone(self)
end

function i3k_sbean.DoubleDropCfg:decode(is)
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.mapcopys = is:popNumberMap(i3k_sbean.DropRatio)
	self.monsters = is:popNumberMap(i3k_sbean.DropRatio)
end

function i3k_sbean.DoubleDropCfg:encode(os)
	os:push(self.time)
	os:pushNumberMap(self.mapcopys)
	os:pushNumberMap(self.monsters)
end


i3k_sbean.ExtraDropTbl = i3k_class("ExtraDropTbl")
function i3k_sbean.ExtraDropTbl:ctor()
	--self.drops:		vector[DropEntry]	
end

function i3k_sbean.ExtraDropTbl:clone()
	return clone(self)
end

function i3k_sbean.ExtraDropTbl:decode(is)
	self.drops = is:popList(i3k_sbean.DropEntry)
end

function i3k_sbean.ExtraDropTbl:encode(os)
	os:pushList(self.drops)
end


i3k_sbean.MapcopyExtraDrop = i3k_class("MapcopyExtraDrop")
function i3k_sbean.MapcopyExtraDrop:ctor()
	--self.mapId:		int32	
	--self.drop:		ExtraDropTbl	
end

function i3k_sbean.MapcopyExtraDrop:clone()
	return clone(self)
end

function i3k_sbean.MapcopyExtraDrop:decode(is)
	self.mapId = is:popNumber()
	self.drop = is:pop(i3k_sbean.ExtraDropTbl)
end

function i3k_sbean.MapcopyExtraDrop:encode(os)
	os:pushNumber(self.mapId)
	os:push(self.drop)
end


i3k_sbean.MonsterExtraDrop = i3k_class("MonsterExtraDrop")
function i3k_sbean.MonsterExtraDrop:ctor()
	--self.monsterId:		int32	
	--self.drop:		ExtraDropTbl	
end

function i3k_sbean.MonsterExtraDrop:clone()
	return clone(self)
end

function i3k_sbean.MonsterExtraDrop:decode(is)
	self.monsterId = is:popNumber()
	self.drop = is:pop(i3k_sbean.ExtraDropTbl)
end

function i3k_sbean.MonsterExtraDrop:encode(os)
	os:pushNumber(self.monsterId)
	os:push(self.drop)
end


i3k_sbean.ExtraDrop = i3k_class("ExtraDrop")
function i3k_sbean.ExtraDrop:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.mapcopys:		vector[MapcopyExtraDrop]	
	--self.monsters:		vector[MonsterExtraDrop]	
end

function i3k_sbean.ExtraDrop:clone()
	return clone(self)
end

function i3k_sbean.ExtraDrop:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.mapcopys = is:popList(i3k_sbean.MapcopyExtraDrop)
	self.monsters = is:popList(i3k_sbean.MonsterExtraDrop)
end

function i3k_sbean.ExtraDrop:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.mapcopys)
	os:pushList(self.monsters)
end


i3k_sbean.ExtraDropInfo = i3k_class("ExtraDropInfo")
function i3k_sbean.ExtraDropInfo:ctor()
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.drops:		vector[int32]	
end

function i3k_sbean.ExtraDropInfo:clone()
	return clone(self)
end

function i3k_sbean.ExtraDropInfo:decode(is)
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.drops = is:popNumberList()
end

function i3k_sbean.ExtraDropInfo:encode(os)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumberList(self.drops)
end


i3k_sbean.ExtraDropCfg = i3k_class("ExtraDropCfg")
function i3k_sbean.ExtraDropCfg:ctor()
	--self.time:		TimeSpan	
	--self.mapcopys:		map[int32, ExtraDropTbl]	
	--self.monsters:		map[int32, ExtraDropTbl]	
end

function i3k_sbean.ExtraDropCfg:clone()
	return clone(self)
end

function i3k_sbean.ExtraDropCfg:decode(is)
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.mapcopys = is:popNumberMap(i3k_sbean.ExtraDropTbl)
	self.monsters = is:popNumberMap(i3k_sbean.ExtraDropTbl)
end

function i3k_sbean.ExtraDropCfg:encode(os)
	os:push(self.time)
	os:pushNumberMap(self.mapcopys)
	os:pushNumberMap(self.monsters)
end


i3k_sbean.ExchangeItemGift = i3k_class("ExchangeItemGift")
function i3k_sbean.ExchangeItemGift:ctor()
	--self.seq:		int32	
	--self.maxExchange:		int32	
	--self.gift:		DummyGoods	
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.ExchangeItemGift:clone()
	return clone(self)
end

function i3k_sbean.ExchangeItemGift:decode(is)
	self.seq = is:popNumber()
	self.maxExchange = is:popNumber()
	self.gift = is:pop(i3k_sbean.DummyGoods)
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.ExchangeItemGift:encode(os)
	os:pushNumber(self.seq)
	os:pushNumber(self.maxExchange)
	os:push(self.gift)
	os:pushList(self.items)
end


i3k_sbean.ExchangeGift = i3k_class("ExchangeGift")
function i3k_sbean.ExchangeGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.itemGifts:		vector[ExchangeItemGift]	
end

function i3k_sbean.ExchangeGift:clone()
	return clone(self)
end

function i3k_sbean.ExchangeGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.itemGifts = is:popList(i3k_sbean.ExchangeItemGift)
end

function i3k_sbean.ExchangeGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushList(self.itemGifts)
end


i3k_sbean.RoleExchangeGiftCfg = i3k_class("RoleExchangeGiftCfg")
function i3k_sbean.RoleExchangeGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.itemGifts:		vector[ExchangeItemGift]	
end

function i3k_sbean.RoleExchangeGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleExchangeGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.itemGifts = is:popList(i3k_sbean.ExchangeItemGift)
end

function i3k_sbean.RoleExchangeGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.itemGifts)
end


i3k_sbean.ExchangeGiftInfo = i3k_class("ExchangeGiftInfo")
function i3k_sbean.ExchangeGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleExchangeGiftCfg	
	--self.log:		DBRoleExchangeGiftLog	
end

function i3k_sbean.ExchangeGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.ExchangeGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleExchangeGiftCfg)
	self.log = is:pop(i3k_sbean.DBRoleExchangeGiftLog)
end

function i3k_sbean.ExchangeGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.LoginDayGift = i3k_class("LoginDayGift")
function i3k_sbean.LoginDayGift:ctor()
	--self.dayReq:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.LoginDayGift:clone()
	return clone(self)
end

function i3k_sbean.LoginDayGift:decode(is)
	self.dayReq = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.LoginDayGift:encode(os)
	os:pushNumber(self.dayReq)
	os:pushList(self.gifts)
end


i3k_sbean.LoginGift = i3k_class("LoginGift")
function i3k_sbean.LoginGift:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.dayGifts:		vector[LoginDayGift]	
end

function i3k_sbean.LoginGift:clone()
	return clone(self)
end

function i3k_sbean.LoginGift:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.dayGifts = is:popList(i3k_sbean.LoginDayGift)
end

function i3k_sbean.LoginGift:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushList(self.dayGifts)
end


i3k_sbean.RoleLoginGiftCfg = i3k_class("RoleLoginGiftCfg")
function i3k_sbean.RoleLoginGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.dayGifts:		vector[LoginDayGift]	
end

function i3k_sbean.RoleLoginGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleLoginGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.dayGifts = is:popList(i3k_sbean.LoginDayGift)
end

function i3k_sbean.RoleLoginGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.dayGifts)
end


i3k_sbean.RoleLoginGiftInfo = i3k_class("RoleLoginGiftInfo")
function i3k_sbean.RoleLoginGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleLoginGiftCfg	
	--self.log:		DBRoleLoginGiftLog	
end

function i3k_sbean.RoleLoginGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleLoginGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleLoginGiftCfg)
	self.log = is:pop(i3k_sbean.DBRoleLoginGiftLog)
end

function i3k_sbean.RoleLoginGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.LuckyGift = i3k_class("LuckyGift")
function i3k_sbean.LuckyGift:ctor()
	--self.dayReq:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.LuckyGift:clone()
	return clone(self)
end

function i3k_sbean.LuckyGift:decode(is)
	self.dayReq = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.LuckyGift:encode(os)
	os:pushNumber(self.dayReq)
	os:pushList(self.gifts)
end


i3k_sbean.LuckyGiftCfg = i3k_class("LuckyGiftCfg")
function i3k_sbean.LuckyGiftCfg:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.relativetime:		int32	
	--self.vipLvlReq:		int32	
	--self.luckyGifts:		vector[LuckyGift]	
end

function i3k_sbean.LuckyGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.LuckyGiftCfg:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.relativetime = is:popNumber()
	self.vipLvlReq = is:popNumber()
	self.luckyGifts = is:popList(i3k_sbean.LuckyGift)
end

function i3k_sbean.LuckyGiftCfg:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.relativetime)
	os:pushNumber(self.vipLvlReq)
	os:pushList(self.luckyGifts)
end


i3k_sbean.RoleLuckyGiftCfg = i3k_class("RoleLuckyGiftCfg")
function i3k_sbean.RoleLuckyGiftCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.vipLvlReq:		int32	
	--self.luckyGifts:		vector[LuckyGift]	
end

function i3k_sbean.RoleLuckyGiftCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleLuckyGiftCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.vipLvlReq = is:popNumber()
	self.luckyGifts = is:popList(i3k_sbean.LuckyGift)
end

function i3k_sbean.RoleLuckyGiftCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.vipLvlReq)
	os:pushList(self.luckyGifts)
end


i3k_sbean.RoleLuckyGiftInfo = i3k_class("RoleLuckyGiftInfo")
function i3k_sbean.RoleLuckyGiftInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleLuckyGiftCfg	
	--self.log:		DBRoleLuckyGiftLog	
end

function i3k_sbean.RoleLuckyGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleLuckyGiftInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleLuckyGiftCfg)
	self.log = is:pop(i3k_sbean.DBRoleLuckyGiftLog)
end

function i3k_sbean.RoleLuckyGiftInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.Pack = i3k_class("Pack")
function i3k_sbean.Pack:ctor()
	--self.title:		string	
	--self.content:		string	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.Pack:clone()
	return clone(self)
end

function i3k_sbean.Pack:decode(is)
	self.title = is:popString()
	self.content = is:popString()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.Pack:encode(os)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.gifts)
end


i3k_sbean.SpecialPack = i3k_class("SpecialPack")
function i3k_sbean.SpecialPack:ctor()
	--self.shorcode:		string	
	--self.maxUse:		int32	
	--self.channel:		set[string]	
	--self.time:		TimeSpan	
	--self.pack:		Pack	
	--self.levelNeed:		int32	
	--self.vipLevelNeed:		int32	
end

function i3k_sbean.SpecialPack:clone()
	return clone(self)
end

function i3k_sbean.SpecialPack:decode(is)
	self.shorcode = is:popString()
	self.maxUse = is:popNumber()
	self.channel = is:popStringSet()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.pack = is:pop(i3k_sbean.Pack)
	self.levelNeed = is:popNumber()
	self.vipLevelNeed = is:popNumber()
end

function i3k_sbean.SpecialPack:encode(os)
	os:pushString(self.shorcode)
	os:pushNumber(self.maxUse)
	os:pushStringSet(self.channel)
	os:push(self.time)
	os:push(self.pack)
	os:pushNumber(self.levelNeed)
	os:pushNumber(self.vipLevelNeed)
end


i3k_sbean.SequencePack = i3k_class("SequencePack")
function i3k_sbean.SequencePack:ctor()
	--self.seq:		int32	
	--self.time:		TimeSpan	
	--self.pack:		Pack	
end

function i3k_sbean.SequencePack:clone()
	return clone(self)
end

function i3k_sbean.SequencePack:decode(is)
	self.seq = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.pack = is:pop(i3k_sbean.Pack)
end

function i3k_sbean.SequencePack:encode(os)
	os:pushNumber(self.seq)
	os:push(self.time)
	os:push(self.pack)
end


i3k_sbean.BatchPacks = i3k_class("BatchPacks")
function i3k_sbean.BatchPacks:ctor()
	--self.batch:		int32	
	--self.maxUse:		int32	
	--self.channel:		set[string]	
	--self.packs:		vector[SequencePack]	
	--self.levelNeed:		int32	
	--self.vipLevelNeed:		int32	
end

function i3k_sbean.BatchPacks:clone()
	return clone(self)
end

function i3k_sbean.BatchPacks:decode(is)
	self.batch = is:popNumber()
	self.maxUse = is:popNumber()
	self.channel = is:popStringSet()
	self.packs = is:popList(i3k_sbean.SequencePack)
	self.levelNeed = is:popNumber()
	self.vipLevelNeed = is:popNumber()
end

function i3k_sbean.BatchPacks:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.maxUse)
	os:pushStringSet(self.channel)
	os:pushList(self.packs)
	os:pushNumber(self.levelNeed)
	os:pushNumber(self.vipLevelNeed)
end


i3k_sbean.GiftPackage = i3k_class("GiftPackage")
function i3k_sbean.GiftPackage:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.specialPacks:		vector[SpecialPack]	
	--self.giftPacks:		vector[BatchPacks]	
end

function i3k_sbean.GiftPackage:clone()
	return clone(self)
end

function i3k_sbean.GiftPackage:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.specialPacks = is:popList(i3k_sbean.SpecialPack)
	self.giftPacks = is:popList(i3k_sbean.BatchPacks)
end

function i3k_sbean.GiftPackage:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushList(self.specialPacks)
	os:pushList(self.giftPacks)
end


i3k_sbean.GiftPack = i3k_class("GiftPack")
function i3k_sbean.GiftPack:ctor()
	--self.maxUse:		int32	
	--self.channel:		set[string]	
	--self.time:		TimeSpan	
	--self.pack:		Pack	
	--self.levelNeed:		int32	
	--self.vipLevelNeed:		int32	
end

function i3k_sbean.GiftPack:clone()
	return clone(self)
end

function i3k_sbean.GiftPack:decode(is)
	self.maxUse = is:popNumber()
	self.channel = is:popStringSet()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.pack = is:pop(i3k_sbean.Pack)
	self.levelNeed = is:popNumber()
	self.vipLevelNeed = is:popNumber()
end

function i3k_sbean.GiftPack:encode(os)
	os:pushNumber(self.maxUse)
	os:pushStringSet(self.channel)
	os:push(self.time)
	os:push(self.pack)
	os:pushNumber(self.levelNeed)
	os:pushNumber(self.vipLevelNeed)
end


i3k_sbean.GiftPackageInfo = i3k_class("GiftPackageInfo")
function i3k_sbean.GiftPackageInfo:ctor()
	--self.effectiveTime:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
end

function i3k_sbean.GiftPackageInfo:clone()
	return clone(self)
end

function i3k_sbean.GiftPackageInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
end

function i3k_sbean.GiftPackageInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
end


i3k_sbean.UpgradeLevelPurchase = i3k_class("UpgradeLevelPurchase")
function i3k_sbean.UpgradeLevelPurchase:ctor()
	--self.level:		int32	
	--self.limitedTime:		int32	
	--self.goods:		vector[DummyGoods]	
	--self.price:		int32	
	--self.icon:		int32	
end

function i3k_sbean.UpgradeLevelPurchase:clone()
	return clone(self)
end

function i3k_sbean.UpgradeLevelPurchase:decode(is)
	self.level = is:popNumber()
	self.limitedTime = is:popNumber()
	self.goods = is:popList(i3k_sbean.DummyGoods)
	self.price = is:popNumber()
	self.icon = is:popNumber()
end

function i3k_sbean.UpgradeLevelPurchase:encode(os)
	os:pushNumber(self.level)
	os:pushNumber(self.limitedTime)
	os:pushList(self.goods)
	os:pushNumber(self.price)
	os:pushNumber(self.icon)
end


i3k_sbean.UpgradePurchase = i3k_class("UpgradePurchase")
function i3k_sbean.UpgradePurchase:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.levelPurchases:		UpgradeLevelPurchase	
end

function i3k_sbean.UpgradePurchase:clone()
	return clone(self)
end

function i3k_sbean.UpgradePurchase:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.levelPurchases = is:pop(i3k_sbean.UpgradeLevelPurchase)
end

function i3k_sbean.UpgradePurchase:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:push(self.levelPurchases)
end


i3k_sbean.RoleUpgradePurchaseCfg = i3k_class("RoleUpgradePurchaseCfg")
function i3k_sbean.RoleUpgradePurchaseCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.levelPurchases:		UpgradeLevelPurchase	
end

function i3k_sbean.RoleUpgradePurchaseCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleUpgradePurchaseCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.levelPurchases = is:pop(i3k_sbean.UpgradeLevelPurchase)
end

function i3k_sbean.RoleUpgradePurchaseCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.levelPurchases)
end


i3k_sbean.RoleUpgradePurchaseInfo = i3k_class("RoleUpgradePurchaseInfo")
function i3k_sbean.RoleUpgradePurchaseInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleUpgradePurchaseCfg	
	--self.log:		DBRoleUpgradePurchaseLog	
	--self.endTime:		int32	
end

function i3k_sbean.RoleUpgradePurchaseInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleUpgradePurchaseInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleUpgradePurchaseCfg)
	self.log = is:pop(i3k_sbean.DBRoleUpgradePurchaseLog)
	self.endTime = is:popNumber()
end

function i3k_sbean.RoleUpgradePurchaseInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
	os:pushNumber(self.endTime)
end


i3k_sbean.DirectLevelPurchase = i3k_class("DirectLevelPurchase")
function i3k_sbean.DirectLevelPurchase:ctor()
	--self.payLevel:		int32	
	--self.cardReq:		int32	
	--self.levelReq:		int32	
	--self.vipReq:		int32	
	--self.dayBuyTimes:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.DirectLevelPurchase:clone()
	return clone(self)
end

function i3k_sbean.DirectLevelPurchase:decode(is)
	self.payLevel = is:popNumber()
	self.cardReq = is:popNumber()
	self.levelReq = is:popNumber()
	self.vipReq = is:popNumber()
	self.dayBuyTimes = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.DirectLevelPurchase:encode(os)
	os:pushNumber(self.payLevel)
	os:pushNumber(self.cardReq)
	os:pushNumber(self.levelReq)
	os:pushNumber(self.vipReq)
	os:pushNumber(self.dayBuyTimes)
	os:pushList(self.gifts)
end


i3k_sbean.DirectPurchase = i3k_class("DirectPurchase")
function i3k_sbean.DirectPurchase:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.showtype:		int32	
	--self.levelPurchases:		vector[DirectLevelPurchase]	
end

function i3k_sbean.DirectPurchase:clone()
	return clone(self)
end

function i3k_sbean.DirectPurchase:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.showtype = is:popNumber()
	self.levelPurchases = is:popList(i3k_sbean.DirectLevelPurchase)
end

function i3k_sbean.DirectPurchase:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.showtype)
	os:pushList(self.levelPurchases)
end


i3k_sbean.RoleDirectPurchaseCfg = i3k_class("RoleDirectPurchaseCfg")
function i3k_sbean.RoleDirectPurchaseCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.showtype:		int32	
	--self.levelPurchases:		vector[DirectLevelPurchase]	
end

function i3k_sbean.RoleDirectPurchaseCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleDirectPurchaseCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.showtype = is:popNumber()
	self.levelPurchases = is:popList(i3k_sbean.DirectLevelPurchase)
end

function i3k_sbean.RoleDirectPurchaseCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.showtype)
	os:pushList(self.levelPurchases)
end


i3k_sbean.DirectPayInfo = i3k_class("DirectPayInfo")
function i3k_sbean.DirectPayInfo:ctor()
	--self.id:		int32	
	--self.payLevels:		map[int32, PayLevelInfo]	
	--self.leftRewardTimes:		map[int32, int32]	
end

function i3k_sbean.DirectPayInfo:clone()
	return clone(self)
end

function i3k_sbean.DirectPayInfo:decode(is)
	self.id = is:popNumber()
	self.payLevels = is:popNumberMap(i3k_sbean.PayLevelInfo)
	self.leftRewardTimes = is:popNumberNumberMap()
end

function i3k_sbean.DirectPayInfo:encode(os)
	os:pushNumber(self.id)
	os:pushNumberMap(self.payLevels)
	os:pushNumberNumberMap(self.leftRewardTimes)
end


i3k_sbean.RoleDirectPurchaseInfo = i3k_class("RoleDirectPurchaseInfo")
function i3k_sbean.RoleDirectPurchaseInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleDirectPurchaseCfg	
	--self.log:		DBRoleDirectPurchaseLog	
	--self.info:		DirectPayInfo	
end

function i3k_sbean.RoleDirectPurchaseInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleDirectPurchaseInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleDirectPurchaseCfg)
	self.log = is:pop(i3k_sbean.DBRoleDirectPurchaseLog)
	self.info = is:pop(i3k_sbean.DirectPayInfo)
end

function i3k_sbean.RoleDirectPurchaseInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
	os:push(self.info)
end


i3k_sbean.OneArmBanditDayLeft = i3k_class("OneArmBanditDayLeft")
function i3k_sbean.OneArmBanditDayLeft:ctor()
	--self.daySeq:		int32	
	--self.left:		float	
end

function i3k_sbean.OneArmBanditDayLeft:clone()
	return clone(self)
end

function i3k_sbean.OneArmBanditDayLeft:decode(is)
	self.daySeq = is:popNumber()
	self.left = is:popNumber()
end

function i3k_sbean.OneArmBanditDayLeft:encode(os)
	os:pushNumber(self.daySeq)
	os:pushNumber(self.left)
end


i3k_sbean.ProbabilityEntity = i3k_class("ProbabilityEntity")
function i3k_sbean.ProbabilityEntity:ctor()
	--self.limit:		int32	
	--self.probability:		float	
end

function i3k_sbean.ProbabilityEntity:clone()
	return clone(self)
end

function i3k_sbean.ProbabilityEntity:decode(is)
	self.limit = is:popNumber()
	self.probability = is:popNumber()
end

function i3k_sbean.ProbabilityEntity:encode(os)
	os:pushNumber(self.limit)
	os:pushNumber(self.probability)
end


i3k_sbean.OneArmBandit = i3k_class("OneArmBandit")
function i3k_sbean.OneArmBandit:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.levelTimesReq:		int32	
	--self.payTimesReq:		int32	
	--self.probability:		vector[ProbabilityEntity]	
	--self.dayLeft:		vector[OneArmBanditDayLeft]	
end

function i3k_sbean.OneArmBandit:clone()
	return clone(self)
end

function i3k_sbean.OneArmBandit:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.levelTimesReq = is:popNumber()
	self.payTimesReq = is:popNumber()
	self.probability = is:popList(i3k_sbean.ProbabilityEntity)
	self.dayLeft = is:popList(i3k_sbean.OneArmBanditDayLeft)
end

function i3k_sbean.OneArmBandit:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.levelTimesReq)
	os:pushNumber(self.payTimesReq)
	os:pushList(self.probability)
	os:pushList(self.dayLeft)
end


i3k_sbean.RoleOneArmBanditCfg = i3k_class("RoleOneArmBanditCfg")
function i3k_sbean.RoleOneArmBanditCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.levelTimesReq:		int32	
	--self.payTimesReq:		int32	
	--self.dayLeft:		vector[OneArmBanditDayLeft]	
end

function i3k_sbean.RoleOneArmBanditCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleOneArmBanditCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.levelTimesReq = is:popNumber()
	self.payTimesReq = is:popNumber()
	self.dayLeft = is:popList(i3k_sbean.OneArmBanditDayLeft)
end

function i3k_sbean.RoleOneArmBanditCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.levelTimesReq)
	os:pushNumber(self.payTimesReq)
	os:pushList(self.dayLeft)
end


i3k_sbean.RoleOneArmBanditInfo = i3k_class("RoleOneArmBanditInfo")
function i3k_sbean.RoleOneArmBanditInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleOneArmBanditCfg	
	--self.log:		DBRoleOneArmBanditLog	
end

function i3k_sbean.RoleOneArmBanditInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleOneArmBanditInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleOneArmBanditCfg)
	self.log = is:pop(i3k_sbean.DBRoleOneArmBanditLog)
end

function i3k_sbean.RoleOneArmBanditInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.GoldenEgg = i3k_class("GoldenEgg")
function i3k_sbean.GoldenEgg:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.levelLimit:		int32	
	--self.logLength:		int32	
	--self.selectCfg:		GoldenEggSelectCfg	
	--self.refreshCfg:		GoldenEggRefreshCfg	
	--self.eggs:		vector[EggReward]	
	--self.joinRewardSeq:		int32	
	--self.joinReward:		DummyGoods	
	--self.giftItem:		DummyGoods	
	--self.eggInfos:		vector[EggInfo]	
end

function i3k_sbean.GoldenEgg:clone()
	return clone(self)
end

function i3k_sbean.GoldenEgg:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.levelLimit = is:popNumber()
	self.logLength = is:popNumber()
	self.selectCfg = is:pop(i3k_sbean.GoldenEggSelectCfg)
	self.refreshCfg = is:pop(i3k_sbean.GoldenEggRefreshCfg)
	self.eggs = is:popList(i3k_sbean.EggReward)
	self.joinRewardSeq = is:popNumber()
	self.joinReward = is:pop(i3k_sbean.DummyGoods)
	self.giftItem = is:pop(i3k_sbean.DummyGoods)
	self.eggInfos = is:popList(i3k_sbean.EggInfo)
end

function i3k_sbean.GoldenEgg:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.levelLimit)
	os:pushNumber(self.logLength)
	os:push(self.selectCfg)
	os:push(self.refreshCfg)
	os:pushList(self.eggs)
	os:pushNumber(self.joinRewardSeq)
	os:push(self.joinReward)
	os:push(self.giftItem)
	os:pushList(self.eggInfos)
end


i3k_sbean.GoldenEggSelectCfg = i3k_class("GoldenEggSelectCfg")
function i3k_sbean.GoldenEggSelectCfg:ctor()
	--self.maxSelect:		int32	
	--self.costId:		int32	
	--self.selectPrice:		vector[int32]	
end

function i3k_sbean.GoldenEggSelectCfg:clone()
	return clone(self)
end

function i3k_sbean.GoldenEggSelectCfg:decode(is)
	self.maxSelect = is:popNumber()
	self.costId = is:popNumber()
	self.selectPrice = is:popNumberList()
end

function i3k_sbean.GoldenEggSelectCfg:encode(os)
	os:pushNumber(self.maxSelect)
	os:pushNumber(self.costId)
	os:pushNumberList(self.selectPrice)
end


i3k_sbean.GoldenEggRefreshCfg = i3k_class("GoldenEggRefreshCfg")
function i3k_sbean.GoldenEggRefreshCfg:ctor()
	--self.maxRefresh:		int32	
	--self.refreshPrice:		vector[int32]	
end

function i3k_sbean.GoldenEggRefreshCfg:clone()
	return clone(self)
end

function i3k_sbean.GoldenEggRefreshCfg:decode(is)
	self.maxRefresh = is:popNumber()
	self.refreshPrice = is:popNumberList()
end

function i3k_sbean.GoldenEggRefreshCfg:encode(os)
	os:pushNumber(self.maxRefresh)
	os:pushNumberList(self.refreshPrice)
end


i3k_sbean.EggReward = i3k_class("EggReward")
function i3k_sbean.EggReward:ctor()
	--self.item:		DummyGoods	
	--self.weight:		int32	
	--self.valueable:		int32	
end

function i3k_sbean.EggReward:clone()
	return clone(self)
end

function i3k_sbean.EggReward:decode(is)
	self.item = is:pop(i3k_sbean.DummyGoods)
	self.weight = is:popNumber()
	self.valueable = is:popNumber()
end

function i3k_sbean.EggReward:encode(os)
	os:push(self.item)
	os:pushNumber(self.weight)
	os:pushNumber(self.valueable)
end


i3k_sbean.RoleGoldenEggCfg = i3k_class("RoleGoldenEggCfg")
function i3k_sbean.RoleGoldenEggCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.selectCfg:		GoldenEggSelectCfg	
	--self.refreshCfg:		GoldenEggRefreshCfg	
	--self.joinRewardSeq:		int32	
	--self.joinReward:		DummyGoods	
	--self.giftItem:		DummyGoods	
	--self.infos:		vector[EggInfo]	
end

function i3k_sbean.RoleGoldenEggCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleGoldenEggCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.selectCfg = is:pop(i3k_sbean.GoldenEggSelectCfg)
	self.refreshCfg = is:pop(i3k_sbean.GoldenEggRefreshCfg)
	self.joinRewardSeq = is:popNumber()
	self.joinReward = is:pop(i3k_sbean.DummyGoods)
	self.giftItem = is:pop(i3k_sbean.DummyGoods)
	self.infos = is:popList(i3k_sbean.EggInfo)
end

function i3k_sbean.RoleGoldenEggCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.selectCfg)
	os:push(self.refreshCfg)
	os:pushNumber(self.joinRewardSeq)
	os:push(self.joinReward)
	os:push(self.giftItem)
	os:pushList(self.infos)
end


i3k_sbean.GoldenEggRecord = i3k_class("GoldenEggRecord")
function i3k_sbean.GoldenEggRecord:ctor()
	--self.name:		string	
	--self.id:		int32	
end

function i3k_sbean.GoldenEggRecord:clone()
	return clone(self)
end

function i3k_sbean.GoldenEggRecord:decode(is)
	self.name = is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.GoldenEggRecord:encode(os)
	os:pushString(self.name)
	os:pushNumber(self.id)
end


i3k_sbean.GoldenEggInfo = i3k_class("GoldenEggInfo")
function i3k_sbean.GoldenEggInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleGoldenEggCfg	
	--self.records:		vector[GoldenEggRecord]	
	--self.log:		DBRoleGoldenEggLog	
end

function i3k_sbean.GoldenEggInfo:clone()
	return clone(self)
end

function i3k_sbean.GoldenEggInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleGoldenEggCfg)
	self.records = is:popList(i3k_sbean.GoldenEggRecord)
	self.log = is:pop(i3k_sbean.DBRoleGoldenEggLog)
end

function i3k_sbean.GoldenEggInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:pushList(self.records)
	os:push(self.log)
end


i3k_sbean.PayLevelRank = i3k_class("PayLevelRank")
function i3k_sbean.PayLevelRank:ctor()
	--self.rank:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.PayLevelRank:clone()
	return clone(self)
end

function i3k_sbean.PayLevelRank:decode(is)
	self.rank = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.PayLevelRank:encode(os)
	os:pushNumber(self.rank)
	os:pushList(self.gifts)
end


i3k_sbean.PayRank = i3k_class("PayRank")
function i3k_sbean.PayRank:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.recordEndTime:		int32	
	--self.maxLength:		int32	
	--self.showCount:		int32	
	--self.payReq:		int32	
	--self.levelreq:		int32	
	--self.rankList:		vector[PayLevelRank]	
end

function i3k_sbean.PayRank:clone()
	return clone(self)
end

function i3k_sbean.PayRank:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.recordEndTime = is:popNumber()
	self.maxLength = is:popNumber()
	self.showCount = is:popNumber()
	self.payReq = is:popNumber()
	self.levelreq = is:popNumber()
	self.rankList = is:popList(i3k_sbean.PayLevelRank)
end

function i3k_sbean.PayRank:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.recordEndTime)
	os:pushNumber(self.maxLength)
	os:pushNumber(self.showCount)
	os:pushNumber(self.payReq)
	os:pushNumber(self.levelreq)
	os:pushList(self.rankList)
end


i3k_sbean.RolePayRankCfg = i3k_class("RolePayRankCfg")
function i3k_sbean.RolePayRankCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.recordEndTime:		int32	
	--self.rankList:		vector[PayLevelRank]	
end

function i3k_sbean.RolePayRankCfg:clone()
	return clone(self)
end

function i3k_sbean.RolePayRankCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.recordEndTime = is:popNumber()
	self.rankList = is:popList(i3k_sbean.PayLevelRank)
end

function i3k_sbean.RolePayRankCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.recordEndTime)
	os:pushList(self.rankList)
end


i3k_sbean.RolePayRankInfo = i3k_class("RolePayRankInfo")
function i3k_sbean.RolePayRankInfo:ctor()
	--self.effectiveTime:		int32	
	--self.selfRank:		int32	
	--self.cfg:		RolePayRankCfg	
	--self.log:		DBRolePayRankLog	
	--self.ranks:		vector[RankRole]	
end

function i3k_sbean.RolePayRankInfo:clone()
	return clone(self)
end

function i3k_sbean.RolePayRankInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.selfRank = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RolePayRankCfg)
	self.log = is:pop(i3k_sbean.DBRolePayRankLog)
	self.ranks = is:popList(i3k_sbean.RankRole)
end

function i3k_sbean.RolePayRankInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.selfRank)
	os:push(self.cfg)
	os:push(self.log)
	os:pushList(self.ranks)
end


i3k_sbean.ConsumeLevelRank = i3k_class("ConsumeLevelRank")
function i3k_sbean.ConsumeLevelRank:ctor()
	--self.rank:		int32	
	--self.gifts:		vector[DummyGoods]	
end

function i3k_sbean.ConsumeLevelRank:clone()
	return clone(self)
end

function i3k_sbean.ConsumeLevelRank:decode(is)
	self.rank = is:popNumber()
	self.gifts = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.ConsumeLevelRank:encode(os)
	os:pushNumber(self.rank)
	os:pushList(self.gifts)
end


i3k_sbean.ConsumeRank = i3k_class("ConsumeRank")
function i3k_sbean.ConsumeRank:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.recordEndTime:		int32	
	--self.maxLength:		int32	
	--self.showCount:		int32	
	--self.consumeReq:		int32	
	--self.levelreq:		int32	
	--self.rankList:		vector[ConsumeLevelRank]	
end

function i3k_sbean.ConsumeRank:clone()
	return clone(self)
end

function i3k_sbean.ConsumeRank:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.recordEndTime = is:popNumber()
	self.maxLength = is:popNumber()
	self.showCount = is:popNumber()
	self.consumeReq = is:popNumber()
	self.levelreq = is:popNumber()
	self.rankList = is:popList(i3k_sbean.ConsumeLevelRank)
end

function i3k_sbean.ConsumeRank:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.recordEndTime)
	os:pushNumber(self.maxLength)
	os:pushNumber(self.showCount)
	os:pushNumber(self.consumeReq)
	os:pushNumber(self.levelreq)
	os:pushList(self.rankList)
end


i3k_sbean.RoleConsumeRankCfg = i3k_class("RoleConsumeRankCfg")
function i3k_sbean.RoleConsumeRankCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.recordEndTime:		int32	
	--self.rankList:		vector[ConsumeLevelRank]	
end

function i3k_sbean.RoleConsumeRankCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleConsumeRankCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.recordEndTime = is:popNumber()
	self.rankList = is:popList(i3k_sbean.ConsumeLevelRank)
end

function i3k_sbean.RoleConsumeRankCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.recordEndTime)
	os:pushList(self.rankList)
end


i3k_sbean.RoleConsumeRankInfo = i3k_class("RoleConsumeRankInfo")
function i3k_sbean.RoleConsumeRankInfo:ctor()
	--self.effectiveTime:		int32	
	--self.selfRank:		int32	
	--self.cfg:		RoleConsumeRankCfg	
	--self.log:		DBRoleConsumeRankLog	
	--self.ranks:		vector[RankRole]	
end

function i3k_sbean.RoleConsumeRankInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleConsumeRankInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.selfRank = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleConsumeRankCfg)
	self.log = is:pop(i3k_sbean.DBRoleConsumeRankLog)
	self.ranks = is:popList(i3k_sbean.RankRole)
end

function i3k_sbean.RoleConsumeRankInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.selfRank)
	os:push(self.cfg)
	os:push(self.log)
	os:pushList(self.ranks)
end


i3k_sbean.ShopDiscount = i3k_class("ShopDiscount")
function i3k_sbean.ShopDiscount:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.shops:		map[int32, int32]	
end

function i3k_sbean.ShopDiscount:clone()
	return clone(self)
end

function i3k_sbean.ShopDiscount:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.shops = is:popNumberNumberMap()
end

function i3k_sbean.ShopDiscount:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumberNumberMap(self.shops)
end


i3k_sbean.ActivityInfo = i3k_class("ActivityInfo")
function i3k_sbean.ActivityInfo:ctor()
	--self.type:		int32	
	--self.id:		int32	
	--self.title:		string	
	--self.notice:		int32	
end

function i3k_sbean.ActivityInfo:clone()
	return clone(self)
end

function i3k_sbean.ActivityInfo:decode(is)
	self.type = is:popNumber()
	self.id = is:popNumber()
	self.title = is:popString()
	self.notice = is:popNumber()
end

function i3k_sbean.ActivityInfo:encode(os)
	os:pushNumber(self.type)
	os:pushNumber(self.id)
	os:pushString(self.title)
	os:pushNumber(self.notice)
end


i3k_sbean.UserSysteminfo = i3k_class("UserSysteminfo")
function i3k_sbean.UserSysteminfo:ctor()
	--self.deviceID:		string	
	--self.systemHardware:		string	
	--self.systemSoftware:		string	
	--self.cpuHardware:		string	
	--self.screenWidth:		int32	
	--self.screenHeight:		int32	
	--self.density:		float	
	--self.network:		int32	
	--self.macAddr:		string	
	--self.loginIP:		string	
	--self.locale:		string	
end

function i3k_sbean.UserSysteminfo:clone()
	return clone(self)
end

function i3k_sbean.UserSysteminfo:decode(is)
	self.deviceID = is:popString()
	self.systemHardware = is:popString()
	self.systemSoftware = is:popString()
	self.cpuHardware = is:popString()
	self.screenWidth = is:popNumber()
	self.screenHeight = is:popNumber()
	self.density = is:popNumber()
	self.network = is:popNumber()
	self.macAddr = is:popString()
	self.loginIP = is:popString()
	self.locale = is:popString()
end

function i3k_sbean.UserSysteminfo:encode(os)
	os:pushString(self.deviceID)
	os:pushString(self.systemHardware)
	os:pushString(self.systemSoftware)
	os:pushString(self.cpuHardware)
	os:pushNumber(self.screenWidth)
	os:pushNumber(self.screenHeight)
	os:pushNumber(self.density)
	os:pushNumber(self.network)
	os:pushString(self.macAddr)
	os:pushString(self.loginIP)
	os:pushString(self.locale)
end


i3k_sbean.UserClientinfo = i3k_class("UserClientinfo")
function i3k_sbean.UserClientinfo:ctor()
	--self.gameAppID:		string	
	--self.clientVerPacket:		int32	
	--self.clientVerResource:		int32	
	--self.patchPackets:		set[int32]	
end

function i3k_sbean.UserClientinfo:clone()
	return clone(self)
end

function i3k_sbean.UserClientinfo:decode(is)
	self.gameAppID = is:popString()
	self.clientVerPacket = is:popNumber()
	self.clientVerResource = is:popNumber()
	self.patchPackets = is:popNumberSet()
end

function i3k_sbean.UserClientinfo:encode(os)
	os:pushString(self.gameAppID)
	os:pushNumber(self.clientVerPacket)
	os:pushNumber(self.clientVerResource)
	os:pushNumberSet(self.patchPackets)
end


i3k_sbean.UserLoginParam = i3k_class("UserLoginParam")
function i3k_sbean.UserLoginParam:ctor()
	--self.loginType:		int32	
	--self.loginKey:		string	
	--self.exParam:		string	
end

function i3k_sbean.UserLoginParam:clone()
	return clone(self)
end

function i3k_sbean.UserLoginParam:decode(is)
	self.loginType = is:popNumber()
	self.loginKey = is:popString()
	self.exParam = is:popString()
end

function i3k_sbean.UserLoginParam:encode(os)
	os:pushNumber(self.loginType)
	os:pushString(self.loginKey)
	os:pushString(self.exParam)
end


i3k_sbean.UserLoginInfo = i3k_class("UserLoginInfo")
function i3k_sbean.UserLoginInfo:ctor()
	--self.arg:		UserLoginParam	
	--self.client:		UserClientinfo	
	--self.system:		UserSysteminfo	
end

function i3k_sbean.UserLoginInfo:clone()
	return clone(self)
end

function i3k_sbean.UserLoginInfo:decode(is)
	self.arg = is:pop(i3k_sbean.UserLoginParam)
	self.client = is:pop(i3k_sbean.UserClientinfo)
	self.system = is:pop(i3k_sbean.UserSysteminfo)
end

function i3k_sbean.UserLoginInfo:encode(os)
	os:push(self.arg)
	os:push(self.client)
	os:push(self.system)
end


i3k_sbean.CreateRoleParam = i3k_class("CreateRoleParam")
function i3k_sbean.CreateRoleParam:ctor()
	--self.name:		string	
	--self.gender:		int8	
	--self.face:		int8	
	--self.hair:		int8	
	--self.classType:		int8	
end

function i3k_sbean.CreateRoleParam:clone()
	return clone(self)
end

function i3k_sbean.CreateRoleParam:decode(is)
	self.name = is:popString()
	self.gender = is:popNumber()
	self.face = is:popNumber()
	self.hair = is:popNumber()
	self.classType = is:popNumber()
end

function i3k_sbean.CreateRoleParam:encode(os)
	os:pushString(self.name)
	os:pushNumber(self.gender)
	os:pushNumber(self.face)
	os:pushNumber(self.hair)
	os:pushNumber(self.classType)
end


i3k_sbean.Team = i3k_class("Team")
function i3k_sbean.Team:ctor()
	--self.id:		int32	
	--self.leader:		int32	
	--self.members:		vector[int32]	
end

function i3k_sbean.Team:clone()
	return clone(self)
end

function i3k_sbean.Team:decode(is)
	self.id = is:popNumber()
	self.leader = is:popNumber()
	self.members = is:popNumberList()
end

function i3k_sbean.Team:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.leader)
	os:pushNumberList(self.members)
end


i3k_sbean.MRoom = i3k_class("MRoom")
function i3k_sbean.MRoom:ctor()
	--self.id:		int32	
	--self.type:		int32	
	--self.mapId:		int32	
	--self.leader:		int32	
	--self.members:		vector[int32]	
	--self.createTime:		int32	
end

function i3k_sbean.MRoom:clone()
	return clone(self)
end

function i3k_sbean.MRoom:decode(is)
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.mapId = is:popNumber()
	self.leader = is:popNumber()
	self.members = is:popNumberList()
	self.createTime = is:popNumber()
end

function i3k_sbean.MRoom:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.mapId)
	os:pushNumber(self.leader)
	os:pushNumberList(self.members)
	os:pushNumber(self.createTime)
end


i3k_sbean.ARoom = i3k_class("ARoom")
function i3k_sbean.ARoom:ctor()
	--self.id:		int32	
	--self.type:		int32	
	--self.grade:		int32	
	--self.leader:		int32	
	--self.members:		vector[int32]	
end

function i3k_sbean.ARoom:clone()
	return clone(self)
end

function i3k_sbean.ARoom:decode(is)
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.grade = is:popNumber()
	self.leader = is:popNumber()
	self.members = is:popNumberList()
end

function i3k_sbean.ARoom:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.grade)
	os:pushNumber(self.leader)
	os:pushNumberList(self.members)
end


i3k_sbean.FRoom = i3k_class("FRoom")
function i3k_sbean.FRoom:ctor()
	--self.id:		int32	
	--self.type:		int32	
	--self.leader:		int32	
	--self.members:		vector[int32]	
end

function i3k_sbean.FRoom:clone()
	return clone(self)
end

function i3k_sbean.FRoom:decode(is)
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.leader = is:popNumber()
	self.members = is:popNumberList()
end

function i3k_sbean.FRoom:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.leader)
	os:pushNumberList(self.members)
end


i3k_sbean.GlobalMap = i3k_class("GlobalMap")
function i3k_sbean.GlobalMap:ctor()
	--self.type:		int32	
	--self.param1:		int32	
end

function i3k_sbean.GlobalMap:clone()
	return clone(self)
end

function i3k_sbean.GlobalMap:decode(is)
	self.type = is:popNumber()
	self.param1 = is:popNumber()
end

function i3k_sbean.GlobalMap:encode(os)
	os:pushNumber(self.type)
	os:pushNumber(self.param1)
end


i3k_sbean.TeamOverview = i3k_class("TeamOverview")
function i3k_sbean.TeamOverview:ctor()
	--self.id:		int32	
	--self.leader:		int32	
	--self.leaderName:		string	
	--self.leaderLvl:		int32	
	--self.memberCount:		int32	
end

function i3k_sbean.TeamOverview:clone()
	return clone(self)
end

function i3k_sbean.TeamOverview:decode(is)
	self.id = is:popNumber()
	self.leader = is:popNumber()
	self.leaderName = is:popString()
	self.leaderLvl = is:popNumber()
	self.memberCount = is:popNumber()
end

function i3k_sbean.TeamOverview:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.leader)
	os:pushString(self.leaderName)
	os:pushNumber(self.leaderLvl)
	os:pushNumber(self.memberCount)
end


i3k_sbean.RoleBrief = i3k_class("RoleBrief")
function i3k_sbean.RoleBrief:ctor()
	--self.overview:		RoleOverview	
	--self.model:		RoleModel	
end

function i3k_sbean.RoleBrief:clone()
	return clone(self)
end

function i3k_sbean.RoleBrief:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.model = is:pop(i3k_sbean.RoleModel)
end

function i3k_sbean.RoleBrief:encode(os)
	os:push(self.overview)
	os:push(self.model)
end


i3k_sbean.RoleModel = i3k_class("RoleModel")
function i3k_sbean.RoleModel:ctor()
	--self.face:		int32	
	--self.hair:		int32	
	--self.equips:		map[int32, int32]	
	--self.equipParts:		vector[EquipPart]	
	--self.curFashions:		map[int32, int32]	
	--self.showFashionTypes:		map[int32, int32]	
	--self.armor:		ArmorBrief	
	--self.heirloom:		HeirloomBrief	
	--self.weaponSoulShow:		int32	
	--self.homelandEquip:		map[int32, DBHomelandEquip]	
	--self.isFishing:		int32	
	--self.soaringDisplay:		DBRoleExtraDisplay	
end

function i3k_sbean.RoleModel:clone()
	return clone(self)
end

function i3k_sbean.RoleModel:decode(is)
	self.face = is:popNumber()
	self.hair = is:popNumber()
	self.equips = is:popNumberNumberMap()
	self.equipParts = is:popList(i3k_sbean.EquipPart)
	self.curFashions = is:popNumberNumberMap()
	self.showFashionTypes = is:popNumberNumberMap()
	self.armor = is:pop(i3k_sbean.ArmorBrief)
	self.heirloom = is:pop(i3k_sbean.HeirloomBrief)
	self.weaponSoulShow = is:popNumber()
	self.homelandEquip = is:popNumberMap(i3k_sbean.DBHomelandEquip)
	self.isFishing = is:popNumber()
	self.soaringDisplay = is:pop(i3k_sbean.DBRoleExtraDisplay)
end

function i3k_sbean.RoleModel:encode(os)
	os:pushNumber(self.face)
	os:pushNumber(self.hair)
	os:pushNumberNumberMap(self.equips)
	os:pushList(self.equipParts)
	os:pushNumberNumberMap(self.curFashions)
	os:pushNumberNumberMap(self.showFashionTypes)
	os:push(self.armor)
	os:push(self.heirloom)
	os:pushNumber(self.weaponSoulShow)
	os:pushNumberMap(self.homelandEquip)
	os:pushNumber(self.isFishing)
	os:push(self.soaringDisplay)
end


i3k_sbean.ArmorBrief = i3k_class("ArmorBrief")
function i3k_sbean.ArmorBrief:ctor()
	--self.id:		int32	
	--self.rank:		int32	
	--self.hideEffect:		int8	
end

function i3k_sbean.ArmorBrief:clone()
	return clone(self)
end

function i3k_sbean.ArmorBrief:decode(is)
	self.id = is:popNumber()
	self.rank = is:popNumber()
	self.hideEffect = is:popNumber()
end

function i3k_sbean.ArmorBrief:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.rank)
	os:pushNumber(self.hideEffect)
end


i3k_sbean.HeirloomBrief = i3k_class("HeirloomBrief")
function i3k_sbean.HeirloomBrief:ctor()
	--self.display:		int8	
	--self.perfectDegree:		int32	
end

function i3k_sbean.HeirloomBrief:clone()
	return clone(self)
end

function i3k_sbean.HeirloomBrief:decode(is)
	self.display = is:popNumber()
	self.perfectDegree = is:popNumber()
end

function i3k_sbean.HeirloomBrief:encode(os)
	os:pushNumber(self.display)
	os:pushNumber(self.perfectDegree)
end


i3k_sbean.RoleSocial = i3k_class("RoleSocial")
function i3k_sbean.RoleSocial:ctor()
	--self.role:		RoleOverview	
	--self.sectId:		int32	
	--self.sectName:		string	
	--self.personalMsg:		string	
end

function i3k_sbean.RoleSocial:clone()
	return clone(self)
end

function i3k_sbean.RoleSocial:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.sectId = is:popNumber()
	self.sectName = is:popString()
	self.personalMsg = is:popString()
end

function i3k_sbean.RoleSocial:encode(os)
	os:push(self.role)
	os:pushNumber(self.sectId)
	os:pushString(self.sectName)
	os:pushString(self.personalMsg)
end


i3k_sbean.RoleOverview = i3k_class("RoleOverview")
function i3k_sbean.RoleOverview:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.gender:		int32	
	--self.headIcon:		int16	
	--self.headBorder:		int16	
	--self.type:		int32	
	--self.tLvl:		int32	
	--self.bwType:		int32	
	--self.level:		int32	
	--self.fightPower:		int32	
end

function i3k_sbean.RoleOverview:clone()
	return clone(self)
end

function i3k_sbean.RoleOverview:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.gender = is:popNumber()
	self.headIcon = is:popNumber()
	self.headBorder = is:popNumber()
	self.type = is:popNumber()
	self.tLvl = is:popNumber()
	self.bwType = is:popNumber()
	self.level = is:popNumber()
	self.fightPower = is:popNumber()
end

function i3k_sbean.RoleOverview:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushNumber(self.gender)
	os:pushNumber(self.headIcon)
	os:pushNumber(self.headBorder)
	os:pushNumber(self.type)
	os:pushNumber(self.tLvl)
	os:pushNumber(self.bwType)
	os:pushNumber(self.level)
	os:pushNumber(self.fightPower)
end


i3k_sbean.RoleKill = i3k_class("RoleKill")
function i3k_sbean.RoleKill:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.addHonor:		int32	
end

function i3k_sbean.RoleKill:clone()
	return clone(self)
end

function i3k_sbean.RoleKill:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.addHonor = is:popNumber()
end

function i3k_sbean.RoleKill:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushNumber(self.addHonor)
end


i3k_sbean.RoleInfo = i3k_class("RoleInfo")
function i3k_sbean.RoleInfo:ctor()
	--self.id:		int32	
	--self.name:		string	
end

function i3k_sbean.RoleInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleInfo:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
end

function i3k_sbean.RoleInfo:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
end


i3k_sbean.GlobalRoleId = i3k_class("GlobalRoleId")
function i3k_sbean.GlobalRoleId:ctor()
	--self.gsid:		int32	
	--self.roleid:		int32	
end

function i3k_sbean.GlobalRoleId:clone()
	return clone(self)
end

function i3k_sbean.GlobalRoleId:decode(is)
	self.gsid = is:popNumber()
	self.roleid = is:popNumber()
end

function i3k_sbean.GlobalRoleId:encode(os)
	os:pushNumber(self.gsid)
	os:pushNumber(self.roleid)
end


i3k_sbean.GlobalRoleOverview = i3k_class("GlobalRoleOverview")
function i3k_sbean.GlobalRoleOverview:ctor()
	--self.gsid:		int32	
	--self.role:		RoleOverview	
end

function i3k_sbean.GlobalRoleOverview:clone()
	return clone(self)
end

function i3k_sbean.GlobalRoleOverview:decode(is)
	self.gsid = is:popNumber()
	self.role = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.GlobalRoleOverview:encode(os)
	os:pushNumber(self.gsid)
	os:push(self.role)
end


i3k_sbean.RoleProfile = i3k_class("RoleProfile")
function i3k_sbean.RoleProfile:ctor()
	--self.overview:		RoleOverview	
	--self.curHp:		int32	
	--self.maxHp:		int32	
end

function i3k_sbean.RoleProfile:clone()
	return clone(self)
end

function i3k_sbean.RoleProfile:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.curHp = is:popNumber()
	self.maxHp = is:popNumber()
end

function i3k_sbean.RoleProfile:encode(os)
	os:push(self.overview)
	os:pushNumber(self.curHp)
	os:pushNumber(self.maxHp)
end


i3k_sbean.RoleTitle = i3k_class("RoleTitle")
function i3k_sbean.RoleTitle:ctor()
	--self.pkGrade:		int32	
	--self.pkState:		int32	
	--self.sectBrief:		SectBrief	
	--self.permanentTitle:		int32	
	--self.timedTitles:		vector[DBTitleSlot]	
	--self.carOwner:		int32	
	--self.carRobber:		int32	
	--self.score:		int32	
end

function i3k_sbean.RoleTitle:clone()
	return clone(self)
end

function i3k_sbean.RoleTitle:decode(is)
	self.pkGrade = is:popNumber()
	self.pkState = is:popNumber()
	self.sectBrief = is:pop(i3k_sbean.SectBrief)
	self.permanentTitle = is:popNumber()
	self.timedTitles = is:popList(i3k_sbean.DBTitleSlot)
	self.carOwner = is:popNumber()
	self.carRobber = is:popNumber()
	self.score = is:popNumber()
end

function i3k_sbean.RoleTitle:encode(os)
	os:pushNumber(self.pkGrade)
	os:pushNumber(self.pkState)
	os:push(self.sectBrief)
	os:pushNumber(self.permanentTitle)
	os:pushList(self.timedTitles)
	os:pushNumber(self.carOwner)
	os:pushNumber(self.carRobber)
	os:pushNumber(self.score)
end


i3k_sbean.FightState = i3k_class("FightState")
function i3k_sbean.FightState:ctor()
	--self.curHp:		int32	
	--self.maxHp:		int32	
	--self.buffs:		map[int32, int32]	
	--self.armorWeak:		int32	
	--self.states:		set[int32]	
end

function i3k_sbean.FightState:clone()
	return clone(self)
end

function i3k_sbean.FightState:decode(is)
	self.curHp = is:popNumber()
	self.maxHp = is:popNumber()
	self.buffs = is:popNumberNumberMap()
	self.armorWeak = is:popNumber()
	self.states = is:popNumberSet()
end

function i3k_sbean.FightState:encode(os)
	os:pushNumber(self.curHp)
	os:pushNumber(self.maxHp)
	os:pushNumberNumberMap(self.buffs)
	os:pushNumber(self.armorWeak)
	os:pushNumberSet(self.states)
end


i3k_sbean.RoleAppearance = i3k_class("RoleAppearance")
function i3k_sbean.RoleAppearance:ctor()
	--self.transfromedWeapon:		int32	
	--self.weaponForm:		int32	
	--self.horseShowID:		int32	
	--self.alterID:		int32	
	--self.socialActionID:		int32	
	--self.memberIDs:		vector[int32]	
	--self.mulRoleType:		int32	
	--self.wizardPetId:		int32	
	--self.horseSpiritShowID:		int32	
	--self.heroId:		int32	
	--self.chessArm:		int32	
end

function i3k_sbean.RoleAppearance:clone()
	return clone(self)
end

function i3k_sbean.RoleAppearance:decode(is)
	self.transfromedWeapon = is:popNumber()
	self.weaponForm = is:popNumber()
	self.horseShowID = is:popNumber()
	self.alterID = is:popNumber()
	self.socialActionID = is:popNumber()
	self.memberIDs = is:popNumberList()
	self.mulRoleType = is:popNumber()
	self.wizardPetId = is:popNumber()
	self.horseSpiritShowID = is:popNumber()
	self.heroId = is:popNumber()
	self.chessArm = is:popNumber()
end

function i3k_sbean.RoleAppearance:encode(os)
	os:pushNumber(self.transfromedWeapon)
	os:pushNumber(self.weaponForm)
	os:pushNumber(self.horseShowID)
	os:pushNumber(self.alterID)
	os:pushNumber(self.socialActionID)
	os:pushNumberList(self.memberIDs)
	os:pushNumber(self.mulRoleType)
	os:pushNumber(self.wizardPetId)
	os:pushNumber(self.horseSpiritShowID)
	os:pushNumber(self.heroId)
	os:pushNumber(self.chessArm)
end


i3k_sbean.RoleQueryDetail = i3k_class("RoleQueryDetail")
function i3k_sbean.RoleQueryDetail:ctor()
	--self.detail:		RoleDetail	
	--self.members:		map[int32, RoleDetail]	
end

function i3k_sbean.RoleQueryDetail:clone()
	return clone(self)
end

function i3k_sbean.RoleQueryDetail:decode(is)
	self.detail = is:pop(i3k_sbean.RoleDetail)
	self.members = is:popNumberMap(i3k_sbean.RoleDetail)
end

function i3k_sbean.RoleQueryDetail:encode(os)
	os:push(self.detail)
	os:pushNumberMap(self.members)
end


i3k_sbean.RoleDetail = i3k_class("RoleDetail")
function i3k_sbean.RoleDetail:ctor()
	--self.overview:		RoleOverview	
	--self.model:		RoleModel	
	--self.title:		RoleTitle	
	--self.state:		FightState	
	--self.appearance:		RoleAppearance	
	--self.buffdrugs:		vector[BuffDrug]	
	--self.petAlter:		PetOverview	
	--self.combatType:		int32	
end

function i3k_sbean.RoleDetail:clone()
	return clone(self)
end

function i3k_sbean.RoleDetail:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.model = is:pop(i3k_sbean.RoleModel)
	self.title = is:pop(i3k_sbean.RoleTitle)
	self.state = is:pop(i3k_sbean.FightState)
	self.appearance = is:pop(i3k_sbean.RoleAppearance)
	self.buffdrugs = is:popList(i3k_sbean.BuffDrug)
	self.petAlter = is:pop(i3k_sbean.PetOverview)
	self.combatType = is:popNumber()
end

function i3k_sbean.RoleDetail:encode(os)
	os:push(self.overview)
	os:push(self.model)
	os:push(self.title)
	os:push(self.state)
	os:push(self.appearance)
	os:pushList(self.buffdrugs)
	os:push(self.petAlter)
	os:pushNumber(self.combatType)
end


i3k_sbean.RolePowerDetail = i3k_class("RolePowerDetail")
function i3k_sbean.RolePowerDetail:ctor()
	--self.equipPower:		int32	
	--self.skillPower:		int32	
	--self.weaponPower:		int32	
	--self.horsePower:		int32	
	--self.sectAurasPower:		int32	
	--self.clanOwnerPower:		int32	
end

function i3k_sbean.RolePowerDetail:clone()
	return clone(self)
end

function i3k_sbean.RolePowerDetail:decode(is)
	self.equipPower = is:popNumber()
	self.skillPower = is:popNumber()
	self.weaponPower = is:popNumber()
	self.horsePower = is:popNumber()
	self.sectAurasPower = is:popNumber()
	self.clanOwnerPower = is:popNumber()
end

function i3k_sbean.RolePowerDetail:encode(os)
	os:pushNumber(self.equipPower)
	os:pushNumber(self.skillPower)
	os:pushNumber(self.weaponPower)
	os:pushNumber(self.horsePower)
	os:pushNumber(self.sectAurasPower)
	os:pushNumber(self.clanOwnerPower)
end


i3k_sbean.RoleAchievement = i3k_class("RoleAchievement")
function i3k_sbean.RoleAchievement:ctor()
	--self.weaponsActived:		int32	
	--self.petsActived:		int32	
	--self.meadlsCollected:		int32	
	--self.skillLevels:		int32	
	--self.bookLevels:		int32	
	--self.uskillLevels:		int32	
end

function i3k_sbean.RoleAchievement:clone()
	return clone(self)
end

function i3k_sbean.RoleAchievement:decode(is)
	self.weaponsActived = is:popNumber()
	self.petsActived = is:popNumber()
	self.meadlsCollected = is:popNumber()
	self.skillLevels = is:popNumber()
	self.bookLevels = is:popNumber()
	self.uskillLevels = is:popNumber()
end

function i3k_sbean.RoleAchievement:encode(os)
	os:pushNumber(self.weaponsActived)
	os:pushNumber(self.petsActived)
	os:pushNumber(self.meadlsCollected)
	os:pushNumber(self.skillLevels)
	os:pushNumber(self.bookLevels)
	os:pushNumber(self.uskillLevels)
end


i3k_sbean.RoleWearDetail = i3k_class("RoleWearDetail")
function i3k_sbean.RoleWearDetail:ctor()
	--self.face:		int32	
	--self.hair:		int32	
	--self.curFashions:		map[int32, int32]	
	--self.showFashionTypes:		map[int32, int32]	
	--self.seal:		DBSealData	
	--self.wearEquips:		map[int32, DBWearEquip]	
	--self.wearParts:		vector[DBEquipPart]	
	--self.armor:		ArmorOverview	
	--self.heirloom:		HeirloomBrief	
	--self.sealAwaken:		DBSealAwaken	
	--self.disCardWeaponSoulShow:		int8	
	--self.sealGivenSpirit:		DBRoleSealGivenSpirit	
	--self.soaringDisplay:		DBRoleExtraDisplay	
	--self.weaponSoulShow:		int32	
end

function i3k_sbean.RoleWearDetail:clone()
	return clone(self)
end

function i3k_sbean.RoleWearDetail:decode(is)
	self.face = is:popNumber()
	self.hair = is:popNumber()
	self.curFashions = is:popNumberNumberMap()
	self.showFashionTypes = is:popNumberNumberMap()
	self.seal = is:pop(i3k_sbean.DBSealData)
	self.wearEquips = is:popNumberMap(i3k_sbean.DBWearEquip)
	self.wearParts = is:popList(i3k_sbean.DBEquipPart)
	self.armor = is:pop(i3k_sbean.ArmorOverview)
	self.heirloom = is:pop(i3k_sbean.HeirloomBrief)
	self.sealAwaken = is:pop(i3k_sbean.DBSealAwaken)
	self.disCardWeaponSoulShow = is:popNumber()
	self.sealGivenSpirit = is:pop(i3k_sbean.DBRoleSealGivenSpirit)
	self.soaringDisplay = is:pop(i3k_sbean.DBRoleExtraDisplay)
	self.weaponSoulShow = is:popNumber()
end

function i3k_sbean.RoleWearDetail:encode(os)
	os:pushNumber(self.face)
	os:pushNumber(self.hair)
	os:pushNumberNumberMap(self.curFashions)
	os:pushNumberNumberMap(self.showFashionTypes)
	os:push(self.seal)
	os:pushNumberMap(self.wearEquips)
	os:pushList(self.wearParts)
	os:push(self.armor)
	os:push(self.heirloom)
	os:push(self.sealAwaken)
	os:pushNumber(self.disCardWeaponSoulShow)
	os:push(self.sealGivenSpirit)
	os:push(self.soaringDisplay)
	os:pushNumber(self.weaponSoulShow)
end


i3k_sbean.RoleFeature = i3k_class("RoleFeature")
function i3k_sbean.RoleFeature:ctor()
	--self.overview:		RoleOverview	
	--self.wear:		RoleWearDetail	
	--self.properties:		map[int32, int32]	
	--self.powerDetail:		RolePowerDetail	
	--self.achievement:		RoleAchievement	
	--self.relationship:		RoleRelationship	
	--self.meridians:		map[int32, DBMeridian]	
	--self.heirloom:		RoleHeirloomData	
	--self.equipDiagrams:		map[int32, DBDiagram]	
	--self.diagramPartStrength:		map[int32, EightDiagramPartInfo]	
	--self.diagramChangeSkill:		map[int32, int32]	
	--self.soulSpell:		RoleSoulSpell	
end

function i3k_sbean.RoleFeature:clone()
	return clone(self)
end

function i3k_sbean.RoleFeature:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.wear = is:pop(i3k_sbean.RoleWearDetail)
	self.properties = is:popNumberNumberMap()
	self.powerDetail = is:pop(i3k_sbean.RolePowerDetail)
	self.achievement = is:pop(i3k_sbean.RoleAchievement)
	self.relationship = is:pop(i3k_sbean.RoleRelationship)
	self.meridians = is:popNumberMap(i3k_sbean.DBMeridian)
	self.heirloom = is:pop(i3k_sbean.RoleHeirloomData)
	self.equipDiagrams = is:popNumberMap(i3k_sbean.DBDiagram)
	self.diagramPartStrength = is:popNumberMap(i3k_sbean.EightDiagramPartInfo)
	self.diagramChangeSkill = is:popNumberNumberMap()
	self.soulSpell = is:pop(i3k_sbean.RoleSoulSpell)
end

function i3k_sbean.RoleFeature:encode(os)
	os:push(self.overview)
	os:push(self.wear)
	os:pushNumberNumberMap(self.properties)
	os:push(self.powerDetail)
	os:push(self.achievement)
	os:push(self.relationship)
	os:pushNumberMap(self.meridians)
	os:push(self.heirloom)
	os:pushNumberMap(self.equipDiagrams)
	os:pushNumberMap(self.diagramPartStrength)
	os:pushNumberNumberMap(self.diagramChangeSkill)
	os:push(self.soulSpell)
end


i3k_sbean.RoleHeirloomData = i3k_class("RoleHeirloomData")
function i3k_sbean.RoleHeirloomData:ctor()
	--self.strengthRank:		int32	
	--self.strengthProps:		map[int32, int32]	
	--self.starSpiritRank:		int32	
	--self.mainStarLvl:		int32	
	--self.mainStarProps:		set[int32]	
	--self.miniStarLvls:		map[int32, int32]	
end

function i3k_sbean.RoleHeirloomData:clone()
	return clone(self)
end

function i3k_sbean.RoleHeirloomData:decode(is)
	self.strengthRank = is:popNumber()
	self.strengthProps = is:popNumberNumberMap()
	self.starSpiritRank = is:popNumber()
	self.mainStarLvl = is:popNumber()
	self.mainStarProps = is:popNumberSet()
	self.miniStarLvls = is:popNumberNumberMap()
end

function i3k_sbean.RoleHeirloomData:encode(os)
	os:pushNumber(self.strengthRank)
	os:pushNumberNumberMap(self.strengthProps)
	os:pushNumber(self.starSpiritRank)
	os:pushNumber(self.mainStarLvl)
	os:pushNumberSet(self.mainStarProps)
	os:pushNumberNumberMap(self.miniStarLvls)
end


i3k_sbean.RoleRelationship = i3k_class("RoleRelationship")
function i3k_sbean.RoleRelationship:ctor()
	--self.sectName:		string	
	--self.partnerName:		string	
end

function i3k_sbean.RoleRelationship:clone()
	return clone(self)
end

function i3k_sbean.RoleRelationship:decode(is)
	self.sectName = is:popString()
	self.partnerName = is:popString()
end

function i3k_sbean.RoleRelationship:encode(os)
	os:pushString(self.sectName)
	os:pushString(self.partnerName)
end


i3k_sbean.FightPet = i3k_class("FightPet")
function i3k_sbean.FightPet:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.star:		int32	
	--self.breakSkills:		map[int32, int32]	
	--self.coPracticeLvl:		int32	
	--self.fightPower:		int32	
	--self.skill:		vector[int32]	
	--self.curSpirits:		vector[PetSpirit]	
	--self.awake:		int32	
	--self.use:		int32	
	--self.name:		string	
	--self.equips:		map[int32, int32]	
	--self.equipPartLvls:		map[int32, int32]	
	--self.petGuard:		DBRolePetGuard	
end

function i3k_sbean.FightPet:clone()
	return clone(self)
end

function i3k_sbean.FightPet:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.star = is:popNumber()
	self.breakSkills = is:popNumberNumberMap()
	self.coPracticeLvl = is:popNumber()
	self.fightPower = is:popNumber()
	self.skill = is:popNumberList()
	self.curSpirits = is:popList(i3k_sbean.PetSpirit)
	self.awake = is:popNumber()
	self.use = is:popNumber()
	self.name = is:popString()
	self.equips = is:popNumberNumberMap()
	self.equipPartLvls = is:popNumberNumberMap()
	self.petGuard = is:pop(i3k_sbean.DBRolePetGuard)
end

function i3k_sbean.FightPet:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.star)
	os:pushNumberNumberMap(self.breakSkills)
	os:pushNumber(self.coPracticeLvl)
	os:pushNumber(self.fightPower)
	os:pushNumberList(self.skill)
	os:pushList(self.curSpirits)
	os:pushNumber(self.awake)
	os:pushNumber(self.use)
	os:pushString(self.name)
	os:pushNumberNumberMap(self.equips)
	os:pushNumberNumberMap(self.equipPartLvls)
	os:push(self.petGuard)
end


i3k_sbean.PetHost = i3k_class("PetHost")
function i3k_sbean.PetHost:ctor()
	--self.hostAtkw:		int32	
	--self.hostDefw:		int32	
	--self.hostAtkc:		int32	
	--self.hostDefc:		int32	
	--self.hostMasterW:		int32	
	--self.hostMasterC:		int32	
	--self.spiritTotalLays:		int32	
	--self.weaponTotalLays:		int32	
end

function i3k_sbean.PetHost:clone()
	return clone(self)
end

function i3k_sbean.PetHost:decode(is)
	self.hostAtkw = is:popNumber()
	self.hostDefw = is:popNumber()
	self.hostAtkc = is:popNumber()
	self.hostDefc = is:popNumber()
	self.hostMasterW = is:popNumber()
	self.hostMasterC = is:popNumber()
	self.spiritTotalLays = is:popNumber()
	self.weaponTotalLays = is:popNumber()
end

function i3k_sbean.PetHost:encode(os)
	os:pushNumber(self.hostAtkw)
	os:pushNumber(self.hostDefw)
	os:pushNumber(self.hostAtkc)
	os:pushNumber(self.hostDefc)
	os:pushNumber(self.hostMasterW)
	os:pushNumber(self.hostMasterC)
	os:pushNumber(self.spiritTotalLays)
	os:pushNumber(self.weaponTotalLays)
end


i3k_sbean.PetAwakeOverview = i3k_class("PetAwakeOverview")
function i3k_sbean.PetAwakeOverview:ctor()
	--self.awake:		int32	
	--self.use:		int32	
end

function i3k_sbean.PetAwakeOverview:clone()
	return clone(self)
end

function i3k_sbean.PetAwakeOverview:decode(is)
	self.awake = is:popNumber()
	self.use = is:popNumber()
end

function i3k_sbean.PetAwakeOverview:encode(os)
	os:pushNumber(self.awake)
	os:pushNumber(self.use)
end


i3k_sbean.PetOverview = i3k_class("PetOverview")
function i3k_sbean.PetOverview:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.star:		int16	
	--self.awakeUse:		PetAwakeOverview	
	--self.name:		string	
	--self.fightPower:		int32	
end

function i3k_sbean.PetOverview:clone()
	return clone(self)
end

function i3k_sbean.PetOverview:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.star = is:popNumber()
	self.awakeUse = is:pop(i3k_sbean.PetAwakeOverview)
	self.name = is:popString()
	self.fightPower = is:popNumber()
end

function i3k_sbean.PetOverview:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.star)
	os:push(self.awakeUse)
	os:pushString(self.name)
	os:pushNumber(self.fightPower)
end


i3k_sbean.PetProfile = i3k_class("PetProfile")
function i3k_sbean.PetProfile:ctor()
	--self.overview:		PetOverview	
	--self.curHp:		int32	
	--self.maxHp:		int32	
end

function i3k_sbean.PetProfile:clone()
	return clone(self)
end

function i3k_sbean.PetProfile:decode(is)
	self.overview = is:pop(i3k_sbean.PetOverview)
	self.curHp = is:popNumber()
	self.maxHp = is:popNumber()
end

function i3k_sbean.PetProfile:encode(os)
	os:push(self.overview)
	os:pushNumber(self.curHp)
	os:pushNumber(self.maxHp)
end


i3k_sbean.PetDetail = i3k_class("PetDetail")
function i3k_sbean.PetDetail:ctor()
	--self.ownerID:		int32	
	--self.profile:		PetOverview	
	--self.state:		FightState	
	--self.petGuardIsShow:		int32	
	--self.curPetGuard:		int32	
end

function i3k_sbean.PetDetail:clone()
	return clone(self)
end

function i3k_sbean.PetDetail:decode(is)
	self.ownerID = is:popNumber()
	self.profile = is:pop(i3k_sbean.PetOverview)
	self.state = is:pop(i3k_sbean.FightState)
	self.petGuardIsShow = is:popNumber()
	self.curPetGuard = is:popNumber()
end

function i3k_sbean.PetDetail:encode(os)
	os:pushNumber(self.ownerID)
	os:push(self.profile)
	os:push(self.state)
	os:pushNumber(self.petGuardIsShow)
	os:pushNumber(self.curPetGuard)
end


i3k_sbean.WeaponOverview = i3k_class("WeaponOverview")
function i3k_sbean.WeaponOverview:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.star:		int32	
	--self.fightPower:		int32	
	--self.awake:		int8	
end

function i3k_sbean.WeaponOverview:clone()
	return clone(self)
end

function i3k_sbean.WeaponOverview:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.star = is:popNumber()
	self.fightPower = is:popNumber()
	self.awake = is:popNumber()
end

function i3k_sbean.WeaponOverview:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.star)
	os:pushNumber(self.fightPower)
	os:pushNumber(self.awake)
end


i3k_sbean.HorseOverview = i3k_class("HorseOverview")
function i3k_sbean.HorseOverview:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.star:		int32	
	--self.fightPower:		int32	
	--self.showIDs:		set[int32]	
	--self.info:		HorseInfo	
end

function i3k_sbean.HorseOverview:clone()
	return clone(self)
end

function i3k_sbean.HorseOverview:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.star = is:popNumber()
	self.fightPower = is:popNumber()
	self.showIDs = is:popNumberSet()
	self.info = is:pop(i3k_sbean.HorseInfo)
end

function i3k_sbean.HorseOverview:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.star)
	os:pushNumber(self.fightPower)
	os:pushNumberSet(self.showIDs)
	os:push(self.info)
end


i3k_sbean.ArmorOverview = i3k_class("ArmorOverview")
function i3k_sbean.ArmorOverview:ctor()
	--self.id:		int8	
	--self.castIngots:		map[int32, DBCastIngot]	
	--self.padding1_3:		int8	
	--self.padding1_4:		int8	
	--self.level:		int32	
	--self.rank:		int32	
	--self.soltGroupData:		vector[SoltData]	
	--self.fightPower:		int32	
	--self.runeLangLvls:		map[int32, int32]	
end

function i3k_sbean.ArmorOverview:clone()
	return clone(self)
end

function i3k_sbean.ArmorOverview:decode(is)
	self.id = is:popNumber()
	self.castIngots = is:popNumberMap(i3k_sbean.DBCastIngot)
	self.padding1_3 = is:popNumber()
	self.padding1_4 = is:popNumber()
	self.level = is:popNumber()
	self.rank = is:popNumber()
	self.soltGroupData = is:popList(i3k_sbean.SoltData)
	self.fightPower = is:popNumber()
	self.runeLangLvls = is:popNumberNumberMap()
end

function i3k_sbean.ArmorOverview:encode(os)
	os:pushNumber(self.id)
	os:pushNumberMap(self.castIngots)
	os:pushNumber(self.padding1_3)
	os:pushNumber(self.padding1_4)
	os:pushNumber(self.level)
	os:pushNumber(self.rank)
	os:pushList(self.soltGroupData)
	os:pushNumber(self.fightPower)
	os:pushNumberNumberMap(self.runeLangLvls)
end


i3k_sbean.WeaponSoulOverview = i3k_class("WeaponSoulOverview")
function i3k_sbean.WeaponSoulOverview:ctor()
	--self.parts:		vector[SoulPart]	
	--self.grade:		int32	
	--self.curShow:		int32	
	--self.curStar:		int32	
	--self.curGradeCount:		int32	
	--self.godStar:		DBGodStar	
end

function i3k_sbean.WeaponSoulOverview:clone()
	return clone(self)
end

function i3k_sbean.WeaponSoulOverview:decode(is)
	self.parts = is:popList(i3k_sbean.SoulPart)
	self.grade = is:popNumber()
	self.curShow = is:popNumber()
	self.curStar = is:popNumber()
	self.curGradeCount = is:popNumber()
	self.godStar = is:pop(i3k_sbean.DBGodStar)
end

function i3k_sbean.WeaponSoulOverview:encode(os)
	os:pushList(self.parts)
	os:pushNumber(self.grade)
	os:pushNumber(self.curShow)
	os:pushNumber(self.curStar)
	os:pushNumber(self.curGradeCount)
	os:push(self.godStar)
end


i3k_sbean.BWArenaArrayOverview = i3k_class("BWArenaArrayOverview")
function i3k_sbean.BWArenaArrayOverview:ctor()
	--self.array:		BattleArrayOverview	
	--self.score:		int32	
	--self.win:		int32	
end

function i3k_sbean.BWArenaArrayOverview:clone()
	return clone(self)
end

function i3k_sbean.BWArenaArrayOverview:decode(is)
	self.array = is:pop(i3k_sbean.BattleArrayOverview)
	self.score = is:popNumber()
	self.win = is:popNumber()
end

function i3k_sbean.BWArenaArrayOverview:encode(os)
	os:push(self.array)
	os:pushNumber(self.score)
	os:pushNumber(self.win)
end


i3k_sbean.BattleEnemyOverview = i3k_class("BattleEnemyOverview")
function i3k_sbean.BattleEnemyOverview:ctor()
	--self.roleSocial:		RoleSocial	
	--self.pets:		vector[PetOverview]	
	--self.hideDefence:		int8	
end

function i3k_sbean.BattleEnemyOverview:clone()
	return clone(self)
end

function i3k_sbean.BattleEnemyOverview:decode(is)
	self.roleSocial = is:pop(i3k_sbean.RoleSocial)
	self.pets = is:popList(i3k_sbean.PetOverview)
	self.hideDefence = is:popNumber()
end

function i3k_sbean.BattleEnemyOverview:encode(os)
	os:push(self.roleSocial)
	os:pushList(self.pets)
	os:pushNumber(self.hideDefence)
end


i3k_sbean.BattleArrayOverview = i3k_class("BattleArrayOverview")
function i3k_sbean.BattleArrayOverview:ctor()
	--self.roleSocial:		RoleSocial	
	--self.pets:		map[int32, PetOverview]	
end

function i3k_sbean.BattleArrayOverview:clone()
	return clone(self)
end

function i3k_sbean.BattleArrayOverview:decode(is)
	self.roleSocial = is:pop(i3k_sbean.RoleSocial)
	self.pets = is:popNumberMap(i3k_sbean.PetOverview)
end

function i3k_sbean.BattleArrayOverview:encode(os)
	os:push(self.roleSocial)
	os:pushNumberMap(self.pets)
end


i3k_sbean.BattleArrayProfile = i3k_class("BattleArrayProfile")
function i3k_sbean.BattleArrayProfile:ctor()
	--self.role:		RoleProfile	
	--self.pets:		map[int32, PetProfile]	
end

function i3k_sbean.BattleArrayProfile:clone()
	return clone(self)
end

function i3k_sbean.BattleArrayProfile:decode(is)
	self.role = is:pop(i3k_sbean.RoleProfile)
	self.pets = is:popNumberMap(i3k_sbean.PetProfile)
end

function i3k_sbean.BattleArrayProfile:encode(os)
	os:push(self.role)
	os:pushNumberMap(self.pets)
end


i3k_sbean.Hp = i3k_class("Hp")
function i3k_sbean.Hp:ctor()
	--self.curValue:		int32	
	--self.maxValue:		int32	
end

function i3k_sbean.Hp:clone()
	return clone(self)
end

function i3k_sbean.Hp:decode(is)
	self.curValue = is:popNumber()
	self.maxValue = is:popNumber()
end

function i3k_sbean.Hp:encode(os)
	os:pushNumber(self.curValue)
	os:pushNumber(self.maxValue)
end


i3k_sbean.BattleArrayHp = i3k_class("BattleArrayHp")
function i3k_sbean.BattleArrayHp:ctor()
	--self.roleId:		int32	
	--self.roleHp:		Hp	
	--self.petsHp:		map[int32, Hp]	
end

function i3k_sbean.BattleArrayHp:clone()
	return clone(self)
end

function i3k_sbean.BattleArrayHp:decode(is)
	self.roleId = is:popNumber()
	self.roleHp = is:pop(i3k_sbean.Hp)
	self.petsHp = is:popNumberMap(i3k_sbean.Hp)
end

function i3k_sbean.BattleArrayHp:encode(os)
	os:pushNumber(self.roleId)
	os:push(self.roleHp)
	os:pushNumberMap(self.petsHp)
end


i3k_sbean.SuperArenaEnemy = i3k_class("SuperArenaEnemy")
function i3k_sbean.SuperArenaEnemy:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.headIcon:		int16	
	--self.headBorder:		int16	
	--self.bwType:		int32	
	--self.hp:		int32	
	--self.maxHP:		int32	
	--self.lives:		int32	
end

function i3k_sbean.SuperArenaEnemy:clone()
	return clone(self)
end

function i3k_sbean.SuperArenaEnemy:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.headIcon = is:popNumber()
	self.headBorder = is:popNumber()
	self.bwType = is:popNumber()
	self.hp = is:popNumber()
	self.maxHP = is:popNumber()
	self.lives = is:popNumber()
end

function i3k_sbean.SuperArenaEnemy:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushNumber(self.headIcon)
	os:pushNumber(self.headBorder)
	os:pushNumber(self.bwType)
	os:pushNumber(self.hp)
	os:pushNumber(self.maxHP)
	os:pushNumber(self.lives)
end


i3k_sbean.MapRewards = i3k_class("MapRewards")
function i3k_sbean.MapRewards:ctor()
	--self.exp:		int32	
	--self.coin:		int32	
	--self.normalRewards:		vector[DummyGoods]	
	--self.cardRewards:		vector[DummyGoods]	
end

function i3k_sbean.MapRewards:clone()
	return clone(self)
end

function i3k_sbean.MapRewards:decode(is)
	self.exp = is:popNumber()
	self.coin = is:popNumber()
	self.normalRewards = is:popList(i3k_sbean.DummyGoods)
	self.cardRewards = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.MapRewards:encode(os)
	os:pushNumber(self.exp)
	os:pushNumber(self.coin)
	os:pushList(self.normalRewards)
	os:pushList(self.cardRewards)
end


i3k_sbean.MapSummary = i3k_class("MapSummary")
function i3k_sbean.MapSummary:ctor()
	--self.monsters:		map[int32, int32]	
	--self.rewards:		vector[MapRewards]	
end

function i3k_sbean.MapSummary:clone()
	return clone(self)
end

function i3k_sbean.MapSummary:decode(is)
	self.monsters = is:popNumberNumberMap()
	self.rewards = is:popList(i3k_sbean.MapRewards)
end

function i3k_sbean.MapSummary:encode(os)
	os:pushNumberNumberMap(self.monsters)
	os:pushList(self.rewards)
end


i3k_sbean.MapSummaryNew = i3k_class("MapSummaryNew")
function i3k_sbean.MapSummaryNew:ctor()
	--self.mapId:		int32	
	--self.times:		int32	
	--self.extraCard:		int32	
	--self.mapSummary:		MapSummary	
end

function i3k_sbean.MapSummaryNew:clone()
	return clone(self)
end

function i3k_sbean.MapSummaryNew:decode(is)
	self.mapId = is:popNumber()
	self.times = is:popNumber()
	self.extraCard = is:popNumber()
	self.mapSummary = is:pop(i3k_sbean.MapSummary)
end

function i3k_sbean.MapSummaryNew:encode(os)
	os:pushNumber(self.mapId)
	os:pushNumber(self.times)
	os:pushNumber(self.extraCard)
	os:push(self.mapSummary)
end


i3k_sbean.DropInfo = i3k_class("DropInfo")
function i3k_sbean.DropInfo:ctor()
	--self.dropID:		int32	
	--self.itemID:		int32	
	--self.itemCount:		int32	
end

function i3k_sbean.DropInfo:clone()
	return clone(self)
end

function i3k_sbean.DropInfo:decode(is)
	self.dropID = is:popNumber()
	self.itemID = is:popNumber()
	self.itemCount = is:popNumber()
end

function i3k_sbean.DropInfo:encode(os)
	os:pushNumber(self.dropID)
	os:pushNumber(self.itemID)
	os:pushNumber(self.itemCount)
end


i3k_sbean.DropDetail = i3k_class("DropDetail")
function i3k_sbean.DropDetail:ctor()
	--self.drop:		DropInfo	
	--self.position:		Vector3	
end

function i3k_sbean.DropDetail:clone()
	return clone(self)
end

function i3k_sbean.DropDetail:decode(is)
	self.drop = is:pop(i3k_sbean.DropInfo)
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.DropDetail:encode(os)
	os:push(self.drop)
	os:push(self.position)
end


i3k_sbean.ShopInfo = i3k_class("ShopInfo")
function i3k_sbean.ShopInfo:ctor()
	--self.refreshTimes:		int32	
	--self.goods:		vector[DBShopGoods]	
end

function i3k_sbean.ShopInfo:clone()
	return clone(self)
end

function i3k_sbean.ShopInfo:decode(is)
	self.refreshTimes = is:popNumber()
	self.goods = is:popList(i3k_sbean.DBShopGoods)
end

function i3k_sbean.ShopInfo:encode(os)
	os:pushNumber(self.refreshTimes)
	os:pushList(self.goods)
end


i3k_sbean.GambleShopInfo = i3k_class("GambleShopInfo")
function i3k_sbean.GambleShopInfo:ctor()
	--self.refreshTimes:		int32	
	--self.goods:		vector[DBGambleShopGoods]	
end

function i3k_sbean.GambleShopInfo:clone()
	return clone(self)
end

function i3k_sbean.GambleShopInfo:decode(is)
	self.refreshTimes = is:popNumber()
	self.goods = is:popList(i3k_sbean.DBGambleShopGoods)
end

function i3k_sbean.GambleShopInfo:encode(os)
	os:pushNumber(self.refreshTimes)
	os:pushList(self.goods)
end


i3k_sbean.SendFlowersInfo = i3k_class("SendFlowersInfo")
function i3k_sbean.SendFlowersInfo:ctor()
	--self.roleId:		int32	
	--self.roleName:		string	
	--self.count:		int32	
end

function i3k_sbean.SendFlowersInfo:clone()
	return clone(self)
end

function i3k_sbean.SendFlowersInfo:decode(is)
	self.roleId = is:popNumber()
	self.roleName = is:popString()
	self.count = is:popNumber()
end

function i3k_sbean.SendFlowersInfo:encode(os)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
	os:pushNumber(self.count)
end


i3k_sbean.SendShowLoveItemInfo = i3k_class("SendShowLoveItemInfo")
function i3k_sbean.SendShowLoveItemInfo:ctor()
	--self.sendRoleId:		int32	
	--self.sendRName:		string	
	--self.beUsedRId:		int32	
	--self.beUsedRName:		string	
	--self.itemID:		int32	
	--self.mapID:		int32	
	--self.line:		int32	
	--self.pos:		Vector3	
end

function i3k_sbean.SendShowLoveItemInfo:clone()
	return clone(self)
end

function i3k_sbean.SendShowLoveItemInfo:decode(is)
	self.sendRoleId = is:popNumber()
	self.sendRName = is:popString()
	self.beUsedRId = is:popNumber()
	self.beUsedRName = is:popString()
	self.itemID = is:popNumber()
	self.mapID = is:popNumber()
	self.line = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.SendShowLoveItemInfo:encode(os)
	os:pushNumber(self.sendRoleId)
	os:pushString(self.sendRName)
	os:pushNumber(self.beUsedRId)
	os:pushString(self.beUsedRName)
	os:pushNumber(self.itemID)
	os:pushNumber(self.mapID)
	os:pushNumber(self.line)
	os:push(self.pos)
end


i3k_sbean.SendWizardTripPhotoInfo = i3k_class("SendWizardTripPhotoInfo")
function i3k_sbean.SendWizardTripPhotoInfo:ctor()
	--self.sendRoleId:		int32	
	--self.sendRoleName:		string	
	--self.photoID:		vector[int32]	
end

function i3k_sbean.SendWizardTripPhotoInfo:clone()
	return clone(self)
end

function i3k_sbean.SendWizardTripPhotoInfo:decode(is)
	self.sendRoleId = is:popNumber()
	self.sendRoleName = is:popString()
	self.photoID = is:popNumberList()
end

function i3k_sbean.SendWizardTripPhotoInfo:encode(os)
	os:pushNumber(self.sendRoleId)
	os:pushString(self.sendRoleName)
	os:pushNumberList(self.photoID)
end


i3k_sbean.SendMoodDiaryShare = i3k_class("SendMoodDiaryShare")
function i3k_sbean.SendMoodDiaryShare:ctor()
	--self.rid:		int32	
	--self.rname:		string	
	--self.serverName:		string	
end

function i3k_sbean.SendMoodDiaryShare:clone()
	return clone(self)
end

function i3k_sbean.SendMoodDiaryShare:decode(is)
	self.rid = is:popNumber()
	self.rname = is:popString()
	self.serverName = is:popString()
end

function i3k_sbean.SendMoodDiaryShare:encode(os)
	os:pushNumber(self.rid)
	os:pushString(self.rname)
	os:pushString(self.serverName)
end


i3k_sbean.SendMoodDiarySendPopularity = i3k_class("SendMoodDiarySendPopularity")
function i3k_sbean.SendMoodDiarySendPopularity:ctor()
	--self.sendSid:		int32	
	--self.sendRname:		string	
	--self.receiveSid:		int32	
	--self.receiveRname:		string	
	--self.itemId:		int32	
	--self.itemCnt:		int32	
end

function i3k_sbean.SendMoodDiarySendPopularity:clone()
	return clone(self)
end

function i3k_sbean.SendMoodDiarySendPopularity:decode(is)
	self.sendSid = is:popNumber()
	self.sendRname = is:popString()
	self.receiveSid = is:popNumber()
	self.receiveRname = is:popString()
	self.itemId = is:popNumber()
	self.itemCnt = is:popNumber()
end

function i3k_sbean.SendMoodDiarySendPopularity:encode(os)
	os:pushNumber(self.sendSid)
	os:pushString(self.sendRname)
	os:pushNumber(self.receiveSid)
	os:pushString(self.receiveRname)
	os:pushNumber(self.itemId)
	os:pushNumber(self.itemCnt)
end


i3k_sbean.FlauntDiySkillInfo = i3k_class("FlauntDiySkillInfo")
function i3k_sbean.FlauntDiySkillInfo:ctor()
	--self.diyskill:		DBDiySkill	
	--self.icons:		vector[int32]	
end

function i3k_sbean.FlauntDiySkillInfo:clone()
	return clone(self)
end

function i3k_sbean.FlauntDiySkillInfo:decode(is)
	self.diyskill = is:pop(i3k_sbean.DBDiySkill)
	self.icons = is:popNumberList()
end

function i3k_sbean.FlauntDiySkillInfo:encode(os)
	os:push(self.diyskill)
	os:pushNumberList(self.icons)
end


i3k_sbean.SendFestivalBless = i3k_class("SendFestivalBless")
function i3k_sbean.SendFestivalBless:ctor()
	--self.id:		int32	
	--self.targetName:		string	
	--self.guid:		string	
end

function i3k_sbean.SendFestivalBless:clone()
	return clone(self)
end

function i3k_sbean.SendFestivalBless:decode(is)
	self.id = is:popNumber()
	self.targetName = is:popString()
	self.guid = is:popString()
end

function i3k_sbean.SendFestivalBless:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.targetName)
	os:pushString(self.guid)
end


i3k_sbean.SendConstellationTest = i3k_class("SendConstellationTest")
function i3k_sbean.SendConstellationTest:ctor()
	--self.gender:		int32	
	--self.groupID:		int32	
	--self.testScore:		int32	
end

function i3k_sbean.SendConstellationTest:clone()
	return clone(self)
end

function i3k_sbean.SendConstellationTest:decode(is)
	self.gender = is:popNumber()
	self.groupID = is:popNumber()
	self.testScore = is:popNumber()
end

function i3k_sbean.SendConstellationTest:encode(os)
	os:pushNumber(self.gender)
	os:pushNumber(self.groupID)
	os:pushNumber(self.testScore)
end


i3k_sbean.MessageContent = i3k_class("MessageContent")
function i3k_sbean.MessageContent:ctor()
	--self.type:		int32	
	--self.msg:		string	
	--self.refEquip:		DBEquip	
	--self.refFlauntDiySkill:		FlauntDiySkillInfo	
	--self.refSendFlowers:		SendFlowersInfo	
	--self.refShowLoveItem:		SendShowLoveItemInfo	
	--self.refWizardTripPhoto:		SendWizardTripPhotoInfo	
	--self.refMoodDiaryShare:		SendMoodDiaryShare	
	--self.refMoodDiarySendPopularity:		SendMoodDiarySendPopularity	
	--self.refFestivalBless:		SendFestivalBless	
	--self.refConstellationTest:		SendConstellationTest	
end

function i3k_sbean.MessageContent:clone()
	return clone(self)
end

function i3k_sbean.MessageContent:decode(is)
	self.type = is:popNumber()
	self.msg = is:popString()
	self.refEquip = is:pop(i3k_sbean.DBEquip)
	self.refFlauntDiySkill = is:pop(i3k_sbean.FlauntDiySkillInfo)
	self.refSendFlowers = is:pop(i3k_sbean.SendFlowersInfo)
	self.refShowLoveItem = is:pop(i3k_sbean.SendShowLoveItemInfo)
	self.refWizardTripPhoto = is:pop(i3k_sbean.SendWizardTripPhotoInfo)
	self.refMoodDiaryShare = is:pop(i3k_sbean.SendMoodDiaryShare)
	self.refMoodDiarySendPopularity = is:pop(i3k_sbean.SendMoodDiarySendPopularity)
	self.refFestivalBless = is:pop(i3k_sbean.SendFestivalBless)
	self.refConstellationTest = is:pop(i3k_sbean.SendConstellationTest)
end

function i3k_sbean.MessageContent:encode(os)
	os:pushNumber(self.type)
	os:pushString(self.msg)
	os:push(self.refEquip)
	os:push(self.refFlauntDiySkill)
	os:push(self.refSendFlowers)
	os:push(self.refShowLoveItem)
	os:push(self.refWizardTripPhoto)
	os:push(self.refMoodDiaryShare)
	os:push(self.refMoodDiarySendPopularity)
	os:push(self.refFestivalBless)
	os:push(self.refConstellationTest)
end


i3k_sbean.MessageInfo = i3k_class("MessageInfo")
function i3k_sbean.MessageInfo:ctor()
	--self.time:		int32	
	--self.type:		int32	
	--self.srcId:		int32	
	--self.srcName:		string	
	--self.srcSectId:		int32	
	--self.headIcon:		int16	
	--self.headBorder:		int16	
	--self.bwType:		int32	
	--self.vipLevel:		int32	
	--self.gsName:		string	
	--self.chatBox:		int32	
	--self.content:		MessageContent	
end

function i3k_sbean.MessageInfo:clone()
	return clone(self)
end

function i3k_sbean.MessageInfo:decode(is)
	self.time = is:popNumber()
	self.type = is:popNumber()
	self.srcId = is:popNumber()
	self.srcName = is:popString()
	self.srcSectId = is:popNumber()
	self.headIcon = is:popNumber()
	self.headBorder = is:popNumber()
	self.bwType = is:popNumber()
	self.vipLevel = is:popNumber()
	self.gsName = is:popString()
	self.chatBox = is:popNumber()
	self.content = is:pop(i3k_sbean.MessageContent)
end

function i3k_sbean.MessageInfo:encode(os)
	os:pushNumber(self.time)
	os:pushNumber(self.type)
	os:pushNumber(self.srcId)
	os:pushString(self.srcName)
	os:pushNumber(self.srcSectId)
	os:pushNumber(self.headIcon)
	os:pushNumber(self.headBorder)
	os:pushNumber(self.bwType)
	os:pushNumber(self.vipLevel)
	os:pushString(self.gsName)
	os:pushNumber(self.chatBox)
	os:push(self.content)
end


i3k_sbean.MailBrief = i3k_class("MailBrief")
function i3k_sbean.MailBrief:ctor()
	--self.id:		int32	
	--self.type:		int32	
	--self.state:		int32	
	--self.fromID:		int32	
	--self.fromName:		string	
	--self.sendTime:		int32	
	--self.lifeTime:		int32	
	--self.title:		string	
	--self.attCount:		int32	
	--self.additional:		vector[int32]	
end

function i3k_sbean.MailBrief:clone()
	return clone(self)
end

function i3k_sbean.MailBrief:decode(is)
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.state = is:popNumber()
	self.fromID = is:popNumber()
	self.fromName = is:popString()
	self.sendTime = is:popNumber()
	self.lifeTime = is:popNumber()
	self.title = is:popString()
	self.attCount = is:popNumber()
	self.additional = is:popNumberList()
end

function i3k_sbean.MailBrief:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.state)
	os:pushNumber(self.fromID)
	os:pushString(self.fromName)
	os:pushNumber(self.sendTime)
	os:pushNumber(self.lifeTime)
	os:pushString(self.title)
	os:pushNumber(self.attCount)
	os:pushNumberList(self.additional)
end


i3k_sbean.MailInfo = i3k_class("MailInfo")
function i3k_sbean.MailInfo:ctor()
	--self.pageNo:		int32	
	--self.pageCount:		int32	
	--self.mailCount:		int32	
	--self.unreadMailCount:		int32	
	--self.mails:		vector[MailBrief]	
end

function i3k_sbean.MailInfo:clone()
	return clone(self)
end

function i3k_sbean.MailInfo:decode(is)
	self.pageNo = is:popNumber()
	self.pageCount = is:popNumber()
	self.mailCount = is:popNumber()
	self.unreadMailCount = is:popNumber()
	self.mails = is:popList(i3k_sbean.MailBrief)
end

function i3k_sbean.MailInfo:encode(os)
	os:pushNumber(self.pageNo)
	os:pushNumber(self.pageCount)
	os:pushNumber(self.mailCount)
	os:pushNumber(self.unreadMailCount)
	os:pushList(self.mails)
end


i3k_sbean.RankRole = i3k_class("RankRole")
function i3k_sbean.RankRole:ctor()
	--self.role:		RoleOverview	
	--self.rankKey:		int32	
end

function i3k_sbean.RankRole:clone()
	return clone(self)
end

function i3k_sbean.RankRole:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.rankKey = is:popNumber()
end

function i3k_sbean.RankRole:encode(os)
	os:push(self.role)
	os:pushNumber(self.rankKey)
end


i3k_sbean.RankBrief = i3k_class("RankBrief")
function i3k_sbean.RankBrief:ctor()
	--self.id:		int32	
	--self.createTime:		int32	
	--self.rankSize:		int32	
end

function i3k_sbean.RankBrief:clone()
	return clone(self)
end

function i3k_sbean.RankBrief:decode(is)
	self.id = is:popNumber()
	self.createTime = is:popNumber()
	self.rankSize = is:popNumber()
end

function i3k_sbean.RankBrief:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.createTime)
	os:pushNumber(self.rankSize)
end


i3k_sbean.RankSect = i3k_class("RankSect")
function i3k_sbean.RankSect:ctor()
	--self.sect:		SectOverview	
	--self.rankKey:		int32	
end

function i3k_sbean.RankSect:clone()
	return clone(self)
end

function i3k_sbean.RankSect:decode(is)
	self.sect = is:pop(i3k_sbean.SectOverview)
	self.rankKey = is:popNumber()
end

function i3k_sbean.RankSect:encode(os)
	os:push(self.sect)
	os:pushNumber(self.rankKey)
end


i3k_sbean.RankDemon = i3k_class("RankDemon")
function i3k_sbean.RankDemon:ctor()
	--self.roleID:		int32	
	--self.rankKey:		int32	
end

function i3k_sbean.RankDemon:clone()
	return clone(self)
end

function i3k_sbean.RankDemon:decode(is)
	self.roleID = is:popNumber()
	self.rankKey = is:popNumber()
end

function i3k_sbean.RankDemon:encode(os)
	os:pushNumber(self.roleID)
	os:pushNumber(self.rankKey)
end


i3k_sbean.RankFightGroup = i3k_class("RankFightGroup")
function i3k_sbean.RankFightGroup:ctor()
	--self.group:		SectFightGroupDetail	
	--self.rankKey:		int32	
end

function i3k_sbean.RankFightGroup:clone()
	return clone(self)
end

function i3k_sbean.RankFightGroup:decode(is)
	self.group = is:pop(i3k_sbean.SectFightGroupDetail)
	self.rankKey = is:popNumber()
end

function i3k_sbean.RankFightGroup:encode(os)
	os:push(self.group)
	os:pushNumber(self.rankKey)
end


i3k_sbean.RankFightTeam = i3k_class("RankFightTeam")
function i3k_sbean.RankFightTeam:ctor()
	--self.team:		FightTeamOverview	
	--self.rankKey:		int32	
end

function i3k_sbean.RankFightTeam:clone()
	return clone(self)
end

function i3k_sbean.RankFightTeam:decode(is)
	self.team = is:pop(i3k_sbean.FightTeamOverview)
	self.rankKey = is:popNumber()
end

function i3k_sbean.RankFightTeam:encode(os)
	os:push(self.team)
	os:pushNumber(self.rankKey)
end


i3k_sbean.SectOverview = i3k_class("SectOverview")
function i3k_sbean.SectOverview:ctor()
	--self.sectId:		int32	
	--self.name:		string	
	--self.level:		int32	
	--self.chiefId:		int32	
	--self.chiefName:		string	
	--self.memberCount:		int32	
	--self.creed:		string	
	--self.icon:		int16	
	--self.frame:		int16	
	--self.joinLvlReq:		int32	
end

function i3k_sbean.SectOverview:clone()
	return clone(self)
end

function i3k_sbean.SectOverview:decode(is)
	self.sectId = is:popNumber()
	self.name = is:popString()
	self.level = is:popNumber()
	self.chiefId = is:popNumber()
	self.chiefName = is:popString()
	self.memberCount = is:popNumber()
	self.creed = is:popString()
	self.icon = is:popNumber()
	self.frame = is:popNumber()
	self.joinLvlReq = is:popNumber()
end

function i3k_sbean.SectOverview:encode(os)
	os:pushNumber(self.sectId)
	os:pushString(self.name)
	os:pushNumber(self.level)
	os:pushNumber(self.chiefId)
	os:pushString(self.chiefName)
	os:pushNumber(self.memberCount)
	os:pushString(self.creed)
	os:pushNumber(self.icon)
	os:pushNumber(self.frame)
	os:pushNumber(self.joinLvlReq)
end


i3k_sbean.SectDetail = i3k_class("SectDetail")
function i3k_sbean.SectDetail:ctor()
	--self.overview:		SectOverview	
	--self.lastUpgradeTime:		int32	
	--self.vitality:		int32	
	--self.applicants:		int32	
	--self.dayMailTimes:		int32	
	--self.applicationPush:		int8	
	--self.qqGroup:		string	
	--self.dayKickTimes:		int32	
end

function i3k_sbean.SectDetail:clone()
	return clone(self)
end

function i3k_sbean.SectDetail:decode(is)
	self.overview = is:pop(i3k_sbean.SectOverview)
	self.lastUpgradeTime = is:popNumber()
	self.vitality = is:popNumber()
	self.applicants = is:popNumber()
	self.dayMailTimes = is:popNumber()
	self.applicationPush = is:popNumber()
	self.qqGroup = is:popString()
	self.dayKickTimes = is:popNumber()
end

function i3k_sbean.SectDetail:encode(os)
	os:push(self.overview)
	os:pushNumber(self.lastUpgradeTime)
	os:pushNumber(self.vitality)
	os:pushNumber(self.applicants)
	os:pushNumber(self.dayMailTimes)
	os:pushNumber(self.applicationPush)
	os:pushString(self.qqGroup)
	os:pushNumber(self.dayKickTimes)
end


i3k_sbean.SectMember = i3k_class("SectMember")
function i3k_sbean.SectMember:ctor()
	--self.role:		RoleOverview	
	--self.stats:		RoleSectStats	
	--self.joinTime:		int32	
	--self.lastLogoutTime:		int32	
end

function i3k_sbean.SectMember:clone()
	return clone(self)
end

function i3k_sbean.SectMember:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.stats = is:pop(i3k_sbean.RoleSectStats)
	self.joinTime = is:popNumber()
	self.lastLogoutTime = is:popNumber()
end

function i3k_sbean.SectMember:encode(os)
	os:push(self.role)
	os:push(self.stats)
	os:pushNumber(self.joinTime)
	os:pushNumber(self.lastLogoutTime)
end


i3k_sbean.RoleSectData = i3k_class("RoleSectData")
function i3k_sbean.RoleSectData:ctor()
	--self.contribution:		int32	
	--self.historyContribution:		int32	
	--self.dayWorshipTimes:		vector[int32]	
	--self.dayBanquetOpenTimes:		vector[int32]	
	--self.dayBanquetJoinTimes:		vector[int32]	
	--self.daySectMapEnterTimes:		map[int32, int32]	
	--self.historyBanquetOpenTimes:		int32	
	--self.leaveTimes:		int32	
	--self.lastLeaveTime:		int32	
	--self.lastJoinTime:		int32	
	--self.isByKick:		int8	
	--self.sectBrief:		SectBrief	
end

function i3k_sbean.RoleSectData:clone()
	return clone(self)
end

function i3k_sbean.RoleSectData:decode(is)
	self.contribution = is:popNumber()
	self.historyContribution = is:popNumber()
	self.dayWorshipTimes = is:popNumberList()
	self.dayBanquetOpenTimes = is:popNumberList()
	self.dayBanquetJoinTimes = is:popNumberList()
	self.daySectMapEnterTimes = is:popNumberNumberMap()
	self.historyBanquetOpenTimes = is:popNumber()
	self.leaveTimes = is:popNumber()
	self.lastLeaveTime = is:popNumber()
	self.lastJoinTime = is:popNumber()
	self.isByKick = is:popNumber()
	self.sectBrief = is:pop(i3k_sbean.SectBrief)
end

function i3k_sbean.RoleSectData:encode(os)
	os:pushNumber(self.contribution)
	os:pushNumber(self.historyContribution)
	os:pushNumberList(self.dayWorshipTimes)
	os:pushNumberList(self.dayBanquetOpenTimes)
	os:pushNumberList(self.dayBanquetJoinTimes)
	os:pushNumberNumberMap(self.daySectMapEnterTimes)
	os:pushNumber(self.historyBanquetOpenTimes)
	os:pushNumber(self.leaveTimes)
	os:pushNumber(self.lastLeaveTime)
	os:pushNumber(self.lastJoinTime)
	os:pushNumber(self.isByKick)
	os:push(self.sectBrief)
end


i3k_sbean.RoleSectStats = i3k_class("RoleSectStats")
function i3k_sbean.RoleSectStats:ctor()
	--self.contributionTotal:		int32	
	--self.dayVitality:		int32	
	--self.weekVitality:		int32	
	--self.weekSectMapTime:		int32	
end

function i3k_sbean.RoleSectStats:clone()
	return clone(self)
end

function i3k_sbean.RoleSectStats:decode(is)
	self.contributionTotal = is:popNumber()
	self.dayVitality = is:popNumber()
	self.weekVitality = is:popNumber()
	self.weekSectMapTime = is:popNumber()
end

function i3k_sbean.RoleSectStats:encode(os)
	os:pushNumber(self.contributionTotal)
	os:pushNumber(self.dayVitality)
	os:pushNumber(self.weekVitality)
	os:pushNumber(self.weekSectMapTime)
end


i3k_sbean.SectWorshipedData = i3k_class("SectWorshipedData")
function i3k_sbean.SectWorshipedData:ctor()
	--self.dayWorshipedTimes:		int32	
	--self.worshipReward:		int32	
end

function i3k_sbean.SectWorshipedData:clone()
	return clone(self)
end

function i3k_sbean.SectWorshipedData:decode(is)
	self.dayWorshipedTimes = is:popNumber()
	self.worshipReward = is:popNumber()
end

function i3k_sbean.SectWorshipedData:encode(os)
	os:pushNumber(self.dayWorshipedTimes)
	os:pushNumber(self.worshipReward)
end


i3k_sbean.SectInfo = i3k_class("SectInfo")
function i3k_sbean.SectInfo:ctor()
	--self.data:		RoleSectData	
	--self.sect:		SectDetail	
	--self.stats:		RoleSectStats	
	--self.maxSectLvl:		int32	
	--self.sectFlagNum:		int32	
	--self.sectZoneOpen:		int32	
	--self.takeMapRewardCnt:		int32	
	--self.dragonCrystal:		int32	
end

function i3k_sbean.SectInfo:clone()
	return clone(self)
end

function i3k_sbean.SectInfo:decode(is)
	self.data = is:pop(i3k_sbean.RoleSectData)
	self.sect = is:pop(i3k_sbean.SectDetail)
	self.stats = is:pop(i3k_sbean.RoleSectStats)
	self.maxSectLvl = is:popNumber()
	self.sectFlagNum = is:popNumber()
	self.sectZoneOpen = is:popNumber()
	self.takeMapRewardCnt = is:popNumber()
	self.dragonCrystal = is:popNumber()
end

function i3k_sbean.SectInfo:encode(os)
	os:push(self.data)
	os:push(self.sect)
	os:push(self.stats)
	os:pushNumber(self.maxSectLvl)
	os:pushNumber(self.sectFlagNum)
	os:pushNumber(self.sectZoneOpen)
	os:pushNumber(self.takeMapRewardCnt)
	os:pushNumber(self.dragonCrystal)
end


i3k_sbean.SectMembers = i3k_class("SectMembers")
function i3k_sbean.SectMembers:ctor()
	--self.chief:		int32	
	--self.deputy:		set[int32]	
	--self.elder:		set[int32]	
	--self.elite:		set[int32]	
	--self.members:		vector[SectMember]	
end

function i3k_sbean.SectMembers:clone()
	return clone(self)
end

function i3k_sbean.SectMembers:decode(is)
	self.chief = is:popNumber()
	self.deputy = is:popNumberSet()
	self.elder = is:popNumberSet()
	self.elite = is:popNumberSet()
	self.members = is:popList(i3k_sbean.SectMember)
end

function i3k_sbean.SectMembers:encode(os)
	os:pushNumber(self.chief)
	os:pushNumberSet(self.deputy)
	os:pushNumberSet(self.elder)
	os:pushNumberSet(self.elite)
	os:pushList(self.members)
end


i3k_sbean.SectBanquet = i3k_class("SectBanquet")
function i3k_sbean.SectBanquet:ctor()
	--self.bid:		int32	
	--self.openRoleId:		int32	
	--self.openRoleName:		string	
	--self.type:		int32	
	--self.openTime:		int32	
	--self.roles:		set[int32]	
end

function i3k_sbean.SectBanquet:clone()
	return clone(self)
end

function i3k_sbean.SectBanquet:decode(is)
	self.bid = is:popNumber()
	self.openRoleId = is:popNumber()
	self.openRoleName = is:popString()
	self.type = is:popNumber()
	self.openTime = is:popNumber()
	self.roles = is:popNumberSet()
end

function i3k_sbean.SectBanquet:encode(os)
	os:pushNumber(self.bid)
	os:pushNumber(self.openRoleId)
	os:pushString(self.openRoleName)
	os:pushNumber(self.type)
	os:pushNumber(self.openTime)
	os:pushNumberSet(self.roles)
end


i3k_sbean.SectMapAllocation = i3k_class("SectMapAllocation")
function i3k_sbean.SectMapAllocation:ctor()
	--self.rewards:		map[int32, SectMapRewardRecord]	
	--self.members:		map[int32, RoleOverview]	
end

function i3k_sbean.SectMapAllocation:clone()
	return clone(self)
end

function i3k_sbean.SectMapAllocation:decode(is)
	self.rewards = is:popNumberMap(i3k_sbean.SectMapRewardRecord)
	self.members = is:popNumberMap(i3k_sbean.RoleOverview)
end

function i3k_sbean.SectMapAllocation:encode(os)
	os:pushNumberMap(self.rewards)
	os:pushNumberMap(self.members)
end


i3k_sbean.SectMapDamage = i3k_class("SectMapDamage")
function i3k_sbean.SectMapDamage:ctor()
	--self.accDamage:		map[int32, int32]	
	--self.maxDamage:		map[int32, int32]	
	--self.members:		map[int32, RoleOverview]	
end

function i3k_sbean.SectMapDamage:clone()
	return clone(self)
end

function i3k_sbean.SectMapDamage:decode(is)
	self.accDamage = is:popNumberNumberMap()
	self.maxDamage = is:popNumberNumberMap()
	self.members = is:popNumberMap(i3k_sbean.RoleOverview)
end

function i3k_sbean.SectMapDamage:encode(os)
	os:pushNumberNumberMap(self.accDamage)
	os:pushNumberNumberMap(self.maxDamage)
	os:pushNumberMap(self.members)
end


i3k_sbean.SectMapData = i3k_class("SectMapData")
function i3k_sbean.SectMapData:ctor()
	--self.id:		int32	
	--self.startTime:		int32	
	--self.progress:		map[int32, int32]	
	--self.accDamage:		map[int32, int32]	
	--self.maxDamage:		map[int32, int32]	
end

function i3k_sbean.SectMapData:clone()
	return clone(self)
end

function i3k_sbean.SectMapData:decode(is)
	self.id = is:popNumber()
	self.startTime = is:popNumber()
	self.progress = is:popNumberNumberMap()
	self.accDamage = is:popNumberNumberMap()
	self.maxDamage = is:popNumberNumberMap()
end

function i3k_sbean.SectMapData:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.startTime)
	os:pushNumberNumberMap(self.progress)
	os:pushNumberNumberMap(self.accDamage)
	os:pushNumberNumberMap(self.maxDamage)
end


i3k_sbean.SectMapRewards = i3k_class("SectMapRewards")
function i3k_sbean.SectMapRewards:ctor()
	--self.rewards:		map[int32, SectMapRewardRecord]	
end

function i3k_sbean.SectMapRewards:clone()
	return clone(self)
end

function i3k_sbean.SectMapRewards:decode(is)
	self.rewards = is:popNumberMap(i3k_sbean.SectMapRewardRecord)
end

function i3k_sbean.SectMapRewards:encode(os)
	os:pushNumberMap(self.rewards)
end


i3k_sbean.SectMapStatus = i3k_class("SectMapStatus")
function i3k_sbean.SectMapStatus:ctor()
	--self.bossLostHp:		int32	
	--self.dayResetTimes:		int32	
end

function i3k_sbean.SectMapStatus:clone()
	return clone(self)
end

function i3k_sbean.SectMapStatus:decode(is)
	self.bossLostHp = is:popNumber()
	self.dayResetTimes = is:popNumber()
end

function i3k_sbean.SectMapStatus:encode(os)
	os:pushNumber(self.bossLostHp)
	os:pushNumber(self.dayResetTimes)
end


i3k_sbean.SectMapRewardRecord = i3k_class("SectMapRewardRecord")
function i3k_sbean.SectMapRewardRecord:ctor()
	--self.rewardId:		int32	
	--self.count:		int32	
	--self.applicants:		vector[int32]	
end

function i3k_sbean.SectMapRewardRecord:clone()
	return clone(self)
end

function i3k_sbean.SectMapRewardRecord:decode(is)
	self.rewardId = is:popNumber()
	self.count = is:popNumber()
	self.applicants = is:popNumberList()
end

function i3k_sbean.SectMapRewardRecord:encode(os)
	os:pushNumber(self.rewardId)
	os:pushNumber(self.count)
	os:pushNumberList(self.applicants)
end


i3k_sbean.SectMapRewardsLog = i3k_class("SectMapRewardsLog")
function i3k_sbean.SectMapRewardsLog:ctor()
	--self.time:		int32	
	--self.rewardId:		int32	
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.SectMapRewardsLog:clone()
	return clone(self)
end

function i3k_sbean.SectMapRewardsLog:decode(is)
	self.time = is:popNumber()
	self.rewardId = is:popNumber()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.SectMapRewardsLog:encode(os)
	os:pushNumber(self.time)
	os:pushNumber(self.rewardId)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


i3k_sbean.SectMapAttacker = i3k_class("SectMapAttacker")
function i3k_sbean.SectMapAttacker:ctor()
	--self.roleId:		int32	
	--self.endProgressTime:		int32	
	--self.startProgress:		int32	
	--self.endProgress:		int32	
	--self.accDamage:		int32	
	--self.accDamageRank:		int32	
	--self.maxDamageRank:		int32	
	--self.exReward:		int32	
	--self.bossDamage:		int32	
end

function i3k_sbean.SectMapAttacker:clone()
	return clone(self)
end

function i3k_sbean.SectMapAttacker:decode(is)
	self.roleId = is:popNumber()
	self.endProgressTime = is:popNumber()
	self.startProgress = is:popNumber()
	self.endProgress = is:popNumber()
	self.accDamage = is:popNumber()
	self.accDamageRank = is:popNumber()
	self.maxDamageRank = is:popNumber()
	self.exReward = is:popNumber()
	self.bossDamage = is:popNumber()
end

function i3k_sbean.SectMapAttacker:encode(os)
	os:pushNumber(self.roleId)
	os:pushNumber(self.endProgressTime)
	os:pushNumber(self.startProgress)
	os:pushNumber(self.endProgress)
	os:pushNumber(self.accDamage)
	os:pushNumber(self.accDamageRank)
	os:pushNumber(self.maxDamageRank)
	os:pushNumber(self.exReward)
	os:pushNumber(self.bossDamage)
end


i3k_sbean.SectMapInfo = i3k_class("SectMapInfo")
function i3k_sbean.SectMapInfo:ctor()
	--self.progress:		map[int32, int32]	
	--self.curAttacker:		RoleOverview	
end

function i3k_sbean.SectMapInfo:clone()
	return clone(self)
end

function i3k_sbean.SectMapInfo:decode(is)
	self.progress = is:popNumberNumberMap()
	self.curAttacker = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.SectMapInfo:encode(os)
	os:pushNumberNumberMap(self.progress)
	os:push(self.curAttacker)
end


i3k_sbean.SectDeliverSkinData = i3k_class("SectDeliverSkinData")
function i3k_sbean.SectDeliverSkinData:ctor()
	--self.unlockIds:		set[int32]	
	--self.curId:		int32	
	--self.curUseId:		int32	
end

function i3k_sbean.SectDeliverSkinData:clone()
	return clone(self)
end

function i3k_sbean.SectDeliverSkinData:decode(is)
	self.unlockIds = is:popNumberSet()
	self.curId = is:popNumber()
	self.curUseId = is:popNumber()
end

function i3k_sbean.SectDeliverSkinData:encode(os)
	os:pushNumberSet(self.unlockIds)
	os:pushNumber(self.curId)
	os:pushNumber(self.curUseId)
end


i3k_sbean.SectDeliverTaskInfo = i3k_class("SectDeliverTaskInfo")
function i3k_sbean.SectDeliverTaskInfo:ctor()
	--self.id:		int32	
	--self.flag:		int8	
end

function i3k_sbean.SectDeliverTaskInfo:clone()
	return clone(self)
end

function i3k_sbean.SectDeliverTaskInfo:decode(is)
	self.id = is:popNumber()
	self.flag = is:popNumber()
end

function i3k_sbean.SectDeliverTaskInfo:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.flag)
end


i3k_sbean.SectAssist = i3k_class("SectAssist")
function i3k_sbean.SectAssist:ctor()
	--self.role:		RoleOverview	
	--self.assistTimes:		int32	
end

function i3k_sbean.SectAssist:clone()
	return clone(self)
end

function i3k_sbean.SectAssist:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.assistTimes = is:popNumber()
end

function i3k_sbean.SectAssist:encode(os)
	os:push(self.role)
	os:pushNumber(self.assistTimes)
end


i3k_sbean.Scope = i3k_class("Scope")
function i3k_sbean.Scope:ctor()
	--self.type:		int32	
	--self.args:		vector[int32]	
end

function i3k_sbean.Scope:clone()
	return clone(self)
end

function i3k_sbean.Scope:decode(is)
	self.type = is:popNumber()
	self.args = is:popNumberList()
end

function i3k_sbean.Scope:encode(os)
	os:pushNumber(self.type)
	os:pushNumberList(self.args)
end


i3k_sbean.SubStatus = i3k_class("SubStatus")
function i3k_sbean.SubStatus:ctor()
	--self.odds:		int32	
	--self.buffID:		int32	
end

function i3k_sbean.SubStatus:clone()
	return clone(self)
end

function i3k_sbean.SubStatus:decode(is)
	self.odds = is:popNumber()
	self.buffID = is:popNumber()
end

function i3k_sbean.SubStatus:encode(os)
	os:pushNumber(self.odds)
	os:pushNumber(self.buffID)
end


i3k_sbean.SectTaskReward = i3k_class("SectTaskReward")
function i3k_sbean.SectTaskReward:ctor()
	--self.exp:		int32	
	--self.ontribution:		int32	
	--self.items:		vector[DummyGoods]	
	--self.tasks:		map[int32,int32]	
end

function i3k_sbean.SectTaskReward:clone()
	return clone(self)
end

function i3k_sbean.SectTaskReward:decode(is)
	self.exp = is:popNumber()
	self.ontribution = is:popNumber()
	self.items = is:popList(i3k_sbean.DummyGoods)
	self.tasks = is:popNumberNumberMap()
end

function i3k_sbean.SectTaskReward:encode(os)
	os:pushNumber(self.exp)
	os:pushNumber(self.ontribution)
	os:pushList(self.items)
	os:pushNumberNumberMap(self.tasks)
end


i3k_sbean.ArenaStateInfo = i3k_class("ArenaStateInfo")
function i3k_sbean.ArenaStateInfo:ctor()
	--self.point:		int32	
	--self.rankNow:		int32	
	--self.rankBest:		int32	
	--self.timeUsed:		int32	
	--self.timeBuyed:		int32	
	--self.lastFightTime:		int32	
	--self.pets:		vector[int32]	
	--self.enemies:		map[int32, BattleEnemyOverview]	
	--self.scoreReward:		int32	
	--self.hideDefence:		int8	
end

function i3k_sbean.ArenaStateInfo:clone()
	return clone(self)
end

function i3k_sbean.ArenaStateInfo:decode(is)
	self.point = is:popNumber()
	self.rankNow = is:popNumber()
	self.rankBest = is:popNumber()
	self.timeUsed = is:popNumber()
	self.timeBuyed = is:popNumber()
	self.lastFightTime = is:popNumber()
	self.pets = is:popNumberList()
	self.enemies = is:popNumberMap(i3k_sbean.BattleEnemyOverview)
	self.scoreReward = is:popNumber()
	self.hideDefence = is:popNumber()
end

function i3k_sbean.ArenaStateInfo:encode(os)
	os:pushNumber(self.point)
	os:pushNumber(self.rankNow)
	os:pushNumber(self.rankBest)
	os:pushNumber(self.timeUsed)
	os:pushNumber(self.timeBuyed)
	os:pushNumber(self.lastFightTime)
	os:pushNumberList(self.pets)
	os:pushNumberMap(self.enemies)
	os:pushNumber(self.scoreReward)
	os:pushNumber(self.hideDefence)
end


i3k_sbean.SuperArenaInfo = i3k_class("SuperArenaInfo")
function i3k_sbean.SuperArenaInfo:ctor()
	--self.point:		int32	
	--self.teamFightCoin:		int32	
	--self.weekRank:		int32	
	--self.logs:		map[int32, SuperArenaLog]	
	--self.pets:		set[int32]	
	--self.weaponSeq:		vector[int32]	
end

function i3k_sbean.SuperArenaInfo:clone()
	return clone(self)
end

function i3k_sbean.SuperArenaInfo:decode(is)
	self.point = is:popNumber()
	self.teamFightCoin = is:popNumber()
	self.weekRank = is:popNumber()
	self.logs = is:popNumberMap(i3k_sbean.SuperArenaLog)
	self.pets = is:popNumberSet()
	self.weaponSeq = is:popNumberList()
end

function i3k_sbean.SuperArenaInfo:encode(os)
	os:pushNumber(self.point)
	os:pushNumber(self.teamFightCoin)
	os:pushNumber(self.weekRank)
	os:pushNumberMap(self.logs)
	os:pushNumberSet(self.pets)
	os:pushNumberList(self.weaponSeq)
end


i3k_sbean.BWArenaInfo = i3k_class("BWArenaInfo")
function i3k_sbean.BWArenaInfo:ctor()
	--self.rank:		int32	
	--self.timeUsed:		int32	
	--self.timeBuyed:		int32	
	--self.dayRefreshTimes:		int32	
	--self.pets:		set[int32]	
	--self.lvl:		int32	
	--self.exp:		int32	
	--self.rewardScore:		int32	
	--self.enemies:		vector[BWArenaArrayOverview]	
end

function i3k_sbean.BWArenaInfo:clone()
	return clone(self)
end

function i3k_sbean.BWArenaInfo:decode(is)
	self.rank = is:popNumber()
	self.timeUsed = is:popNumber()
	self.timeBuyed = is:popNumber()
	self.dayRefreshTimes = is:popNumber()
	self.pets = is:popNumberSet()
	self.lvl = is:popNumber()
	self.exp = is:popNumber()
	self.rewardScore = is:popNumber()
	self.enemies = is:popList(i3k_sbean.BWArenaArrayOverview)
end

function i3k_sbean.BWArenaInfo:encode(os)
	os:pushNumber(self.rank)
	os:pushNumber(self.timeUsed)
	os:pushNumber(self.timeBuyed)
	os:pushNumber(self.dayRefreshTimes)
	os:pushNumberSet(self.pets)
	os:pushNumber(self.lvl)
	os:pushNumber(self.exp)
	os:pushNumber(self.rewardScore)
	os:pushList(self.enemies)
end


i3k_sbean.ArenaEnemy = i3k_class("ArenaEnemy")
function i3k_sbean.ArenaEnemy:ctor()
	--self.rank:		int32	
	--self.info:		RoleOverview	
end

function i3k_sbean.ArenaEnemy:clone()
	return clone(self)
end

function i3k_sbean.ArenaEnemy:decode(is)
	self.rank = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.ArenaEnemy:encode(os)
	os:pushNumber(self.rank)
	os:push(self.info)
end


i3k_sbean.ArenaArray = i3k_class("ArenaArray")
function i3k_sbean.ArenaArray:ctor()
	--self.fightPower:		int32	
	--self.role:		RoleProfile	
	--self.pets:		vector[PetProfile]	
end

function i3k_sbean.ArenaArray:clone()
	return clone(self)
end

function i3k_sbean.ArenaArray:decode(is)
	self.fightPower = is:popNumber()
	self.role = is:pop(i3k_sbean.RoleProfile)
	self.pets = is:popList(i3k_sbean.PetProfile)
end

function i3k_sbean.ArenaArray:encode(os)
	os:pushNumber(self.fightPower)
	os:push(self.role)
	os:pushList(self.pets)
end


i3k_sbean.TowerSweepReqInfo = i3k_class("TowerSweepReqInfo")
function i3k_sbean.TowerSweepReqInfo:ctor()
	--self.groupId:		int32	
	--self.floor:		int32	
end

function i3k_sbean.TowerSweepReqInfo:clone()
	return clone(self)
end

function i3k_sbean.TowerSweepReqInfo:decode(is)
	self.groupId = is:popNumber()
	self.floor = is:popNumber()
end

function i3k_sbean.TowerSweepReqInfo:encode(os)
	os:pushNumber(self.groupId)
	os:pushNumber(self.floor)
end


i3k_sbean.TowerSweepResultInfo = i3k_class("TowerSweepResultInfo")
function i3k_sbean.TowerSweepResultInfo:ctor()
	--self.groupId:		int32	
	--self.floor:		int32	
	--self.mapSummary:		MapSummary	
end

function i3k_sbean.TowerSweepResultInfo:clone()
	return clone(self)
end

function i3k_sbean.TowerSweepResultInfo:decode(is)
	self.groupId = is:popNumber()
	self.floor = is:popNumber()
	self.mapSummary = is:pop(i3k_sbean.MapSummary)
end

function i3k_sbean.TowerSweepResultInfo:encode(os)
	os:pushNumber(self.groupId)
	os:pushNumber(self.floor)
	os:push(self.mapSummary)
end


i3k_sbean.SectFinishedTaskRes = i3k_class("SectFinishedTaskRes")
function i3k_sbean.SectFinishedTaskRes:ctor()
	--self.sectTask:		vector[SectFinishedSelfTask]	
	--self.shareCount:		map[int32, int32]	
end

function i3k_sbean.SectFinishedTaskRes:clone()
	return clone(self)
end

function i3k_sbean.SectFinishedTaskRes:decode(is)
	self.sectTask = is:popList(i3k_sbean.SectFinishedSelfTask)
	self.shareCount = is:popNumberNumberMap()
end

function i3k_sbean.SectFinishedTaskRes:encode(os)
	os:pushList(self.sectTask)
	os:pushNumberNumberMap(self.shareCount)
end


i3k_sbean.BossState = i3k_class("BossState")
function i3k_sbean.BossState:ctor()
	--self.state:		int32	
	--self.killerName:		string	
end

function i3k_sbean.BossState:clone()
	return clone(self)
end

function i3k_sbean.BossState:decode(is)
	self.state = is:popNumber()
	self.killerName = is:popString()
end

function i3k_sbean.BossState:encode(os)
	os:pushNumber(self.state)
	os:pushString(self.killerName)
end


i3k_sbean.FriendOverview = i3k_class("FriendOverview")
function i3k_sbean.FriendOverview:ctor()
	--self.overview:		RoleOverview	
	--self.personalMsg:		string	
	--self.lastLoginTime:		int32	
	--self.online:		int8	
end

function i3k_sbean.FriendOverview:clone()
	return clone(self)
end

function i3k_sbean.FriendOverview:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.personalMsg = is:popString()
	self.lastLoginTime = is:popNumber()
	self.online = is:popNumber()
end

function i3k_sbean.FriendOverview:encode(os)
	os:push(self.overview)
	os:pushString(self.personalMsg)
	os:pushNumber(self.lastLoginTime)
	os:pushNumber(self.online)
end


i3k_sbean.EnemyOverview = i3k_class("EnemyOverview")
function i3k_sbean.EnemyOverview:ctor()
	--self.overview:		RoleOverview	
	--self.killTime:		int32	
	--self.curMapID:		int32	
	--self.curLine:		int32	
end

function i3k_sbean.EnemyOverview:clone()
	return clone(self)
end

function i3k_sbean.EnemyOverview:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.killTime = is:popNumber()
	self.curMapID = is:popNumber()
	self.curLine = is:popNumber()
end

function i3k_sbean.EnemyOverview:encode(os)
	os:push(self.overview)
	os:pushNumber(self.killTime)
	os:pushNumber(self.curMapID)
	os:pushNumber(self.curLine)
end


i3k_sbean.FriendInfo = i3k_class("FriendInfo")
function i3k_sbean.FriendInfo:ctor()
	--self.focusValue:		int32	
	--self.addTime:		int32	
	--self.sendVit:		int32	
	--self.receiveVit:		int32	
	--self.eachFriend:		int32	
	--self.fov:		FriendOverview	
end

function i3k_sbean.FriendInfo:clone()
	return clone(self)
end

function i3k_sbean.FriendInfo:decode(is)
	self.focusValue = is:popNumber()
	self.addTime = is:popNumber()
	self.sendVit = is:popNumber()
	self.receiveVit = is:popNumber()
	self.eachFriend = is:popNumber()
	self.fov = is:pop(i3k_sbean.FriendOverview)
end

function i3k_sbean.FriendInfo:encode(os)
	os:pushNumber(self.focusValue)
	os:pushNumber(self.addTime)
	os:pushNumber(self.sendVit)
	os:pushNumber(self.receiveVit)
	os:pushNumber(self.eachFriend)
	os:push(self.fov)
end


i3k_sbean.FlowerOverview = i3k_class("FlowerOverview")
function i3k_sbean.FlowerOverview:ctor()
	--self.overview:		RoleOverview	
	--self.vipLvl:		int32	
	--self.charm:		int32	
	--self.contribution:		int32	
end

function i3k_sbean.FlowerOverview:clone()
	return clone(self)
end

function i3k_sbean.FlowerOverview:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.vipLvl = is:popNumber()
	self.charm = is:popNumber()
	self.contribution = is:popNumber()
end

function i3k_sbean.FlowerOverview:encode(os)
	os:push(self.overview)
	os:pushNumber(self.vipLvl)
	os:pushNumber(self.charm)
	os:pushNumber(self.contribution)
end


i3k_sbean.TimeData = i3k_class("TimeData")
function i3k_sbean.TimeData:ctor()
	--self.rid:		int32	
	--self.time:		int32	
end

function i3k_sbean.TimeData:clone()
	return clone(self)
end

function i3k_sbean.TimeData:decode(is)
	self.rid = is:popNumber()
	self.time = is:popNumber()
end

function i3k_sbean.TimeData:encode(os)
	os:pushNumber(self.rid)
	os:pushNumber(self.time)
end


i3k_sbean.ChallengeTaskInfo = i3k_class("ChallengeTaskInfo")
function i3k_sbean.ChallengeTaskInfo:ctor()
	--self.type:		int32	
	--self.seq:		int32	
	--self.seqValue:		int32	
	--self.reward:		int8	
end

function i3k_sbean.ChallengeTaskInfo:clone()
	return clone(self)
end

function i3k_sbean.ChallengeTaskInfo:decode(is)
	self.type = is:popNumber()
	self.seq = is:popNumber()
	self.seqValue = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.ChallengeTaskInfo:encode(os)
	os:pushNumber(self.type)
	os:pushNumber(self.seq)
	os:pushNumber(self.seqValue)
	os:pushNumber(self.reward)
end


i3k_sbean.FameInfo = i3k_class("FameInfo")
function i3k_sbean.FameInfo:ctor()
	--self.reawrd:		int32	
	--self.upgradeTime:		int32	
	--self.nextLevelCond:		vector[int32]	
end

function i3k_sbean.FameInfo:clone()
	return clone(self)
end

function i3k_sbean.FameInfo:decode(is)
	self.reawrd = is:popNumber()
	self.upgradeTime = is:popNumber()
	self.nextLevelCond = is:popNumberList()
end

function i3k_sbean.FameInfo:encode(os)
	os:pushNumber(self.reawrd)
	os:pushNumber(self.upgradeTime)
	os:pushNumberList(self.nextLevelCond)
end


i3k_sbean.QuizGiftRankRole = i3k_class("QuizGiftRankRole")
function i3k_sbean.QuizGiftRankRole:ctor()
	--self.bonus:		int32	
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.QuizGiftRankRole:clone()
	return clone(self)
end

function i3k_sbean.QuizGiftRankRole:decode(is)
	self.bonus = is:popNumber()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.QuizGiftRankRole:encode(os)
	os:pushNumber(self.bonus)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


i3k_sbean.QuizGiftInfo = i3k_class("QuizGiftInfo")
function i3k_sbean.QuizGiftInfo:ctor()
	--self.startTime:		int32	
	--self.curSeq:		int32	
	--self.curQuestion:		int32	
	--self.data:		DBQuizGift	
end

function i3k_sbean.QuizGiftInfo:clone()
	return clone(self)
end

function i3k_sbean.QuizGiftInfo:decode(is)
	self.startTime = is:popNumber()
	self.curSeq = is:popNumber()
	self.curQuestion = is:popNumber()
	self.data = is:pop(i3k_sbean.DBQuizGift)
end

function i3k_sbean.QuizGiftInfo:encode(os)
	os:pushNumber(self.startTime)
	os:pushNumber(self.curSeq)
	os:pushNumber(self.curQuestion)
	os:push(self.data)
end


i3k_sbean.SectWarOverview = i3k_class("SectWarOverview")
function i3k_sbean.SectWarOverview:ctor()
	--self.rid:		int32	
	--self.rank:		int32	
	--self.name:		string	
	--self.level:		int32	
	--self.kills:		int32	
	--self.bekills:		int32	
	--self.assist:		int32	
	--self.mineralScore:		int32	
	--self.score:		int32	
	--self.quit:		int8	
end

function i3k_sbean.SectWarOverview:clone()
	return clone(self)
end

function i3k_sbean.SectWarOverview:decode(is)
	self.rid = is:popNumber()
	self.rank = is:popNumber()
	self.name = is:popString()
	self.level = is:popNumber()
	self.kills = is:popNumber()
	self.bekills = is:popNumber()
	self.assist = is:popNumber()
	self.mineralScore = is:popNumber()
	self.score = is:popNumber()
	self.quit = is:popNumber()
end

function i3k_sbean.SectWarOverview:encode(os)
	os:pushNumber(self.rid)
	os:pushNumber(self.rank)
	os:pushString(self.name)
	os:pushNumber(self.level)
	os:pushNumber(self.kills)
	os:pushNumber(self.bekills)
	os:pushNumber(self.assist)
	os:pushNumber(self.mineralScore)
	os:pushNumber(self.score)
	os:pushNumber(self.quit)
end


i3k_sbean.ForceWarOverview = i3k_class("ForceWarOverview")
function i3k_sbean.ForceWarOverview:ctor()
	--self.rid:		int32	
	--self.rank:		int32	
	--self.name:		string	
	--self.level:		int32	
	--self.kills:		int32	
	--self.bekills:		int32	
	--self.killNpcs:		int32	
	--self.assist:		int32	
	--self.score:		int32	
	--self.gainFeat:		int32	
	--self.quit:		int8	
end

function i3k_sbean.ForceWarOverview:clone()
	return clone(self)
end

function i3k_sbean.ForceWarOverview:decode(is)
	self.rid = is:popNumber()
	self.rank = is:popNumber()
	self.name = is:popString()
	self.level = is:popNumber()
	self.kills = is:popNumber()
	self.bekills = is:popNumber()
	self.killNpcs = is:popNumber()
	self.assist = is:popNumber()
	self.score = is:popNumber()
	self.gainFeat = is:popNumber()
	self.quit = is:popNumber()
end

function i3k_sbean.ForceWarOverview:encode(os)
	os:pushNumber(self.rid)
	os:pushNumber(self.rank)
	os:pushString(self.name)
	os:pushNumber(self.level)
	os:pushNumber(self.kills)
	os:pushNumber(self.bekills)
	os:pushNumber(self.killNpcs)
	os:pushNumber(self.assist)
	os:pushNumber(self.score)
	os:pushNumber(self.gainFeat)
	os:pushNumber(self.quit)
end


i3k_sbean.ForceWarJoin = i3k_class("ForceWarJoin")
function i3k_sbean.ForceWarJoin:ctor()
	--self.overview:		RoleOverview	
	--self.dayEnterTimes:		int32	
	--self.curWeekFeat:		int32	
	--self.rankClearTime:		int32	
end

function i3k_sbean.ForceWarJoin:clone()
	return clone(self)
end

function i3k_sbean.ForceWarJoin:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.dayEnterTimes = is:popNumber()
	self.curWeekFeat = is:popNumber()
	self.rankClearTime = is:popNumber()
end

function i3k_sbean.ForceWarJoin:encode(os)
	os:push(self.overview)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.curWeekFeat)
	os:pushNumber(self.rankClearTime)
end


i3k_sbean.ForceWarMapBrief = i3k_class("ForceWarMapBrief")
function i3k_sbean.ForceWarMapBrief:ctor()
	--self.leader1:		RoleOverview	
	--self.leader2:		RoleOverview	
	--self.guards:		int32	
	--self.mapID:		int32	
	--self.mapInstance:		int32	
end

function i3k_sbean.ForceWarMapBrief:clone()
	return clone(self)
end

function i3k_sbean.ForceWarMapBrief:decode(is)
	self.leader1 = is:pop(i3k_sbean.RoleOverview)
	self.leader2 = is:pop(i3k_sbean.RoleOverview)
	self.guards = is:popNumber()
	self.mapID = is:popNumber()
	self.mapInstance = is:popNumber()
end

function i3k_sbean.ForceWarMapBrief:encode(os)
	os:push(self.leader1)
	os:push(self.leader2)
	os:pushNumber(self.guards)
	os:pushNumber(self.mapID)
	os:pushNumber(self.mapInstance)
end


i3k_sbean.MulRoleInfo = i3k_class("MulRoleInfo")
function i3k_sbean.MulRoleInfo:ctor()
	--self.type:		int32	
	--self.leader:		int32	
	--self.members:		vector[int32]	
end

function i3k_sbean.MulRoleInfo:clone()
	return clone(self)
end

function i3k_sbean.MulRoleInfo:decode(is)
	self.type = is:popNumber()
	self.leader = is:popNumber()
	self.members = is:popNumberList()
end

function i3k_sbean.MulRoleInfo:encode(os)
	os:pushNumber(self.type)
	os:pushNumber(self.leader)
	os:pushNumberList(self.members)
end


i3k_sbean.DamageInfo = i3k_class("DamageInfo")
function i3k_sbean.DamageInfo:ctor()
	--self.roleID:		int32	
	--self.roleName:		string	
	--self.damage:		int32	
end

function i3k_sbean.DamageInfo:clone()
	return clone(self)
end

function i3k_sbean.DamageInfo:decode(is)
	self.roleID = is:popNumber()
	self.roleName = is:popString()
	self.damage = is:popNumber()
end

function i3k_sbean.DamageInfo:encode(os)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
	os:pushNumber(self.damage)
end


i3k_sbean.BossReward = i3k_class("BossReward")
function i3k_sbean.BossReward:ctor()
	--self.damage:		DamageInfo	
	--self.reward:		map[int32, int32]	
end

function i3k_sbean.BossReward:clone()
	return clone(self)
end

function i3k_sbean.BossReward:decode(is)
	self.damage = is:pop(i3k_sbean.DamageInfo)
	self.reward = is:popNumberNumberMap()
end

function i3k_sbean.BossReward:encode(os)
	os:push(self.damage)
	os:pushNumberNumberMap(self.reward)
end


i3k_sbean.BossRecord = i3k_class("BossRecord")
function i3k_sbean.BossRecord:ctor()
	--self.killer:		BossReward	
	--self.rank:		vector[BossReward]	
end

function i3k_sbean.BossRecord:clone()
	return clone(self)
end

function i3k_sbean.BossRecord:decode(is)
	self.killer = is:pop(i3k_sbean.BossReward)
	self.rank = is:popList(i3k_sbean.BossReward)
end

function i3k_sbean.BossRecord:encode(os)
	os:push(self.killer)
	os:pushList(self.rank)
end


i3k_sbean.MarriageShareOverView = i3k_class("MarriageShareOverView")
function i3k_sbean.MarriageShareOverView:ctor()
	--self.marriageId:		int32	
	--self.marriageType:		int32	
	--self.marriageExp:		int32	
	--self.marriageLevel:		int32	
	--self.marriageSkill:		map[int32, MarriageSkillInfo]	
	--self.marriageTime:		int32	
	--self.marriageStep:		int32	
	--self.marriageRole:		RoleOverview	
	--self.marriageAchieve:		MarriageAchieveTask	
	--self.marriageReward:		DBMarriageAchieveReward	
end

function i3k_sbean.MarriageShareOverView:clone()
	return clone(self)
end

function i3k_sbean.MarriageShareOverView:decode(is)
	self.marriageId = is:popNumber()
	self.marriageType = is:popNumber()
	self.marriageExp = is:popNumber()
	self.marriageLevel = is:popNumber()
	self.marriageSkill = is:popNumberMap(i3k_sbean.MarriageSkillInfo)
	self.marriageTime = is:popNumber()
	self.marriageStep = is:popNumber()
	self.marriageRole = is:pop(i3k_sbean.RoleOverview)
	self.marriageAchieve = is:pop(i3k_sbean.MarriageAchieveTask)
	self.marriageReward = is:pop(i3k_sbean.DBMarriageAchieveReward)
end

function i3k_sbean.MarriageShareOverView:encode(os)
	os:pushNumber(self.marriageId)
	os:pushNumber(self.marriageType)
	os:pushNumber(self.marriageExp)
	os:pushNumber(self.marriageLevel)
	os:pushNumberMap(self.marriageSkill)
	os:pushNumber(self.marriageTime)
	os:pushNumber(self.marriageStep)
	os:push(self.marriageRole)
	os:push(self.marriageAchieve)
	os:push(self.marriageReward)
end


i3k_sbean.MarriageAchieveTask = i3k_class("MarriageAchieveTask")
function i3k_sbean.MarriageAchieveTask:ctor()
	--self.tasks:		map[int32, int32]	
end

function i3k_sbean.MarriageAchieveTask:clone()
	return clone(self)
end

function i3k_sbean.MarriageAchieveTask:decode(is)
	self.tasks = is:popNumberNumberMap()
end

function i3k_sbean.MarriageAchieveTask:encode(os)
	os:pushNumberNumberMap(self.tasks)
end


i3k_sbean.MarriageSkillInfo = i3k_class("MarriageSkillInfo")
function i3k_sbean.MarriageSkillInfo:ctor()
	--self.skillId:		int32	
	--self.skillLevel:		int32	
	--self.skillUpTimes:		int32	
end

function i3k_sbean.MarriageSkillInfo:clone()
	return clone(self)
end

function i3k_sbean.MarriageSkillInfo:decode(is)
	self.skillId = is:popNumber()
	self.skillLevel = is:popNumber()
	self.skillUpTimes = is:popNumber()
end

function i3k_sbean.MarriageSkillInfo:encode(os)
	os:pushNumber(self.skillId)
	os:pushNumber(self.skillLevel)
	os:pushNumber(self.skillUpTimes)
end


i3k_sbean.RoleDamageDetail = i3k_class("RoleDamageDetail")
function i3k_sbean.RoleDamageDetail:ctor()
	--self.role:		RoleOverview	
	--self.damage:		int64	
end

function i3k_sbean.RoleDamageDetail:clone()
	return clone(self)
end

function i3k_sbean.RoleDamageDetail:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.damage = is:popNumber()
end

function i3k_sbean.RoleDamageDetail:encode(os)
	os:push(self.role)
	os:pushNumber(self.damage)
end


i3k_sbean.AttackDamageDetail = i3k_class("AttackDamageDetail")
function i3k_sbean.AttackDamageDetail:ctor()
	--self.attackName:		string	
	--self.damage:		int64	
end

function i3k_sbean.AttackDamageDetail:clone()
	return clone(self)
end

function i3k_sbean.AttackDamageDetail:decode(is)
	self.attackName = is:popString()
	self.damage = is:popNumber()
end

function i3k_sbean.AttackDamageDetail:encode(os)
	os:pushString(self.attackName)
	os:pushNumber(self.damage)
end


i3k_sbean.SectGroupMapCurInfo = i3k_class("SectGroupMapCurInfo")
function i3k_sbean.SectGroupMapCurInfo:ctor()
	--self.curMapId:		int32	
	--self.curInstance:		int32	
	--self.curProgress:		int32	
	--self.curRoles:		set[int32]	
end

function i3k_sbean.SectGroupMapCurInfo:clone()
	return clone(self)
end

function i3k_sbean.SectGroupMapCurInfo:decode(is)
	self.curMapId = is:popNumber()
	self.curInstance = is:popNumber()
	self.curProgress = is:popNumber()
	self.curRoles = is:popNumberSet()
end

function i3k_sbean.SectGroupMapCurInfo:encode(os)
	os:pushNumber(self.curMapId)
	os:pushNumber(self.curInstance)
	os:pushNumber(self.curProgress)
	os:pushNumberSet(self.curRoles)
end


i3k_sbean.MapFlagInfo = i3k_class("MapFlagInfo")
function i3k_sbean.MapFlagInfo:ctor()
	--self.mapId:		int32	
	--self.curSect:		MapFlagSectOverView	
	--self.occupyTime:		int32	
	--self.lastRoleRewardTime:		int32	
	--self.lastSectRewardTime:		int32	
	--self.cantake:		int8	
end

function i3k_sbean.MapFlagInfo:clone()
	return clone(self)
end

function i3k_sbean.MapFlagInfo:decode(is)
	self.mapId = is:popNumber()
	self.curSect = is:pop(i3k_sbean.MapFlagSectOverView)
	self.occupyTime = is:popNumber()
	self.lastRoleRewardTime = is:popNumber()
	self.lastSectRewardTime = is:popNumber()
	self.cantake = is:popNumber()
end

function i3k_sbean.MapFlagInfo:encode(os)
	os:pushNumber(self.mapId)
	os:push(self.curSect)
	os:pushNumber(self.occupyTime)
	os:pushNumber(self.lastRoleRewardTime)
	os:pushNumber(self.lastSectRewardTime)
	os:pushNumber(self.cantake)
end


i3k_sbean.MonsterProcess = i3k_class("MonsterProcess")
function i3k_sbean.MonsterProcess:ctor()
	--self.monsterProcess:		map[int32, int32]	
end

function i3k_sbean.MonsterProcess:clone()
	return clone(self)
end

function i3k_sbean.MonsterProcess:decode(is)
	self.monsterProcess = is:popNumberNumberMap()
end

function i3k_sbean.MonsterProcess:encode(os)
	os:pushNumberNumberMap(self.monsterProcess)
end


i3k_sbean.MapFlagSectOverView = i3k_class("MapFlagSectOverView")
function i3k_sbean.MapFlagSectOverView:ctor()
	--self.sectId:		int32	
	--self.sectName:		string	
	--self.sectIcon:		int32	
end

function i3k_sbean.MapFlagSectOverView:clone()
	return clone(self)
end

function i3k_sbean.MapFlagSectOverView:decode(is)
	self.sectId = is:popNumber()
	self.sectName = is:popString()
	self.sectIcon = is:popNumber()
end

function i3k_sbean.MapFlagSectOverView:encode(os)
	os:pushNumber(self.sectId)
	os:pushString(self.sectName)
	os:pushNumber(self.sectIcon)
end


i3k_sbean.ActivityEntity = i3k_class("ActivityEntity")
function i3k_sbean.ActivityEntity:ctor()
	--self.id:		int32	
	--self.entityType:		int32	
	--self.mapID:		int32	
	--self.mapLine:		int32	
	--self.seq:		int32	
end

function i3k_sbean.ActivityEntity:clone()
	return clone(self)
end

function i3k_sbean.ActivityEntity:decode(is)
	self.id = is:popNumber()
	self.entityType = is:popNumber()
	self.mapID = is:popNumber()
	self.mapLine = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.ActivityEntity:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.entityType)
	os:pushNumber(self.mapID)
	os:pushNumber(self.mapLine)
	os:pushNumber(self.seq)
end


i3k_sbean.RevengeEntity = i3k_class("RevengeEntity")
function i3k_sbean.RevengeEntity:ctor()
	--self.id:		int32	
	--self.name:		string	
end

function i3k_sbean.RevengeEntity:clone()
	return clone(self)
end

function i3k_sbean.RevengeEntity:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
end

function i3k_sbean.RevengeEntity:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
end


i3k_sbean.OfflineReward = i3k_class("OfflineReward")
function i3k_sbean.OfflineReward:ctor()
	--self.exp:		int64	
	--self.realExp:		int64	
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.OfflineReward:clone()
	return clone(self)
end

function i3k_sbean.OfflineReward:decode(is)
	self.exp = is:popNumber()
	self.realExp = is:popNumber()
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.OfflineReward:encode(os)
	os:pushNumber(self.exp)
	os:pushNumber(self.realExp)
	os:pushList(self.items)
end


i3k_sbean.RoleDemonHole = i3k_class("RoleDemonHole")
function i3k_sbean.RoleDemonHole:ctor()
	--self.role:		RoleOverview	
	--self.kills:		int32	
	--self.bekills:		int32	
	--self.curFloor:		int32	
end

function i3k_sbean.RoleDemonHole:clone()
	return clone(self)
end

function i3k_sbean.RoleDemonHole:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.kills = is:popNumber()
	self.bekills = is:popNumber()
	self.curFloor = is:popNumber()
end

function i3k_sbean.RoleDemonHole:encode(os)
	os:push(self.role)
	os:pushNumber(self.kills)
	os:pushNumber(self.bekills)
	os:pushNumber(self.curFloor)
end


i3k_sbean.EmergencyInfo = i3k_class("EmergencyInfo")
function i3k_sbean.EmergencyInfo:ctor()
	--self.activityId:		int32	
	--self.instanceId:		int32	
	--self.roleSize:		int32	
	--self.isFinish:		int8	
	--self.openTime:		int32	
end

function i3k_sbean.EmergencyInfo:clone()
	return clone(self)
end

function i3k_sbean.EmergencyInfo:decode(is)
	self.activityId = is:popNumber()
	self.instanceId = is:popNumber()
	self.roleSize = is:popNumber()
	self.isFinish = is:popNumber()
	self.openTime = is:popNumber()
end

function i3k_sbean.EmergencyInfo:encode(os)
	os:pushNumber(self.activityId)
	os:pushNumber(self.instanceId)
	os:pushNumber(self.roleSize)
	os:pushNumber(self.isFinish)
	os:pushNumber(self.openTime)
end


i3k_sbean.SocialComment = i3k_class("SocialComment")
function i3k_sbean.SocialComment:ctor()
	--self.serverId:		int32	
	--self.roleId:		int32	
	--self.serverName:		string	
	--self.roleName:		string	
	--self.commentId:		int32	
	--self.comment:		string	
	--self.liked:		int32	
	--self.disliked:		int32	
	--self.sendTime:		int32	
end

function i3k_sbean.SocialComment:clone()
	return clone(self)
end

function i3k_sbean.SocialComment:decode(is)
	self.serverId = is:popNumber()
	self.roleId = is:popNumber()
	self.serverName = is:popString()
	self.roleName = is:popString()
	self.commentId = is:popNumber()
	self.comment = is:popString()
	self.liked = is:popNumber()
	self.disliked = is:popNumber()
	self.sendTime = is:popNumber()
end

function i3k_sbean.SocialComment:encode(os)
	os:pushNumber(self.serverId)
	os:pushNumber(self.roleId)
	os:pushString(self.serverName)
	os:pushString(self.roleName)
	os:pushNumber(self.commentId)
	os:pushString(self.comment)
	os:pushNumber(self.liked)
	os:pushNumber(self.disliked)
	os:pushNumber(self.sendTime)
end


i3k_sbean.MapSkillData = i3k_class("MapSkillData")
function i3k_sbean.MapSkillData:ctor()
	--self.skillCanUseTimes:		map[int32, int32]	
	--self.skillUseTimes:		map[int32, int32]	
	--self.skillLastUseTime:		map[int32, int32]	
	--self.skillCommonUseTime:		int32	
end

function i3k_sbean.MapSkillData:clone()
	return clone(self)
end

function i3k_sbean.MapSkillData:decode(is)
	self.skillCanUseTimes = is:popNumberNumberMap()
	self.skillUseTimes = is:popNumberNumberMap()
	self.skillLastUseTime = is:popNumberNumberMap()
	self.skillCommonUseTime = is:popNumber()
end

function i3k_sbean.MapSkillData:encode(os)
	os:pushNumberNumberMap(self.skillCanUseTimes)
	os:pushNumberNumberMap(self.skillUseTimes)
	os:pushNumberNumberMap(self.skillLastUseTime)
	os:pushNumber(self.skillCommonUseTime)
end


i3k_sbean.HeirloomProp = i3k_class("HeirloomProp")
function i3k_sbean.HeirloomProp:ctor()
	--self.rank:		int32	
	--self.props:		map[int32, int32]	
	--self.mainStarLevel:		int32	
	--self.mainStarProp:		set[int32]	
	--self.miniStarLevel:		map[int32, int32]	
end

function i3k_sbean.HeirloomProp:clone()
	return clone(self)
end

function i3k_sbean.HeirloomProp:decode(is)
	self.rank = is:popNumber()
	self.props = is:popNumberNumberMap()
	self.mainStarLevel = is:popNumber()
	self.mainStarProp = is:popNumberSet()
	self.miniStarLevel = is:popNumberNumberMap()
end

function i3k_sbean.HeirloomProp:encode(os)
	os:pushNumber(self.rank)
	os:pushNumberNumberMap(self.props)
	os:pushNumber(self.mainStarLevel)
	os:pushNumberSet(self.mainStarProp)
	os:pushNumberNumberMap(self.miniStarLevel)
end


i3k_sbean.SectFightGroupDetail = i3k_class("SectFightGroupDetail")
function i3k_sbean.SectFightGroupDetail:ctor()
	--self.group:		SectFightGroupOverview	
	--self.winTimes:		int32	
	--self.joinTimes:		int32	
	--self.score:		int32	
	--self.leaderName:		string	
end

function i3k_sbean.SectFightGroupDetail:clone()
	return clone(self)
end

function i3k_sbean.SectFightGroupDetail:decode(is)
	self.group = is:pop(i3k_sbean.SectFightGroupOverview)
	self.winTimes = is:popNumber()
	self.joinTimes = is:popNumber()
	self.score = is:popNumber()
	self.leaderName = is:popString()
end

function i3k_sbean.SectFightGroupDetail:encode(os)
	os:push(self.group)
	os:pushNumber(self.winTimes)
	os:pushNumber(self.joinTimes)
	os:pushNumber(self.score)
	os:pushString(self.leaderName)
end


i3k_sbean.SectFightGroupOverview = i3k_class("SectFightGroupOverview")
function i3k_sbean.SectFightGroupOverview:ctor()
	--self.sectId:		int32	
	--self.sectName:		string	
	--self.groupId:		int32	
	--self.groupName:		string	
end

function i3k_sbean.SectFightGroupOverview:clone()
	return clone(self)
end

function i3k_sbean.SectFightGroupOverview:decode(is)
	self.sectId = is:popNumber()
	self.sectName = is:popString()
	self.groupId = is:popNumber()
	self.groupName = is:popString()
end

function i3k_sbean.SectFightGroupOverview:encode(os)
	os:pushNumber(self.sectId)
	os:pushString(self.sectName)
	os:pushNumber(self.groupId)
	os:pushString(self.groupName)
end


i3k_sbean.SectFightGroup = i3k_class("SectFightGroup")
function i3k_sbean.SectFightGroup:ctor()
	--self.overview:		SectFightGroupOverview	
	--self.member:		set[int32]	
	--self.winTimes:		int32	
	--self.joinTimes:		int32	
end

function i3k_sbean.SectFightGroup:clone()
	return clone(self)
end

function i3k_sbean.SectFightGroup:decode(is)
	self.overview = is:pop(i3k_sbean.SectFightGroupOverview)
	self.member = is:popNumberSet()
	self.winTimes = is:popNumber()
	self.joinTimes = is:popNumber()
end

function i3k_sbean.SectFightGroup:encode(os)
	os:push(self.overview)
	os:pushNumberSet(self.member)
	os:pushNumber(self.winTimes)
	os:pushNumber(self.joinTimes)
end


i3k_sbean.SectWarStatus = i3k_class("SectWarStatus")
function i3k_sbean.SectWarStatus:ctor()
	--self.matchGroup:		SectFightGroup	
	--self.curStatus:		int32	
end

function i3k_sbean.SectWarStatus:clone()
	return clone(self)
end

function i3k_sbean.SectWarStatus:decode(is)
	self.matchGroup = is:pop(i3k_sbean.SectFightGroup)
	self.curStatus = is:popNumber()
end

function i3k_sbean.SectWarStatus:encode(os)
	os:push(self.matchGroup)
	os:pushNumber(self.curStatus)
end


i3k_sbean.FiveGoalsInfo = i3k_class("FiveGoalsInfo")
function i3k_sbean.FiveGoalsInfo:ctor()
	--self.isOpen:		int32	
	--self.nowId:		int32	
	--self.startTime:		int32	
	--self.goalsTimes:		map[int32, int32]	
	--self.takedRewards:		vector[int32]	
	--self.takedGoals:		vector[int32]	
end

function i3k_sbean.FiveGoalsInfo:clone()
	return clone(self)
end

function i3k_sbean.FiveGoalsInfo:decode(is)
	self.isOpen = is:popNumber()
	self.nowId = is:popNumber()
	self.startTime = is:popNumber()
	self.goalsTimes = is:popNumberNumberMap()
	self.takedRewards = is:popNumberList()
	self.takedGoals = is:popNumberList()
end

function i3k_sbean.FiveGoalsInfo:encode(os)
	os:pushNumber(self.isOpen)
	os:pushNumber(self.nowId)
	os:pushNumber(self.startTime)
	os:pushNumberNumberMap(self.goalsTimes)
	os:pushNumberList(self.takedRewards)
	os:pushNumberList(self.takedGoals)
end


i3k_sbean.UnlockedBorder = i3k_class("UnlockedBorder")
function i3k_sbean.UnlockedBorder:ctor()
	--self.borderId:		int32	
	--self.expireTime:		int32	
end

function i3k_sbean.UnlockedBorder:clone()
	return clone(self)
end

function i3k_sbean.UnlockedBorder:decode(is)
	self.borderId = is:popNumber()
	self.expireTime = is:popNumber()
end

function i3k_sbean.UnlockedBorder:encode(os)
	os:pushNumber(self.borderId)
	os:pushNumber(self.expireTime)
end


i3k_sbean.PetRunPet = i3k_class("PetRunPet")
function i3k_sbean.PetRunPet:ctor()
	--self.id:		int32	
	--self.statusId:		int32	
	--self.myscore:		int32	
	--self.allScore:		int32	
end

function i3k_sbean.PetRunPet:clone()
	return clone(self)
end

function i3k_sbean.PetRunPet:decode(is)
	self.id = is:popNumber()
	self.statusId = is:popNumber()
	self.myscore = is:popNumber()
	self.allScore = is:popNumber()
end

function i3k_sbean.PetRunPet:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.statusId)
	os:pushNumber(self.myscore)
	os:pushNumber(self.allScore)
end


i3k_sbean.EpicTask = i3k_class("EpicTask")
function i3k_sbean.EpicTask:ctor()
	--self.seriesID:		int32	
	--self.groupID:		int32	
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.EpicTask:clone()
	return clone(self)
end

function i3k_sbean.EpicTask:decode(is)
	self.seriesID = is:popNumber()
	self.groupID = is:popNumber()
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.EpicTask:encode(os)
	os:pushNumber(self.seriesID)
	os:pushNumber(self.groupID)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
	os:pushNumber(self.receiveTime)
end


i3k_sbean.FindingYourSisterInfo = i3k_class("FindingYourSisterInfo")
function i3k_sbean.FindingYourSisterInfo:ctor()
	--self.id:		int32	
	--self.startTime:		int32	
	--self.rightCnt:		map[int32, int32]	
	--self.wrongCnt:		int32	
	--self.useTimes:		int32	
end

function i3k_sbean.FindingYourSisterInfo:clone()
	return clone(self)
end

function i3k_sbean.FindingYourSisterInfo:decode(is)
	self.id = is:popNumber()
	self.startTime = is:popNumber()
	self.rightCnt = is:popNumberNumberMap()
	self.wrongCnt = is:popNumber()
	self.useTimes = is:popNumber()
end

function i3k_sbean.FindingYourSisterInfo:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.startTime)
	os:pushNumberNumberMap(self.rightCnt)
	os:pushNumber(self.wrongCnt)
	os:pushNumber(self.useTimes)
end


i3k_sbean.OilHistory = i3k_class("OilHistory")
function i3k_sbean.OilHistory:ctor()
	--self.name:		string	
	--self.oilTimes:		int32	
end

function i3k_sbean.OilHistory:clone()
	return clone(self)
end

function i3k_sbean.OilHistory:decode(is)
	self.name = is:popString()
	self.oilTimes = is:popNumber()
end

function i3k_sbean.OilHistory:encode(os)
	os:pushString(self.name)
	os:pushNumber(self.oilTimes)
end


i3k_sbean.ZoneBuildRole = i3k_class("ZoneBuildRole")
function i3k_sbean.ZoneBuildRole:ctor()
	--self.name:		string	
	--self.buildTimes:		int32	
end

function i3k_sbean.ZoneBuildRole:clone()
	return clone(self)
end

function i3k_sbean.ZoneBuildRole:decode(is)
	self.name = is:popString()
	self.buildTimes = is:popNumber()
end

function i3k_sbean.ZoneBuildRole:encode(os)
	os:pushString(self.name)
	os:pushNumber(self.buildTimes)
end


i3k_sbean.SectZoneInfo = i3k_class("SectZoneInfo")
function i3k_sbean.SectZoneInfo:ctor()
	--self.sect:		SectOverview	
	--self.destiny:		int32	
end

function i3k_sbean.SectZoneInfo:clone()
	return clone(self)
end

function i3k_sbean.SectZoneInfo:decode(is)
	self.sect = is:pop(i3k_sbean.SectOverview)
	self.destiny = is:popNumber()
end

function i3k_sbean.SectZoneInfo:encode(os)
	os:push(self.sect)
	os:pushNumber(self.destiny)
end


i3k_sbean.SectRedPackInfo = i3k_class("SectRedPackInfo")
function i3k_sbean.SectRedPackInfo:ctor()
	--self.id:		int32	
	--self.sendRoleName:		string	
	--self.sendRoleMsg:		string	
	--self.maxDiamond:		int32	
	--self.leftDiamond:		int32	
	--self.takeNum:		int32	
	--self.packRoleStatus:		int32	
end

function i3k_sbean.SectRedPackInfo:clone()
	return clone(self)
end

function i3k_sbean.SectRedPackInfo:decode(is)
	self.id = is:popNumber()
	self.sendRoleName = is:popString()
	self.sendRoleMsg = is:popString()
	self.maxDiamond = is:popNumber()
	self.leftDiamond = is:popNumber()
	self.takeNum = is:popNumber()
	self.packRoleStatus = is:popNumber()
end

function i3k_sbean.SectRedPackInfo:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.sendRoleName)
	os:pushString(self.sendRoleMsg)
	os:pushNumber(self.maxDiamond)
	os:pushNumber(self.leftDiamond)
	os:pushNumber(self.takeNum)
	os:pushNumber(self.packRoleStatus)
end


i3k_sbean.SectRedPackTakeHistory = i3k_class("SectRedPackTakeHistory")
function i3k_sbean.SectRedPackTakeHistory:ctor()
	--self.time:		int32	
	--self.roleName:		string	
	--self.takeNum:		int32	
end

function i3k_sbean.SectRedPackTakeHistory:clone()
	return clone(self)
end

function i3k_sbean.SectRedPackTakeHistory:decode(is)
	self.time = is:popNumber()
	self.roleName = is:popString()
	self.takeNum = is:popNumber()
end

function i3k_sbean.SectRedPackTakeHistory:encode(os)
	os:pushNumber(self.time)
	os:pushString(self.roleName)
	os:pushNumber(self.takeNum)
end


i3k_sbean.RobberMonster = i3k_class("RobberMonster")
function i3k_sbean.RobberMonster:ctor()
	--self.id:		int32	
	--self.level:		int32	
	--self.behavior:		int32	
	--self.taskID:		int32	
	--self.posID:		int32	
	--self.leftTime:		int32	
	--self.goods:		map[int32, int32]	
	--self.lastKillerID:		int32	
	--self.lastKillerName:		string	
	--self.lastKillDrops:		map[int32, int32]	
end

function i3k_sbean.RobberMonster:clone()
	return clone(self)
end

function i3k_sbean.RobberMonster:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
	self.behavior = is:popNumber()
	self.taskID = is:popNumber()
	self.posID = is:popNumber()
	self.leftTime = is:popNumber()
	self.goods = is:popNumberNumberMap()
	self.lastKillerID = is:popNumber()
	self.lastKillerName = is:popString()
	self.lastKillDrops = is:popNumberNumberMap()
end

function i3k_sbean.RobberMonster:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
	os:pushNumber(self.behavior)
	os:pushNumber(self.taskID)
	os:pushNumber(self.posID)
	os:pushNumber(self.leftTime)
	os:pushNumberNumberMap(self.goods)
	os:pushNumber(self.lastKillerID)
	os:pushString(self.lastKillerName)
	os:pushNumberNumberMap(self.lastKillDrops)
end


i3k_sbean.BreakHoleAdd = i3k_class("BreakHoleAdd")
function i3k_sbean.BreakHoleAdd:ctor()
	--self.add:		int32	
	--self.buffAdd:		int32	
end

function i3k_sbean.BreakHoleAdd:clone()
	return clone(self)
end

function i3k_sbean.BreakHoleAdd:decode(is)
	self.add = is:popNumber()
	self.buffAdd = is:popNumber()
end

function i3k_sbean.BreakHoleAdd:encode(os)
	os:pushNumber(self.add)
	os:pushNumber(self.buffAdd)
end


i3k_sbean.FightProfile = i3k_class("FightProfile")
function i3k_sbean.FightProfile:ctor()
	--self.profile:		RoleProfile	
	--self.lives:		int32	
end

function i3k_sbean.FightProfile:clone()
	return clone(self)
end

function i3k_sbean.FightProfile:decode(is)
	self.profile = is:pop(i3k_sbean.RoleProfile)
	self.lives = is:popNumber()
end

function i3k_sbean.FightProfile:encode(os)
	os:push(self.profile)
	os:pushNumber(self.lives)
end


i3k_sbean.TournamentMapResult = i3k_class("TournamentMapResult")
function i3k_sbean.TournamentMapResult:ctor()
	--self.winTeam:		FTeamBattleInfo	
	--self.loseTeam:		FTeamBattleInfo	
end

function i3k_sbean.TournamentMapResult:clone()
	return clone(self)
end

function i3k_sbean.TournamentMapResult:decode(is)
	self.winTeam = is:pop(i3k_sbean.FTeamBattleInfo)
	self.loseTeam = is:pop(i3k_sbean.FTeamBattleInfo)
end

function i3k_sbean.TournamentMapResult:encode(os)
	os:push(self.winTeam)
	os:push(self.loseTeam)
end


i3k_sbean.FTeamBattleInfo = i3k_class("FTeamBattleInfo")
function i3k_sbean.FTeamBattleInfo:ctor()
	--self.teamID:		int32	
	--self.teamName:		string	
	--self.score:		int32	
	--self.alives:		int32	
	--self.memberLifes:		int32	
	--self.members:		vector[FTMemberBattleInfo]	
end

function i3k_sbean.FTeamBattleInfo:clone()
	return clone(self)
end

function i3k_sbean.FTeamBattleInfo:decode(is)
	self.teamID = is:popNumber()
	self.teamName = is:popString()
	self.score = is:popNumber()
	self.alives = is:popNumber()
	self.memberLifes = is:popNumber()
	self.members = is:popList(i3k_sbean.FTMemberBattleInfo)
end

function i3k_sbean.FTeamBattleInfo:encode(os)
	os:pushNumber(self.teamID)
	os:pushString(self.teamName)
	os:pushNumber(self.score)
	os:pushNumber(self.alives)
	os:pushNumber(self.memberLifes)
	os:pushList(self.members)
end


i3k_sbean.FTMemberBattleInfo = i3k_class("FTMemberBattleInfo")
function i3k_sbean.FTMemberBattleInfo:ctor()
	--self.overview:		RoleOverview	
	--self.kills:		int32	
	--self.dead:		int32	
	--self.assist:		int32	
	--self.honor:		int32	
end

function i3k_sbean.FTMemberBattleInfo:clone()
	return clone(self)
end

function i3k_sbean.FTMemberBattleInfo:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.kills = is:popNumber()
	self.dead = is:popNumber()
	self.assist = is:popNumber()
	self.honor = is:popNumber()
end

function i3k_sbean.FTMemberBattleInfo:encode(os)
	os:push(self.overview)
	os:pushNumber(self.kills)
	os:pushNumber(self.dead)
	os:pushNumber(self.assist)
	os:pushNumber(self.honor)
end


i3k_sbean.FTeamBrief = i3k_class("FTeamBrief")
function i3k_sbean.FTeamBrief:ctor()
	--self.teamID:		int32	
	--self.teamName:		string	
end

function i3k_sbean.FTeamBrief:clone()
	return clone(self)
end

function i3k_sbean.FTeamBrief:decode(is)
	self.teamID = is:popNumber()
	self.teamName = is:popString()
end

function i3k_sbean.FTeamBrief:encode(os)
	os:pushNumber(self.teamID)
	os:pushString(self.teamName)
end


i3k_sbean.FightTeamOverview = i3k_class("FightTeamOverview")
function i3k_sbean.FightTeamOverview:ctor()
	--self.id:		int32	
	--self.name:		string	
	--self.leader:		RoleOverview	
end

function i3k_sbean.FightTeamOverview:clone()
	return clone(self)
end

function i3k_sbean.FightTeamOverview:decode(is)
	self.id = is:popNumber()
	self.name = is:popString()
	self.leader = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.FightTeamOverview:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:push(self.leader)
end


i3k_sbean.FightTeamGroup = i3k_class("FightTeamGroup")
function i3k_sbean.FightTeamGroup:ctor()
	--self.group:		int32	
	--self.teams:		vector[FightTeamData]	
end

function i3k_sbean.FightTeamGroup:clone()
	return clone(self)
end

function i3k_sbean.FightTeamGroup:decode(is)
	self.group = is:popNumber()
	self.teams = is:popList(i3k_sbean.FightTeamData)
end

function i3k_sbean.FightTeamGroup:encode(os)
	os:pushNumber(self.group)
	os:pushList(self.teams)
end


i3k_sbean.FightTeamData = i3k_class("FightTeamData")
function i3k_sbean.FightTeamData:ctor()
	--self.team:		FightTeamOverview	
	--self.state:		int32	
end

function i3k_sbean.FightTeamData:clone()
	return clone(self)
end

function i3k_sbean.FightTeamData:decode(is)
	self.team = is:pop(i3k_sbean.FightTeamOverview)
	self.state = is:popNumber()
end

function i3k_sbean.FightTeamData:encode(os)
	os:push(self.team)
	os:pushNumber(self.state)
end


i3k_sbean.MarriageCard = i3k_class("MarriageCard")
function i3k_sbean.MarriageCard:ctor()
	--self.marriage:		MarriageOverview	
	--self.man:		RoleFeature	
	--self.woman:		RoleFeature	
end

function i3k_sbean.MarriageCard:clone()
	return clone(self)
end

function i3k_sbean.MarriageCard:decode(is)
	self.marriage = is:pop(i3k_sbean.MarriageOverview)
	self.man = is:pop(i3k_sbean.RoleFeature)
	self.woman = is:pop(i3k_sbean.RoleFeature)
end

function i3k_sbean.MarriageCard:encode(os)
	os:push(self.marriage)
	os:push(self.man)
	os:push(self.woman)
end


i3k_sbean.MarriageOverview = i3k_class("MarriageOverview")
function i3k_sbean.MarriageOverview:ctor()
	--self.marriageTime:		int32	
	--self.marriageLevel:		int32	
	--self.singNum:		int32	
end

function i3k_sbean.MarriageOverview:clone()
	return clone(self)
end

function i3k_sbean.MarriageOverview:decode(is)
	self.marriageTime = is:popNumber()
	self.marriageLevel = is:popNumber()
	self.singNum = is:popNumber()
end

function i3k_sbean.MarriageOverview:encode(os)
	os:pushNumber(self.marriageTime)
	os:pushNumber(self.marriageLevel)
	os:pushNumber(self.singNum)
end


i3k_sbean.ChristmasCardOverview = i3k_class("ChristmasCardOverview")
function i3k_sbean.ChristmasCardOverview:ctor()
	--self.rid:		int32	
	--self.text:		string	
	--self.roleName:		string	
	--self.flower:		int32	
	--self.brick:		int32	
	--self.background:		int32	
end

function i3k_sbean.ChristmasCardOverview:clone()
	return clone(self)
end

function i3k_sbean.ChristmasCardOverview:decode(is)
	self.rid = is:popNumber()
	self.text = is:popString()
	self.roleName = is:popString()
	self.flower = is:popNumber()
	self.brick = is:popNumber()
	self.background = is:popNumber()
end

function i3k_sbean.ChristmasCardOverview:encode(os)
	os:pushNumber(self.rid)
	os:pushString(self.text)
	os:pushString(self.roleName)
	os:pushNumber(self.flower)
	os:pushNumber(self.brick)
	os:pushNumber(self.background)
end


i3k_sbean.WeekTaskData = i3k_class("WeekTaskData")
function i3k_sbean.WeekTaskData:ctor()
	--self.tasks:		vector[DBWeekTask]	
	--self.reward:		set[int32]	
	--self.score:		int32	
	--self.lastWeekMaxPower:		int32	
	--self.curWeekMaxPower:		int32	
end

function i3k_sbean.WeekTaskData:clone()
	return clone(self)
end

function i3k_sbean.WeekTaskData:decode(is)
	self.tasks = is:popList(i3k_sbean.DBWeekTask)
	self.reward = is:popNumberSet()
	self.score = is:popNumber()
	self.lastWeekMaxPower = is:popNumber()
	self.curWeekMaxPower = is:popNumber()
end

function i3k_sbean.WeekTaskData:encode(os)
	os:pushList(self.tasks)
	os:pushNumberSet(self.reward)
	os:pushNumber(self.score)
	os:pushNumber(self.lastWeekMaxPower)
	os:pushNumber(self.curWeekMaxPower)
end


i3k_sbean.EggInfo = i3k_class("EggInfo")
function i3k_sbean.EggInfo:ctor()
	--self.id:		int32	
	--self.valueable:		int32	
end

function i3k_sbean.EggInfo:clone()
	return clone(self)
end

function i3k_sbean.EggInfo:decode(is)
	self.id = is:popNumber()
	self.valueable = is:popNumber()
end

function i3k_sbean.EggInfo:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.valueable)
end


i3k_sbean.HorseSpirit = i3k_class("HorseSpirit")
function i3k_sbean.HorseSpirit:ctor()
	--self.star:		int32	
	--self.curShowID:		int32	
	--self.skills:		map[int32, HorseSpiritSkill]	
	--self.amuletId:		int32	
end

function i3k_sbean.HorseSpirit:clone()
	return clone(self)
end

function i3k_sbean.HorseSpirit:decode(is)
	self.star = is:popNumber()
	self.curShowID = is:popNumber()
	self.skills = is:popNumberMap(i3k_sbean.HorseSpiritSkill)
	self.amuletId = is:popNumber()
end

function i3k_sbean.HorseSpirit:encode(os)
	os:pushNumber(self.star)
	os:pushNumber(self.curShowID)
	os:pushNumberMap(self.skills)
	os:pushNumber(self.amuletId)
end


i3k_sbean.SectMemberInfo = i3k_class("SectMemberInfo")
function i3k_sbean.SectMemberInfo:ctor()
	--self.chief:		int32	
	--self.deputy:		set[int32]	
	--self.elder:		set[int32]	
	--self.elite:		set[int32]	
	--self.members:		set[int32]	
end

function i3k_sbean.SectMemberInfo:clone()
	return clone(self)
end

function i3k_sbean.SectMemberInfo:decode(is)
	self.chief = is:popNumber()
	self.deputy = is:popNumberSet()
	self.elder = is:popNumberSet()
	self.elite = is:popNumberSet()
	self.members = is:popNumberSet()
end

function i3k_sbean.SectMemberInfo:encode(os)
	os:pushNumber(self.chief)
	os:pushNumberSet(self.deputy)
	os:pushNumberSet(self.elder)
	os:pushNumberSet(self.elite)
	os:pushNumberSet(self.members)
end


i3k_sbean.UseStones = i3k_class("UseStones")
function i3k_sbean.UseStones:ctor()
	--self.props:		set[int32]	
end

function i3k_sbean.UseStones:clone()
	return clone(self)
end

function i3k_sbean.UseStones:decode(is)
	self.props = is:popNumberSet()
end

function i3k_sbean.UseStones:encode(os)
	os:pushNumberSet(self.props)
end


i3k_sbean.GlobalPveMapInfo = i3k_class("GlobalPveMapInfo")
function i3k_sbean.GlobalPveMapInfo:ctor()
	--self.total:		int32	
	--self.sect:		int32	
end

function i3k_sbean.GlobalPveMapInfo:clone()
	return clone(self)
end

function i3k_sbean.GlobalPveMapInfo:decode(is)
	self.total = is:popNumber()
	self.sect = is:popNumber()
end

function i3k_sbean.GlobalPveMapInfo:encode(os)
	os:pushNumber(self.total)
	os:pushNumber(self.sect)
end


i3k_sbean.GlobalPveDamage = i3k_class("GlobalPveDamage")
function i3k_sbean.GlobalPveDamage:ctor()
	--self.sectId:		int32	
	--self.name:		string	
	--self.damage:		int32	
end

function i3k_sbean.GlobalPveDamage:clone()
	return clone(self)
end

function i3k_sbean.GlobalPveDamage:decode(is)
	self.sectId = is:popNumber()
	self.name = is:popString()
	self.damage = is:popNumber()
end

function i3k_sbean.GlobalPveDamage:encode(os)
	os:pushNumber(self.sectId)
	os:pushString(self.name)
	os:pushNumber(self.damage)
end


i3k_sbean.SectShareEvent = i3k_class("SectShareEvent")
function i3k_sbean.SectShareEvent:ctor()
	--self.time:		int32	
	--self.eventID:		int32	
	--self.iArg:		int32	
	--self.sArg:		string	
	--self.items:		map[int32, int32]	
end

function i3k_sbean.SectShareEvent:clone()
	return clone(self)
end

function i3k_sbean.SectShareEvent:decode(is)
	self.time = is:popNumber()
	self.eventID = is:popNumber()
	self.iArg = is:popNumber()
	self.sArg = is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.SectShareEvent:encode(os)
	os:pushNumber(self.time)
	os:pushNumber(self.eventID)
	os:pushNumber(self.iArg)
	os:pushString(self.sArg)
	os:pushNumberNumberMap(self.items)
end


i3k_sbean.SectShareApply = i3k_class("SectShareApply")
function i3k_sbean.SectShareApply:ctor()
	--self.time:		int32	
	--self.roleID:		int32	
	--self.roleName:		string	
	--self.itemID:		int32	
end

function i3k_sbean.SectShareApply:clone()
	return clone(self)
end

function i3k_sbean.SectShareApply:decode(is)
	self.time = is:popNumber()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
	self.itemID = is:popNumber()
end

function i3k_sbean.SectShareApply:encode(os)
	os:pushNumber(self.time)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
	os:pushNumber(self.itemID)
end


i3k_sbean.RoleMillionAnswer = i3k_class("RoleMillionAnswer")
function i3k_sbean.RoleMillionAnswer:ctor()
	--self.sign:		int32	
	--self.curQustionGroup:		int32	
	--self.curQustionIndex:		int32	
	--self.dayWrongTime:		int32	
end

function i3k_sbean.RoleMillionAnswer:clone()
	return clone(self)
end

function i3k_sbean.RoleMillionAnswer:decode(is)
	self.sign = is:popNumber()
	self.curQustionGroup = is:popNumber()
	self.curQustionIndex = is:popNumber()
	self.dayWrongTime = is:popNumber()
end

function i3k_sbean.RoleMillionAnswer:encode(os)
	os:pushNumber(self.sign)
	os:pushNumber(self.curQustionGroup)
	os:pushNumber(self.curQustionIndex)
	os:pushNumber(self.dayWrongTime)
end


i3k_sbean.WeaponChangeInfo = i3k_class("WeaponChangeInfo")
function i3k_sbean.WeaponChangeInfo:ctor()
	--self.id:		int32	
	--self.changeTimes:		int32	
end

function i3k_sbean.WeaponChangeInfo:clone()
	return clone(self)
end

function i3k_sbean.WeaponChangeInfo:decode(is)
	self.id = is:popNumber()
	self.changeTimes = is:popNumber()
end

function i3k_sbean.WeaponChangeInfo:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.changeTimes)
end


i3k_sbean.KiteMessageInfo = i3k_class("KiteMessageInfo")
function i3k_sbean.KiteMessageInfo:ctor()
	--self.roleId:		int32	
	--self.roleName:		string	
	--self.gsName:		string	
	--self.kiteId:		int32	
	--self.msg:		string	
end

function i3k_sbean.KiteMessageInfo:clone()
	return clone(self)
end

function i3k_sbean.KiteMessageInfo:decode(is)
	self.roleId = is:popNumber()
	self.roleName = is:popString()
	self.gsName = is:popString()
	self.kiteId = is:popNumber()
	self.msg = is:popString()
end

function i3k_sbean.KiteMessageInfo:encode(os)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
	os:pushString(self.gsName)
	os:pushNumber(self.kiteId)
	os:pushString(self.msg)
end


i3k_sbean.ActivitySweepInfo = i3k_class("ActivitySweepInfo")
function i3k_sbean.ActivitySweepInfo:ctor()
	--self.mapId:		int32	
	--self.times:		int32	
	--self.extraCard:		int32	
end

function i3k_sbean.ActivitySweepInfo:clone()
	return clone(self)
end

function i3k_sbean.ActivitySweepInfo:decode(is)
	self.mapId = is:popNumber()
	self.times = is:popNumber()
	self.extraCard = is:popNumber()
end

function i3k_sbean.ActivitySweepInfo:encode(os)
	os:pushNumber(self.mapId)
	os:pushNumber(self.times)
	os:pushNumber(self.extraCard)
end


i3k_sbean.WorldCupGamePictureInfo = i3k_class("WorldCupGamePictureInfo")
function i3k_sbean.WorldCupGamePictureInfo:ctor()
	--self.record:		int32	
	--self.position:		int32	
	--self.countryId:		int32	
	--self.rank:		int32	
end

function i3k_sbean.WorldCupGamePictureInfo:clone()
	return clone(self)
end

function i3k_sbean.WorldCupGamePictureInfo:decode(is)
	self.record = is:popNumber()
	self.position = is:popNumber()
	self.countryId = is:popNumber()
	self.rank = is:popNumber()
end

function i3k_sbean.WorldCupGamePictureInfo:encode(os)
	os:pushNumber(self.record)
	os:pushNumber(self.position)
	os:pushNumber(self.countryId)
	os:pushNumber(self.rank)
end


i3k_sbean.WorldCupInfo = i3k_class("WorldCupInfo")
function i3k_sbean.WorldCupInfo:ctor()
	--self.roleCountryInfo:		vector[WorldCupCountryInfo]	
	--self.countryInfo:		vector[WorldCupCountryInfo]	
	--self.gameCountryInfo:		vector[WorldCupGamePictureInfo]	
end

function i3k_sbean.WorldCupInfo:clone()
	return clone(self)
end

function i3k_sbean.WorldCupInfo:decode(is)
	self.roleCountryInfo = is:popList(i3k_sbean.WorldCupCountryInfo)
	self.countryInfo = is:popList(i3k_sbean.WorldCupCountryInfo)
	self.gameCountryInfo = is:popList(i3k_sbean.WorldCupGamePictureInfo)
end

function i3k_sbean.WorldCupInfo:encode(os)
	os:pushList(self.roleCountryInfo)
	os:pushList(self.countryInfo)
	os:pushList(self.gameCountryInfo)
end


i3k_sbean.WorldCupCountryInfo = i3k_class("WorldCupCountryInfo")
function i3k_sbean.WorldCupCountryInfo:ctor()
	--self.countryId:		int32	
	--self.record:		int32	
end

function i3k_sbean.WorldCupCountryInfo:clone()
	return clone(self)
end

function i3k_sbean.WorldCupCountryInfo:decode(is)
	self.countryId = is:popNumber()
	self.record = is:popNumber()
end

function i3k_sbean.WorldCupCountryInfo:encode(os)
	os:pushNumber(self.countryId)
	os:pushNumber(self.record)
end


i3k_sbean.FestivalGift = i3k_class("FestivalGift")
function i3k_sbean.FestivalGift:ctor()
	--self.isTake:		int8	
end

function i3k_sbean.FestivalGift:clone()
	return clone(self)
end

function i3k_sbean.FestivalGift:decode(is)
	self.isTake = is:popNumber()
end

function i3k_sbean.FestivalGift:encode(os)
	os:pushNumber(self.isTake)
end


i3k_sbean.FestivalBless = i3k_class("FestivalBless")
function i3k_sbean.FestivalBless:ctor()
	--self.dayBlessTimes:		int32	
end

function i3k_sbean.FestivalBless:clone()
	return clone(self)
end

function i3k_sbean.FestivalBless:decode(is)
	self.dayBlessTimes = is:popNumber()
end

function i3k_sbean.FestivalBless:encode(os)
	os:pushNumber(self.dayBlessTimes)
end


i3k_sbean.RoleDonateInfo = i3k_class("RoleDonateInfo")
function i3k_sbean.RoleDonateInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleDonateCfg	
	--self.rewardTimes:		set[int32]	
	--self.totalTimes:		int32	
	--self.distoryTimes:		int32	
end

function i3k_sbean.RoleDonateInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleDonateInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleDonateCfg)
	self.rewardTimes = is:popNumberSet()
	self.totalTimes = is:popNumber()
	self.distoryTimes = is:popNumber()
end

function i3k_sbean.RoleDonateInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:pushNumberSet(self.rewardTimes)
	os:pushNumber(self.totalTimes)
	os:pushNumber(self.distoryTimes)
end


i3k_sbean.RoleDonateCfg = i3k_class("RoleDonateCfg")
function i3k_sbean.RoleDonateCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.daytimes:		int32	
	--self.inputGoods:		vector[DummyGoods]	
	--self.outputGoods:		vector[DummyGoods]	
	--self.gradeReward:		vector[TotalReaward]	
end

function i3k_sbean.RoleDonateCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleDonateCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.daytimes = is:popNumber()
	self.inputGoods = is:popList(i3k_sbean.DummyGoods)
	self.outputGoods = is:popList(i3k_sbean.DummyGoods)
	self.gradeReward = is:popList(i3k_sbean.TotalReaward)
end

function i3k_sbean.RoleDonateCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.daytimes)
	os:pushList(self.inputGoods)
	os:pushList(self.outputGoods)
	os:pushList(self.gradeReward)
end


i3k_sbean.RoleLegendMakeInfo = i3k_class("RoleLegendMakeInfo")
function i3k_sbean.RoleLegendMakeInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleLegendMakeCfg	
	--self.log:		DBRoleLegendMakeLog	
end

function i3k_sbean.RoleLegendMakeInfo:clone()
	return clone(self)
end

function i3k_sbean.RoleLegendMakeInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleLegendMakeCfg)
	self.log = is:pop(i3k_sbean.DBRoleLegendMakeLog)
end

function i3k_sbean.RoleLegendMakeInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:push(self.log)
end


i3k_sbean.TotalReaward = i3k_class("TotalReaward")
function i3k_sbean.TotalReaward:ctor()
	--self.times:		int32	
	--self.goods:		vector[DummyGoods]	
end

function i3k_sbean.TotalReaward:clone()
	return clone(self)
end

function i3k_sbean.TotalReaward:decode(is)
	self.times = is:popNumber()
	self.goods = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.TotalReaward:encode(os)
	os:pushNumber(self.times)
	os:pushList(self.goods)
end


i3k_sbean.ThumbTackInfo = i3k_class("ThumbTackInfo")
function i3k_sbean.ThumbTackInfo:ctor()
	--self.mapId:		int32	
	--self.index:		int32	
	--self.remarks:		string	
	--self.addTime:		int32	
end

function i3k_sbean.ThumbTackInfo:clone()
	return clone(self)
end

function i3k_sbean.ThumbTackInfo:decode(is)
	self.mapId = is:popNumber()
	self.index = is:popNumber()
	self.remarks = is:popString()
	self.addTime = is:popNumber()
end

function i3k_sbean.ThumbTackInfo:encode(os)
	os:pushNumber(self.mapId)
	os:pushNumber(self.index)
	os:pushString(self.remarks)
	os:pushNumber(self.addTime)
end


i3k_sbean.ThumbTackInfos = i3k_class("ThumbTackInfos")
function i3k_sbean.ThumbTackInfos:ctor()
	--self.mapId:		int32	
	--self.index:		int32	
	--self.remarks:		string	
	--self.position:		Vector3	
	--self.addTime:		int32	
end

function i3k_sbean.ThumbTackInfos:clone()
	return clone(self)
end

function i3k_sbean.ThumbTackInfos:decode(is)
	self.mapId = is:popNumber()
	self.index = is:popNumber()
	self.remarks = is:popString()
	self.position = is:pop(i3k_sbean.Vector3)
	self.addTime = is:popNumber()
end

function i3k_sbean.ThumbTackInfos:encode(os)
	os:pushNumber(self.mapId)
	os:pushNumber(self.index)
	os:pushString(self.remarks)
	os:push(self.position)
	os:pushNumber(self.addTime)
end


i3k_sbean.HouseMapInfo = i3k_class("HouseMapInfo")
function i3k_sbean.HouseMapInfo:ctor()
	--self.houseLevel:		int32	
	--self.curSkin:		int32	
	--self.furnitures:		vector[DBHomelandFurnitures]	
	--self.pendants:		vector[DBHomelandPendant]	
	--self.buildValue:		int32	
	--self.maxBuildValue:		int32	
	--self.floorFurnitures:		vector[DBHomelandFloorFurnitures]	
end

function i3k_sbean.HouseMapInfo:clone()
	return clone(self)
end

function i3k_sbean.HouseMapInfo:decode(is)
	self.houseLevel = is:popNumber()
	self.curSkin = is:popNumber()
	self.furnitures = is:popList(i3k_sbean.DBHomelandFurnitures)
	self.pendants = is:popList(i3k_sbean.DBHomelandPendant)
	self.buildValue = is:popNumber()
	self.maxBuildValue = is:popNumber()
	self.floorFurnitures = is:popList(i3k_sbean.DBHomelandFloorFurnitures)
end

function i3k_sbean.HouseMapInfo:encode(os)
	os:pushNumber(self.houseLevel)
	os:pushNumber(self.curSkin)
	os:pushList(self.furnitures)
	os:pushList(self.pendants)
	os:pushNumber(self.buildValue)
	os:pushNumber(self.maxBuildValue)
	os:pushList(self.floorFurnitures)
end


i3k_sbean.HomelandMapInfo = i3k_class("HomelandMapInfo")
function i3k_sbean.HomelandMapInfo:ctor()
	--self.level:		int32	
	--self.name:		string	
	--self.plantData:		DBHomelandPlantData	
	--self.grounds:		map[int32, DBHomelandGround]	
	--self.decorate:		map[int32, DBHomelandDecorate]	
	--self.petPositions:		map[int32, DBHomelandPetPosition]	
	--self.poolLevel:		int32	
	--self.heat:		int32	
	--self.houseLevel:		int32	
end

function i3k_sbean.HomelandMapInfo:clone()
	return clone(self)
end

function i3k_sbean.HomelandMapInfo:decode(is)
	self.level = is:popNumber()
	self.name = is:popString()
	self.plantData = is:pop(i3k_sbean.DBHomelandPlantData)
	self.grounds = is:popNumberMap(i3k_sbean.DBHomelandGround)
	self.decorate = is:popNumberMap(i3k_sbean.DBHomelandDecorate)
	self.petPositions = is:popNumberMap(i3k_sbean.DBHomelandPetPosition)
	self.poolLevel = is:popNumber()
	self.heat = is:popNumber()
	self.houseLevel = is:popNumber()
end

function i3k_sbean.HomelandMapInfo:encode(os)
	os:pushNumber(self.level)
	os:pushString(self.name)
	os:push(self.plantData)
	os:pushNumberMap(self.grounds)
	os:pushNumberMap(self.decorate)
	os:pushNumberMap(self.petPositions)
	os:pushNumber(self.poolLevel)
	os:pushNumber(self.heat)
	os:pushNumber(self.houseLevel)
end


i3k_sbean.CityWarBidRank = i3k_class("CityWarBidRank")
function i3k_sbean.CityWarBidRank:ctor()
	--self.rank:		vector[cityWarSectInfo]	
end

function i3k_sbean.CityWarBidRank:clone()
	return clone(self)
end

function i3k_sbean.CityWarBidRank:decode(is)
	self.rank = is:popList(i3k_sbean.cityWarSectInfo)
end

function i3k_sbean.CityWarBidRank:encode(os)
	os:pushList(self.rank)
end


i3k_sbean.cityWarSectInfo = i3k_class("cityWarSectInfo")
function i3k_sbean.cityWarSectInfo:ctor()
	--self.overView:		SectOverview	
	--self.price:		int32	
end

function i3k_sbean.cityWarSectInfo:clone()
	return clone(self)
end

function i3k_sbean.cityWarSectInfo:decode(is)
	self.overView = is:pop(i3k_sbean.SectOverview)
	self.price = is:popNumber()
end

function i3k_sbean.cityWarSectInfo:encode(os)
	os:push(self.overView)
	os:pushNumber(self.price)
end


i3k_sbean.FiveHegemonyInfo = i3k_class("FiveHegemonyInfo")
function i3k_sbean.FiveHegemonyInfo:ctor()
	--self.curRound:		int32	
	--self.roleInfo:		FiveHegemonyRoleInfo	
	--self.npcInfo:		vector[FiveHegemonyNpcInfo]	
	--self.chooseResults:		vector[FiveHegemonyFightResult]	
	--self.barrages:		FiveHegemonyBarrageInfo	
end

function i3k_sbean.FiveHegemonyInfo:clone()
	return clone(self)
end

function i3k_sbean.FiveHegemonyInfo:decode(is)
	self.curRound = is:popNumber()
	self.roleInfo = is:pop(i3k_sbean.FiveHegemonyRoleInfo)
	self.npcInfo = is:popList(i3k_sbean.FiveHegemonyNpcInfo)
	self.chooseResults = is:popList(i3k_sbean.FiveHegemonyFightResult)
	self.barrages = is:pop(i3k_sbean.FiveHegemonyBarrageInfo)
end

function i3k_sbean.FiveHegemonyInfo:encode(os)
	os:pushNumber(self.curRound)
	os:push(self.roleInfo)
	os:pushList(self.npcInfo)
	os:pushList(self.chooseResults)
	os:push(self.barrages)
end


i3k_sbean.FiveHegemonyNpcInfo = i3k_class("FiveHegemonyNpcInfo")
function i3k_sbean.FiveHegemonyNpcInfo:ctor()
	--self.npcID:		int32	
	--self.curBlood:		int32	
end

function i3k_sbean.FiveHegemonyNpcInfo:clone()
	return clone(self)
end

function i3k_sbean.FiveHegemonyNpcInfo:decode(is)
	self.npcID = is:popNumber()
	self.curBlood = is:popNumber()
end

function i3k_sbean.FiveHegemonyNpcInfo:encode(os)
	os:pushNumber(self.npcID)
	os:pushNumber(self.curBlood)
end


i3k_sbean.FiveHegemonyBarrageInfo = i3k_class("FiveHegemonyBarrageInfo")
function i3k_sbean.FiveHegemonyBarrageInfo:ctor()
	--self.id:		int32	
	--self.barrages:		vector[string]	
end

function i3k_sbean.FiveHegemonyBarrageInfo:clone()
	return clone(self)
end

function i3k_sbean.FiveHegemonyBarrageInfo:decode(is)
	self.id = is:popNumber()
	self.barrages = is:popStringList()
end

function i3k_sbean.FiveHegemonyBarrageInfo:encode(os)
	os:pushNumber(self.id)
	os:pushStringList(self.barrages)
end


i3k_sbean.FiveHegemonyBarrageDetail = i3k_class("FiveHegemonyBarrageDetail")
function i3k_sbean.FiveHegemonyBarrageDetail:ctor()
	--self.id:		int32	
	--self.msg:		string	
end

function i3k_sbean.FiveHegemonyBarrageDetail:clone()
	return clone(self)
end

function i3k_sbean.FiveHegemonyBarrageDetail:decode(is)
	self.id = is:popNumber()
	self.msg = is:popString()
end

function i3k_sbean.FiveHegemonyBarrageDetail:encode(os)
	os:pushNumber(self.id)
	os:pushString(self.msg)
end


i3k_sbean.FiveHegemonyTempSkills = i3k_class("FiveHegemonyTempSkills")
function i3k_sbean.FiveHegemonyTempSkills:ctor()
	--self.npcID:		int32	
	--self.tempSkills:		map[int32, int32]	
end

function i3k_sbean.FiveHegemonyTempSkills:clone()
	return clone(self)
end

function i3k_sbean.FiveHegemonyTempSkills:decode(is)
	self.npcID = is:popNumber()
	self.tempSkills = is:popNumberNumberMap()
end

function i3k_sbean.FiveHegemonyTempSkills:encode(os)
	os:pushNumber(self.npcID)
	os:pushNumberNumberMap(self.tempSkills)
end


i3k_sbean.FiveHegemonyFightResult = i3k_class("FiveHegemonyFightResult")
function i3k_sbean.FiveHegemonyFightResult:ctor()
	--self.round:		int32	
	--self.skillInfo:		vector[FiveHegemonySkillResult]	
end

function i3k_sbean.FiveHegemonyFightResult:clone()
	return clone(self)
end

function i3k_sbean.FiveHegemonyFightResult:decode(is)
	self.round = is:popNumber()
	self.skillInfo = is:popList(i3k_sbean.FiveHegemonySkillResult)
end

function i3k_sbean.FiveHegemonyFightResult:encode(os)
	os:pushNumber(self.round)
	os:pushList(self.skillInfo)
end


i3k_sbean.FiveHegemonySkillResult = i3k_class("FiveHegemonySkillResult")
function i3k_sbean.FiveHegemonySkillResult:ctor()
	--self.npcID:		int32	
	--self.skillID:		int32	
	--self.damage:		int32	
end

function i3k_sbean.FiveHegemonySkillResult:clone()
	return clone(self)
end

function i3k_sbean.FiveHegemonySkillResult:decode(is)
	self.npcID = is:popNumber()
	self.skillID = is:popNumber()
	self.damage = is:popNumber()
end

function i3k_sbean.FiveHegemonySkillResult:encode(os)
	os:pushNumber(self.npcID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.damage)
end


i3k_sbean.FiveHegemonyRoleInfo = i3k_class("FiveHegemonyRoleInfo")
function i3k_sbean.FiveHegemonyRoleInfo:ctor()
	--self.npcID:		int32	
	--self.tempSkillID:		int32	
	--self.skillRound:		int32	
	--self.lastSendTime:		int32	
	--self.rightCnt:		set[int32]	
end

function i3k_sbean.FiveHegemonyRoleInfo:clone()
	return clone(self)
end

function i3k_sbean.FiveHegemonyRoleInfo:decode(is)
	self.npcID = is:popNumber()
	self.tempSkillID = is:popNumber()
	self.skillRound = is:popNumber()
	self.lastSendTime = is:popNumber()
	self.rightCnt = is:popNumberSet()
end

function i3k_sbean.FiveHegemonyRoleInfo:encode(os)
	os:pushNumber(self.npcID)
	os:pushNumber(self.tempSkillID)
	os:pushNumber(self.skillRound)
	os:pushNumber(self.lastSendTime)
	os:pushNumberSet(self.rightCnt)
end


i3k_sbean.ShopDiscountInfo = i3k_class("ShopDiscountInfo")
function i3k_sbean.ShopDiscountInfo:ctor()
	--self.discount:		int32	
	--self.endTime:		int32	
end

function i3k_sbean.ShopDiscountInfo:clone()
	return clone(self)
end

function i3k_sbean.ShopDiscountInfo:decode(is)
	self.discount = is:popNumber()
	self.endTime = is:popNumber()
end

function i3k_sbean.ShopDiscountInfo:encode(os)
	os:pushNumber(self.discount)
	os:pushNumber(self.endTime)
end


i3k_sbean.SuperArenaChessArmInfo = i3k_class("SuperArenaChessArmInfo")
function i3k_sbean.SuperArenaChessArmInfo:ctor()
	--self.forceType:		int32	
	--self.arm:		int32	
end

function i3k_sbean.SuperArenaChessArmInfo:clone()
	return clone(self)
end

function i3k_sbean.SuperArenaChessArmInfo:decode(is)
	self.forceType = is:popNumber()
	self.arm = is:popNumber()
end

function i3k_sbean.SuperArenaChessArmInfo:encode(os)
	os:pushNumber(self.forceType)
	os:pushNumber(self.arm)
end


i3k_sbean.EightDiagramPartInfo = i3k_class("EightDiagramPartInfo")
function i3k_sbean.EightDiagramPartInfo:ctor()
	--self.level:		int32	
	--self.changeInfo:		DBDiagramChangePartInfo	
end

function i3k_sbean.EightDiagramPartInfo:clone()
	return clone(self)
end

function i3k_sbean.EightDiagramPartInfo:decode(is)
	self.level = is:popNumber()
	self.changeInfo = is:pop(i3k_sbean.DBDiagramChangePartInfo)
end

function i3k_sbean.EightDiagramPartInfo:encode(os)
	os:pushNumber(self.level)
	os:push(self.changeInfo)
end


i3k_sbean.MasterDetail = i3k_class("MasterDetail")
function i3k_sbean.MasterDetail:ctor()
	--self.vip:		int32	
	--self.power:		int32	
	--self.online:		bool	
	--self.apprenticeCount:		int32	
	--self.announce:		string	
	--self.overview:		RoleOverview	
end

function i3k_sbean.MasterDetail:clone()
	return clone(self)
end

function i3k_sbean.MasterDetail:decode(is)
	self.vip = is:popNumber()
	self.power = is:popNumber()
	self.online = is:popBool()
	self.apprenticeCount = is:popNumber()
	self.announce = is:popString()
	self.overview = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.MasterDetail:encode(os)
	os:pushNumber(self.vip)
	os:pushNumber(self.power)
	os:pushBool(self.online)
	os:pushNumber(self.apprenticeCount)
	os:pushString(self.announce)
	os:push(self.overview)
end


i3k_sbean.ApprenticeDetail = i3k_class("ApprenticeDetail")
function i3k_sbean.ApprenticeDetail:ctor()
	--self.historyPoint:		int32	
	--self.historyActivity:		int32	
	--self.online:		bool	
	--self.score:		int32	
	--self.overview:		RoleOverview	
end

function i3k_sbean.ApprenticeDetail:clone()
	return clone(self)
end

function i3k_sbean.ApprenticeDetail:decode(is)
	self.historyPoint = is:popNumber()
	self.historyActivity = is:popNumber()
	self.online = is:popBool()
	self.score = is:popNumber()
	self.overview = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.ApprenticeDetail:encode(os)
	os:pushNumber(self.historyPoint)
	os:pushNumber(self.historyActivity)
	os:pushBool(self.online)
	os:pushNumber(self.score)
	os:push(self.overview)
end


i3k_sbean.DBMasterTask = i3k_class("DBMasterTask")
function i3k_sbean.DBMasterTask:ctor()
	--self.taskType:		int32	
	--self.taskProgress:		int32	
end

function i3k_sbean.DBMasterTask:clone()
	return clone(self)
end

function i3k_sbean.DBMasterTask:decode(is)
	self.taskType = is:popNumber()
	self.taskProgress = is:popNumber()
end

function i3k_sbean.DBMasterTask:encode(os)
	os:pushNumber(self.taskType)
	os:pushNumber(self.taskProgress)
end


i3k_sbean.MasterMember = i3k_class("MasterMember")
function i3k_sbean.MasterMember:ctor()
	--self.overView:		RoleOverview	
	--self.online:		bool	
	--self.point:		int32	
end

function i3k_sbean.MasterMember:clone()
	return clone(self)
end

function i3k_sbean.MasterMember:decode(is)
	self.overView = is:pop(i3k_sbean.RoleOverview)
	self.online = is:popBool()
	self.point = is:popNumber()
end

function i3k_sbean.MasterMember:encode(os)
	os:push(self.overView)
	os:pushBool(self.online)
	os:pushNumber(self.point)
end


i3k_sbean.MasterApplyEntry = i3k_class("MasterApplyEntry")
function i3k_sbean.MasterApplyEntry:ctor()
	--self.overView:		RoleOverview	
	--self.applyTime:		int32	
end

function i3k_sbean.MasterApplyEntry:clone()
	return clone(self)
end

function i3k_sbean.MasterApplyEntry:decode(is)
	self.overView = is:pop(i3k_sbean.RoleOverview)
	self.applyTime = is:popNumber()
end

function i3k_sbean.MasterApplyEntry:encode(os)
	os:push(self.overView)
	os:pushNumber(self.applyTime)
end


i3k_sbean.MasterCardOverview = i3k_class("MasterCardOverview")
function i3k_sbean.MasterCardOverview:ctor()
	--self.master:		RoleFeature	
	--self.apprentices:		vector[RoleFeature]	
	--self.praise:		int32	
	--self.declaration:		string	
end

function i3k_sbean.MasterCardOverview:clone()
	return clone(self)
end

function i3k_sbean.MasterCardOverview:decode(is)
	self.master = is:pop(i3k_sbean.RoleFeature)
	self.apprentices = is:popList(i3k_sbean.RoleFeature)
	self.praise = is:popNumber()
	self.declaration = is:popString()
end

function i3k_sbean.MasterCardOverview:encode(os)
	os:push(self.master)
	os:pushList(self.apprentices)
	os:pushNumber(self.praise)
	os:pushString(self.declaration)
end


i3k_sbean.MoodDiaryView = i3k_class("MoodDiaryView")
function i3k_sbean.MoodDiaryView:ctor()
	--self.roleOverview:		RoleOverview	
	--self.curDecorate:		int32	
	--self.actDecorates:		vector[int32]	
	--self.fans:		vector[DBMoodDiaryFans]	
	--self.diaries:		vector[DBMoodDiaryText]	
	--self.totalDiariesCnt:		int32	
	--self.dayWirteCnt:		int32	
	--self.receiveGifts:		map[int32, int32]	
	--self.popularity:		int32	
	--self.sendLogs:		vector[DBMoodDiaryGiftLog]	
	--self.receiveLogs:		vector[DBMoodDiaryGiftLog]	
end

function i3k_sbean.MoodDiaryView:clone()
	return clone(self)
end

function i3k_sbean.MoodDiaryView:decode(is)
	self.roleOverview = is:pop(i3k_sbean.RoleOverview)
	self.curDecorate = is:popNumber()
	self.actDecorates = is:popNumberList()
	self.fans = is:popList(i3k_sbean.DBMoodDiaryFans)
	self.diaries = is:popList(i3k_sbean.DBMoodDiaryText)
	self.totalDiariesCnt = is:popNumber()
	self.dayWirteCnt = is:popNumber()
	self.receiveGifts = is:popNumberNumberMap()
	self.popularity = is:popNumber()
	self.sendLogs = is:popList(i3k_sbean.DBMoodDiaryGiftLog)
	self.receiveLogs = is:popList(i3k_sbean.DBMoodDiaryGiftLog)
end

function i3k_sbean.MoodDiaryView:encode(os)
	os:push(self.roleOverview)
	os:pushNumber(self.curDecorate)
	os:pushNumberList(self.actDecorates)
	os:pushList(self.fans)
	os:pushList(self.diaries)
	os:pushNumber(self.totalDiariesCnt)
	os:pushNumber(self.dayWirteCnt)
	os:pushNumberNumberMap(self.receiveGifts)
	os:pushNumber(self.popularity)
	os:pushList(self.sendLogs)
	os:pushList(self.receiveLogs)
end


i3k_sbean.DBRoleMoodDiary = i3k_class("DBRoleMoodDiary")
function i3k_sbean.DBRoleMoodDiary:ctor()
	--self.curDecorate:		int32	
	--self.dayWriteCnt:		int32	
	--self.actDecorates:		vector[int32]	
	--self.fans:		vector[DBMoodDiaryFans]	
	--self.diaries:		vector[DBMoodDiaryText]	
	--self.receiveGifts:		map[int32, int32]	
	--self.popularity:		int32	
	--self.sendLogs:		vector[DBMoodDiaryGiftLog]	
	--self.receiveLogs:		vector[DBMoodDiaryGiftLog]	
	--self.padding1_1:		int16	
end

function i3k_sbean.DBRoleMoodDiary:clone()
	return clone(self)
end

function i3k_sbean.DBRoleMoodDiary:decode(is)
	self.curDecorate = is:popNumber()
	self.dayWriteCnt = is:popNumber()
	self.actDecorates = is:popNumberList()
	self.fans = is:popList(i3k_sbean.DBMoodDiaryFans)
	self.diaries = is:popList(i3k_sbean.DBMoodDiaryText)
	self.receiveGifts = is:popNumberNumberMap()
	self.popularity = is:popNumber()
	self.sendLogs = is:popList(i3k_sbean.DBMoodDiaryGiftLog)
	self.receiveLogs = is:popList(i3k_sbean.DBMoodDiaryGiftLog)
	self.padding1_1 = is:popNumber()
end

function i3k_sbean.DBRoleMoodDiary:encode(os)
	os:pushNumber(self.curDecorate)
	os:pushNumber(self.dayWriteCnt)
	os:pushNumberList(self.actDecorates)
	os:pushList(self.fans)
	os:pushList(self.diaries)
	os:pushNumberNumberMap(self.receiveGifts)
	os:pushNumber(self.popularity)
	os:pushList(self.sendLogs)
	os:pushList(self.receiveLogs)
	os:pushNumber(self.padding1_1)
end


i3k_sbean.DBMoodDiaryGiftLog = i3k_class("DBMoodDiaryGiftLog")
function i3k_sbean.DBMoodDiaryGiftLog:ctor()
	--self.overview:		RoleOverview	
	--self.itemID:		int32	
	--self.cnt:		int32	
	--self.time:		int32	
end

function i3k_sbean.DBMoodDiaryGiftLog:clone()
	return clone(self)
end

function i3k_sbean.DBMoodDiaryGiftLog:decode(is)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.itemID = is:popNumber()
	self.cnt = is:popNumber()
	self.time = is:popNumber()
end

function i3k_sbean.DBMoodDiaryGiftLog:encode(os)
	os:push(self.overview)
	os:pushNumber(self.itemID)
	os:pushNumber(self.cnt)
	os:pushNumber(self.time)
end


i3k_sbean.DBMoodDiaryFans = i3k_class("DBMoodDiaryFans")
function i3k_sbean.DBMoodDiaryFans:ctor()
	--self.role:		RoleOverview	
	--self.value:		int32	
end

function i3k_sbean.DBMoodDiaryFans:clone()
	return clone(self)
end

function i3k_sbean.DBMoodDiaryFans:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.value = is:popNumber()
end

function i3k_sbean.DBMoodDiaryFans:encode(os)
	os:push(self.role)
	os:pushNumber(self.value)
end


i3k_sbean.DBMoodDiaryText = i3k_class("DBMoodDiaryText")
function i3k_sbean.DBMoodDiaryText:ctor()
	--self.time:		int32	
	--self.msg:		string	
end

function i3k_sbean.DBMoodDiaryText:clone()
	return clone(self)
end

function i3k_sbean.DBMoodDiaryText:decode(is)
	self.time = is:popNumber()
	self.msg = is:popString()
end

function i3k_sbean.DBMoodDiaryText:encode(os)
	os:pushNumber(self.time)
	os:pushString(self.msg)
end


i3k_sbean.DBCrossFriends = i3k_class("DBCrossFriends")
function i3k_sbean.DBCrossFriends:ctor()
	--self.self:		DBPersonalInfo	
	--self.openMatch:		int8	
	--self.matchInfo:		DBCrossInfo	
	--self.friends:		map[int32, DBCrossInfo]	
	--self.applies:		vector[DBCrossInfo]	
	--self.dayRefreshTimes:		int32	
end

function i3k_sbean.DBCrossFriends:clone()
	return clone(self)
end

function i3k_sbean.DBCrossFriends:decode(is)
	self.self = is:pop(i3k_sbean.DBPersonalInfo)
	self.openMatch = is:popNumber()
	self.matchInfo = is:pop(i3k_sbean.DBCrossInfo)
	self.friends = is:popNumberMap(i3k_sbean.DBCrossInfo)
	self.applies = is:popList(i3k_sbean.DBCrossInfo)
	self.dayRefreshTimes = is:popNumber()
end

function i3k_sbean.DBCrossFriends:encode(os)
	os:push(self.self)
	os:pushNumber(self.openMatch)
	os:push(self.matchInfo)
	os:pushNumberMap(self.friends)
	os:pushList(self.applies)
	os:pushNumber(self.dayRefreshTimes)
end


i3k_sbean.DBCrossInfo = i3k_class("DBCrossInfo")
function i3k_sbean.DBCrossInfo:ctor()
	--self.info:		DBPersonalInfo	
	--self.overview:		RoleOverview	
end

function i3k_sbean.DBCrossInfo:clone()
	return clone(self)
end

function i3k_sbean.DBCrossInfo:decode(is)
	self.info = is:pop(i3k_sbean.DBPersonalInfo)
	self.overview = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.DBCrossInfo:encode(os)
	os:push(self.info)
	os:push(self.overview)
end


-- (constellation:星座, diyHobbies自定义爱好 testScore[组ID, 测试分数] signature 交友宣言)
i3k_sbean.DBPersonalInfo = i3k_class("DBPersonalInfo")
function i3k_sbean.DBPersonalInfo:ctor()
	--self.constellation:		int8	
	--self.gender:		int8	
	--self.hobbies:		set[int32]	
	--self.diyHobbies:		vector[string]	
	--self.testScore:		map[int32, int32]	
	--self.signature:		string	
end

function i3k_sbean.DBPersonalInfo:clone()
	return clone(self)
end

function i3k_sbean.DBPersonalInfo:decode(is)
	self.constellation = is:popNumber()
	self.gender = is:popNumber()
	self.hobbies = is:popNumberSet()
	self.diyHobbies = is:popStringList()
	self.testScore = is:popNumberNumberMap()
	self.signature = is:popString()
end

function i3k_sbean.DBPersonalInfo:encode(os)
	os:pushNumber(self.constellation)
	os:pushNumber(self.gender)
	os:pushNumberSet(self.hobbies)
	os:pushStringList(self.diyHobbies)
	os:pushNumberNumberMap(self.testScore)
	os:pushString(self.signature)
end


i3k_sbean.CrossFriendOverview = i3k_class("CrossFriendOverview")
function i3k_sbean.CrossFriendOverview:ctor()
	--self.info:		DBPersonalInfo	
	--self.overview:		RoleOverview	
	--self.online:		int32	
end

function i3k_sbean.CrossFriendOverview:clone()
	return clone(self)
end

function i3k_sbean.CrossFriendOverview:decode(is)
	self.info = is:pop(i3k_sbean.DBPersonalInfo)
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.online = is:popNumber()
end

function i3k_sbean.CrossFriendOverview:encode(os)
	os:push(self.info)
	os:push(self.overview)
	os:pushNumber(self.online)
end


i3k_sbean.DBRoleSealGivenSpirit = i3k_class("DBRoleSealGivenSpirit")
function i3k_sbean.DBRoleSealGivenSpirit:ctor()
	--self.curLvl:		int32	
	--self.curUpTimes:		int32	
	--self.curUsePoints:		int32	
	--self.addPoints:		map[int32, int32]	
	--self.upEachOther:		map[int32, int32]	
	--self.resetAddPointCnt:		int16	
	--self.buyPointsCnt:		int16	
end

function i3k_sbean.DBRoleSealGivenSpirit:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSealGivenSpirit:decode(is)
	self.curLvl = is:popNumber()
	self.curUpTimes = is:popNumber()
	self.curUsePoints = is:popNumber()
	self.addPoints = is:popNumberNumberMap()
	self.upEachOther = is:popNumberNumberMap()
	self.resetAddPointCnt = is:popNumber()
	self.buyPointsCnt = is:popNumber()
end

function i3k_sbean.DBRoleSealGivenSpirit:encode(os)
	os:pushNumber(self.curLvl)
	os:pushNumber(self.curUpTimes)
	os:pushNumber(self.curUsePoints)
	os:pushNumberNumberMap(self.addPoints)
	os:pushNumberNumberMap(self.upEachOther)
	os:pushNumber(self.resetAddPointCnt)
	os:pushNumber(self.buyPointsCnt)
end


i3k_sbean.ChessGameRankRole = i3k_class("ChessGameRankRole")
function i3k_sbean.ChessGameRankRole:ctor()
	--self.role:		RoleOverview	
	--self.rank:		int32	
	--self.loopLvl:		int32	
	--self.chessValue:		int32	
end

function i3k_sbean.ChessGameRankRole:clone()
	return clone(self)
end

function i3k_sbean.ChessGameRankRole:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.rank = is:popNumber()
	self.loopLvl = is:popNumber()
	self.chessValue = is:popNumber()
end

function i3k_sbean.ChessGameRankRole:encode(os)
	os:push(self.role)
	os:pushNumber(self.rank)
	os:pushNumber(self.loopLvl)
	os:pushNumber(self.chessValue)
end


i3k_sbean.DBChessGame = i3k_class("DBChessGame")
function i3k_sbean.DBChessGame:ctor()
	--self.loopLvl:		int32	
	--self.chessValue:		int32	
	--self.curLoopChessValue:		int32	
	--self.curUpCnt:		int32	
	--self.curTaskID:		int32	
	--self.curValue:		int32	
	--self.curReceiveTime:		int32	
	--self.curExtReward:		int32	
	--self.loopEndTime:		int32	
	--self.loopRewards:		map[int32, int32]	
	--self.needUpLoopLvl:		int32	
	--self.isLoopOver:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBChessGame:clone()
	return clone(self)
end

function i3k_sbean.DBChessGame:decode(is)
	self.loopLvl = is:popNumber()
	self.chessValue = is:popNumber()
	self.curLoopChessValue = is:popNumber()
	self.curUpCnt = is:popNumber()
	self.curTaskID = is:popNumber()
	self.curValue = is:popNumber()
	self.curReceiveTime = is:popNumber()
	self.curExtReward = is:popNumber()
	self.loopEndTime = is:popNumber()
	self.loopRewards = is:popNumberNumberMap()
	self.needUpLoopLvl = is:popNumber()
	self.isLoopOver = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBChessGame:encode(os)
	os:pushNumber(self.loopLvl)
	os:pushNumber(self.chessValue)
	os:pushNumber(self.curLoopChessValue)
	os:pushNumber(self.curUpCnt)
	os:pushNumber(self.curTaskID)
	os:pushNumber(self.curValue)
	os:pushNumber(self.curReceiveTime)
	os:pushNumber(self.curExtReward)
	os:pushNumber(self.loopEndTime)
	os:pushNumberNumberMap(self.loopRewards)
	os:pushNumber(self.needUpLoopLvl)
	os:pushNumber(self.isLoopOver)
	os:pushNumber(self.padding)
end


i3k_sbean.DBChessGameRank = i3k_class("DBChessGameRank")
function i3k_sbean.DBChessGameRank:ctor()
	--self.lastDayRefresh:		int32	
	--self.type:		int32	
	--self.ranks:		vector[RankRole]	
	--self.isRankWeardSend:		int8	
	--self.joinGameRoles:		set[int32]	
end

function i3k_sbean.DBChessGameRank:clone()
	return clone(self)
end

function i3k_sbean.DBChessGameRank:decode(is)
	self.lastDayRefresh = is:popNumber()
	self.type = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.isRankWeardSend = is:popNumber()
	self.joinGameRoles = is:popNumberSet()
end

function i3k_sbean.DBChessGameRank:encode(os)
	os:pushNumber(self.lastDayRefresh)
	os:pushNumber(self.type)
	os:pushList(self.ranks)
	os:pushNumber(self.isRankWeardSend)
	os:pushNumberSet(self.joinGameRoles)
end


i3k_sbean.DBRoleSoulSpell = i3k_class("DBRoleSoulSpell")
function i3k_sbean.DBRoleSoulSpell:ctor()
	--self.grade:		int32	
	--self.breakTimes:		int32	
	--self.props:		map[int32, int32]	
	--self.padding:		int32	
end

function i3k_sbean.DBRoleSoulSpell:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSoulSpell:decode(is)
	self.grade = is:popNumber()
	self.breakTimes = is:popNumber()
	self.props = is:popNumberNumberMap()
	self.padding = is:popNumber()
end

function i3k_sbean.DBRoleSoulSpell:encode(os)
	os:pushNumber(self.grade)
	os:pushNumber(self.breakTimes)
	os:pushNumberNumberMap(self.props)
	os:pushNumber(self.padding)
end


-- db 数据
i3k_sbean.RoleSoulSpell = i3k_class("RoleSoulSpell")
function i3k_sbean.RoleSoulSpell:ctor()
	--self.grade:		int32	
	--self.padding:		int32	
end

function i3k_sbean.RoleSoulSpell:clone()
	return clone(self)
end

function i3k_sbean.RoleSoulSpell:decode(is)
	self.grade = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.RoleSoulSpell:encode(os)
	os:pushNumber(self.grade)
	os:pushNumber(self.padding)
end


i3k_sbean.DBRoleHideWeapon = i3k_class("DBRoleHideWeapon")
function i3k_sbean.DBRoleHideWeapon:ctor()
	--self.curWeapon:		int32	
	--self.nextChangeHWeaponTrigTime:		int32	
	--self.weapons:		map[int32, DBHideWeapon]	
	--self.padding:		int32	
end

function i3k_sbean.DBRoleHideWeapon:clone()
	return clone(self)
end

function i3k_sbean.DBRoleHideWeapon:decode(is)
	self.curWeapon = is:popNumber()
	self.nextChangeHWeaponTrigTime = is:popNumber()
	self.weapons = is:popNumberMap(i3k_sbean.DBHideWeapon)
	self.padding = is:popNumber()
end

function i3k_sbean.DBRoleHideWeapon:encode(os)
	os:pushNumber(self.curWeapon)
	os:pushNumber(self.nextChangeHWeaponTrigTime)
	os:pushNumberMap(self.weapons)
	os:pushNumber(self.padding)
end


i3k_sbean.DBHideWeapon = i3k_class("DBHideWeapon")
function i3k_sbean.DBHideWeapon:ctor()
	--self.rankValue:		int32	
	--self.level:		int32	
	--self.exp:		int32	
	--self.aSkillLevel:		int32	
	--self.slots:		vector[int32]	
	--self.skillLib:		map[int32, int32]	
	--self.fightPower:		int32	
	--self.skin:		DBHWSkinInfo	
	--self.padding:		int32	
end

function i3k_sbean.DBHideWeapon:clone()
	return clone(self)
end

function i3k_sbean.DBHideWeapon:decode(is)
	self.rankValue = is:popNumber()
	self.level = is:popNumber()
	self.exp = is:popNumber()
	self.aSkillLevel = is:popNumber()
	self.slots = is:popNumberList()
	self.skillLib = is:popNumberNumberMap()
	self.fightPower = is:popNumber()
	self.skin = is:pop(i3k_sbean.DBHWSkinInfo)
	self.padding = is:popNumber()
end

function i3k_sbean.DBHideWeapon:encode(os)
	os:pushNumber(self.rankValue)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
	os:pushNumber(self.aSkillLevel)
	os:pushNumberList(self.slots)
	os:pushNumberNumberMap(self.skillLib)
	os:pushNumber(self.fightPower)
	os:push(self.skin)
	os:pushNumber(self.padding)
end


i3k_sbean.DBHWSkinInfo = i3k_class("DBHWSkinInfo")
function i3k_sbean.DBHWSkinInfo:ctor()
	--self.curSkin:		int32	
	--self.skinLib:		set[int32]	
end

function i3k_sbean.DBHWSkinInfo:clone()
	return clone(self)
end

function i3k_sbean.DBHWSkinInfo:decode(is)
	self.curSkin = is:popNumber()
	self.skinLib = is:popNumberSet()
end

function i3k_sbean.DBHWSkinInfo:encode(os)
	os:pushNumber(self.curSkin)
	os:pushNumberSet(self.skinLib)
end


i3k_sbean.HideWeaponSkill = i3k_class("HideWeaponSkill")
function i3k_sbean.HideWeaponSkill:ctor()
	--self.id:		int32	
	--self.level:		int32	
end

function i3k_sbean.HideWeaponSkill:clone()
	return clone(self)
end

function i3k_sbean.HideWeaponSkill:decode(is)
	self.id = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.HideWeaponSkill:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
end


i3k_sbean.RoleHideWeapon = i3k_class("RoleHideWeapon")
function i3k_sbean.RoleHideWeapon:ctor()
	--self.curWeapon:		int32	
	--self.weapons:		map[int32, HideWeapon]	
end

function i3k_sbean.RoleHideWeapon:clone()
	return clone(self)
end

function i3k_sbean.RoleHideWeapon:decode(is)
	self.curWeapon = is:popNumber()
	self.weapons = is:popNumberMap(i3k_sbean.HideWeapon)
end

function i3k_sbean.RoleHideWeapon:encode(os)
	os:pushNumber(self.curWeapon)
	os:pushNumberMap(self.weapons)
end


i3k_sbean.HideWeapon = i3k_class("HideWeapon")
function i3k_sbean.HideWeapon:ctor()
	--self.rankValue:		int32	
	--self.level:		int32	
	--self.aSkillLevel:		int32	
	--self.slots:		vector[HideWeaponSkill]	
	--self.curSkin:		int32	
	--self.skinLib:		set[int32]	
	--self.fightPower:		int32	
end

function i3k_sbean.HideWeapon:clone()
	return clone(self)
end

function i3k_sbean.HideWeapon:decode(is)
	self.rankValue = is:popNumber()
	self.level = is:popNumber()
	self.aSkillLevel = is:popNumber()
	self.slots = is:popList(i3k_sbean.HideWeaponSkill)
	self.curSkin = is:popNumber()
	self.skinLib = is:popNumberSet()
	self.fightPower = is:popNumber()
end

function i3k_sbean.HideWeapon:encode(os)
	os:pushNumber(self.rankValue)
	os:pushNumber(self.level)
	os:pushNumber(self.aSkillLevel)
	os:pushList(self.slots)
	os:pushNumber(self.curSkin)
	os:pushNumberSet(self.skinLib)
	os:pushNumber(self.fightPower)
end


i3k_sbean.HideWeaponOverview = i3k_class("HideWeaponOverview")
function i3k_sbean.HideWeaponOverview:ctor()
	--self.id:		int32	
	--self.rankValue:		int32	
	--self.level:		int32	
	--self.aSkillLevel:		int32	
	--self.slots:		vector[HideWeaponSkill]	
	--self.skin:		DBHWSkinInfo	
	--self.fightPower:		int32	
end

function i3k_sbean.HideWeaponOverview:clone()
	return clone(self)
end

function i3k_sbean.HideWeaponOverview:decode(is)
	self.id = is:popNumber()
	self.rankValue = is:popNumber()
	self.level = is:popNumber()
	self.aSkillLevel = is:popNumber()
	self.slots = is:popList(i3k_sbean.HideWeaponSkill)
	self.skin = is:pop(i3k_sbean.DBHWSkinInfo)
	self.fightPower = is:popNumber()
end

function i3k_sbean.HideWeaponOverview:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.rankValue)
	os:pushNumber(self.level)
	os:pushNumber(self.aSkillLevel)
	os:pushList(self.slots)
	os:push(self.skin)
	os:pushNumber(self.fightPower)
end


i3k_sbean.DBRoleGaintBoss = i3k_class("DBRoleGaintBoss")
function i3k_sbean.DBRoleGaintBoss:ctor()
	--self.dayEnterTimes:		int32	
	--self.lastJoinTime:		int32	
	--self.gaintBossCoin:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBRoleGaintBoss:clone()
	return clone(self)
end

function i3k_sbean.DBRoleGaintBoss:decode(is)
	self.dayEnterTimes = is:popNumber()
	self.lastJoinTime = is:popNumber()
	self.gaintBossCoin = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBRoleGaintBoss:encode(os)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.lastJoinTime)
	os:pushNumber(self.gaintBossCoin)
	os:pushNumber(self.padding)
end


i3k_sbean.RoleGaintBoss = i3k_class("RoleGaintBoss")
function i3k_sbean.RoleGaintBoss:ctor()
	--self.role:		RoleOverview	
	--self.damage:		int32	
end

function i3k_sbean.RoleGaintBoss:clone()
	return clone(self)
end

function i3k_sbean.RoleGaintBoss:decode(is)
	self.role = is:pop(i3k_sbean.RoleOverview)
	self.damage = is:popNumber()
end

function i3k_sbean.RoleGaintBoss:encode(os)
	os:push(self.role)
	os:pushNumber(self.damage)
end


i3k_sbean.DBRoleBiography = i3k_class("DBRoleBiography")
function i3k_sbean.DBRoleBiography:ctor()
	--self.curUnlockID:		int32	
	--self.lastUnlockID:		int32	
	--self.curTaskID:		int32	
	--self.curTaskValue:		int32	
	--self.curTaskReward:		int32	
	--self.rewards:		vector[int32]	
end

function i3k_sbean.DBRoleBiography:clone()
	return clone(self)
end

function i3k_sbean.DBRoleBiography:decode(is)
	self.curUnlockID = is:popNumber()
	self.lastUnlockID = is:popNumber()
	self.curTaskID = is:popNumber()
	self.curTaskValue = is:popNumber()
	self.curTaskReward = is:popNumber()
	self.rewards = is:popNumberList()
end

function i3k_sbean.DBRoleBiography:encode(os)
	os:pushNumber(self.curUnlockID)
	os:pushNumber(self.lastUnlockID)
	os:pushNumber(self.curTaskID)
	os:pushNumber(self.curTaskValue)
	os:pushNumber(self.curTaskReward)
	os:pushNumberList(self.rewards)
end


i3k_sbean.WeaponBless = i3k_class("WeaponBless")
function i3k_sbean.WeaponBless:ctor()
	--self.hasWeaponBless:		int32	
	--self.skillID:		int32	
	--self.skillLvl:		int32	
	--self.gainBlessInterval:		int32	
	--self.activeNeedBless:		int32	
	--self.blessUpPercent:		int32	
	--self.blessReductionNeedCnt:		int32	
	--self.blessReductionInterval:		int32	
	--self.isActive:		int32	
	--self.nowBlessLvl:		int32	
	--self.lastGainBlessLvlTime:		int64	
	--self.blessReductionCnt:		int32	
	--self.lastReductionBlessLvlTime:		int64	
	--self.uskillAddPower:		int32	
	--self.powerFreeRate:		int32	
end

function i3k_sbean.WeaponBless:clone()
	return clone(self)
end

function i3k_sbean.WeaponBless:decode(is)
	self.hasWeaponBless = is:popNumber()
	self.skillID = is:popNumber()
	self.skillLvl = is:popNumber()
	self.gainBlessInterval = is:popNumber()
	self.activeNeedBless = is:popNumber()
	self.blessUpPercent = is:popNumber()
	self.blessReductionNeedCnt = is:popNumber()
	self.blessReductionInterval = is:popNumber()
	self.isActive = is:popNumber()
	self.nowBlessLvl = is:popNumber()
	self.lastGainBlessLvlTime = is:popNumber()
	self.blessReductionCnt = is:popNumber()
	self.lastReductionBlessLvlTime = is:popNumber()
	self.uskillAddPower = is:popNumber()
	self.powerFreeRate = is:popNumber()
end

function i3k_sbean.WeaponBless:encode(os)
	os:pushNumber(self.hasWeaponBless)
	os:pushNumber(self.skillID)
	os:pushNumber(self.skillLvl)
	os:pushNumber(self.gainBlessInterval)
	os:pushNumber(self.activeNeedBless)
	os:pushNumber(self.blessUpPercent)
	os:pushNumber(self.blessReductionNeedCnt)
	os:pushNumber(self.blessReductionInterval)
	os:pushNumber(self.isActive)
	os:pushNumber(self.nowBlessLvl)
	os:pushNumber(self.lastGainBlessLvlTime)
	os:pushNumber(self.blessReductionCnt)
	os:pushNumber(self.lastReductionBlessLvlTime)
	os:pushNumber(self.uskillAddPower)
	os:pushNumber(self.powerFreeRate)
end


i3k_sbean.DBRegularTask = i3k_class("DBRegularTask")
function i3k_sbean.DBRegularTask:ctor()
	--self.id:		int32	
	--self.times:		int32	
	--self.rewards:		int32	
end

function i3k_sbean.DBRegularTask:clone()
	return clone(self)
end

function i3k_sbean.DBRegularTask:decode(is)
	self.id = is:popNumber()
	self.times = is:popNumber()
	self.rewards = is:popNumber()
end

function i3k_sbean.DBRegularTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.times)
	os:pushNumber(self.rewards)
end


i3k_sbean.DBRegularTaskData = i3k_class("DBRegularTaskData")
function i3k_sbean.DBRegularTaskData:ctor()
	--self.id:		int32	
	--self.totalScore:		int32	
	--self.usedScore:		int32	
	--self.tasks:		map[int32, DBRegularTask]	
	--self.reward:		set[int32]	
	--self.exchange:		map[int32, int32]	
	--self.lastWeekMaxPower:		int32	
	--self.curWeekMaxPower:		int32	
	--self.padding:		int32	
end

function i3k_sbean.DBRegularTaskData:clone()
	return clone(self)
end

function i3k_sbean.DBRegularTaskData:decode(is)
	self.id = is:popNumber()
	self.totalScore = is:popNumber()
	self.usedScore = is:popNumber()
	self.tasks = is:popNumberMap(i3k_sbean.DBRegularTask)
	self.reward = is:popNumberSet()
	self.exchange = is:popNumberNumberMap()
	self.lastWeekMaxPower = is:popNumber()
	self.curWeekMaxPower = is:popNumber()
	self.padding = is:popNumber()
end

function i3k_sbean.DBRegularTaskData:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.totalScore)
	os:pushNumber(self.usedScore)
	os:pushNumberMap(self.tasks)
	os:pushNumberSet(self.reward)
	os:pushNumberNumberMap(self.exchange)
	os:pushNumber(self.lastWeekMaxPower)
	os:pushNumber(self.curWeekMaxPower)
	os:pushNumber(self.padding)
end


i3k_sbean.RegularPrayData = i3k_class("RegularPrayData")
function i3k_sbean.RegularPrayData:ctor()
	--self.prayDatas:		vector[DBRegularPrayRoleData]	
	--self.selfPray:		DBRegularPrayRewardData	
end

function i3k_sbean.RegularPrayData:clone()
	return clone(self)
end

function i3k_sbean.RegularPrayData:decode(is)
	self.prayDatas = is:popList(i3k_sbean.DBRegularPrayRoleData)
	self.selfPray = is:pop(i3k_sbean.DBRegularPrayRewardData)
end

function i3k_sbean.RegularPrayData:encode(os)
	os:pushList(self.prayDatas)
	os:push(self.selfPray)
end


i3k_sbean.DBRegularPrayRoleData = i3k_class("DBRegularPrayRoleData")
function i3k_sbean.DBRegularPrayRoleData:ctor()
	--self.roleId:		int32	
	--self.content:		string	
end

function i3k_sbean.DBRegularPrayRoleData:clone()
	return clone(self)
end

function i3k_sbean.DBRegularPrayRoleData:decode(is)
	self.roleId = is:popNumber()
	self.content = is:popString()
end

function i3k_sbean.DBRegularPrayRoleData:encode(os)
	os:pushNumber(self.roleId)
	os:pushString(self.content)
end


i3k_sbean.DBRegularPrayRewardData = i3k_class("DBRegularPrayRewardData")
function i3k_sbean.DBRegularPrayRewardData:ctor()
	--self.rewardCount:		int32	
	--self.firstPrayTime:		int32	
	--self.content:		string	
end

function i3k_sbean.DBRegularPrayRewardData:clone()
	return clone(self)
end

function i3k_sbean.DBRegularPrayRewardData:decode(is)
	self.rewardCount = is:popNumber()
	self.firstPrayTime = is:popNumber()
	self.content = is:popString()
end

function i3k_sbean.DBRegularPrayRewardData:encode(os)
	os:pushNumber(self.rewardCount)
	os:pushNumber(self.firstPrayTime)
	os:pushString(self.content)
end


i3k_sbean.DBPetDomestication = i3k_class("DBPetDomestication")
function i3k_sbean.DBPetDomestication:ctor()
	--self.petEquipSpirit:		int32	
	--self.equipParts:		map[int32, DBPetEquipPart]	
	--self.trainSkills:		map[int32, DBPetTrainSkill]	
end

function i3k_sbean.DBPetDomestication:clone()
	return clone(self)
end

function i3k_sbean.DBPetDomestication:decode(is)
	self.petEquipSpirit = is:popNumber()
	self.equipParts = is:popNumberMap(i3k_sbean.DBPetEquipPart)
	self.trainSkills = is:popNumberMap(i3k_sbean.DBPetTrainSkill)
end

function i3k_sbean.DBPetDomestication:encode(os)
	os:pushNumber(self.petEquipSpirit)
	os:pushNumberMap(self.equipParts)
	os:pushNumberMap(self.trainSkills)
end


i3k_sbean.DBPetEquipPart = i3k_class("DBPetEquipPart")
function i3k_sbean.DBPetEquipPart:ctor()
	--self.petGroupID:		int32	
	--self.upLvls:		map[int32, int32]	
	--self.equip:		map[int32, int32]	
end

function i3k_sbean.DBPetEquipPart:clone()
	return clone(self)
end

function i3k_sbean.DBPetEquipPart:decode(is)
	self.petGroupID = is:popNumber()
	self.upLvls = is:popNumberNumberMap()
	self.equip = is:popNumberNumberMap()
end

function i3k_sbean.DBPetEquipPart:encode(os)
	os:pushNumber(self.petGroupID)
	os:pushNumberNumberMap(self.upLvls)
	os:pushNumberNumberMap(self.equip)
end


i3k_sbean.DBPetTrainSkill = i3k_class("DBPetTrainSkill")
function i3k_sbean.DBPetTrainSkill:ctor()
	--self.petID:		int32	
	--self.skills:		map[int32, int32]	
end

function i3k_sbean.DBPetTrainSkill:clone()
	return clone(self)
end

function i3k_sbean.DBPetTrainSkill:decode(is)
	self.petID = is:popNumber()
	self.skills = is:popNumberNumberMap()
end

function i3k_sbean.DBPetTrainSkill:encode(os)
	os:pushNumber(self.petID)
	os:pushNumberNumberMap(self.skills)
end


i3k_sbean.DBRoleSurvive = i3k_class("DBRoleSurvive")
function i3k_sbean.DBRoleSurvive:ctor()
	--self.curHero:		int32	
	--self.score:		int32	
	--self.champion:		int32	
	--self.punishTime:		int32	
	--self.log:		SurviveArenaLog	
end

function i3k_sbean.DBRoleSurvive:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSurvive:decode(is)
	self.curHero = is:popNumber()
	self.score = is:popNumber()
	self.champion = is:popNumber()
	self.punishTime = is:popNumber()
	self.log = is:pop(i3k_sbean.SurviveArenaLog)
end

function i3k_sbean.DBRoleSurvive:encode(os)
	os:pushNumber(self.curHero)
	os:pushNumber(self.score)
	os:pushNumber(self.champion)
	os:pushNumber(self.punishTime)
	os:push(self.log)
end


i3k_sbean.SurviveArenaLog = i3k_class("SurviveArenaLog")
function i3k_sbean.SurviveArenaLog:ctor()
	--self.dayEnterTimes:		int32	
	--self.enterTimes:		int32	
	--self.winTimes:		int32	
end

function i3k_sbean.SurviveArenaLog:clone()
	return clone(self)
end

function i3k_sbean.SurviveArenaLog:decode(is)
	self.dayEnterTimes = is:popNumber()
	self.enterTimes = is:popNumber()
	self.winTimes = is:popNumber()
end

function i3k_sbean.SurviveArenaLog:encode(os)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.enterTimes)
	os:pushNumber(self.winTimes)
end


i3k_sbean.SurviveScore = i3k_class("SurviveScore")
function i3k_sbean.SurviveScore:ctor()
	--self.name:		string	
	--self.scores:		map[int32, int32]	
	--self.out:		int8	
	--self.heroID:		int32	
end

function i3k_sbean.SurviveScore:clone()
	return clone(self)
end

function i3k_sbean.SurviveScore:decode(is)
	self.name = is:popString()
	self.scores = is:popNumberNumberMap()
	self.out = is:popNumber()
	self.heroID = is:popNumber()
end

function i3k_sbean.SurviveScore:encode(os)
	os:pushString(self.name)
	os:pushNumberNumberMap(self.scores)
	os:pushNumber(self.out)
	os:pushNumber(self.heroID)
end


i3k_sbean.SurviveTeam = i3k_class("SurviveTeam")
function i3k_sbean.SurviveTeam:ctor()
	--self.roles:		map[int32, SurviveScore]	
	--self.rank:		int32	
	--self.out:		int8	
end

function i3k_sbean.SurviveTeam:clone()
	return clone(self)
end

function i3k_sbean.SurviveTeam:decode(is)
	self.roles = is:popNumberMap(i3k_sbean.SurviveScore)
	self.rank = is:popNumber()
	self.out = is:popNumber()
end

function i3k_sbean.SurviveTeam:encode(os)
	os:pushNumberMap(self.roles)
	os:pushNumber(self.rank)
	os:pushNumber(self.out)
end


i3k_sbean.RankSurvive = i3k_class("RankSurvive")
function i3k_sbean.RankSurvive:ctor()
	--self.roleID:		int32	
	--self.roleName:		string	
	--self.rankKey:		int32	
end

function i3k_sbean.RankSurvive:clone()
	return clone(self)
end

function i3k_sbean.RankSurvive:decode(is)
	self.roleID = is:popNumber()
	self.roleName = is:popString()
	self.rankKey = is:popNumber()
end

function i3k_sbean.RankSurvive:encode(os)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
	os:pushNumber(self.rankKey)
end


i3k_sbean.DBRoleWeekTreasureBox = i3k_class("DBRoleWeekTreasureBox")
function i3k_sbean.DBRoleWeekTreasureBox:ctor()
	--self.lastRefreshTime:		int32	
	--self.logs:		map[int32, DBRoleWeekTreasureBoxLog]	
end

function i3k_sbean.DBRoleWeekTreasureBox:clone()
	return clone(self)
end

function i3k_sbean.DBRoleWeekTreasureBox:decode(is)
	self.lastRefreshTime = is:popNumber()
	self.logs = is:popNumberMap(i3k_sbean.DBRoleWeekTreasureBoxLog)
end

function i3k_sbean.DBRoleWeekTreasureBox:encode(os)
	os:pushNumber(self.lastRefreshTime)
	os:pushNumberMap(self.logs)
end


i3k_sbean.DBRoleWeekTreasureBoxLog = i3k_class("DBRoleWeekTreasureBoxLog")
function i3k_sbean.DBRoleWeekTreasureBoxLog:ctor()
	--self.logCnt:		int32	
	--self.isFinish:		int32	
	--self.rewardTime:		int32	
	--self.isTakedReward:		int32	
	--self.leftTakeCnt:		int32	
	--self.dayEnterLog:		vector[int32]	
end

function i3k_sbean.DBRoleWeekTreasureBoxLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleWeekTreasureBoxLog:decode(is)
	self.logCnt = is:popNumber()
	self.isFinish = is:popNumber()
	self.rewardTime = is:popNumber()
	self.isTakedReward = is:popNumber()
	self.leftTakeCnt = is:popNumber()
	self.dayEnterLog = is:popNumberList()
end

function i3k_sbean.DBRoleWeekTreasureBoxLog:encode(os)
	os:pushNumber(self.logCnt)
	os:pushNumber(self.isFinish)
	os:pushNumber(self.rewardTime)
	os:pushNumber(self.isTakedReward)
	os:pushNumber(self.leftTakeCnt)
	os:pushNumberList(self.dayEnterLog)
end


i3k_sbean.DBRoleSworn = i3k_class("DBRoleSworn")
function i3k_sbean.DBRoleSworn:ctor()
	--self.swornId:		int32	
	--self.dayMonsterValue:		int32	
	--self.dayReward:		set[int32]	
	--self.dayPublicMapHelpTimes:		map[int32, int32]	
	--self.dayNpcMapHelpTimes:		map[int32, int32]	
	--self.dayUseMapRewardTimes:		int32	
	--self.achievementReward:		set[int32]	
	--self.swornSuperAurenaTimes:		int32	
	--self.swornMapTime:		int32	
	--self.achievementPoint:		int32	
	--self.achievementPointReward:		set[int32]	
end

function i3k_sbean.DBRoleSworn:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSworn:decode(is)
	self.swornId = is:popNumber()
	self.dayMonsterValue = is:popNumber()
	self.dayReward = is:popNumberSet()
	self.dayPublicMapHelpTimes = is:popNumberNumberMap()
	self.dayNpcMapHelpTimes = is:popNumberNumberMap()
	self.dayUseMapRewardTimes = is:popNumber()
	self.achievementReward = is:popNumberSet()
	self.swornSuperAurenaTimes = is:popNumber()
	self.swornMapTime = is:popNumber()
	self.achievementPoint = is:popNumber()
	self.achievementPointReward = is:popNumberSet()
end

function i3k_sbean.DBRoleSworn:encode(os)
	os:pushNumber(self.swornId)
	os:pushNumber(self.dayMonsterValue)
	os:pushNumberSet(self.dayReward)
	os:pushNumberNumberMap(self.dayPublicMapHelpTimes)
	os:pushNumberNumberMap(self.dayNpcMapHelpTimes)
	os:pushNumber(self.dayUseMapRewardTimes)
	os:pushNumberSet(self.achievementReward)
	os:pushNumber(self.swornSuperAurenaTimes)
	os:pushNumber(self.swornMapTime)
	os:pushNumber(self.achievementPoint)
	os:pushNumberSet(self.achievementPointReward)
end


i3k_sbean.SwornRoleData = i3k_class("SwornRoleData")
function i3k_sbean.SwornRoleData:ctor()
	--self.birthday:		int32	
	--self.dayMapRewardTimes:		int32	
	--self.dayActivity:		int32	
	--self.dayMapHelpTimes:		int32	
	--self.suffixChangeTimes:		int32	
	--self.suffix:		string	
	--self.role:		RoleOverview	
end

function i3k_sbean.SwornRoleData:clone()
	return clone(self)
end

function i3k_sbean.SwornRoleData:decode(is)
	self.birthday = is:popNumber()
	self.dayMapRewardTimes = is:popNumber()
	self.dayActivity = is:popNumber()
	self.dayMapHelpTimes = is:popNumber()
	self.suffixChangeTimes = is:popNumber()
	self.suffix = is:popString()
	self.role = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.SwornRoleData:encode(os)
	os:pushNumber(self.birthday)
	os:pushNumber(self.dayMapRewardTimes)
	os:pushNumber(self.dayActivity)
	os:pushNumber(self.dayMapHelpTimes)
	os:pushNumber(self.suffixChangeTimes)
	os:pushString(self.suffix)
	os:push(self.role)
end


i3k_sbean.SwornMapTimes = i3k_class("SwornMapTimes")
function i3k_sbean.SwornMapTimes:ctor()
	--self.npcMapTimes:		map[int32, int32]	
	--self.publicMapTimes:		map[int32, int32]	
end

function i3k_sbean.SwornMapTimes:clone()
	return clone(self)
end

function i3k_sbean.SwornMapTimes:decode(is)
	self.npcMapTimes = is:popNumberNumberMap()
	self.publicMapTimes = is:popNumberNumberMap()
end

function i3k_sbean.SwornMapTimes:encode(os)
	os:pushNumberNumberMap(self.npcMapTimes)
	os:pushNumberNumberMap(self.publicMapTimes)
end


i3k_sbean.CreateSwornInfo = i3k_class("CreateSwornInfo")
function i3k_sbean.CreateSwornInfo:ctor()
	--self.teamId:		int32	
	--self.teamSize:		int32	
	--self.roles:		map[int32, SwornRoleData]	
end

function i3k_sbean.CreateSwornInfo:clone()
	return clone(self)
end

function i3k_sbean.CreateSwornInfo:decode(is)
	self.teamId = is:popNumber()
	self.teamSize = is:popNumber()
	self.roles = is:popNumberMap(i3k_sbean.SwornRoleData)
end

function i3k_sbean.CreateSwornInfo:encode(os)
	os:pushNumber(self.teamId)
	os:pushNumber(self.teamSize)
	os:pushNumberMap(self.roles)
end


i3k_sbean.SwornTransformData = i3k_class("SwornTransformData")
function i3k_sbean.SwornTransformData:ctor()
	--self.id:		int32	
	--self.swornValue:		int32	
	--self.activity:		int32	
	--self.prefix:		string	
	--self.roles:		map[int32, SwornRoleData]	
end

function i3k_sbean.SwornTransformData:clone()
	return clone(self)
end

function i3k_sbean.SwornTransformData:decode(is)
	self.id = is:popNumber()
	self.swornValue = is:popNumber()
	self.activity = is:popNumber()
	self.prefix = is:popString()
	self.roles = is:popNumberMap(i3k_sbean.SwornRoleData)
end

function i3k_sbean.SwornTransformData:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.swornValue)
	os:pushNumber(self.activity)
	os:pushString(self.prefix)
	os:pushNumberMap(self.roles)
end


i3k_sbean.SwornCard = i3k_class("SwornCard")
function i3k_sbean.SwornCard:ctor()
	--self.sworn:		SwornOverview	
	--self.roles:		map[int32, RoleFeature]	
end

function i3k_sbean.SwornCard:clone()
	return clone(self)
end

function i3k_sbean.SwornCard:decode(is)
	self.sworn = is:pop(i3k_sbean.SwornOverview)
	self.roles = is:popNumberMap(i3k_sbean.RoleFeature)
end

function i3k_sbean.SwornCard:encode(os)
	os:push(self.sworn)
	os:pushNumberMap(self.roles)
end


i3k_sbean.SwornOverview = i3k_class("SwornOverview")
function i3k_sbean.SwornOverview:ctor()
	--self.id:		int32	
	--self.swornValue:		int32	
	--self.prefix:		string	
	--self.roles:		map[int32, SwornRoleData]	
	--self.signNum:		int32	
	--self.giftString:		string	
end

function i3k_sbean.SwornOverview:clone()
	return clone(self)
end

function i3k_sbean.SwornOverview:decode(is)
	self.id = is:popNumber()
	self.swornValue = is:popNumber()
	self.prefix = is:popString()
	self.roles = is:popNumberMap(i3k_sbean.SwornRoleData)
	self.signNum = is:popNumber()
	self.giftString = is:popString()
end

function i3k_sbean.SwornOverview:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.swornValue)
	os:pushString(self.prefix)
	os:pushNumberMap(self.roles)
	os:pushNumber(self.signNum)
	os:pushString(self.giftString)
end


i3k_sbean.DBSkillFormula = i3k_class("DBSkillFormula")
function i3k_sbean.DBSkillFormula:ctor()
	--self.dayExp:		int32	
	--self.exp:		int32	
	--self.level:		int32	
	--self.rank:		int32	
	--self.skills:		map[int32, int32]	
	--self.hiddenSoul:		map[int32, int32]	
end

function i3k_sbean.DBSkillFormula:clone()
	return clone(self)
end

function i3k_sbean.DBSkillFormula:decode(is)
	self.dayExp = is:popNumber()
	self.exp = is:popNumber()
	self.level = is:popNumber()
	self.rank = is:popNumber()
	self.skills = is:popNumberNumberMap()
	self.hiddenSoul = is:popNumberNumberMap()
end

function i3k_sbean.DBSkillFormula:encode(os)
	os:pushNumber(self.dayExp)
	os:pushNumber(self.exp)
	os:pushNumber(self.level)
	os:pushNumber(self.rank)
	os:pushNumberNumberMap(self.skills)
	os:pushNumberNumberMap(self.hiddenSoul)
end


i3k_sbean.DBRoleTransform = i3k_class("DBRoleTransform")
function i3k_sbean.DBRoleTransform:ctor()
	--self.curTransform:		int32	
	--self.transforms:		map[int32, DBTransform]	
end

function i3k_sbean.DBRoleTransform:clone()
	return clone(self)
end

function i3k_sbean.DBRoleTransform:decode(is)
	self.curTransform = is:popNumber()
	self.transforms = is:popNumberMap(i3k_sbean.DBTransform)
end

function i3k_sbean.DBRoleTransform:encode(os)
	os:pushNumber(self.curTransform)
	os:pushNumberMap(self.transforms)
end


i3k_sbean.DBTransform = i3k_class("DBTransform")
function i3k_sbean.DBTransform:ctor()
	--self.padding:		int8	
end

function i3k_sbean.DBTransform:clone()
	return clone(self)
end

function i3k_sbean.DBTransform:decode(is)
	self.padding = is:popNumber()
end

function i3k_sbean.DBTransform:encode(os)
	os:pushNumber(self.padding)
end


i3k_sbean.DBMaze = i3k_class("DBMaze")
function i3k_sbean.DBMaze:ctor()
	--self.dayEnterTimes:		int32	
	--self.lastJoinTime:		int32	
end

function i3k_sbean.DBMaze:clone()
	return clone(self)
end

function i3k_sbean.DBMaze:decode(is)
	self.dayEnterTimes = is:popNumber()
	self.lastJoinTime = is:popNumber()
end

function i3k_sbean.DBMaze:encode(os)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.lastJoinTime)
end


i3k_sbean.DBFestivalTaskGroup = i3k_class("DBFestivalTaskGroup")
function i3k_sbean.DBFestivalTaskGroup:ctor()
	--self.festivalId:		int32	
	--self.dayAccept:		int32	
	--self.lastAcceptIndex:		int32	
	--self.curTask:		DBFestivalTask	
end

function i3k_sbean.DBFestivalTaskGroup:clone()
	return clone(self)
end

function i3k_sbean.DBFestivalTaskGroup:decode(is)
	self.festivalId = is:popNumber()
	self.dayAccept = is:popNumber()
	self.lastAcceptIndex = is:popNumber()
	self.curTask = is:pop(i3k_sbean.DBFestivalTask)
end

function i3k_sbean.DBFestivalTaskGroup:encode(os)
	os:pushNumber(self.festivalId)
	os:pushNumber(self.dayAccept)
	os:pushNumber(self.lastAcceptIndex)
	os:push(self.curTask)
end


i3k_sbean.DBFestivalTask = i3k_class("DBFestivalTask")
function i3k_sbean.DBFestivalTask:ctor()
	--self.groupId:		int32	
	--self.index:		int32	
	--self.value:		int32	
	--self.state:		int32	
end

function i3k_sbean.DBFestivalTask:clone()
	return clone(self)
end

function i3k_sbean.DBFestivalTask:decode(is)
	self.groupId = is:popNumber()
	self.index = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.DBFestivalTask:encode(os)
	os:pushNumber(self.groupId)
	os:pushNumber(self.index)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
end


i3k_sbean.DBRoleSteedEquip = i3k_class("DBRoleSteedEquip")
function i3k_sbean.DBRoleSteedEquip:ctor()
	--self.equip:		DBSteedEquip	
	--self.forge:		DBSteedEquipForge	
	--self.forgeEnergy:		int32	
end

function i3k_sbean.DBRoleSteedEquip:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSteedEquip:decode(is)
	self.equip = is:pop(i3k_sbean.DBSteedEquip)
	self.forge = is:pop(i3k_sbean.DBSteedEquipForge)
	self.forgeEnergy = is:popNumber()
end

function i3k_sbean.DBRoleSteedEquip:encode(os)
	os:push(self.equip)
	os:push(self.forge)
	os:pushNumber(self.forgeEnergy)
end


i3k_sbean.DBSteedEquip = i3k_class("DBSteedEquip")
function i3k_sbean.DBSteedEquip:ctor()
	--self.curClothes:		map[int32, int32]	
	--self.allSuits:		set[int32]	
end

function i3k_sbean.DBSteedEquip:clone()
	return clone(self)
end

function i3k_sbean.DBSteedEquip:decode(is)
	self.curClothes = is:popNumberNumberMap()
	self.allSuits = is:popNumberSet()
end

function i3k_sbean.DBSteedEquip:encode(os)
	os:pushNumberNumberMap(self.curClothes)
	os:pushNumberSet(self.allSuits)
end


i3k_sbean.DBSteedEquipForge = i3k_class("DBSteedEquipForge")
function i3k_sbean.DBSteedEquipForge:ctor()
	--self.lvl:		int32	
	--self.exp:		int64	
end

function i3k_sbean.DBSteedEquipForge:clone()
	return clone(self)
end

function i3k_sbean.DBSteedEquipForge:decode(is)
	self.lvl = is:popNumber()
	self.exp = is:popNumber()
end

function i3k_sbean.DBSteedEquipForge:encode(os)
	os:pushNumber(self.lvl)
	os:pushNumber(self.exp)
end


i3k_sbean.DBRoleMoneyTree = i3k_class("DBRoleMoneyTree")
function i3k_sbean.DBRoleMoneyTree:ctor()
	--self.moneyTreeId:		int32	
	--self.dayCnt:		int32	
	--self.lastGetTime:		int32	
	--self.totalGetCnt:		int32	
	--self.addUpRewards:		set[int32]	
end

function i3k_sbean.DBRoleMoneyTree:clone()
	return clone(self)
end

function i3k_sbean.DBRoleMoneyTree:decode(is)
	self.moneyTreeId = is:popNumber()
	self.dayCnt = is:popNumber()
	self.lastGetTime = is:popNumber()
	self.totalGetCnt = is:popNumber()
	self.addUpRewards = is:popNumberSet()
end

function i3k_sbean.DBRoleMoneyTree:encode(os)
	os:pushNumber(self.moneyTreeId)
	os:pushNumber(self.dayCnt)
	os:pushNumber(self.lastGetTime)
	os:pushNumber(self.totalGetCnt)
	os:pushNumberSet(self.addUpRewards)
end


i3k_sbean.DBHomelandPetPosition = i3k_class("DBHomelandPetPosition")
function i3k_sbean.DBHomelandPetPosition:ctor()
	--self.curPet:		int32	
	--self.daySelfActionTime:		int32	
	--self.lastOtherActionTime:		int32	
	--self.mood:		int32	
end

function i3k_sbean.DBHomelandPetPosition:clone()
	return clone(self)
end

function i3k_sbean.DBHomelandPetPosition:decode(is)
	self.curPet = is:popNumber()
	self.daySelfActionTime = is:popNumber()
	self.lastOtherActionTime = is:popNumber()
	self.mood = is:popNumber()
end

function i3k_sbean.DBHomelandPetPosition:encode(os)
	os:pushNumber(self.curPet)
	os:pushNumber(self.daySelfActionTime)
	os:pushNumber(self.lastOtherActionTime)
	os:pushNumber(self.mood)
end


i3k_sbean.DBSoaring = i3k_class("DBSoaring")
function i3k_sbean.DBSoaring:ctor()
	--self.id:		int32	
	--self.roadMaps:		set[int32]	
	--self.finishMaps:		set[int32]	
	--self.isOpen:		int32	
end

function i3k_sbean.DBSoaring:clone()
	return clone(self)
end

function i3k_sbean.DBSoaring:decode(is)
	self.id = is:popNumber()
	self.roadMaps = is:popNumberSet()
	self.finishMaps = is:popNumberSet()
	self.isOpen = is:popNumber()
end

function i3k_sbean.DBSoaring:encode(os)
	os:pushNumber(self.id)
	os:pushNumberSet(self.roadMaps)
	os:pushNumberSet(self.finishMaps)
	os:pushNumber(self.isOpen)
end


i3k_sbean.DBMainSoaring = i3k_class("DBMainSoaring")
function i3k_sbean.DBMainSoaring:ctor()
	--self.level:		int32	
	--self.exp:		int32	
	--self.dayTaskNum:		int32	
	--self.task:		DBSoaringTask	
end

function i3k_sbean.DBMainSoaring:clone()
	return clone(self)
end

function i3k_sbean.DBMainSoaring:decode(is)
	self.level = is:popNumber()
	self.exp = is:popNumber()
	self.dayTaskNum = is:popNumber()
	self.task = is:pop(i3k_sbean.DBSoaringTask)
end

function i3k_sbean.DBMainSoaring:encode(os)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
	os:pushNumber(self.dayTaskNum)
	os:push(self.task)
end


i3k_sbean.DBSoaringTask = i3k_class("DBSoaringTask")
function i3k_sbean.DBSoaringTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int8	
end

function i3k_sbean.DBSoaringTask:clone()
	return clone(self)
end

function i3k_sbean.DBSoaringTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.DBSoaringTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
end


i3k_sbean.DBRoleSoaringDisplay = i3k_class("DBRoleSoaringDisplay")
function i3k_sbean.DBRoleSoaringDisplay:ctor()
	--self.unlockFootEffect:		set[int32]	
	--self.showInfo:		DBRoleExtraDisplay	
end

function i3k_sbean.DBRoleSoaringDisplay:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSoaringDisplay:decode(is)
	self.unlockFootEffect = is:popNumberSet()
	self.showInfo = is:pop(i3k_sbean.DBRoleExtraDisplay)
end

function i3k_sbean.DBRoleSoaringDisplay:encode(os)
	os:pushNumberSet(self.unlockFootEffect)
	os:push(self.showInfo)
end


i3k_sbean.DBRoleExtraDisplay = i3k_class("DBRoleExtraDisplay")
function i3k_sbean.DBRoleExtraDisplay:ctor()
	--self.footEffect:		int32	
	--self.weaponDisplay:		int32	
end

function i3k_sbean.DBRoleExtraDisplay:clone()
	return clone(self)
end

function i3k_sbean.DBRoleExtraDisplay:decode(is)
	self.footEffect = is:popNumber()
	self.weaponDisplay = is:popNumber()
end

function i3k_sbean.DBRoleExtraDisplay:encode(os)
	os:pushNumber(self.footEffect)
	os:pushNumber(self.weaponDisplay)
end


i3k_sbean.DBPetGuard = i3k_class("DBPetGuard")
function i3k_sbean.DBPetGuard:ctor()
	--self.id:		int32	
	--self.lvl:		int32	
	--self.exp:		int32	
	--self.latents:		vector[int32]	
	--self.skills:		map[int32, int32]	
end

function i3k_sbean.DBPetGuard:clone()
	return clone(self)
end

function i3k_sbean.DBPetGuard:decode(is)
	self.id = is:popNumber()
	self.lvl = is:popNumber()
	self.exp = is:popNumber()
	self.latents = is:popNumberList()
	self.skills = is:popNumberNumberMap()
end

function i3k_sbean.DBPetGuard:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.lvl)
	os:pushNumber(self.exp)
	os:pushNumberList(self.latents)
	os:pushNumberNumberMap(self.skills)
end


i3k_sbean.DBRolePetGuard = i3k_class("DBRolePetGuard")
function i3k_sbean.DBRolePetGuard:ctor()
	--self.curPetGuard:		int32	
	--self.isShow:		int32	
	--self.activePetGuards:		map[int32, DBPetGuard]	
end

function i3k_sbean.DBRolePetGuard:clone()
	return clone(self)
end

function i3k_sbean.DBRolePetGuard:decode(is)
	self.curPetGuard = is:popNumber()
	self.isShow = is:popNumber()
	self.activePetGuards = is:popNumberMap(i3k_sbean.DBPetGuard)
end

function i3k_sbean.DBRolePetGuard:encode(os)
	os:pushNumber(self.curPetGuard)
	os:pushNumber(self.isShow)
	os:pushNumberMap(self.activePetGuards)
end


i3k_sbean.DBAuctionJubileeActivity = i3k_class("DBAuctionJubileeActivity")
function i3k_sbean.DBAuctionJubileeActivity:ctor()
	--self.batch:		int32	
	--self.taskNum:		map[int32, int32]	
	--self.autoAddTaskNum:		map[int32, int32]	
end

function i3k_sbean.DBAuctionJubileeActivity:clone()
	return clone(self)
end

function i3k_sbean.DBAuctionJubileeActivity:decode(is)
	self.batch = is:popNumber()
	self.taskNum = is:popNumberNumberMap()
	self.autoAddTaskNum = is:popNumberNumberMap()
end

function i3k_sbean.DBAuctionJubileeActivity:encode(os)
	os:pushNumber(self.batch)
	os:pushNumberNumberMap(self.taskNum)
	os:pushNumberNumberMap(self.autoAddTaskNum)
end


i3k_sbean.DBRoleJubileeActivity = i3k_class("DBRoleJubileeActivity")
function i3k_sbean.DBRoleJubileeActivity:ctor()
	--self.batch:		int32	
	--self.dayMineralTimes:		int32	
	--self.step1Activity:		int32	
	--self.step1Reward:		int32	
	--self.step2Reward:		set[int32]	
	--self.step2Task:		DBRoleJubileeActivityTask	
end

function i3k_sbean.DBRoleJubileeActivity:clone()
	return clone(self)
end

function i3k_sbean.DBRoleJubileeActivity:decode(is)
	self.batch = is:popNumber()
	self.dayMineralTimes = is:popNumber()
	self.step1Activity = is:popNumber()
	self.step1Reward = is:popNumber()
	self.step2Reward = is:popNumberSet()
	self.step2Task = is:pop(i3k_sbean.DBRoleJubileeActivityTask)
end

function i3k_sbean.DBRoleJubileeActivity:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.dayMineralTimes)
	os:pushNumber(self.step1Activity)
	os:pushNumber(self.step1Reward)
	os:pushNumberSet(self.step2Reward)
	os:push(self.step2Task)
end


i3k_sbean.DBRoleJubileeActivityTask = i3k_class("DBRoleJubileeActivityTask")
function i3k_sbean.DBRoleJubileeActivityTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int8	
end

function i3k_sbean.DBRoleJubileeActivityTask:clone()
	return clone(self)
end

function i3k_sbean.DBRoleJubileeActivityTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.DBRoleJubileeActivityTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
end


i3k_sbean.BackRoleDoubleDropInfo = i3k_class("BackRoleDoubleDropInfo")
function i3k_sbean.BackRoleDoubleDropInfo:ctor()
	--self.effectiveTime:		int32	
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.AFKDay:		int32	
	--self.mapCopy:		set[int32]	
	--self.dropRatio:		int32	
	--self.endTime:		int32	
end

function i3k_sbean.BackRoleDoubleDropInfo:clone()
	return clone(self)
end

function i3k_sbean.BackRoleDoubleDropInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.AFKDay = is:popNumber()
	self.mapCopy = is:popNumberSet()
	self.dropRatio = is:popNumber()
	self.endTime = is:popNumber()
end

function i3k_sbean.BackRoleDoubleDropInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.AFKDay)
	os:pushNumberSet(self.mapCopy)
	os:pushNumber(self.dropRatio)
	os:pushNumber(self.endTime)
end


i3k_sbean.DBBackRoleDoubleDrop = i3k_class("DBBackRoleDoubleDrop")
function i3k_sbean.DBBackRoleDoubleDrop:ctor()
	--self.activityId:		int32	
	--self.isMatch:		int32	
	--self.endTime:		int32	
end

function i3k_sbean.DBBackRoleDoubleDrop:clone()
	return clone(self)
end

function i3k_sbean.DBBackRoleDoubleDrop:decode(is)
	self.activityId = is:popNumber()
	self.isMatch = is:popNumber()
	self.endTime = is:popNumber()
end

function i3k_sbean.DBBackRoleDoubleDrop:encode(os)
	os:pushNumber(self.activityId)
	os:pushNumber(self.isMatch)
	os:pushNumber(self.endTime)
end


i3k_sbean.DBGodStar = i3k_class("DBGodStar")
function i3k_sbean.DBGodStar:ctor()
	--self.curLevel:		int32	
	--self.skills:		map[int32, int32]	
end

function i3k_sbean.DBGodStar:clone()
	return clone(self)
end

function i3k_sbean.DBGodStar:decode(is)
	self.curLevel = is:popNumber()
	self.skills = is:popNumberNumberMap()
end

function i3k_sbean.DBGodStar:encode(os)
	os:pushNumber(self.curLevel)
	os:pushNumberNumberMap(self.skills)
end


i3k_sbean.DBHiddenSea = i3k_class("DBHiddenSea")
function i3k_sbean.DBHiddenSea:ctor()
	--self.dayEnterTimes:		int32	
end

function i3k_sbean.DBHiddenSea:clone()
	return clone(self)
end

function i3k_sbean.DBHiddenSea:decode(is)
	self.dayEnterTimes = is:popNumber()
end

function i3k_sbean.DBHiddenSea:encode(os)
	os:pushNumber(self.dayEnterTimes)
end


i3k_sbean.DBHiddenSeaTeamInfo = i3k_class("DBHiddenSeaTeamInfo")
function i3k_sbean.DBHiddenSeaTeamInfo:ctor()
	--self.grade:		int32	
	--self.killTime:		int32	
	--self.members:		vector[HiddenSeaRankRole]	
end

function i3k_sbean.DBHiddenSeaTeamInfo:clone()
	return clone(self)
end

function i3k_sbean.DBHiddenSeaTeamInfo:decode(is)
	self.grade = is:popNumber()
	self.killTime = is:popNumber()
	self.members = is:popList(i3k_sbean.HiddenSeaRankRole)
end

function i3k_sbean.DBHiddenSeaTeamInfo:encode(os)
	os:pushNumber(self.grade)
	os:pushNumber(self.killTime)
	os:pushList(self.members)
end


i3k_sbean.HiddenSeaRoleAreaScore = i3k_class("HiddenSeaRoleAreaScore")
function i3k_sbean.HiddenSeaRoleAreaScore:ctor()
	--self.roleScore:		map[int32, HiddenSeaAreaScoreInfo]	
end

function i3k_sbean.HiddenSeaRoleAreaScore:clone()
	return clone(self)
end

function i3k_sbean.HiddenSeaRoleAreaScore:decode(is)
	self.roleScore = is:popNumberMap(i3k_sbean.HiddenSeaAreaScoreInfo)
end

function i3k_sbean.HiddenSeaRoleAreaScore:encode(os)
	os:pushNumberMap(self.roleScore)
end


i3k_sbean.HiddenSeaAreaScoreInfo = i3k_class("HiddenSeaAreaScoreInfo")
function i3k_sbean.HiddenSeaAreaScoreInfo:ctor()
	--self.areaScore:		map[int32, int32]	
end

function i3k_sbean.HiddenSeaAreaScoreInfo:clone()
	return clone(self)
end

function i3k_sbean.HiddenSeaAreaScoreInfo:decode(is)
	self.areaScore = is:popNumberNumberMap()
end

function i3k_sbean.HiddenSeaAreaScoreInfo:encode(os)
	os:pushNumberNumberMap(self.areaScore)
end


i3k_sbean.RankHiddenSea = i3k_class("RankHiddenSea")
function i3k_sbean.RankHiddenSea:ctor()
	--self.rank:		int32	
	--self.rankKey:		int32	
end

function i3k_sbean.RankHiddenSea:clone()
	return clone(self)
end

function i3k_sbean.RankHiddenSea:decode(is)
	self.rank = is:popNumber()
	self.rankKey = is:popNumber()
end

function i3k_sbean.RankHiddenSea:encode(os)
	os:pushNumber(self.rank)
	os:pushNumber(self.rankKey)
end


i3k_sbean.HiddenSeaRankRole = i3k_class("HiddenSeaRankRole")
function i3k_sbean.HiddenSeaRankRole:ctor()
	--self.rankRole:		RankRole	
	--self.sectName:		string	
end

function i3k_sbean.HiddenSeaRankRole:clone()
	return clone(self)
end

function i3k_sbean.HiddenSeaRankRole:decode(is)
	self.rankRole = is:pop(i3k_sbean.RankRole)
	self.sectName = is:popString()
end

function i3k_sbean.HiddenSeaRankRole:encode(os)
	os:push(self.rankRole)
	os:pushString(self.sectName)
end


i3k_sbean.DBCardPacket = i3k_class("DBCardPacket")
function i3k_sbean.DBCardPacket:ctor()
	--self.batch:		int32	
	--self.unlockCard:		set[int32]	
	--self.unlockCardBack:		set[int32]	
	--self.curCardBack:		int32	
end

function i3k_sbean.DBCardPacket:clone()
	return clone(self)
end

function i3k_sbean.DBCardPacket:decode(is)
	self.batch = is:popNumber()
	self.unlockCard = is:popNumberSet()
	self.unlockCardBack = is:popNumberSet()
	self.curCardBack = is:popNumber()
end

function i3k_sbean.DBCardPacket:encode(os)
	os:pushNumber(self.batch)
	os:pushNumberSet(self.unlockCard)
	os:pushNumberSet(self.unlockCardBack)
	os:pushNumber(self.curCardBack)
end


i3k_sbean.HomelandGuardGoldenTreeHpInfo = i3k_class("HomelandGuardGoldenTreeHpInfo")
function i3k_sbean.HomelandGuardGoldenTreeHpInfo:ctor()
	--self.curHp:		int32	
	--self.maxHp:		int32	
end

function i3k_sbean.HomelandGuardGoldenTreeHpInfo:clone()
	return clone(self)
end

function i3k_sbean.HomelandGuardGoldenTreeHpInfo:decode(is)
	self.curHp = is:popNumber()
	self.maxHp = is:popNumber()
end

function i3k_sbean.HomelandGuardGoldenTreeHpInfo:encode(os)
	os:pushNumber(self.curHp)
	os:pushNumber(self.maxHp)
end


--[[
		orgIndex:初始选择的关卡	finishedCnt:已完成的关卡数量
		isUnLockLastMap:是否解锁了最后一个关卡 dayEnterTimes:当前关卡每日进入次数，进入下一个关卡后会清0
 ]]
i3k_sbean.DBRoleFiveElement = i3k_class("DBRoleFiveElement")
function i3k_sbean.DBRoleFiveElement:ctor()
	--self.orgIndex:		int8	
	--self.finishedCnt:		int8	
	--self.isUnLockLastMap:		int8	
	--self.dayEnterTimes:		int8	
end

function i3k_sbean.DBRoleFiveElement:clone()
	return clone(self)
end

function i3k_sbean.DBRoleFiveElement:decode(is)
	self.orgIndex = is:popNumber()
	self.finishedCnt = is:popNumber()
	self.isUnLockLastMap = is:popNumber()
	self.dayEnterTimes = is:popNumber()
end

function i3k_sbean.DBRoleFiveElement:encode(os)
	os:pushNumber(self.orgIndex)
	os:pushNumber(self.finishedCnt)
	os:pushNumber(self.isUnLockLastMap)
	os:pushNumber(self.dayEnterTimes)
end


i3k_sbean.DBRoleSpy = i3k_class("DBRoleSpy")
function i3k_sbean.DBRoleSpy:ctor()
	--self.lastRefreshDay:		int32	
	--self.boss:		int32	
	--self.chasingCnt:		int32	
	--self.findingBossCnt:		int32	
	--self.bossFond:		int32	
	--self.finishedMembers:		vector[int32]	
	--self.chasingSuccessCnt:		int32	
	--self.curChasingMember:		int32	
	--self.chasingBoss:		int32	
	--self.surveyMembers:		vector[int32]	
end

function i3k_sbean.DBRoleSpy:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSpy:decode(is)
	self.lastRefreshDay = is:popNumber()
	self.boss = is:popNumber()
	self.chasingCnt = is:popNumber()
	self.findingBossCnt = is:popNumber()
	self.bossFond = is:popNumber()
	self.finishedMembers = is:popNumberList()
	self.chasingSuccessCnt = is:popNumber()
	self.curChasingMember = is:popNumber()
	self.chasingBoss = is:popNumber()
	self.surveyMembers = is:popNumberList()
end

function i3k_sbean.DBRoleSpy:encode(os)
	os:pushNumber(self.lastRefreshDay)
	os:pushNumber(self.boss)
	os:pushNumber(self.chasingCnt)
	os:pushNumber(self.findingBossCnt)
	os:pushNumber(self.bossFond)
	os:pushNumberList(self.finishedMembers)
	os:pushNumber(self.chasingSuccessCnt)
	os:pushNumber(self.curChasingMember)
	os:pushNumber(self.chasingBoss)
	os:pushNumberList(self.surveyMembers)
end


i3k_sbean.DBRoleFriendCircle = i3k_class("DBRoleFriendCircle")
function i3k_sbean.DBRoleFriendCircle:ctor()
	--self.lastRefreshDay:		int32	
	--self.randomNPC:		vector[int32]	
	--self.randomTasks:		vector[int32]	
	--self.refreshLvl:		int32	
	--self.curTaskId:		int32	
	--self.taskStatus:		int32	
	--self.curValue:		int32	
	--self.dayFinishCnt:		int32	
	--self.dayBuyTaskCnt:		int32	
	--self.dayTakeReward:		int32	
	--self.dayFinishTasks:		vector[int32]	
	--self.dayCancelTasks:		vector[int32]	
	--self.friendshipLvl:		int32	
	--self.friendshipExp:		int32	
	--self.friendshipRewards:		vector[int32]	
end

function i3k_sbean.DBRoleFriendCircle:clone()
	return clone(self)
end

function i3k_sbean.DBRoleFriendCircle:decode(is)
	self.lastRefreshDay = is:popNumber()
	self.randomNPC = is:popNumberList()
	self.randomTasks = is:popNumberList()
	self.refreshLvl = is:popNumber()
	self.curTaskId = is:popNumber()
	self.taskStatus = is:popNumber()
	self.curValue = is:popNumber()
	self.dayFinishCnt = is:popNumber()
	self.dayBuyTaskCnt = is:popNumber()
	self.dayTakeReward = is:popNumber()
	self.dayFinishTasks = is:popNumberList()
	self.dayCancelTasks = is:popNumberList()
	self.friendshipLvl = is:popNumber()
	self.friendshipExp = is:popNumber()
	self.friendshipRewards = is:popNumberList()
end

function i3k_sbean.DBRoleFriendCircle:encode(os)
	os:pushNumber(self.lastRefreshDay)
	os:pushNumberList(self.randomNPC)
	os:pushNumberList(self.randomTasks)
	os:pushNumber(self.refreshLvl)
	os:pushNumber(self.curTaskId)
	os:pushNumber(self.taskStatus)
	os:pushNumber(self.curValue)
	os:pushNumber(self.dayFinishCnt)
	os:pushNumber(self.dayBuyTaskCnt)
	os:pushNumber(self.dayTakeReward)
	os:pushNumberList(self.dayFinishTasks)
	os:pushNumberList(self.dayCancelTasks)
	os:pushNumber(self.friendshipLvl)
	os:pushNumber(self.friendshipExp)
	os:pushNumberList(self.friendshipRewards)
end


i3k_sbean.DBCastIngot = i3k_class("DBCastIngot")
function i3k_sbean.DBCastIngot:ctor()
	--self.level:		int32	
	--self.exp:		int32	
end

function i3k_sbean.DBCastIngot:clone()
	return clone(self)
end

function i3k_sbean.DBCastIngot:decode(is)
	self.level = is:popNumber()
	self.exp = is:popNumber()
end

function i3k_sbean.DBCastIngot:encode(os)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
end


i3k_sbean.DBArrayStone = i3k_class("DBArrayStone")
function i3k_sbean.DBArrayStone:ctor()
	--self.holeCnt:		int32	
	--self.exp:		int32	
	--self.energy:		int32	
	--self.conversion:		bool	
	--self.freeTimes:		int32	
	--self.locks:		set[int32]	
	--self.equips:		vector[int32]	
	--self.bag:		map[int32, int32]	
end

function i3k_sbean.DBArrayStone:clone()
	return clone(self)
end

function i3k_sbean.DBArrayStone:decode(is)
	self.holeCnt = is:popNumber()
	self.exp = is:popNumber()
	self.energy = is:popNumber()
	self.conversion = is:popBool()
	self.freeTimes = is:popNumber()
	self.locks = is:popNumberSet()
	self.equips = is:popNumberList()
	self.bag = is:popNumberNumberMap()
end

function i3k_sbean.DBArrayStone:encode(os)
	os:pushNumber(self.holeCnt)
	os:pushNumber(self.exp)
	os:pushNumber(self.energy)
	os:pushBool(self.conversion)
	os:pushNumber(self.freeTimes)
	os:pushNumberSet(self.locks)
	os:pushNumberList(self.equips)
	os:pushNumberNumberMap(self.bag)
end


i3k_sbean.ArrayStoneEquipData = i3k_class("ArrayStoneEquipData")
function i3k_sbean.ArrayStoneEquipData:ctor()
	--self.equips:		vector[int32]	
	--self.exp:		int32	
end

function i3k_sbean.ArrayStoneEquipData:clone()
	return clone(self)
end

function i3k_sbean.ArrayStoneEquipData:decode(is)
	self.equips = is:popNumberList()
	self.exp = is:popNumber()
end

function i3k_sbean.ArrayStoneEquipData:encode(os)
	os:pushNumberList(self.equips)
	os:pushNumber(self.exp)
end


i3k_sbean.DBGlobalWorldCard = i3k_class("DBGlobalWorldCard")
function i3k_sbean.DBGlobalWorldCard:ctor()
	--self.bag:		map[int32, int32]	
	--self.inUse:		map[int32, int32]	
end

function i3k_sbean.DBGlobalWorldCard:clone()
	return clone(self)
end

function i3k_sbean.DBGlobalWorldCard:decode(is)
	self.bag = is:popNumberNumberMap()
	self.inUse = is:popNumberNumberMap()
end

function i3k_sbean.DBGlobalWorldCard:encode(os)
	os:pushNumberNumberMap(self.bag)
	os:pushNumberNumberMap(self.inUse)
end


-- 1.击败怪物获得 2.击败玩家获得 3.被玩家击败后掉落 4.过期被系统回收 5.玩家X击败怪物获得 6.玩家X击败玩家Y获得
i3k_sbean.DBGlobalWorldCardLog = i3k_class("DBGlobalWorldCardLog")
function i3k_sbean.DBGlobalWorldCardLog:ctor()
	--self.event:		int8	
	--self.cards:		vector[int32]	
	--self.timestamp:		int32	
	--self.arg1:		int32	
	--self.arg2:		int32	
	--self.strArg1:		string	
	--self.strArg2:		string	
end

function i3k_sbean.DBGlobalWorldCardLog:clone()
	return clone(self)
end

function i3k_sbean.DBGlobalWorldCardLog:decode(is)
	self.event = is:popNumber()
	self.cards = is:popNumberList()
	self.timestamp = is:popNumber()
	self.arg1 = is:popNumber()
	self.arg2 = is:popNumber()
	self.strArg1 = is:popString()
	self.strArg2 = is:popString()
end

function i3k_sbean.DBGlobalWorldCardLog:encode(os)
	os:pushNumber(self.event)
	os:pushNumberList(self.cards)
	os:pushNumber(self.timestamp)
	os:pushNumber(self.arg1)
	os:pushNumber(self.arg2)
	os:pushString(self.strArg1)
	os:pushString(self.strArg2)
end


i3k_sbean.GlobalWorldInfo = i3k_class("GlobalWorldInfo")
function i3k_sbean.GlobalWorldInfo:ctor()
	--self.line:		int32	
	--self.roleCnt:		int32	
end

function i3k_sbean.GlobalWorldInfo:clone()
	return clone(self)
end

function i3k_sbean.GlobalWorldInfo:decode(is)
	self.line = is:popNumber()
	self.roleCnt = is:popNumber()
end

function i3k_sbean.GlobalWorldInfo:encode(os)
	os:pushNumber(self.line)
	os:pushNumber(self.roleCnt)
end


i3k_sbean.GlobalWorldLines = i3k_class("GlobalWorldLines")
function i3k_sbean.GlobalWorldLines:ctor()
	--self.lines:		vector[GlobalWorldInfo]	
end

function i3k_sbean.GlobalWorldLines:clone()
	return clone(self)
end

function i3k_sbean.GlobalWorldLines:decode(is)
	self.lines = is:popList(i3k_sbean.GlobalWorldInfo)
end

function i3k_sbean.GlobalWorldLines:encode(os)
	os:pushList(self.lines)
end


i3k_sbean.GlobalWorldTask = i3k_class("GlobalWorldTask")
function i3k_sbean.GlobalWorldTask:ctor()
	--self.id:		int32	
	--self.taskStatus:		int32	
	--self.curValue:		int32	
	--self.isReward:		int32	
end

function i3k_sbean.GlobalWorldTask:clone()
	return clone(self)
end

function i3k_sbean.GlobalWorldTask:decode(is)
	self.id = is:popNumber()
	self.taskStatus = is:popNumber()
	self.curValue = is:popNumber()
	self.isReward = is:popNumber()
end

function i3k_sbean.GlobalWorldTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.taskStatus)
	os:pushNumber(self.curValue)
	os:pushNumber(self.isReward)
end


i3k_sbean.NewLuckyRollerGift = i3k_class("NewLuckyRollerGift")
function i3k_sbean.NewLuckyRollerGift:ctor()
	--self.id:		int32	
	--self.gift:		DummyGoods	
	--self.probability:		float	
	--self.valuable:		int32	
end

function i3k_sbean.NewLuckyRollerGift:clone()
	return clone(self)
end

function i3k_sbean.NewLuckyRollerGift:decode(is)
	self.id = is:popNumber()
	self.gift = is:pop(i3k_sbean.DummyGoods)
	self.probability = is:popNumber()
	self.valuable = is:popNumber()
end

function i3k_sbean.NewLuckyRollerGift:encode(os)
	os:pushNumber(self.id)
	os:push(self.gift)
	os:pushNumber(self.probability)
	os:pushNumber(self.valuable)
end


i3k_sbean.NewLuckyRollerCfg = i3k_class("NewLuckyRollerCfg")
function i3k_sbean.NewLuckyRollerCfg:ctor()
	--self.open:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.phase:		RoleLifeDaySpan	
	--self.costId:		int32	
	--self.singlePrice:		int32	
	--self.mutiTimes:		int32	
	--self.mutiPrice:		int32	
	--self.gifts:		vector[NewLuckyRollerGift]	
	--self.giftex:		DummyGoods	
	--self.maxPlayTimes:		int32	
	--self.levelReq:		int32	
end

function i3k_sbean.NewLuckyRollerCfg:clone()
	return clone(self)
end

function i3k_sbean.NewLuckyRollerCfg:decode(is)
	self.open = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.phase = is:pop(i3k_sbean.RoleLifeDaySpan)
	self.costId = is:popNumber()
	self.singlePrice = is:popNumber()
	self.mutiTimes = is:popNumber()
	self.mutiPrice = is:popNumber()
	self.gifts = is:popList(i3k_sbean.NewLuckyRollerGift)
	self.giftex = is:pop(i3k_sbean.DummyGoods)
	self.maxPlayTimes = is:popNumber()
	self.levelReq = is:popNumber()
end

function i3k_sbean.NewLuckyRollerCfg:encode(os)
	os:pushNumber(self.open)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:push(self.phase)
	os:pushNumber(self.costId)
	os:pushNumber(self.singlePrice)
	os:pushNumber(self.mutiTimes)
	os:pushNumber(self.mutiPrice)
	os:pushList(self.gifts)
	os:push(self.giftex)
	os:pushNumber(self.maxPlayTimes)
	os:pushNumber(self.levelReq)
end


i3k_sbean.NewLuckyRollerRecord = i3k_class("NewLuckyRollerRecord")
function i3k_sbean.NewLuckyRollerRecord:ctor()
	--self.time:		int32	
	--self.id:		int32	
	--self.num:		int32	
end

function i3k_sbean.NewLuckyRollerRecord:clone()
	return clone(self)
end

function i3k_sbean.NewLuckyRollerRecord:decode(is)
	self.time = is:popNumber()
	self.id = is:popNumber()
	self.num = is:popNumber()
end

function i3k_sbean.NewLuckyRollerRecord:encode(os)
	os:pushNumber(self.time)
	os:pushNumber(self.id)
	os:pushNumber(self.num)
end


i3k_sbean.RoleNewLuckyRollerCfg = i3k_class("RoleNewLuckyRollerCfg")
function i3k_sbean.RoleNewLuckyRollerCfg:ctor()
	--self.id:		int32	
	--self.time:		TimeSpan	
	--self.title:		string	
	--self.content:		string	
	--self.cost:		int32	
	--self.singleCost:		int32	
	--self.mutiTimes:		int32	
	--self.mutiCost:		int32	
	--self.gifts:		vector[NewLuckyRollerGift]	
	--self.giftex:		DummyGoods	
	--self.maxPlayTimes:		int32	
	--self.levelReq:		int32	
end

function i3k_sbean.RoleNewLuckyRollerCfg:clone()
	return clone(self)
end

function i3k_sbean.RoleNewLuckyRollerCfg:decode(is)
	self.id = is:popNumber()
	self.time = is:pop(i3k_sbean.TimeSpan)
	self.title = is:popString()
	self.content = is:popString()
	self.cost = is:popNumber()
	self.singleCost = is:popNumber()
	self.mutiTimes = is:popNumber()
	self.mutiCost = is:popNumber()
	self.gifts = is:popList(i3k_sbean.NewLuckyRollerGift)
	self.giftex = is:pop(i3k_sbean.DummyGoods)
	self.maxPlayTimes = is:popNumber()
	self.levelReq = is:popNumber()
end

function i3k_sbean.RoleNewLuckyRollerCfg:encode(os)
	os:pushNumber(self.id)
	os:push(self.time)
	os:pushString(self.title)
	os:pushString(self.content)
	os:pushNumber(self.cost)
	os:pushNumber(self.singleCost)
	os:pushNumber(self.mutiTimes)
	os:pushNumber(self.mutiCost)
	os:pushList(self.gifts)
	os:push(self.giftex)
	os:pushNumber(self.maxPlayTimes)
	os:pushNumber(self.levelReq)
end


i3k_sbean.NewLuckyRollInfo = i3k_class("NewLuckyRollInfo")
function i3k_sbean.NewLuckyRollInfo:ctor()
	--self.effectiveTime:		int32	
	--self.cfg:		RoleNewLuckyRollerCfg	
	--self.logs:		vector[NewLuckyRollerRecord]	
	--self.playTimes:		int32	
end

function i3k_sbean.NewLuckyRollInfo:clone()
	return clone(self)
end

function i3k_sbean.NewLuckyRollInfo:decode(is)
	self.effectiveTime = is:popNumber()
	self.cfg = is:pop(i3k_sbean.RoleNewLuckyRollerCfg)
	self.logs = is:popList(i3k_sbean.NewLuckyRollerRecord)
	self.playTimes = is:popNumber()
end

function i3k_sbean.NewLuckyRollInfo:encode(os)
	os:pushNumber(self.effectiveTime)
	os:push(self.cfg)
	os:pushList(self.logs)
	os:pushNumber(self.playTimes)
end


i3k_sbean.DBRoleNewLuckyRollerLog = i3k_class("DBRoleNewLuckyRollerLog")
function i3k_sbean.DBRoleNewLuckyRollerLog:ctor()
	--self.id:		int32	
	--self.playTimes:		int32	
end

function i3k_sbean.DBRoleNewLuckyRollerLog:clone()
	return clone(self)
end

function i3k_sbean.DBRoleNewLuckyRollerLog:decode(is)
	self.id = is:popNumber()
	self.playTimes = is:popNumber()
end

function i3k_sbean.DBRoleNewLuckyRollerLog:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.playTimes)
end


i3k_sbean.DBRoleGhostIsland = i3k_class("DBRoleGhostIsland")
function i3k_sbean.DBRoleGhostIsland:ctor()
	--self.daySummonedTimes:		int32	
	--self.daySwapTimes:		int32	
	--self.artificeTimes:		int32	
	--self.spirits:		map[int32, int32]	
	--self.skillFlag:		int32	
	--self.swapLastTime:		int32	
	--self.daySwapSystemTimes:		int32	
	--self.targetId:		int32	
	--self.costId:		int32	
end

function i3k_sbean.DBRoleGhostIsland:clone()
	return clone(self)
end

function i3k_sbean.DBRoleGhostIsland:decode(is)
	self.daySummonedTimes = is:popNumber()
	self.daySwapTimes = is:popNumber()
	self.artificeTimes = is:popNumber()
	self.spirits = is:popNumberNumberMap()
	self.skillFlag = is:popNumber()
	self.swapLastTime = is:popNumber()
	self.daySwapSystemTimes = is:popNumber()
	self.targetId = is:popNumber()
	self.costId = is:popNumber()
end

function i3k_sbean.DBRoleGhostIsland:encode(os)
	os:pushNumber(self.daySummonedTimes)
	os:pushNumber(self.daySwapTimes)
	os:pushNumber(self.artificeTimes)
	os:pushNumberNumberMap(self.spirits)
	os:pushNumber(self.skillFlag)
	os:pushNumber(self.swapLastTime)
	os:pushNumber(self.daySwapSystemTimes)
	os:pushNumber(self.targetId)
	os:pushNumber(self.costId)
end


i3k_sbean.DBRoleSpyWorld = i3k_class("DBRoleSpyWorld")
function i3k_sbean.DBRoleSpyWorld:ctor()
	--self.index:		int32	
	--self.dayScore:		int32	
	--self.finishCount:		int32	
	--self.dayEnterTimes:		int32	
	--self.dayRewards:		vector[int32]	
	--self.activityRewards:		vector[int32]	
end

function i3k_sbean.DBRoleSpyWorld:clone()
	return clone(self)
end

function i3k_sbean.DBRoleSpyWorld:decode(is)
	self.index = is:popNumber()
	self.dayScore = is:popNumber()
	self.finishCount = is:popNumber()
	self.dayEnterTimes = is:popNumber()
	self.dayRewards = is:popNumberList()
	self.activityRewards = is:popNumberList()
end

function i3k_sbean.DBRoleSpyWorld:encode(os)
	os:pushNumber(self.index)
	os:pushNumber(self.dayScore)
	os:pushNumber(self.finishCount)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumberList(self.dayRewards)
	os:pushNumberList(self.activityRewards)
end


i3k_sbean.DBBiographyClass = i3k_class("DBBiographyClass")
function i3k_sbean.DBBiographyClass:ctor()
	--self.log:		DBBiographyClassChangeLog	
	--self.data:		map[int32, DBBiographyClassData]	
end

function i3k_sbean.DBBiographyClass:clone()
	return clone(self)
end

function i3k_sbean.DBBiographyClass:decode(is)
	self.log = is:pop(i3k_sbean.DBBiographyClassChangeLog)
	self.data = is:popNumberMap(i3k_sbean.DBBiographyClassData)
end

function i3k_sbean.DBBiographyClass:encode(os)
	os:push(self.log)
	os:pushNumberMap(self.data)
end


i3k_sbean.DBBiographyClassData = i3k_class("DBBiographyClassData")
function i3k_sbean.DBBiographyClassData:ctor()
	--self.boxReward:		int32	
	--self.startTime:		int32	
	--self.taskId:		int32	
	--self.taskVal:		int32	
	--self.taskState:		int32	
	--self.enterNum:		int32	
	--self.equipSkills:		vector[int32]	
	--self.equipSpirits:		set[int32]	
	--self.combat:		DBRoleCombatTypeInfo	
end

function i3k_sbean.DBBiographyClassData:clone()
	return clone(self)
end

function i3k_sbean.DBBiographyClassData:decode(is)
	self.boxReward = is:popNumber()
	self.startTime = is:popNumber()
	self.taskId = is:popNumber()
	self.taskVal = is:popNumber()
	self.taskState = is:popNumber()
	self.enterNum = is:popNumber()
	self.equipSkills = is:popNumberList()
	self.equipSpirits = is:popNumberSet()
	self.combat = is:pop(i3k_sbean.DBRoleCombatTypeInfo)
end

function i3k_sbean.DBBiographyClassData:encode(os)
	os:pushNumber(self.boxReward)
	os:pushNumber(self.startTime)
	os:pushNumber(self.taskId)
	os:pushNumber(self.taskVal)
	os:pushNumber(self.taskState)
	os:pushNumber(self.enterNum)
	os:pushNumberList(self.equipSkills)
	os:pushNumberSet(self.equipSpirits)
	os:push(self.combat)
end


i3k_sbean.DBBiographyClassChangeLog = i3k_class("DBBiographyClassChangeLog")
function i3k_sbean.DBBiographyClassChangeLog:ctor()
	--self.classType:		int8	
	--self.bwType:		int8	
end

function i3k_sbean.DBBiographyClassChangeLog:clone()
	return clone(self)
end

function i3k_sbean.DBBiographyClassChangeLog:decode(is)
	self.classType = is:popNumber()
	self.bwType = is:popNumber()
end

function i3k_sbean.DBBiographyClassChangeLog:encode(os)
	os:pushNumber(self.classType)
	os:pushNumber(self.bwType)
end


i3k_sbean.DBFirstAccess = i3k_class("DBFirstAccess")
function i3k_sbean.DBFirstAccess:ctor()
	--self.record:		map[int32, DBFirstAccessRecord]	
end

function i3k_sbean.DBFirstAccess:clone()
	return clone(self)
end

function i3k_sbean.DBFirstAccess:decode(is)
	self.record = is:popNumberMap(i3k_sbean.DBFirstAccessRecord)
end

function i3k_sbean.DBFirstAccess:encode(os)
	os:pushNumberMap(self.record)
end


i3k_sbean.DBFirstAccessRecord = i3k_class("DBFirstAccessRecord")
function i3k_sbean.DBFirstAccessRecord:ctor()
	--self.enter:		bool	
	--self.reward:		bool	
end

function i3k_sbean.DBFirstAccessRecord:clone()
	return clone(self)
end

function i3k_sbean.DBFirstAccessRecord:decode(is)
	self.enter = is:popBool()
	self.reward = is:popBool()
end

function i3k_sbean.DBFirstAccessRecord:encode(os)
	os:pushBool(self.enter)
	os:pushBool(self.reward)
end


i3k_sbean.DBNewTimeLimitTask = i3k_class("DBNewTimeLimitTask")
function i3k_sbean.DBNewTimeLimitTask:ctor()
	--self.id:		int32	
	--self.value:		int32	
	--self.state:		int32	
end

function i3k_sbean.DBNewTimeLimitTask:clone()
	return clone(self)
end

function i3k_sbean.DBNewTimeLimitTask:decode(is)
	self.id = is:popNumber()
	self.value = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.DBNewTimeLimitTask:encode(os)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
	os:pushNumber(self.state)
end


i3k_sbean.DBRoleFestivalActivity = i3k_class("DBRoleFestivalActivity")
function i3k_sbean.DBRoleFestivalActivity:ctor()
	--self.batch:		int32	
	--self.score:		int32	
	--self.roleReward:		set[int32]	
	--self.worldReward:		set[int32]	
end

function i3k_sbean.DBRoleFestivalActivity:clone()
	return clone(self)
end

function i3k_sbean.DBRoleFestivalActivity:decode(is)
	self.batch = is:popNumber()
	self.score = is:popNumber()
	self.roleReward = is:popNumberSet()
	self.worldReward = is:popNumberSet()
end

function i3k_sbean.DBRoleFestivalActivity:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.score)
	os:pushNumberSet(self.roleReward)
	os:pushNumberSet(self.worldReward)
end


i3k_sbean.DBWorldFestivalActivity = i3k_class("DBWorldFestivalActivity")
function i3k_sbean.DBWorldFestivalActivity:ctor()
	--self.batch:		int32	
	--self.score:		int32	
	--self.autoScore:		int32	
end

function i3k_sbean.DBWorldFestivalActivity:clone()
	return clone(self)
end

function i3k_sbean.DBWorldFestivalActivity:decode(is)
	self.batch = is:popNumber()
	self.score = is:popNumber()
	self.autoScore = is:popNumber()
end

function i3k_sbean.DBWorldFestivalActivity:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.score)
	os:pushNumber(self.autoScore)
end


i3k_sbean.DBWorldSpringLantern = i3k_class("DBWorldSpringLantern")
function i3k_sbean.DBWorldSpringLantern:ctor()
	--self.batch:		int32	
	--self.dayNpcGroup:		int32	
	--self.lastRefreshDay:		int32	
end

function i3k_sbean.DBWorldSpringLantern:clone()
	return clone(self)
end

function i3k_sbean.DBWorldSpringLantern:decode(is)
	self.batch = is:popNumber()
	self.dayNpcGroup = is:popNumber()
	self.lastRefreshDay = is:popNumber()
end

function i3k_sbean.DBWorldSpringLantern:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.dayNpcGroup)
	os:pushNumber(self.lastRefreshDay)
end


i3k_sbean.DBSpringLantern = i3k_class("DBSpringLantern")
function i3k_sbean.DBSpringLantern:ctor()
	--self.batch:		int32	
	--self.dayFinishTime:		int32	
	--self.lantern:		int32	
	--self.dayNeedIndex:		set[int32]	
	--self.dayNpcFinishTime:		map[int32, int32]	
end

function i3k_sbean.DBSpringLantern:clone()
	return clone(self)
end

function i3k_sbean.DBSpringLantern:decode(is)
	self.batch = is:popNumber()
	self.dayFinishTime = is:popNumber()
	self.lantern = is:popNumber()
	self.dayNeedIndex = is:popNumberSet()
	self.dayNpcFinishTime = is:popNumberNumberMap()
end

function i3k_sbean.DBSpringLantern:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.dayFinishTime)
	os:pushNumber(self.lantern)
	os:pushNumberSet(self.dayNeedIndex)
	os:pushNumberNumberMap(self.dayNpcFinishTime)
end


i3k_sbean.DBSouvenirCoin = i3k_class("DBSouvenirCoin")
function i3k_sbean.DBSouvenirCoin:ctor()
	--self.batch:		int32	
	--self.buyNum:		int32	
	--self.exchangeItemNums:		map[int32, int32]	
	--self.takeHoldReward:		set[int32]	
	--self.canTakeHoldReward:		set[int32]	
end

function i3k_sbean.DBSouvenirCoin:clone()
	return clone(self)
end

function i3k_sbean.DBSouvenirCoin:decode(is)
	self.batch = is:popNumber()
	self.buyNum = is:popNumber()
	self.exchangeItemNums = is:popNumberNumberMap()
	self.takeHoldReward = is:popNumberSet()
	self.canTakeHoldReward = is:popNumberSet()
end

function i3k_sbean.DBSouvenirCoin:encode(os)
	os:pushNumber(self.batch)
	os:pushNumber(self.buyNum)
	os:pushNumberNumberMap(self.exchangeItemNums)
	os:pushNumberSet(self.takeHoldReward)
	os:pushNumberSet(self.canTakeHoldReward)
end


-- echo client stamp + 1
i3k_sbean.server_echo = i3k_class("server_echo")
function i3k_sbean.server_echo:ctor()
	self._pname_ = "server_echo"
	--self.stamp:		int32	
end

function i3k_sbean.server_echo:clone()
	return clone(self)
end

function i3k_sbean.server_echo:decode(is)
	is:popString()
	self.stamp = is:popNumber()
end

function i3k_sbean.server_echo:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.stamp)
end


-- sync server info
i3k_sbean.server_info = i3k_class("server_info")
function i3k_sbean.server_info:ctor()
	self._pname_ = "server_info"
	--self.now:		int32	
	--self.id:		int32	
	--self.openDay:		int32	
	--self.openTime:		int32	
end

function i3k_sbean.server_info:clone()
	return clone(self)
end

function i3k_sbean.server_info:decode(is)
	is:popString()
	self.now = is:popNumber()
	self.id = is:popNumber()
	self.openDay = is:popNumber()
	self.openTime = is:popNumber()
end

function i3k_sbean.server_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.now)
	os:pushNumber(self.id)
	os:pushNumber(self.openDay)
	os:pushNumber(self.openTime)
end


-- 强制用户退出
i3k_sbean.user_force_close = i3k_class("user_force_close")
function i3k_sbean.user_force_close:ctor()
	self._pname_ = "user_force_close"
	--self.errCode:		int32	
end

function i3k_sbean.user_force_close:clone()
	return clone(self)
end

function i3k_sbean.user_force_close:decode(is)
	is:popString()
	self.errCode = is:popNumber()
end

function i3k_sbean.user_force_close:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.errCode)
end


-- 用户登录后返回角色列表
i3k_sbean.user_role_list = i3k_class("user_role_list")
function i3k_sbean.user_role_list:ctor()
	self._pname_ = "user_role_list"
	--self.roles:		vector[RoleBrief]	
end

function i3k_sbean.user_role_list:clone()
	return clone(self)
end

function i3k_sbean.user_role_list:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleBrief)
end

function i3k_sbean.user_role_list:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 客户端登录响应
i3k_sbean.user_login_res = i3k_class("user_login_res")
function i3k_sbean.user_login_res:ctor()
	self._pname_ = "user_login_res"
	--self.errCode:		int32	
	--self.arg:		int32	
	--self.reason:		string	
end

function i3k_sbean.user_login_res:clone()
	return clone(self)
end

function i3k_sbean.user_login_res:decode(is)
	is:popString()
	self.errCode = is:popNumber()
	self.arg = is:popNumber()
	self.reason = is:popString()
end

function i3k_sbean.user_login_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.errCode)
	os:pushNumber(self.arg)
	os:pushString(self.reason)
end


-- 客户端通知服务器要退出到选人界面
i3k_sbean.role_logout_res = i3k_class("role_logout_res")
function i3k_sbean.role_logout_res:ctor()
	self._pname_ = "role_logout_res"
	--self.ok:		int32	
end

function i3k_sbean.role_logout_res:clone()
	return clone(self)
end

function i3k_sbean.role_logout_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_logout_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 客户端查询排队位置
i3k_sbean.role_loginqueue_pos = i3k_class("role_loginqueue_pos")
function i3k_sbean.role_loginqueue_pos:ctor()
	self._pname_ = "role_loginqueue_pos"
	--self.pos:		int32	
end

function i3k_sbean.role_loginqueue_pos:clone()
	return clone(self)
end

function i3k_sbean.role_loginqueue_pos:decode(is)
	is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.role_loginqueue_pos:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
end


-- sync role refresh day
i3k_sbean.game_sync = i3k_class("game_sync")
function i3k_sbean.game_sync:ctor()
	self._pname_ = "game_sync"
	--self.refreshDay:		int32	
end

function i3k_sbean.game_sync:clone()
	return clone(self)
end

function i3k_sbean.game_sync:decode(is)
	is:popString()
	self.refreshDay = is:popNumber()
end

function i3k_sbean.game_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.refreshDay)
end


-- sync client assert ignore list
i3k_sbean.assert_ignore_list = i3k_class("assert_ignore_list")
function i3k_sbean.assert_ignore_list:ctor()
	self._pname_ = "assert_ignore_list"
	--self.keywords:		set[string]	
end

function i3k_sbean.assert_ignore_list:clone()
	return clone(self)
end

function i3k_sbean.assert_ignore_list:decode(is)
	is:popString()
	self.keywords = is:popStringSet()
end

function i3k_sbean.assert_ignore_list:encode(os)
	os:pushString(self._pname_)
	os:pushStringSet(self.keywords)
end


-- 同步角色基本信息
i3k_sbean.role_base = i3k_class("role_base")
function i3k_sbean.role_base:ctor()
	self._pname_ = "role_base"
	--self.id:		int32	
	--self.name:		string	
	--self.createTime:		int32	
	--self.headIcon:		int16	
	--self.headBorder:		int16	
	--self.gender:		int8	
	--self.face:		int8	
	--self.hair:		int8	
	--self.classType:		int8	
	--self.transformLevel:		int8	
	--self.bwType:		int8	
	--self.vipLvl:		int32	
	--self.level:		int32	
	--self.exp:		int64	
	--self.expVolume:		int64	
	--self.lastLevelUpTime:		int32	
	--self.lastReviveTime:		int32	
	--self.vit:		int32	
	--self.vitRevertTime:		int32	
	--self.lastUseHpTime:		int32	
	--self.hpPool:		int32	
	--self.lastUseHpPoolTime:		int32	
	--self.diamondF:		int32	
	--self.diamondR:		int32	
	--self.coinF:		int32	
	--self.coinR:		int32	
	--self.equipEnergy:		int32	
	--self.gemEnergy:		int32	
	--self.bookInspiration:		int32	
	--self.dayBuyCoinTimes:		int32	
	--self.dayBuyVitTimes:		int32	
	--self.dayUseItemsTimes:		map[int32, int32]	
	--self.loginDays:		int32	
	--self.pkValue:		int32	
	--self.nextLeaveWrongPosTime:		int32	
	--self.charm:		int32	
	--self.credit:		int32	
	--self.bonus:		int32	
	--self.fame:		int32	
	--self.dragoncoin:		int32	
	--self.sectDonationHonor:		int32	
	--self.spliteSP:		int32	
	--self.sectContribution:		int32	
end

function i3k_sbean.role_base:clone()
	return clone(self)
end

function i3k_sbean.role_base:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.name = is:popString()
	self.createTime = is:popNumber()
	self.headIcon = is:popNumber()
	self.headBorder = is:popNumber()
	self.gender = is:popNumber()
	self.face = is:popNumber()
	self.hair = is:popNumber()
	self.classType = is:popNumber()
	self.transformLevel = is:popNumber()
	self.bwType = is:popNumber()
	self.vipLvl = is:popNumber()
	self.level = is:popNumber()
	self.exp = is:popNumber()
	self.expVolume = is:popNumber()
	self.lastLevelUpTime = is:popNumber()
	self.lastReviveTime = is:popNumber()
	self.vit = is:popNumber()
	self.vitRevertTime = is:popNumber()
	self.lastUseHpTime = is:popNumber()
	self.hpPool = is:popNumber()
	self.lastUseHpPoolTime = is:popNumber()
	self.diamondF = is:popNumber()
	self.diamondR = is:popNumber()
	self.coinF = is:popNumber()
	self.coinR = is:popNumber()
	self.equipEnergy = is:popNumber()
	self.gemEnergy = is:popNumber()
	self.bookInspiration = is:popNumber()
	self.dayBuyCoinTimes = is:popNumber()
	self.dayBuyVitTimes = is:popNumber()
	self.dayUseItemsTimes = is:popNumberNumberMap()
	self.loginDays = is:popNumber()
	self.pkValue = is:popNumber()
	self.nextLeaveWrongPosTime = is:popNumber()
	self.charm = is:popNumber()
	self.credit = is:popNumber()
	self.bonus = is:popNumber()
	self.fame = is:popNumber()
	self.dragoncoin = is:popNumber()
	self.sectDonationHonor = is:popNumber()
	self.spliteSP = is:popNumber()
	self.sectContribution = is:popNumber()
end

function i3k_sbean.role_base:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:pushNumber(self.createTime)
	os:pushNumber(self.headIcon)
	os:pushNumber(self.headBorder)
	os:pushNumber(self.gender)
	os:pushNumber(self.face)
	os:pushNumber(self.hair)
	os:pushNumber(self.classType)
	os:pushNumber(self.transformLevel)
	os:pushNumber(self.bwType)
	os:pushNumber(self.vipLvl)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
	os:pushNumber(self.expVolume)
	os:pushNumber(self.lastLevelUpTime)
	os:pushNumber(self.lastReviveTime)
	os:pushNumber(self.vit)
	os:pushNumber(self.vitRevertTime)
	os:pushNumber(self.lastUseHpTime)
	os:pushNumber(self.hpPool)
	os:pushNumber(self.lastUseHpPoolTime)
	os:pushNumber(self.diamondF)
	os:pushNumber(self.diamondR)
	os:pushNumber(self.coinF)
	os:pushNumber(self.coinR)
	os:pushNumber(self.equipEnergy)
	os:pushNumber(self.gemEnergy)
	os:pushNumber(self.bookInspiration)
	os:pushNumber(self.dayBuyCoinTimes)
	os:pushNumber(self.dayBuyVitTimes)
	os:pushNumberNumberMap(self.dayUseItemsTimes)
	os:pushNumber(self.loginDays)
	os:pushNumber(self.pkValue)
	os:pushNumber(self.nextLeaveWrongPosTime)
	os:pushNumber(self.charm)
	os:pushNumber(self.credit)
	os:pushNumber(self.bonus)
	os:pushNumber(self.fame)
	os:pushNumber(self.dragoncoin)
	os:pushNumber(self.sectDonationHonor)
	os:pushNumber(self.spliteSP)
	os:pushNumber(self.sectContribution)
end


-- 玩家角色名非法信息
i3k_sbean.role_name_invalid = i3k_class("role_name_invalid")
function i3k_sbean.role_name_invalid:ctor()
	self._pname_ = "role_name_invalid"
end

function i3k_sbean.role_name_invalid:decode(is)
	is:popString()
end

function i3k_sbean.role_name_invalid:encode(os)
	os:pushString(self._pname_)
end


-- 特权卡更新信息
i3k_sbean.role_specialcards = i3k_class("role_specialcards")
function i3k_sbean.role_specialcards:ctor()
	self._pname_ = "role_specialcards"
	--self.cards:		vector[DBSpecialCardData]	
end

function i3k_sbean.role_specialcards:clone()
	return clone(self)
end

function i3k_sbean.role_specialcards:decode(is)
	is:popString()
	self.cards = is:popList(i3k_sbean.DBSpecialCardData)
end

function i3k_sbean.role_specialcards:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.cards)
end


-- 同步角色背包信息
i3k_sbean.role_bag = i3k_class("role_bag")
function i3k_sbean.role_bag:ctor()
	self._pname_ = "role_bag"
	--self.bag:		DBItemCells	
end

function i3k_sbean.role_bag:clone()
	return clone(self)
end

function i3k_sbean.role_bag:decode(is)
	is:popString()
	self.bag = is:pop(i3k_sbean.DBItemCells)
end

function i3k_sbean.role_bag:encode(os)
	os:pushString(self._pname_)
	os:push(self.bag)
end


-- 同步角色穿戴信息
i3k_sbean.role_wear = i3k_class("role_wear")
function i3k_sbean.role_wear:ctor()
	self._pname_ = "role_wear"
	--self.wearParts:		vector[DBEquipPart]	
	--self.wearEquips:		map[int32, DBWearEquip]	
end

function i3k_sbean.role_wear:clone()
	return clone(self)
end

function i3k_sbean.role_wear:decode(is)
	is:popString()
	self.wearParts = is:popList(i3k_sbean.DBEquipPart)
	self.wearEquips = is:popNumberMap(i3k_sbean.DBWearEquip)
end

function i3k_sbean.role_wear:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.wearParts)
	os:pushNumberMap(self.wearEquips)
end


-- 同步角色套装收集信息
i3k_sbean.role_suite = i3k_class("role_suite")
function i3k_sbean.role_suite:ctor()
	self._pname_ = "role_suite"
	--self.suites:		map[int32, DBSuite]	
end

function i3k_sbean.role_suite:clone()
	return clone(self)
end

function i3k_sbean.role_suite:decode(is)
	is:popString()
	self.suites = is:popNumberMap(i3k_sbean.DBSuite)
end

function i3k_sbean.role_suite:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.suites)
end


-- 同步角色龙印信息
i3k_sbean.role_sealinfo = i3k_class("role_sealinfo")
function i3k_sbean.role_sealinfo:ctor()
	self._pname_ = "role_sealinfo"
	--self.seal:		DBSealData	
end

function i3k_sbean.role_sealinfo:clone()
	return clone(self)
end

function i3k_sbean.role_sealinfo:decode(is)
	is:popString()
	self.seal = is:pop(i3k_sbean.DBSealData)
end

function i3k_sbean.role_sealinfo:encode(os)
	os:pushString(self._pname_)
	os:push(self.seal)
end


-- 同步角色技能信息
i3k_sbean.role_skill = i3k_class("role_skill")
function i3k_sbean.role_skill:ctor()
	self._pname_ = "role_skill"
	--self.skills:		map[int32, DBSkill]	
	--self.curSkills:		vector[int32]	
	--self.curUniqueSkill:		int32	
end

function i3k_sbean.role_skill:clone()
	return clone(self)
end

function i3k_sbean.role_skill:decode(is)
	is:popString()
	self.skills = is:popNumberMap(i3k_sbean.DBSkill)
	self.curSkills = is:popNumberList()
	self.curUniqueSkill = is:popNumber()
end

function i3k_sbean.role_skill:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.skills)
	os:pushNumberList(self.curSkills)
	os:pushNumber(self.curUniqueSkill)
end


-- 同步角色心法信息
i3k_sbean.role_spirit = i3k_class("role_spirit")
function i3k_sbean.role_spirit:ctor()
	self._pname_ = "role_spirit"
	--self.spirits:		map[int32, DBSpirit]	
	--self.curSpirits:		vector[int32]	
end

function i3k_sbean.role_spirit:clone()
	return clone(self)
end

function i3k_sbean.role_spirit:decode(is)
	is:popString()
	self.spirits = is:popNumberMap(i3k_sbean.DBSpirit)
	self.curSpirits = is:popNumberList()
end

function i3k_sbean.role_spirit:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.spirits)
	os:pushNumberList(self.curSpirits)
end


-- 同步角色神兵信息(nextUSkillCanTrigTime 下次神兵绝技能使用触发技能时间戳)
i3k_sbean.role_weapon = i3k_class("role_weapon")
function i3k_sbean.role_weapon:ctor()
	self._pname_ = "role_weapon"
	--self.task:		DBWeaponTask	
	--self.weapons:		map[int32, DBWeapon]	
	--self.curWeapon:		int32	
	--self.dayEnterMapTimes:		int32	
	--self.nextUSkillCanTrigTime:		int32	
end

function i3k_sbean.role_weapon:clone()
	return clone(self)
end

function i3k_sbean.role_weapon:decode(is)
	is:popString()
	self.task = is:pop(i3k_sbean.DBWeaponTask)
	self.weapons = is:popNumberMap(i3k_sbean.DBWeapon)
	self.curWeapon = is:popNumber()
	self.dayEnterMapTimes = is:popNumber()
	self.nextUSkillCanTrigTime = is:popNumber()
end

function i3k_sbean.role_weapon:encode(os)
	os:pushString(self._pname_)
	os:push(self.task)
	os:pushNumberMap(self.weapons)
	os:pushNumber(self.curWeapon)
	os:pushNumber(self.dayEnterMapTimes)
	os:pushNumber(self.nextUSkillCanTrigTime)
end


-- 同步角色佣兵信息
i3k_sbean.role_pet = i3k_class("role_pet")
function i3k_sbean.role_pet:ctor()
	self._pname_ = "role_pet"
	--self.pets:		map[int32, DBPet]	
	--self.worldMapPets:		set[int32]	
	--self.privateMapPets:		set[int32]	
	--self.sectMapPets:		set[int32]	
	--self.activityMapPets:		set[int32]	
end

function i3k_sbean.role_pet:clone()
	return clone(self)
end

function i3k_sbean.role_pet:decode(is)
	is:popString()
	self.pets = is:popNumberMap(i3k_sbean.DBPet)
	self.worldMapPets = is:popNumberSet()
	self.privateMapPets = is:popNumberSet()
	self.sectMapPets = is:popNumberSet()
	self.activityMapPets = is:popNumberSet()
end

function i3k_sbean.role_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.pets)
	os:pushNumberSet(self.worldMapPets)
	os:pushNumberSet(self.privateMapPets)
	os:pushNumberSet(self.sectMapPets)
	os:pushNumberSet(self.activityMapPets)
end


-- 同步角色当前主线任务信息
i3k_sbean.role_task = i3k_class("role_task")
function i3k_sbean.role_task:ctor()
	self._pname_ = "role_task"
	--self.task:		DBMainTask	
end

function i3k_sbean.role_task:clone()
	return clone(self)
end

function i3k_sbean.role_task:decode(is)
	is:popString()
	self.task = is:pop(i3k_sbean.DBMainTask)
end

function i3k_sbean.role_task:encode(os)
	os:pushString(self._pname_)
	os:push(self.task)
end


-- 同步坐骑信息（登录时同步）
i3k_sbean.role_horseinfo = i3k_class("role_horseinfo")
function i3k_sbean.role_horseinfo:ctor()
	self._pname_ = "role_horseinfo"
	--self.info:		DBHorse	
end

function i3k_sbean.role_horseinfo:clone()
	return clone(self)
end

function i3k_sbean.role_horseinfo:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBHorse)
end

function i3k_sbean.role_horseinfo:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 同步当前藏宝图、收藏品(登录时同步)
i3k_sbean.role_treasure_info = i3k_class("role_treasure_info")
function i3k_sbean.role_treasure_info:ctor()
	self._pname_ = "role_treasure_info"
	--self.curMap:		MapState	
	--self.medals:		map[int32,int8]	
end

function i3k_sbean.role_treasure_info:clone()
	return clone(self)
end

function i3k_sbean.role_treasure_info:decode(is)
	is:popString()
	self.curMap = is:pop(i3k_sbean.MapState)
	self.medals = is:popNumberNumberMap()
end

function i3k_sbean.role_treasure_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.curMap)
	os:pushNumberNumberMap(self.medals)
end


-- 登录后同步的普通副本地图进度信息
i3k_sbean.role_normal_mapcopy_log = i3k_class("role_normal_mapcopy_log")
function i3k_sbean.role_normal_mapcopy_log:ctor()
	self._pname_ = "role_normal_mapcopy_log"
	--self.logs:		map[int32, DBNormalMapCopyLog]	
end

function i3k_sbean.role_normal_mapcopy_log:clone()
	return clone(self)
end

function i3k_sbean.role_normal_mapcopy_log:decode(is)
	is:popString()
	self.logs = is:popNumberMap(i3k_sbean.DBNormalMapCopyLog)
end

function i3k_sbean.role_normal_mapcopy_log:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.logs)
end


-- 登录后同步的活动副本地图组进度信息
i3k_sbean.role_activity_mapgroup_log = i3k_class("role_activity_mapgroup_log")
function i3k_sbean.role_activity_mapgroup_log:ctor()
	self._pname_ = "role_activity_mapgroup_log"
	--self.logs:		map[int32, DBActivityMapGroupLog]	
end

function i3k_sbean.role_activity_mapgroup_log:clone()
	return clone(self)
end

function i3k_sbean.role_activity_mapgroup_log:decode(is)
	is:popString()
	self.logs = is:popNumberMap(i3k_sbean.DBActivityMapGroupLog)
end

function i3k_sbean.role_activity_mapgroup_log:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.logs)
end


-- 登录后同步守护副本进度信息
i3k_sbean.role_towerdefence_log = i3k_class("role_towerdefence_log")
function i3k_sbean.role_towerdefence_log:ctor()
	self._pname_ = "role_towerdefence_log"
	--self.logs:		map[int32, DBTowerDefenceMapLog]	
end

function i3k_sbean.role_towerdefence_log:clone()
	return clone(self)
end

function i3k_sbean.role_towerdefence_log:decode(is)
	is:popString()
	self.logs = is:popNumberMap(i3k_sbean.DBTowerDefenceMapLog)
end

function i3k_sbean.role_towerdefence_log:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.logs)
end


-- 登录后同步竞技场参与次数
i3k_sbean.role_arena_entertimes = i3k_class("role_arena_entertimes")
function i3k_sbean.role_arena_entertimes:ctor()
	self._pname_ = "role_arena_entertimes"
	--self.enterTime:		int32	
end

function i3k_sbean.role_arena_entertimes:clone()
	return clone(self)
end

function i3k_sbean.role_arena_entertimes:decode(is)
	is:popString()
	self.enterTime = is:popNumber()
end

function i3k_sbean.role_arena_entertimes:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.enterTime)
end


-- 同步角色当前自创武功信息
i3k_sbean.role_diyskill = i3k_class("role_diyskill")
function i3k_sbean.role_diyskill:ctor()
	self._pname_ = "role_diyskill"
	--self.diySkill:		DBDiySkill	
	--self.diyskillTimes:		int32	
end

function i3k_sbean.role_diyskill:clone()
	return clone(self)
end

function i3k_sbean.role_diyskill:decode(is)
	is:popString()
	self.diySkill = is:pop(i3k_sbean.DBDiySkill)
	self.diyskillTimes = is:popNumber()
end

function i3k_sbean.role_diyskill:encode(os)
	os:pushString(self._pname_)
	os:push(self.diySkill)
	os:pushNumber(self.diyskillTimes)
end


-- 同步角色帮派名字和职位
i3k_sbean.role_sectinfo = i3k_class("role_sectinfo")
function i3k_sbean.role_sectinfo:ctor()
	self._pname_ = "role_sectinfo"
	--self.info:		SectBrief	
end

function i3k_sbean.role_sectinfo:clone()
	return clone(self)
end

function i3k_sbean.role_sectinfo:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.SectBrief)
end

function i3k_sbean.role_sectinfo:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 同步角色帮派光环信息
i3k_sbean.role_sectaura = i3k_class("role_sectaura")
function i3k_sbean.role_sectaura:ctor()
	self._pname_ = "role_sectaura"
	--self.auras:		map[int32, int32]	
end

function i3k_sbean.role_sectaura:clone()
	return clone(self)
end

function i3k_sbean.role_sectaura:decode(is)
	is:popString()
	self.auras = is:popNumberNumberMap()
end

function i3k_sbean.role_sectaura:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.auras)
end


-- 同步角色帮派任务信息
i3k_sbean.role_secttask = i3k_class("role_secttask")
function i3k_sbean.role_secttask:ctor()
	self._pname_ = "role_secttask"
	--self.task:		SectReceivedTask	
end

function i3k_sbean.role_secttask:clone()
	return clone(self)
end

function i3k_sbean.role_secttask:decode(is)
	is:popString()
	self.task = is:pop(i3k_sbean.SectReceivedTask)
end

function i3k_sbean.role_secttask:encode(os)
	os:pushString(self._pname_)
	os:push(self.task)
end


-- 同步角色组队信息
i3k_sbean.role_team = i3k_class("role_team")
function i3k_sbean.role_team:ctor()
	self._pname_ = "role_team"
	--self.team:		Team	
end

function i3k_sbean.role_team:clone()
	return clone(self)
end

function i3k_sbean.role_team:decode(is)
	is:popString()
	self.team = is:pop(i3k_sbean.Team)
end

function i3k_sbean.role_team:encode(os)
	os:pushString(self._pname_)
	os:push(self.team)
end


-- 同步副本房间信息
i3k_sbean.role_mroom = i3k_class("role_mroom")
function i3k_sbean.role_mroom:ctor()
	self._pname_ = "role_mroom"
	--self.room:		MRoom	
end

function i3k_sbean.role_mroom:clone()
	return clone(self)
end

function i3k_sbean.role_mroom:decode(is)
	is:popString()
	self.room = is:pop(i3k_sbean.MRoom)
end

function i3k_sbean.role_mroom:encode(os)
	os:pushString(self._pname_)
	os:push(self.room)
end


-- 同步好友信息
i3k_sbean.role_friends = i3k_class("role_friends")
function i3k_sbean.role_friends:ctor()
	self._pname_ = "role_friends"
	--self.friends:		map[int32, FriendOverview]	
end

function i3k_sbean.role_friends:clone()
	return clone(self)
end

function i3k_sbean.role_friends:decode(is)
	is:popString()
	self.friends = is:popNumberMap(i3k_sbean.FriendOverview)
end

function i3k_sbean.role_friends:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.friends)
end


-- 同步最近聊天信息
i3k_sbean.role_msg = i3k_class("role_msg")
function i3k_sbean.role_msg:ctor()
	self._pname_ = "role_msg"
	--self.msgs:		vector[MessageInfo]	
end

function i3k_sbean.role_msg:clone()
	return clone(self)
end

function i3k_sbean.role_msg:decode(is)
	is:popString()
	self.msgs = is:popList(i3k_sbean.MessageInfo)
end

function i3k_sbean.role_msg:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.msgs)
end


-- 同步4v4竞技场信息
i3k_sbean.role_superarena = i3k_class("role_superarena")
function i3k_sbean.role_superarena:ctor()
	self._pname_ = "role_superarena"
	--self.room:		ARoom	
	--self.state:		int32	
	--self.joinTime:		int32	
	--self.joinType:		int32	
	--self.weekHonor:		int32	
	--self.historyHonor:		int32	
end

function i3k_sbean.role_superarena:clone()
	return clone(self)
end

function i3k_sbean.role_superarena:decode(is)
	is:popString()
	self.room = is:pop(i3k_sbean.ARoom)
	self.state = is:popNumber()
	self.joinTime = is:popNumber()
	self.joinType = is:popNumber()
	self.weekHonor = is:popNumber()
	self.historyHonor = is:popNumber()
end

function i3k_sbean.role_superarena:encode(os)
	os:pushString(self._pname_)
	os:push(self.room)
	os:pushNumber(self.state)
	os:pushNumber(self.joinTime)
	os:pushNumber(self.joinType)
	os:pushNumber(self.weekHonor)
	os:pushNumber(self.historyHonor)
end


-- 同步势力战信息(登录时同步)
i3k_sbean.role_forcewar = i3k_class("role_forcewar")
function i3k_sbean.role_forcewar:ctor()
	self._pname_ = "role_forcewar"
	--self.joinTime:		int32	
	--self.joinType:		int32	
	--self.weekFeats:		int32	
	--self.totalFeats:		int32	
	--self.punishEndTime:		int32	
	--self.room:		FRoom	
	--self.dayGainLotteryCnt:		int32	
	--self.totalLotteryCnt:		int32	
end

function i3k_sbean.role_forcewar:clone()
	return clone(self)
end

function i3k_sbean.role_forcewar:decode(is)
	is:popString()
	self.joinTime = is:popNumber()
	self.joinType = is:popNumber()
	self.weekFeats = is:popNumber()
	self.totalFeats = is:popNumber()
	self.punishEndTime = is:popNumber()
	self.room = is:pop(i3k_sbean.FRoom)
	self.dayGainLotteryCnt = is:popNumber()
	self.totalLotteryCnt = is:popNumber()
end

function i3k_sbean.role_forcewar:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.joinTime)
	os:pushNumber(self.joinType)
	os:pushNumber(self.weekFeats)
	os:pushNumber(self.totalFeats)
	os:pushNumber(self.punishEndTime)
	os:push(self.room)
	os:pushNumber(self.dayGainLotteryCnt)
	os:pushNumber(self.totalLotteryCnt)
end


-- 指引信息同步
i3k_sbean.role_leadinfo = i3k_class("role_leadinfo")
function i3k_sbean.role_leadinfo:ctor()
	self._pname_ = "role_leadinfo"
	--self.info:		set[int32]	
end

function i3k_sbean.role_leadinfo:clone()
	return clone(self)
end

function i3k_sbean.role_leadinfo:decode(is)
	is:popString()
	self.info = is:popNumberSet()
end

function i3k_sbean.role_leadinfo:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.info)
end


-- 强制剧情同步
i3k_sbean.role_leadplot = i3k_class("role_leadplot")
function i3k_sbean.role_leadplot:ctor()
	self._pname_ = "role_leadplot"
	--self.plot:		map[int32, int32]	
end

function i3k_sbean.role_leadplot:clone()
	return clone(self)
end

function i3k_sbean.role_leadplot:decode(is)
	is:popString()
	self.plot = is:popNumberNumberMap()
end

function i3k_sbean.role_leadplot:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.plot)
end


-- 即将开启预览
i3k_sbean.role_func_preview = i3k_class("role_func_preview")
function i3k_sbean.role_func_preview:ctor()
	self._pname_ = "role_func_preview"
	--self.preview:		int32	
end

function i3k_sbean.role_func_preview:clone()
	return clone(self)
end

function i3k_sbean.role_func_preview:decode(is)
	is:popString()
	self.preview = is:popNumber()
end

function i3k_sbean.role_func_preview:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.preview)
end


-- 江湖客栈引导
i3k_sbean.role_treasureguide = i3k_class("role_treasureguide")
function i3k_sbean.role_treasureguide:ctor()
	self._pname_ = "role_treasureguide"
	--self.guide:		int32	
end

function i3k_sbean.role_treasureguide:clone()
	return clone(self)
end

function i3k_sbean.role_treasureguide:decode(is)
	is:popString()
	self.guide = is:popNumber()
end

function i3k_sbean.role_treasureguide:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.guide)
end


-- 离线经验
i3k_sbean.role_offlineexp = i3k_class("role_offlineexp")
function i3k_sbean.role_offlineexp:ctor()
	self._pname_ = "role_offlineexp"
	--self.info:		DBOfflineExp	
	--self.hide:		int32	
end

function i3k_sbean.role_offlineexp:clone()
	return clone(self)
end

function i3k_sbean.role_offlineexp:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBOfflineExp)
	self.hide = is:popNumber()
end

function i3k_sbean.role_offlineexp:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumber(self.hide)
end


-- 登录时同步历练系统(历练、藏书、参悟)
i3k_sbean.role_expcoin = i3k_class("role_expcoin")
function i3k_sbean.role_expcoin:ctor()
	self._pname_ = "role_expcoin"
	--self.curExpCoin:		int32	
	--self.books:		map[int32, int32]	
	--self.bagBooks:		map[int32, int32]	
	--self.grasps:		map[int32, GraspInfo]	
	--self.dmgTransfer:		DBDMGTransfer	
end

function i3k_sbean.role_expcoin:clone()
	return clone(self)
end

function i3k_sbean.role_expcoin:decode(is)
	is:popString()
	self.curExpCoin = is:popNumber()
	self.books = is:popNumberNumberMap()
	self.bagBooks = is:popNumberNumberMap()
	self.grasps = is:popNumberMap(i3k_sbean.GraspInfo)
	self.dmgTransfer = is:pop(i3k_sbean.DBDMGTransfer)
end

function i3k_sbean.role_expcoin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curExpCoin)
	os:pushNumberNumberMap(self.books)
	os:pushNumberNumberMap(self.bagBooks)
	os:pushNumberMap(self.grasps)
	os:push(self.dmgTransfer)
end


-- 登录时同步称号信息
i3k_sbean.role_titles = i3k_class("role_titles")
function i3k_sbean.role_titles:ctor()
	self._pname_ = "role_titles"
	--self.titles:		map[int32, int32]	
	--self.curPermanent:		int32	
	--self.equipedtitles:		vector[DBTitleSlot]	
	--self.slotsize:		int32	
end

function i3k_sbean.role_titles:clone()
	return clone(self)
end

function i3k_sbean.role_titles:decode(is)
	is:popString()
	self.titles = is:popNumberNumberMap()
	self.curPermanent = is:popNumber()
	self.equipedtitles = is:popList(i3k_sbean.DBTitleSlot)
	self.slotsize = is:popNumber()
end

function i3k_sbean.role_titles:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.titles)
	os:pushNumber(self.curPermanent)
	os:pushList(self.equipedtitles)
	os:pushNumber(self.slotsize)
end


-- 登录时同步复活相关信息
i3k_sbean.role_revive_info = i3k_class("role_revive_info")
function i3k_sbean.role_revive_info:ctor()
	self._pname_ = "role_revive_info"
	--self.insuitReviveTimes:		int32	
	--self.cprReviveCnt:		int32	
end

function i3k_sbean.role_revive_info:clone()
	return clone(self)
end

function i3k_sbean.role_revive_info:decode(is)
	is:popString()
	self.insuitReviveTimes = is:popNumber()
	self.cprReviveCnt = is:popNumber()
end

function i3k_sbean.role_revive_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.insuitReviveTimes)
	os:pushNumber(self.cprReviveCnt)
end


-- 登录时同步支线任务信息
i3k_sbean.role_branch_task = i3k_class("role_branch_task")
function i3k_sbean.role_branch_task:ctor()
	self._pname_ = "role_branch_task"
	--self.tasks:		map[int32, DBBranchTask]	
end

function i3k_sbean.role_branch_task:clone()
	return clone(self)
end

function i3k_sbean.role_branch_task:decode(is)
	is:popString()
	self.tasks = is:popNumberMap(i3k_sbean.DBBranchTask)
end

function i3k_sbean.role_branch_task:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.tasks)
end


-- 登录时同步史诗任务信息
i3k_sbean.role_epic_task = i3k_class("role_epic_task")
function i3k_sbean.role_epic_task:ctor()
	self._pname_ = "role_epic_task"
	--self.tasks:		vector[EpicTask]	
end

function i3k_sbean.role_epic_task:clone()
	return clone(self)
end

function i3k_sbean.role_epic_task:decode(is)
	is:popString()
	self.tasks = is:popList(i3k_sbean.EpicTask)
end

function i3k_sbean.role_epic_task:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.tasks)
end


i3k_sbean.role_climb_tower = i3k_class("role_climb_tower")
function i3k_sbean.role_climb_tower:ctor()
	self._pname_ = "role_climb_tower"
	--self.data:		DBClimbTower	
end

function i3k_sbean.role_climb_tower:clone()
	return clone(self)
end

function i3k_sbean.role_climb_tower:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBClimbTower)
end

function i3k_sbean.role_climb_tower:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 登录时同步运镖信息
i3k_sbean.role_sect_deliver = i3k_class("role_sect_deliver")
function i3k_sbean.role_sect_deliver:ctor()
	self._pname_ = "role_sect_deliver"
	--self.sectdeliver:		DBSectDeliver	
end

function i3k_sbean.role_sect_deliver:clone()
	return clone(self)
end

function i3k_sbean.role_sect_deliver:decode(is)
	is:popString()
	self.sectdeliver = is:pop(i3k_sbean.DBSectDeliver)
end

function i3k_sbean.role_sect_deliver:encode(os)
	os:pushString(self._pname_)
	os:push(self.sectdeliver)
end


-- 同步添加赏金币
i3k_sbean.role_add_robmoney = i3k_class("role_add_robmoney")
function i3k_sbean.role_add_robmoney:ctor()
	self._pname_ = "role_add_robmoney"
	--self.value:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_robmoney:clone()
	return clone(self)
end

function i3k_sbean.role_add_robmoney:decode(is)
	is:popString()
	self.value = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_robmoney:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.value)
	os:pushNumber(self.reason)
end


-- 登录时同步劫镖标志
i3k_sbean.role_rob_flag = i3k_class("role_rob_flag")
function i3k_sbean.role_rob_flag:ctor()
	self._pname_ = "role_rob_flag"
	--self.flag:		int8	
end

function i3k_sbean.role_rob_flag:clone()
	return clone(self)
end

function i3k_sbean.role_rob_flag:decode(is)
	is:popString()
	self.flag = is:popNumber()
end

function i3k_sbean.role_rob_flag:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.flag)
end


-- 登录时同步镖车位置
i3k_sbean.role_escortcar_location = i3k_class("role_escortcar_location")
function i3k_sbean.role_escortcar_location:ctor()
	self._pname_ = "role_escortcar_location"
	--self.mapLocation:		MapLocation	
	--self.curLine:		int32	
end

function i3k_sbean.role_escortcar_location:clone()
	return clone(self)
end

function i3k_sbean.role_escortcar_location:decode(is)
	is:popString()
	self.mapLocation = is:pop(i3k_sbean.MapLocation)
	self.curLine = is:popNumber()
end

function i3k_sbean.role_escortcar_location:encode(os)
	os:pushString(self._pname_)
	os:push(self.mapLocation)
	os:pushNumber(self.curLine)
end


-- 登录时同步七日留存信息
i3k_sbean.role_rmactivity = i3k_class("role_rmactivity")
function i3k_sbean.role_rmactivity:ctor()
	self._pname_ = "role_rmactivity"
	--self.pos:		int32	
end

function i3k_sbean.role_rmactivity:clone()
	return clone(self)
end

function i3k_sbean.role_rmactivity:decode(is)
	is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.role_rmactivity:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
end


-- 同步服务器冲关等级
i3k_sbean.speedup_level = i3k_class("speedup_level")
function i3k_sbean.speedup_level:ctor()
	self._pname_ = "speedup_level"
	--self.lvl:		int32	
end

function i3k_sbean.speedup_level:clone()
	return clone(self)
end

function i3k_sbean.speedup_level:decode(is)
	is:popString()
	self.lvl = is:popNumber()
end

function i3k_sbean.speedup_level:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.lvl)
end


-- 同步姻缘等级
i3k_sbean.role_marriage_level = i3k_class("role_marriage_level")
function i3k_sbean.role_marriage_level:ctor()
	self._pname_ = "role_marriage_level"
	--self.level:		int32	
end

function i3k_sbean.role_marriage_level:clone()
	return clone(self)
end

function i3k_sbean.role_marriage_level:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.role_marriage_level:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 同步离婚时间
i3k_sbean.role_divorce_time = i3k_class("role_divorce_time")
function i3k_sbean.role_divorce_time:ctor()
	self._pname_ = "role_divorce_time"
	--self.time:		int32	
end

function i3k_sbean.role_divorce_time:clone()
	return clone(self)
end

function i3k_sbean.role_divorce_time:decode(is)
	is:popString()
	self.time = is:popNumber()
end

function i3k_sbean.role_divorce_time:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.time)
end


-- 登录时同步角色势力声望信息
i3k_sbean.role_forcefame_info = i3k_class("role_forcefame_info")
function i3k_sbean.role_forcefame_info:ctor()
	self._pname_ = "role_forcefame_info"
	--self.fame:		map[int32, int32]	
	--self.tasks:		map[int32, DBForceFameTask]	
	--self.donate:		map[int32, DBForceDonateInfo]	
end

function i3k_sbean.role_forcefame_info:clone()
	return clone(self)
end

function i3k_sbean.role_forcefame_info:decode(is)
	is:popString()
	self.fame = is:popNumberNumberMap()
	self.tasks = is:popNumberMap(i3k_sbean.DBForceFameTask)
	self.donate = is:popNumberMap(i3k_sbean.DBForceDonateInfo)
end

function i3k_sbean.role_forcefame_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.fame)
	os:pushNumberMap(self.tasks)
	os:pushNumberMap(self.donate)
end


-- 通知客户端切换地图
i3k_sbean.role_change_map = i3k_class("role_change_map")
function i3k_sbean.role_change_map:ctor()
	self._pname_ = "role_change_map"
	--self.location:		MapLocation	
	--self.curLine:		int32	
end

function i3k_sbean.role_change_map:clone()
	return clone(self)
end

function i3k_sbean.role_change_map:decode(is)
	is:popString()
	self.location = is:pop(i3k_sbean.MapLocation)
	self.curLine = is:popNumber()
end

function i3k_sbean.role_change_map:encode(os)
	os:pushString(self._pname_)
	os:push(self.location)
	os:pushNumber(self.curLine)
end


-- 通知客户端当前地图神兵天隙NPC
i3k_sbean.role_weapon_npc = i3k_class("role_weapon_npc")
function i3k_sbean.role_weapon_npc:ctor()
	self._pname_ = "role_weapon_npc"
	--self.npcID:		int32	
end

function i3k_sbean.role_weapon_npc:clone()
	return clone(self)
end

function i3k_sbean.role_weapon_npc:decode(is)
	is:popString()
	self.npcID = is:popNumber()
end

function i3k_sbean.role_weapon_npc:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcID)
end


-- 通知新聊天信息到达
i3k_sbean.role_new_msg = i3k_class("role_new_msg")
function i3k_sbean.role_new_msg:ctor()
	self._pname_ = "role_new_msg"
	--self.msg:		MessageInfo	
end

function i3k_sbean.role_new_msg:clone()
	return clone(self)
end

function i3k_sbean.role_new_msg:decode(is)
	is:popString()
	self.msg = is:pop(i3k_sbean.MessageInfo)
end

function i3k_sbean.role_new_msg:encode(os)
	os:pushString(self._pname_)
	os:push(self.msg)
end


-- 通知客户点飞鸽传书信息
i3k_sbean.role_kite_new_msg = i3k_class("role_kite_new_msg")
function i3k_sbean.role_kite_new_msg:ctor()
	self._pname_ = "role_kite_new_msg"
	--self.kiteMsg:		KiteMessageInfo	
end

function i3k_sbean.role_kite_new_msg:clone()
	return clone(self)
end

function i3k_sbean.role_kite_new_msg:decode(is)
	is:popString()
	self.kiteMsg = is:pop(i3k_sbean.KiteMessageInfo)
end

function i3k_sbean.role_kite_new_msg:encode(os)
	os:pushString(self._pname_)
	os:push(self.kiteMsg)
end


-- 通知客户端队友击杀
i3k_sbean.role_team_kill = i3k_class("role_team_kill")
function i3k_sbean.role_team_kill:ctor()
	self._pname_ = "role_team_kill"
	--self.type:		int32	
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.role_team_kill:clone()
	return clone(self)
end

function i3k_sbean.role_team_kill:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.role_team_kill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 通知客户端角色钻石增加
i3k_sbean.role_add_diamond = i3k_class("role_add_diamond")
function i3k_sbean.role_add_diamond:ctor()
	self._pname_ = "role_add_diamond"
	--self.amount:		int32	
	--self.free:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_diamond:clone()
	return clone(self)
end

function i3k_sbean.role_add_diamond:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.free = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_diamond:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.free)
	os:pushNumber(self.reason)
end


-- 通知客户端角色金币增加
i3k_sbean.role_add_coin = i3k_class("role_add_coin")
function i3k_sbean.role_add_coin:ctor()
	self._pname_ = "role_add_coin"
	--self.amount:		int32	
	--self.free:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_coin:clone()
	return clone(self)
end

function i3k_sbean.role_add_coin:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.free = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_coin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.free)
	os:pushNumber(self.reason)
end


-- 通知客户端角色帮贡增加
i3k_sbean.role_add_sectcontribution = i3k_class("role_add_sectcontribution")
function i3k_sbean.role_add_sectcontribution:ctor()
	self._pname_ = "role_add_sectcontribution"
	--self.amount:		int32	
end

function i3k_sbean.role_add_sectcontribution:clone()
	return clone(self)
end

function i3k_sbean.role_add_sectcontribution:decode(is)
	is:popString()
	self.amount = is:popNumber()
end

function i3k_sbean.role_add_sectcontribution:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
end


-- 通知客户端角色竞技场点数增加
i3k_sbean.role_add_arenapoint = i3k_class("role_add_arenapoint")
function i3k_sbean.role_add_arenapoint:ctor()
	self._pname_ = "role_add_arenapoint"
	--self.amount:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_arenapoint:clone()
	return clone(self)
end

function i3k_sbean.role_add_arenapoint:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_arenapoint:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.reason)
end


-- 通知客户端角色4v4竞技场点数增加
i3k_sbean.role_add_superarenahonor = i3k_class("role_add_superarenahonor")
function i3k_sbean.role_add_superarenahonor:ctor()
	self._pname_ = "role_add_superarenahonor"
	--self.amount:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_superarenahonor:clone()
	return clone(self)
end

function i3k_sbean.role_add_superarenahonor:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_superarenahonor:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.reason)
end


-- 通知客户端角色商誉值增加
i3k_sbean.role_add_credit = i3k_class("role_add_credit")
function i3k_sbean.role_add_credit:ctor()
	self._pname_ = "role_add_credit"
	--self.amount:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_credit:clone()
	return clone(self)
end

function i3k_sbean.role_add_credit:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_credit:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.reason)
end


-- 通知客户端角色装备能量增加
i3k_sbean.role_add_equipenergy = i3k_class("role_add_equipenergy")
function i3k_sbean.role_add_equipenergy:ctor()
	self._pname_ = "role_add_equipenergy"
	--self.amount:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_equipenergy:clone()
	return clone(self)
end

function i3k_sbean.role_add_equipenergy:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_equipenergy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.reason)
end


-- 通知客户端角色红利
i3k_sbean.role_add_bonus = i3k_class("role_add_bonus")
function i3k_sbean.role_add_bonus:ctor()
	self._pname_ = "role_add_bonus"
	--self.amount:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_bonus:clone()
	return clone(self)
end

function i3k_sbean.role_add_bonus:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_bonus:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.reason)
end


-- 通知客户端角色宝石能量增加
i3k_sbean.role_add_gemenergy = i3k_class("role_add_gemenergy")
function i3k_sbean.role_add_gemenergy:ctor()
	self._pname_ = "role_add_gemenergy"
	--self.amount:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_gemenergy:clone()
	return clone(self)
end

function i3k_sbean.role_add_gemenergy:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_gemenergy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.reason)
end


-- 通知客户端角色心法悟性增加
i3k_sbean.role_add_bookinspiration = i3k_class("role_add_bookinspiration")
function i3k_sbean.role_add_bookinspiration:ctor()
	self._pname_ = "role_add_bookinspiration"
	--self.amount:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_bookinspiration:clone()
	return clone(self)
end

function i3k_sbean.role_add_bookinspiration:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_bookinspiration:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.reason)
end


-- 通知客户端角色武运增加
i3k_sbean.role_add_weaponsoulcoin = i3k_class("role_add_weaponsoulcoin")
function i3k_sbean.role_add_weaponsoulcoin:ctor()
	self._pname_ = "role_add_weaponsoulcoin"
	--self.amount:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_weaponsoulcoin:clone()
	return clone(self)
end

function i3k_sbean.role_add_weaponsoulcoin:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_weaponsoulcoin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.reason)
end


-- 通知客户端角色经验增长
i3k_sbean.role_add_exp = i3k_class("role_add_exp")
function i3k_sbean.role_add_exp:ctor()
	self._pname_ = "role_add_exp"
	--self.exp:		int64	
	--self.offlineexp:		int64	
	--self.drugexp:		int64	
	--self.wizardexp:		int64	
	--self.citylightexp:		int64	
	--self.sectZoneSpiritexp:		int64	
	--self.swornAdd:		int64	
	--self.globalWorldCardAdd:		int64	
end

function i3k_sbean.role_add_exp:clone()
	return clone(self)
end

function i3k_sbean.role_add_exp:decode(is)
	is:popString()
	self.exp = is:popNumber()
	self.offlineexp = is:popNumber()
	self.drugexp = is:popNumber()
	self.wizardexp = is:popNumber()
	self.citylightexp = is:popNumber()
	self.sectZoneSpiritexp = is:popNumber()
	self.swornAdd = is:popNumber()
	self.globalWorldCardAdd = is:popNumber()
end

function i3k_sbean.role_add_exp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.exp)
	os:pushNumber(self.offlineexp)
	os:pushNumber(self.drugexp)
	os:pushNumber(self.wizardexp)
	os:pushNumber(self.citylightexp)
	os:pushNumber(self.sectZoneSpiritexp)
	os:pushNumber(self.swornAdd)
	os:pushNumber(self.globalWorldCardAdd)
end


-- 通知客户端角色历练币增长
i3k_sbean.role_add_expcoin = i3k_class("role_add_expcoin")
function i3k_sbean.role_add_expcoin:ctor()
	self._pname_ = "role_add_expcoin"
	--self.expCoin:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_expcoin:clone()
	return clone(self)
end

function i3k_sbean.role_add_expcoin:decode(is)
	is:popString()
	self.expCoin = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_expcoin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.expCoin)
	os:pushNumber(self.reason)
end


-- 通知客户端角色离线精灵修炼点增长
i3k_sbean.role_add_offline_func_point = i3k_class("role_add_offline_func_point")
function i3k_sbean.role_add_offline_func_point:ctor()
	self._pname_ = "role_add_offline_func_point"
	--self.offlineFuncPoint:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_offline_func_point:clone()
	return clone(self)
end

function i3k_sbean.role_add_offline_func_point:decode(is)
	is:popString()
	self.offlineFuncPoint = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_offline_func_point:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.offlineFuncPoint)
	os:pushNumber(self.reason)
end


-- 通知客户端角色宠物赛跑货币增长
i3k_sbean.role_add_petrun_coin = i3k_class("role_add_petrun_coin")
function i3k_sbean.role_add_petrun_coin:ctor()
	self._pname_ = "role_add_petrun_coin"
	--self.petRunCoin:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_petrun_coin:clone()
	return clone(self)
end

function i3k_sbean.role_add_petrun_coin:decode(is)
	is:popString()
	self.petRunCoin = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_petrun_coin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petRunCoin)
	os:pushNumber(self.reason)
end


-- 通知客户端角色体力增长
i3k_sbean.role_add_vit = i3k_class("role_add_vit")
function i3k_sbean.role_add_vit:ctor()
	self._pname_ = "role_add_vit"
	--self.vit:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_vit:clone()
	return clone(self)
end

function i3k_sbean.role_add_vit:decode(is)
	is:popString()
	self.vit = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_vit:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.vit)
	os:pushNumber(self.reason)
end


-- 通知客户端角色分解能量增长
i3k_sbean.role_add_splitsp = i3k_class("role_add_splitsp")
function i3k_sbean.role_add_splitsp:ctor()
	self._pname_ = "role_add_splitsp"
	--self.splitsp:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_splitsp:clone()
	return clone(self)
end

function i3k_sbean.role_add_splitsp:decode(is)
	is:popString()
	self.splitsp = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_splitsp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.splitsp)
	os:pushNumber(self.reason)
end


-- 通知客户端角色魅力值增长
i3k_sbean.role_add_charm = i3k_class("role_add_charm")
function i3k_sbean.role_add_charm:ctor()
	self._pname_ = "role_add_charm"
	--self.charm:		int32	
end

function i3k_sbean.role_add_charm:clone()
	return clone(self)
end

function i3k_sbean.role_add_charm:decode(is)
	is:popString()
	self.charm = is:popNumber()
end

function i3k_sbean.role_add_charm:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.charm)
end


-- 通知客户端角色武勋(累计的武勋)增加
i3k_sbean.role_add_feat = i3k_class("role_add_feat")
function i3k_sbean.role_add_feat:ctor()
	self._pname_ = "role_add_feat"
	--self.feat:		int32	
end

function i3k_sbean.role_add_feat:clone()
	return clone(self)
end

function i3k_sbean.role_add_feat:decode(is)
	is:popString()
	self.feat = is:popNumber()
end

function i3k_sbean.role_add_feat:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.feat)
end


-- 通知客户端增加道具
i3k_sbean.role_add_item = i3k_class("role_add_item")
function i3k_sbean.role_add_item:ctor()
	self._pname_ = "role_add_item"
	--self.item:		GameItem	
	--self.reason:		int32	
end

function i3k_sbean.role_add_item:clone()
	return clone(self)
end

function i3k_sbean.role_add_item:decode(is)
	is:popString()
	self.item = is:pop(i3k_sbean.GameItem)
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_item:encode(os)
	os:pushString(self._pname_)
	os:push(self.item)
	os:pushNumber(self.reason)
end


-- 通知客户端增加道具
i3k_sbean.role_add_items = i3k_class("role_add_items")
function i3k_sbean.role_add_items:ctor()
	self._pname_ = "role_add_items"
	--self.items:		vector[GameItem]	
	--self.reason:		int32	
end

function i3k_sbean.role_add_items:clone()
	return clone(self)
end

function i3k_sbean.role_add_items:decode(is)
	is:popString()
	self.items = is:popList(i3k_sbean.GameItem)
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_items:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.items)
	os:pushNumber(self.reason)
end


-- 通知客户端删除道具
i3k_sbean.role_del_item = i3k_class("role_del_item")
function i3k_sbean.role_del_item:ctor()
	self._pname_ = "role_del_item"
	--self.item:		GameItem	
	--self.reason:		int32	
end

function i3k_sbean.role_del_item:clone()
	return clone(self)
end

function i3k_sbean.role_del_item:decode(is)
	is:popString()
	self.item = is:pop(i3k_sbean.GameItem)
	self.reason = is:popNumber()
end

function i3k_sbean.role_del_item:encode(os)
	os:pushString(self._pname_)
	os:push(self.item)
	os:pushNumber(self.reason)
end


-- 通知客户端删除道具
i3k_sbean.role_del_items = i3k_class("role_del_items")
function i3k_sbean.role_del_items:ctor()
	self._pname_ = "role_del_items"
	--self.items:		vector[GameItem]	
	--self.reason:		int32	
end

function i3k_sbean.role_del_items:clone()
	return clone(self)
end

function i3k_sbean.role_del_items:decode(is)
	is:popString()
	self.items = is:popList(i3k_sbean.GameItem)
	self.reason = is:popNumber()
end

function i3k_sbean.role_del_items:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.items)
	os:pushNumber(self.reason)
end


-- 通知客户端增加随从战绩
i3k_sbean.pet_add_exploit = i3k_class("pet_add_exploit")
function i3k_sbean.pet_add_exploit:ctor()
	self._pname_ = "pet_add_exploit"
	--self.petID:		int32	
	--self.exploit:		int32	
end

function i3k_sbean.pet_add_exploit:clone()
	return clone(self)
end

function i3k_sbean.pet_add_exploit:decode(is)
	is:popString()
	self.petID = is:popNumber()
	self.exploit = is:popNumber()
end

function i3k_sbean.pet_add_exploit:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petID)
	os:pushNumber(self.exploit)
end


-- 通知客户端增加龙币
i3k_sbean.role_add_dragoncoin = i3k_class("role_add_dragoncoin")
function i3k_sbean.role_add_dragoncoin:ctor()
	self._pname_ = "role_add_dragoncoin"
	--self.dragoncoin:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_dragoncoin:clone()
	return clone(self)
end

function i3k_sbean.role_add_dragoncoin:decode(is)
	is:popString()
	self.dragoncoin = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_dragoncoin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dragoncoin)
	os:pushNumber(self.reason)
end


-- 通知客户端增加声望
i3k_sbean.role_add_fame = i3k_class("role_add_fame")
function i3k_sbean.role_add_fame:ctor()
	self._pname_ = "role_add_fame"
	--self.fame:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_fame:clone()
	return clone(self)
end

function i3k_sbean.role_add_fame:decode(is)
	is:popString()
	self.fame = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_fame:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fame)
	os:pushNumber(self.reason)
end


-- 通知客户端增加工资币
i3k_sbean.role_add_sectsalarycoin = i3k_class("role_add_sectsalarycoin")
function i3k_sbean.role_add_sectsalarycoin:ctor()
	self._pname_ = "role_add_sectsalarycoin"
	--self.sectsalarycoin:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_sectsalarycoin:clone()
	return clone(self)
end

function i3k_sbean.role_add_sectsalarycoin:decode(is)
	is:popString()
	self.sectsalarycoin = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_sectsalarycoin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectsalarycoin)
	os:pushNumber(self.reason)
end


-- 通知客户端增加八卦能量
i3k_sbean.role_add_eightdiagramenergy = i3k_class("role_add_eightdiagramenergy")
function i3k_sbean.role_add_eightdiagramenergy:ctor()
	self._pname_ = "role_add_eightdiagramenergy"
	--self.eightdiagramenergy:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_eightdiagramenergy:clone()
	return clone(self)
end

function i3k_sbean.role_add_eightdiagramenergy:decode(is)
	is:popString()
	self.eightdiagramenergy = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_eightdiagramenergy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eightdiagramenergy)
	os:pushNumber(self.reason)
end


-- 通知客户端增加奇遇值
i3k_sbean.role_add_adventure = i3k_class("role_add_adventure")
function i3k_sbean.role_add_adventure:ctor()
	self._pname_ = "role_add_adventure"
	--self.adventure:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_adventure:clone()
	return clone(self)
end

function i3k_sbean.role_add_adventure:decode(is)
	is:popString()
	self.adventure = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_adventure:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.adventure)
	os:pushNumber(self.reason)
end


-- 通知客户端更新称号(endTime 0：删除称号， -1：增加永久称号， >0：增加时效称号)
i3k_sbean.role_title_update = i3k_class("role_title_update")
function i3k_sbean.role_title_update:ctor()
	self._pname_ = "role_title_update"
	--self.id:		int32	
	--self.endTime:		int32	
end

function i3k_sbean.role_title_update:clone()
	return clone(self)
end

function i3k_sbean.role_title_update:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.endTime = is:popNumber()
end

function i3k_sbean.role_title_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.endTime)
end


-- 血池自动使用协议
i3k_sbean.role_hppool_used = i3k_class("role_hppool_used")
function i3k_sbean.role_hppool_used:ctor()
	self._pname_ = "role_hppool_used"
	--self.useHp:		int32	
end

function i3k_sbean.role_hppool_used:clone()
	return clone(self)
end

function i3k_sbean.role_hppool_used:decode(is)
	is:popString()
	self.useHp = is:popNumber()
end

function i3k_sbean.role_hppool_used:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.useHp)
end


-- 通知客户端进行当天计数刷新（需要刷新 loginDays，每日计数清零如每日进入副本次数等）
i3k_sbean.role_day_refresh = i3k_class("role_day_refresh")
function i3k_sbean.role_day_refresh:ctor()
	self._pname_ = "role_day_refresh"
end

function i3k_sbean.role_day_refresh:decode(is)
	is:popString()
end

function i3k_sbean.role_day_refresh:encode(os)
	os:pushString(self._pname_)
end


-- 帮派光环更新协议
i3k_sbean.sect_aura_update = i3k_class("sect_aura_update")
function i3k_sbean.sect_aura_update:ctor()
	self._pname_ = "sect_aura_update"
	--self.id:		int32	
	--self.level:		int32	
end

function i3k_sbean.sect_aura_update:clone()
	return clone(self)
end

function i3k_sbean.sect_aura_update:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.sect_aura_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
end


-- 通知客户端角色宗门矿增加
i3k_sbean.role_add_ore = i3k_class("role_add_ore")
function i3k_sbean.role_add_ore:ctor()
	self._pname_ = "role_add_ore"
	--self.type:		int32	
	--self.value:		int32	
end

function i3k_sbean.role_add_ore:clone()
	return clone(self)
end

function i3k_sbean.role_add_ore:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.role_add_ore:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.value)
end


-- 通知客户端显示服务器角色战力值，用于调试
i3k_sbean.role_show_power = i3k_class("role_show_power")
function i3k_sbean.role_show_power:ctor()
	self._pname_ = "role_show_power"
	--self.power:		int32	
end

function i3k_sbean.role_show_power:clone()
	return clone(self)
end

function i3k_sbean.role_show_power:decode(is)
	is:popString()
	self.power = is:popNumber()
end

function i3k_sbean.role_show_power:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.power)
end


-- 通知客户端显示服务器偏移时间，用于调试
i3k_sbean.role_show_timeoffset = i3k_class("role_show_timeoffset")
function i3k_sbean.role_show_timeoffset:ctor()
	self._pname_ = "role_show_timeoffset"
	--self.now:		int32	
	--self.ofsetsecond:		int32	
end

function i3k_sbean.role_show_timeoffset:clone()
	return clone(self)
end

function i3k_sbean.role_show_timeoffset:decode(is)
	is:popString()
	self.now = is:popNumber()
	self.ofsetsecond = is:popNumber()
end

function i3k_sbean.role_show_timeoffset:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.now)
	os:pushNumber(self.ofsetsecond)
end


--[[
			打开二级功能界面测试红点通知
			第0位为是否有新邮件
			第1位为是否有新完成的日常任务
			第2位为是否有新完成的挑战任务
			第3位为福利小红点（不包括特权卡）
			第4位为是否有新的运营活动奖可以领取
			第5位为是否有竞技场积分奖励可以领取
			第6位为是否有首充奖励可以领取
			第7位为是否有在线奖励可以参与
			第8位为是否有在线奖励可以领取
			第9位为是否有团购活动（是否显示团购图标）
			第10位为是否有团购商品能购买（是否显示团购小红点）
			第11位为是否有限时商品能购买（是否显示限时特卖小红点）
			第12位为
			第13位为是否有约战NPC通知（是否显示约战NPC图标）
			第14位为
			第15位为是否有充值活动相关小红点
			第16位为是否有师徒相关小红点
			第17位为五绝秘藏相关小红点
			第19位为是否有连续使用道具活动小红点
			第20位为是否有周常任务红点
			第21位为是否有宠物求取红点
			第22位为是否占卜或是否领奖
			第23位为是否显示世界杯图标
			第24位为是否显示伙伴红点
			//
			第26位为姻缘成就红点
			第27位
			第28位为新转盘红点
 ]]
i3k_sbean.role_notice = i3k_class("role_notice")
function i3k_sbean.role_notice:ctor()
	self._pname_ = "role_notice"
	--self.notice:		int64	
end

function i3k_sbean.role_notice:clone()
	return clone(self)
end

function i3k_sbean.role_notice:decode(is)
	is:popString()
	self.notice = is:popNumber()
end

function i3k_sbean.role_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.notice)
end


-- 每日首次登陆：福利同步
i3k_sbean.day_first_login = i3k_class("day_first_login")
function i3k_sbean.day_first_login:ctor()
	self._pname_ = "day_first_login"
end

function i3k_sbean.day_first_login:decode(is)
	is:popString()
end

function i3k_sbean.day_first_login:encode(os)
	os:pushString(self._pname_)
end


--[[
			第0位为是否有新的调研奖励
			第1位为是否有新的封测巨献奖励
			第2位为是否有新的等级奖励
			第3位为是否有新的资料完善奖励
			第4位为是否有新的最后冲刺奖励
			第5位为是否有新的限时领奖奖励
			第6位为是否有新的强化比拼奖励
			第7位为是否有新的官方调研奖励
			isFirstLogin返回是否为本日第一次登陆，是则返回1，否则返回0
 ]]
i3k_sbean.role_betaactivity_notice = i3k_class("role_betaactivity_notice")
function i3k_sbean.role_betaactivity_notice:ctor()
	self._pname_ = "role_betaactivity_notice"
	--self.notice:		int32	
	--self.isFirstLogin:		int32	
	--self.showWebLink:		int32	
end

function i3k_sbean.role_betaactivity_notice:clone()
	return clone(self)
end

function i3k_sbean.role_betaactivity_notice:decode(is)
	is:popString()
	self.notice = is:popNumber()
	self.isFirstLogin = is:popNumber()
	self.showWebLink = is:popNumber()
end

function i3k_sbean.role_betaactivity_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.notice)
	os:pushNumber(self.isFirstLogin)
	os:pushNumber(self.showWebLink)
end


i3k_sbean.role_firstpay = i3k_class("role_firstpay")
function i3k_sbean.role_firstpay:ctor()
	self._pname_ = "role_firstpay"
	--self.finished:		int32	
end

function i3k_sbean.role_firstpay:clone()
	return clone(self)
end

function i3k_sbean.role_firstpay:decode(is)
	is:popString()
	self.finished = is:popNumber()
end

function i3k_sbean.role_firstpay:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.finished)
end


-- 通知客户端同步随从合修任务
i3k_sbean.role_new_pet_task = i3k_class("role_new_pet_task")
function i3k_sbean.role_new_pet_task:ctor()
	self._pname_ = "role_new_pet_task"
	--self.petid:		int32	
	--self.taskid:		int32	
end

function i3k_sbean.role_new_pet_task:clone()
	return clone(self)
end

function i3k_sbean.role_new_pet_task:decode(is)
	is:popString()
	self.petid = is:popNumber()
	self.taskid = is:popNumber()
end

function i3k_sbean.role_new_pet_task:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petid)
	os:pushNumber(self.taskid)
end


-- 通知秘境任务
i3k_sbean.role_secret_task = i3k_class("role_secret_task")
function i3k_sbean.role_secret_task:ctor()
	self._pname_ = "role_secret_task"
	--self.data:		DBSecretTaskData	
end

function i3k_sbean.role_secret_task:clone()
	return clone(self)
end

function i3k_sbean.role_secret_task:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBSecretTaskData)
end

function i3k_sbean.role_secret_task:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 同步帮派申请人数
i3k_sbean.sect_applications_number = i3k_class("sect_applications_number")
function i3k_sbean.sect_applications_number:ctor()
	self._pname_ = "sect_applications_number"
	--self.num:		int32	
end

function i3k_sbean.sect_applications_number:clone()
	return clone(self)
end

function i3k_sbean.sect_applications_number:decode(is)
	is:popString()
	self.num = is:popNumber()
end

function i3k_sbean.sect_applications_number:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.num)
end


-- 同步每日评论次数
i3k_sbean.messageboard_day_comment_time = i3k_class("messageboard_day_comment_time")
function i3k_sbean.messageboard_day_comment_time:ctor()
	self._pname_ = "messageboard_day_comment_time"
	--self.time:		int32	
end

function i3k_sbean.messageboard_day_comment_time:clone()
	return clone(self)
end

function i3k_sbean.messageboard_day_comment_time:decode(is)
	is:popString()
	self.time = is:popNumber()
end

function i3k_sbean.messageboard_day_comment_time:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.time)
end


-- 登录时同步buff药
i3k_sbean.role_buffdrugs = i3k_class("role_buffdrugs")
function i3k_sbean.role_buffdrugs:ctor()
	self._pname_ = "role_buffdrugs"
	--self.drugs:		vector[BuffDrug]	
	--self.extral:		vector[BuffDrug]	
end

function i3k_sbean.role_buffdrugs:clone()
	return clone(self)
end

function i3k_sbean.role_buffdrugs:decode(is)
	is:popString()
	self.drugs = is:popList(i3k_sbean.BuffDrug)
	self.extral = is:popList(i3k_sbean.BuffDrug)
end

function i3k_sbean.role_buffdrugs:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.drugs)
	os:pushList(self.extral)
end


-- 登录时同步表情包结束时间
i3k_sbean.role_iconpackages = i3k_class("role_iconpackages")
function i3k_sbean.role_iconpackages:ctor()
	self._pname_ = "role_iconpackages"
	--self.iconTimes:		map[int32, int32]	
end

function i3k_sbean.role_iconpackages:clone()
	return clone(self)
end

function i3k_sbean.role_iconpackages:decode(is)
	is:popString()
	self.iconTimes = is:popNumberNumberMap()
end

function i3k_sbean.role_iconpackages:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.iconTimes)
end


-- 登录时同步武魂信息
i3k_sbean.role_weaponsoul = i3k_class("role_weaponsoul")
function i3k_sbean.role_weaponsoul:ctor()
	self._pname_ = "role_weaponsoul"
	--self.weaponSoul:		DBWeaponSoul	
end

function i3k_sbean.role_weaponsoul:clone()
	return clone(self)
end

function i3k_sbean.role_weaponsoul:decode(is)
	is:popString()
	self.weaponSoul = is:pop(i3k_sbean.DBWeaponSoul)
end

function i3k_sbean.role_weaponsoul:encode(os)
	os:pushString(self._pname_)
	os:push(self.weaponSoul)
end


-- 发送聊天消息响应
i3k_sbean.msg_send_res = i3k_class("msg_send_res")
function i3k_sbean.msg_send_res:ctor()
	self._pname_ = "msg_send_res"
	--self.ok:		int32	
end

function i3k_sbean.msg_send_res:clone()
	return clone(self)
end

function i3k_sbean.msg_send_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.msg_send_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知玩家被禁言
i3k_sbean.role_chat_banned = i3k_class("role_chat_banned")
function i3k_sbean.role_chat_banned:ctor()
	self._pname_ = "role_chat_banned"
	--self.leftTime:		int32	
	--self.reason:		string	
end

function i3k_sbean.role_chat_banned:clone()
	return clone(self)
end

function i3k_sbean.role_chat_banned:decode(is)
	is:popString()
	self.leftTime = is:popNumber()
	self.reason = is:popString()
end

function i3k_sbean.role_chat_banned:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.leftTime)
	os:pushString(self.reason)
end


-- 同步玩家聊天房间
i3k_sbean.role_chat_room = i3k_class("role_chat_room")
function i3k_sbean.role_chat_room:ctor()
	self._pname_ = "role_chat_room"
	--self.roomID:		string	
end

function i3k_sbean.role_chat_room:clone()
	return clone(self)
end

function i3k_sbean.role_chat_room:decode(is)
	is:popString()
	self.roomID = is:popString()
end

function i3k_sbean.role_chat_room:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.roomID)
end


-- 进入大地图传送点响应
i3k_sbean.waypoint_enter_res = i3k_class("waypoint_enter_res")
function i3k_sbean.waypoint_enter_res:ctor()
	self._pname_ = "waypoint_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.waypoint_enter_res:clone()
	return clone(self)
end

function i3k_sbean.waypoint_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.waypoint_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 脱离卡死点
i3k_sbean.wrongpos_leave_res = i3k_class("wrongpos_leave_res")
function i3k_sbean.wrongpos_leave_res:ctor()
	self._pname_ = "wrongpos_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.wrongpos_leave_res:clone()
	return clone(self)
end

function i3k_sbean.wrongpos_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.wrongpos_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步世界地图分线状态(curLine: 从1开始)
i3k_sbean.worldline_sync_res = i3k_class("worldline_sync_res")
function i3k_sbean.worldline_sync_res:ctor()
	self._pname_ = "worldline_sync_res"
	--self.curLine:		int32	
	--self.count:		int32	
end

function i3k_sbean.worldline_sync_res:clone()
	return clone(self)
end

function i3k_sbean.worldline_sync_res:decode(is)
	is:popString()
	self.curLine = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.worldline_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curLine)
	os:pushNumber(self.count)
end


-- 切换当前地图分线
i3k_sbean.worldline_change_res = i3k_class("worldline_change_res")
function i3k_sbean.worldline_change_res:ctor()
	self._pname_ = "worldline_change_res"
	--self.ok:		int32	
end

function i3k_sbean.worldline_change_res:clone()
	return clone(self)
end

function i3k_sbean.worldline_change_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.worldline_change_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 查询机器人信息响应
i3k_sbean.query_robot_res = i3k_class("query_robot_res")
function i3k_sbean.query_robot_res:ctor()
	self._pname_ = "query_robot_res"
	--self.brief:		RoleBrief	
end

function i3k_sbean.query_robot_res:clone()
	return clone(self)
end

function i3k_sbean.query_robot_res:decode(is)
	is:popString()
	self.brief = is:pop(i3k_sbean.RoleBrief)
end

function i3k_sbean.query_robot_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.brief)
end


-- 查询玩家信息响应
i3k_sbean.query_rolebrief_res = i3k_class("query_rolebrief_res")
function i3k_sbean.query_rolebrief_res:ctor()
	self._pname_ = "query_rolebrief_res"
	--self.brief:		RoleBrief	
	--self.teamID:		int32	
end

function i3k_sbean.query_rolebrief_res:clone()
	return clone(self)
end

function i3k_sbean.query_rolebrief_res:decode(is)
	is:popString()
	self.brief = is:pop(i3k_sbean.RoleBrief)
	self.teamID = is:popNumber()
end

function i3k_sbean.query_rolebrief_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.brief)
	os:pushNumber(self.teamID)
end


-- 获取玩家的特性信息
i3k_sbean.query_rolefeature_res = i3k_class("query_rolefeature_res")
function i3k_sbean.query_rolefeature_res:ctor()
	self._pname_ = "query_rolefeature_res"
	--self.feature:		RoleFeature	
end

function i3k_sbean.query_rolefeature_res:clone()
	return clone(self)
end

function i3k_sbean.query_rolefeature_res:decode(is)
	is:popString()
	self.feature = is:pop(i3k_sbean.RoleFeature)
end

function i3k_sbean.query_rolefeature_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.feature)
end


-- 获取玩家所有已获得的佣兵信息
i3k_sbean.query_petoverviews_res = i3k_class("query_petoverviews_res")
function i3k_sbean.query_petoverviews_res:ctor()
	self._pname_ = "query_petoverviews_res"
	--self.pets:		vector[PetOverview]	
	--self.equipParts:		map[int32, DBPetEquipPart]	
end

function i3k_sbean.query_petoverviews_res:clone()
	return clone(self)
end

function i3k_sbean.query_petoverviews_res:decode(is)
	is:popString()
	self.pets = is:popList(i3k_sbean.PetOverview)
	self.equipParts = is:popNumberMap(i3k_sbean.DBPetEquipPart)
end

function i3k_sbean.query_petoverviews_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.pets)
	os:pushNumberMap(self.equipParts)
end


-- 获取玩家所有已获得的神兵信息
i3k_sbean.query_weaponoverviews_res = i3k_class("query_weaponoverviews_res")
function i3k_sbean.query_weaponoverviews_res:ctor()
	self._pname_ = "query_weaponoverviews_res"
	--self.weapons:		vector[WeaponOverview]	
	--self.spirits:		map[int32, DBWeaponSpirit]	
end

function i3k_sbean.query_weaponoverviews_res:clone()
	return clone(self)
end

function i3k_sbean.query_weaponoverviews_res:decode(is)
	is:popString()
	self.weapons = is:popList(i3k_sbean.WeaponOverview)
	self.spirits = is:popNumberMap(i3k_sbean.DBWeaponSpirit)
end

function i3k_sbean.query_weaponoverviews_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.weapons)
	os:pushNumberMap(self.spirits)
end


-- 获取玩家所有已获得的暗器信息
i3k_sbean.query_hideWeaponoverviews_res = i3k_class("query_hideWeaponoverviews_res")
function i3k_sbean.query_hideWeaponoverviews_res:ctor()
	self._pname_ = "query_hideWeaponoverviews_res"
	--self.weapons:		vector[HideWeaponOverview]	
end

function i3k_sbean.query_hideWeaponoverviews_res:clone()
	return clone(self)
end

function i3k_sbean.query_hideWeaponoverviews_res:decode(is)
	is:popString()
	self.weapons = is:popList(i3k_sbean.HideWeaponOverview)
end

function i3k_sbean.query_hideWeaponoverviews_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.weapons)
end


-- 获取玩家所有坐骑信息
i3k_sbean.query_horseoverviews_res = i3k_class("query_horseoverviews_res")
function i3k_sbean.query_horseoverviews_res:ctor()
	self._pname_ = "query_horseoverviews_res"
	--self.horses:		vector[HorseOverview]	
	--self.showIDS:		set[int32]	
	--self.masters:		map[int32, HorseMaster]	
	--self.spirit:		HorseSpirit	
	--self.roleOverview:		RoleOverview	
	--self.steedEquip:		DBSteedEquip	
end

function i3k_sbean.query_horseoverviews_res:clone()
	return clone(self)
end

function i3k_sbean.query_horseoverviews_res:decode(is)
	is:popString()
	self.horses = is:popList(i3k_sbean.HorseOverview)
	self.showIDS = is:popNumberSet()
	self.masters = is:popNumberMap(i3k_sbean.HorseMaster)
	self.spirit = is:pop(i3k_sbean.HorseSpirit)
	self.roleOverview = is:pop(i3k_sbean.RoleOverview)
	self.steedEquip = is:pop(i3k_sbean.DBSteedEquip)
end

function i3k_sbean.query_horseoverviews_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.horses)
	os:pushNumberSet(self.showIDS)
	os:pushNumberMap(self.masters)
	os:push(self.spirit)
	os:push(self.roleOverview)
	os:push(self.steedEquip)
end


-- 获取玩家单个坐骑信息
i3k_sbean.query_single_horseoverview_res = i3k_class("query_single_horseoverview_res")
function i3k_sbean.query_single_horseoverview_res:ctor()
	self._pname_ = "query_single_horseoverview_res"
	--self.horses:		HorseOverview	
end

function i3k_sbean.query_single_horseoverview_res:clone()
	return clone(self)
end

function i3k_sbean.query_single_horseoverview_res:decode(is)
	is:popString()
	self.horses = is:pop(i3k_sbean.HorseOverview)
end

function i3k_sbean.query_single_horseoverview_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.horses)
end


-- 获取玩家内甲信息
i3k_sbean.query_armoroverviews_res = i3k_class("query_armoroverviews_res")
function i3k_sbean.query_armoroverviews_res:ctor()
	self._pname_ = "query_armoroverviews_res"
	--self.armor:		vector[ArmorOverview]	
	--self.feature:		RoleFeature	
end

function i3k_sbean.query_armoroverviews_res:clone()
	return clone(self)
end

function i3k_sbean.query_armoroverviews_res:decode(is)
	is:popString()
	self.armor = is:popList(i3k_sbean.ArmorOverview)
	self.feature = is:pop(i3k_sbean.RoleFeature)
end

function i3k_sbean.query_armoroverviews_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.armor)
	os:push(self.feature)
end


-- 获取玩家武魂信息
i3k_sbean.query_weaponsouloverview_res = i3k_class("query_weaponsouloverview_res")
function i3k_sbean.query_weaponsouloverview_res:ctor()
	self._pname_ = "query_weaponsouloverview_res"
	--self.weaponSoul:		WeaponSoulOverview	
end

function i3k_sbean.query_weaponsouloverview_res:clone()
	return clone(self)
end

function i3k_sbean.query_weaponsouloverview_res:decode(is)
	is:popString()
	self.weaponSoul = is:pop(i3k_sbean.WeaponSoulOverview)
end

function i3k_sbean.query_weaponsouloverview_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.weaponSoul)
end


-- 原地复活响应
i3k_sbean.role_revive_insitu_res = i3k_class("role_revive_insitu_res")
function i3k_sbean.role_revive_insitu_res:ctor()
	self._pname_ = "role_revive_insitu_res"
	--self.ok:		int32	
end

function i3k_sbean.role_revive_insitu_res:clone()
	return clone(self)
end

function i3k_sbean.role_revive_insitu_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_revive_insitu_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- cpr复活响应
i3k_sbean.role_revive_cpr_res = i3k_class("role_revive_cpr_res")
function i3k_sbean.role_revive_cpr_res:ctor()
	self._pname_ = "role_revive_cpr_res"
	--self.ok:		int32	
end

function i3k_sbean.role_revive_cpr_res:clone()
	return clone(self)
end

function i3k_sbean.role_revive_cpr_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_revive_cpr_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 其他方式复活响应
i3k_sbean.role_revive_other_res = i3k_class("role_revive_other_res")
function i3k_sbean.role_revive_other_res:ctor()
	self._pname_ = "role_revive_other_res"
	--self.ok:		int32	
end

function i3k_sbean.role_revive_other_res:clone()
	return clone(self)
end

function i3k_sbean.role_revive_other_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_revive_other_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 安全点复活
i3k_sbean.role_revive_safe_res = i3k_class("role_revive_safe_res")
function i3k_sbean.role_revive_safe_res:ctor()
	self._pname_ = "role_revive_safe_res"
	--self.ok:		int32	
end

function i3k_sbean.role_revive_safe_res:clone()
	return clone(self)
end

function i3k_sbean.role_revive_safe_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_revive_safe_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派驻地安全点复活
i3k_sbean.role_sect_zone_revive_safe_res = i3k_class("role_sect_zone_revive_safe_res")
function i3k_sbean.role_sect_zone_revive_safe_res:ctor()
	self._pname_ = "role_sect_zone_revive_safe_res"
	--self.ok:		int32	
end

function i3k_sbean.role_sect_zone_revive_safe_res:clone()
	return clone(self)
end

function i3k_sbean.role_sect_zone_revive_safe_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_sect_zone_revive_safe_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转职
i3k_sbean.role_transform_res = i3k_class("role_transform_res")
function i3k_sbean.role_transform_res:ctor()
	self._pname_ = "role_transform_res"
	--self.ok:		int32	
end

function i3k_sbean.role_transform_res:clone()
	return clone(self)
end

function i3k_sbean.role_transform_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_transform_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 签到同步
i3k_sbean.checkin_sync_res = i3k_class("checkin_sync_res")
function i3k_sbean.checkin_sync_res:ctor()
	self._pname_ = "checkin_sync_res"
	--self.info:		CheckInInfo	
	--self.additional:		map[int32, int32]	
end

function i3k_sbean.checkin_sync_res:clone()
	return clone(self)
end

function i3k_sbean.checkin_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.CheckInInfo)
	self.additional = is:popNumberNumberMap()
end

function i3k_sbean.checkin_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumberNumberMap(self.additional)
end


-- 签到领奖
i3k_sbean.checkin_take_res = i3k_class("checkin_take_res")
function i3k_sbean.checkin_take_res:ctor()
	self._pname_ = "checkin_take_res"
	--self.ok:		int32	
end

function i3k_sbean.checkin_take_res:clone()
	return clone(self)
end

function i3k_sbean.checkin_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.checkin_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 签到领取累计额外奖励
i3k_sbean.checkin_take_additional_res = i3k_class("checkin_take_additional_res")
function i3k_sbean.checkin_take_additional_res:ctor()
	self._pname_ = "checkin_take_additional_res"
	--self.ok:		int32	
end

function i3k_sbean.checkin_take_additional_res:clone()
	return clone(self)
end

function i3k_sbean.checkin_take_additional_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.checkin_take_additional_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 商城同步
i3k_sbean.mall_sync_res = i3k_class("mall_sync_res")
function i3k_sbean.mall_sync_res:ctor()
	self._pname_ = "mall_sync_res"
	--self.info:		RoleMallInfo	
end

function i3k_sbean.mall_sync_res:clone()
	return clone(self)
end

function i3k_sbean.mall_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.RoleMallInfo)
end

function i3k_sbean.mall_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 商城购买
i3k_sbean.mall_buy_res = i3k_class("mall_buy_res")
function i3k_sbean.mall_buy_res:ctor()
	self._pname_ = "mall_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.mall_buy_res:clone()
	return clone(self)
end

function i3k_sbean.mall_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mall_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 福利同步
i3k_sbean.benefit_sync_res = i3k_class("benefit_sync_res")
function i3k_sbean.benefit_sync_res:ctor()
	self._pname_ = "benefit_sync_res"
	--self.checkinGift:		int32	
	--self.dailyOnlineGift:		int32	
	--self.dailyVitReward:		int32	
	--self.activities:		vector[ActivityInfo]	
	--self.bindPhoneReward:		int32	
end

function i3k_sbean.benefit_sync_res:clone()
	return clone(self)
end

function i3k_sbean.benefit_sync_res:decode(is)
	is:popString()
	self.checkinGift = is:popNumber()
	self.dailyOnlineGift = is:popNumber()
	self.dailyVitReward = is:popNumber()
	self.activities = is:popList(i3k_sbean.ActivityInfo)
	self.bindPhoneReward = is:popNumber()
end

function i3k_sbean.benefit_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.checkinGift)
	os:pushNumber(self.dailyOnlineGift)
	os:pushNumber(self.dailyVitReward)
	os:pushList(self.activities)
	os:pushNumber(self.bindPhoneReward)
end


-- 充值相关活动同步
i3k_sbean.payactivity_sync_res = i3k_class("payactivity_sync_res")
function i3k_sbean.payactivity_sync_res:ctor()
	self._pname_ = "payactivity_sync_res"
	--self.activities:		vector[ActivityInfo]	
end

function i3k_sbean.payactivity_sync_res:clone()
	return clone(self)
end

function i3k_sbean.payactivity_sync_res:decode(is)
	is:popString()
	self.activities = is:popList(i3k_sbean.ActivityInfo)
end

function i3k_sbean.payactivity_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.activities)
end


-- 同步首次充值送礼活动信息
i3k_sbean.firstpaygift_sync_res = i3k_class("firstpaygift_sync_res")
function i3k_sbean.firstpaygift_sync_res:ctor()
	self._pname_ = "firstpaygift_sync_res"
	--self.ok:		int32	
	--self.info:		RoleFirstPayGiftInfo	
end

function i3k_sbean.firstpaygift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.firstpaygift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleFirstPayGiftInfo)
end

function i3k_sbean.firstpaygift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取首次充值送礼活动奖励
i3k_sbean.firstpaygift_take_res = i3k_class("firstpaygift_take_res")
function i3k_sbean.firstpaygift_take_res:ctor()
	self._pname_ = "firstpaygift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.firstpaygift_take_res:clone()
	return clone(self)
end

function i3k_sbean.firstpaygift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.firstpaygift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步每日充值送礼活动信息
i3k_sbean.dailypaygift_sync_res = i3k_class("dailypaygift_sync_res")
function i3k_sbean.dailypaygift_sync_res:ctor()
	self._pname_ = "dailypaygift_sync_res"
	--self.ok:		int32	
	--self.info:		RoleDailyPayGiftInfo	
end

function i3k_sbean.dailypaygift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.dailypaygift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleDailyPayGiftInfo)
end

function i3k_sbean.dailypaygift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取每日充值送礼活动奖励
i3k_sbean.dailypaygift_take_res = i3k_class("dailypaygift_take_res")
function i3k_sbean.dailypaygift_take_res:ctor()
	self._pname_ = "dailypaygift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.dailypaygift_take_res:clone()
	return clone(self)
end

function i3k_sbean.dailypaygift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dailypaygift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步持续充值送礼活动信息
i3k_sbean.lastpaygift_sync_res = i3k_class("lastpaygift_sync_res")
function i3k_sbean.lastpaygift_sync_res:ctor()
	self._pname_ = "lastpaygift_sync_res"
	--self.ok:		int32	
	--self.info:		RoleLastPayGiftInfo	
end

function i3k_sbean.lastpaygift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.lastpaygift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleLastPayGiftInfo)
end

function i3k_sbean.lastpaygift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取持续充值送礼活动奖励
i3k_sbean.lastpaygift_take_res = i3k_class("lastpaygift_take_res")
function i3k_sbean.lastpaygift_take_res:ctor()
	self._pname_ = "lastpaygift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.lastpaygift_take_res:clone()
	return clone(self)
end

function i3k_sbean.lastpaygift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.lastpaygift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步活动挑战活动信息
i3k_sbean.activitychallengegift_sync_res = i3k_class("activitychallengegift_sync_res")
function i3k_sbean.activitychallengegift_sync_res:ctor()
	self._pname_ = "activitychallengegift_sync_res"
	--self.ok:		int32	
	--self.info:		RoleActivityChallengeGiftInfo	
end

function i3k_sbean.activitychallengegift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.activitychallengegift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleActivityChallengeGiftInfo)
end

function i3k_sbean.activitychallengegift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取活动挑战活动奖励
i3k_sbean.activitychallengegift_take_res = i3k_class("activitychallengegift_take_res")
function i3k_sbean.activitychallengegift_take_res:ctor()
	self._pname_ = "activitychallengegift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.activitychallengegift_take_res:clone()
	return clone(self)
end

function i3k_sbean.activitychallengegift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.activitychallengegift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步升级特惠活动信息
i3k_sbean.upgradepurchase_sync_res = i3k_class("upgradepurchase_sync_res")
function i3k_sbean.upgradepurchase_sync_res:ctor()
	self._pname_ = "upgradepurchase_sync_res"
	--self.ok:		int32	
	--self.info:		RoleUpgradePurchaseInfo	
end

function i3k_sbean.upgradepurchase_sync_res:clone()
	return clone(self)
end

function i3k_sbean.upgradepurchase_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleUpgradePurchaseInfo)
end

function i3k_sbean.upgradepurchase_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 购买升级特惠活动奖励
i3k_sbean.upgradepurchase_buy_res = i3k_class("upgradepurchase_buy_res")
function i3k_sbean.upgradepurchase_buy_res:ctor()
	self._pname_ = "upgradepurchase_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.upgradepurchase_buy_res:clone()
	return clone(self)
end

function i3k_sbean.upgradepurchase_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.upgradepurchase_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步活跃领奖活动信息
i3k_sbean.schdulegift_sync_res = i3k_class("schdulegift_sync_res")
function i3k_sbean.schdulegift_sync_res:ctor()
	self._pname_ = "schdulegift_sync_res"
	--self.ok:		int32	
	--self.info:		RoleSchduleGiftInfo	
end

function i3k_sbean.schdulegift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.schdulegift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleSchduleGiftInfo)
end

function i3k_sbean.schdulegift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取活跃领奖活动奖励
i3k_sbean.schdulegift_take_res = i3k_class("schdulegift_take_res")
function i3k_sbean.schdulegift_take_res:ctor()
	self._pname_ = "schdulegift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.schdulegift_take_res:clone()
	return clone(self)
end

function i3k_sbean.schdulegift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.schdulegift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步充值送礼活动信息
i3k_sbean.paygift_sync_res = i3k_class("paygift_sync_res")
function i3k_sbean.paygift_sync_res:ctor()
	self._pname_ = "paygift_sync_res"
	--self.ok:		int32	
	--self.info:		RolePayGiftInfo	
end

function i3k_sbean.paygift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.paygift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RolePayGiftInfo)
end

function i3k_sbean.paygift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取充值送礼活动奖励
i3k_sbean.paygift_take_res = i3k_class("paygift_take_res")
function i3k_sbean.paygift_take_res:ctor()
	self._pname_ = "paygift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.paygift_take_res:clone()
	return clone(self)
end

function i3k_sbean.paygift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.paygift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步充值折扣礼包活动信息
i3k_sbean.paydiscountgift_sync_res = i3k_class("paydiscountgift_sync_res")
function i3k_sbean.paydiscountgift_sync_res:ctor()
	self._pname_ = "paydiscountgift_sync_res"
	--self.ok:		int32	
	--self.info:		RolePayDiscountGiftInfo	
end

function i3k_sbean.paydiscountgift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.paydiscountgift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RolePayDiscountGiftInfo)
end

function i3k_sbean.paydiscountgift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取充值折扣礼包活动奖励
i3k_sbean.paydiscountgift_take_res = i3k_class("paydiscountgift_take_res")
function i3k_sbean.paydiscountgift_take_res:ctor()
	self._pname_ = "paydiscountgift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.paydiscountgift_take_res:clone()
	return clone(self)
end

function i3k_sbean.paydiscountgift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.paydiscountgift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步消费送礼活动信息
i3k_sbean.consumegift_sync_res = i3k_class("consumegift_sync_res")
function i3k_sbean.consumegift_sync_res:ctor()
	self._pname_ = "consumegift_sync_res"
	--self.ok:		int32	
	--self.info:		RoleConsumeGiftInfo	
end

function i3k_sbean.consumegift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.consumegift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleConsumeGiftInfo)
end

function i3k_sbean.consumegift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取消费送礼活动奖励
i3k_sbean.consumegift_take_res = i3k_class("consumegift_take_res")
function i3k_sbean.consumegift_take_res:ctor()
	self._pname_ = "consumegift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.consumegift_take_res:clone()
	return clone(self)
end

function i3k_sbean.consumegift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.consumegift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步冲级送礼活动信息
i3k_sbean.upgradegift_sync_res = i3k_class("upgradegift_sync_res")
function i3k_sbean.upgradegift_sync_res:ctor()
	self._pname_ = "upgradegift_sync_res"
	--self.ok:		int32	
	--self.info:		RoleUpgradeGiftInfo	
end

function i3k_sbean.upgradegift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.upgradegift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleUpgradeGiftInfo)
end

function i3k_sbean.upgradegift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取冲级送礼活动奖励
i3k_sbean.upgradegift_take_res = i3k_class("upgradegift_take_res")
function i3k_sbean.upgradegift_take_res:ctor()
	self._pname_ = "upgradegift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.upgradegift_take_res:clone()
	return clone(self)
end

function i3k_sbean.upgradegift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.upgradegift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 红包拿来活动信息
i3k_sbean.redpack_sync_res = i3k_class("redpack_sync_res")
function i3k_sbean.redpack_sync_res:ctor()
	self._pname_ = "redpack_sync_res"
	--self.ok:		int32	
	--self.info:		RoleRedPackInfo	
end

function i3k_sbean.redpack_sync_res:clone()
	return clone(self)
end

function i3k_sbean.redpack_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleRedPackInfo)
end

function i3k_sbean.redpack_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 红包拿来活动奖励
i3k_sbean.redpack_take_res = i3k_class("redpack_take_res")
function i3k_sbean.redpack_take_res:ctor()
	self._pname_ = "redpack_take_res"
	--self.ok:		int32	
end

function i3k_sbean.redpack_take_res:clone()
	return clone(self)
end

function i3k_sbean.redpack_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.redpack_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 充值返还活动信息
i3k_sbean.payrebate_sync_res = i3k_class("payrebate_sync_res")
function i3k_sbean.payrebate_sync_res:ctor()
	self._pname_ = "payrebate_sync_res"
	--self.ok:		int32	
	--self.info:		RolePayRebateInfo	
end

function i3k_sbean.payrebate_sync_res:clone()
	return clone(self)
end

function i3k_sbean.payrebate_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RolePayRebateInfo)
end

function i3k_sbean.payrebate_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 充值返还活动奖励
i3k_sbean.payrebate_take_res = i3k_class("payrebate_take_res")
function i3k_sbean.payrebate_take_res:ctor()
	self._pname_ = "payrebate_take_res"
	--self.ok:		int32	
end

function i3k_sbean.payrebate_take_res:clone()
	return clone(self)
end

function i3k_sbean.payrebate_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.payrebate_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步投资基金活动信息
i3k_sbean.investmentfund_sync_res = i3k_class("investmentfund_sync_res")
function i3k_sbean.investmentfund_sync_res:ctor()
	self._pname_ = "investmentfund_sync_res"
	--self.ok:		int32	
	--self.info:		RoleInvestmentFundInfo	
end

function i3k_sbean.investmentfund_sync_res:clone()
	return clone(self)
end

function i3k_sbean.investmentfund_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleInvestmentFundInfo)
end

function i3k_sbean.investmentfund_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 买投资基金
i3k_sbean.investmentfund_buy_res = i3k_class("investmentfund_buy_res")
function i3k_sbean.investmentfund_buy_res:ctor()
	self._pname_ = "investmentfund_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.investmentfund_buy_res:clone()
	return clone(self)
end

function i3k_sbean.investmentfund_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.investmentfund_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取投资基金活动奖励
i3k_sbean.investmentfund_take_res = i3k_class("investmentfund_take_res")
function i3k_sbean.investmentfund_take_res:ctor()
	self._pname_ = "investmentfund_take_res"
	--self.ok:		int32	
end

function i3k_sbean.investmentfund_take_res:clone()
	return clone(self)
end

function i3k_sbean.investmentfund_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.investmentfund_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步成长基金活动信息
i3k_sbean.growthfund_sync_res = i3k_class("growthfund_sync_res")
function i3k_sbean.growthfund_sync_res:ctor()
	self._pname_ = "growthfund_sync_res"
	--self.ok:		int32	
	--self.info:		RoleGrowthFundInfo	
end

function i3k_sbean.growthfund_sync_res:clone()
	return clone(self)
end

function i3k_sbean.growthfund_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleGrowthFundInfo)
end

function i3k_sbean.growthfund_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 买成长基金
i3k_sbean.growthfund_buy_res = i3k_class("growthfund_buy_res")
function i3k_sbean.growthfund_buy_res:ctor()
	self._pname_ = "growthfund_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.growthfund_buy_res:clone()
	return clone(self)
end

function i3k_sbean.growthfund_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.growthfund_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取成长基金活动奖励
i3k_sbean.growthfund_take_res = i3k_class("growthfund_take_res")
function i3k_sbean.growthfund_take_res:ctor()
	self._pname_ = "growthfund_take_res"
	--self.ok:		int32	
end

function i3k_sbean.growthfund_take_res:clone()
	return clone(self)
end

function i3k_sbean.growthfund_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.growthfund_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步双倍掉落副本活动信息
i3k_sbean.doubledrop_sync_res = i3k_class("doubledrop_sync_res")
function i3k_sbean.doubledrop_sync_res:ctor()
	self._pname_ = "doubledrop_sync_res"
	--self.ok:		int32	
	--self.info:		DoubleDropInfo	
end

function i3k_sbean.doubledrop_sync_res:clone()
	return clone(self)
end

function i3k_sbean.doubledrop_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.DoubleDropInfo)
end

function i3k_sbean.doubledrop_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 同步额外掉落副本活动信息
i3k_sbean.extradrop_sync_res = i3k_class("extradrop_sync_res")
function i3k_sbean.extradrop_sync_res:ctor()
	self._pname_ = "extradrop_sync_res"
	--self.ok:		int32	
	--self.info:		ExtraDropInfo	
end

function i3k_sbean.extradrop_sync_res:clone()
	return clone(self)
end

function i3k_sbean.extradrop_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.ExtraDropInfo)
end

function i3k_sbean.extradrop_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 同步兑换礼品活动信息
i3k_sbean.exchangegift_sync_res = i3k_class("exchangegift_sync_res")
function i3k_sbean.exchangegift_sync_res:ctor()
	self._pname_ = "exchangegift_sync_res"
	--self.ok:		int32	
	--self.info:		ExchangeGiftInfo	
end

function i3k_sbean.exchangegift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.exchangegift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.ExchangeGiftInfo)
end

function i3k_sbean.exchangegift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取兑换礼品
i3k_sbean.exchangegift_take_res = i3k_class("exchangegift_take_res")
function i3k_sbean.exchangegift_take_res:ctor()
	self._pname_ = "exchangegift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.exchangegift_take_res:clone()
	return clone(self)
end

function i3k_sbean.exchangegift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.exchangegift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步累积登录送礼活动信息
i3k_sbean.logingift_sync_res = i3k_class("logingift_sync_res")
function i3k_sbean.logingift_sync_res:ctor()
	self._pname_ = "logingift_sync_res"
	--self.ok:		int32	
	--self.info:		RoleLoginGiftInfo	
end

function i3k_sbean.logingift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.logingift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleLoginGiftInfo)
end

function i3k_sbean.logingift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取累积登录送礼活动奖励
i3k_sbean.logingift_take_res = i3k_class("logingift_take_res")
function i3k_sbean.logingift_take_res:ctor()
	self._pname_ = "logingift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.logingift_take_res:clone()
	return clone(self)
end

function i3k_sbean.logingift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.logingift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步礼包兑换活动信息
i3k_sbean.giftpackage_sync_res = i3k_class("giftpackage_sync_res")
function i3k_sbean.giftpackage_sync_res:ctor()
	self._pname_ = "giftpackage_sync_res"
	--self.ok:		int32	
	--self.info:		GiftPackageInfo	
end

function i3k_sbean.giftpackage_sync_res:clone()
	return clone(self)
end

function i3k_sbean.giftpackage_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.GiftPackageInfo)
end

function i3k_sbean.giftpackage_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 兑换礼包
i3k_sbean.giftpackage_take_res = i3k_class("giftpackage_take_res")
function i3k_sbean.giftpackage_take_res:ctor()
	self._pname_ = "giftpackage_take_res"
	--self.ok:		int32	
	--self.pack:		Pack	
end

function i3k_sbean.giftpackage_take_res:clone()
	return clone(self)
end

function i3k_sbean.giftpackage_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.pack = is:pop(i3k_sbean.Pack)
end

function i3k_sbean.giftpackage_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.pack)
end


-- 公测返现兑换查询结果
i3k_sbean.pbtcashback_sync_res = i3k_class("pbtcashback_sync_res")
function i3k_sbean.pbtcashback_sync_res:ctor()
	self._pname_ = "pbtcashback_sync_res"
	--self.ok:		int32	
	--self.result:		int32	
end

function i3k_sbean.pbtcashback_sync_res:clone()
	return clone(self)
end

function i3k_sbean.pbtcashback_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.result = is:popNumber()
end

function i3k_sbean.pbtcashback_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.result)
end


-- 公测返现兑换
i3k_sbean.pbtcashback_take_res = i3k_class("pbtcashback_take_res")
function i3k_sbean.pbtcashback_take_res:ctor()
	self._pname_ = "pbtcashback_take_res"
	--self.ok:		int32	
	--self.addtion:		int32	
end

function i3k_sbean.pbtcashback_take_res:clone()
	return clone(self)
end

function i3k_sbean.pbtcashback_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.addtion = is:popNumber()
end

function i3k_sbean.pbtcashback_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.addtion)
end


-- 充值排行活动同步
i3k_sbean.payrank_sync_res = i3k_class("payrank_sync_res")
function i3k_sbean.payrank_sync_res:ctor()
	self._pname_ = "payrank_sync_res"
	--self.ok:		int32	
	--self.info:		RolePayRankInfo	
end

function i3k_sbean.payrank_sync_res:clone()
	return clone(self)
end

function i3k_sbean.payrank_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RolePayRankInfo)
end

function i3k_sbean.payrank_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 消费排行活动同步
i3k_sbean.consumerank_sync_res = i3k_class("consumerank_sync_res")
function i3k_sbean.consumerank_sync_res:ctor()
	self._pname_ = "consumerank_sync_res"
	--self.ok:		int32	
	--self.info:		RoleConsumeRankInfo	
end

function i3k_sbean.consumerank_sync_res:clone()
	return clone(self)
end

function i3k_sbean.consumerank_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleConsumeRankInfo)
end

function i3k_sbean.consumerank_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 新登陆活动同步
i3k_sbean.luckygift_sync_res = i3k_class("luckygift_sync_res")
function i3k_sbean.luckygift_sync_res:ctor()
	self._pname_ = "luckygift_sync_res"
	--self.ok:		int32	
	--self.info:		RoleLuckyGiftInfo	
end

function i3k_sbean.luckygift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.luckygift_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleLuckyGiftInfo)
end

function i3k_sbean.luckygift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 新登陆活动领奖
i3k_sbean.luckygift_take_res = i3k_class("luckygift_take_res")
function i3k_sbean.luckygift_take_res:ctor()
	self._pname_ = "luckygift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.luckygift_take_res:clone()
	return clone(self)
end

function i3k_sbean.luckygift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.luckygift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 团购活动同步
i3k_sbean.groupbuy_sync_res = i3k_class("groupbuy_sync_res")
function i3k_sbean.groupbuy_sync_res:ctor()
	self._pname_ = "groupbuy_sync_res"
	--self.ok:		int32	
	--self.info:		RoleGroupBuyInfo	
end

function i3k_sbean.groupbuy_sync_res:clone()
	return clone(self)
end

function i3k_sbean.groupbuy_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleGroupBuyInfo)
end

function i3k_sbean.groupbuy_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 购买团购商品
i3k_sbean.groupbuy_buy_res = i3k_class("groupbuy_buy_res")
function i3k_sbean.groupbuy_buy_res:ctor()
	self._pname_ = "groupbuy_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.groupbuy_buy_res:clone()
	return clone(self)
end

function i3k_sbean.groupbuy_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.groupbuy_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 拼多多活动同步
i3k_sbean.morerolediscount_sync_res = i3k_class("morerolediscount_sync_res")
function i3k_sbean.morerolediscount_sync_res:ctor()
	self._pname_ = "morerolediscount_sync_res"
	--self.ok:		int32	
	--self.info:		MoreRoleDiscountInfo	
end

function i3k_sbean.morerolediscount_sync_res:clone()
	return clone(self)
end

function i3k_sbean.morerolediscount_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.MoreRoleDiscountInfo)
end

function i3k_sbean.morerolediscount_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 参与拼多多商品团购
i3k_sbean.morerolediscount_join_res = i3k_class("morerolediscount_join_res")
function i3k_sbean.morerolediscount_join_res:ctor()
	self._pname_ = "morerolediscount_join_res"
	--self.ok:		int32	
end

function i3k_sbean.morerolediscount_join_res:clone()
	return clone(self)
end

function i3k_sbean.morerolediscount_join_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.morerolediscount_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 购买拼多多商品
i3k_sbean.morerolediscount_buy_res = i3k_class("morerolediscount_buy_res")
function i3k_sbean.morerolediscount_buy_res:ctor()
	self._pname_ = "morerolediscount_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.morerolediscount_buy_res:clone()
	return clone(self)
end

function i3k_sbean.morerolediscount_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.morerolediscount_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 团购活动同步
i3k_sbean.flashsale_sync_res = i3k_class("flashsale_sync_res")
function i3k_sbean.flashsale_sync_res:ctor()
	self._pname_ = "flashsale_sync_res"
	--self.ok:		int32	
	--self.infos:		RoleFlashSaleInfo	
end

function i3k_sbean.flashsale_sync_res:clone()
	return clone(self)
end

function i3k_sbean.flashsale_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.infos = is:pop(i3k_sbean.RoleFlashSaleInfo)
end

function i3k_sbean.flashsale_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.infos)
end


-- 购买团购商品
i3k_sbean.flashsale_buy_res = i3k_class("flashsale_buy_res")
function i3k_sbean.flashsale_buy_res:ctor()
	self._pname_ = "flashsale_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.flashsale_buy_res:clone()
	return clone(self)
end

function i3k_sbean.flashsale_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.flashsale_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 打开宝箱
i3k_sbean.falshsale_open_box_res = i3k_class("falshsale_open_box_res")
function i3k_sbean.falshsale_open_box_res:ctor()
	self._pname_ = "falshsale_open_box_res"
	--self.ok:		int32	
end

function i3k_sbean.falshsale_open_box_res:clone()
	return clone(self)
end

function i3k_sbean.falshsale_open_box_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.falshsale_open_box_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转盘同步
i3k_sbean.luckyroll_sync_res = i3k_class("luckyroll_sync_res")
function i3k_sbean.luckyroll_sync_res:ctor()
	self._pname_ = "luckyroll_sync_res"
	--self.ok:		int32	
	--self.infos:		LuckyRollInfo	
end

function i3k_sbean.luckyroll_sync_res:clone()
	return clone(self)
end

function i3k_sbean.luckyroll_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.infos = is:pop(i3k_sbean.LuckyRollInfo)
end

function i3k_sbean.luckyroll_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.infos)
end


-- 转转盘回应
i3k_sbean.luckyroll_play_res = i3k_class("luckyroll_play_res")
function i3k_sbean.luckyroll_play_res:ctor()
	self._pname_ = "luckyroll_play_res"
	--self.ok:		int32	
end

function i3k_sbean.luckyroll_play_res:clone()
	return clone(self)
end

function i3k_sbean.luckyroll_play_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.luckyroll_play_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 连续转转盘回应
i3k_sbean.luckyroll_multiplay_res = i3k_class("luckyroll_multiplay_res")
function i3k_sbean.luckyroll_multiplay_res:ctor()
	self._pname_ = "luckyroll_multiplay_res"
	--self.ok:		int32	
	--self.rewards:		vector[DummyGoods]	
end

function i3k_sbean.luckyroll_multiplay_res:clone()
	return clone(self)
end

function i3k_sbean.luckyroll_multiplay_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.luckyroll_multiplay_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.rewards)
end


-- 直购礼包活动信息
i3k_sbean.directpurchase_sync_res = i3k_class("directpurchase_sync_res")
function i3k_sbean.directpurchase_sync_res:ctor()
	self._pname_ = "directpurchase_sync_res"
	--self.ok:		int32	
	--self.info:		RoleDirectPurchaseInfo	
end

function i3k_sbean.directpurchase_sync_res:clone()
	return clone(self)
end

function i3k_sbean.directpurchase_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleDirectPurchaseInfo)
end

function i3k_sbean.directpurchase_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取直购礼包活动奖励
i3k_sbean.directpurchase_take_res = i3k_class("directpurchase_take_res")
function i3k_sbean.directpurchase_take_res:ctor()
	self._pname_ = "directpurchase_take_res"
	--self.ok:		int32	
end

function i3k_sbean.directpurchase_take_res:clone()
	return clone(self)
end

function i3k_sbean.directpurchase_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.directpurchase_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 老虎机活动信息
i3k_sbean.onearmbandit_sync_res = i3k_class("onearmbandit_sync_res")
function i3k_sbean.onearmbandit_sync_res:ctor()
	self._pname_ = "onearmbandit_sync_res"
	--self.ok:		int32	
	--self.info:		RoleOneArmBanditInfo	
end

function i3k_sbean.onearmbandit_sync_res:clone()
	return clone(self)
end

function i3k_sbean.onearmbandit_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleOneArmBanditInfo)
end

function i3k_sbean.onearmbandit_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 领取老虎机活动奖励的元宝数
i3k_sbean.onearmbandit_take_res = i3k_class("onearmbandit_take_res")
function i3k_sbean.onearmbandit_take_res:ctor()
	self._pname_ = "onearmbandit_take_res"
	--self.gift:		int32	
end

function i3k_sbean.onearmbandit_take_res:clone()
	return clone(self)
end

function i3k_sbean.onearmbandit_take_res:decode(is)
	is:popString()
	self.gift = is:popNumber()
end

function i3k_sbean.onearmbandit_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gift)
end


-- 金蛋活动信息
i3k_sbean.goldenegg_sync_res = i3k_class("goldenegg_sync_res")
function i3k_sbean.goldenegg_sync_res:ctor()
	self._pname_ = "goldenegg_sync_res"
	--self.ok:		int32	
	--self.info:		GoldenEggInfo	
end

function i3k_sbean.goldenegg_sync_res:clone()
	return clone(self)
end

function i3k_sbean.goldenegg_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.GoldenEggInfo)
end

function i3k_sbean.goldenegg_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 砸金蛋奖励的道具
i3k_sbean.goldenegg_play_res = i3k_class("goldenegg_play_res")
function i3k_sbean.goldenegg_play_res:ctor()
	self._pname_ = "goldenegg_play_res"
	--self.ok:		int32	
	--self.gifts:		vector[int32]	
end

function i3k_sbean.goldenegg_play_res:clone()
	return clone(self)
end

function i3k_sbean.goldenegg_play_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.gifts = is:popNumberList()
end

function i3k_sbean.goldenegg_play_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberList(self.gifts)
end


-- 砸金蛋刷新奖励列表
i3k_sbean.goldenegg_refresh_res = i3k_class("goldenegg_refresh_res")
function i3k_sbean.goldenegg_refresh_res:ctor()
	self._pname_ = "goldenegg_refresh_res"
	--self.ok:		int32	
	--self.rewards:		vector[EggReward]	
end

function i3k_sbean.goldenegg_refresh_res:clone()
	return clone(self)
end

function i3k_sbean.goldenegg_refresh_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popList(i3k_sbean.EggReward)
end

function i3k_sbean.goldenegg_refresh_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.rewards)
end


-- 广告同步协议回应
i3k_sbean.adver_sync_res = i3k_class("adver_sync_res")
function i3k_sbean.adver_sync_res:ctor()
	self._pname_ = "adver_sync_res"
	--self.ok:		int32	
	--self.advers:		Advers	
end

function i3k_sbean.adver_sync_res:clone()
	return clone(self)
end

function i3k_sbean.adver_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.advers = is:pop(i3k_sbean.Advers)
end

function i3k_sbean.adver_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.advers)
end


-- 同步循环基金活动信息
i3k_sbean.cyclefund_sync_res = i3k_class("cyclefund_sync_res")
function i3k_sbean.cyclefund_sync_res:ctor()
	self._pname_ = "cyclefund_sync_res"
	--self.ok:		int32	
	--self.info:		RoleCycleFundInfo	
end

function i3k_sbean.cyclefund_sync_res:clone()
	return clone(self)
end

function i3k_sbean.cyclefund_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleCycleFundInfo)
end

function i3k_sbean.cyclefund_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 买循环基金
i3k_sbean.cyclefund_buy_res = i3k_class("cyclefund_buy_res")
function i3k_sbean.cyclefund_buy_res:ctor()
	self._pname_ = "cyclefund_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.cyclefund_buy_res:clone()
	return clone(self)
end

function i3k_sbean.cyclefund_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cyclefund_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取循环基金活动奖励
i3k_sbean.cyclefund_take_res = i3k_class("cyclefund_take_res")
function i3k_sbean.cyclefund_take_res:ctor()
	self._pname_ = "cyclefund_take_res"
	--self.ok:		int32	
end

function i3k_sbean.cyclefund_take_res:clone()
	return clone(self)
end

function i3k_sbean.cyclefund_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cyclefund_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 主动离开副本响应
i3k_sbean.mapcopy_leave_res = i3k_class("mapcopy_leave_res")
function i3k_sbean.mapcopy_leave_res:ctor()
	self._pname_ = "mapcopy_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.mapcopy_leave_res:clone()
	return clone(self)
end

function i3k_sbean.mapcopy_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mapcopy_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 首次进入副本后或断线重登录后通知客户端副本的时间信息
i3k_sbean.role_mapcopy_timesync = i3k_class("role_mapcopy_timesync")
function i3k_sbean.role_mapcopy_timesync:ctor()
	self._pname_ = "role_mapcopy_timesync"
	--self.mapId:		int32	
	--self.startTime:		int32	
end

function i3k_sbean.role_mapcopy_timesync:clone()
	return clone(self)
end

function i3k_sbean.role_mapcopy_timesync:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.startTime = is:popNumber()
end

function i3k_sbean.role_mapcopy_timesync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.startTime)
end


-- 首次进入副本后或断线重登录后通知客户端当前副本是否可以拾取
i3k_sbean.role_mapcopy_cantake_drop = i3k_class("role_mapcopy_cantake_drop")
function i3k_sbean.role_mapcopy_cantake_drop:ctor()
	self._pname_ = "role_mapcopy_cantake_drop"
	--self.mapId:		int32	
	--self.canTakeDrop:		int8	
end

function i3k_sbean.role_mapcopy_cantake_drop:clone()
	return clone(self)
end

function i3k_sbean.role_mapcopy_cantake_drop:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.canTakeDrop = is:popNumber()
end

function i3k_sbean.role_mapcopy_cantake_drop:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.canTakeDrop)
end


-- 开始进入标准副本响应
i3k_sbean.normalmap_start_res = i3k_class("normalmap_start_res")
function i3k_sbean.normalmap_start_res:ctor()
	self._pname_ = "normalmap_start_res"
	--self.ok:		int32	
end

function i3k_sbean.normalmap_start_res:clone()
	return clone(self)
end

function i3k_sbean.normalmap_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.normalmap_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开始进入活动副本响应
i3k_sbean.activitymap_start_res = i3k_class("activitymap_start_res")
function i3k_sbean.activitymap_start_res:ctor()
	self._pname_ = "activitymap_start_res"
	--self.ok:		int32	
end

function i3k_sbean.activitymap_start_res:clone()
	return clone(self)
end

function i3k_sbean.activitymap_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.activitymap_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知客户端普通副本开始（不包括副本扫荡）
i3k_sbean.role_commonmap_start = i3k_class("role_commonmap_start")
function i3k_sbean.role_commonmap_start:ctor()
	self._pname_ = "role_commonmap_start"
	--self.mapId:		int32	
end

function i3k_sbean.role_commonmap_start:clone()
	return clone(self)
end

function i3k_sbean.role_commonmap_start:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.role_commonmap_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 通知客户端普通副本结束（不包括副本扫荡，可能是boss死亡结束，可能是玩家死亡结束，可能是完成副本，也可能是未完成副本）socre 小于等于 0未完成
i3k_sbean.role_commonmap_end = i3k_class("role_commonmap_end")
function i3k_sbean.role_commonmap_end:ctor()
	self._pname_ = "role_commonmap_end"
	--self.mapId:		int32	
	--self.score:		int32	
end

function i3k_sbean.role_commonmap_end:clone()
	return clone(self)
end

function i3k_sbean.role_commonmap_end:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.score = is:popNumber()
end

function i3k_sbean.role_commonmap_end:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.score)
end


-- 势力战奖励副本开始
i3k_sbean.role_forcewar_rewardmap_start = i3k_class("role_forcewar_rewardmap_start")
function i3k_sbean.role_forcewar_rewardmap_start:ctor()
	self._pname_ = "role_forcewar_rewardmap_start"
	--self.mapId:		int32	
end

function i3k_sbean.role_forcewar_rewardmap_start:clone()
	return clone(self)
end

function i3k_sbean.role_forcewar_rewardmap_start:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.role_forcewar_rewardmap_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 活动副本杀怪计数同步
i3k_sbean.role_activitymap_sync = i3k_class("role_activitymap_sync")
function i3k_sbean.role_activitymap_sync:ctor()
	self._pname_ = "role_activitymap_sync"
	--self.mapId:		int32	
	--self.killMonsters:		int32	
end

function i3k_sbean.role_activitymap_sync:clone()
	return clone(self)
end

function i3k_sbean.role_activitymap_sync:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.killMonsters = is:popNumber()
end

function i3k_sbean.role_activitymap_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.killMonsters)
end


-- 通知客户端开始副本翻盘奖励（不包括副本扫荡）
i3k_sbean.role_commonmap_result = i3k_class("role_commonmap_result")
function i3k_sbean.role_commonmap_result:ctor()
	self._pname_ = "role_commonmap_result"
	--self.mapId:		int32	
	--self.score:		int32	
	--self.finishTime:		int32	
	--self.deadTimes:		int32	
	--self.killMonsters:		int32	
	--self.rewards:		MapRewards	
	--self.process:		int32	
end

function i3k_sbean.role_commonmap_result:clone()
	return clone(self)
end

function i3k_sbean.role_commonmap_result:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.score = is:popNumber()
	self.finishTime = is:popNumber()
	self.deadTimes = is:popNumber()
	self.killMonsters = is:popNumber()
	self.rewards = is:pop(i3k_sbean.MapRewards)
	self.process = is:popNumber()
end

function i3k_sbean.role_commonmap_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.score)
	os:pushNumber(self.finishTime)
	os:pushNumber(self.deadTimes)
	os:pushNumber(self.killMonsters)
	os:push(self.rewards)
	os:pushNumber(self.process)
end


-- 自动翻牌抽奖
i3k_sbean.role_commonmap_autocard = i3k_class("role_commonmap_autocard")
function i3k_sbean.role_commonmap_autocard:ctor()
	self._pname_ = "role_commonmap_autocard"
	--self.item:		DummyGoods	
end

function i3k_sbean.role_commonmap_autocard:clone()
	return clone(self)
end

function i3k_sbean.role_commonmap_autocard:decode(is)
	is:popString()
	self.item = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.role_commonmap_autocard:encode(os)
	os:pushString(self._pname_)
	os:push(self.item)
end


-- 手动翻牌抽奖回应
i3k_sbean.commonmap_selectcard_res = i3k_class("commonmap_selectcard_res")
function i3k_sbean.commonmap_selectcard_res:ctor()
	self._pname_ = "commonmap_selectcard_res"
	--self.item:		DummyGoods	
end

function i3k_sbean.commonmap_selectcard_res:clone()
	return clone(self)
end

function i3k_sbean.commonmap_selectcard_res:decode(is)
	is:popString()
	self.item = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.commonmap_selectcard_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.item)
end


-- 购买进入标准副本次数的响应
i3k_sbean.normalmap_buytimes_res = i3k_class("normalmap_buytimes_res")
function i3k_sbean.normalmap_buytimes_res:ctor()
	self._pname_ = "normalmap_buytimes_res"
	--self.ok:		int32	
end

function i3k_sbean.normalmap_buytimes_res:clone()
	return clone(self)
end

function i3k_sbean.normalmap_buytimes_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.normalmap_buytimes_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 购买进入活动副本次数的响应
i3k_sbean.activitymap_buytimes_res = i3k_class("activitymap_buytimes_res")
function i3k_sbean.activitymap_buytimes_res:ctor()
	self._pname_ = "activitymap_buytimes_res"
	--self.ok:		int32	
end

function i3k_sbean.activitymap_buytimes_res:clone()
	return clone(self)
end

function i3k_sbean.activitymap_buytimes_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.activitymap_buytimes_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 副本扫荡请求响应（返回是否成功以及成功时的奖励）
i3k_sbean.privatemap_sweep_res = i3k_class("privatemap_sweep_res")
function i3k_sbean.privatemap_sweep_res:ctor()
	self._pname_ = "privatemap_sweep_res"
	--self.summary:		MapSummary	
end

function i3k_sbean.privatemap_sweep_res:clone()
	return clone(self)
end

function i3k_sbean.privatemap_sweep_res:decode(is)
	is:popString()
	self.summary = is:pop(i3k_sbean.MapSummary)
end

function i3k_sbean.privatemap_sweep_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.summary)
end


-- 活动副本扫荡请求响应（返回是否成功以及成功时的奖励）
i3k_sbean.activity_sweep_res = i3k_class("activity_sweep_res")
function i3k_sbean.activity_sweep_res:ctor()
	self._pname_ = "activity_sweep_res"
	--self.summary:		MapSummary	
end

function i3k_sbean.activity_sweep_res:clone()
	return clone(self)
end

function i3k_sbean.activity_sweep_res:decode(is)
	is:popString()
	self.summary = is:pop(i3k_sbean.MapSummary)
end

function i3k_sbean.activity_sweep_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.summary)
end


-- 特殊活动记录
i3k_sbean.activity_instance_logs_sync_res = i3k_class("activity_instance_logs_sync_res")
function i3k_sbean.activity_instance_logs_sync_res:ctor()
	self._pname_ = "activity_instance_logs_sync_res"
	--self.logs:		map[int32, DBMapInstanceDropLog]	
end

function i3k_sbean.activity_instance_logs_sync_res:clone()
	return clone(self)
end

function i3k_sbean.activity_instance_logs_sync_res:decode(is)
	is:popString()
	self.logs = is:popNumberMap(i3k_sbean.DBMapInstanceDropLog)
end

function i3k_sbean.activity_instance_logs_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.logs)
end


-- 活动副本一键扫荡
i3k_sbean.activity_multi_sweep_res = i3k_class("activity_multi_sweep_res")
function i3k_sbean.activity_multi_sweep_res:ctor()
	self._pname_ = "activity_multi_sweep_res"
	--self.ok:		int32	
	--self.summaries:		vector[MapSummaryNew]	
end

function i3k_sbean.activity_multi_sweep_res:clone()
	return clone(self)
end

function i3k_sbean.activity_multi_sweep_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.summaries = is:popList(i3k_sbean.MapSummaryNew)
end

function i3k_sbean.activity_multi_sweep_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.summaries)
end


-- 同步试炼周常宝箱
i3k_sbean.activitymap_week_sync_res = i3k_class("activitymap_week_sync_res")
function i3k_sbean.activitymap_week_sync_res:ctor()
	self._pname_ = "activitymap_week_sync_res"
	--self.info:		DBActivityMapWeekReward	
end

function i3k_sbean.activitymap_week_sync_res:clone()
	return clone(self)
end

function i3k_sbean.activitymap_week_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBActivityMapWeekReward)
end

function i3k_sbean.activitymap_week_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 领取周常宝箱奖励
i3k_sbean.activitymap_week_rewards_res = i3k_class("activitymap_week_rewards_res")
function i3k_sbean.activitymap_week_rewards_res:ctor()
	self._pname_ = "activitymap_week_rewards_res"
	--self.ok:		int32	
	--self.rewards:		map[int32, int32]	
end

function i3k_sbean.activitymap_week_rewards_res:clone()
	return clone(self)
end

function i3k_sbean.activitymap_week_rewards_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popNumberNumberMap()
end

function i3k_sbean.activitymap_week_rewards_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.rewards)
end


-- 同步系统邮件
i3k_sbean.mail_syncsys_res = i3k_class("mail_syncsys_res")
function i3k_sbean.mail_syncsys_res:ctor()
	self._pname_ = "mail_syncsys_res"
	--self.info:		MailInfo	
end

function i3k_sbean.mail_syncsys_res:clone()
	return clone(self)
end

function i3k_sbean.mail_syncsys_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.MailInfo)
end

function i3k_sbean.mail_syncsys_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 同步临时邮件
i3k_sbean.mail_synctmp_res = i3k_class("mail_synctmp_res")
function i3k_sbean.mail_synctmp_res:ctor()
	self._pname_ = "mail_synctmp_res"
	--self.info:		MailInfo	
end

function i3k_sbean.mail_synctmp_res:clone()
	return clone(self)
end

function i3k_sbean.mail_synctmp_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.MailInfo)
end

function i3k_sbean.mail_synctmp_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 读邮件
i3k_sbean.mail_read_res = i3k_class("mail_read_res")
function i3k_sbean.mail_read_res:ctor()
	self._pname_ = "mail_read_res"
	--self.mail:		DBMail	
end

function i3k_sbean.mail_read_res:clone()
	return clone(self)
end

function i3k_sbean.mail_read_res:decode(is)
	is:popString()
	self.mail = is:pop(i3k_sbean.DBMail)
end

function i3k_sbean.mail_read_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.mail)
end


-- 读系统邮件
i3k_sbean.mail_readsys_res = i3k_class("mail_readsys_res")
function i3k_sbean.mail_readsys_res:ctor()
	self._pname_ = "mail_readsys_res"
	--self.mail:		DBMail	
end

function i3k_sbean.mail_readsys_res:clone()
	return clone(self)
end

function i3k_sbean.mail_readsys_res:decode(is)
	is:popString()
	self.mail = is:pop(i3k_sbean.DBMail)
end

function i3k_sbean.mail_readsys_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.mail)
end


-- 读临时邮件
i3k_sbean.mail_readtmp_res = i3k_class("mail_readtmp_res")
function i3k_sbean.mail_readtmp_res:ctor()
	self._pname_ = "mail_readtmp_res"
	--self.mail:		DBMail	
end

function i3k_sbean.mail_readtmp_res:clone()
	return clone(self)
end

function i3k_sbean.mail_readtmp_res:decode(is)
	is:popString()
	self.mail = is:pop(i3k_sbean.DBMail)
end

function i3k_sbean.mail_readtmp_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.mail)
end


-- 取邮件附件
i3k_sbean.mail_take_res = i3k_class("mail_take_res")
function i3k_sbean.mail_take_res:ctor()
	self._pname_ = "mail_take_res"
	--self.ok:		int32	
end

function i3k_sbean.mail_take_res:clone()
	return clone(self)
end

function i3k_sbean.mail_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mail_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 取系统邮件附件
i3k_sbean.mail_takesys_res = i3k_class("mail_takesys_res")
function i3k_sbean.mail_takesys_res:ctor()
	self._pname_ = "mail_takesys_res"
	--self.ok:		int32	
end

function i3k_sbean.mail_takesys_res:clone()
	return clone(self)
end

function i3k_sbean.mail_takesys_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mail_takesys_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 取临时邮件附件
i3k_sbean.mail_taketmp_res = i3k_class("mail_taketmp_res")
function i3k_sbean.mail_taketmp_res:ctor()
	self._pname_ = "mail_taketmp_res"
	--self.ok:		int32	
end

function i3k_sbean.mail_taketmp_res:clone()
	return clone(self)
end

function i3k_sbean.mail_taketmp_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mail_taketmp_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 邮件删除
i3k_sbean.mail_del_res = i3k_class("mail_del_res")
function i3k_sbean.mail_del_res:ctor()
	self._pname_ = "mail_del_res"
	--self.mailId:		int32	
end

function i3k_sbean.mail_del_res:clone()
	return clone(self)
end

function i3k_sbean.mail_del_res:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_del_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 系统邮件删除
i3k_sbean.mail_delsys_res = i3k_class("mail_delsys_res")
function i3k_sbean.mail_delsys_res:ctor()
	self._pname_ = "mail_delsys_res"
	--self.mailId:		int32	
end

function i3k_sbean.mail_delsys_res:clone()
	return clone(self)
end

function i3k_sbean.mail_delsys_res:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_delsys_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 临时邮件删除
i3k_sbean.mail_deltmp_res = i3k_class("mail_deltmp_res")
function i3k_sbean.mail_deltmp_res:ctor()
	self._pname_ = "mail_deltmp_res"
	--self.mailId:		int32	
end

function i3k_sbean.mail_deltmp_res:clone()
	return clone(self)
end

function i3k_sbean.mail_deltmp_res:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_deltmp_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 取全部系统邮件附件
i3k_sbean.mail_takeallsys_res = i3k_class("mail_takeallsys_res")
function i3k_sbean.mail_takeallsys_res:ctor()
	self._pname_ = "mail_takeallsys_res"
	--self.leftMails:		int32	
end

function i3k_sbean.mail_takeallsys_res:clone()
	return clone(self)
end

function i3k_sbean.mail_takeallsys_res:decode(is)
	is:popString()
	self.leftMails = is:popNumber()
end

function i3k_sbean.mail_takeallsys_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.leftMails)
end


-- 取全部临时邮件附件
i3k_sbean.mail_takealltmp_res = i3k_class("mail_takealltmp_res")
function i3k_sbean.mail_takealltmp_res:ctor()
	self._pname_ = "mail_takealltmp_res"
	--self.leftMails:		int32	
end

function i3k_sbean.mail_takealltmp_res:clone()
	return clone(self)
end

function i3k_sbean.mail_takealltmp_res:decode(is)
	is:popString()
	self.leftMails = is:popNumber()
end

function i3k_sbean.mail_takealltmp_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.leftMails)
end


i3k_sbean.role_tempmail_full = i3k_class("role_tempmail_full")
function i3k_sbean.role_tempmail_full:ctor()
	self._pname_ = "role_tempmail_full"
end

function i3k_sbean.role_tempmail_full:decode(is)
	is:popString()
end

function i3k_sbean.role_tempmail_full:encode(os)
	os:pushString(self._pname_)
end


-- 同步帮派邮件
i3k_sbean.mail_syncsect_res = i3k_class("mail_syncsect_res")
function i3k_sbean.mail_syncsect_res:ctor()
	self._pname_ = "mail_syncsect_res"
	--self.info:		MailInfo	
end

function i3k_sbean.mail_syncsect_res:clone()
	return clone(self)
end

function i3k_sbean.mail_syncsect_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.MailInfo)
end

function i3k_sbean.mail_syncsect_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 读帮派邮件
i3k_sbean.mail_readsect_res = i3k_class("mail_readsect_res")
function i3k_sbean.mail_readsect_res:ctor()
	self._pname_ = "mail_readsect_res"
	--self.mail:		DBMail	
end

function i3k_sbean.mail_readsect_res:clone()
	return clone(self)
end

function i3k_sbean.mail_readsect_res:decode(is)
	is:popString()
	self.mail = is:pop(i3k_sbean.DBMail)
end

function i3k_sbean.mail_readsect_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.mail)
end


-- 帮派邮件删除
i3k_sbean.mail_delsect_res = i3k_class("mail_delsect_res")
function i3k_sbean.mail_delsect_res:ctor()
	self._pname_ = "mail_delsect_res"
	--self.mailId:		int32	
end

function i3k_sbean.mail_delsect_res:clone()
	return clone(self)
end

function i3k_sbean.mail_delsect_res:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_delsect_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 系统同步滚动通知消息
i3k_sbean.rollnotice_sync = i3k_class("rollnotice_sync")
function i3k_sbean.rollnotice_sync:ctor()
	self._pname_ = "rollnotice_sync"
	--self.rollnotices:		vector[int32]	
end

function i3k_sbean.rollnotice_sync:clone()
	return clone(self)
end

function i3k_sbean.rollnotice_sync:decode(is)
	is:popString()
	self.rollnotices = is:popNumberList()
end

function i3k_sbean.rollnotice_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.rollnotices)
end


-- rollnotice_query的异步响应
i3k_sbean.rollnotice_detail = i3k_class("rollnotice_detail")
function i3k_sbean.rollnotice_detail:ctor()
	self._pname_ = "rollnotice_detail"
	--self.notice:		DBRollNotice	
end

function i3k_sbean.rollnotice_detail:clone()
	return clone(self)
end

function i3k_sbean.rollnotice_detail:decode(is)
	is:popString()
	self.notice = is:pop(i3k_sbean.DBRollNotice)
end

function i3k_sbean.rollnotice_detail:encode(os)
	os:pushString(self._pname_)
	os:push(self.notice)
end


-- 同步排行榜
i3k_sbean.rank_sync_res = i3k_class("rank_sync_res")
function i3k_sbean.rank_sync_res:ctor()
	self._pname_ = "rank_sync_res"
	--self.result:		vector[RankBrief]	
end

function i3k_sbean.rank_sync_res:clone()
	return clone(self)
end

function i3k_sbean.rank_sync_res:decode(is)
	is:popString()
	self.result = is:popList(i3k_sbean.RankBrief)
end

function i3k_sbean.rank_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.result)
end


-- 同步帮派排行榜
i3k_sbean.sectrank_sync_res = i3k_class("sectrank_sync_res")
function i3k_sbean.sectrank_sync_res:ctor()
	self._pname_ = "sectrank_sync_res"
	--self.sectresult:		vector[RankBrief]	
	--self.fightgroupresult:		vector[RankBrief]	
	--self.fightteamresult:		vector[RankBrief]	
end

function i3k_sbean.sectrank_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sectrank_sync_res:decode(is)
	is:popString()
	self.sectresult = is:popList(i3k_sbean.RankBrief)
	self.fightgroupresult = is:popList(i3k_sbean.RankBrief)
	self.fightteamresult = is:popList(i3k_sbean.RankBrief)
end

function i3k_sbean.sectrank_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.sectresult)
	os:pushList(self.fightgroupresult)
	os:pushList(self.fightteamresult)
end


-- 获取排行榜列表
i3k_sbean.rank_get_res = i3k_class("rank_get_res")
function i3k_sbean.rank_get_res:ctor()
	self._pname_ = "rank_get_res"
	--self.ok:		int32	
	--self.ranks:		vector[RankRole]	
end

function i3k_sbean.rank_get_res:clone()
	return clone(self)
end

function i3k_sbean.rank_get_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankRole)
end

function i3k_sbean.rank_get_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.ranks)
end


-- 获取排行榜列表
i3k_sbean.sectrank_get_res = i3k_class("sectrank_get_res")
function i3k_sbean.sectrank_get_res:ctor()
	self._pname_ = "sectrank_get_res"
	--self.ok:		int32	
	--self.ranks:		vector[RankSect]	
end

function i3k_sbean.sectrank_get_res:clone()
	return clone(self)
end

function i3k_sbean.sectrank_get_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankSect)
end

function i3k_sbean.sectrank_get_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.ranks)
end


-- 获取排行榜列表
i3k_sbean.fightgrouprank_get_res = i3k_class("fightgrouprank_get_res")
function i3k_sbean.fightgrouprank_get_res:ctor()
	self._pname_ = "fightgrouprank_get_res"
	--self.ok:		int32	
	--self.ranks:		vector[RankFightGroup]	
end

function i3k_sbean.fightgrouprank_get_res:clone()
	return clone(self)
end

function i3k_sbean.fightgrouprank_get_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankFightGroup)
end

function i3k_sbean.fightgrouprank_get_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.ranks)
end


-- 获取自己排名(不在榜上返回0)
i3k_sbean.rank_self_res = i3k_class("rank_self_res")
function i3k_sbean.rank_self_res:ctor()
	self._pname_ = "rank_self_res"
	--self.selfRank:		int32	
end

function i3k_sbean.rank_self_res:clone()
	return clone(self)
end

function i3k_sbean.rank_self_res:decode(is)
	is:popString()
	self.selfRank = is:popNumber()
end

function i3k_sbean.rank_self_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.selfRank)
end


-- 获取自己帮派排名(不在榜上返回0)
i3k_sbean.sectrank_self_res = i3k_class("sectrank_self_res")
function i3k_sbean.sectrank_self_res:ctor()
	self._pname_ = "sectrank_self_res"
	--self.sectRank:		int32	
end

function i3k_sbean.sectrank_self_res:clone()
	return clone(self)
end

function i3k_sbean.sectrank_self_res:decode(is)
	is:popString()
	self.sectRank = is:popNumber()
end

function i3k_sbean.sectrank_self_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectRank)
end


-- 买金币
i3k_sbean.buy_coin_res = i3k_class("buy_coin_res")
function i3k_sbean.buy_coin_res:ctor()
	self._pname_ = "buy_coin_res"
	--self.result:		vector[int32]	
end

function i3k_sbean.buy_coin_res:clone()
	return clone(self)
end

function i3k_sbean.buy_coin_res:decode(is)
	is:popString()
	self.result = is:popNumberList()
end

function i3k_sbean.buy_coin_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.result)
end


-- 买体力
i3k_sbean.buy_vit_res = i3k_class("buy_vit_res")
function i3k_sbean.buy_vit_res:ctor()
	self._pname_ = "buy_vit_res"
	--self.ok:		int32	
end

function i3k_sbean.buy_vit_res:clone()
	return clone(self)
end

function i3k_sbean.buy_vit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.buy_vit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 充值结果通知信息
i3k_sbean.role_pay_notice = i3k_class("role_pay_notice")
function i3k_sbean.role_pay_notice:ctor()
	self._pname_ = "role_pay_notice"
	--self.payLevel:		int32	
	--self.payPoints:		int32	
	--self.addDiamond:		int32	
	--self.addBindDiamond:		int32	
	--self.addCredit:		int32	
	--self.addDragonCoin:		int32	
end

function i3k_sbean.role_pay_notice:clone()
	return clone(self)
end

function i3k_sbean.role_pay_notice:decode(is)
	is:popString()
	self.payLevel = is:popNumber()
	self.payPoints = is:popNumber()
	self.addDiamond = is:popNumber()
	self.addBindDiamond = is:popNumber()
	self.addCredit = is:popNumber()
	self.addDragonCoin = is:popNumber()
end

function i3k_sbean.role_pay_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.payLevel)
	os:pushNumber(self.payPoints)
	os:pushNumber(self.addDiamond)
	os:pushNumber(self.addBindDiamond)
	os:pushNumber(self.addCredit)
	os:pushNumber(self.addDragonCoin)
end


-- vip更新信息
i3k_sbean.user_vip_sync = i3k_class("user_vip_sync")
function i3k_sbean.user_vip_sync:ctor()
	self._pname_ = "user_vip_sync"
	--self.vipLvl:		int32	
	--self.points:		int32	
end

function i3k_sbean.user_vip_sync:clone()
	return clone(self)
end

function i3k_sbean.user_vip_sync:decode(is)
	is:popString()
	self.vipLvl = is:popNumber()
	self.points = is:popNumber()
end

function i3k_sbean.user_vip_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.vipLvl)
	os:pushNumber(self.points)
end


-- 同步充值信息
i3k_sbean.pay_sync_res = i3k_class("pay_sync_res")
function i3k_sbean.pay_sync_res:ctor()
	self._pname_ = "pay_sync_res"
	--self.info:		PayInfo	
end

function i3k_sbean.pay_sync_res:clone()
	return clone(self)
end

function i3k_sbean.pay_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.PayInfo)
end

function i3k_sbean.pay_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 神模式充值
i3k_sbean.pay_asgod_res = i3k_class("pay_asgod_res")
function i3k_sbean.pay_asgod_res:ctor()
	self._pname_ = "pay_asgod_res"
	--self.ok:		int32	
end

function i3k_sbean.pay_asgod_res:clone()
	return clone(self)
end

function i3k_sbean.pay_asgod_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pay_asgod_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取vip礼包的响应信息
i3k_sbean.vip_take_res = i3k_class("vip_take_res")
function i3k_sbean.vip_take_res:ctor()
	self._pname_ = "vip_take_res"
	--self.ok:		int32	
end

function i3k_sbean.vip_take_res:clone()
	return clone(self)
end

function i3k_sbean.vip_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.vip_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 背包扩展
i3k_sbean.bag_expand_res = i3k_class("bag_expand_res")
function i3k_sbean.bag_expand_res:ctor()
	self._pname_ = "bag_expand_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_expand_res:clone()
	return clone(self)
end

function i3k_sbean.bag_expand_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_expand_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 出售背包里的装备
i3k_sbean.bag_sellequip_res = i3k_class("bag_sellequip_res")
function i3k_sbean.bag_sellequip_res:ctor()
	self._pname_ = "bag_sellequip_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_sellequip_res:clone()
	return clone(self)
end

function i3k_sbean.bag_sellequip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_sellequip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 出售背包里的道具物品
i3k_sbean.bag_sellitem_res = i3k_class("bag_sellitem_res")
function i3k_sbean.bag_sellitem_res:ctor()
	self._pname_ = "bag_sellitem_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_sellitem_res:clone()
	return clone(self)
end

function i3k_sbean.bag_sellitem_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_sellitem_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 出售背包里的宝石
i3k_sbean.bag_sellgem_res = i3k_class("bag_sellgem_res")
function i3k_sbean.bag_sellgem_res:ctor()
	self._pname_ = "bag_sellgem_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_sellgem_res:clone()
	return clone(self)
end

function i3k_sbean.bag_sellgem_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_sellgem_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 出售背包里的心法书
i3k_sbean.bag_sellbook_res = i3k_class("bag_sellbook_res")
function i3k_sbean.bag_sellbook_res:ctor()
	self._pname_ = "bag_sellbook_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_sellbook_res:clone()
	return clone(self)
end

function i3k_sbean.bag_sellbook_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_sellbook_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 批量出售背包里的装备
i3k_sbean.bag_batchsellequips_res = i3k_class("bag_batchsellequips_res")
function i3k_sbean.bag_batchsellequips_res:ctor()
	self._pname_ = "bag_batchsellequips_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_batchsellequips_res:clone()
	return clone(self)
end

function i3k_sbean.bag_batchsellequips_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_batchsellequips_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 出售背包里的道具物品
i3k_sbean.bag_batchsellitems_res = i3k_class("bag_batchsellitems_res")
function i3k_sbean.bag_batchsellitems_res:ctor()
	self._pname_ = "bag_batchsellitems_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_batchsellitems_res:clone()
	return clone(self)
end

function i3k_sbean.bag_batchsellitems_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_batchsellitems_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 出售背包里的宝石物品
i3k_sbean.bag_batchsellgems_res = i3k_class("bag_batchsellgems_res")
function i3k_sbean.bag_batchsellgems_res:ctor()
	self._pname_ = "bag_batchsellgems_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_batchsellgems_res:clone()
	return clone(self)
end

function i3k_sbean.bag_batchsellgems_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_batchsellgems_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 出售背包里的心法书物品
i3k_sbean.bag_batchsellbooks_res = i3k_class("bag_batchsellbooks_res")
function i3k_sbean.bag_batchsellbooks_res:ctor()
	self._pname_ = "bag_batchsellbooks_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_batchsellbooks_res:clone()
	return clone(self)
end

function i3k_sbean.bag_batchsellbooks_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_batchsellbooks_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具礼包
i3k_sbean.bag_useitemgift_res = i3k_class("bag_useitemgift_res")
function i3k_sbean.bag_useitemgift_res:ctor()
	self._pname_ = "bag_useitemgift_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemgift_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemgift_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemgift_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具n选n礼包
i3k_sbean.bag_useitemchosegift_res = i3k_class("bag_useitemchosegift_res")
function i3k_sbean.bag_useitemchosegift_res:ctor()
	self._pname_ = "bag_useitemchosegift_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemchosegift_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemchosegift_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemchosegift_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用神装礼包
i3k_sbean.bag_useitemgiftnew_res = i3k_class("bag_useitemgiftnew_res")
function i3k_sbean.bag_useitemgiftnew_res:ctor()
	self._pname_ = "bag_useitemgiftnew_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemgiftnew_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemgiftnew_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemgiftnew_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用神装n选n礼包
i3k_sbean.bag_useitemchosegiftnew_res = i3k_class("bag_useitemchosegiftnew_res")
function i3k_sbean.bag_useitemchosegiftnew_res:ctor()
	self._pname_ = "bag_useitemchosegiftnew_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemchosegiftnew_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemchosegiftnew_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemchosegiftnew_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具金币包
i3k_sbean.bag_useitemcoin_res = i3k_class("bag_useitemcoin_res")
function i3k_sbean.bag_useitemcoin_res:ctor()
	self._pname_ = "bag_useitemcoin_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemcoin_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemcoin_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemcoin_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具钻石包
i3k_sbean.bag_useitemdiamond_res = i3k_class("bag_useitemdiamond_res")
function i3k_sbean.bag_useitemdiamond_res:ctor()
	self._pname_ = "bag_useitemdiamond_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemdiamond_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemdiamond_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemdiamond_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具经验丹
i3k_sbean.bag_useitemexp_res = i3k_class("bag_useitemexp_res")
function i3k_sbean.bag_useitemexp_res:ctor()
	self._pname_ = "bag_useitemexp_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemexp_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemexp_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemexp_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具普通回复hp
i3k_sbean.bag_useitemhp_res = i3k_class("bag_useitemhp_res")
function i3k_sbean.bag_useitemhp_res:ctor()
	self._pname_ = "bag_useitemhp_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemhp_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemhp_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemhp_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具vip普通回复hp
i3k_sbean.bag_useitemhppool_res = i3k_class("bag_useitemhppool_res")
function i3k_sbean.bag_useitemhppool_res:ctor()
	self._pname_ = "bag_useitemhppool_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemhppool_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemhppool_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemhppool_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具宝箱,返回值-1表示背包空间不足，不足以打开宝箱
i3k_sbean.bag_useitemchest_res = i3k_class("bag_useitemchest_res")
function i3k_sbean.bag_useitemchest_res:ctor()
	self._pname_ = "bag_useitemchest_res"
	--self.ok:		int32	
	--self.items:		vector[Rewards]	
end

function i3k_sbean.bag_useitemchest_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemchest_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.items = is:popList(i3k_sbean.Rewards)
end

function i3k_sbean.bag_useitemchest_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.items)
end


-- 使用道具装备能量丹
i3k_sbean.bag_useitemequipenergy_res = i3k_class("bag_useitemequipenergy_res")
function i3k_sbean.bag_useitemequipenergy_res:ctor()
	self._pname_ = "bag_useitemequipenergy_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemequipenergy_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemequipenergy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemequipenergy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具宝石能量丹
i3k_sbean.bag_useitemgemenergy_res = i3k_class("bag_useitemgemenergy_res")
function i3k_sbean.bag_useitemgemenergy_res:ctor()
	self._pname_ = "bag_useitemgemenergy_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemgemenergy_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemgemenergy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemgemenergy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用熔炼精华道具
i3k_sbean.bag_useitemforgeenergy_res = i3k_class("bag_useitemforgeenergy_res")
function i3k_sbean.bag_useitemforgeenergy_res:ctor()
	self._pname_ = "bag_useitemforgeenergy_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemforgeenergy_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemforgeenergy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemforgeenergy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具心法悟性丹
i3k_sbean.bag_useiteminspiration_res = i3k_class("bag_useiteminspiration_res")
function i3k_sbean.bag_useiteminspiration_res:ctor()
	self._pname_ = "bag_useiteminspiration_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useiteminspiration_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useiteminspiration_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useiteminspiration_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用道具体力丹
i3k_sbean.bag_useitemvit_res = i3k_class("bag_useitemvit_res")
function i3k_sbean.bag_useitemvit_res:ctor()
	self._pname_ = "bag_useitemvit_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemvit_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemvit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemvit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 批量使用道具体力丹
i3k_sbean.bag_batchuseitemvit_res = i3k_class("bag_batchuseitemvit_res")
function i3k_sbean.bag_batchuseitemvit_res:ctor()
	self._pname_ = "bag_batchuseitemvit_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_batchuseitemvit_res:clone()
	return clone(self)
end

function i3k_sbean.bag_batchuseitemvit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_batchuseitemvit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用时装道具
i3k_sbean.bag_useitemfashion_res = i3k_class("bag_useitemfashion_res")
function i3k_sbean.bag_useitemfashion_res:ctor()
	self._pname_ = "bag_useitemfashion_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemfashion_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemfashion_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemfashion_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用历练瓶(满)道具
i3k_sbean.bag_useitemexpcoinpool_res = i3k_class("bag_useitemexpcoinpool_res")
function i3k_sbean.bag_useitemexpcoinpool_res:ctor()
	self._pname_ = "bag_useitemexpcoinpool_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemexpcoinpool_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemexpcoinpool_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemexpcoinpool_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用月卡道具
i3k_sbean.bag_usemonthlycard_res = i3k_class("bag_usemonthlycard_res")
function i3k_sbean.bag_usemonthlycard_res:ctor()
	self._pname_ = "bag_usemonthlycard_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_usemonthlycard_res:clone()
	return clone(self)
end

function i3k_sbean.bag_usemonthlycard_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_usemonthlycard_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用VIP体验卡道具
i3k_sbean.bag_usevipcard_res = i3k_class("bag_usevipcard_res")
function i3k_sbean.bag_usevipcard_res:ctor()
	self._pname_ = "bag_usevipcard_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_usevipcard_res:clone()
	return clone(self)
end

function i3k_sbean.bag_usevipcard_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_usevipcard_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用增加武勋道具
i3k_sbean.bag_useitemfeat_res = i3k_class("bag_useitemfeat_res")
function i3k_sbean.bag_useitemfeat_res:ctor()
	self._pname_ = "bag_useitemfeat_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemfeat_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemfeat_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemfeat_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用技能道具
i3k_sbean.bag_useitemskill_res = i3k_class("bag_useitemskill_res")
function i3k_sbean.bag_useitemskill_res:ctor()
	self._pname_ = "bag_useitemskill_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemskill_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemskill_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemskill_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用信件道具
i3k_sbean.bag_useitemletter_res = i3k_class("bag_useitemletter_res")
function i3k_sbean.bag_useitemletter_res:ctor()
	self._pname_ = "bag_useitemletter_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemletter_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemletter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemletter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用善恶值道具
i3k_sbean.bag_useitemevil_res = i3k_class("bag_useitemevil_res")
function i3k_sbean.bag_useitemevil_res:ctor()
	self._pname_ = "bag_useitemevil_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemevil_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemevil_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemevil_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 合成碎片
i3k_sbean.bag_piececompose_res = i3k_class("bag_piececompose_res")
function i3k_sbean.bag_piececompose_res:ctor()
	self._pname_ = "bag_piececompose_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_piececompose_res:clone()
	return clone(self)
end

function i3k_sbean.bag_piececompose_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_piececompose_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用能力强化道具
i3k_sbean.bag_useitempropstrength_res = i3k_class("bag_useitempropstrength_res")
function i3k_sbean.bag_useitempropstrength_res:ctor()
	self._pname_ = "bag_useitempropstrength_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitempropstrength_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitempropstrength_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitempropstrength_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用离线精灵修炼点添加道具
i3k_sbean.bag_useitemofflinefuncpoint_res = i3k_class("bag_useitemofflinefuncpoint_res")
function i3k_sbean.bag_useitemofflinefuncpoint_res:ctor()
	self._pname_ = "bag_useitemofflinefuncpoint_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemofflinefuncpoint_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemofflinefuncpoint_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemofflinefuncpoint_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用称号道具
i3k_sbean.bag_useitemtitle_res = i3k_class("bag_useitemtitle_res")
function i3k_sbean.bag_useitemtitle_res:ctor()
	self._pname_ = "bag_useitemtitle_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemtitle_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemtitle_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemtitle_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用绝技道具
i3k_sbean.bag_useitemuskill_res = i3k_class("bag_useitemuskill_res")
function i3k_sbean.bag_useitemuskill_res:ctor()
	self._pname_ = "bag_useitemuskill_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemuskill_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemuskill_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemuskill_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用头像激活道具
i3k_sbean.bag_useitemhead_res = i3k_class("bag_useitemhead_res")
function i3k_sbean.bag_useitemhead_res:ctor()
	self._pname_ = "bag_useitemhead_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemhead_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemhead_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemhead_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用家园装备道具
i3k_sbean.bag_useitemhomelandequip_res = i3k_class("bag_useitemhomelandequip_res")
function i3k_sbean.bag_useitemhomelandequip_res:ctor()
	self._pname_ = "bag_useitemhomelandequip_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemhomelandequip_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemhomelandequip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemhomelandequip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用vip经验增加道具
i3k_sbean.bag_useitemaddvipexp_res = i3k_class("bag_useitemaddvipexp_res")
function i3k_sbean.bag_useitemaddvipexp_res:ctor()
	self._pname_ = "bag_useitemaddvipexp_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemaddvipexp_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemaddvipexp_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemaddvipexp_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用生产能量增加道具
i3k_sbean.bag_useitemaddproducesplitsp_res = i3k_class("bag_useitemaddproducesplitsp_res")
function i3k_sbean.bag_useitemaddproducesplitsp_res:ctor()
	self._pname_ = "bag_useitemaddproducesplitsp_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemaddproducesplitsp_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemaddproducesplitsp_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemaddproducesplitsp_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用buff药
i3k_sbean.bag_useitembuffdrug_res = i3k_class("bag_useitembuffdrug_res")
function i3k_sbean.bag_useitembuffdrug_res:ctor()
	self._pname_ = "bag_useitembuffdrug_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitembuffdrug_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitembuffdrug_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitembuffdrug_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用加武运道具
i3k_sbean.bag_useweaponsoulcoinadder_res = i3k_class("bag_useweaponsoulcoinadder_res")
function i3k_sbean.bag_useweaponsoulcoinadder_res:ctor()
	self._pname_ = "bag_useweaponsoulcoinadder_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useweaponsoulcoinadder_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useweaponsoulcoinadder_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useweaponsoulcoinadder_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用表情包
i3k_sbean.bag_useitemiconpackage_res = i3k_class("bag_useitemiconpackage_res")
function i3k_sbean.bag_useitemiconpackage_res:ctor()
	self._pname_ = "bag_useitemiconpackage_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemiconpackage_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemiconpackage_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemiconpackage_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用聊天框
i3k_sbean.bag_usechatboxitem_res = i3k_class("bag_usechatboxitem_res")
function i3k_sbean.bag_usechatboxitem_res:ctor()
	self._pname_ = "bag_usechatboxitem_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_usechatboxitem_res:clone()
	return clone(self)
end

function i3k_sbean.bag_usechatboxitem_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_usechatboxitem_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 销毁道具回应
i3k_sbean.bag_destoryitems_res = i3k_class("bag_destoryitems_res")
function i3k_sbean.bag_destoryitems_res:ctor()
	self._pname_ = "bag_destoryitems_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_destoryitems_res:clone()
	return clone(self)
end

function i3k_sbean.bag_destoryitems_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_destoryitems_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用正义徽章道具
i3k_sbean.bag_useitemgbcoin_res = i3k_class("bag_useitemgbcoin_res")
function i3k_sbean.bag_useitemgbcoin_res:ctor()
	self._pname_ = "bag_useitemgbcoin_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemgbcoin_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemgbcoin_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemgbcoin_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用装备升级道具
i3k_sbean.bag_useitem_equip_up_to_level_res = i3k_class("bag_useitem_equip_up_to_level_res")
function i3k_sbean.bag_useitem_equip_up_to_level_res:ctor()
	self._pname_ = "bag_useitem_equip_up_to_level_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitem_equip_up_to_level_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitem_equip_up_to_level_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitem_equip_up_to_level_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用势力声望道具
i3k_sbean.bag_useitem_forcefame_res = i3k_class("bag_useitem_forcefame_res")
function i3k_sbean.bag_useitem_forcefame_res:ctor()
	self._pname_ = "bag_useitem_forcefame_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitem_forcefame_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitem_forcefame_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitem_forcefame_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用试炼副本增加次数道具
i3k_sbean.bag_useitem_add_activity_map_cnt_res = i3k_class("bag_useitem_add_activity_map_cnt_res")
function i3k_sbean.bag_useitem_add_activity_map_cnt_res:ctor()
	self._pname_ = "bag_useitem_add_activity_map_cnt_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitem_add_activity_map_cnt_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitem_add_activity_map_cnt_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitem_add_activity_map_cnt_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 穿装备
i3k_sbean.equip_upwear_res = i3k_class("equip_upwear_res")
function i3k_sbean.equip_upwear_res:ctor()
	self._pname_ = "equip_upwear_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_upwear_res:clone()
	return clone(self)
end

function i3k_sbean.equip_upwear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_upwear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 脱装备
i3k_sbean.equip_downwear_res = i3k_class("equip_downwear_res")
function i3k_sbean.equip_downwear_res:ctor()
	self._pname_ = "equip_downwear_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_downwear_res:clone()
	return clone(self)
end

function i3k_sbean.equip_downwear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_downwear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备强化
i3k_sbean.equip_levelup_res = i3k_class("equip_levelup_res")
function i3k_sbean.equip_levelup_res:ctor()
	self._pname_ = "equip_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.equip_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备强化突破
i3k_sbean.equip_levelup_break_res = i3k_class("equip_levelup_break_res")
function i3k_sbean.equip_levelup_break_res:ctor()
	self._pname_ = "equip_levelup_break_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_levelup_break_res:clone()
	return clone(self)
end

function i3k_sbean.equip_levelup_break_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_levelup_break_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 批量装备强化
i3k_sbean.equip_batchlevelup_res = i3k_class("equip_batchlevelup_res")
function i3k_sbean.equip_batchlevelup_res:ctor()
	self._pname_ = "equip_batchlevelup_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_batchlevelup_res:clone()
	return clone(self)
end

function i3k_sbean.equip_batchlevelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_batchlevelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备升星
i3k_sbean.equip_starup_res = i3k_class("equip_starup_res")
function i3k_sbean.equip_starup_res:ctor()
	self._pname_ = "equip_starup_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_starup_res:clone()
	return clone(self)
end

function i3k_sbean.equip_starup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_starup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 水晶装备修复
i3k_sbean.equip_repair_res = i3k_class("equip_repair_res")
function i3k_sbean.equip_repair_res:ctor()
	self._pname_ = "equip_repair_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_repair_res:clone()
	return clone(self)
end

function i3k_sbean.equip_repair_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_repair_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 自动穿装备
i3k_sbean.equip_autoupwear_res = i3k_class("equip_autoupwear_res")
function i3k_sbean.equip_autoupwear_res:ctor()
	self._pname_ = "equip_autoupwear_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_autoupwear_res:clone()
	return clone(self)
end

function i3k_sbean.equip_autoupwear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_autoupwear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 切换装备特效显示等级
i3k_sbean.equippart_setshowlvl_res = i3k_class("equippart_setshowlvl_res")
function i3k_sbean.equippart_setshowlvl_res:ctor()
	self._pname_ = "equippart_setshowlvl_res"
	--self.ok:		int32	
end

function i3k_sbean.equippart_setshowlvl_res:clone()
	return clone(self)
end

function i3k_sbean.equippart_setshowlvl_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equippart_setshowlvl_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备部位宝石升级
i3k_sbean.gem_levelup_res = i3k_class("gem_levelup_res")
function i3k_sbean.gem_levelup_res:ctor()
	self._pname_ = "gem_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.gem_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.gem_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.gem_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备部位宝石镶嵌
i3k_sbean.gem_inlay_res = i3k_class("gem_inlay_res")
function i3k_sbean.gem_inlay_res:ctor()
	self._pname_ = "gem_inlay_res"
	--self.ok:		int32	
end

function i3k_sbean.gem_inlay_res:clone()
	return clone(self)
end

function i3k_sbean.gem_inlay_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.gem_inlay_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备部位宝石升级
i3k_sbean.gem_unlay_res = i3k_class("gem_unlay_res")
function i3k_sbean.gem_unlay_res:ctor()
	self._pname_ = "gem_unlay_res"
	--self.ok:		int32	
end

function i3k_sbean.gem_unlay_res:clone()
	return clone(self)
end

function i3k_sbean.gem_unlay_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.gem_unlay_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 背包宝石转化
i3k_sbean.gem_trans_res = i3k_class("gem_trans_res")
function i3k_sbean.gem_trans_res:ctor()
	self._pname_ = "gem_trans_res"
	--self.ok:		int32	
end

function i3k_sbean.gem_trans_res:clone()
	return clone(self)
end

function i3k_sbean.gem_trans_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.gem_trans_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备精炼
i3k_sbean.equip_refine_res = i3k_class("equip_refine_res")
function i3k_sbean.equip_refine_res:ctor()
	self._pname_ = "equip_refine_res"
	--self.props:		vector[Prop]	
end

function i3k_sbean.equip_refine_res:clone()
	return clone(self)
end

function i3k_sbean.equip_refine_res:decode(is)
	is:popString()
	self.props = is:popList(i3k_sbean.Prop)
end

function i3k_sbean.equip_refine_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.props)
end


-- 装备精炼保存
i3k_sbean.equip_refine_save_res = i3k_class("equip_refine_save_res")
function i3k_sbean.equip_refine_save_res:ctor()
	self._pname_ = "equip_refine_save_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_refine_save_res:clone()
	return clone(self)
end

function i3k_sbean.equip_refine_save_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_refine_save_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备淬炼
i3k_sbean.equip_quench_res = i3k_class("equip_quench_res")
function i3k_sbean.equip_quench_res:ctor()
	self._pname_ = "equip_quench_res"
	--self.props:		vector[Prop]	
end

function i3k_sbean.equip_quench_res:clone()
	return clone(self)
end

function i3k_sbean.equip_quench_res:decode(is)
	is:popString()
	self.props = is:popList(i3k_sbean.Prop)
end

function i3k_sbean.equip_quench_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.props)
end


-- 装备淬炼保存
i3k_sbean.equip_quench_save_res = i3k_class("equip_quench_save_res")
function i3k_sbean.equip_quench_save_res:ctor()
	self._pname_ = "equip_quench_save_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_quench_save_res:clone()
	return clone(self)
end

function i3k_sbean.equip_quench_save_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_quench_save_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步打造界面信息打造(equip:当前正在打造的装备, legends:当前打造出来的属性)
i3k_sbean.legend_sync_res = i3k_class("legend_sync_res")
function i3k_sbean.legend_sync_res:ctor()
	self._pname_ = "legend_sync_res"
	--self.equip:		DBEquip	
	--self.legends:		vector[int32]	
end

function i3k_sbean.legend_sync_res:clone()
	return clone(self)
end

function i3k_sbean.legend_sync_res:decode(is)
	is:popString()
	self.equip = is:pop(i3k_sbean.DBEquip)
	self.legends = is:popNumberList()
end

function i3k_sbean.legend_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.equip)
	os:pushNumberList(self.legends)
end


-- 打造传世装备
i3k_sbean.legend_make_res = i3k_class("legend_make_res")
function i3k_sbean.legend_make_res:ctor()
	self._pname_ = "legend_make_res"
	--self.legends:		vector[int32]	
	--self.giftReward:		int32	
end

function i3k_sbean.legend_make_res:clone()
	return clone(self)
end

function i3k_sbean.legend_make_res:decode(is)
	is:popString()
	self.legends = is:popNumberList()
	self.giftReward = is:popNumber()
end

function i3k_sbean.legend_make_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.legends)
	os:pushNumber(self.giftReward)
end


-- 放弃传世装备属性
i3k_sbean.legend_quit_res = i3k_class("legend_quit_res")
function i3k_sbean.legend_quit_res:ctor()
	self._pname_ = "legend_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.legend_quit_res:clone()
	return clone(self)
end

function i3k_sbean.legend_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.legend_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 保存传世装备属性
i3k_sbean.legend_save_res = i3k_class("legend_save_res")
function i3k_sbean.legend_save_res:ctor()
	self._pname_ = "legend_save_res"
	--self.ok:		int32	
end

function i3k_sbean.legend_save_res:clone()
	return clone(self)
end

function i3k_sbean.legend_save_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.legend_save_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宝石祝福开启
i3k_sbean.equip_gem_bless_res = i3k_class("equip_gem_bless_res")
function i3k_sbean.equip_gem_bless_res:ctor()
	self._pname_ = "equip_gem_bless_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_gem_bless_res:clone()
	return clone(self)
end

function i3k_sbean.equip_gem_bless_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_gem_bless_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备转化
i3k_sbean.equip_trans_res = i3k_class("equip_trans_res")
function i3k_sbean.equip_trans_res:ctor()
	self._pname_ = "equip_trans_res"
	--self.ok:		int32	
	--self.guid:		string	
end

function i3k_sbean.equip_trans_res:clone()
	return clone(self)
end

function i3k_sbean.equip_trans_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.guid = is:popString()
end

function i3k_sbean.equip_trans_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushString(self.guid)
end


-- 同步驻地精灵祝福信息(key是档位，value是剩余次数)
i3k_sbean.sync_sect_zone_spirit_bless_res = i3k_class("sync_sect_zone_spirit_bless_res")
function i3k_sbean.sync_sect_zone_spirit_bless_res:ctor()
	self._pname_ = "sync_sect_zone_spirit_bless_res"
	--self.blessInfo:		map[int32, int32]	
end

function i3k_sbean.sync_sect_zone_spirit_bless_res:clone()
	return clone(self)
end

function i3k_sbean.sync_sect_zone_spirit_bless_res:decode(is)
	is:popString()
	self.blessInfo = is:popNumberNumberMap()
end

function i3k_sbean.sync_sect_zone_spirit_bless_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.blessInfo)
end


i3k_sbean.use_sect_zone_spirit_bless_res = i3k_class("use_sect_zone_spirit_bless_res")
function i3k_sbean.use_sect_zone_spirit_bless_res:ctor()
	self._pname_ = "use_sect_zone_spirit_bless_res"
	--self.ok:		int32	
end

function i3k_sbean.use_sect_zone_spirit_bless_res:clone()
	return clone(self)
end

function i3k_sbean.use_sect_zone_spirit_bless_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.use_sect_zone_spirit_bless_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 驻地精灵是否进行
i3k_sbean.sect_zone_spirit_exist_res = i3k_class("sect_zone_spirit_exist_res")
function i3k_sbean.sect_zone_spirit_exist_res:ctor()
	self._pname_ = "sect_zone_spirit_exist_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_zone_spirit_exist_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_spirit_exist_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_zone_spirit_exist_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.sync_sect_zone_spirit_last_bless = i3k_class("sync_sect_zone_spirit_last_bless")
function i3k_sbean.sync_sect_zone_spirit_last_bless:ctor()
	self._pname_ = "sync_sect_zone_spirit_last_bless"
	--self.lastOrder:		int32	
	--self.lastUseTime:		int32	
	--self.lastJoinTime:		int32	
end

function i3k_sbean.sync_sect_zone_spirit_last_bless:clone()
	return clone(self)
end

function i3k_sbean.sync_sect_zone_spirit_last_bless:decode(is)
	is:popString()
	self.lastOrder = is:popNumber()
	self.lastUseTime = is:popNumber()
	self.lastJoinTime = is:popNumber()
end

function i3k_sbean.sync_sect_zone_spirit_last_bless:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.lastOrder)
	os:pushNumber(self.lastUseTime)
	os:pushNumber(self.lastJoinTime)
end


-- 选择技能上战
i3k_sbean.skill_select_res = i3k_class("skill_select_res")
function i3k_sbean.skill_select_res:ctor()
	self._pname_ = "skill_select_res"
	--self.ok:		int32	
end

function i3k_sbean.skill_select_res:clone()
	return clone(self)
end

function i3k_sbean.skill_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.skill_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 技能升级
i3k_sbean.skill_levelup_res = i3k_class("skill_levelup_res")
function i3k_sbean.skill_levelup_res:ctor()
	self._pname_ = "skill_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.skill_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.skill_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.skill_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 技能全部升级
i3k_sbean.skill_multi_levelup_res = i3k_class("skill_multi_levelup_res")
function i3k_sbean.skill_multi_levelup_res:ctor()
	self._pname_ = "skill_multi_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.skill_multi_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.skill_multi_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.skill_multi_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 技能升界
i3k_sbean.skill_enhance_res = i3k_class("skill_enhance_res")
function i3k_sbean.skill_enhance_res:ctor()
	self._pname_ = "skill_enhance_res"
	--self.ok:		int32	
end

function i3k_sbean.skill_enhance_res:clone()
	return clone(self)
end

function i3k_sbean.skill_enhance_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.skill_enhance_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 技能解锁
i3k_sbean.skill_unlock_res = i3k_class("skill_unlock_res")
function i3k_sbean.skill_unlock_res:ctor()
	self._pname_ = "skill_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.skill_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.skill_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.skill_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备绝技
i3k_sbean.uniqueskill_set_res = i3k_class("uniqueskill_set_res")
function i3k_sbean.uniqueskill_set_res:ctor()
	self._pname_ = "uniqueskill_set_res"
	--self.ok:		int32	
end

function i3k_sbean.uniqueskill_set_res:clone()
	return clone(self)
end

function i3k_sbean.uniqueskill_set_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.uniqueskill_set_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 心法学习
i3k_sbean.spirit_learn_res = i3k_class("spirit_learn_res")
function i3k_sbean.spirit_learn_res:ctor()
	self._pname_ = "spirit_learn_res"
	--self.ok:		int32	
end

function i3k_sbean.spirit_learn_res:clone()
	return clone(self)
end

function i3k_sbean.spirit_learn_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spirit_learn_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 心法研读
i3k_sbean.spirit_levelup_res = i3k_class("spirit_levelup_res")
function i3k_sbean.spirit_levelup_res:ctor()
	self._pname_ = "spirit_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.spirit_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.spirit_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spirit_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 心法装备
i3k_sbean.spirit_install_res = i3k_class("spirit_install_res")
function i3k_sbean.spirit_install_res:ctor()
	self._pname_ = "spirit_install_res"
	--self.ok:		int32	
end

function i3k_sbean.spirit_install_res:clone()
	return clone(self)
end

function i3k_sbean.spirit_install_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spirit_install_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 心法卸载
i3k_sbean.spirit_uninstall_res = i3k_class("spirit_uninstall_res")
function i3k_sbean.spirit_uninstall_res:ctor()
	self._pname_ = "spirit_uninstall_res"
	--self.ok:		int32	
end

function i3k_sbean.spirit_uninstall_res:clone()
	return clone(self)
end

function i3k_sbean.spirit_uninstall_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spirit_uninstall_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 合成神兵
i3k_sbean.weapon_make_res = i3k_class("weapon_make_res")
function i3k_sbean.weapon_make_res:ctor()
	self._pname_ = "weapon_make_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_make_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_make_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_make_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵升级
i3k_sbean.weapon_levelup_res = i3k_class("weapon_levelup_res")
function i3k_sbean.weapon_levelup_res:ctor()
	self._pname_ = "weapon_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵买等级
i3k_sbean.weapon_buylevel_res = i3k_class("weapon_buylevel_res")
function i3k_sbean.weapon_buylevel_res:ctor()
	self._pname_ = "weapon_buylevel_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_buylevel_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_buylevel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_buylevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵升星
i3k_sbean.weapon_starup_res = i3k_class("weapon_starup_res")
function i3k_sbean.weapon_starup_res:ctor()
	self._pname_ = "weapon_starup_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_starup_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_starup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_starup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 选择使用神兵
i3k_sbean.weapon_select_res = i3k_class("weapon_select_res")
function i3k_sbean.weapon_select_res:ctor()
	self._pname_ = "weapon_select_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_select_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 打开神兵界面同步信息
i3k_sbean.weapon_sync_res = i3k_class("weapon_sync_res")
function i3k_sbean.weapon_sync_res:ctor()
	self._pname_ = "weapon_sync_res"
	--self.masters:		map[int32, int32]	
end

function i3k_sbean.weapon_sync_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_sync_res:decode(is)
	is:popString()
	self.masters = is:popNumberNumberMap()
end

function i3k_sbean.weapon_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.masters)
end


-- 神兵特技激活
i3k_sbean.weapon_uskill_open_res = i3k_class("weapon_uskill_open_res")
function i3k_sbean.weapon_uskill_open_res:ctor()
	self._pname_ = "weapon_uskill_open_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_uskill_open_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_uskill_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_uskill_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置神兵形态
i3k_sbean.weapon_setform_res = i3k_class("weapon_setform_res")
function i3k_sbean.weapon_setform_res:ctor()
	self._pname_ = "weapon_setform_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_setform_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_setform_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_setform_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入神兵副本请求
i3k_sbean.weaponmap_start_res = i3k_class("weaponmap_start_res")
function i3k_sbean.weaponmap_start_res:ctor()
	self._pname_ = "weaponmap_start_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponmap_start_res:clone()
	return clone(self)
end

function i3k_sbean.weaponmap_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponmap_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵觉醒
i3k_sbean.weapon_awake_res = i3k_class("weapon_awake_res")
function i3k_sbean.weapon_awake_res:ctor()
	self._pname_ = "weapon_awake_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_awake_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_awake_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_awake_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵觉醒 兵魂技能升级
i3k_sbean.weapon_awake_skill_lvlup_res = i3k_class("weapon_awake_skill_lvlup_res")
function i3k_sbean.weapon_awake_skill_lvlup_res:ctor()
	self._pname_ = "weapon_awake_skill_lvlup_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_awake_skill_lvlup_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_awake_skill_lvlup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_awake_skill_lvlup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录同步神兵觉醒添加的经验
i3k_sbean.weapon_awake_exp_sync = i3k_class("weapon_awake_exp_sync")
function i3k_sbean.weapon_awake_exp_sync:ctor()
	self._pname_ = "weapon_awake_exp_sync"
	--self.exp:		int32	
end

function i3k_sbean.weapon_awake_exp_sync:clone()
	return clone(self)
end

function i3k_sbean.weapon_awake_exp_sync:decode(is)
	is:popString()
	self.exp = is:popNumber()
end

function i3k_sbean.weapon_awake_exp_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.exp)
end


-- 神兵觉醒添加经验通知
i3k_sbean.weapon_awake_exp_add = i3k_class("weapon_awake_exp_add")
function i3k_sbean.weapon_awake_exp_add:ctor()
	self._pname_ = "weapon_awake_exp_add"
	--self.add:		int32	
end

function i3k_sbean.weapon_awake_exp_add:clone()
	return clone(self)
end

function i3k_sbean.weapon_awake_exp_add:decode(is)
	is:popString()
	self.add = is:popNumber()
end

function i3k_sbean.weapon_awake_exp_add:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.add)
end


-- 打开佣兵界面,同步信息
i3k_sbean.pet_sync_res = i3k_class("pet_sync_res")
function i3k_sbean.pet_sync_res:ctor()
	self._pname_ = "pet_sync_res"
	--self.allSpirits:		map[int32, int32]	
end

function i3k_sbean.pet_sync_res:clone()
	return clone(self)
end

function i3k_sbean.pet_sync_res:decode(is)
	is:popString()
	self.allSpirits = is:popNumberNumberMap()
end

function i3k_sbean.pet_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.allSpirits)
end


-- 生成佣兵
i3k_sbean.pet_make_res = i3k_class("pet_make_res")
function i3k_sbean.pet_make_res:ctor()
	self._pname_ = "pet_make_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_make_res:clone()
	return clone(self)
end

function i3k_sbean.pet_make_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_make_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 佣兵转职
i3k_sbean.pet_transform_res = i3k_class("pet_transform_res")
function i3k_sbean.pet_transform_res:ctor()
	self._pname_ = "pet_transform_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_transform_res:clone()
	return clone(self)
end

function i3k_sbean.pet_transform_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_transform_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 佣兵升级
i3k_sbean.pet_levelup_res = i3k_class("pet_levelup_res")
function i3k_sbean.pet_levelup_res:ctor()
	self._pname_ = "pet_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.pet_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 佣兵买等级
i3k_sbean.pet_buylevel_res = i3k_class("pet_buylevel_res")
function i3k_sbean.pet_buylevel_res:ctor()
	self._pname_ = "pet_buylevel_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_buylevel_res:clone()
	return clone(self)
end

function i3k_sbean.pet_buylevel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_buylevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 佣兵升星
i3k_sbean.pet_starup_res = i3k_class("pet_starup_res")
function i3k_sbean.pet_starup_res:ctor()
	self._pname_ = "pet_starup_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_starup_res:clone()
	return clone(self)
end

function i3k_sbean.pet_starup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_starup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 佣兵突破等级提升
i3k_sbean.pet_breakskillvlup_res = i3k_class("pet_breakskillvlup_res")
function i3k_sbean.pet_breakskillvlup_res:ctor()
	self._pname_ = "pet_breakskillvlup_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_breakskillvlup_res:clone()
	return clone(self)
end

function i3k_sbean.pet_breakskillvlup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_breakskillvlup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 世界地图佣兵设置
i3k_sbean.pet_worldmapset_res = i3k_class("pet_worldmapset_res")
function i3k_sbean.pet_worldmapset_res:ctor()
	self._pname_ = "pet_worldmapset_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_worldmapset_res:clone()
	return clone(self)
end

function i3k_sbean.pet_worldmapset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_worldmapset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 单人副本佣兵设置
i3k_sbean.pet_privatemapset_res = i3k_class("pet_privatemapset_res")
function i3k_sbean.pet_privatemapset_res:ctor()
	self._pname_ = "pet_privatemapset_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_privatemapset_res:clone()
	return clone(self)
end

function i3k_sbean.pet_privatemapset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_privatemapset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派副本佣兵设置
i3k_sbean.pet_sectmapset_res = i3k_class("pet_sectmapset_res")
function i3k_sbean.pet_sectmapset_res:ctor()
	self._pname_ = "pet_sectmapset_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_sectmapset_res:clone()
	return clone(self)
end

function i3k_sbean.pet_sectmapset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_sectmapset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 活动副本佣兵设置
i3k_sbean.pet_activitymapset_res = i3k_class("pet_activitymapset_res")
function i3k_sbean.pet_activitymapset_res:ctor()
	self._pname_ = "pet_activitymapset_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_activitymapset_res:clone()
	return clone(self)
end

function i3k_sbean.pet_activitymapset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_activitymapset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入身世副本协议
i3k_sbean.lifetaskmap_start_res = i3k_class("lifetaskmap_start_res")
function i3k_sbean.lifetaskmap_start_res:ctor()
	self._pname_ = "lifetaskmap_start_res"
	--self.ok:		int32	
end

function i3k_sbean.lifetaskmap_start_res:clone()
	return clone(self)
end

function i3k_sbean.lifetaskmap_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.lifetaskmap_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 武库心法升级(第一次相当于解锁心法)
i3k_sbean.petspirit_lvlup_res = i3k_class("petspirit_lvlup_res")
function i3k_sbean.petspirit_lvlup_res:ctor()
	self._pname_ = "petspirit_lvlup_res"
	--self.ok:		int32	
end

function i3k_sbean.petspirit_lvlup_res:clone()
	return clone(self)
end

function i3k_sbean.petspirit_lvlup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.petspirit_lvlup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 随从心法修习(第一次默认保存)
i3k_sbean.petspirit_learn_res = i3k_class("petspirit_learn_res")
function i3k_sbean.petspirit_learn_res:ctor()
	self._pname_ = "petspirit_learn_res"
	--self.spiritLvl:		int32	
end

function i3k_sbean.petspirit_learn_res:clone()
	return clone(self)
end

function i3k_sbean.petspirit_learn_res:decode(is)
	is:popString()
	self.spiritLvl = is:popNumber()
end

function i3k_sbean.petspirit_learn_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritLvl)
end


-- 随从心法替换
i3k_sbean.petspirit_replace_res = i3k_class("petspirit_replace_res")
function i3k_sbean.petspirit_replace_res:ctor()
	self._pname_ = "petspirit_replace_res"
	--self.ok:		int32	
end

function i3k_sbean.petspirit_replace_res:clone()
	return clone(self)
end

function i3k_sbean.petspirit_replace_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.petspirit_replace_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物改名
i3k_sbean.pet_rename_res = i3k_class("pet_rename_res")
function i3k_sbean.pet_rename_res:ctor()
	self._pname_ = "pet_rename_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_rename_res:clone()
	return clone(self)
end

function i3k_sbean.pet_rename_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_rename_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 日常任务同步任务列表协议
i3k_sbean.dtask_sync_res = i3k_class("dtask_sync_res")
function i3k_sbean.dtask_sync_res:ctor()
	self._pname_ = "dtask_sync_res"
	--self.tasks:		vector[DBDailyTask]	
end

function i3k_sbean.dtask_sync_res:clone()
	return clone(self)
end

function i3k_sbean.dtask_sync_res:decode(is)
	is:popString()
	self.tasks = is:popList(i3k_sbean.DBDailyTask)
end

function i3k_sbean.dtask_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.tasks)
end


-- 日常任务获取任务奖励协议
i3k_sbean.dtask_take_res = i3k_class("dtask_take_res")
function i3k_sbean.dtask_take_res:ctor()
	self._pname_ = "dtask_take_res"
	--self.ok:		int32	
end

function i3k_sbean.dtask_take_res:clone()
	return clone(self)
end

function i3k_sbean.dtask_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dtask_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 日常任务一键领取奖励协议
i3k_sbean.dtask_take_batch_res = i3k_class("dtask_take_batch_res")
function i3k_sbean.dtask_take_batch_res:ctor()
	self._pname_ = "dtask_take_batch_res"
	--self.ok:		int32	
end

function i3k_sbean.dtask_take_batch_res:clone()
	return clone(self)
end

function i3k_sbean.dtask_take_batch_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dtask_take_batch_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步的挑战任务sdk参数
i3k_sbean.role_chtask_sdkparams = i3k_class("role_chtask_sdkparams")
function i3k_sbean.role_chtask_sdkparams:ctor()
	self._pname_ = "role_chtask_sdkparams"
	--self.achSdkParams:		set[string]	
end

function i3k_sbean.role_chtask_sdkparams:clone()
	return clone(self)
end

function i3k_sbean.role_chtask_sdkparams:decode(is)
	is:popString()
	self.achSdkParams = is:popStringSet()
end

function i3k_sbean.role_chtask_sdkparams:encode(os)
	os:pushString(self._pname_)
	os:pushStringSet(self.achSdkParams)
end


-- 挑战任务同步任务列表协议
i3k_sbean.chtask_sync_res = i3k_class("chtask_sync_res")
function i3k_sbean.chtask_sync_res:ctor()
	self._pname_ = "chtask_sync_res"
	--self.tasks:		map[int32, DBChallengeTask]	
	--self.maxValues:		map[int32, int32]	
	--self.achPoints:		map[int32, int32]	
end

function i3k_sbean.chtask_sync_res:clone()
	return clone(self)
end

function i3k_sbean.chtask_sync_res:decode(is)
	is:popString()
	self.tasks = is:popNumberMap(i3k_sbean.DBChallengeTask)
	self.maxValues = is:popNumberNumberMap()
	self.achPoints = is:popNumberNumberMap()
end

function i3k_sbean.chtask_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.tasks)
	os:pushNumberNumberMap(self.maxValues)
	os:pushNumberNumberMap(self.achPoints)
end


-- 挑战任务获取任务奖励协议
i3k_sbean.chtask_take_res = i3k_class("chtask_take_res")
function i3k_sbean.chtask_take_res:ctor()
	self._pname_ = "chtask_take_res"
	--self.ok:		int32	
end

function i3k_sbean.chtask_take_res:clone()
	return clone(self)
end

function i3k_sbean.chtask_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.chtask_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 挑战任务批量获取任务奖励协议
i3k_sbean.chtask_batchtake_res = i3k_class("chtask_batchtake_res")
function i3k_sbean.chtask_batchtake_res:ctor()
	self._pname_ = "chtask_batchtake_res"
	--self.ok:		int32	
end

function i3k_sbean.chtask_batchtake_res:clone()
	return clone(self)
end

function i3k_sbean.chtask_batchtake_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.chtask_batchtake_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 挑战任务上交物品
i3k_sbean.chtask_give_items_res = i3k_class("chtask_give_items_res")
function i3k_sbean.chtask_give_items_res:ctor()
	self._pname_ = "chtask_give_items_res"
	--self.ok:		int32	
end

function i3k_sbean.chtask_give_items_res:clone()
	return clone(self)
end

function i3k_sbean.chtask_give_items_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.chtask_give_items_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 名望同步协议
i3k_sbean.fame_sync_res = i3k_class("fame_sync_res")
function i3k_sbean.fame_sync_res:ctor()
	self._pname_ = "fame_sync_res"
	--self.info:		FameInfo	
end

function i3k_sbean.fame_sync_res:clone()
	return clone(self)
end

function i3k_sbean.fame_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.FameInfo)
end

function i3k_sbean.fame_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 名望晋级协议
i3k_sbean.fame_upgrade_res = i3k_class("fame_upgrade_res")
function i3k_sbean.fame_upgrade_res:ctor()
	self._pname_ = "fame_upgrade_res"
	--self.ok:		int32	
end

function i3k_sbean.fame_upgrade_res:clone()
	return clone(self)
end

function i3k_sbean.fame_upgrade_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fame_upgrade_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 名望获取名望奖励协议
i3k_sbean.fame_take_res = i3k_class("fame_take_res")
function i3k_sbean.fame_take_res:ctor()
	self._pname_ = "fame_take_res"
	--self.ok:		int32	
end

function i3k_sbean.fame_take_res:clone()
	return clone(self)
end

function i3k_sbean.fame_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fame_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 每日在线奖励同步在线奖励协议
i3k_sbean.onlinegift_sync_res = i3k_class("onlinegift_sync_res")
function i3k_sbean.onlinegift_sync_res:ctor()
	self._pname_ = "onlinegift_sync_res"
	--self.info:		DBDailyOnlineGift	
end

function i3k_sbean.onlinegift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.onlinegift_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBDailyOnlineGift)
end

function i3k_sbean.onlinegift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 每日在线奖励获取奖励协议
i3k_sbean.onlinegift_take_res = i3k_class("onlinegift_take_res")
function i3k_sbean.onlinegift_take_res:ctor()
	self._pname_ = "onlinegift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.onlinegift_take_res:clone()
	return clone(self)
end

function i3k_sbean.onlinegift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.onlinegift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 离线经验奖励领取协议
i3k_sbean.offlineexp_take_res = i3k_class("offlineexp_take_res")
function i3k_sbean.offlineexp_take_res:ctor()
	self._pname_ = "offlineexp_take_res"
	--self.offlineRewards:		OfflineReward	
end

function i3k_sbean.offlineexp_take_res:clone()
	return clone(self)
end

function i3k_sbean.offlineexp_take_res:decode(is)
	is:popString()
	self.offlineRewards = is:pop(i3k_sbean.OfflineReward)
end

function i3k_sbean.offlineexp_take_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.offlineRewards)
end


-- 购买挂机精灵经验
i3k_sbean.buy_offline_wizard_exp_res = i3k_class("buy_offline_wizard_exp_res")
function i3k_sbean.buy_offline_wizard_exp_res:ctor()
	self._pname_ = "buy_offline_wizard_exp_res"
	--self.ok:		int32	
	--self.lvl:		int32	
	--self.exp:		int32	
end

function i3k_sbean.buy_offline_wizard_exp_res:clone()
	return clone(self)
end

function i3k_sbean.buy_offline_wizard_exp_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.lvl = is:popNumber()
	self.exp = is:popNumber()
end

function i3k_sbean.buy_offline_wizard_exp_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.lvl)
	os:pushNumber(self.exp)
end


-- 隐藏离线经验显示设置
i3k_sbean.hide_offlineexp_display_res = i3k_class("hide_offlineexp_display_res")
function i3k_sbean.hide_offlineexp_display_res:ctor()
	self._pname_ = "hide_offlineexp_display_res"
	--self.ok:		int32	
end

function i3k_sbean.hide_offlineexp_display_res:clone()
	return clone(self)
end

function i3k_sbean.hide_offlineexp_display_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hide_offlineexp_display_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 全服答题活动同步协议
i3k_sbean.quizgift_sync_res = i3k_class("quizgift_sync_res")
function i3k_sbean.quizgift_sync_res:ctor()
	self._pname_ = "quizgift_sync_res"
	--self.info:		QuizGiftInfo	
end

function i3k_sbean.quizgift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.quizgift_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.QuizGiftInfo)
end

function i3k_sbean.quizgift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 全服答题活动查询排行榜
i3k_sbean.quizgift_qrank_res = i3k_class("quizgift_qrank_res")
function i3k_sbean.quizgift_qrank_res:ctor()
	self._pname_ = "quizgift_qrank_res"
	--self.rank:		vector[QuizGiftRankRole]	
end

function i3k_sbean.quizgift_qrank_res:clone()
	return clone(self)
end

function i3k_sbean.quizgift_qrank_res:decode(is)
	is:popString()
	self.rank = is:popList(i3k_sbean.QuizGiftRankRole)
end

function i3k_sbean.quizgift_qrank_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.rank)
end


-- 全服答题活动答题协议
i3k_sbean.quizgift_answer_res = i3k_class("quizgift_answer_res")
function i3k_sbean.quizgift_answer_res:ctor()
	self._pname_ = "quizgift_answer_res"
	--self.ok:		int32	
end

function i3k_sbean.quizgift_answer_res:clone()
	return clone(self)
end

function i3k_sbean.quizgift_answer_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.quizgift_answer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步幸运转盘信息
i3k_sbean.sync_luckywheel_res = i3k_class("sync_luckywheel_res")
function i3k_sbean.sync_luckywheel_res:ctor()
	self._pname_ = "sync_luckywheel_res"
	--self.info:		DBLuckyWheel	
end

function i3k_sbean.sync_luckywheel_res:clone()
	return clone(self)
end

function i3k_sbean.sync_luckywheel_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBLuckyWheel)
end

function i3k_sbean.sync_luckywheel_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 幸运转盘抽奖
i3k_sbean.luckywheel_ondraw_res = i3k_class("luckywheel_ondraw_res")
function i3k_sbean.luckywheel_ondraw_res:ctor()
	self._pname_ = "luckywheel_ondraw_res"
	--self.pos:		int32	
end

function i3k_sbean.luckywheel_ondraw_res:clone()
	return clone(self)
end

function i3k_sbean.luckywheel_ondraw_res:decode(is)
	is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.luckywheel_ondraw_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
end


-- 购买幸运转盘抽奖次数
i3k_sbean.luckywheel_buydrawtimes_res = i3k_class("luckywheel_buydrawtimes_res")
function i3k_sbean.luckywheel_buydrawtimes_res:ctor()
	self._pname_ = "luckywheel_buydrawtimes_res"
	--self.ok:		int32	
end

function i3k_sbean.luckywheel_buydrawtimes_res:clone()
	return clone(self)
end

function i3k_sbean.luckywheel_buydrawtimes_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.luckywheel_buydrawtimes_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 燃放烟花
i3k_sbean.play_firework_res = i3k_class("play_firework_res")
function i3k_sbean.play_firework_res:ctor()
	self._pname_ = "play_firework_res"
	--self.ok:		int32	
end

function i3k_sbean.play_firework_res:clone()
	return clone(self)
end

function i3k_sbean.play_firework_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.play_firework_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知客户端播放烟花的广播协议
i3k_sbean.notify_play_firework = i3k_class("notify_play_firework")
function i3k_sbean.notify_play_firework:ctor()
	self._pname_ = "notify_play_firework"
	--self.roleName:		string	
	--self.mapID:		int32	
	--self.fireworkID:		int32	
end

function i3k_sbean.notify_play_firework:clone()
	return clone(self)
end

function i3k_sbean.notify_play_firework:decode(is)
	is:popString()
	self.roleName = is:popString()
	self.mapID = is:popNumber()
	self.fireworkID = is:popNumber()
end

function i3k_sbean.notify_play_firework:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.roleName)
	os:pushNumber(self.mapID)
	os:pushNumber(self.fireworkID)
end


-- 抢红包响应协议
i3k_sbean.redenvelope_snatch_res = i3k_class("redenvelope_snatch_res")
function i3k_sbean.redenvelope_snatch_res:ctor()
	self._pname_ = "redenvelope_snatch_res"
	--self.ok:		int32	
	--self.dayGetGiftTimes:		int32	
end

function i3k_sbean.redenvelope_snatch_res:clone()
	return clone(self)
end

function i3k_sbean.redenvelope_snatch_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.dayGetGiftTimes = is:popNumber()
end

function i3k_sbean.redenvelope_snatch_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.dayGetGiftTimes)
end


-- 红包通知协议
i3k_sbean.redenvelope_notice = i3k_class("redenvelope_notice")
function i3k_sbean.redenvelope_notice:ctor()
	self._pname_ = "redenvelope_notice"
	--self.startTime:		int32	
	--self.id:		int32	
	--self.payLevel:		int32	
end

function i3k_sbean.redenvelope_notice:clone()
	return clone(self)
end

function i3k_sbean.redenvelope_notice:decode(is)
	is:popString()
	self.startTime = is:popNumber()
	self.id = is:popNumber()
	self.payLevel = is:popNumber()
end

function i3k_sbean.redenvelope_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.startTime)
	os:pushNumber(self.id)
	os:pushNumber(self.payLevel)
end


-- 接取主线任务
i3k_sbean.mtask_take_res = i3k_class("mtask_take_res")
function i3k_sbean.mtask_take_res:ctor()
	self._pname_ = "mtask_take_res"
	--self.ok:		int32	
end

function i3k_sbean.mtask_take_res:clone()
	return clone(self)
end

function i3k_sbean.mtask_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mtask_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 放弃主线任务
i3k_sbean.mtask_quit_res = i3k_class("mtask_quit_res")
function i3k_sbean.mtask_quit_res:ctor()
	self._pname_ = "mtask_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.mtask_quit_res:clone()
	return clone(self)
end

function i3k_sbean.mtask_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mtask_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 客户端判断完成任务通知GS计数
i3k_sbean.task_complete_notice_gs_res = i3k_class("task_complete_notice_gs_res")
function i3k_sbean.task_complete_notice_gs_res:ctor()
	self._pname_ = "task_complete_notice_gs_res"
	--self.ok:		int32	
end

function i3k_sbean.task_complete_notice_gs_res:clone()
	return clone(self)
end

function i3k_sbean.task_complete_notice_gs_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_complete_notice_gs_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 主线任务领取奖励
i3k_sbean.mtask_reward_res = i3k_class("mtask_reward_res")
function i3k_sbean.mtask_reward_res:ctor()
	self._pname_ = "mtask_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.mtask_reward_res:clone()
	return clone(self)
end

function i3k_sbean.mtask_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mtask_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵任务领取奖励
i3k_sbean.wtask_reward_res = i3k_class("wtask_reward_res")
function i3k_sbean.wtask_reward_res:ctor()
	self._pname_ = "wtask_reward_res"
	--self.nextTaskId:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.wtask_reward_res:clone()
	return clone(self)
end

function i3k_sbean.wtask_reward_res:decode(is)
	is:popString()
	self.nextTaskId = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.wtask_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.nextTaskId)
	os:pushNumber(self.receiveTime)
end


-- 神兵任务快速完成
i3k_sbean.wtask_quick_finish_res = i3k_class("wtask_quick_finish_res")
function i3k_sbean.wtask_quick_finish_res:ctor()
	self._pname_ = "wtask_quick_finish_res"
	--self.nextTaskId:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.wtask_quick_finish_res:clone()
	return clone(self)
end

function i3k_sbean.wtask_quick_finish_res:decode(is)
	is:popString()
	self.nextTaskId = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.wtask_quick_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.nextTaskId)
	os:pushNumber(self.receiveTime)
end


-- 佣兵任务领取奖励
i3k_sbean.ptask_reward_res = i3k_class("ptask_reward_res")
function i3k_sbean.ptask_reward_res:ctor()
	self._pname_ = "ptask_reward_res"
	--self.nextTaskId:		int32	
end

function i3k_sbean.ptask_reward_res:clone()
	return clone(self)
end

function i3k_sbean.ptask_reward_res:decode(is)
	is:popString()
	self.nextTaskId = is:popNumber()
end

function i3k_sbean.ptask_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.nextTaskId)
end


-- 接取佣兵身世任务
i3k_sbean.petlifetask_take_res = i3k_class("petlifetask_take_res")
function i3k_sbean.petlifetask_take_res:ctor()
	self._pname_ = "petlifetask_take_res"
	--self.ok:		int32	
end

function i3k_sbean.petlifetask_take_res:clone()
	return clone(self)
end

function i3k_sbean.petlifetask_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.petlifetask_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 佣兵身世任务领取奖励
i3k_sbean.petlifetask_reward_res = i3k_class("petlifetask_reward_res")
function i3k_sbean.petlifetask_reward_res:ctor()
	self._pname_ = "petlifetask_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.petlifetask_reward_res:clone()
	return clone(self)
end

function i3k_sbean.petlifetask_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.petlifetask_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 任务定点使用道具
i3k_sbean.task_useitem_res = i3k_class("task_useitem_res")
function i3k_sbean.task_useitem_res:ctor()
	self._pname_ = "task_useitem_res"
	--self.ok:		int32	
end

function i3k_sbean.task_useitem_res:clone()
	return clone(self)
end

function i3k_sbean.task_useitem_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_useitem_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 任务提交道具
i3k_sbean.task_submititem_res = i3k_class("task_submititem_res")
function i3k_sbean.task_submititem_res:ctor()
	self._pname_ = "task_submititem_res"
	--self.ok:		int32	
end

function i3k_sbean.task_submititem_res:clone()
	return clone(self)
end

function i3k_sbean.task_submititem_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_submititem_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 随从任务提交道具
i3k_sbean.pettask_submititem_res = i3k_class("pettask_submititem_res")
function i3k_sbean.pettask_submititem_res:ctor()
	self._pname_ = "pettask_submititem_res"
	--self.ok:		int32	
end

function i3k_sbean.pettask_submititem_res:clone()
	return clone(self)
end

function i3k_sbean.pettask_submititem_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pettask_submititem_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 随从身世任务提交道具
i3k_sbean.petlifetask_submititem_res = i3k_class("petlifetask_submititem_res")
function i3k_sbean.petlifetask_submititem_res:ctor()
	self._pname_ = "petlifetask_submititem_res"
	--self.ok:		int32	
end

function i3k_sbean.petlifetask_submititem_res:clone()
	return clone(self)
end

function i3k_sbean.petlifetask_submititem_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.petlifetask_submititem_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 任务npc对话
i3k_sbean.task_dialog_res = i3k_class("task_dialog_res")
function i3k_sbean.task_dialog_res:ctor()
	self._pname_ = "task_dialog_res"
	--self.ok:		int32	
end

function i3k_sbean.task_dialog_res:clone()
	return clone(self)
end

function i3k_sbean.task_dialog_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_dialog_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 任务护送NPC
i3k_sbean.task_conveynpc_res = i3k_class("task_conveynpc_res")
function i3k_sbean.task_conveynpc_res:ctor()
	self._pname_ = "task_conveynpc_res"
	--self.ok:		int32	
end

function i3k_sbean.task_conveynpc_res:clone()
	return clone(self)
end

function i3k_sbean.task_conveynpc_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_conveynpc_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 任务护送物件
i3k_sbean.task_conveyitem_res = i3k_class("task_conveyitem_res")
function i3k_sbean.task_conveyitem_res:ctor()
	self._pname_ = "task_conveyitem_res"
	--self.ok:		int32	
end

function i3k_sbean.task_conveyitem_res:clone()
	return clone(self)
end

function i3k_sbean.task_conveyitem_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_conveyitem_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 任务文字答题
i3k_sbean.task_answer_res = i3k_class("task_answer_res")
function i3k_sbean.task_answer_res:ctor()
	self._pname_ = "task_answer_res"
	--self.ok:		int32	
end

function i3k_sbean.task_answer_res:clone()
	return clone(self)
end

function i3k_sbean.task_answer_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_answer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 随机答题
i3k_sbean.task_randquestion_res = i3k_class("task_randquestion_res")
function i3k_sbean.task_randquestion_res:ctor()
	self._pname_ = "task_randquestion_res"
	--self.ok:		int32	
end

function i3k_sbean.task_randquestion_res:clone()
	return clone(self)
end

function i3k_sbean.task_randquestion_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_randquestion_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开启宠物觉醒任务
i3k_sbean.pawaketask_open_res = i3k_class("pawaketask_open_res")
function i3k_sbean.pawaketask_open_res:ctor()
	self._pname_ = "pawaketask_open_res"
	--self.ok:		int32	
end

function i3k_sbean.pawaketask_open_res:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pawaketask_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成宠物觉醒任务
i3k_sbean.pawaketask_finish_res = i3k_class("pawaketask_finish_res")
function i3k_sbean.pawaketask_finish_res:ctor()
	self._pname_ = "pawaketask_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.pawaketask_finish_res:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pawaketask_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 放弃宠物觉醒任务
i3k_sbean.pawaketask_quit_res = i3k_class("pawaketask_quit_res")
function i3k_sbean.pawaketask_quit_res:ctor()
	self._pname_ = "pawaketask_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.pawaketask_quit_res:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pawaketask_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 重置宠物觉醒任务
i3k_sbean.pawaketask_reset_res = i3k_class("pawaketask_reset_res")
function i3k_sbean.pawaketask_reset_res:ctor()
	self._pname_ = "pawaketask_reset_res"
	--self.ok:		int32	
end

function i3k_sbean.pawaketask_reset_res:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_reset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pawaketask_reset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物觉醒任务提交道具
i3k_sbean.pawaketask_submititem_res = i3k_class("pawaketask_submititem_res")
function i3k_sbean.pawaketask_submititem_res:ctor()
	self._pname_ = "pawaketask_submititem_res"
	--self.ok:		int32	
end

function i3k_sbean.pawaketask_submititem_res:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_submititem_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pawaketask_submititem_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物觉醒设置
i3k_sbean.petawake_set_res = i3k_class("petawake_set_res")
function i3k_sbean.petawake_set_res:ctor()
	self._pname_ = "petawake_set_res"
	--self.ok:		int32	
end

function i3k_sbean.petawake_set_res:clone()
	return clone(self)
end

function i3k_sbean.petawake_set_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.petawake_set_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开始宠物觉醒任务副本
i3k_sbean.start_pawakemap_res = i3k_class("start_pawakemap_res")
function i3k_sbean.start_pawakemap_res:ctor()
	self._pname_ = "start_pawakemap_res"
	--self.ok:		int32	
end

function i3k_sbean.start_pawakemap_res:clone()
	return clone(self)
end

function i3k_sbean.start_pawakemap_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.start_pawakemap_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物觉醒任务副本开始
i3k_sbean.pawake_map_start = i3k_class("pawake_map_start")
function i3k_sbean.pawake_map_start:ctor()
	self._pname_ = "pawake_map_start"
	--self.mapID:		int32	
end

function i3k_sbean.pawake_map_start:clone()
	return clone(self)
end

function i3k_sbean.pawake_map_start:decode(is)
	is:popString()
	self.mapID = is:popNumber()
end

function i3k_sbean.pawake_map_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapID)
end


-- 宠物觉醒任务副本结束
i3k_sbean.pawake_map_end = i3k_class("pawake_map_end")
function i3k_sbean.pawake_map_end:ctor()
	self._pname_ = "pawake_map_end"
	--self.mapID:		int32	
	--self.finish:		int32	
end

function i3k_sbean.pawake_map_end:clone()
	return clone(self)
end

function i3k_sbean.pawake_map_end:decode(is)
	is:popString()
	self.mapID = is:popNumber()
	self.finish = is:popNumber()
end

function i3k_sbean.pawake_map_end:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapID)
	os:pushNumber(self.finish)
end


-- 获得限时任务
i3k_sbean.tmtask_get = i3k_class("tmtask_get")
function i3k_sbean.tmtask_get:ctor()
	self._pname_ = "tmtask_get"
	--self.taskID:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.tmtask_get:clone()
	return clone(self)
end

function i3k_sbean.tmtask_get:decode(is)
	is:popString()
	self.taskID = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.tmtask_get:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
	os:pushNumber(self.receiveTime)
end


-- 完成限时任务
i3k_sbean.tmtask_finish = i3k_class("tmtask_finish")
function i3k_sbean.tmtask_finish:ctor()
	self._pname_ = "tmtask_finish"
	--self.taskID:		int32	
end

function i3k_sbean.tmtask_finish:clone()
	return clone(self)
end

function i3k_sbean.tmtask_finish:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.tmtask_finish:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 重新激活限时任务
i3k_sbean.tmtask_reactive_res = i3k_class("tmtask_reactive_res")
function i3k_sbean.tmtask_reactive_res:ctor()
	self._pname_ = "tmtask_reactive_res"
	--self.ok:		int32	
	--self.taskID:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.tmtask_reactive_res:clone()
	return clone(self)
end

function i3k_sbean.tmtask_reactive_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.taskID = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.tmtask_reactive_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.taskID)
	os:pushNumber(self.receiveTime)
end


-- 接取势力声望任务
i3k_sbean.forcefame_take_res = i3k_class("forcefame_take_res")
function i3k_sbean.forcefame_take_res:ctor()
	self._pname_ = "forcefame_take_res"
	--self.ok:		int32	
end

function i3k_sbean.forcefame_take_res:clone()
	return clone(self)
end

function i3k_sbean.forcefame_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.forcefame_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 放弃势力声望任务
i3k_sbean.forcefame_quit_res = i3k_class("forcefame_quit_res")
function i3k_sbean.forcefame_quit_res:ctor()
	self._pname_ = "forcefame_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.forcefame_quit_res:clone()
	return clone(self)
end

function i3k_sbean.forcefame_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.forcefame_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成势力声望任务
i3k_sbean.forcefame_finish_res = i3k_class("forcefame_finish_res")
function i3k_sbean.forcefame_finish_res:ctor()
	self._pname_ = "forcefame_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.forcefame_finish_res:clone()
	return clone(self)
end

function i3k_sbean.forcefame_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.forcefame_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 势力声望捐赠
i3k_sbean.forcefame_donate_res = i3k_class("forcefame_donate_res")
function i3k_sbean.forcefame_donate_res:ctor()
	self._pname_ = "forcefame_donate_res"
	--self.ok:		int32	
end

function i3k_sbean.forcefame_donate_res:clone()
	return clone(self)
end

function i3k_sbean.forcefame_donate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.forcefame_donate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 请求挖矿的响应协议
i3k_sbean.role_mine_res = i3k_class("role_mine_res")
function i3k_sbean.role_mine_res:ctor()
	self._pname_ = "role_mine_res"
	--self.ok:		int32	
end

function i3k_sbean.role_mine_res:clone()
	return clone(self)
end

function i3k_sbean.role_mine_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_mine_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置攻击模式回应
i3k_sbean.set_attackmode_res = i3k_class("set_attackmode_res")
function i3k_sbean.set_attackmode_res:ctor()
	self._pname_ = "set_attackmode_res"
	--self.ok:		int32	
end

function i3k_sbean.set_attackmode_res:clone()
	return clone(self)
end

function i3k_sbean.set_attackmode_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.set_attackmode_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知新队员加入队伍
i3k_sbean.team_sync = i3k_class("team_sync")
function i3k_sbean.team_sync:ctor()
	self._pname_ = "team_sync"
	--self.team:		Team	
end

function i3k_sbean.team_sync:clone()
	return clone(self)
end

function i3k_sbean.team_sync:decode(is)
	is:popString()
	self.team = is:pop(i3k_sbean.Team)
end

function i3k_sbean.team_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.team)
end


-- 通知其他队员新队员加入队伍
i3k_sbean.team_join = i3k_class("team_join")
function i3k_sbean.team_join:ctor()
	self._pname_ = "team_join"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.team_join:clone()
	return clone(self)
end

function i3k_sbean.team_join:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.team_join:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知其他队员有成员离开队伍
i3k_sbean.team_leave = i3k_class("team_leave")
function i3k_sbean.team_leave:ctor()
	self._pname_ = "team_leave"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.team_leave:clone()
	return clone(self)
end

function i3k_sbean.team_leave:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.team_leave:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知其他队员有成员被踢出队伍
i3k_sbean.team_kick = i3k_class("team_kick")
function i3k_sbean.team_kick:ctor()
	self._pname_ = "team_kick"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.team_kick:clone()
	return clone(self)
end

function i3k_sbean.team_kick:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.team_kick:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知队伍队伍解散
i3k_sbean.team_dissolve = i3k_class("team_dissolve")
function i3k_sbean.team_dissolve:ctor()
	self._pname_ = "team_dissolve"
end

function i3k_sbean.team_dissolve:decode(is)
	is:popString()
end

function i3k_sbean.team_dissolve:encode(os)
	os:pushString(self._pname_)
end


-- 通知队伍换队长
i3k_sbean.team_change_leader = i3k_class("team_change_leader")
function i3k_sbean.team_change_leader:ctor()
	self._pname_ = "team_change_leader"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.team_change_leader:clone()
	return clone(self)
end

function i3k_sbean.team_change_leader:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.team_change_leader:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知客户端队伍成员信息的变化后的更新值或客户端主动查询值
i3k_sbean.team_member_profile = i3k_class("team_member_profile")
function i3k_sbean.team_member_profile:ctor()
	self._pname_ = "team_member_profile"
	--self.profile:		RoleProfile	
	--self.mapId:		int32	
	--self.position:		Vector3	
	--self.state:		int32	
	--self.line:		int32	
end

function i3k_sbean.team_member_profile:clone()
	return clone(self)
end

function i3k_sbean.team_member_profile:decode(is)
	is:popString()
	self.profile = is:pop(i3k_sbean.RoleProfile)
	self.mapId = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.state = is:popNumber()
	self.line = is:popNumber()
end

function i3k_sbean.team_member_profile:encode(os)
	os:pushString(self._pname_)
	os:push(self.profile)
	os:pushNumber(self.mapId)
	os:push(self.position)
	os:pushNumber(self.state)
	os:pushNumber(self.line)
end


-- 通知客户端队伍成员的hp变化更新后的新值
i3k_sbean.team_member_hp = i3k_class("team_member_hp")
function i3k_sbean.team_member_hp:ctor()
	self._pname_ = "team_member_hp"
	--self.roleId:		int32	
	--self.hp:		int32	
	--self.hpMax:		int32	
end

function i3k_sbean.team_member_hp:clone()
	return clone(self)
end

function i3k_sbean.team_member_hp:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.hp = is:popNumber()
	self.hpMax = is:popNumber()
end

function i3k_sbean.team_member_hp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.hp)
	os:pushNumber(self.hpMax)
end


-- 通知客户端队伍成员的位置变化更新后的新值
i3k_sbean.team_member_position = i3k_class("team_member_position")
function i3k_sbean.team_member_position:ctor()
	self._pname_ = "team_member_position"
	--self.roleId:		int32	
	--self.mapId:		int32	
	--self.position:		Vector3	
	--self.line:		int32	
end

function i3k_sbean.team_member_position:clone()
	return clone(self)
end

function i3k_sbean.team_member_position:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.mapId = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.line = is:popNumber()
end

function i3k_sbean.team_member_position:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.mapId)
	os:push(self.position)
	os:pushNumber(self.line)
end


-- 通知客户端队伍成员的连接状态变化,state大于1是连接状态，为0是断线
i3k_sbean.team_member_connection = i3k_class("team_member_connection")
function i3k_sbean.team_member_connection:ctor()
	self._pname_ = "team_member_connection"
	--self.roleId:		int32	
	--self.state:		int32	
end

function i3k_sbean.team_member_connection:clone()
	return clone(self)
end

function i3k_sbean.team_member_connection:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.team_member_connection:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.state)
end


-- 查询玩家的队伍信息的响应
i3k_sbean.team_role_query_res = i3k_class("team_role_query_res")
function i3k_sbean.team_role_query_res:ctor()
	self._pname_ = "team_role_query_res"
	--self.teamId:		int32	
end

function i3k_sbean.team_role_query_res:clone()
	return clone(self)
end

function i3k_sbean.team_role_query_res:decode(is)
	is:popString()
	self.teamId = is:popNumber()
end

function i3k_sbean.team_role_query_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.teamId)
end


-- 邀请其他玩家组队响应(返回邀请操作是否成功，大于0成功并向对方发送邀请消息，对方已经下线-1，队伍已满-2，对方已经在队伍中-3, 对方正在副本中-5)
i3k_sbean.team_invite_res = i3k_class("team_invite_res")
function i3k_sbean.team_invite_res:ctor()
	self._pname_ = "team_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.team_invite_res:clone()
	return clone(self)
end

function i3k_sbean.team_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.team_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转发其他玩家的组队邀请
i3k_sbean.team_invite_forward = i3k_class("team_invite_forward")
function i3k_sbean.team_invite_forward:ctor()
	self._pname_ = "team_invite_forward"
	--self.roleId:		int32	
	--self.roleName:		string	
	--self.hide:		bool	
end

function i3k_sbean.team_invite_forward:clone()
	return clone(self)
end

function i3k_sbean.team_invite_forward:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
	self.hide = is:popBool()
end

function i3k_sbean.team_invite_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
	os:pushBool(self.hide)
end


-- 玩家是否同意接收组队邀请操作响应(返回对邀请响应的操作是否成功，大于0操作成功(拒绝或接受成功)，如果接受失败：对方已经下线-1，队伍已满-2，邀请人已经加入其它队伍-3)
i3k_sbean.team_invitedby_res = i3k_class("team_invitedby_res")
function i3k_sbean.team_invitedby_res:ctor()
	self._pname_ = "team_invitedby_res"
	--self.ok:		int32	
end

function i3k_sbean.team_invitedby_res:clone()
	return clone(self)
end

function i3k_sbean.team_invitedby_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.team_invitedby_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知邀请者前面的邀请被拒绝
i3k_sbean.team_invite_refuse = i3k_class("team_invite_refuse")
function i3k_sbean.team_invite_refuse:ctor()
	self._pname_ = "team_invite_refuse"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.team_invite_refuse:clone()
	return clone(self)
end

function i3k_sbean.team_invite_refuse:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.team_invite_refuse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知邀请者前面的邀请正忙
i3k_sbean.team_invite_busy = i3k_class("team_invite_busy")
function i3k_sbean.team_invite_busy:ctor()
	self._pname_ = "team_invite_busy"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.team_invite_busy:clone()
	return clone(self)
end

function i3k_sbean.team_invite_busy:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.team_invite_busy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知邀请者前面的邀请在指引状态
i3k_sbean.team_invite_lead = i3k_class("team_invite_lead")
function i3k_sbean.team_invite_lead:ctor()
	self._pname_ = "team_invite_lead"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.team_invite_lead:clone()
	return clone(self)
end

function i3k_sbean.team_invite_lead:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.team_invite_lead:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 其他玩家申请组队响应(返回申请操作是否成功，大于0成功并向队长或申请人发送申请消息，队长或申请人已经下线-1，队伍已满-2，本人已经在其他队伍-3(此项客户端预处理，服务器做保证，正常逻辑不会返回-3))
i3k_sbean.team_apply_res = i3k_class("team_apply_res")
function i3k_sbean.team_apply_res:ctor()
	self._pname_ = "team_apply_res"
	--self.ok:		int32	
end

function i3k_sbean.team_apply_res:clone()
	return clone(self)
end

function i3k_sbean.team_apply_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.team_apply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转发其他玩家的组队申请
i3k_sbean.team_apply_forward = i3k_class("team_apply_forward")
function i3k_sbean.team_apply_forward:ctor()
	self._pname_ = "team_apply_forward"
	--self.role:		RoleOverview	
end

function i3k_sbean.team_apply_forward:clone()
	return clone(self)
end

function i3k_sbean.team_apply_forward:decode(is)
	is:popString()
	self.role = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.team_apply_forward:encode(os)
	os:pushString(self._pname_)
	os:push(self.role)
end


-- 队长是否同意接受组队申请操作响应(返回对申请响应的操作是否成功，大于0操作成功(拒绝或接受成功)，如果接受失败：对方已经下线-1，队伍已满-2，申请人已经加入其它队伍-3)
i3k_sbean.team_appliedby_res = i3k_class("team_appliedby_res")
function i3k_sbean.team_appliedby_res:ctor()
	self._pname_ = "team_appliedby_res"
	--self.ok:		int32	
end

function i3k_sbean.team_appliedby_res:clone()
	return clone(self)
end

function i3k_sbean.team_appliedby_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.team_appliedby_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知申请者前面的申请被队长拒绝
i3k_sbean.team_apply_refuse = i3k_class("team_apply_refuse")
function i3k_sbean.team_apply_refuse:ctor()
	self._pname_ = "team_apply_refuse"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.team_apply_refuse:clone()
	return clone(self)
end

function i3k_sbean.team_apply_refuse:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.team_apply_refuse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 离开队伍响应(返回离开队伍是否成功)
i3k_sbean.team_leave_res = i3k_class("team_leave_res")
function i3k_sbean.team_leave_res:ctor()
	self._pname_ = "team_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.team_leave_res:clone()
	return clone(self)
end

function i3k_sbean.team_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.team_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 踢出队伍成员协议(返回踢出队伍成员是否成功)
i3k_sbean.team_kick_res = i3k_class("team_kick_res")
function i3k_sbean.team_kick_res:ctor()
	self._pname_ = "team_kick_res"
	--self.ok:		int32	
end

function i3k_sbean.team_kick_res:clone()
	return clone(self)
end

function i3k_sbean.team_kick_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.team_kick_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解散队伍响应(返回解散队伍是否成功)
i3k_sbean.team_dissolve_res = i3k_class("team_dissolve_res")
function i3k_sbean.team_dissolve_res:ctor()
	self._pname_ = "team_dissolve_res"
	--self.ok:		int32	
end

function i3k_sbean.team_dissolve_res:clone()
	return clone(self)
end

function i3k_sbean.team_dissolve_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.team_dissolve_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 队伍切换队长响应(返回换队长是否成功)
i3k_sbean.team_change_leader_res = i3k_class("team_change_leader_res")
function i3k_sbean.team_change_leader_res:ctor()
	self._pname_ = "team_change_leader_res"
	--self.ok:		int32	
end

function i3k_sbean.team_change_leader_res:clone()
	return clone(self)
end

function i3k_sbean.team_change_leader_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.team_change_leader_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 本队伍信息查询响应协议
i3k_sbean.team_self_res = i3k_class("team_self_res")
function i3k_sbean.team_self_res:ctor()
	self._pname_ = "team_self_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.team_self_res:clone()
	return clone(self)
end

function i3k_sbean.team_self_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.team_self_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 附近的队伍响应协议
i3k_sbean.team_mapt_res = i3k_class("team_mapt_res")
function i3k_sbean.team_mapt_res:ctor()
	self._pname_ = "team_mapt_res"
	--self.teams:		vector[TeamOverview]	
end

function i3k_sbean.team_mapt_res:clone()
	return clone(self)
end

function i3k_sbean.team_mapt_res:decode(is)
	is:popString()
	self.teams = is:popList(i3k_sbean.TeamOverview)
end

function i3k_sbean.team_mapt_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.teams)
end


-- 附近的人响应协议
i3k_sbean.team_mapr_res = i3k_class("team_mapr_res")
function i3k_sbean.team_mapr_res:ctor()
	self._pname_ = "team_mapr_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.team_mapr_res:clone()
	return clone(self)
end

function i3k_sbean.team_mapr_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.team_mapr_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 师徒请求协议
i3k_sbean.team_master_res = i3k_class("team_master_res")
function i3k_sbean.team_master_res:ctor()
	self._pname_ = "team_master_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.team_master_res:clone()
	return clone(self)
end

function i3k_sbean.team_master_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.team_master_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 通知新成员加入房间同步当前房间信息
i3k_sbean.mroom_sync = i3k_class("mroom_sync")
function i3k_sbean.mroom_sync:ctor()
	self._pname_ = "mroom_sync"
	--self.room:		MRoom	
end

function i3k_sbean.mroom_sync:clone()
	return clone(self)
end

function i3k_sbean.mroom_sync:decode(is)
	is:popString()
	self.room = is:pop(i3k_sbean.MRoom)
end

function i3k_sbean.mroom_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.room)
end


-- 通知其他成员员新成员加入房间
i3k_sbean.mroom_join = i3k_class("mroom_join")
function i3k_sbean.mroom_join:ctor()
	self._pname_ = "mroom_join"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mroom_join:clone()
	return clone(self)
end

function i3k_sbean.mroom_join:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mroom_join:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知其他成员有成员离开房间
i3k_sbean.mroom_leave = i3k_class("mroom_leave")
function i3k_sbean.mroom_leave:ctor()
	self._pname_ = "mroom_leave"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mroom_leave:clone()
	return clone(self)
end

function i3k_sbean.mroom_leave:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mroom_leave:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知其他成员有成员被踢出房间
i3k_sbean.mroom_kick = i3k_class("mroom_kick")
function i3k_sbean.mroom_kick:ctor()
	self._pname_ = "mroom_kick"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mroom_kick:clone()
	return clone(self)
end

function i3k_sbean.mroom_kick:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mroom_kick:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知成员换队长
i3k_sbean.mroom_change_leader = i3k_class("mroom_change_leader")
function i3k_sbean.mroom_change_leader:ctor()
	self._pname_ = "mroom_change_leader"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mroom_change_leader:clone()
	return clone(self)
end

function i3k_sbean.mroom_change_leader:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mroom_change_leader:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知房间其他成员的连接状态变化,state大于1是连接状态，为0是断线
i3k_sbean.mroom_member_connection = i3k_class("mroom_member_connection")
function i3k_sbean.mroom_member_connection:ctor()
	self._pname_ = "mroom_member_connection"
	--self.roleId:		int32	
	--self.state:		int32	
end

function i3k_sbean.mroom_member_connection:clone()
	return clone(self)
end

function i3k_sbean.mroom_member_connection:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.mroom_member_connection:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.state)
end


-- 创建新副本房间响应协议
i3k_sbean.mroom_create_res = i3k_class("mroom_create_res")
function i3k_sbean.mroom_create_res:ctor()
	self._pname_ = "mroom_create_res"
	--self.ok:		int32	
end

function i3k_sbean.mroom_create_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_create_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mroom_create_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 新成员点击加入副本房间协议
i3k_sbean.mroom_enter_res = i3k_class("mroom_enter_res")
function i3k_sbean.mroom_enter_res:ctor()
	self._pname_ = "mroom_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.mroom_enter_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mroom_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 新成员快速加入副本房间协议
i3k_sbean.mroom_qenter_res = i3k_class("mroom_qenter_res")
function i3k_sbean.mroom_qenter_res:ctor()
	self._pname_ = "mroom_qenter_res"
	--self.ok:		int32	
end

function i3k_sbean.mroom_qenter_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_qenter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mroom_qenter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 房间队长邀请新人加入副本房间协议
i3k_sbean.mroom_invite_res = i3k_class("mroom_invite_res")
function i3k_sbean.mroom_invite_res:ctor()
	self._pname_ = "mroom_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.mroom_invite_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mroom_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转发其他玩家进入房间的邀请
i3k_sbean.mroom_invite_forward = i3k_class("mroom_invite_forward")
function i3k_sbean.mroom_invite_forward:ctor()
	self._pname_ = "mroom_invite_forward"
	--self.roleId:		int32	
	--self.roleName:		string	
	--self.mapId:		int32	
	--self.roomId:		int32	
	--self.type:		int32	
end

function i3k_sbean.mroom_invite_forward:clone()
	return clone(self)
end

function i3k_sbean.mroom_invite_forward:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
	self.mapId = is:popNumber()
	self.roomId = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.mroom_invite_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
	os:pushNumber(self.mapId)
	os:pushNumber(self.roomId)
	os:pushNumber(self.type)
end


-- 玩家是否同意加入副本房间的协议
i3k_sbean.mroom_invitedby_res = i3k_class("mroom_invitedby_res")
function i3k_sbean.mroom_invitedby_res:ctor()
	self._pname_ = "mroom_invitedby_res"
	--self.ok:		int32	
end

function i3k_sbean.mroom_invitedby_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_invitedby_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mroom_invitedby_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知邀请者前面的邀请被拒绝
i3k_sbean.mroom_invite_refuse = i3k_class("mroom_invite_refuse")
function i3k_sbean.mroom_invite_refuse:ctor()
	self._pname_ = "mroom_invite_refuse"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mroom_invite_refuse:clone()
	return clone(self)
end

function i3k_sbean.mroom_invite_refuse:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mroom_invite_refuse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 通知邀请者被邀请的人正忙
i3k_sbean.mroom_invite_busy = i3k_class("mroom_invite_busy")
function i3k_sbean.mroom_invite_busy:ctor()
	self._pname_ = "mroom_invite_busy"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mroom_invite_busy:clone()
	return clone(self)
end

function i3k_sbean.mroom_invite_busy:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mroom_invite_busy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知邀请者被邀请的人条件不满足
i3k_sbean.mroom_invite_fail = i3k_class("mroom_invite_fail")
function i3k_sbean.mroom_invite_fail:ctor()
	self._pname_ = "mroom_invite_fail"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mroom_invite_fail:clone()
	return clone(self)
end

function i3k_sbean.mroom_invite_fail:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mroom_invite_fail:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 离开房间的响应(返回离开房间是否成功)
i3k_sbean.mroom_leave_res = i3k_class("mroom_leave_res")
function i3k_sbean.mroom_leave_res:ctor()
	self._pname_ = "mroom_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.mroom_leave_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mroom_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 踢出队伍成员协议(返回踢出队伍成员是否成功)
i3k_sbean.mroom_kick_res = i3k_class("mroom_kick_res")
function i3k_sbean.mroom_kick_res:ctor()
	self._pname_ = "mroom_kick_res"
	--self.ok:		int32	
end

function i3k_sbean.mroom_kick_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_kick_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mroom_kick_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 副本房间更换房主响应(返回换房主是否成功)
i3k_sbean.mroom_change_leader_res = i3k_class("mroom_change_leader_res")
function i3k_sbean.mroom_change_leader_res:ctor()
	self._pname_ = "mroom_change_leader_res"
	--self.ok:		int32	
end

function i3k_sbean.mroom_change_leader_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_change_leader_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mroom_change_leader_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 本房间信息查询响应协议
i3k_sbean.mroom_self_res = i3k_class("mroom_self_res")
function i3k_sbean.mroom_self_res:ctor()
	self._pname_ = "mroom_self_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.mroom_self_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_self_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.mroom_self_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 房间附近的人响应协议
i3k_sbean.mroom_mapr_res = i3k_class("mroom_mapr_res")
function i3k_sbean.mroom_mapr_res:ctor()
	self._pname_ = "mroom_mapr_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.mroom_mapr_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_mapr_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.mroom_mapr_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 房间列表查询响应协议
i3k_sbean.mroom_query_res = i3k_class("mroom_query_res")
function i3k_sbean.mroom_query_res:ctor()
	self._pname_ = "mroom_query_res"
	--self.roles:		vector[TeamOverview]	
end

function i3k_sbean.mroom_query_res:clone()
	return clone(self)
end

function i3k_sbean.mroom_query_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.TeamOverview)
end

function i3k_sbean.mroom_query_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 有新申请加入帮派的通知协议
i3k_sbean.sect_notice_application = i3k_class("sect_notice_application")
function i3k_sbean.sect_notice_application:ctor()
	self._pname_ = "sect_notice_application"
end

function i3k_sbean.sect_notice_application:decode(is)
	is:popString()
end

function i3k_sbean.sect_notice_application:encode(os)
	os:pushString(self._pname_)
end


-- 帮派中被人膜拜的通知协议
i3k_sbean.sect_notice_worship = i3k_class("sect_notice_worship")
function i3k_sbean.sect_notice_worship:ctor()
	self._pname_ = "sect_notice_worship"
end

function i3k_sbean.sect_notice_worship:decode(is)
	is:popString()
end

function i3k_sbean.sect_notice_worship:encode(os)
	os:pushString(self._pname_)
end


-- 帮派中有宴席开放并且自己没有参加过的通知协议
i3k_sbean.sect_notice_banquet = i3k_class("sect_notice_banquet")
function i3k_sbean.sect_notice_banquet:ctor()
	self._pname_ = "sect_notice_banquet"
	--self.banquet:		int8	
	--self.redPack:		int8	
end

function i3k_sbean.sect_notice_banquet:clone()
	return clone(self)
end

function i3k_sbean.sect_notice_banquet:decode(is)
	is:popString()
	self.banquet = is:popNumber()
	self.redPack = is:popNumber()
end

function i3k_sbean.sect_notice_banquet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.banquet)
	os:pushNumber(self.redPack)
end


-- 帮派中可以继续接取任务的通知协议
i3k_sbean.sect_notice_tasks = i3k_class("sect_notice_tasks")
function i3k_sbean.sect_notice_tasks:ctor()
	self._pname_ = "sect_notice_tasks"
end

function i3k_sbean.sect_notice_tasks:decode(is)
	is:popString()
end

function i3k_sbean.sect_notice_tasks:encode(os)
	os:pushString(self._pname_)
end


-- 帮派中有共享出去的任务呗完成后有奖励可以领取
i3k_sbean.sect_notice_sharedtaskreward = i3k_class("sect_notice_sharedtaskreward")
function i3k_sbean.sect_notice_sharedtaskreward:ctor()
	self._pname_ = "sect_notice_sharedtaskreward"
end

function i3k_sbean.sect_notice_sharedtaskreward:decode(is)
	is:popString()
end

function i3k_sbean.sect_notice_sharedtaskreward:encode(os)
	os:pushString(self._pname_)
end


-- 打开帮派界面同步帮派信息请求的响应协议
i3k_sbean.sect_sync_res = i3k_class("sect_sync_res")
function i3k_sbean.sect_sync_res:ctor()
	self._pname_ = "sect_sync_res"
	--self.info:		SectInfo	
end

function i3k_sbean.sect_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.SectInfo)
end

function i3k_sbean.sect_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 创建帮派响应协议
i3k_sbean.sect_create_res = i3k_class("sect_create_res")
function i3k_sbean.sect_create_res:ctor()
	self._pname_ = "sect_create_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_create_res:clone()
	return clone(self)
end

function i3k_sbean.sect_create_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_create_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 批量查询帮派是否被申请响应协议
i3k_sbean.sect_queryapplied_res = i3k_class("sect_queryapplied_res")
function i3k_sbean.sect_queryapplied_res:ctor()
	self._pname_ = "sect_queryapplied_res"
	--self.applied:		set[int32]	
end

function i3k_sbean.sect_queryapplied_res:clone()
	return clone(self)
end

function i3k_sbean.sect_queryapplied_res:decode(is)
	is:popString()
	self.applied = is:popNumberSet()
end

function i3k_sbean.sect_queryapplied_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.applied)
end


-- 刷新帮派列表响应协议
i3k_sbean.sect_list_res = i3k_class("sect_list_res")
function i3k_sbean.sect_list_res:ctor()
	self._pname_ = "sect_list_res"
	--self.list:		vector[SectOverview]	
end

function i3k_sbean.sect_list_res:clone()
	return clone(self)
end

function i3k_sbean.sect_list_res:decode(is)
	is:popString()
	self.list = is:popList(i3k_sbean.SectOverview)
end

function i3k_sbean.sect_list_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.list)
end


-- 批量查询帮派信息响应协议
i3k_sbean.sect_query_res = i3k_class("sect_query_res")
function i3k_sbean.sect_query_res:ctor()
	self._pname_ = "sect_query_res"
	--self.overviews:		vector[SectOverview]	
end

function i3k_sbean.sect_query_res:clone()
	return clone(self)
end

function i3k_sbean.sect_query_res:decode(is)
	is:popString()
	self.overviews = is:popList(i3k_sbean.SectOverview)
end

function i3k_sbean.sect_query_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.overviews)
end


-- 搜索帮派信息响应协议
i3k_sbean.sect_searchbyid_res = i3k_class("sect_searchbyid_res")
function i3k_sbean.sect_searchbyid_res:ctor()
	self._pname_ = "sect_searchbyid_res"
	--self.overview:		SectOverview	
end

function i3k_sbean.sect_searchbyid_res:clone()
	return clone(self)
end

function i3k_sbean.sect_searchbyid_res:decode(is)
	is:popString()
	self.overview = is:pop(i3k_sbean.SectOverview)
end

function i3k_sbean.sect_searchbyid_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.overview)
end


-- 搜索帮派信息响应协议
i3k_sbean.sect_searchbyname_res = i3k_class("sect_searchbyname_res")
function i3k_sbean.sect_searchbyname_res:ctor()
	self._pname_ = "sect_searchbyname_res"
	--self.overview:		SectOverview	
end

function i3k_sbean.sect_searchbyname_res:clone()
	return clone(self)
end

function i3k_sbean.sect_searchbyname_res:decode(is)
	is:popString()
	self.overview = is:pop(i3k_sbean.SectOverview)
end

function i3k_sbean.sect_searchbyname_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.overview)
end


-- 申请加入帮派响应协议
i3k_sbean.sect_apply_res = i3k_class("sect_apply_res")
function i3k_sbean.sect_apply_res:ctor()
	self._pname_ = "sect_apply_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_apply_res:clone()
	return clone(self)
end

function i3k_sbean.sect_apply_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_apply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 快速申请加入帮派响应协议，返回新申请加入的帮派ID
i3k_sbean.sect_qapply_res = i3k_class("sect_qapply_res")
function i3k_sbean.sect_qapply_res:ctor()
	self._pname_ = "sect_qapply_res"
	--self.sects:		set[int32]	
end

function i3k_sbean.sect_qapply_res:clone()
	return clone(self)
end

function i3k_sbean.sect_qapply_res:decode(is)
	is:popString()
	self.sects = is:popNumberSet()
end

function i3k_sbean.sect_qapply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.sects)
end


-- 查询帮派成员响应协议(返回的帮派成员最后上线时间0为当前在线，-1为批准加入后一直未上线，大于0为最后上线时间)
i3k_sbean.sect_members_res = i3k_class("sect_members_res")
function i3k_sbean.sect_members_res:ctor()
	self._pname_ = "sect_members_res"
	--self.ok:		int32	
	--self.members:		SectMembers	
end

function i3k_sbean.sect_members_res:clone()
	return clone(self)
end

function i3k_sbean.sect_members_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.members = is:pop(i3k_sbean.SectMembers)
end

function i3k_sbean.sect_members_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.members)
end


-- 帮派申请列表响应协议
i3k_sbean.sect_applications_res = i3k_class("sect_applications_res")
function i3k_sbean.sect_applications_res:ctor()
	self._pname_ = "sect_applications_res"
	--self.ok:		int32	
	--self.applications:		vector[RoleOverview]	
end

function i3k_sbean.sect_applications_res:clone()
	return clone(self)
end

function i3k_sbean.sect_applications_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.applications = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.sect_applications_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.applications)
end


-- 帮派历史事件列表响应协议
i3k_sbean.sect_history_res = i3k_class("sect_history_res")
function i3k_sbean.sect_history_res:ctor()
	self._pname_ = "sect_history_res"
	--self.ok:		int32	
	--self.history:		vector[DBSectHistory]	
end

function i3k_sbean.sect_history_res:clone()
	return clone(self)
end

function i3k_sbean.sect_history_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.history = is:popList(i3k_sbean.DBSectHistory)
end

function i3k_sbean.sect_history_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.history)
end


-- 帮派管理同意或拒绝申请入帮响应协议
i3k_sbean.sect_appliedby_res = i3k_class("sect_appliedby_res")
function i3k_sbean.sect_appliedby_res:ctor()
	self._pname_ = "sect_appliedby_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_appliedby_res:clone()
	return clone(self)
end

function i3k_sbean.sect_appliedby_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_appliedby_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派管理同意或拒绝全部申请入帮响应协议
i3k_sbean.sect_appliedbyall_res = i3k_class("sect_appliedbyall_res")
function i3k_sbean.sect_appliedbyall_res:ctor()
	self._pname_ = "sect_appliedbyall_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_appliedbyall_res:clone()
	return clone(self)
end

function i3k_sbean.sect_appliedbyall_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_appliedbyall_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派管理踢出协议
i3k_sbean.sect_kick_res = i3k_class("sect_kick_res")
function i3k_sbean.sect_kick_res:ctor()
	self._pname_ = "sect_kick_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_kick_res:clone()
	return clone(self)
end

function i3k_sbean.sect_kick_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_kick_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 离开帮派协议
i3k_sbean.sect_leave_res = i3k_class("sect_leave_res")
function i3k_sbean.sect_leave_res:ctor()
	self._pname_ = "sect_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_leave_res:clone()
	return clone(self)
end

function i3k_sbean.sect_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解散帮派协议
i3k_sbean.sect_disband_res = i3k_class("sect_disband_res")
function i3k_sbean.sect_disband_res:ctor()
	self._pname_ = "sect_disband_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_disband_res:clone()
	return clone(self)
end

function i3k_sbean.sect_disband_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_disband_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派管理任命响应协议
i3k_sbean.sect_appoint_res = i3k_class("sect_appoint_res")
function i3k_sbean.sect_appoint_res:ctor()
	self._pname_ = "sect_appoint_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_appoint_res:clone()
	return clone(self)
end

function i3k_sbean.sect_appoint_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_appoint_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派宗旨协议
i3k_sbean.sect_changecreed_res = i3k_class("sect_changecreed_res")
function i3k_sbean.sect_changecreed_res:ctor()
	self._pname_ = "sect_changecreed_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_changecreed_res:clone()
	return clone(self)
end

function i3k_sbean.sect_changecreed_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_changecreed_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 修改帮派名字协议
i3k_sbean.sect_changename_res = i3k_class("sect_changename_res")
function i3k_sbean.sect_changename_res:ctor()
	self._pname_ = "sect_changename_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_changename_res:clone()
	return clone(self)
end

function i3k_sbean.sect_changename_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_changename_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 修改帮派图标协议
i3k_sbean.sect_changeicon_res = i3k_class("sect_changeicon_res")
function i3k_sbean.sect_changeicon_res:ctor()
	self._pname_ = "sect_changeicon_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_changeicon_res:clone()
	return clone(self)
end

function i3k_sbean.sect_changeicon_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_changeicon_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 修改帮派申请加入等级需求协议
i3k_sbean.sect_joinlvl_res = i3k_class("sect_joinlvl_res")
function i3k_sbean.sect_joinlvl_res:ctor()
	self._pname_ = "sect_joinlvl_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_joinlvl_res:clone()
	return clone(self)
end

function i3k_sbean.sect_joinlvl_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_joinlvl_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派发送邮件协议(返回1 是成功但没有扣元宝，2 是成功扣了元宝，0是失败，-1是失败且元宝不够)
i3k_sbean.sect_sendemail_res = i3k_class("sect_sendemail_res")
function i3k_sbean.sect_sendemail_res:ctor()
	self._pname_ = "sect_sendemail_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_sendemail_res:clone()
	return clone(self)
end

function i3k_sbean.sect_sendemail_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_sendemail_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派升级协议
i3k_sbean.sect_upgrade_res = i3k_class("sect_upgrade_res")
function i3k_sbean.sect_upgrade_res:ctor()
	self._pname_ = "sect_upgrade_res"
	--self.timestamp:		int32	
end

function i3k_sbean.sect_upgrade_res:clone()
	return clone(self)
end

function i3k_sbean.sect_upgrade_res:decode(is)
	is:popString()
	self.timestamp = is:popNumber()
end

function i3k_sbean.sect_upgrade_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.timestamp)
end


-- 帮派加速升级冷却协议
i3k_sbean.sect_accelerate_res = i3k_class("sect_accelerate_res")
function i3k_sbean.sect_accelerate_res:ctor()
	self._pname_ = "sect_accelerate_res"
	--self.timestamp:		int32	
end

function i3k_sbean.sect_accelerate_res:clone()
	return clone(self)
end

function i3k_sbean.sect_accelerate_res:decode(is)
	is:popString()
	self.timestamp = is:popNumber()
end

function i3k_sbean.sect_accelerate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.timestamp)
end


-- 帮派光环捐献道具增加经验点协议
i3k_sbean.sect_auraexpadd_res = i3k_class("sect_auraexpadd_res")
function i3k_sbean.sect_auraexpadd_res:ctor()
	self._pname_ = "sect_auraexpadd_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_auraexpadd_res:clone()
	return clone(self)
end

function i3k_sbean.sect_auraexpadd_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_auraexpadd_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派技能查询协议
i3k_sbean.sect_aurasync_res = i3k_class("sect_aurasync_res")
function i3k_sbean.sect_aurasync_res:ctor()
	self._pname_ = "sect_aurasync_res"
	--self.ok:		int32	
	--self.auras:		vector[DBSectAura]	
end

function i3k_sbean.sect_aurasync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_aurasync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.auras = is:popList(i3k_sbean.DBSectAura)
end

function i3k_sbean.sect_aurasync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.auras)
end


-- 帮派膜拜协议
i3k_sbean.sect_worship_res = i3k_class("sect_worship_res")
function i3k_sbean.sect_worship_res:ctor()
	self._pname_ = "sect_worship_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_worship_res:clone()
	return clone(self)
end

function i3k_sbean.sect_worship_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_worship_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派同步膜拜奖励协议
i3k_sbean.sect_syncworshipreward_res = i3k_class("sect_syncworshipreward_res")
function i3k_sbean.sect_syncworshipreward_res:ctor()
	self._pname_ = "sect_syncworshipreward_res"
	--self.ok:		int32	
	--self.data:		SectWorshipedData	
end

function i3k_sbean.sect_syncworshipreward_res:clone()
	return clone(self)
end

function i3k_sbean.sect_syncworshipreward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.data = is:pop(i3k_sbean.SectWorshipedData)
end

function i3k_sbean.sect_syncworshipreward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.data)
end


-- 帮派领取膜拜奖励协议
i3k_sbean.sect_takeworshipreward_res = i3k_class("sect_takeworshipreward_res")
function i3k_sbean.sect_takeworshipreward_res:ctor()
	self._pname_ = "sect_takeworshipreward_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_takeworshipreward_res:clone()
	return clone(self)
end

function i3k_sbean.sect_takeworshipreward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_takeworshipreward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派开启宴席协议
i3k_sbean.sect_openbanquet_res = i3k_class("sect_openbanquet_res")
function i3k_sbean.sect_openbanquet_res:ctor()
	self._pname_ = "sect_openbanquet_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_openbanquet_res:clone()
	return clone(self)
end

function i3k_sbean.sect_openbanquet_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_openbanquet_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派宴席列表协议
i3k_sbean.sect_listbanquet_res = i3k_class("sect_listbanquet_res")
function i3k_sbean.sect_listbanquet_res:ctor()
	self._pname_ = "sect_listbanquet_res"
	--self.ok:		int32	
	--self.banquets:		vector[SectBanquet]	
end

function i3k_sbean.sect_listbanquet_res:clone()
	return clone(self)
end

function i3k_sbean.sect_listbanquet_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.banquets = is:popList(i3k_sbean.SectBanquet)
end

function i3k_sbean.sect_listbanquet_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.banquets)
end


-- 帮派帮派宴席协议
i3k_sbean.sect_joinbanquet_res = i3k_class("sect_joinbanquet_res")
function i3k_sbean.sect_joinbanquet_res:ctor()
	self._pname_ = "sect_joinbanquet_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_joinbanquet_res:clone()
	return clone(self)
end

function i3k_sbean.sect_joinbanquet_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_joinbanquet_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派商城同步协议
i3k_sbean.sect_shopsync_res = i3k_class("sect_shopsync_res")
function i3k_sbean.sect_shopsync_res:ctor()
	self._pname_ = "sect_shopsync_res"
	--self.info:		ShopInfo	
	--self.currency:		int32	
	--self.currency2:		int32	
	--self.OwnedCity:		int32	
	--self.discount:		ShopDiscountInfo	
end

function i3k_sbean.sect_shopsync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_shopsync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
	self.currency = is:popNumber()
	self.currency2 = is:popNumber()
	self.OwnedCity = is:popNumber()
	self.discount = is:pop(i3k_sbean.ShopDiscountInfo)
end

function i3k_sbean.sect_shopsync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumber(self.currency)
	os:pushNumber(self.currency2)
	os:pushNumber(self.OwnedCity)
	os:push(self.discount)
end


-- 帮派商城刷新协议
i3k_sbean.sect_shoprefresh_res = i3k_class("sect_shoprefresh_res")
function i3k_sbean.sect_shoprefresh_res:ctor()
	self._pname_ = "sect_shoprefresh_res"
	--self.info:		ShopInfo	
end

function i3k_sbean.sect_shoprefresh_res:clone()
	return clone(self)
end

function i3k_sbean.sect_shoprefresh_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
end

function i3k_sbean.sect_shoprefresh_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 帮派商城买商品协议
i3k_sbean.sect_shopbuy_res = i3k_class("sect_shopbuy_res")
function i3k_sbean.sect_shopbuy_res:ctor()
	self._pname_ = "sect_shopbuy_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_shopbuy_res:clone()
	return clone(self)
end

function i3k_sbean.sect_shopbuy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_shopbuy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知客户端帮派副本开始
i3k_sbean.role_sectmap_start = i3k_class("role_sectmap_start")
function i3k_sbean.role_sectmap_start:ctor()
	self._pname_ = "role_sectmap_start"
	--self.mapId:		int32	
end

function i3k_sbean.role_sectmap_start:clone()
	return clone(self)
end

function i3k_sbean.role_sectmap_start:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.role_sectmap_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 通知客户端帮派副本结束
i3k_sbean.role_sectmap_end = i3k_class("role_sectmap_end")
function i3k_sbean.role_sectmap_end:ctor()
	self._pname_ = "role_sectmap_end"
	--self.mapId:		int32	
	--self.progress:		int32	
end

function i3k_sbean.role_sectmap_end:clone()
	return clone(self)
end

function i3k_sbean.role_sectmap_end:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.progress = is:popNumber()
end

function i3k_sbean.role_sectmap_end:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.progress)
end


-- 通知客户端帮派副本结束 extraReward 额外奖励帮贡值
i3k_sbean.role_sectmap_result = i3k_class("role_sectmap_result")
function i3k_sbean.role_sectmap_result:ctor()
	self._pname_ = "role_sectmap_result"
	--self.mapId:		int32	
	--self.progress:		int32	
	--self.damage:		int32	
	--self.accDamageRank:		int32	
	--self.maxDamageRank:		int32	
	--self.extraReward:		int32	
	--self.items:		map[int32,int32]	
	--self.goldReward:		int32	
end

function i3k_sbean.role_sectmap_result:clone()
	return clone(self)
end

function i3k_sbean.role_sectmap_result:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.progress = is:popNumber()
	self.damage = is:popNumber()
	self.accDamageRank = is:popNumber()
	self.maxDamageRank = is:popNumber()
	self.extraReward = is:popNumber()
	self.items = is:popNumberNumberMap()
	self.goldReward = is:popNumber()
end

function i3k_sbean.role_sectmap_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.progress)
	os:pushNumber(self.damage)
	os:pushNumber(self.accDamageRank)
	os:pushNumber(self.maxDamageRank)
	os:pushNumber(self.extraReward)
	os:pushNumberNumberMap(self.items)
	os:pushNumber(self.goldReward)
end


-- 进入帮派副本挑战协议
i3k_sbean.sectmap_start_res = i3k_class("sectmap_start_res")
function i3k_sbean.sectmap_start_res:ctor()
	self._pname_ = "sectmap_start_res"
	--self.ok:		int32	
end

function i3k_sbean.sectmap_start_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sectmap_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派副本完成过的状态协议, map的key是当前所有已经开启过的副本Id，value按照位表示为：第0位为是否通关过，第1位为当前是否正在开启
i3k_sbean.sectmap_status_res = i3k_class("sectmap_status_res")
function i3k_sbean.sectmap_status_res:ctor()
	self._pname_ = "sectmap_status_res"
	--self.ok:		int32	
	--self.finsihed:		map[int32, int32]	
end

function i3k_sbean.sectmap_status_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_status_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.finsihed = is:popNumberNumberMap()
end

function i3k_sbean.sectmap_status_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.finsihed)
end


-- 查询帮派副本进度协议 hp-1为未开启，hp为10000为已完成，hp大于等于0为正在进行中,hp值不超过10000是万分比数值
i3k_sbean.sectmap_query_res = i3k_class("sectmap_query_res")
function i3k_sbean.sectmap_query_res:ctor()
	self._pname_ = "sectmap_query_res"
	--self.ok:		int32	
	--self.status:		SectMapStatus	
end

function i3k_sbean.sectmap_query_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_query_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.status = is:pop(i3k_sbean.SectMapStatus)
end

function i3k_sbean.sectmap_query_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.status)
end


-- 帮派开启或重置副本协议
i3k_sbean.sectmap_open_res = i3k_class("sectmap_open_res")
function i3k_sbean.sectmap_open_res:ctor()
	self._pname_ = "sectmap_open_res"
	--self.ok:		int32	
end

function i3k_sbean.sectmap_open_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sectmap_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 所有帮派副本奖励已分配日志记录
i3k_sbean.sectmap_rewards_res = i3k_class("sectmap_rewards_res")
function i3k_sbean.sectmap_rewards_res:ctor()
	self._pname_ = "sectmap_rewards_res"
	--self.ok:		int32	
	--self.logs:		vector[SectMapRewardsLog]	
end

function i3k_sbean.sectmap_rewards_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_rewards_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.logs = is:popList(i3k_sbean.SectMapRewardsLog)
end

function i3k_sbean.sectmap_rewards_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.logs)
end


-- 当前帮派副本申请奖励协议
i3k_sbean.sectmap_apply_res = i3k_class("sectmap_apply_res")
function i3k_sbean.sectmap_apply_res:ctor()
	self._pname_ = "sectmap_apply_res"
	--self.ok:		int32	
end

function i3k_sbean.sectmap_apply_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_apply_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sectmap_apply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 当前帮派副本自取奖励
i3k_sbean.sectmap_reward_self_take_res = i3k_class("sectmap_reward_self_take_res")
function i3k_sbean.sectmap_reward_self_take_res:ctor()
	self._pname_ = "sectmap_reward_self_take_res"
	--self.ok:		int32	
end

function i3k_sbean.sectmap_reward_self_take_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_reward_self_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sectmap_reward_self_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 当前帮派副本奖励分配信息
i3k_sbean.sectmap_allocation_res = i3k_class("sectmap_allocation_res")
function i3k_sbean.sectmap_allocation_res:ctor()
	self._pname_ = "sectmap_allocation_res"
	--self.ok:		int32	
	--self.allocation:		SectMapAllocation	
end

function i3k_sbean.sectmap_allocation_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_allocation_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.allocation = is:pop(i3k_sbean.SectMapAllocation)
end

function i3k_sbean.sectmap_allocation_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.allocation)
end


-- 当前帮派副本伤害输出信息
i3k_sbean.sectmap_damage_res = i3k_class("sectmap_damage_res")
function i3k_sbean.sectmap_damage_res:ctor()
	self._pname_ = "sectmap_damage_res"
	--self.ok:		int32	
	--self.damage:		SectMapDamage	
end

function i3k_sbean.sectmap_damage_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_damage_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.damage = is:pop(i3k_sbean.SectMapDamage)
end

function i3k_sbean.sectmap_damage_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.damage)
end


-- 当前帮派副本伤害输出信息
i3k_sbean.sectmap_damage_query_sync = i3k_class("sectmap_damage_query_sync")
function i3k_sbean.sectmap_damage_query_sync:ctor()
	self._pname_ = "sectmap_damage_query_sync"
	--self.damage:		int32	
end

function i3k_sbean.sectmap_damage_query_sync:clone()
	return clone(self)
end

function i3k_sbean.sectmap_damage_query_sync:decode(is)
	is:popString()
	self.damage = is:popNumber()
end

function i3k_sbean.sectmap_damage_query_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.damage)
end


-- 帮派副本同步进度协议
i3k_sbean.sectmap_sync_res = i3k_class("sectmap_sync_res")
function i3k_sbean.sectmap_sync_res:ctor()
	self._pname_ = "sectmap_sync_res"
	--self.ok:		int32	
	--self.info:		SectMapInfo	
end

function i3k_sbean.sectmap_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sectmap_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.SectMapInfo)
end

function i3k_sbean.sectmap_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 帮派个人任务详细信息结果
i3k_sbean.sect_task_sync_res = i3k_class("sect_task_sync_res")
function i3k_sbean.sect_task_sync_res:ctor()
	self._pname_ = "sect_task_sync_res"
	--self.sectTask:		SectSelfTaskInfo	
end

function i3k_sbean.sect_task_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_task_sync_res:decode(is)
	is:popString()
	self.sectTask = is:pop(i3k_sbean.SectSelfTaskInfo)
end

function i3k_sbean.sect_task_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.sectTask)
end


-- 帮派共享任务详细信息结果分包开始
i3k_sbean.sect_share_task_sync_start = i3k_class("sect_share_task_sync_start")
function i3k_sbean.sect_share_task_sync_start:ctor()
	self._pname_ = "sect_share_task_sync_start"
	--self.stCancelTime:		int32	
end

function i3k_sbean.sect_share_task_sync_start:clone()
	return clone(self)
end

function i3k_sbean.sect_share_task_sync_start:decode(is)
	is:popString()
	self.stCancelTime = is:popNumber()
end

function i3k_sbean.sect_share_task_sync_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.stCancelTime)
end


-- 帮派共享任务详细信息结果分包信息
i3k_sbean.sect_share_task_sync_info = i3k_class("sect_share_task_sync_info")
function i3k_sbean.sect_share_task_sync_info:ctor()
	self._pname_ = "sect_share_task_sync_info"
	--self.tasks:		vector[SectSharedTask]	
end

function i3k_sbean.sect_share_task_sync_info:clone()
	return clone(self)
end

function i3k_sbean.sect_share_task_sync_info:decode(is)
	is:popString()
	self.tasks = is:popList(i3k_sbean.SectSharedTask)
end

function i3k_sbean.sect_share_task_sync_info:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.tasks)
end


-- 帮派共享任务详细信息结果分包结束
i3k_sbean.sect_share_task_sync_end = i3k_class("sect_share_task_sync_end")
function i3k_sbean.sect_share_task_sync_end:ctor()
	self._pname_ = "sect_share_task_sync_end"
end

function i3k_sbean.sect_share_task_sync_end:decode(is)
	is:popString()
end

function i3k_sbean.sect_share_task_sync_end:encode(os)
	os:pushString(self._pname_)
end


-- 帮派共享任务详细信息结果
i3k_sbean.sect_share_task_sync_res = i3k_class("sect_share_task_sync_res")
function i3k_sbean.sect_share_task_sync_res:ctor()
	self._pname_ = "sect_share_task_sync_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_share_task_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_share_task_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_share_task_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派完成的个人任务详细信息结果
i3k_sbean.sect_finish_task_sync_res = i3k_class("sect_finish_task_sync_res")
function i3k_sbean.sect_finish_task_sync_res:ctor()
	self._pname_ = "sect_finish_task_sync_res"
	--self.tasks:		SectFinishedTaskRes	
end

function i3k_sbean.sect_finish_task_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_finish_task_sync_res:decode(is)
	is:popString()
	self.tasks = is:pop(i3k_sbean.SectFinishedTaskRes)
end

function i3k_sbean.sect_finish_task_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.tasks)
end


-- 帮派任务接取结果
i3k_sbean.sect_task_receive_res = i3k_class("sect_task_receive_res")
function i3k_sbean.sect_task_receive_res:ctor()
	self._pname_ = "sect_task_receive_res"
	--self.receiveTime:		int32	
end

function i3k_sbean.sect_task_receive_res:clone()
	return clone(self)
end

function i3k_sbean.sect_task_receive_res:decode(is)
	is:popString()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.sect_task_receive_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.receiveTime)
end


-- 帮派任务取消结果
i3k_sbean.sect_task_cancel_res = i3k_class("sect_task_cancel_res")
function i3k_sbean.sect_task_cancel_res:ctor()
	self._pname_ = "sect_task_cancel_res"
	--self.ok:		int32	
	--self.stCancelTime:		int32	
end

function i3k_sbean.sect_task_cancel_res:clone()
	return clone(self)
end

function i3k_sbean.sect_task_cancel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.stCancelTime = is:popNumber()
end

function i3k_sbean.sect_task_cancel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.stCancelTime)
end


-- 帮派任务完成结果
i3k_sbean.sect_task_finish_res = i3k_class("sect_task_finish_res")
function i3k_sbean.sect_task_finish_res:ctor()
	self._pname_ = "sect_task_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_task_finish_res:clone()
	return clone(self)
end

function i3k_sbean.sect_task_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_task_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派任务共享结果
i3k_sbean.sect_task_issuance_res = i3k_class("sect_task_issuance_res")
function i3k_sbean.sect_task_issuance_res:ctor()
	self._pname_ = "sect_task_issuance_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_task_issuance_res:clone()
	return clone(self)
end

function i3k_sbean.sect_task_issuance_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_task_issuance_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派任务重置
i3k_sbean.sect_task_reset_res = i3k_class("sect_task_reset_res")
function i3k_sbean.sect_task_reset_res:ctor()
	self._pname_ = "sect_task_reset_res"
	--self.tasks:		vector[SectTask]	
end

function i3k_sbean.sect_task_reset_res:clone()
	return clone(self)
end

function i3k_sbean.sect_task_reset_res:decode(is)
	is:popString()
	self.tasks = is:popList(i3k_sbean.SectTask)
end

function i3k_sbean.sect_task_reset_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.tasks)
end


-- 帮派任务完成奖励
i3k_sbean.sect_task_done_rewards_res = i3k_class("sect_task_done_rewards_res")
function i3k_sbean.sect_task_done_rewards_res:ctor()
	self._pname_ = "sect_task_done_rewards_res"
	--self.ok:		int32	
	--self.taskRewards:		SectTaskReward	
end

function i3k_sbean.sect_task_done_rewards_res:clone()
	return clone(self)
end

function i3k_sbean.sect_task_done_rewards_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.taskRewards = is:pop(i3k_sbean.SectTaskReward)
end

function i3k_sbean.sect_task_done_rewards_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.taskRewards)
end


-- 快速完成帮派任务响应
i3k_sbean.sect_quick_finish_task_res = i3k_class("sect_quick_finish_task_res")
function i3k_sbean.sect_quick_finish_task_res:ctor()
	self._pname_ = "sect_quick_finish_task_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_quick_finish_task_res:clone()
	return clone(self)
end

function i3k_sbean.sect_quick_finish_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_quick_finish_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 荣耀商路当前任务
i3k_sbean.sect_trade_route_curtask = i3k_class("sect_trade_route_curtask")
function i3k_sbean.sect_trade_route_curtask:ctor()
	self._pname_ = "sect_trade_route_curtask"
	--self.lvl:		int32	
	--self.taskID:		int32	
	--self.curValue:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.sect_trade_route_curtask:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_curtask:decode(is)
	is:popString()
	self.lvl = is:popNumber()
	self.taskID = is:popNumber()
	self.curValue = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.sect_trade_route_curtask:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.lvl)
	os:pushNumber(self.taskID)
	os:pushNumber(self.curValue)
	os:pushNumber(self.receiveTime)
end


-- 荣耀商路同步
i3k_sbean.sect_trade_route_sync_res = i3k_class("sect_trade_route_sync_res")
function i3k_sbean.sect_trade_route_sync_res:ctor()
	self._pname_ = "sect_trade_route_sync_res"
	--self.sectTradRoute:		DBRoleSectTradeRoute	
end

function i3k_sbean.sect_trade_route_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_sync_res:decode(is)
	is:popString()
	self.sectTradRoute = is:pop(i3k_sbean.DBRoleSectTradeRoute)
end

function i3k_sbean.sect_trade_route_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.sectTradRoute)
end


-- 荣耀商路任务接取结果
i3k_sbean.sect_trade_route_receive_res = i3k_class("sect_trade_route_receive_res")
function i3k_sbean.sect_trade_route_receive_res:ctor()
	self._pname_ = "sect_trade_route_receive_res"
	--self.receiveTime:		int32	
end

function i3k_sbean.sect_trade_route_receive_res:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_receive_res:decode(is)
	is:popString()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.sect_trade_route_receive_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.receiveTime)
end


-- 荣耀商路任务取消结果
i3k_sbean.sect_trade_route_cancel_res = i3k_class("sect_trade_route_cancel_res")
function i3k_sbean.sect_trade_route_cancel_res:ctor()
	self._pname_ = "sect_trade_route_cancel_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_trade_route_cancel_res:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_cancel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_trade_route_cancel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 荣耀商路任务完成结果
i3k_sbean.sect_trade_route_finish_res = i3k_class("sect_trade_route_finish_res")
function i3k_sbean.sect_trade_route_finish_res:ctor()
	self._pname_ = "sect_trade_route_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_trade_route_finish_res:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_trade_route_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 荣耀商路买星结果
i3k_sbean.sect_trade_route_buy_star_res = i3k_class("sect_trade_route_buy_star_res")
function i3k_sbean.sect_trade_route_buy_star_res:ctor()
	self._pname_ = "sect_trade_route_buy_star_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_trade_route_buy_star_res:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_buy_star_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_trade_route_buy_star_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 荣耀商路快速完成任务
i3k_sbean.sect_trade_route_one_key_finish_res = i3k_class("sect_trade_route_one_key_finish_res")
function i3k_sbean.sect_trade_route_one_key_finish_res:ctor()
	self._pname_ = "sect_trade_route_one_key_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_trade_route_one_key_finish_res:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_one_key_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_trade_route_one_key_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步帮派助战信息(members 没有帮派时为null)
i3k_sbean.sect_assist_sync_res = i3k_class("sect_assist_sync_res")
function i3k_sbean.sect_assist_sync_res:ctor()
	self._pname_ = "sect_assist_sync_res"
	--self.members:		vector[SectAssist]	
end

function i3k_sbean.sect_assist_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_assist_sync_res:decode(is)
	is:popString()
	self.members = is:popList(i3k_sbean.SectAssist)
end

function i3k_sbean.sect_assist_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.members)
end


-- 登记帮派助战
i3k_sbean.sect_assist_join_res = i3k_class("sect_assist_join_res")
function i3k_sbean.sect_assist_join_res:ctor()
	self._pname_ = "sect_assist_join_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_assist_join_res:clone()
	return clone(self)
end

function i3k_sbean.sect_assist_join_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_assist_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解除帮派助战登记
i3k_sbean.sect_assist_quit_res = i3k_class("sect_assist_quit_res")
function i3k_sbean.sect_assist_quit_res:ctor()
	self._pname_ = "sect_assist_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_assist_quit_res:clone()
	return clone(self)
end

function i3k_sbean.sect_assist_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_assist_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 邀请帮派助战登记
i3k_sbean.sect_assist_apply_res = i3k_class("sect_assist_apply_res")
function i3k_sbean.sect_assist_apply_res:ctor()
	self._pname_ = "sect_assist_apply_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_assist_apply_res:clone()
	return clone(self)
end

function i3k_sbean.sect_assist_apply_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_assist_apply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 移除帮派助战
i3k_sbean.sect_assist_kick_res = i3k_class("sect_assist_kick_res")
function i3k_sbean.sect_assist_kick_res:ctor()
	self._pname_ = "sect_assist_kick_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_assist_kick_res:clone()
	return clone(self)
end

function i3k_sbean.sect_assist_kick_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_assist_kick_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 自创武功信息
i3k_sbean.diyskill_sync_res = i3k_class("diyskill_sync_res")
function i3k_sbean.diyskill_sync_res:ctor()
	self._pname_ = "diyskill_sync_res"
	--self.diySkill:		DBShareDiySkillData	
end

function i3k_sbean.diyskill_sync_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_sync_res:decode(is)
	is:popString()
	self.diySkill = is:pop(i3k_sbean.DBShareDiySkillData)
end

function i3k_sbean.diyskill_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.diySkill)
end


-- 自创武功完成
i3k_sbean.diyskill_create_res = i3k_class("diyskill_create_res")
function i3k_sbean.diyskill_create_res:ctor()
	self._pname_ = "diyskill_create_res"
	--self.diySkill:		DBDIYSkillData	
end

function i3k_sbean.diyskill_create_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_create_res:decode(is)
	is:popString()
	self.diySkill = is:pop(i3k_sbean.DBDIYSkillData)
end

function i3k_sbean.diyskill_create_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.diySkill)
end


-- 保存创建的自创武功
i3k_sbean.diyskill_save_res = i3k_class("diyskill_save_res")
function i3k_sbean.diyskill_save_res:ctor()
	self._pname_ = "diyskill_save_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_save_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_save_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_save_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 遗忘
i3k_sbean.diyskill_discard_res = i3k_class("diyskill_discard_res")
function i3k_sbean.diyskill_discard_res:ctor()
	self._pname_ = "diyskill_discard_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_discard_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_discard_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_discard_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备自创技能
i3k_sbean.diyskill_selectuse_res = i3k_class("diyskill_selectuse_res")
function i3k_sbean.diyskill_selectuse_res:ctor()
	self._pname_ = "diyskill_selectuse_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_selectuse_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_selectuse_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_selectuse_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 卸下自创技能
i3k_sbean.diyskill_canceluse_res = i3k_class("diyskill_canceluse_res")
function i3k_sbean.diyskill_canceluse_res:ctor()
	self._pname_ = "diyskill_canceluse_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_canceluse_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_canceluse_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_canceluse_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解锁槽
i3k_sbean.diyskill_unlock_res = i3k_class("diyskill_unlock_res")
function i3k_sbean.diyskill_unlock_res:ctor()
	self._pname_ = "diyskill_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 购买学习次数
i3k_sbean.diyskill_buytimes_res = i3k_class("diyskill_buytimes_res")
function i3k_sbean.diyskill_buytimes_res:ctor()
	self._pname_ = "diyskill_buytimes_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_buytimes_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_buytimes_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_buytimes_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 自创武功分享
i3k_sbean.diyskill_share_res = i3k_class("diyskill_share_res")
function i3k_sbean.diyskill_share_res:ctor()
	self._pname_ = "diyskill_share_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_share_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_share_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_share_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 自创武功取消分享
i3k_sbean.diyskill_cancelshare_res = i3k_class("diyskill_cancelshare_res")
function i3k_sbean.diyskill_cancelshare_res:ctor()
	self._pname_ = "diyskill_cancelshare_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_cancelshare_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_cancelshare_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_cancelshare_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 自创武功借用
i3k_sbean.diyskill_borrow_res = i3k_class("diyskill_borrow_res")
function i3k_sbean.diyskill_borrow_res:ctor()
	self._pname_ = "diyskill_borrow_res"
	--self.ok:		int32	
	--self.diyskill:		DBDiySkill	
end

function i3k_sbean.diyskill_borrow_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_borrow_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.diyskill = is:pop(i3k_sbean.DBDiySkill)
end

function i3k_sbean.diyskill_borrow_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.diyskill)
end


-- 自创武功炫耀
i3k_sbean.diyskill_flaunt_res = i3k_class("diyskill_flaunt_res")
function i3k_sbean.diyskill_flaunt_res:ctor()
	self._pname_ = "diyskill_flaunt_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_flaunt_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_flaunt_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_flaunt_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 自创武功领取共享奖励
i3k_sbean.diyskill_shareaward_res = i3k_class("diyskill_shareaward_res")
function i3k_sbean.diyskill_shareaward_res:ctor()
	self._pname_ = "diyskill_shareaward_res"
	--self.ok:		int32	
end

function i3k_sbean.diyskill_shareaward_res:clone()
	return clone(self)
end

function i3k_sbean.diyskill_shareaward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.diyskill_shareaward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步是否推送帮派申请数量
i3k_sbean.sect_push_application_res = i3k_class("sect_push_application_res")
function i3k_sbean.sect_push_application_res:ctor()
	self._pname_ = "sect_push_application_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_push_application_res:clone()
	return clone(self)
end

function i3k_sbean.sect_push_application_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_push_application_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 套装购买
i3k_sbean.suite_buy_res = i3k_class("suite_buy_res")
function i3k_sbean.suite_buy_res:ctor()
	self._pname_ = "suite_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.suite_buy_res:clone()
	return clone(self)
end

function i3k_sbean.suite_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.suite_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 买物品
i3k_sbean.store_buy_res = i3k_class("store_buy_res")
function i3k_sbean.store_buy_res:ctor()
	self._pname_ = "store_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.store_buy_res:clone()
	return clone(self)
end

function i3k_sbean.store_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.store_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.teleport_npc_res = i3k_class("teleport_npc_res")
function i3k_sbean.teleport_npc_res:ctor()
	self._pname_ = "teleport_npc_res"
	--self.ok:		int32	
end

function i3k_sbean.teleport_npc_res:clone()
	return clone(self)
end

function i3k_sbean.teleport_npc_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.teleport_npc_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.teleport_monster_res = i3k_class("teleport_monster_res")
function i3k_sbean.teleport_monster_res:ctor()
	self._pname_ = "teleport_monster_res"
	--self.ok:		int32	
end

function i3k_sbean.teleport_monster_res:clone()
	return clone(self)
end

function i3k_sbean.teleport_monster_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.teleport_monster_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.teleport_spawnmonster_res = i3k_class("teleport_spawnmonster_res")
function i3k_sbean.teleport_spawnmonster_res:ctor()
	self._pname_ = "teleport_spawnmonster_res"
	--self.ok:		int32	
end

function i3k_sbean.teleport_spawnmonster_res:clone()
	return clone(self)
end

function i3k_sbean.teleport_spawnmonster_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.teleport_spawnmonster_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.teleport_mineral_res = i3k_class("teleport_mineral_res")
function i3k_sbean.teleport_mineral_res:ctor()
	self._pname_ = "teleport_mineral_res"
	--self.ok:		int32	
end

function i3k_sbean.teleport_mineral_res:clone()
	return clone(self)
end

function i3k_sbean.teleport_mineral_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.teleport_mineral_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.arena_attacked = i3k_class("arena_attacked")
function i3k_sbean.arena_attacked:ctor()
	self._pname_ = "arena_attacked"
end

function i3k_sbean.arena_attacked:decode(is)
	is:popString()
end

function i3k_sbean.arena_attacked:encode(os)
	os:pushString(self._pname_)
end


-- 同步竞技场主界面信息
i3k_sbean.arena_sync_res = i3k_class("arena_sync_res")
function i3k_sbean.arena_sync_res:ctor()
	self._pname_ = "arena_sync_res"
	--self.info:		ArenaStateInfo	
end

function i3k_sbean.arena_sync_res:clone()
	return clone(self)
end

function i3k_sbean.arena_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ArenaStateInfo)
end

function i3k_sbean.arena_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 设置方式阵容
i3k_sbean.arena_setpets_res = i3k_class("arena_setpets_res")
function i3k_sbean.arena_setpets_res:ctor()
	self._pname_ = "arena_setpets_res"
	--self.ok:		int32	
end

function i3k_sbean.arena_setpets_res:clone()
	return clone(self)
end

function i3k_sbean.arena_setpets_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.arena_setpets_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 排行榜
i3k_sbean.arena_ranks_res = i3k_class("arena_ranks_res")
function i3k_sbean.arena_ranks_res:ctor()
	self._pname_ = "arena_ranks_res"
	--self.ranks:		vector[RoleSocial]	
end

function i3k_sbean.arena_ranks_res:clone()
	return clone(self)
end

function i3k_sbean.arena_ranks_res:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.RoleSocial)
end

function i3k_sbean.arena_ranks_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
end


-- 换一换
i3k_sbean.arena_refresh_res = i3k_class("arena_refresh_res")
function i3k_sbean.arena_refresh_res:ctor()
	self._pname_ = "arena_refresh_res"
	--self.enemies:		map[int32, BattleEnemyOverview]	
end

function i3k_sbean.arena_refresh_res:clone()
	return clone(self)
end

function i3k_sbean.arena_refresh_res:decode(is)
	is:popString()
	self.enemies = is:popNumberMap(i3k_sbean.BattleEnemyOverview)
end

function i3k_sbean.arena_refresh_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.enemies)
end


-- 获取竞技场防守阵容
i3k_sbean.arena_defencepets_res = i3k_class("arena_defencepets_res")
function i3k_sbean.arena_defencepets_res:ctor()
	self._pname_ = "arena_defencepets_res"
	--self.pets:		vector[PetOverview]	
	--self.hideDefence:		int8	
end

function i3k_sbean.arena_defencepets_res:clone()
	return clone(self)
end

function i3k_sbean.arena_defencepets_res:decode(is)
	is:popString()
	self.pets = is:popList(i3k_sbean.PetOverview)
	self.hideDefence = is:popNumber()
end

function i3k_sbean.arena_defencepets_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.pets)
	os:pushNumber(self.hideDefence)
end


-- 重置挑战时间回应
i3k_sbean.arena_resetcool_res = i3k_class("arena_resetcool_res")
function i3k_sbean.arena_resetcool_res:ctor()
	self._pname_ = "arena_resetcool_res"
	--self.ok:		int32	
end

function i3k_sbean.arena_resetcool_res:clone()
	return clone(self)
end

function i3k_sbean.arena_resetcool_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.arena_resetcool_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 购买次数回应
i3k_sbean.arena_buytimes_res = i3k_class("arena_buytimes_res")
function i3k_sbean.arena_buytimes_res:ctor()
	self._pname_ = "arena_buytimes_res"
	--self.ok:		int32	
end

function i3k_sbean.arena_buytimes_res:clone()
	return clone(self)
end

function i3k_sbean.arena_buytimes_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.arena_buytimes_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 竞技场商城同步协议
i3k_sbean.arena_shopsync_res = i3k_class("arena_shopsync_res")
function i3k_sbean.arena_shopsync_res:ctor()
	self._pname_ = "arena_shopsync_res"
	--self.info:		ShopInfo	
	--self.currency:		int32	
	--self.currency2:		int32	
	--self.discount:		ShopDiscountInfo	
end

function i3k_sbean.arena_shopsync_res:clone()
	return clone(self)
end

function i3k_sbean.arena_shopsync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
	self.currency = is:popNumber()
	self.currency2 = is:popNumber()
	self.discount = is:pop(i3k_sbean.ShopDiscountInfo)
end

function i3k_sbean.arena_shopsync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumber(self.currency)
	os:pushNumber(self.currency2)
	os:push(self.discount)
end


-- 竞技场商城刷新协议
i3k_sbean.arena_shoprefresh_res = i3k_class("arena_shoprefresh_res")
function i3k_sbean.arena_shoprefresh_res:ctor()
	self._pname_ = "arena_shoprefresh_res"
	--self.info:		ShopInfo	
end

function i3k_sbean.arena_shoprefresh_res:clone()
	return clone(self)
end

function i3k_sbean.arena_shoprefresh_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
end

function i3k_sbean.arena_shoprefresh_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 竞技场商城买商品协议
i3k_sbean.arena_shopbuy_res = i3k_class("arena_shopbuy_res")
function i3k_sbean.arena_shopbuy_res:ctor()
	self._pname_ = "arena_shopbuy_res"
	--self.ok:		int32	
end

function i3k_sbean.arena_shopbuy_res:clone()
	return clone(self)
end

function i3k_sbean.arena_shopbuy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.arena_shopbuy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知客户端竞技场副本开始
i3k_sbean.role_arenamap_start = i3k_class("role_arenamap_start")
function i3k_sbean.role_arenamap_start:ctor()
	self._pname_ = "role_arenamap_start"
end

function i3k_sbean.role_arenamap_start:decode(is)
	is:popString()
end

function i3k_sbean.role_arenamap_start:encode(os)
	os:pushString(self._pname_)
end


-- 通知客户端竞技场副本结束
i3k_sbean.role_arenamap_end = i3k_class("role_arenamap_end")
function i3k_sbean.role_arenamap_end:ctor()
	self._pname_ = "role_arenamap_end"
end

function i3k_sbean.role_arenamap_end:decode(is)
	is:popString()
end

function i3k_sbean.role_arenamap_end:encode(os)
	os:pushString(self._pname_)
end


-- 同步战斗结果
i3k_sbean.role_arena_result = i3k_class("role_arena_result")
function i3k_sbean.role_arena_result:ctor()
	self._pname_ = "role_arena_result"
	--self.win:		int32	
	--self.selfRank:		int32	
	--self.targetRank:		int32	
	--self.defendingSide:		RoleOverview	
end

function i3k_sbean.role_arena_result:clone()
	return clone(self)
end

function i3k_sbean.role_arena_result:decode(is)
	is:popString()
	self.win = is:popNumber()
	self.selfRank = is:popNumber()
	self.targetRank = is:popNumber()
	self.defendingSide = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.role_arena_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.win)
	os:pushNumber(self.selfRank)
	os:pushNumber(self.targetRank)
	os:push(self.defendingSide)
end


-- 开始战斗回应
i3k_sbean.arena_startattack_res = i3k_class("arena_startattack_res")
function i3k_sbean.arena_startattack_res:ctor()
	self._pname_ = "arena_startattack_res"
	--self.ok:		int32	
end

function i3k_sbean.arena_startattack_res:clone()
	return clone(self)
end

function i3k_sbean.arena_startattack_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.arena_startattack_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 战报回应
i3k_sbean.arena_log_res = i3k_class("arena_log_res")
function i3k_sbean.arena_log_res:ctor()
	self._pname_ = "arena_log_res"
	--self.logs:		vector[DBRoleArenaLog]	
end

function i3k_sbean.arena_log_res:clone()
	return clone(self)
end

function i3k_sbean.arena_log_res:decode(is)
	is:popString()
	self.logs = is:popList(i3k_sbean.DBRoleArenaLog)
end

function i3k_sbean.arena_log_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.logs)
end


-- 同步积分奖励回应
i3k_sbean.arena_scoresync_res = i3k_class("arena_scoresync_res")
function i3k_sbean.arena_scoresync_res:ctor()
	self._pname_ = "arena_scoresync_res"
	--self.score:		int32	
	--self.takenScores:		vector[int32]	
end

function i3k_sbean.arena_scoresync_res:clone()
	return clone(self)
end

function i3k_sbean.arena_scoresync_res:decode(is)
	is:popString()
	self.score = is:popNumber()
	self.takenScores = is:popNumberList()
end

function i3k_sbean.arena_scoresync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
	os:pushNumberList(self.takenScores)
end


-- 领取竞技场积分奖励回应
i3k_sbean.arena_takescore_res = i3k_class("arena_takescore_res")
function i3k_sbean.arena_takescore_res:ctor()
	self._pname_ = "arena_takescore_res"
	--self.ok:		int32	
end

function i3k_sbean.arena_takescore_res:clone()
	return clone(self)
end

function i3k_sbean.arena_takescore_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.arena_takescore_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 防守阵容显隐
i3k_sbean.arena_hidedefence_res = i3k_class("arena_hidedefence_res")
function i3k_sbean.arena_hidedefence_res:ctor()
	self._pname_ = "arena_hidedefence_res"
	--self.ok:		int32	
end

function i3k_sbean.arena_hidedefence_res:clone()
	return clone(self)
end

function i3k_sbean.arena_hidedefence_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.arena_hidedefence_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 会武同步信息
i3k_sbean.superarena_sync_res = i3k_class("superarena_sync_res")
function i3k_sbean.superarena_sync_res:ctor()
	self._pname_ = "superarena_sync_res"
	--self.info:		SuperArenaInfo	
end

function i3k_sbean.superarena_sync_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.SuperArenaInfo)
end

function i3k_sbean.superarena_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 会武设置出战佣兵
i3k_sbean.superarena_setpets_res = i3k_class("superarena_setpets_res")
function i3k_sbean.superarena_setpets_res:ctor()
	self._pname_ = "superarena_setpets_res"
	--self.ok:		int32	
end

function i3k_sbean.superarena_setpets_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_setpets_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.superarena_setpets_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 单人匹配
i3k_sbean.superarena_singlejoin_res = i3k_class("superarena_singlejoin_res")
function i3k_sbean.superarena_singlejoin_res:ctor()
	self._pname_ = "superarena_singlejoin_res"
	--self.ok:		int32	
end

function i3k_sbean.superarena_singlejoin_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_singlejoin_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.superarena_singlejoin_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 组队匹配
i3k_sbean.superarena_teamjoin_res = i3k_class("superarena_teamjoin_res")
function i3k_sbean.superarena_teamjoin_res:ctor()
	self._pname_ = "superarena_teamjoin_res"
	--self.ok:		int32	
end

function i3k_sbean.superarena_teamjoin_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_teamjoin_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.superarena_teamjoin_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知其他成员开始匹配
i3k_sbean.superarena_startmatch = i3k_class("superarena_startmatch")
function i3k_sbean.superarena_startmatch:ctor()
	self._pname_ = "superarena_startmatch"
end

function i3k_sbean.superarena_startmatch:decode(is)
	is:popString()
end

function i3k_sbean.superarena_startmatch:encode(os)
	os:pushString(self._pname_)
end


-- 匹配结果
i3k_sbean.superarena_join = i3k_class("superarena_join")
function i3k_sbean.superarena_join:ctor()
	self._pname_ = "superarena_join"
	--self.ok:		int32	
end

function i3k_sbean.superarena_join:clone()
	return clone(self)
end

function i3k_sbean.superarena_join:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.superarena_join:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 取消匹配
i3k_sbean.superarena_quit_res = i3k_class("superarena_quit_res")
function i3k_sbean.superarena_quit_res:ctor()
	self._pname_ = "superarena_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.superarena_quit_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.superarena_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 4v4竞技场商城同步协议
i3k_sbean.superarena_shopsync_res = i3k_class("superarena_shopsync_res")
function i3k_sbean.superarena_shopsync_res:ctor()
	self._pname_ = "superarena_shopsync_res"
	--self.info:		ShopInfo	
	--self.currency:		int32	
	--self.currency2:		int32	
	--self.discount:		ShopDiscountInfo	
end

function i3k_sbean.superarena_shopsync_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_shopsync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
	self.currency = is:popNumber()
	self.currency2 = is:popNumber()
	self.discount = is:pop(i3k_sbean.ShopDiscountInfo)
end

function i3k_sbean.superarena_shopsync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumber(self.currency)
	os:pushNumber(self.currency2)
	os:push(self.discount)
end


-- 4v4竞技场商城刷新协议
i3k_sbean.superarena_shoprefresh_res = i3k_class("superarena_shoprefresh_res")
function i3k_sbean.superarena_shoprefresh_res:ctor()
	self._pname_ = "superarena_shoprefresh_res"
	--self.info:		ShopInfo	
end

function i3k_sbean.superarena_shoprefresh_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_shoprefresh_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
end

function i3k_sbean.superarena_shoprefresh_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 4v4竞技场商城买商品协议
i3k_sbean.superarena_shopbuy_res = i3k_class("superarena_shopbuy_res")
function i3k_sbean.superarena_shopbuy_res:ctor()
	self._pname_ = "superarena_shopbuy_res"
	--self.ok:		int32	
end

function i3k_sbean.superarena_shopbuy_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_shopbuy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.superarena_shopbuy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神器乱斗神兵设置
i3k_sbean.superarena_weaponseq_res = i3k_class("superarena_weaponseq_res")
function i3k_sbean.superarena_weaponseq_res:ctor()
	self._pname_ = "superarena_weaponseq_res"
	--self.ok:		int32	
end

function i3k_sbean.superarena_weaponseq_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_weaponseq_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.superarena_weaponseq_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知客户端4v4竞技场副本开始
i3k_sbean.role_superarenamap_start = i3k_class("role_superarenamap_start")
function i3k_sbean.role_superarenamap_start:ctor()
	self._pname_ = "role_superarenamap_start"
	--self.arenaType:		int32	
end

function i3k_sbean.role_superarenamap_start:clone()
	return clone(self)
end

function i3k_sbean.role_superarenamap_start:decode(is)
	is:popString()
	self.arenaType = is:popNumber()
end

function i3k_sbean.role_superarenamap_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.arenaType)
end


-- 通知客户端4v4竞技场副本结束
i3k_sbean.role_superarenamap_end = i3k_class("role_superarenamap_end")
function i3k_sbean.role_superarenamap_end:ctor()
	self._pname_ = "role_superarenamap_end"
end

function i3k_sbean.role_superarenamap_end:decode(is)
	is:popString()
end

function i3k_sbean.role_superarenamap_end:encode(os)
	os:pushString(self._pname_)
end


-- 同步战斗结果
i3k_sbean.role_superarena_result = i3k_class("role_superarena_result")
function i3k_sbean.role_superarena_result:ctor()
	self._pname_ = "role_superarena_result"
	--self.win:		int32	
	--self.result:		SuperArenaBattleResult	
end

function i3k_sbean.role_superarena_result:clone()
	return clone(self)
end

function i3k_sbean.role_superarena_result:decode(is)
	is:popString()
	self.win = is:popNumber()
	self.result = is:pop(i3k_sbean.SuperArenaBattleResult)
end

function i3k_sbean.role_superarena_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.win)
	os:push(self.result)
end


-- 组队创建竞技场房间
i3k_sbean.aroom_create_res = i3k_class("aroom_create_res")
function i3k_sbean.aroom_create_res:ctor()
	self._pname_ = "aroom_create_res"
	--self.ok:		int32	
end

function i3k_sbean.aroom_create_res:clone()
	return clone(self)
end

function i3k_sbean.aroom_create_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.aroom_create_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 房主邀请新人加入副本房间协议
i3k_sbean.aroom_invite_res = i3k_class("aroom_invite_res")
function i3k_sbean.aroom_invite_res:ctor()
	self._pname_ = "aroom_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.aroom_invite_res:clone()
	return clone(self)
end

function i3k_sbean.aroom_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.aroom_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转发其他玩家进入房间的邀请
i3k_sbean.aroom_invite_forward = i3k_class("aroom_invite_forward")
function i3k_sbean.aroom_invite_forward:ctor()
	self._pname_ = "aroom_invite_forward"
	--self.roleID:		int32	
	--self.roleName:		string	
	--self.roomType:		int32	
	--self.roomID:		int32	
end

function i3k_sbean.aroom_invite_forward:clone()
	return clone(self)
end

function i3k_sbean.aroom_invite_forward:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
	self.roomType = is:popNumber()
	self.roomID = is:popNumber()
end

function i3k_sbean.aroom_invite_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
	os:pushNumber(self.roomType)
	os:pushNumber(self.roomID)
end


-- 接收到其他玩家邀请入房间后玩家选择是否同意操作
i3k_sbean.aroom_invitedby_res = i3k_class("aroom_invitedby_res")
function i3k_sbean.aroom_invitedby_res:ctor()
	self._pname_ = "aroom_invitedby_res"
	--self.ok:		int32	
end

function i3k_sbean.aroom_invitedby_res:clone()
	return clone(self)
end

function i3k_sbean.aroom_invitedby_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.aroom_invitedby_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 离开房间的响应(返回离开房间是否成功)
i3k_sbean.aroom_leave_res = i3k_class("aroom_leave_res")
function i3k_sbean.aroom_leave_res:ctor()
	self._pname_ = "aroom_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.aroom_leave_res:clone()
	return clone(self)
end

function i3k_sbean.aroom_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.aroom_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知邀请者前面的邀请被拒绝
i3k_sbean.aroom_invite_refuse = i3k_class("aroom_invite_refuse")
function i3k_sbean.aroom_invite_refuse:ctor()
	self._pname_ = "aroom_invite_refuse"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.aroom_invite_refuse:clone()
	return clone(self)
end

function i3k_sbean.aroom_invite_refuse:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.aroom_invite_refuse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知邀请者被邀请的人正忙
i3k_sbean.aroom_invite_busy = i3k_class("aroom_invite_busy")
function i3k_sbean.aroom_invite_busy:ctor()
	self._pname_ = "aroom_invite_busy"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.aroom_invite_busy:clone()
	return clone(self)
end

function i3k_sbean.aroom_invite_busy:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.aroom_invite_busy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 踢出房间成员请求协议
i3k_sbean.aroom_kick_res = i3k_class("aroom_kick_res")
function i3k_sbean.aroom_kick_res:ctor()
	self._pname_ = "aroom_kick_res"
	--self.ok:		int32	
end

function i3k_sbean.aroom_kick_res:clone()
	return clone(self)
end

function i3k_sbean.aroom_kick_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.aroom_kick_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 会武房间更换房主响应(返回换房主是否成功)
i3k_sbean.aroom_change_leader_res = i3k_class("aroom_change_leader_res")
function i3k_sbean.aroom_change_leader_res:ctor()
	self._pname_ = "aroom_change_leader_res"
	--self.ok:		int32	
end

function i3k_sbean.aroom_change_leader_res:clone()
	return clone(self)
end

function i3k_sbean.aroom_change_leader_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.aroom_change_leader_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 本房间信息查询响应协议
i3k_sbean.aroom_self_res = i3k_class("aroom_self_res")
function i3k_sbean.aroom_self_res:ctor()
	self._pname_ = "aroom_self_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.aroom_self_res:clone()
	return clone(self)
end

function i3k_sbean.aroom_self_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.aroom_self_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 房间附近的人响应协议
i3k_sbean.aroom_mapr_res = i3k_class("aroom_mapr_res")
function i3k_sbean.aroom_mapr_res:ctor()
	self._pname_ = "aroom_mapr_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.aroom_mapr_res:clone()
	return clone(self)
end

function i3k_sbean.aroom_mapr_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.aroom_mapr_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 通知新成员加入房间同步当前房间信息
i3k_sbean.aroom_sync = i3k_class("aroom_sync")
function i3k_sbean.aroom_sync:ctor()
	self._pname_ = "aroom_sync"
	--self.room:		ARoom	
end

function i3k_sbean.aroom_sync:clone()
	return clone(self)
end

function i3k_sbean.aroom_sync:decode(is)
	is:popString()
	self.room = is:pop(i3k_sbean.ARoom)
end

function i3k_sbean.aroom_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.room)
end


-- 通知其他成员员新成员加入房间
i3k_sbean.aroom_join = i3k_class("aroom_join")
function i3k_sbean.aroom_join:ctor()
	self._pname_ = "aroom_join"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.aroom_join:clone()
	return clone(self)
end

function i3k_sbean.aroom_join:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.aroom_join:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知其他成员有成员离开房间
i3k_sbean.aroom_leave = i3k_class("aroom_leave")
function i3k_sbean.aroom_leave:ctor()
	self._pname_ = "aroom_leave"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.aroom_leave:clone()
	return clone(self)
end

function i3k_sbean.aroom_leave:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.aroom_leave:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知其他成员有成员被踢出房间
i3k_sbean.aroom_kick = i3k_class("aroom_kick")
function i3k_sbean.aroom_kick:ctor()
	self._pname_ = "aroom_kick"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.aroom_kick:clone()
	return clone(self)
end

function i3k_sbean.aroom_kick:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.aroom_kick:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知成员换房主
i3k_sbean.aroom_change_leader = i3k_class("aroom_change_leader")
function i3k_sbean.aroom_change_leader:ctor()
	self._pname_ = "aroom_change_leader"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.aroom_change_leader:clone()
	return clone(self)
end

function i3k_sbean.aroom_change_leader:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.aroom_change_leader:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知客户端队伍成员信息的变化后的更新值或客户端主动查询值
i3k_sbean.aroom_member_overview = i3k_class("aroom_member_overview")
function i3k_sbean.aroom_member_overview:ctor()
	self._pname_ = "aroom_member_overview"
	--self.overview:		RoleOverview	
	--self.state:		int32	
end

function i3k_sbean.aroom_member_overview:clone()
	return clone(self)
end

function i3k_sbean.aroom_member_overview:decode(is)
	is:popString()
	self.overview = is:pop(i3k_sbean.RoleOverview)
	self.state = is:popNumber()
end

function i3k_sbean.aroom_member_overview:encode(os)
	os:pushString(self._pname_)
	os:push(self.overview)
	os:pushNumber(self.state)
end


-- 通知客户端房间成员的连接状态变化,state大于1是连接状态，为0是断线
i3k_sbean.aroom_member_connection = i3k_class("aroom_member_connection")
function i3k_sbean.aroom_member_connection:ctor()
	self._pname_ = "aroom_member_connection"
	--self.roleId:		int32	
	--self.state:		int32	
end

function i3k_sbean.aroom_member_connection:clone()
	return clone(self)
end

function i3k_sbean.aroom_member_connection:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.aroom_member_connection:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.state)
end


-- 会武周排行榜
i3k_sbean.superarena_weekrank_res = i3k_class("superarena_weekrank_res")
function i3k_sbean.superarena_weekrank_res:ctor()
	self._pname_ = "superarena_weekrank_res"
	--self.ranks:		vector[RoleOverview]	
end

function i3k_sbean.superarena_weekrank_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_weekrank_res:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.superarena_weekrank_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
end


-- 会武日排行榜(type 1: 普通4v4)
i3k_sbean.superarena_dayrank_res = i3k_class("superarena_dayrank_res")
function i3k_sbean.superarena_dayrank_res:ctor()
	self._pname_ = "superarena_dayrank_res"
	--self.ranks:		vector[RoleOverview]	
end

function i3k_sbean.superarena_dayrank_res:clone()
	return clone(self)
end

function i3k_sbean.superarena_dayrank_res:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.superarena_dayrank_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
end


-- 正邪道场同步信息
i3k_sbean.bwarena_sync_res = i3k_class("bwarena_sync_res")
function i3k_sbean.bwarena_sync_res:ctor()
	self._pname_ = "bwarena_sync_res"
	--self.info:		BWArenaInfo	
end

function i3k_sbean.bwarena_sync_res:clone()
	return clone(self)
end

function i3k_sbean.bwarena_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.BWArenaInfo)
end

function i3k_sbean.bwarena_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 正邪道场设置参战随从
i3k_sbean.bwarena_setpet_res = i3k_class("bwarena_setpet_res")
function i3k_sbean.bwarena_setpet_res:ctor()
	self._pname_ = "bwarena_setpet_res"
	--self.ok:		int32	
end

function i3k_sbean.bwarena_setpet_res:clone()
	return clone(self)
end

function i3k_sbean.bwarena_setpet_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bwarena_setpet_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 正邪道场刷新对手
i3k_sbean.bwarena_refresh_res = i3k_class("bwarena_refresh_res")
function i3k_sbean.bwarena_refresh_res:ctor()
	self._pname_ = "bwarena_refresh_res"
	--self.enemies:		vector[BWArenaArrayOverview]	
end

function i3k_sbean.bwarena_refresh_res:clone()
	return clone(self)
end

function i3k_sbean.bwarena_refresh_res:decode(is)
	is:popString()
	self.enemies = is:popList(i3k_sbean.BWArenaArrayOverview)
end

function i3k_sbean.bwarena_refresh_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.enemies)
end


-- 正邪道场购买次数
i3k_sbean.bwarena_buytimes_res = i3k_class("bwarena_buytimes_res")
function i3k_sbean.bwarena_buytimes_res:ctor()
	self._pname_ = "bwarena_buytimes_res"
	--self.ok:		int32	
end

function i3k_sbean.bwarena_buytimes_res:clone()
	return clone(self)
end

function i3k_sbean.bwarena_buytimes_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bwarena_buytimes_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 正邪道场开始战斗
i3k_sbean.bwarena_startattack_res = i3k_class("bwarena_startattack_res")
function i3k_sbean.bwarena_startattack_res:ctor()
	self._pname_ = "bwarena_startattack_res"
	--self.ok:		int32	
end

function i3k_sbean.bwarena_startattack_res:clone()
	return clone(self)
end

function i3k_sbean.bwarena_startattack_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bwarena_startattack_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 正邪道场领取积分奖励
i3k_sbean.bwarena_takescore_res = i3k_class("bwarena_takescore_res")
function i3k_sbean.bwarena_takescore_res:ctor()
	self._pname_ = "bwarena_takescore_res"
	--self.ok:		int32	
end

function i3k_sbean.bwarena_takescore_res:clone()
	return clone(self)
end

function i3k_sbean.bwarena_takescore_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bwarena_takescore_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 正邪道场战报
i3k_sbean.bwarena_log_res = i3k_class("bwarena_log_res")
function i3k_sbean.bwarena_log_res:ctor()
	self._pname_ = "bwarena_log_res"
	--self.logs:		vector[DBRoleArenaLog]	
end

function i3k_sbean.bwarena_log_res:clone()
	return clone(self)
end

function i3k_sbean.bwarena_log_res:decode(is)
	is:popString()
	self.logs = is:popList(i3k_sbean.DBRoleArenaLog)
end

function i3k_sbean.bwarena_log_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.logs)
end


-- 正邪道场排行榜
i3k_sbean.bwarena_ranks_res = i3k_class("bwarena_ranks_res")
function i3k_sbean.bwarena_ranks_res:ctor()
	self._pname_ = "bwarena_ranks_res"
	--self.ranks:		vector[BWArenaRankRole]	
end

function i3k_sbean.bwarena_ranks_res:clone()
	return clone(self)
end

function i3k_sbean.bwarena_ranks_res:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.BWArenaRankRole)
end

function i3k_sbean.bwarena_ranks_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
end


-- 通知客户端正邪道场副本开始
i3k_sbean.role_bwarenamap_start = i3k_class("role_bwarenamap_start")
function i3k_sbean.role_bwarenamap_start:ctor()
	self._pname_ = "role_bwarenamap_start"
end

function i3k_sbean.role_bwarenamap_start:decode(is)
	is:popString()
end

function i3k_sbean.role_bwarenamap_start:encode(os)
	os:pushString(self._pname_)
end


-- 通知客户端正邪道场副本结束
i3k_sbean.role_bwarenamap_end = i3k_class("role_bwarenamap_end")
function i3k_sbean.role_bwarenamap_end:ctor()
	self._pname_ = "role_bwarenamap_end"
end

function i3k_sbean.role_bwarenamap_end:decode(is)
	is:popString()
end

function i3k_sbean.role_bwarenamap_end:encode(os)
	os:pushString(self._pname_)
end


-- 同步正邪道场战斗结果
i3k_sbean.role_bwarena_result = i3k_class("role_bwarena_result")
function i3k_sbean.role_bwarena_result:ctor()
	self._pname_ = "role_bwarena_result"
	--self.addScore:		int32	
	--self.addExp:		int32	
end

function i3k_sbean.role_bwarena_result:clone()
	return clone(self)
end

function i3k_sbean.role_bwarena_result:decode(is)
	is:popString()
	self.addScore = is:popNumber()
	self.addExp = is:popNumber()
end

function i3k_sbean.role_bwarena_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.addScore)
	os:pushNumber(self.addExp)
end


-- 势力战抽奖
i3k_sbean.forcewar_lottery_res = i3k_class("forcewar_lottery_res")
function i3k_sbean.forcewar_lottery_res:ctor()
	self._pname_ = "forcewar_lottery_res"
	--self.ok:		int32	
	--self.rewards:		vector[DummyGoods]	
end

function i3k_sbean.forcewar_lottery_res:clone()
	return clone(self)
end

function i3k_sbean.forcewar_lottery_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.forcewar_lottery_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.rewards)
end


-- 势力战界面同步信息
i3k_sbean.forcewar_sync_res = i3k_class("forcewar_sync_res")
function i3k_sbean.forcewar_sync_res:ctor()
	self._pname_ = "forcewar_sync_res"
	--self.log:		ForceWarLog	
	--self.punishEndTime:		int32	
	--self.dayGainLotteryCnt:		int32	
	--self.totalLotteryCnt:		int32	
end

function i3k_sbean.forcewar_sync_res:clone()
	return clone(self)
end

function i3k_sbean.forcewar_sync_res:decode(is)
	is:popString()
	self.log = is:pop(i3k_sbean.ForceWarLog)
	self.punishEndTime = is:popNumber()
	self.dayGainLotteryCnt = is:popNumber()
	self.totalLotteryCnt = is:popNumber()
end

function i3k_sbean.forcewar_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.log)
	os:pushNumber(self.punishEndTime)
	os:pushNumber(self.dayGainLotteryCnt)
	os:pushNumber(self.totalLotteryCnt)
end


-- 势力战报名协议
i3k_sbean.forcewar_join_res = i3k_class("forcewar_join_res")
function i3k_sbean.forcewar_join_res:ctor()
	self._pname_ = "forcewar_join_res"
	--self.ok:		int32	
end

function i3k_sbean.forcewar_join_res:clone()
	return clone(self)
end

function i3k_sbean.forcewar_join_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.forcewar_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 势力战取消报名协议
i3k_sbean.forcewar_quit_res = i3k_class("forcewar_quit_res")
function i3k_sbean.forcewar_quit_res:ctor()
	self._pname_ = "forcewar_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.forcewar_quit_res:clone()
	return clone(self)
end

function i3k_sbean.forcewar_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.forcewar_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 势力战开始匹配
i3k_sbean.forcewar_startmatch = i3k_class("forcewar_startmatch")
function i3k_sbean.forcewar_startmatch:ctor()
	self._pname_ = "forcewar_startmatch"
end

function i3k_sbean.forcewar_startmatch:decode(is)
	is:popString()
end

function i3k_sbean.forcewar_startmatch:encode(os)
	os:pushString(self._pname_)
end


-- 势力战匹配结果
i3k_sbean.forcewar_match = i3k_class("forcewar_match")
function i3k_sbean.forcewar_match:ctor()
	self._pname_ = "forcewar_match"
	--self.ok:		int32	
end

function i3k_sbean.forcewar_match:clone()
	return clone(self)
end

function i3k_sbean.forcewar_match:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.forcewar_match:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 势力战其他成员取消匹配
i3k_sbean.forcewar_other_quit = i3k_class("forcewar_other_quit")
function i3k_sbean.forcewar_other_quit:ctor()
	self._pname_ = "forcewar_other_quit"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.forcewar_other_quit:clone()
	return clone(self)
end

function i3k_sbean.forcewar_other_quit:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.forcewar_other_quit:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知客户端势力战开始
i3k_sbean.role_forcewarmap_start = i3k_class("role_forcewarmap_start")
function i3k_sbean.role_forcewarmap_start:ctor()
	self._pname_ = "role_forcewarmap_start"
	--self.guard:		int32	
end

function i3k_sbean.role_forcewarmap_start:clone()
	return clone(self)
end

function i3k_sbean.role_forcewarmap_start:decode(is)
	is:popString()
	self.guard = is:popNumber()
end

function i3k_sbean.role_forcewarmap_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.guard)
end


-- 通知客户端势力战结束
i3k_sbean.role_forcewarmap_end = i3k_class("role_forcewarmap_end")
function i3k_sbean.role_forcewarmap_end:ctor()
	self._pname_ = "role_forcewarmap_end"
end

function i3k_sbean.role_forcewarmap_end:decode(is)
	is:popString()
end

function i3k_sbean.role_forcewarmap_end:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.role_forcewar_result = i3k_class("role_forcewar_result")
function i3k_sbean.role_forcewar_result:ctor()
	self._pname_ = "role_forcewar_result"
	--self.gainFeat:		int32	
	--self.curWeekFeat:		int32	
	--self.winSide:		int32	
	--self.killedBoss:		int32	
	--self.whiteScore:		int32	
	--self.blackScore:		int32	
	--self.whiteSide:		vector[ForceWarOverview]	
	--self.blackSide:		vector[ForceWarOverview]	
	--self.rewardMapTimes:		int32	
	--self.rewardLotteryTimes:		int32	
end

function i3k_sbean.role_forcewar_result:clone()
	return clone(self)
end

function i3k_sbean.role_forcewar_result:decode(is)
	is:popString()
	self.gainFeat = is:popNumber()
	self.curWeekFeat = is:popNumber()
	self.winSide = is:popNumber()
	self.killedBoss = is:popNumber()
	self.whiteScore = is:popNumber()
	self.blackScore = is:popNumber()
	self.whiteSide = is:popList(i3k_sbean.ForceWarOverview)
	self.blackSide = is:popList(i3k_sbean.ForceWarOverview)
	self.rewardMapTimes = is:popNumber()
	self.rewardLotteryTimes = is:popNumber()
end

function i3k_sbean.role_forcewar_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gainFeat)
	os:pushNumber(self.curWeekFeat)
	os:pushNumber(self.winSide)
	os:pushNumber(self.killedBoss)
	os:pushNumber(self.whiteScore)
	os:pushNumber(self.blackScore)
	os:pushList(self.whiteSide)
	os:pushList(self.blackSide)
	os:pushNumber(self.rewardMapTimes)
	os:pushNumber(self.rewardLotteryTimes)
end


-- 创建势力战房间
i3k_sbean.froom_create_res = i3k_class("froom_create_res")
function i3k_sbean.froom_create_res:ctor()
	self._pname_ = "froom_create_res"
	--self.ok:		int32	
end

function i3k_sbean.froom_create_res:clone()
	return clone(self)
end

function i3k_sbean.froom_create_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.froom_create_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 邀请新人加入势力战房间协议
i3k_sbean.froom_invite_res = i3k_class("froom_invite_res")
function i3k_sbean.froom_invite_res:ctor()
	self._pname_ = "froom_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.froom_invite_res:clone()
	return clone(self)
end

function i3k_sbean.froom_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.froom_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转发其他玩家进入房间的邀请
i3k_sbean.froom_invite_forward = i3k_class("froom_invite_forward")
function i3k_sbean.froom_invite_forward:ctor()
	self._pname_ = "froom_invite_forward"
	--self.roleID:		int32	
	--self.roleName:		string	
	--self.roomID:		int32	
	--self.type:		int32	
end

function i3k_sbean.froom_invite_forward:clone()
	return clone(self)
end

function i3k_sbean.froom_invite_forward:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
	self.roomID = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.froom_invite_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
	os:pushNumber(self.roomID)
	os:pushNumber(self.type)
end


-- 接收到其他玩家邀请入房间后玩家选择是否同意操作
i3k_sbean.froom_invitedby_res = i3k_class("froom_invitedby_res")
function i3k_sbean.froom_invitedby_res:ctor()
	self._pname_ = "froom_invitedby_res"
	--self.ok:		int32	
end

function i3k_sbean.froom_invitedby_res:clone()
	return clone(self)
end

function i3k_sbean.froom_invitedby_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.froom_invitedby_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 离开房间的响应(返回离开房间是否成功)
i3k_sbean.froom_leave_res = i3k_class("froom_leave_res")
function i3k_sbean.froom_leave_res:ctor()
	self._pname_ = "froom_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.froom_leave_res:clone()
	return clone(self)
end

function i3k_sbean.froom_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.froom_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知邀请者前面的邀请被拒绝
i3k_sbean.froom_invite_refuse = i3k_class("froom_invite_refuse")
function i3k_sbean.froom_invite_refuse:ctor()
	self._pname_ = "froom_invite_refuse"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.froom_invite_refuse:clone()
	return clone(self)
end

function i3k_sbean.froom_invite_refuse:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.froom_invite_refuse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知邀请者被邀请的人正忙
i3k_sbean.froom_invite_busy = i3k_class("froom_invite_busy")
function i3k_sbean.froom_invite_busy:ctor()
	self._pname_ = "froom_invite_busy"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.froom_invite_busy:clone()
	return clone(self)
end

function i3k_sbean.froom_invite_busy:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.froom_invite_busy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 踢出房间成员请求协议
i3k_sbean.froom_kick_res = i3k_class("froom_kick_res")
function i3k_sbean.froom_kick_res:ctor()
	self._pname_ = "froom_kick_res"
	--self.ok:		int32	
end

function i3k_sbean.froom_kick_res:clone()
	return clone(self)
end

function i3k_sbean.froom_kick_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.froom_kick_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 房间更换房主响应
i3k_sbean.froom_change_leader_res = i3k_class("froom_change_leader_res")
function i3k_sbean.froom_change_leader_res:ctor()
	self._pname_ = "froom_change_leader_res"
	--self.ok:		int32	
end

function i3k_sbean.froom_change_leader_res:clone()
	return clone(self)
end

function i3k_sbean.froom_change_leader_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.froom_change_leader_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同一地图地图附近没房间且符合条件的人
i3k_sbean.froom_mapr_res = i3k_class("froom_mapr_res")
function i3k_sbean.froom_mapr_res:ctor()
	self._pname_ = "froom_mapr_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.froom_mapr_res:clone()
	return clone(self)
end

function i3k_sbean.froom_mapr_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.froom_mapr_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 同步对战列表
i3k_sbean.forcewar_mapbrief_res = i3k_class("forcewar_mapbrief_res")
function i3k_sbean.forcewar_mapbrief_res:ctor()
	self._pname_ = "forcewar_mapbrief_res"
	--self.briefs:		vector[ForceWarMapBrief]	
end

function i3k_sbean.forcewar_mapbrief_res:clone()
	return clone(self)
end

function i3k_sbean.forcewar_mapbrief_res:decode(is)
	is:popString()
	self.briefs = is:popList(i3k_sbean.ForceWarMapBrief)
end

function i3k_sbean.forcewar_mapbrief_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.briefs)
end


-- 进入观战
i3k_sbean.forcewar_guard_res = i3k_class("forcewar_guard_res")
function i3k_sbean.forcewar_guard_res:ctor()
	self._pname_ = "forcewar_guard_res"
	--self.ok:		int32	
end

function i3k_sbean.forcewar_guard_res:clone()
	return clone(self)
end

function i3k_sbean.forcewar_guard_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.forcewar_guard_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知新成员加入房间同步房间信息
i3k_sbean.froom_sync = i3k_class("froom_sync")
function i3k_sbean.froom_sync:ctor()
	self._pname_ = "froom_sync"
	--self.room:		FRoom	
end

function i3k_sbean.froom_sync:clone()
	return clone(self)
end

function i3k_sbean.froom_sync:decode(is)
	is:popString()
	self.room = is:pop(i3k_sbean.FRoom)
end

function i3k_sbean.froom_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.room)
end


-- 通知其他成员员新成员加入房间
i3k_sbean.froom_join = i3k_class("froom_join")
function i3k_sbean.froom_join:ctor()
	self._pname_ = "froom_join"
	--self.member:		RoleOverview	
end

function i3k_sbean.froom_join:clone()
	return clone(self)
end

function i3k_sbean.froom_join:decode(is)
	is:popString()
	self.member = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.froom_join:encode(os)
	os:pushString(self._pname_)
	os:push(self.member)
end


-- 通知其他成员有成员离开房间
i3k_sbean.froom_leave = i3k_class("froom_leave")
function i3k_sbean.froom_leave:ctor()
	self._pname_ = "froom_leave"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.froom_leave:clone()
	return clone(self)
end

function i3k_sbean.froom_leave:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.froom_leave:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知其他成员有成员被踢出房间
i3k_sbean.froom_kick = i3k_class("froom_kick")
function i3k_sbean.froom_kick:ctor()
	self._pname_ = "froom_kick"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.froom_kick:clone()
	return clone(self)
end

function i3k_sbean.froom_kick:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.froom_kick:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知成员换房主
i3k_sbean.froom_change_leader = i3k_class("froom_change_leader")
function i3k_sbean.froom_change_leader:ctor()
	self._pname_ = "froom_change_leader"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.froom_change_leader:clone()
	return clone(self)
end

function i3k_sbean.froom_change_leader:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.froom_change_leader:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 查询势力战房间成员信息(froom_query_member的异步回应)
i3k_sbean.froom_member_overview = i3k_class("froom_member_overview")
function i3k_sbean.froom_member_overview:ctor()
	self._pname_ = "froom_member_overview"
	--self.member:		RoleOverview	
	--self.state:		int32	
end

function i3k_sbean.froom_member_overview:clone()
	return clone(self)
end

function i3k_sbean.froom_member_overview:decode(is)
	is:popString()
	self.member = is:pop(i3k_sbean.RoleOverview)
	self.state = is:popNumber()
end

function i3k_sbean.froom_member_overview:encode(os)
	os:pushString(self._pname_)
	os:push(self.member)
	os:pushNumber(self.state)
end


-- 查询势力战房间所有成员信息(froom_query_members的异步回应)
i3k_sbean.froom_members_overview = i3k_class("froom_members_overview")
function i3k_sbean.froom_members_overview:ctor()
	self._pname_ = "froom_members_overview"
	--self.members:		vector[RoleOverview]	
	--self.states:		map[int32, int32]	
end

function i3k_sbean.froom_members_overview:clone()
	return clone(self)
end

function i3k_sbean.froom_members_overview:decode(is)
	is:popString()
	self.members = is:popList(i3k_sbean.RoleOverview)
	self.states = is:popNumberNumberMap()
end

function i3k_sbean.froom_members_overview:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.members)
	os:pushNumberNumberMap(self.states)
end


-- 通知客户端房间成员的连接状态变化,state大于1是连接状态，为0是断线
i3k_sbean.froom_member_connection = i3k_class("froom_member_connection")
function i3k_sbean.froom_member_connection:ctor()
	self._pname_ = "froom_member_connection"
	--self.roleID:		int32	
	--self.state:		int32	
end

function i3k_sbean.froom_member_connection:clone()
	return clone(self)
end

function i3k_sbean.froom_member_connection:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.froom_member_connection:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.state)
end


-- 通知客户端战队成员的连接状态变化
i3k_sbean.fteam_member_connection = i3k_class("fteam_member_connection")
function i3k_sbean.fteam_member_connection:ctor()
	self._pname_ = "fteam_member_connection"
	--self.roleID:		int32	
	--self.online:		int32	
end

function i3k_sbean.fteam_member_connection:clone()
	return clone(self)
end

function i3k_sbean.fteam_member_connection:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.online = is:popNumber()
end

function i3k_sbean.fteam_member_connection:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.online)
end


-- boss信息同步回应
i3k_sbean.bosses_sync_res = i3k_class("bosses_sync_res")
function i3k_sbean.bosses_sync_res:ctor()
	self._pname_ = "bosses_sync_res"
	--self.nextTransTime:		int32	
	--self.bosses:		map[int32, BossState]	
end

function i3k_sbean.bosses_sync_res:clone()
	return clone(self)
end

function i3k_sbean.bosses_sync_res:decode(is)
	is:popString()
	self.nextTransTime = is:popNumber()
	self.bosses = is:popNumberMap(i3k_sbean.BossState)
end

function i3k_sbean.bosses_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.nextTransTime)
	os:pushNumberMap(self.bosses)
end


i3k_sbean.walktoboss_res = i3k_class("walktoboss_res")
function i3k_sbean.walktoboss_res:ctor()
	self._pname_ = "walktoboss_res"
	--self.ok:		int32	
end

function i3k_sbean.walktoboss_res:clone()
	return clone(self)
end

function i3k_sbean.walktoboss_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.walktoboss_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 直接传送到boss位置回应
i3k_sbean.transtoboss_res = i3k_class("transtoboss_res")
function i3k_sbean.transtoboss_res:ctor()
	self._pname_ = "transtoboss_res"
	--self.ok:		int32	
end

function i3k_sbean.transtoboss_res:clone()
	return clone(self)
end

function i3k_sbean.transtoboss_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.transtoboss_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 重置传送冷却时间
i3k_sbean.reset_transtime_res = i3k_class("reset_transtime_res")
function i3k_sbean.reset_transtime_res:ctor()
	self._pname_ = "reset_transtime_res"
	--self.ok:		int32	
end

function i3k_sbean.reset_transtime_res:clone()
	return clone(self)
end

function i3k_sbean.reset_transtime_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.reset_transtime_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- boss奖励分配记录请求
i3k_sbean.boss_reward_res = i3k_class("boss_reward_res")
function i3k_sbean.boss_reward_res:ctor()
	self._pname_ = "boss_reward_res"
	--self.records:		BossRecord	
	--self.selfReward:		BossReward	
end

function i3k_sbean.boss_reward_res:clone()
	return clone(self)
end

function i3k_sbean.boss_reward_res:decode(is)
	is:popString()
	self.records = is:pop(i3k_sbean.BossRecord)
	self.selfReward = is:pop(i3k_sbean.BossReward)
end

function i3k_sbean.boss_reward_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.records)
	os:push(self.selfReward)
end


-- 好友界面信息同步回应
i3k_sbean.friend_sync_res = i3k_class("friend_sync_res")
function i3k_sbean.friend_sync_res:ctor()
	self._pname_ = "friend_sync_res"
	--self.friends:		map[int32, FriendInfo]	
	--self.dayVitTakeTimes:		int32	
	--self.vitLvl:		int32	
	--self.vitExp:		int32	
	--self.personalMsg:		string	
	--self.charm:		int32	
	--self.isClear:		int32	
end

function i3k_sbean.friend_sync_res:clone()
	return clone(self)
end

function i3k_sbean.friend_sync_res:decode(is)
	is:popString()
	self.friends = is:popNumberMap(i3k_sbean.FriendInfo)
	self.dayVitTakeTimes = is:popNumber()
	self.vitLvl = is:popNumber()
	self.vitExp = is:popNumber()
	self.personalMsg = is:popString()
	self.charm = is:popNumber()
	self.isClear = is:popNumber()
end

function i3k_sbean.friend_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.friends)
	os:pushNumber(self.dayVitTakeTimes)
	os:pushNumber(self.vitLvl)
	os:pushNumber(self.vitExp)
	os:pushString(self.personalMsg)
	os:pushNumber(self.charm)
	os:pushNumber(self.isClear)
end


-- 获取最新加我为好友的列表
i3k_sbean.friend_pluslist_res = i3k_class("friend_pluslist_res")
function i3k_sbean.friend_pluslist_res:ctor()
	self._pname_ = "friend_pluslist_res"
	--self.nears:		vector[RoleOverview]	
end

function i3k_sbean.friend_pluslist_res:clone()
	return clone(self)
end

function i3k_sbean.friend_pluslist_res:decode(is)
	is:popString()
	self.nears = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.friend_pluslist_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.nears)
end


-- 获取系统推荐的列表
i3k_sbean.friend_recommend_res = i3k_class("friend_recommend_res")
function i3k_sbean.friend_recommend_res:ctor()
	self._pname_ = "friend_recommend_res"
	--self.recommends:		vector[RoleOverview]	
end

function i3k_sbean.friend_recommend_res:clone()
	return clone(self)
end

function i3k_sbean.friend_recommend_res:decode(is)
	is:popString()
	self.recommends = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.friend_recommend_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.recommends)
end


-- 添加好友回应
i3k_sbean.friend_add_res = i3k_class("friend_add_res")
function i3k_sbean.friend_add_res:ctor()
	self._pname_ = "friend_add_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_add_res:clone()
	return clone(self)
end

function i3k_sbean.friend_add_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_add_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 好友搜索
i3k_sbean.friend_search_res = i3k_class("friend_search_res")
function i3k_sbean.friend_search_res:ctor()
	self._pname_ = "friend_search_res"
	--self.overview:		RoleOverview	
end

function i3k_sbean.friend_search_res:clone()
	return clone(self)
end

function i3k_sbean.friend_search_res:decode(is)
	is:popString()
	self.overview = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.friend_search_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.overview)
end


-- 删除好友回应
i3k_sbean.friend_delete_res = i3k_class("friend_delete_res")
function i3k_sbean.friend_delete_res:ctor()
	self._pname_ = "friend_delete_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_delete_res:clone()
	return clone(self)
end

function i3k_sbean.friend_delete_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_delete_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 一键删除好友
i3k_sbean.friend_onekey_delete_res = i3k_class("friend_onekey_delete_res")
function i3k_sbean.friend_onekey_delete_res:ctor()
	self._pname_ = "friend_onekey_delete_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_onekey_delete_res:clone()
	return clone(self)
end

function i3k_sbean.friend_onekey_delete_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_onekey_delete_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 好友送体力
i3k_sbean.friend_givevit_res = i3k_class("friend_givevit_res")
function i3k_sbean.friend_givevit_res:ctor()
	self._pname_ = "friend_givevit_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_givevit_res:clone()
	return clone(self)
end

function i3k_sbean.friend_givevit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_givevit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 好友一键送体力
i3k_sbean.friend_giveallvits_res = i3k_class("friend_giveallvits_res")
function i3k_sbean.friend_giveallvits_res:ctor()
	self._pname_ = "friend_giveallvits_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_giveallvits_res:clone()
	return clone(self)
end

function i3k_sbean.friend_giveallvits_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_giveallvits_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 一键好友接受体力
i3k_sbean.friend_receivevit_res = i3k_class("friend_receivevit_res")
function i3k_sbean.friend_receivevit_res:ctor()
	self._pname_ = "friend_receivevit_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_receivevit_res:clone()
	return clone(self)
end

function i3k_sbean.friend_receivevit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_receivevit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同意添加好友
i3k_sbean.friend_agreeadd_res = i3k_class("friend_agreeadd_res")
function i3k_sbean.friend_agreeadd_res:ctor()
	self._pname_ = "friend_agreeadd_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_agreeadd_res:clone()
	return clone(self)
end

function i3k_sbean.friend_agreeadd_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_agreeadd_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知被加为好友的人
i3k_sbean.friend_add_push = i3k_class("friend_add_push")
function i3k_sbean.friend_add_push:ctor()
	self._pname_ = "friend_add_push"
	--self.friendId:		int32	
	--self.friendName:		string	
	--self.hide:		bool	
end

function i3k_sbean.friend_add_push:clone()
	return clone(self)
end

function i3k_sbean.friend_add_push:decode(is)
	is:popString()
	self.friendId = is:popNumber()
	self.friendName = is:popString()
	self.hide = is:popBool()
end

function i3k_sbean.friend_add_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.friendId)
	os:pushString(self.friendName)
	os:pushBool(self.hide)
end


-- 玩家更新心情
i3k_sbean.friend_changemsg_res = i3k_class("friend_changemsg_res")
function i3k_sbean.friend_changemsg_res:ctor()
	self._pname_ = "friend_changemsg_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_changemsg_res:clone()
	return clone(self)
end

function i3k_sbean.friend_changemsg_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_changemsg_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 玩家更改头像
i3k_sbean.friend_changehead_res = i3k_class("friend_changehead_res")
function i3k_sbean.friend_changehead_res:ctor()
	self._pname_ = "friend_changehead_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_changehead_res:clone()
	return clone(self)
end

function i3k_sbean.friend_changehead_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_changehead_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 获取好友宿敌
i3k_sbean.friend_enemy_res = i3k_class("friend_enemy_res")
function i3k_sbean.friend_enemy_res:ctor()
	self._pname_ = "friend_enemy_res"
	--self.enemys:		vector[EnemyOverview]	
end

function i3k_sbean.friend_enemy_res:clone()
	return clone(self)
end

function i3k_sbean.friend_enemy_res:decode(is)
	is:popString()
	self.enemys = is:popList(i3k_sbean.EnemyOverview)
end

function i3k_sbean.friend_enemy_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.enemys)
end


-- 删除好友宿敌
i3k_sbean.friend_removeenemy_res = i3k_class("friend_removeenemy_res")
function i3k_sbean.friend_removeenemy_res:ctor()
	self._pname_ = "friend_removeenemy_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_removeenemy_res:clone()
	return clone(self)
end

function i3k_sbean.friend_removeenemy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_removeenemy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置好友关注度
i3k_sbean.friend_setfocus_res = i3k_class("friend_setfocus_res")
function i3k_sbean.friend_setfocus_res:ctor()
	self._pname_ = "friend_setfocus_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_setfocus_res:clone()
	return clone(self)
end

function i3k_sbean.friend_setfocus_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_setfocus_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 送花
i3k_sbean.give_flower_res = i3k_class("give_flower_res")
function i3k_sbean.give_flower_res:ctor()
	self._pname_ = "give_flower_res"
	--self.ok:		int32	
end

function i3k_sbean.give_flower_res:clone()
	return clone(self)
end

function i3k_sbean.give_flower_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.give_flower_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 获取赠送记录
i3k_sbean.get_flowerlog_res = i3k_class("get_flowerlog_res")
function i3k_sbean.get_flowerlog_res:ctor()
	self._pname_ = "get_flowerlog_res"
	--self.giveFlower:		vector[FlowerOverview]	
	--self.acceptFlower:		vector[FlowerOverview]	
end

function i3k_sbean.get_flowerlog_res:clone()
	return clone(self)
end

function i3k_sbean.get_flowerlog_res:decode(is)
	is:popString()
	self.giveFlower = is:popList(i3k_sbean.FlowerOverview)
	self.acceptFlower = is:popList(i3k_sbean.FlowerOverview)
end

function i3k_sbean.get_flowerlog_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.giveFlower)
	os:pushList(self.acceptFlower)
end


-- 获取接收列表
i3k_sbean.get_acceptlist_res = i3k_class("get_acceptlist_res")
function i3k_sbean.get_acceptlist_res:ctor()
	self._pname_ = "get_acceptlist_res"
	--self.result:		vector[FlowerOverview]	
end

function i3k_sbean.get_acceptlist_res:clone()
	return clone(self)
end

function i3k_sbean.get_acceptlist_res:decode(is)
	is:popString()
	self.result = is:popList(i3k_sbean.FlowerOverview)
end

function i3k_sbean.get_acceptlist_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.result)
end


-- 拍卖行信息同步回应
i3k_sbean.auction_syncitems_res = i3k_class("auction_syncitems_res")
function i3k_sbean.auction_syncitems_res:ctor()
	self._pname_ = "auction_syncitems_res"
	--self.items:		vector[DetailConsignItems]	
	--self.lastPage:		int32	
end

function i3k_sbean.auction_syncitems_res:clone()
	return clone(self)
end

function i3k_sbean.auction_syncitems_res:decode(is)
	is:popString()
	self.items = is:popList(i3k_sbean.DetailConsignItems)
	self.lastPage = is:popNumber()
end

function i3k_sbean.auction_syncitems_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.items)
	os:pushNumber(self.lastPage)
end


-- 同步自己寄售物品回应
i3k_sbean.auction_syncselfitems_res = i3k_class("auction_syncselfitems_res")
function i3k_sbean.auction_syncselfitems_res:ctor()
	self._pname_ = "auction_syncselfitems_res"
	--self.items:		map[int32, DBConsignItems]	
	--self.cellSize:		int32	
	--self.expandTimes:		int32	
end

function i3k_sbean.auction_syncselfitems_res:clone()
	return clone(self)
end

function i3k_sbean.auction_syncselfitems_res:decode(is)
	is:popString()
	self.items = is:popNumberMap(i3k_sbean.DBConsignItems)
	self.cellSize = is:popNumber()
	self.expandTimes = is:popNumber()
end

function i3k_sbean.auction_syncselfitems_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.items)
	os:pushNumber(self.cellSize)
	os:pushNumber(self.expandTimes)
end


-- 上架道具物品回应
i3k_sbean.auction_putonitems_res = i3k_class("auction_putonitems_res")
function i3k_sbean.auction_putonitems_res:ctor()
	self._pname_ = "auction_putonitems_res"
	--self.ok:		int32	
end

function i3k_sbean.auction_putonitems_res:clone()
	return clone(self)
end

function i3k_sbean.auction_putonitems_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.auction_putonitems_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 上架装备回应
i3k_sbean.auction_putonequip_res = i3k_class("auction_putonequip_res")
function i3k_sbean.auction_putonequip_res:ctor()
	self._pname_ = "auction_putonequip_res"
	--self.ok:		int32	
end

function i3k_sbean.auction_putonequip_res:clone()
	return clone(self)
end

function i3k_sbean.auction_putonequip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.auction_putonequip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 物品下架回应
i3k_sbean.auction_putoffitems_res = i3k_class("auction_putoffitems_res")
function i3k_sbean.auction_putoffitems_res:ctor()
	self._pname_ = "auction_putoffitems_res"
	--self.ok:		int32	
end

function i3k_sbean.auction_putoffitems_res:clone()
	return clone(self)
end

function i3k_sbean.auction_putoffitems_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.auction_putoffitems_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 购买物品回应
i3k_sbean.auction_buyitems_res = i3k_class("auction_buyitems_res")
function i3k_sbean.auction_buyitems_res:ctor()
	self._pname_ = "auction_buyitems_res"
	--self.ok:		int32	
end

function i3k_sbean.auction_buyitems_res:clone()
	return clone(self)
end

function i3k_sbean.auction_buyitems_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.auction_buyitems_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 拍卖行摊位扩展
i3k_sbean.auction_expand_res = i3k_class("auction_expand_res")
function i3k_sbean.auction_expand_res:ctor()
	self._pname_ = "auction_expand_res"
	--self.ok:		int32	
end

function i3k_sbean.auction_expand_res:clone()
	return clone(self)
end

function i3k_sbean.auction_expand_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.auction_expand_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 交易记录
i3k_sbean.auction_tradelog_res = i3k_class("auction_tradelog_res")
function i3k_sbean.auction_tradelog_res:ctor()
	self._pname_ = "auction_tradelog_res"
	--self.logs:		vector[DBConsignItems]	
end

function i3k_sbean.auction_tradelog_res:clone()
	return clone(self)
end

function i3k_sbean.auction_tradelog_res:decode(is)
	is:popString()
	self.logs = is:popList(i3k_sbean.DBConsignItems)
end

function i3k_sbean.auction_tradelog_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.logs)
end


-- 获取道具价格列表
i3k_sbean.auction_itemprices_res = i3k_class("auction_itemprices_res")
function i3k_sbean.auction_itemprices_res:ctor()
	self._pname_ = "auction_itemprices_res"
	--self.items:		vector[DBConsignItems]	
end

function i3k_sbean.auction_itemprices_res:clone()
	return clone(self)
end

function i3k_sbean.auction_itemprices_res:decode(is)
	is:popString()
	self.items = is:popList(i3k_sbean.DBConsignItems)
end

function i3k_sbean.auction_itemprices_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.items)
end


-- 通知寄售行疑似违规次数
i3k_sbean.auction_invalid_times = i3k_class("auction_invalid_times")
function i3k_sbean.auction_invalid_times:ctor()
	self._pname_ = "auction_invalid_times"
	--self.times:		int32	
end

function i3k_sbean.auction_invalid_times:clone()
	return clone(self)
end

function i3k_sbean.auction_invalid_times:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.auction_invalid_times:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 同步江湖客栈界面信息
i3k_sbean.treasure_syncnpcs_res = i3k_class("treasure_syncnpcs_res")
function i3k_sbean.treasure_syncnpcs_res:ctor()
	self._pname_ = "treasure_syncnpcs_res"
	--self.npcInfo:		TreasureNPC	
	--self.pieces:		map[int32, int32]	
end

function i3k_sbean.treasure_syncnpcs_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_syncnpcs_res:decode(is)
	is:popString()
	self.npcInfo = is:pop(i3k_sbean.TreasureNPC)
	self.pieces = is:popNumberNumberMap()
end

function i3k_sbean.treasure_syncnpcs_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.npcInfo)
	os:pushNumberNumberMap(self.pieces)
end


-- 刷新某一个NPC信息
i3k_sbean.treasure_refreshnpc_res = i3k_class("treasure_refreshnpc_res")
function i3k_sbean.treasure_refreshnpc_res:ctor()
	self._pname_ = "treasure_refreshnpc_res"
	--self.info:		NPCState	
end

function i3k_sbean.treasure_refreshnpc_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_refreshnpc_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.NPCState)
end

function i3k_sbean.treasure_refreshnpc_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 购买藏宝图碎片
i3k_sbean.treasure_buypieces_res = i3k_class("treasure_buypieces_res")
function i3k_sbean.treasure_buypieces_res:ctor()
	self._pname_ = "treasure_buypieces_res"
	--self.ok:		int32	
end

function i3k_sbean.treasure_buypieces_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_buypieces_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.treasure_buypieces_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取NPC礼包
i3k_sbean.treasure_npcreward_res = i3k_class("treasure_npcreward_res")
function i3k_sbean.treasure_npcreward_res:ctor()
	self._pname_ = "treasure_npcreward_res"
	--self.ok:		int32	
	--self.rewards:		map[int32, int32]	
end

function i3k_sbean.treasure_npcreward_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_npcreward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popNumberNumberMap()
end

function i3k_sbean.treasure_npcreward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.rewards)
end


-- 同步藏宝图界面信息
i3k_sbean.treasure_syncmap_res = i3k_class("treasure_syncmap_res")
function i3k_sbean.treasure_syncmap_res:ctor()
	self._pname_ = "treasure_syncmap_res"
	--self.mapInfo:		TreasureMap	
end

function i3k_sbean.treasure_syncmap_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_syncmap_res:decode(is)
	is:popString()
	self.mapInfo = is:pop(i3k_sbean.TreasureMap)
end

function i3k_sbean.treasure_syncmap_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.mapInfo)
end


-- 合成地图
i3k_sbean.treasure_makemap_res = i3k_class("treasure_makemap_res")
function i3k_sbean.treasure_makemap_res:ctor()
	self._pname_ = "treasure_makemap_res"
	--self.ok:		int32	
end

function i3k_sbean.treasure_makemap_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_makemap_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.treasure_makemap_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 总体探索
i3k_sbean.treasure_totalsearch_res = i3k_class("treasure_totalsearch_res")
function i3k_sbean.treasure_totalsearch_res:ctor()
	self._pname_ = "treasure_totalsearch_res"
	--self.curMap:		MapState	
end

function i3k_sbean.treasure_totalsearch_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_totalsearch_res:decode(is)
	is:popString()
	self.curMap = is:pop(i3k_sbean.MapState)
end

function i3k_sbean.treasure_totalsearch_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.curMap)
end


-- 探索情报点
i3k_sbean.treasure_search_res = i3k_class("treasure_search_res")
function i3k_sbean.treasure_search_res:ctor()
	self._pname_ = "treasure_search_res"
	--self.ok:		int32	
end

function i3k_sbean.treasure_search_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_search_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.treasure_search_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取藏宝图奖励
i3k_sbean.treasure_mapreward_res = i3k_class("treasure_mapreward_res")
function i3k_sbean.treasure_mapreward_res:ctor()
	self._pname_ = "treasure_mapreward_res"
	--self.ok:		int32	
	--self.rewards:		map[int32, int32]	
end

function i3k_sbean.treasure_mapreward_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_mapreward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popNumberNumberMap()
end

function i3k_sbean.treasure_mapreward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.rewards)
end


-- 扫荡领取藏宝图奖励
i3k_sbean.treasure_map_one_key_reward_res = i3k_class("treasure_map_one_key_reward_res")
function i3k_sbean.treasure_map_one_key_reward_res:ctor()
	self._pname_ = "treasure_map_one_key_reward_res"
	--self.ok:		int32	
	--self.rewards:		map[int32, int32]	
end

function i3k_sbean.treasure_map_one_key_reward_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_map_one_key_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popNumberNumberMap()
end

function i3k_sbean.treasure_map_one_key_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.rewards)
end


-- 放弃藏宝图
i3k_sbean.treasure_quitmap_res = i3k_class("treasure_quitmap_res")
function i3k_sbean.treasure_quitmap_res:ctor()
	self._pname_ = "treasure_quitmap_res"
	--self.ok:		int32	
end

function i3k_sbean.treasure_quitmap_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_quitmap_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.treasure_quitmap_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 藏品装裱
i3k_sbean.treasure_medalgrow_res = i3k_class("treasure_medalgrow_res")
function i3k_sbean.treasure_medalgrow_res:ctor()
	self._pname_ = "treasure_medalgrow_res"
	--self.ok:		int32	
end

function i3k_sbean.treasure_medalgrow_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_medalgrow_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.treasure_medalgrow_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 藏品镶边
i3k_sbean.treasure_edge_res = i3k_class("treasure_edge_res")
function i3k_sbean.treasure_edge_res:ctor()
	self._pname_ = "treasure_edge_res"
	--self.ok:		int32	
end

function i3k_sbean.treasure_edge_res:clone()
	return clone(self)
end

function i3k_sbean.treasure_edge_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.treasure_edge_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 驯服坐骑
i3k_sbean.horse_tame_res = i3k_class("horse_tame_res")
function i3k_sbean.horse_tame_res:ctor()
	self._pname_ = "horse_tame_res"
	--self.info:		HorseInfo	
end

function i3k_sbean.horse_tame_res:clone()
	return clone(self)
end

function i3k_sbean.horse_tame_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.HorseInfo)
end

function i3k_sbean.horse_tame_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 坐骑出征
i3k_sbean.horse_use_res = i3k_class("horse_use_res")
function i3k_sbean.horse_use_res:ctor()
	self._pname_ = "horse_use_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_use_res:clone()
	return clone(self)
end

function i3k_sbean.horse_use_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_use_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 坐骑升星
i3k_sbean.horse_upstar_res = i3k_class("horse_upstar_res")
function i3k_sbean.horse_upstar_res:ctor()
	self._pname_ = "horse_upstar_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_upstar_res:clone()
	return clone(self)
end

function i3k_sbean.horse_upstar_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_upstar_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 坐骑洗练
i3k_sbean.horse_enhance_res = i3k_class("horse_enhance_res")
function i3k_sbean.horse_enhance_res:ctor()
	self._pname_ = "horse_enhance_res"
	--self.attrs:		vector[Prop]	
end

function i3k_sbean.horse_enhance_res:clone()
	return clone(self)
end

function i3k_sbean.horse_enhance_res:decode(is)
	is:popString()
	self.attrs = is:popList(i3k_sbean.Prop)
end

function i3k_sbean.horse_enhance_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.attrs)
end


-- 坐骑洗练替换属性
i3k_sbean.horse_enhancesave_res = i3k_class("horse_enhancesave_res")
function i3k_sbean.horse_enhancesave_res:ctor()
	self._pname_ = "horse_enhancesave_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_enhancesave_res:clone()
	return clone(self)
end

function i3k_sbean.horse_enhancesave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_enhancesave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 更换幻化外形
i3k_sbean.horse_changeshow_res = i3k_class("horse_changeshow_res")
function i3k_sbean.horse_changeshow_res:ctor()
	self._pname_ = "horse_changeshow_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_changeshow_res:clone()
	return clone(self)
end

function i3k_sbean.horse_changeshow_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_changeshow_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 激活幻化外形
i3k_sbean.horse_activateshow_res = i3k_class("horse_activateshow_res")
function i3k_sbean.horse_activateshow_res:ctor()
	self._pname_ = "horse_activateshow_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_activateshow_res:clone()
	return clone(self)
end

function i3k_sbean.horse_activateshow_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_activateshow_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 激活骑术
i3k_sbean.horse_learnskill_res = i3k_class("horse_learnskill_res")
function i3k_sbean.horse_learnskill_res:ctor()
	self._pname_ = "horse_learnskill_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_learnskill_res:clone()
	return clone(self)
end

function i3k_sbean.horse_learnskill_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_learnskill_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步骑术等级
i3k_sbean.sync_horse_skillLevel_res = i3k_class("sync_horse_skillLevel_res")
function i3k_sbean.sync_horse_skillLevel_res:ctor()
	self._pname_ = "sync_horse_skillLevel_res"
	--self.data:		map[int32, int32]	
end

function i3k_sbean.sync_horse_skillLevel_res:clone()
	return clone(self)
end

function i3k_sbean.sync_horse_skillLevel_res:decode(is)
	is:popString()
	self.data = is:popNumberNumberMap()
end

function i3k_sbean.sync_horse_skillLevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.data)
end


-- 升级骑术等级
i3k_sbean.horse_skill_up_level_res = i3k_class("horse_skill_up_level_res")
function i3k_sbean.horse_skill_up_level_res:ctor()
	self._pname_ = "horse_skill_up_level_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_skill_up_level_res:clone()
	return clone(self)
end

function i3k_sbean.horse_skill_up_level_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_skill_up_level_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置骑术
i3k_sbean.horse_setskill_res = i3k_class("horse_setskill_res")
function i3k_sbean.horse_setskill_res:ctor()
	self._pname_ = "horse_setskill_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_setskill_res:clone()
	return clone(self)
end

function i3k_sbean.horse_setskill_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_setskill_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 更新坐骑皮肤时间
i3k_sbean.horse_show_update = i3k_class("horse_show_update")
function i3k_sbean.horse_show_update:ctor()
	self._pname_ = "horse_show_update"
	--self.showID:		int32	
	--self.endTime:		int32	
end

function i3k_sbean.horse_show_update:clone()
	return clone(self)
end

function i3k_sbean.horse_show_update:decode(is)
	is:popString()
	self.showID = is:popNumber()
	self.endTime = is:popNumber()
end

function i3k_sbean.horse_show_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
	os:pushNumber(self.endTime)
end


-- 同步当前使用皮肤
i3k_sbean.horse_curshow = i3k_class("horse_curshow")
function i3k_sbean.horse_curshow:ctor()
	self._pname_ = "horse_curshow"
	--self.showID:		int32	
end

function i3k_sbean.horse_curshow:clone()
	return clone(self)
end

function i3k_sbean.horse_curshow:decode(is)
	is:popString()
	self.showID = is:popNumber()
end

function i3k_sbean.horse_curshow:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
end


-- 坐骑突破
i3k_sbean.horse_break_res = i3k_class("horse_break_res")
function i3k_sbean.horse_break_res:ctor()
	self._pname_ = "horse_break_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_break_res:clone()
	return clone(self)
end

function i3k_sbean.horse_break_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_break_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 皮肤激活骑战
i3k_sbean.horse_showfight_res = i3k_class("horse_showfight_res")
function i3k_sbean.horse_showfight_res:ctor()
	self._pname_ = "horse_showfight_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_showfight_res:clone()
	return clone(self)
end

function i3k_sbean.horse_showfight_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_showfight_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 马术精通加经验
i3k_sbean.horse_master_addexp_res = i3k_class("horse_master_addexp_res")
function i3k_sbean.horse_master_addexp_res:ctor()
	self._pname_ = "horse_master_addexp_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_master_addexp_res:clone()
	return clone(self)
end

function i3k_sbean.horse_master_addexp_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_master_addexp_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 马术精通解锁条目
i3k_sbean.horse_master_unlock_res = i3k_class("horse_master_unlock_res")
function i3k_sbean.horse_master_unlock_res:ctor()
	self._pname_ = "horse_master_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_master_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.horse_master_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_master_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 良驹之灵锤炼(ok:协议是否成功, success:概率是否成功)
i3k_sbean.horse_spirit_upstar_res = i3k_class("horse_spirit_upstar_res")
function i3k_sbean.horse_spirit_upstar_res:ctor()
	self._pname_ = "horse_spirit_upstar_res"
	--self.ok:		int32	
	--self.success:		int32	
end

function i3k_sbean.horse_spirit_upstar_res:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_upstar_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.success = is:popNumber()
end

function i3k_sbean.horse_spirit_upstar_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.success)
end


-- 良驹之灵技能升级(lvl 1:解锁技能)
i3k_sbean.horse_spirit_skill_lvlup_res = i3k_class("horse_spirit_skill_lvlup_res")
function i3k_sbean.horse_spirit_skill_lvlup_res:ctor()
	self._pname_ = "horse_spirit_skill_lvlup_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_spirit_skill_lvlup_res:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_skill_lvlup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_spirit_skill_lvlup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 良驹之灵更换形象
i3k_sbean.horse_spirit_setshow_res = i3k_class("horse_spirit_setshow_res")
function i3k_sbean.horse_spirit_setshow_res:ctor()
	self._pname_ = "horse_spirit_setshow_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_spirit_setshow_res:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_setshow_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_spirit_setshow_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 良驹之灵升阶自动更换形象
i3k_sbean.horse_spirit_showauto_res = i3k_class("horse_spirit_showauto_res")
function i3k_sbean.horse_spirit_showauto_res:ctor()
	self._pname_ = "horse_spirit_showauto_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_spirit_showauto_res:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_showauto_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_spirit_showauto_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 良驹之灵隐藏形象
i3k_sbean.horse_spirit_hide_res = i3k_class("horse_spirit_hide_res")
function i3k_sbean.horse_spirit_hide_res:ctor()
	self._pname_ = "horse_spirit_hide_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_spirit_hide_res:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_hide_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_spirit_hide_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 新增良驹之灵形象
i3k_sbean.horse_spirit_show_add = i3k_class("horse_spirit_show_add")
function i3k_sbean.horse_spirit_show_add:ctor()
	self._pname_ = "horse_spirit_show_add"
	--self.showID:		int32	
end

function i3k_sbean.horse_spirit_show_add:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_show_add:decode(is)
	is:popString()
	self.showID = is:popNumber()
end

function i3k_sbean.horse_spirit_show_add:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
end


-- 解锁良驹之灵形象
i3k_sbean.horse_spirit_unlock_res = i3k_class("horse_spirit_unlock_res")
function i3k_sbean.horse_spirit_unlock_res:ctor()
	self._pname_ = "horse_spirit_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_spirit_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_spirit_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 穿戴时装
i3k_sbean.fashion_upwear_res = i3k_class("fashion_upwear_res")
function i3k_sbean.fashion_upwear_res:ctor()
	self._pname_ = "fashion_upwear_res"
	--self.ok:		int32	
end

function i3k_sbean.fashion_upwear_res:clone()
	return clone(self)
end

function i3k_sbean.fashion_upwear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fashion_upwear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 放入衣橱
i3k_sbean.fashion_putwardrobe_res = i3k_class("fashion_putwardrobe_res")
function i3k_sbean.fashion_putwardrobe_res:ctor()
	self._pname_ = "fashion_putwardrobe_res"
	--self.ok:		int32	
end

function i3k_sbean.fashion_putwardrobe_res:clone()
	return clone(self)
end

function i3k_sbean.fashion_putwardrobe_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fashion_putwardrobe_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 从衣橱取出
i3k_sbean.fashion_getwardrobe_res = i3k_class("fashion_getwardrobe_res")
function i3k_sbean.fashion_getwardrobe_res:ctor()
	self._pname_ = "fashion_getwardrobe_res"
	--self.ok:		int32	
end

function i3k_sbean.fashion_getwardrobe_res:clone()
	return clone(self)
end

function i3k_sbean.fashion_getwardrobe_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fashion_getwardrobe_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 精纺时装
i3k_sbean.fashion_worsted_res = i3k_class("fashion_worsted_res")
function i3k_sbean.fashion_worsted_res:ctor()
	self._pname_ = "fashion_worsted_res"
	--self.enhanceProps1:		vector[Prop]	
	--self.enhanceProps2:		vector[Prop]	
	--self.ok:		int32	
end

function i3k_sbean.fashion_worsted_res:clone()
	return clone(self)
end

function i3k_sbean.fashion_worsted_res:decode(is)
	is:popString()
	self.enhanceProps1 = is:popList(i3k_sbean.Prop)
	self.enhanceProps2 = is:popList(i3k_sbean.Prop)
	self.ok = is:popNumber()
end

function i3k_sbean.fashion_worsted_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.enhanceProps1)
	os:pushList(self.enhanceProps2)
	os:pushNumber(self.ok)
end


-- 保存精纺时装属性
i3k_sbean.fashion_save_worsted_res = i3k_class("fashion_save_worsted_res")
function i3k_sbean.fashion_save_worsted_res:ctor()
	self._pname_ = "fashion_save_worsted_res"
	--self.ok:		int32	
end

function i3k_sbean.fashion_save_worsted_res:clone()
	return clone(self)
end

function i3k_sbean.fashion_save_worsted_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fashion_save_worsted_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 显示/隐藏
i3k_sbean.fashion_setshow_res = i3k_class("fashion_setshow_res")
function i3k_sbean.fashion_setshow_res:ctor()
	self._pname_ = "fashion_setshow_res"
	--self.ok:		int32	
end

function i3k_sbean.fashion_setshow_res:clone()
	return clone(self)
end

function i3k_sbean.fashion_setshow_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fashion_setshow_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备的时装（登录时同步）
i3k_sbean.role_curfashions = i3k_class("role_curfashions")
function i3k_sbean.role_curfashions:ctor()
	self._pname_ = "role_curfashions"
	--self.allFashions:		vector[DBFashion]	
	--self.curFashions:		map[int32, int32]	
	--self.showFashionTypes:		map[int32, int32]	
end

function i3k_sbean.role_curfashions:clone()
	return clone(self)
end

function i3k_sbean.role_curfashions:decode(is)
	is:popString()
	self.allFashions = is:popList(i3k_sbean.DBFashion)
	self.curFashions = is:popNumberNumberMap()
	self.showFashionTypes = is:popNumberNumberMap()
end

function i3k_sbean.role_curfashions:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.allFashions)
	os:pushNumberNumberMap(self.curFashions)
	os:pushNumberNumberMap(self.showFashionTypes)
end


-- 龙印合成
i3k_sbean.seal_make_res = i3k_class("seal_make_res")
function i3k_sbean.seal_make_res:ctor()
	self._pname_ = "seal_make_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_make_res:clone()
	return clone(self)
end

function i3k_sbean.seal_make_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_make_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 龙印升阶
i3k_sbean.seal_upgrade_res = i3k_class("seal_upgrade_res")
function i3k_sbean.seal_upgrade_res:ctor()
	self._pname_ = "seal_upgrade_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_upgrade_res:clone()
	return clone(self)
end

function i3k_sbean.seal_upgrade_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_upgrade_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 龙印洗练
i3k_sbean.seal_enhance_res = i3k_class("seal_enhance_res")
function i3k_sbean.seal_enhance_res:ctor()
	self._pname_ = "seal_enhance_res"
	--self.skills:		map[int32, int32]	
end

function i3k_sbean.seal_enhance_res:clone()
	return clone(self)
end

function i3k_sbean.seal_enhance_res:decode(is)
	is:popString()
	self.skills = is:popNumberNumberMap()
end

function i3k_sbean.seal_enhance_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.skills)
end


-- 龙印储存
i3k_sbean.seal_save_enhance_res = i3k_class("seal_save_enhance_res")
function i3k_sbean.seal_save_enhance_res:ctor()
	self._pname_ = "seal_save_enhance_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_save_enhance_res:clone()
	return clone(self)
end

function i3k_sbean.seal_save_enhance_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_save_enhance_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步历练页签信息
i3k_sbean.expcoin_sync_res = i3k_class("expcoin_sync_res")
function i3k_sbean.expcoin_sync_res:ctor()
	self._pname_ = "expcoin_sync_res"
	--self.dayTakeTimes:		int32	
end

function i3k_sbean.expcoin_sync_res:clone()
	return clone(self)
end

function i3k_sbean.expcoin_sync_res:decode(is)
	is:popString()
	self.dayTakeTimes = is:popNumber()
end

function i3k_sbean.expcoin_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayTakeTimes)
end


-- 提取历练
i3k_sbean.expcoin_extract_res = i3k_class("expcoin_extract_res")
function i3k_sbean.expcoin_extract_res:ctor()
	self._pname_ = "expcoin_extract_res"
	--self.ok:		int32	
end

function i3k_sbean.expcoin_extract_res:clone()
	return clone(self)
end

function i3k_sbean.expcoin_extract_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.expcoin_extract_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步藏书页签信息
i3k_sbean.rarebook_sync_res = i3k_class("rarebook_sync_res")
function i3k_sbean.rarebook_sync_res:ctor()
	self._pname_ = "rarebook_sync_res"
	--self.bag:		map[int32, int32]	
end

function i3k_sbean.rarebook_sync_res:clone()
	return clone(self)
end

function i3k_sbean.rarebook_sync_res:decode(is)
	is:popString()
	self.bag = is:popNumberNumberMap()
end

function i3k_sbean.rarebook_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.bag)
end


-- 藏书存入
i3k_sbean.rarebook_push_res = i3k_class("rarebook_push_res")
function i3k_sbean.rarebook_push_res:ctor()
	self._pname_ = "rarebook_push_res"
	--self.ok:		int32	
end

function i3k_sbean.rarebook_push_res:clone()
	return clone(self)
end

function i3k_sbean.rarebook_push_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rarebook_push_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 藏书取出
i3k_sbean.rarebook_pop_res = i3k_class("rarebook_pop_res")
function i3k_sbean.rarebook_pop_res:ctor()
	self._pname_ = "rarebook_pop_res"
	--self.ok:		int32	
end

function i3k_sbean.rarebook_pop_res:clone()
	return clone(self)
end

function i3k_sbean.rarebook_pop_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rarebook_pop_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 藏书解锁
i3k_sbean.rarebook_unlock_res = i3k_class("rarebook_unlock_res")
function i3k_sbean.rarebook_unlock_res:ctor()
	self._pname_ = "rarebook_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.rarebook_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.rarebook_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rarebook_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 藏书升级
i3k_sbean.rarebook_lvlup_res = i3k_class("rarebook_lvlup_res")
function i3k_sbean.rarebook_lvlup_res:ctor()
	self._pname_ = "rarebook_lvlup_res"
	--self.ok:		int32	
end

function i3k_sbean.rarebook_lvlup_res:clone()
	return clone(self)
end

function i3k_sbean.rarebook_lvlup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rarebook_lvlup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.grasp_info_onlogin = i3k_class("grasp_info_onlogin")
function i3k_sbean.grasp_info_onlogin:ctor()
	self._pname_ = "grasp_info_onlogin"
	--self.dayFortune:		int32	
	--self.dayGraspTime:		int32	
	--self.lastGraspTime:		int32	
end

function i3k_sbean.grasp_info_onlogin:clone()
	return clone(self)
end

function i3k_sbean.grasp_info_onlogin:decode(is)
	is:popString()
	self.dayFortune = is:popNumber()
	self.dayGraspTime = is:popNumber()
	self.lastGraspTime = is:popNumber()
end

function i3k_sbean.grasp_info_onlogin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayFortune)
	os:pushNumber(self.dayGraspTime)
	os:pushNumber(self.lastGraspTime)
end


-- 同步参悟页签信息
i3k_sbean.grasp_sync_res = i3k_class("grasp_sync_res")
function i3k_sbean.grasp_sync_res:ctor()
	self._pname_ = "grasp_sync_res"
	--self.dayFortune:		int32	
	--self.dayGraspTime:		int32	
	--self.lastGraspTime:		int32	
	--self.dayBuyGraspTime:		int32	
	--self.graspSkillLevel:		map[int32, int32]	
end

function i3k_sbean.grasp_sync_res:clone()
	return clone(self)
end

function i3k_sbean.grasp_sync_res:decode(is)
	is:popString()
	self.dayFortune = is:popNumber()
	self.dayGraspTime = is:popNumber()
	self.lastGraspTime = is:popNumber()
	self.dayBuyGraspTime = is:popNumber()
	self.graspSkillLevel = is:popNumberNumberMap()
end

function i3k_sbean.grasp_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayFortune)
	os:pushNumber(self.dayGraspTime)
	os:pushNumber(self.lastGraspTime)
	os:pushNumber(self.dayBuyGraspTime)
	os:pushNumberNumberMap(self.graspSkillLevel)
end


i3k_sbean.grasp_dayforture_refresh = i3k_class("grasp_dayforture_refresh")
function i3k_sbean.grasp_dayforture_refresh:ctor()
	self._pname_ = "grasp_dayforture_refresh"
	--self.dayFortune:		int32	
end

function i3k_sbean.grasp_dayforture_refresh:clone()
	return clone(self)
end

function i3k_sbean.grasp_dayforture_refresh:decode(is)
	is:popString()
	self.dayFortune = is:popNumber()
end

function i3k_sbean.grasp_dayforture_refresh:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayFortune)
end


-- 参悟
i3k_sbean.grasp_impl_res = i3k_class("grasp_impl_res")
function i3k_sbean.grasp_impl_res:ctor()
	self._pname_ = "grasp_impl_res"
	--self.ok:		int32	
	--self.add:		int32	
end

function i3k_sbean.grasp_impl_res:clone()
	return clone(self)
end

function i3k_sbean.grasp_impl_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.add = is:popNumber()
end

function i3k_sbean.grasp_impl_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.add)
end


-- 参悟次数购买
i3k_sbean.grasp_time_buy_res = i3k_class("grasp_time_buy_res")
function i3k_sbean.grasp_time_buy_res:ctor()
	self._pname_ = "grasp_time_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.grasp_time_buy_res:clone()
	return clone(self)
end

function i3k_sbean.grasp_time_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.grasp_time_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 参悟CD时间重置
i3k_sbean.grasp_reset_res = i3k_class("grasp_reset_res")
function i3k_sbean.grasp_reset_res:ctor()
	self._pname_ = "grasp_reset_res"
	--self.ok:		int32	
end

function i3k_sbean.grasp_reset_res:clone()
	return clone(self)
end

function i3k_sbean.grasp_reset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.grasp_reset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 购买乾坤点
i3k_sbean.dmgtransfer_buypoint_res = i3k_class("dmgtransfer_buypoint_res")
function i3k_sbean.dmgtransfer_buypoint_res:ctor()
	self._pname_ = "dmgtransfer_buypoint_res"
	--self.ok:		int32	
end

function i3k_sbean.dmgtransfer_buypoint_res:clone()
	return clone(self)
end

function i3k_sbean.dmgtransfer_buypoint_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dmgtransfer_buypoint_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 投入乾坤点
i3k_sbean.dmgtransfer_putpoint_res = i3k_class("dmgtransfer_putpoint_res")
function i3k_sbean.dmgtransfer_putpoint_res:ctor()
	self._pname_ = "dmgtransfer_putpoint_res"
	--self.ok:		int32	
end

function i3k_sbean.dmgtransfer_putpoint_res:clone()
	return clone(self)
end

function i3k_sbean.dmgtransfer_putpoint_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dmgtransfer_putpoint_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 乾坤升级
i3k_sbean.dmgtransfer_lvlup_res = i3k_class("dmgtransfer_lvlup_res")
function i3k_sbean.dmgtransfer_lvlup_res:ctor()
	self._pname_ = "dmgtransfer_lvlup_res"
	--self.ok:		int32	
end

function i3k_sbean.dmgtransfer_lvlup_res:clone()
	return clone(self)
end

function i3k_sbean.dmgtransfer_lvlup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dmgtransfer_lvlup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 重置
i3k_sbean.dmgtransfer_reset_res = i3k_class("dmgtransfer_reset_res")
function i3k_sbean.dmgtransfer_reset_res:ctor()
	self._pname_ = "dmgtransfer_reset_res"
	--self.ok:		int32	
end

function i3k_sbean.dmgtransfer_reset_res:clone()
	return clone(self)
end

function i3k_sbean.dmgtransfer_reset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dmgtransfer_reset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步用户调研信息
i3k_sbean.usersurvey_sync_res = i3k_class("usersurvey_sync_res")
function i3k_sbean.usersurvey_sync_res:ctor()
	self._pname_ = "usersurvey_sync_res"
	--self.seq:		int32	
	--self.reward:		int32	
end

function i3k_sbean.usersurvey_sync_res:clone()
	return clone(self)
end

function i3k_sbean.usersurvey_sync_res:decode(is)
	is:popString()
	self.seq = is:popNumber()
	self.reward = is:popNumber()
end

function i3k_sbean.usersurvey_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
	os:pushNumber(self.reward)
end


-- 用户调研提交答案
i3k_sbean.usersurvey_submit_res = i3k_class("usersurvey_submit_res")
function i3k_sbean.usersurvey_submit_res:ctor()
	self._pname_ = "usersurvey_submit_res"
	--self.ok:		int32	
end

function i3k_sbean.usersurvey_submit_res:clone()
	return clone(self)
end

function i3k_sbean.usersurvey_submit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.usersurvey_submit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 用户调研结束领取奖励
i3k_sbean.usersurvey_reward_res = i3k_class("usersurvey_reward_res")
function i3k_sbean.usersurvey_reward_res:ctor()
	self._pname_ = "usersurvey_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.usersurvey_reward_res:clone()
	return clone(self)
end

function i3k_sbean.usersurvey_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.usersurvey_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步登陆有礼信息
i3k_sbean.cblogingift_sync_res = i3k_class("cblogingift_sync_res")
function i3k_sbean.cblogingift_sync_res:ctor()
	self._pname_ = "cblogingift_sync_res"
	--self.gifts:		set[int32]	
end

function i3k_sbean.cblogingift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.cblogingift_sync_res:decode(is)
	is:popString()
	self.gifts = is:popNumberSet()
end

function i3k_sbean.cblogingift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.gifts)
end


-- 登陆有礼领奖
i3k_sbean.cblogingift_take_res = i3k_class("cblogingift_take_res")
function i3k_sbean.cblogingift_take_res:ctor()
	self._pname_ = "cblogingift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.cblogingift_take_res:clone()
	return clone(self)
end

function i3k_sbean.cblogingift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cblogingift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 升级送VIP、钻石
i3k_sbean.cblvlupgift_sync_res = i3k_class("cblvlupgift_sync_res")
function i3k_sbean.cblvlupgift_sync_res:ctor()
	self._pname_ = "cblvlupgift_sync_res"
	--self.gifts:		set[int32]	
end

function i3k_sbean.cblvlupgift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.cblvlupgift_sync_res:decode(is)
	is:popString()
	self.gifts = is:popNumberSet()
end

function i3k_sbean.cblvlupgift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.gifts)
end


-- 升级送VIP、钻石(领奖)
i3k_sbean.cblvlupgift_take_res = i3k_class("cblvlupgift_take_res")
function i3k_sbean.cblvlupgift_take_res:ctor()
	self._pname_ = "cblvlupgift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.cblvlupgift_take_res:clone()
	return clone(self)
end

function i3k_sbean.cblvlupgift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cblvlupgift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步完善资料拿大奖信息
i3k_sbean.userdata_sync_res = i3k_class("userdata_sync_res")
function i3k_sbean.userdata_sync_res:ctor()
	self._pname_ = "userdata_sync_res"
	--self.data:		DBUserData	
end

function i3k_sbean.userdata_sync_res:clone()
	return clone(self)
end

function i3k_sbean.userdata_sync_res:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBUserData)
end

function i3k_sbean.userdata_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 资料修改
i3k_sbean.userdata_modify_res = i3k_class("userdata_modify_res")
function i3k_sbean.userdata_modify_res:ctor()
	self._pname_ = "userdata_modify_res"
	--self.ok:		int32	
end

function i3k_sbean.userdata_modify_res:clone()
	return clone(self)
end

function i3k_sbean.userdata_modify_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.userdata_modify_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完善资料领奖
i3k_sbean.userdata_reward_res = i3k_class("userdata_reward_res")
function i3k_sbean.userdata_reward_res:ctor()
	self._pname_ = "userdata_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.userdata_reward_res:clone()
	return clone(self)
end

function i3k_sbean.userdata_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.userdata_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步封测倒计时信息
i3k_sbean.cbcountdowngift_sync_res = i3k_class("cbcountdowngift_sync_res")
function i3k_sbean.cbcountdowngift_sync_res:ctor()
	self._pname_ = "cbcountdowngift_sync_res"
	--self.gifts:		set[int32]	
end

function i3k_sbean.cbcountdowngift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.cbcountdowngift_sync_res:decode(is)
	is:popString()
	self.gifts = is:popNumberSet()
end

function i3k_sbean.cbcountdowngift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.gifts)
end


-- 封测倒计时领奖
i3k_sbean.cbcountdowngift_take_res = i3k_class("cbcountdowngift_take_res")
function i3k_sbean.cbcountdowngift_take_res:ctor()
	self._pname_ = "cbcountdowngift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.cbcountdowngift_take_res:clone()
	return clone(self)
end

function i3k_sbean.cbcountdowngift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cbcountdowngift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步限时领奖信息
i3k_sbean.ontimegift_sync_res = i3k_class("ontimegift_sync_res")
function i3k_sbean.ontimegift_sync_res:ctor()
	self._pname_ = "ontimegift_sync_res"
	--self.gifts:		set[int32]	
end

function i3k_sbean.ontimegift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.ontimegift_sync_res:decode(is)
	is:popString()
	self.gifts = is:popNumberSet()
end

function i3k_sbean.ontimegift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.gifts)
end


-- 限时领奖领取奖励
i3k_sbean.ontimegift_take_res = i3k_class("ontimegift_take_res")
function i3k_sbean.ontimegift_take_res:ctor()
	self._pname_ = "ontimegift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.ontimegift_take_res:clone()
	return clone(self)
end

function i3k_sbean.ontimegift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.ontimegift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步强化比拼信息
i3k_sbean.strengthengift_sync_res = i3k_class("strengthengift_sync_res")
function i3k_sbean.strengthengift_sync_res:ctor()
	self._pname_ = "strengthengift_sync_res"
	--self.gifts:		set[int32]	
end

function i3k_sbean.strengthengift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.strengthengift_sync_res:decode(is)
	is:popString()
	self.gifts = is:popNumberSet()
end

function i3k_sbean.strengthengift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.gifts)
end


-- 限时强化比拼奖励
i3k_sbean.strengthengift_take_res = i3k_class("strengthengift_take_res")
function i3k_sbean.strengthengift_take_res:ctor()
	self._pname_ = "strengthengift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.strengthengift_take_res:clone()
	return clone(self)
end

function i3k_sbean.strengthengift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.strengthengift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步官网调研信息
i3k_sbean.official_research_sync_res = i3k_class("official_research_sync_res")
function i3k_sbean.official_research_sync_res:ctor()
	self._pname_ = "official_research_sync_res"
	--self.gifts:		int8	
end

function i3k_sbean.official_research_sync_res:clone()
	return clone(self)
end

function i3k_sbean.official_research_sync_res:decode(is)
	is:popString()
	self.gifts = is:popNumber()
end

function i3k_sbean.official_research_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gifts)
end


-- 限时官网调研奖励
i3k_sbean.official_research_take_res = i3k_class("official_research_take_res")
function i3k_sbean.official_research_take_res:ctor()
	self._pname_ = "official_research_take_res"
	--self.ok:		int32	
end

function i3k_sbean.official_research_take_res:clone()
	return clone(self)
end

function i3k_sbean.official_research_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.official_research_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步角色信息临时vip
i3k_sbean.role_tempvip = i3k_class("role_tempvip")
function i3k_sbean.role_tempvip:ctor()
	self._pname_ = "role_tempvip"
	--self.tempVipLvl:		int32	
	--self.tempVipEndTime:		int32	
end

function i3k_sbean.role_tempvip:clone()
	return clone(self)
end

function i3k_sbean.role_tempvip:decode(is)
	is:popString()
	self.tempVipLvl = is:popNumber()
	self.tempVipEndTime = is:popNumber()
end

function i3k_sbean.role_tempvip:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.tempVipLvl)
	os:pushNumber(self.tempVipEndTime)
end


-- 设置当前的永久称号
i3k_sbean.permanenttitle_set_res = i3k_class("permanenttitle_set_res")
function i3k_sbean.permanenttitle_set_res:ctor()
	self._pname_ = "permanenttitle_set_res"
	--self.ok:		int32	
end

function i3k_sbean.permanenttitle_set_res:clone()
	return clone(self)
end

function i3k_sbean.permanenttitle_set_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.permanenttitle_set_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置当前的时效称号
i3k_sbean.timedtitle_set_res = i3k_class("timedtitle_set_res")
function i3k_sbean.timedtitle_set_res:ctor()
	self._pname_ = "timedtitle_set_res"
	--self.ok:		int32	
end

function i3k_sbean.timedtitle_set_res:clone()
	return clone(self)
end

function i3k_sbean.timedtitle_set_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.timedtitle_set_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解锁新的称号位回应
i3k_sbean.titleslot_unlock_res = i3k_class("titleslot_unlock_res")
function i3k_sbean.titleslot_unlock_res:ctor()
	self._pname_ = "titleslot_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.titleslot_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.titleslot_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.titleslot_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 接取支线任务
i3k_sbean.branch_task_take_res = i3k_class("branch_task_take_res")
function i3k_sbean.branch_task_take_res:ctor()
	self._pname_ = "branch_task_take_res"
	--self.ok:		int32	
end

function i3k_sbean.branch_task_take_res:clone()
	return clone(self)
end

function i3k_sbean.branch_task_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.branch_task_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 支线任务放弃
i3k_sbean.branch_task_quit_res = i3k_class("branch_task_quit_res")
function i3k_sbean.branch_task_quit_res:ctor()
	self._pname_ = "branch_task_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.branch_task_quit_res:clone()
	return clone(self)
end

function i3k_sbean.branch_task_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.branch_task_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 支线任务交付
i3k_sbean.branch_task_finish_res = i3k_class("branch_task_finish_res")
function i3k_sbean.branch_task_finish_res:ctor()
	self._pname_ = "branch_task_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.branch_task_finish_res:clone()
	return clone(self)
end

function i3k_sbean.branch_task_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.branch_task_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 史诗任务接取
i3k_sbean.epic_task_take_res = i3k_class("epic_task_take_res")
function i3k_sbean.epic_task_take_res:ctor()
	self._pname_ = "epic_task_take_res"
	--self.receiveTime:		int32	
end

function i3k_sbean.epic_task_take_res:clone()
	return clone(self)
end

function i3k_sbean.epic_task_take_res:decode(is)
	is:popString()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.epic_task_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.receiveTime)
end


-- 史诗任务领奖
i3k_sbean.epic_task_reward_res = i3k_class("epic_task_reward_res")
function i3k_sbean.epic_task_reward_res:ctor()
	self._pname_ = "epic_task_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.epic_task_reward_res:clone()
	return clone(self)
end

function i3k_sbean.epic_task_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.epic_task_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 史诗任务放弃
i3k_sbean.epic_task_quit_res = i3k_class("epic_task_quit_res")
function i3k_sbean.epic_task_quit_res:ctor()
	self._pname_ = "epic_task_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.epic_task_quit_res:clone()
	return clone(self)
end

function i3k_sbean.epic_task_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.epic_task_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步爬塔数据
i3k_sbean.sync_tower_res = i3k_class("sync_tower_res")
function i3k_sbean.sync_tower_res:ctor()
	self._pname_ = "sync_tower_res"
	--self.info:		DBClimbTower	
end

function i3k_sbean.sync_tower_res:clone()
	return clone(self)
end

function i3k_sbean.sync_tower_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBClimbTower)
end

function i3k_sbean.sync_tower_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 同步战绩记录
i3k_sbean.tower_record_res = i3k_class("tower_record_res")
function i3k_sbean.tower_record_res:ctor()
	self._pname_ = "tower_record_res"
	--self.data:		map[int32, DBClimbTowerRecordData]	
end

function i3k_sbean.tower_record_res:clone()
	return clone(self)
end

function i3k_sbean.tower_record_res:decode(is)
	is:popString()
	self.data = is:popNumberMap(i3k_sbean.DBClimbTowerRecordData)
end

function i3k_sbean.tower_record_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.data)
end


-- 设置爬塔系统出战随从
i3k_sbean.tower_setpets_res = i3k_class("tower_setpets_res")
function i3k_sbean.tower_setpets_res:ctor()
	self._pname_ = "tower_setpets_res"
	--self.ok:		int32	
end

function i3k_sbean.tower_setpets_res:clone()
	return clone(self)
end

function i3k_sbean.tower_setpets_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.tower_setpets_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开始战斗
i3k_sbean.tower_startfight_res = i3k_class("tower_startfight_res")
function i3k_sbean.tower_startfight_res:ctor()
	self._pname_ = "tower_startfight_res"
	--self.ok:		int32	
end

function i3k_sbean.tower_startfight_res:clone()
	return clone(self)
end

function i3k_sbean.tower_startfight_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.tower_startfight_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入爬塔场景同步
i3k_sbean.role_towermap_sync = i3k_class("role_towermap_sync")
function i3k_sbean.role_towermap_sync:ctor()
	self._pname_ = "role_towermap_sync"
	--self.mapId:		int32	
	--self.killCount:		int32	
end

function i3k_sbean.role_towermap_sync:clone()
	return clone(self)
end

function i3k_sbean.role_towermap_sync:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.killCount = is:popNumber()
end

function i3k_sbean.role_towermap_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.killCount)
end


-- 购买挑战次数
i3k_sbean.tower_buytimes_res = i3k_class("tower_buytimes_res")
function i3k_sbean.tower_buytimes_res:ctor()
	self._pname_ = "tower_buytimes_res"
	--self.ok:		int32	
end

function i3k_sbean.tower_buytimes_res:clone()
	return clone(self)
end

function i3k_sbean.tower_buytimes_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.tower_buytimes_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 爬塔副本扫荡
i3k_sbean.tower_sweep_res = i3k_class("tower_sweep_res")
function i3k_sbean.tower_sweep_res:ctor()
	self._pname_ = "tower_sweep_res"
	--self.data:		MapSummary	
end

function i3k_sbean.tower_sweep_res:clone()
	return clone(self)
end

function i3k_sbean.tower_sweep_res:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.MapSummary)
end

function i3k_sbean.tower_sweep_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 爬塔副本一键扫荡
i3k_sbean.tower_new_sweep_res = i3k_class("tower_new_sweep_res")
function i3k_sbean.tower_new_sweep_res:ctor()
	self._pname_ = "tower_new_sweep_res"
	--self.ok:		int32	
	--self.data:		vector[TowerSweepResultInfo]	
end

function i3k_sbean.tower_new_sweep_res:clone()
	return clone(self)
end

function i3k_sbean.tower_new_sweep_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.data = is:popList(i3k_sbean.TowerSweepResultInfo)
end

function i3k_sbean.tower_new_sweep_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.data)
end


-- 同步声望数据
i3k_sbean.sync_towerfame_res = i3k_class("sync_towerfame_res")
function i3k_sbean.sync_towerfame_res:ctor()
	self._pname_ = "sync_towerfame_res"
	--self.data:		map[int32, DBClimbTowerFame]	
end

function i3k_sbean.sync_towerfame_res:clone()
	return clone(self)
end

function i3k_sbean.sync_towerfame_res:decode(is)
	is:popString()
	self.data = is:popNumberMap(i3k_sbean.DBClimbTowerFame)
end

function i3k_sbean.sync_towerfame_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.data)
end


-- 爬塔声望捐赠物品
i3k_sbean.tower_donate_res = i3k_class("tower_donate_res")
function i3k_sbean.tower_donate_res:ctor()
	self._pname_ = "tower_donate_res"
	--self.ok:		int32	
end

function i3k_sbean.tower_donate_res:clone()
	return clone(self)
end

function i3k_sbean.tower_donate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.tower_donate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 爬塔声望一键捐赠物品
i3k_sbean.tower_onekey_donate_res = i3k_class("tower_onekey_donate_res")
function i3k_sbean.tower_onekey_donate_res:ctor()
	self._pname_ = "tower_onekey_donate_res"
	--self.ok:		int32	
	--self.delItem:		map[int32, int32]	
end

function i3k_sbean.tower_onekey_donate_res:clone()
	return clone(self)
end

function i3k_sbean.tower_onekey_donate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.delItem = is:popNumberNumberMap()
end

function i3k_sbean.tower_onekey_donate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.delItem)
end


-- 爬塔领取声望奖励
i3k_sbean.take_towerfame_res = i3k_class("take_towerfame_res")
function i3k_sbean.take_towerfame_res:ctor()
	self._pname_ = "take_towerfame_res"
	--self.ok:		int32	
end

function i3k_sbean.take_towerfame_res:clone()
	return clone(self)
end

function i3k_sbean.take_towerfame_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_towerfame_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入秘境
i3k_sbean.enter_secretmap_res = i3k_class("enter_secretmap_res")
function i3k_sbean.enter_secretmap_res:ctor()
	self._pname_ = "enter_secretmap_res"
	--self.ok:		int32	
end

function i3k_sbean.enter_secretmap_res:clone()
	return clone(self)
end

function i3k_sbean.enter_secretmap_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.enter_secretmap_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取秘境任务奖励
i3k_sbean.take_secretreward_res = i3k_class("take_secretreward_res")
function i3k_sbean.take_secretreward_res:ctor()
	self._pname_ = "take_secretreward_res"
	--self.ok:		int32	
end

function i3k_sbean.take_secretreward_res:clone()
	return clone(self)
end

function i3k_sbean.take_secretreward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_secretreward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 一键完成秘境任务
i3k_sbean.onekey_finish_secrettask_res = i3k_class("onekey_finish_secrettask_res")
function i3k_sbean.onekey_finish_secrettask_res:ctor()
	self._pname_ = "onekey_finish_secrettask_res"
	--self.ok:		int32	
end

function i3k_sbean.onekey_finish_secrettask_res:clone()
	return clone(self)
end

function i3k_sbean.onekey_finish_secrettask_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.onekey_finish_secrettask_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派运镖同步
i3k_sbean.sect_deliver_sync_res = i3k_class("sect_deliver_sync_res")
function i3k_sbean.sect_deliver_sync_res:ctor()
	self._pname_ = "sect_deliver_sync_res"
	--self.ok:		int32	
	--self.isProtect:		int32	
	--self.wishTimes:		int32	
	--self.data:		vector[SectDeliverTaskInfo]	
	--self.skin:		SectDeliverSkinData	
	--self.wishData:		DBSectDeliverWishChange	
end

function i3k_sbean.sect_deliver_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.isProtect = is:popNumber()
	self.wishTimes = is:popNumber()
	self.data = is:popList(i3k_sbean.SectDeliverTaskInfo)
	self.skin = is:pop(i3k_sbean.SectDeliverSkinData)
	self.wishData = is:pop(i3k_sbean.DBSectDeliverWishChange)
end

function i3k_sbean.sect_deliver_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.isProtect)
	os:pushNumber(self.wishTimes)
	os:pushList(self.data)
	os:push(self.skin)
	os:push(self.wishData)
end


-- 帮派运镖刷新
i3k_sbean.sect_deliver_refresh_res = i3k_class("sect_deliver_refresh_res")
function i3k_sbean.sect_deliver_refresh_res:ctor()
	self._pname_ = "sect_deliver_refresh_res"
	--self.ok:		int32	
	--self.data:		vector[SectDeliverTaskInfo]	
end

function i3k_sbean.sect_deliver_refresh_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_refresh_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.data = is:popList(i3k_sbean.SectDeliverTaskInfo)
end

function i3k_sbean.sect_deliver_refresh_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.data)
end


-- 帮派运镖投保
i3k_sbean.sect_deliver_protect_res = i3k_class("sect_deliver_protect_res")
function i3k_sbean.sect_deliver_protect_res:ctor()
	self._pname_ = "sect_deliver_protect_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_deliver_protect_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_protect_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_deliver_protect_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派运镖开始运镖
i3k_sbean.sect_deliver_begin_res = i3k_class("sect_deliver_begin_res")
function i3k_sbean.sect_deliver_begin_res:ctor()
	self._pname_ = "sect_deliver_begin_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_deliver_begin_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_begin_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_deliver_begin_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派运镖求援
i3k_sbean.sect_deliver_search_help_res = i3k_class("sect_deliver_search_help_res")
function i3k_sbean.sect_deliver_search_help_res:ctor()
	self._pname_ = "sect_deliver_search_help_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_deliver_search_help_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_search_help_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_deliver_search_help_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派运镖响应求援
i3k_sbean.sect_deliver_on_help_res = i3k_class("sect_deliver_on_help_res")
function i3k_sbean.sect_deliver_on_help_res:ctor()
	self._pname_ = "sect_deliver_on_help_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_deliver_on_help_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_on_help_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_deliver_on_help_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派运镖取消运镖
i3k_sbean.sect_deliver_cancel_res = i3k_class("sect_deliver_cancel_res")
function i3k_sbean.sect_deliver_cancel_res:ctor()
	self._pname_ = "sect_deliver_cancel_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_deliver_cancel_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_cancel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_deliver_cancel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派运镖完成
i3k_sbean.sect_deliver_finish_res = i3k_class("sect_deliver_finish_res")
function i3k_sbean.sect_deliver_finish_res:ctor()
	self._pname_ = "sect_deliver_finish_res"
	--self.ok:		int32	
	--self.rewardGold:		int32	
	--self.rewardExp:		int32	
	--self.timeBouns:		int32	
	--self.robPercent:		int32	
	--self.expBouns:		int32	
	--self.goldBouns:		int32	
	--self.skinExpBouns:		int32	
end

function i3k_sbean.sect_deliver_finish_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewardGold = is:popNumber()
	self.rewardExp = is:popNumber()
	self.timeBouns = is:popNumber()
	self.robPercent = is:popNumber()
	self.expBouns = is:popNumber()
	self.goldBouns = is:popNumber()
	self.skinExpBouns = is:popNumber()
end

function i3k_sbean.sect_deliver_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.rewardGold)
	os:pushNumber(self.rewardExp)
	os:pushNumber(self.timeBouns)
	os:pushNumber(self.robPercent)
	os:pushNumber(self.expBouns)
	os:pushNumber(self.goldBouns)
	os:pushNumber(self.skinExpBouns)
end


-- 帮派运镖快速完成
i3k_sbean.sect_deliver_quick_finish_res = i3k_class("sect_deliver_quick_finish_res")
function i3k_sbean.sect_deliver_quick_finish_res:ctor()
	self._pname_ = "sect_deliver_quick_finish_res"
	--self.ok:		int32	
	--self.rewardGold:		int32	
	--self.rewardExp:		int32	
	--self.timeBouns:		int32	
	--self.robPercent:		int32	
	--self.expBouns:		int32	
	--self.goldBouns:		int32	
	--self.skinExpBouns:		int32	
end

function i3k_sbean.sect_deliver_quick_finish_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_quick_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewardGold = is:popNumber()
	self.rewardExp = is:popNumber()
	self.timeBouns = is:popNumber()
	self.robPercent = is:popNumber()
	self.expBouns = is:popNumber()
	self.goldBouns = is:popNumber()
	self.skinExpBouns = is:popNumber()
end

function i3k_sbean.sect_deliver_quick_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.rewardGold)
	os:pushNumber(self.rewardExp)
	os:pushNumber(self.timeBouns)
	os:pushNumber(self.robPercent)
	os:pushNumber(self.expBouns)
	os:pushNumber(self.goldBouns)
	os:pushNumber(self.skinExpBouns)
end


-- 帮派祝福同步
i3k_sbean.sect_deliver_sync_wish_res = i3k_class("sect_deliver_sync_wish_res")
function i3k_sbean.sect_deliver_sync_wish_res:ctor()
	self._pname_ = "sect_deliver_sync_wish_res"
	--self.ok:		int32	
	--self.wishTimes:		int32	
	--self.data:		DBSectDeliverWishChange	
	--self.rankList:		vector[DBDeliverWishListItem]	
end

function i3k_sbean.sect_deliver_sync_wish_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_sync_wish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.wishTimes = is:popNumber()
	self.data = is:pop(i3k_sbean.DBSectDeliverWishChange)
	self.rankList = is:popList(i3k_sbean.DBDeliverWishListItem)
end

function i3k_sbean.sect_deliver_sync_wish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.wishTimes)
	os:push(self.data)
	os:pushList(self.rankList)
end


-- 帮派祝福祝福
i3k_sbean.sect_deliver_add_wish_res = i3k_class("sect_deliver_add_wish_res")
function i3k_sbean.sect_deliver_add_wish_res:ctor()
	self._pname_ = "sect_deliver_add_wish_res"
	--self.ok:		int32	
	--self.data:		DBSectDeliverWishChange	
end

function i3k_sbean.sect_deliver_add_wish_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_add_wish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.data = is:pop(i3k_sbean.DBSectDeliverWishChange)
end

function i3k_sbean.sect_deliver_add_wish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.data)
end


-- 帮派祝福保存
i3k_sbean.sect_deliver_save_wish_res = i3k_class("sect_deliver_save_wish_res")
function i3k_sbean.sect_deliver_save_wish_res:ctor()
	self._pname_ = "sect_deliver_save_wish_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_deliver_save_wish_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_save_wish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_deliver_save_wish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派运镖求援推送消息
i3k_sbean.sect_deliver_help_push = i3k_class("sect_deliver_help_push")
function i3k_sbean.sect_deliver_help_push:ctor()
	self._pname_ = "sect_deliver_help_push"
	--self.id:		int32	
	--self.name:		string	
	--self.location:		MapLocation	
	--self.line:		int32	
	--self.hide:		bool	
end

function i3k_sbean.sect_deliver_help_push:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_help_push:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.name = is:popString()
	self.location = is:pop(i3k_sbean.MapLocation)
	self.line = is:popNumber()
	self.hide = is:popBool()
end

function i3k_sbean.sect_deliver_help_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.name)
	os:push(self.location)
	os:pushNumber(self.line)
	os:pushBool(self.hide)
end


-- 劫镖任务接取
i3k_sbean.sect_rob_task_take_res = i3k_class("sect_rob_task_take_res")
function i3k_sbean.sect_rob_task_take_res:ctor()
	self._pname_ = "sect_rob_task_take_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_rob_task_take_res:clone()
	return clone(self)
end

function i3k_sbean.sect_rob_task_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_rob_task_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 劫镖任务放弃
i3k_sbean.sect_rob_task_cancel_res = i3k_class("sect_rob_task_cancel_res")
function i3k_sbean.sect_rob_task_cancel_res:ctor()
	self._pname_ = "sect_rob_task_cancel_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_rob_task_cancel_res:clone()
	return clone(self)
end

function i3k_sbean.sect_rob_task_cancel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_rob_task_cancel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步劫镖标记
i3k_sbean.sect_rob_flag = i3k_class("sect_rob_flag")
function i3k_sbean.sect_rob_flag:ctor()
	self._pname_ = "sect_rob_flag"
	--self.flag:		int8	
end

function i3k_sbean.sect_rob_flag:clone()
	return clone(self)
end

function i3k_sbean.sect_rob_flag:decode(is)
	is:popString()
	self.flag = is:popNumber()
end

function i3k_sbean.sect_rob_flag:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.flag)
end


-- 完成劫镖发送奖励信息
i3k_sbean.sect_rob_finish = i3k_class("sect_rob_finish")
function i3k_sbean.sect_rob_finish:ctor()
	self._pname_ = "sect_rob_finish"
	--self.rewardnum:		int32	
end

function i3k_sbean.sect_rob_finish:clone()
	return clone(self)
end

function i3k_sbean.sect_rob_finish:decode(is)
	is:popString()
	self.rewardnum = is:popNumber()
end

function i3k_sbean.sect_rob_finish:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rewardnum)
end


-- 销毁自己的镖车
i3k_sbean.destory_own_car = i3k_class("destory_own_car")
function i3k_sbean.destory_own_car:ctor()
	self._pname_ = "destory_own_car"
end

function i3k_sbean.destory_own_car:decode(is)
	is:popString()
end

function i3k_sbean.destory_own_car:encode(os)
	os:pushString(self._pname_)
end


-- 帮派商城同步协议
i3k_sbean.sect_deliver_shopsync_res = i3k_class("sect_deliver_shopsync_res")
function i3k_sbean.sect_deliver_shopsync_res:ctor()
	self._pname_ = "sect_deliver_shopsync_res"
	--self.info:		ShopInfo	
	--self.currency:		int32	
	--self.discount:		ShopDiscountInfo	
end

function i3k_sbean.sect_deliver_shopsync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_shopsync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
	self.currency = is:popNumber()
	self.discount = is:pop(i3k_sbean.ShopDiscountInfo)
end

function i3k_sbean.sect_deliver_shopsync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumber(self.currency)
	os:push(self.discount)
end


-- 帮派商城刷新协议
i3k_sbean.sect_deliver_shoprefresh_res = i3k_class("sect_deliver_shoprefresh_res")
function i3k_sbean.sect_deliver_shoprefresh_res:ctor()
	self._pname_ = "sect_deliver_shoprefresh_res"
	--self.info:		ShopInfo	
end

function i3k_sbean.sect_deliver_shoprefresh_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_shoprefresh_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
end

function i3k_sbean.sect_deliver_shoprefresh_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 帮派商城买商品协议
i3k_sbean.sect_deliver_shopbuy_res = i3k_class("sect_deliver_shopbuy_res")
function i3k_sbean.sect_deliver_shopbuy_res:ctor()
	self._pname_ = "sect_deliver_shopbuy_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_deliver_shopbuy_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_shopbuy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_deliver_shopbuy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派运镖抽奖数据同步
i3k_sbean.sect_deliver_lottery_sync = i3k_class("sect_deliver_lottery_sync")
function i3k_sbean.sect_deliver_lottery_sync:ctor()
	self._pname_ = "sect_deliver_lottery_sync"
	--self.deliverLottery:		DBDeliverLottery	
end

function i3k_sbean.sect_deliver_lottery_sync:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_lottery_sync:decode(is)
	is:popString()
	self.deliverLottery = is:pop(i3k_sbean.DBDeliverLottery)
end

function i3k_sbean.sect_deliver_lottery_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.deliverLottery)
end


-- 帮派运镖抽奖协议
i3k_sbean.sect_deliver_lottery_res = i3k_class("sect_deliver_lottery_res")
function i3k_sbean.sect_deliver_lottery_res:ctor()
	self._pname_ = "sect_deliver_lottery_res"
	--self.ok:		int32	
	--self.drops:		vector[DummyGoods]	
end

function i3k_sbean.sect_deliver_lottery_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_lottery_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.sect_deliver_lottery_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.drops)
end


-- 同步工坊回应
i3k_sbean.produce_workshopsync_res = i3k_class("produce_workshopsync_res")
function i3k_sbean.produce_workshopsync_res:ctor()
	self._pname_ = "produce_workshopsync_res"
	--self.syncInfo:		DBProduceData	
	--self.fusionfurnaceOpened:		int32	
	--self.fusionPoint:		int32	
	--self.fusionedItemCnt:		int32	
end

function i3k_sbean.produce_workshopsync_res:clone()
	return clone(self)
end

function i3k_sbean.produce_workshopsync_res:decode(is)
	is:popString()
	self.syncInfo = is:pop(i3k_sbean.DBProduceData)
	self.fusionfurnaceOpened = is:popNumber()
	self.fusionPoint = is:popNumber()
	self.fusionedItemCnt = is:popNumber()
end

function i3k_sbean.produce_workshopsync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.syncInfo)
	os:pushNumber(self.fusionfurnaceOpened)
	os:pushNumber(self.fusionPoint)
	os:pushNumber(self.fusionedItemCnt)
end


-- 使用卷轴获得新配方回应
i3k_sbean.produce_createnewrecipe_res = i3k_class("produce_createnewrecipe_res")
function i3k_sbean.produce_createnewrecipe_res:ctor()
	self._pname_ = "produce_createnewrecipe_res"
	--self.ok:		int32	
end

function i3k_sbean.produce_createnewrecipe_res:clone()
	return clone(self)
end

function i3k_sbean.produce_createnewrecipe_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.produce_createnewrecipe_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 制造请求回应
i3k_sbean.produce_produce_res = i3k_class("produce_produce_res")
function i3k_sbean.produce_produce_res:ctor()
	self._pname_ = "produce_produce_res"
	--self.ok:		int32	
end

function i3k_sbean.produce_produce_res:clone()
	return clone(self)
end

function i3k_sbean.produce_produce_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.produce_produce_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 分解装备请求回应
i3k_sbean.produce_split_res = i3k_class("produce_split_res")
function i3k_sbean.produce_split_res:ctor()
	self._pname_ = "produce_split_res"
	--self.ok:		int32	
end

function i3k_sbean.produce_split_res:clone()
	return clone(self)
end

function i3k_sbean.produce_split_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.produce_split_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 炼化炉激活请求回应
i3k_sbean.produce_fusion_open_res = i3k_class("produce_fusion_open_res")
function i3k_sbean.produce_fusion_open_res:ctor()
	self._pname_ = "produce_fusion_open_res"
	--self.ok:		int32	
end

function i3k_sbean.produce_fusion_open_res:clone()
	return clone(self)
end

function i3k_sbean.produce_fusion_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.produce_fusion_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 炼化请求回应
i3k_sbean.produce_fusion_res = i3k_class("produce_fusion_res")
function i3k_sbean.produce_fusion_res:ctor()
	self._pname_ = "produce_fusion_res"
	--self.ok:		int32	
	--self.produces:		vector[GameItem]	
end

function i3k_sbean.produce_fusion_res:clone()
	return clone(self)
end

function i3k_sbean.produce_fusion_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.produces = is:popList(i3k_sbean.GameItem)
end

function i3k_sbean.produce_fusion_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.produces)
end


-- 分解能量购买回应
i3k_sbean.produce_splitspbuy_res = i3k_class("produce_splitspbuy_res")
function i3k_sbean.produce_splitspbuy_res:ctor()
	self._pname_ = "produce_splitspbuy_res"
	--self.ok:		int32	
end

function i3k_sbean.produce_splitspbuy_res:clone()
	return clone(self)
end

function i3k_sbean.produce_splitspbuy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.produce_splitspbuy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 背包道具合并
i3k_sbean.bag_merge_res = i3k_class("bag_merge_res")
function i3k_sbean.bag_merge_res:ctor()
	self._pname_ = "bag_merge_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_merge_res:clone()
	return clone(self)
end

function i3k_sbean.bag_merge_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_merge_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 背包道具合并
i3k_sbean.bag_merge_all_res = i3k_class("bag_merge_all_res")
function i3k_sbean.bag_merge_all_res:ctor()
	self._pname_ = "bag_merge_all_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_merge_all_res:clone()
	return clone(self)
end

function i3k_sbean.bag_merge_all_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_merge_all_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 七日留存活动领取奖励
i3k_sbean.rmactivity_takereward_res = i3k_class("rmactivity_takereward_res")
function i3k_sbean.rmactivity_takereward_res:ctor()
	self._pname_ = "rmactivity_takereward_res"
	--self.ok:		int32	
end

function i3k_sbean.rmactivity_takereward_res:clone()
	return clone(self)
end

function i3k_sbean.rmactivity_takereward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rmactivity_takereward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 玩家改名(ok -1:名字已存在)
i3k_sbean.role_rename_res = i3k_class("role_rename_res")
function i3k_sbean.role_rename_res:ctor()
	self._pname_ = "role_rename_res"
	--self.ok:		int32	
	--self.banTime:		int32	
end

function i3k_sbean.role_rename_res:clone()
	return clone(self)
end

function i3k_sbean.role_rename_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.banTime = is:popNumber()
end

function i3k_sbean.role_rename_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.banTime)
end


-- 上马请求回应
i3k_sbean.horse_ride_res = i3k_class("horse_ride_res")
function i3k_sbean.horse_ride_res:ctor()
	self._pname_ = "horse_ride_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_ride_res:clone()
	return clone(self)
end

function i3k_sbean.horse_ride_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_ride_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 下马请求回应
i3k_sbean.horse_unride_res = i3k_class("horse_unride_res")
function i3k_sbean.horse_unride_res:ctor()
	self._pname_ = "horse_unride_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_unride_res:clone()
	return clone(self)
end

function i3k_sbean.horse_unride_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_unride_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 邀请骑乘响应协议
i3k_sbean.mulhorse_invite_res = i3k_class("mulhorse_invite_res")
function i3k_sbean.mulhorse_invite_res:ctor()
	self._pname_ = "mulhorse_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.mulhorse_invite_res:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mulhorse_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转发其他玩家的骑乘邀请
i3k_sbean.mulhorse_invite_forward = i3k_class("mulhorse_invite_forward")
function i3k_sbean.mulhorse_invite_forward:ctor()
	self._pname_ = "mulhorse_invite_forward"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mulhorse_invite_forward:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_invite_forward:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mulhorse_invite_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 接收到骑乘邀请后选择是否同意操作
i3k_sbean.mulhorse_invitehandle_res = i3k_class("mulhorse_invitehandle_res")
function i3k_sbean.mulhorse_invitehandle_res:ctor()
	self._pname_ = "mulhorse_invitehandle_res"
	--self.ok:		int32	
end

function i3k_sbean.mulhorse_invitehandle_res:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_invitehandle_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mulhorse_invitehandle_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知邀请者前面的邀请结果(result 0:拒绝，-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙，| -6:对方已在多人坐骑上，-9:超时)
i3k_sbean.mulhorse_invite_result = i3k_class("mulhorse_invite_result")
function i3k_sbean.mulhorse_invite_result:ctor()
	self._pname_ = "mulhorse_invite_result"
	--self.roleID:		int32	
	--self.roleName:		string	
	--self.result:		int32	
end

function i3k_sbean.mulhorse_invite_result:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_invite_result:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.mulhorse_invite_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
	os:pushNumber(self.result)
end


-- 申请多人骑乘
i3k_sbean.mulhorse_apply_res = i3k_class("mulhorse_apply_res")
function i3k_sbean.mulhorse_apply_res:ctor()
	self._pname_ = "mulhorse_apply_res"
	--self.ok:		int32	
end

function i3k_sbean.mulhorse_apply_res:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_apply_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mulhorse_apply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转发其他玩家的骑乘申请
i3k_sbean.mulhorse_apply_forward = i3k_class("mulhorse_apply_forward")
function i3k_sbean.mulhorse_apply_forward:ctor()
	self._pname_ = "mulhorse_apply_forward"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mulhorse_apply_forward:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_apply_forward:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mulhorse_apply_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 接收到其他玩家骑乘申请后是否同意操作
i3k_sbean.mulhorse_applyhandle_res = i3k_class("mulhorse_applyhandle_res")
function i3k_sbean.mulhorse_applyhandle_res:ctor()
	self._pname_ = "mulhorse_applyhandle_res"
	--self.ok:		int32	
end

function i3k_sbean.mulhorse_applyhandle_res:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_applyhandle_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mulhorse_applyhandle_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知邀请者前面的邀请结果(result 0:拒绝，-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙|-4:对方坐骑已满，-8:对方已下马，-9:超时)
i3k_sbean.mulhorse_apply_result = i3k_class("mulhorse_apply_result")
function i3k_sbean.mulhorse_apply_result:ctor()
	self._pname_ = "mulhorse_apply_result"
	--self.roleID:		int32	
	--self.roleName:		string	
	--self.result:		int32	
end

function i3k_sbean.mulhorse_apply_result:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_apply_result:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.mulhorse_apply_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
	os:pushNumber(self.result)
end


-- 离开多人骑乘协议
i3k_sbean.mulhorse_leave_res = i3k_class("mulhorse_leave_res")
function i3k_sbean.mulhorse_leave_res:ctor()
	self._pname_ = "mulhorse_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.mulhorse_leave_res:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mulhorse_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 剔除骑乘成员
i3k_sbean.mulhorse_kick_res = i3k_class("mulhorse_kick_res")
function i3k_sbean.mulhorse_kick_res:ctor()
	self._pname_ = "mulhorse_kick_res"
	--self.ok:		int32	
end

function i3k_sbean.mulhorse_kick_res:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_kick_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mulhorse_kick_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知新成员加入多人骑乘
i3k_sbean.mulhorse_join = i3k_class("mulhorse_join")
function i3k_sbean.mulhorse_join:ctor()
	self._pname_ = "mulhorse_join"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mulhorse_join:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_join:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mulhorse_join:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知有成员离开多人骑乘
i3k_sbean.mulhorse_leave = i3k_class("mulhorse_leave")
function i3k_sbean.mulhorse_leave:ctor()
	self._pname_ = "mulhorse_leave"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mulhorse_leave:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_leave:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mulhorse_leave:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知有成员被踢出多人骑乘
i3k_sbean.mulhorse_kick = i3k_class("mulhorse_kick")
function i3k_sbean.mulhorse_kick:ctor()
	self._pname_ = "mulhorse_kick"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.mulhorse_kick:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_kick:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.mulhorse_kick:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 相依相偎邀请
i3k_sbean.staywith_invite_res = i3k_class("staywith_invite_res")
function i3k_sbean.staywith_invite_res:ctor()
	self._pname_ = "staywith_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.staywith_invite_res:clone()
	return clone(self)
end

function i3k_sbean.staywith_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.staywith_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转发其他玩家的相依相偎邀请
i3k_sbean.staywith_invite_forward = i3k_class("staywith_invite_forward")
function i3k_sbean.staywith_invite_forward:ctor()
	self._pname_ = "staywith_invite_forward"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.staywith_invite_forward:clone()
	return clone(self)
end

function i3k_sbean.staywith_invite_forward:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.staywith_invite_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 接收到相依相偎邀请后选择是否同意操作
i3k_sbean.staywith_invitehandle_res = i3k_class("staywith_invitehandle_res")
function i3k_sbean.staywith_invitehandle_res:ctor()
	self._pname_ = "staywith_invitehandle_res"
	--self.ok:		int32	
end

function i3k_sbean.staywith_invitehandle_res:clone()
	return clone(self)
end

function i3k_sbean.staywith_invitehandle_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.staywith_invitehandle_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知邀请者前面的邀请结果(result 0:拒绝，-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙，-7:超时)
i3k_sbean.staywith_invite_result = i3k_class("staywith_invite_result")
function i3k_sbean.staywith_invite_result:ctor()
	self._pname_ = "staywith_invite_result"
	--self.roleID:		int32	
	--self.roleName:		string	
	--self.result:		int32	
end

function i3k_sbean.staywith_invite_result:clone()
	return clone(self)
end

function i3k_sbean.staywith_invite_result:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.staywith_invite_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
	os:pushNumber(self.result)
end


-- 通知新成员加入相依相偎
i3k_sbean.staywith_join = i3k_class("staywith_join")
function i3k_sbean.staywith_join:ctor()
	self._pname_ = "staywith_join"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.staywith_join:clone()
	return clone(self)
end

function i3k_sbean.staywith_join:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.staywith_join:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 通知相依相偎解散
i3k_sbean.staywith_dissolve = i3k_class("staywith_dissolve")
function i3k_sbean.staywith_dissolve:ctor()
	self._pname_ = "staywith_dissolve"
end

function i3k_sbean.staywith_dissolve:decode(is)
	is:popString()
end

function i3k_sbean.staywith_dissolve:encode(os)
	os:pushString(self._pname_)
end


-- 取消相依相偎请求
i3k_sbean.staywith_leave_res = i3k_class("staywith_leave_res")
function i3k_sbean.staywith_leave_res:ctor()
	self._pname_ = "staywith_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.staywith_leave_res:clone()
	return clone(self)
end

function i3k_sbean.staywith_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.staywith_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 么么哒
i3k_sbean.staywith_memeda_res = i3k_class("staywith_memeda_res")
function i3k_sbean.staywith_memeda_res:ctor()
	self._pname_ = "staywith_memeda_res"
	--self.ok:		int32	
end

function i3k_sbean.staywith_memeda_res:clone()
	return clone(self)
end

function i3k_sbean.staywith_memeda_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.staywith_memeda_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步留言板请求
i3k_sbean.sync_message_board_res = i3k_class("sync_message_board_res")
function i3k_sbean.sync_message_board_res:ctor()
	self._pname_ = "sync_message_board_res"
	--self.msgs:		vector[DBMessageBoard]	
	--self.hasNewMsg:		int8	
end

function i3k_sbean.sync_message_board_res:clone()
	return clone(self)
end

function i3k_sbean.sync_message_board_res:decode(is)
	is:popString()
	self.msgs = is:popList(i3k_sbean.DBMessageBoard)
	self.hasNewMsg = is:popNumber()
end

function i3k_sbean.sync_message_board_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.msgs)
	os:pushNumber(self.hasNewMsg)
end


-- 添加留言请求
i3k_sbean.add_message_board_res = i3k_class("add_message_board_res")
function i3k_sbean.add_message_board_res:ctor()
	self._pname_ = "add_message_board_res"
	--self.ok:		int32	
end

function i3k_sbean.add_message_board_res:clone()
	return clone(self)
end

function i3k_sbean.add_message_board_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.add_message_board_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 评论留言请求
i3k_sbean.comment_message_board_res = i3k_class("comment_message_board_res")
function i3k_sbean.comment_message_board_res:ctor()
	self._pname_ = "comment_message_board_res"
	--self.ok:		int32	
end

function i3k_sbean.comment_message_board_res:clone()
	return clone(self)
end

function i3k_sbean.comment_message_board_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.comment_message_board_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 修改文本请求
i3k_sbean.change_message_board_content_res = i3k_class("change_message_board_content_res")
function i3k_sbean.change_message_board_content_res:ctor()
	self._pname_ = "change_message_board_content_res"
	--self.ok:		int32	
end

function i3k_sbean.change_message_board_content_res:clone()
	return clone(self)
end

function i3k_sbean.change_message_board_content_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.change_message_board_content_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步日程表请求
i3k_sbean.schedule_sync_res = i3k_class("schedule_sync_res")
function i3k_sbean.schedule_sync_res:ctor()
	self._pname_ = "schedule_sync_res"
	--self.msgs:		DBSchedule	
end

function i3k_sbean.schedule_sync_res:clone()
	return clone(self)
end

function i3k_sbean.schedule_sync_res:decode(is)
	is:popString()
	self.msgs = is:pop(i3k_sbean.DBSchedule)
end

function i3k_sbean.schedule_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.msgs)
end


-- 领取日程表奖励
i3k_sbean.schedule_mapreward_res = i3k_class("schedule_mapreward_res")
function i3k_sbean.schedule_mapreward_res:ctor()
	self._pname_ = "schedule_mapreward_res"
	--self.ok:		int32	
	--self.rewards:		map[int32, int32]	
end

function i3k_sbean.schedule_mapreward_res:clone()
	return clone(self)
end

function i3k_sbean.schedule_mapreward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popNumberNumberMap()
end

function i3k_sbean.schedule_mapreward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.rewards)
end


-- 同步日程表请求
i3k_sbean.role_schedule_info = i3k_class("role_schedule_info")
function i3k_sbean.role_schedule_info:ctor()
	self._pname_ = "role_schedule_info"
	--self.schedule:		DBSchedule	
end

function i3k_sbean.role_schedule_info:clone()
	return clone(self)
end

function i3k_sbean.role_schedule_info:decode(is)
	is:popString()
	self.schedule = is:pop(i3k_sbean.DBSchedule)
end

function i3k_sbean.role_schedule_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.schedule)
end


-- 角色接触BOSS通知
i3k_sbean.role_touch_boss = i3k_class("role_touch_boss")
function i3k_sbean.role_touch_boss:ctor()
	self._pname_ = "role_touch_boss"
end

function i3k_sbean.role_touch_boss:decode(is)
	is:popString()
end

function i3k_sbean.role_touch_boss:encode(os)
	os:pushString(self._pname_)
end


-- 保存引导关进度请求
i3k_sbean.save_guide_mapcopy_res = i3k_class("save_guide_mapcopy_res")
function i3k_sbean.save_guide_mapcopy_res:ctor()
	self._pname_ = "save_guide_mapcopy_res"
	--self.ok:		int32	
end

function i3k_sbean.save_guide_mapcopy_res:clone()
	return clone(self)
end

function i3k_sbean.save_guide_mapcopy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.save_guide_mapcopy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步引导关步骤
i3k_sbean.sync_guide_mapcopy_step = i3k_class("sync_guide_mapcopy_step")
function i3k_sbean.sync_guide_mapcopy_step:ctor()
	self._pname_ = "sync_guide_mapcopy_step"
	--self.step:		int32	
end

function i3k_sbean.sync_guide_mapcopy_step:clone()
	return clone(self)
end

function i3k_sbean.sync_guide_mapcopy_step:decode(is)
	is:popString()
	self.step = is:popNumber()
end

function i3k_sbean.sync_guide_mapcopy_step:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.step)
end


-- 帮派邀请请求
i3k_sbean.sect_invite_res = i3k_class("sect_invite_res")
function i3k_sbean.sect_invite_res:ctor()
	self._pname_ = "sect_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_invite_res:clone()
	return clone(self)
end

function i3k_sbean.sect_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派邀请接受请求
i3k_sbean.sect_invite_response_res = i3k_class("sect_invite_response_res")
function i3k_sbean.sect_invite_response_res:ctor()
	self._pname_ = "sect_invite_response_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_invite_response_res:clone()
	return clone(self)
end

function i3k_sbean.sect_invite_response_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_invite_response_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派邀请推送
i3k_sbean.role_sect_invite = i3k_class("role_sect_invite")
function i3k_sbean.role_sect_invite:ctor()
	self._pname_ = "role_sect_invite"
	--self.inviteId:		int32	
	--self.inviteName:		string	
	--self.sectName:		string	
	--self.hide:		bool	
end

function i3k_sbean.role_sect_invite:clone()
	return clone(self)
end

function i3k_sbean.role_sect_invite:decode(is)
	is:popString()
	self.inviteId = is:popNumber()
	self.inviteName = is:popString()
	self.sectName = is:popString()
	self.hide = is:popBool()
end

function i3k_sbean.role_sect_invite:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.inviteId)
	os:pushString(self.inviteName)
	os:pushString(self.sectName)
	os:pushBool(self.hide)
end


-- 帮派邀请拒绝推送
i3k_sbean.role_refuse_sect_invite = i3k_class("role_refuse_sect_invite")
function i3k_sbean.role_refuse_sect_invite:ctor()
	self._pname_ = "role_refuse_sect_invite"
	--self.beinviteName:		string	
end

function i3k_sbean.role_refuse_sect_invite:clone()
	return clone(self)
end

function i3k_sbean.role_refuse_sect_invite:decode(is)
	is:popString()
	self.beinviteName = is:popString()
end

function i3k_sbean.role_refuse_sect_invite:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.beinviteName)
end


-- 帮派邀请繁忙推送
i3k_sbean.sect_invite_busy = i3k_class("sect_invite_busy")
function i3k_sbean.sect_invite_busy:ctor()
	self._pname_ = "sect_invite_busy"
	--self.beinviteName:		string	
end

function i3k_sbean.sect_invite_busy:clone()
	return clone(self)
end

function i3k_sbean.sect_invite_busy:decode(is)
	is:popString()
	self.beinviteName = is:popString()
end

function i3k_sbean.sect_invite_busy:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.beinviteName)
end


-- 同步内甲信息
i3k_sbean.role_armor_info = i3k_class("role_armor_info")
function i3k_sbean.role_armor_info:ctor()
	self._pname_ = "role_armor_info"
	--self.armor:		DBArmor	
	--self.runeLangLvls:		map[int32,int32]	
end

function i3k_sbean.role_armor_info:clone()
	return clone(self)
end

function i3k_sbean.role_armor_info:decode(is)
	is:popString()
	self.armor = is:pop(i3k_sbean.DBArmor)
	self.runeLangLvls = is:popNumberNumberMap()
end

function i3k_sbean.role_armor_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.armor)
	os:pushNumberNumberMap(self.runeLangLvls)
end


-- 解锁内甲请求
i3k_sbean.unlock_armor_type_res = i3k_class("unlock_armor_type_res")
function i3k_sbean.unlock_armor_type_res:ctor()
	self._pname_ = "unlock_armor_type_res"
	--self.ok:		int32	
end

function i3k_sbean.unlock_armor_type_res:clone()
	return clone(self)
end

function i3k_sbean.unlock_armor_type_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.unlock_armor_type_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 内甲升阶请求
i3k_sbean.armor_uprank_res = i3k_class("armor_uprank_res")
function i3k_sbean.armor_uprank_res:ctor()
	self._pname_ = "armor_uprank_res"
	--self.ok:		int32	
end

function i3k_sbean.armor_uprank_res:clone()
	return clone(self)
end

function i3k_sbean.armor_uprank_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.armor_uprank_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 内甲升级天赋请求
i3k_sbean.armor_add_talent_res = i3k_class("armor_add_talent_res")
function i3k_sbean.armor_add_talent_res:ctor()
	self._pname_ = "armor_add_talent_res"
	--self.ok:		int32	
end

function i3k_sbean.armor_add_talent_res:clone()
	return clone(self)
end

function i3k_sbean.armor_add_talent_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.armor_add_talent_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 内甲选择请求
i3k_sbean.armor_change_res = i3k_class("armor_change_res")
function i3k_sbean.armor_change_res:ctor()
	self._pname_ = "armor_change_res"
	--self.ok:		int32	
end

function i3k_sbean.armor_change_res:clone()
	return clone(self)
end

function i3k_sbean.armor_change_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.armor_change_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 内甲升级请求
i3k_sbean.armor_up_level_res = i3k_class("armor_up_level_res")
function i3k_sbean.armor_up_level_res:ctor()
	self._pname_ = "armor_up_level_res"
	--self.ok:		int32	
end

function i3k_sbean.armor_up_level_res:clone()
	return clone(self)
end

function i3k_sbean.armor_up_level_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.armor_up_level_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置内甲隐藏
i3k_sbean.armor_effecthide_res = i3k_class("armor_effecthide_res")
function i3k_sbean.armor_effecthide_res:ctor()
	self._pname_ = "armor_effecthide_res"
	--self.ok:		int32	
end

function i3k_sbean.armor_effecthide_res:clone()
	return clone(self)
end

function i3k_sbean.armor_effecthide_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.armor_effecthide_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 符文存入请求
i3k_sbean.rune_push_res = i3k_class("rune_push_res")
function i3k_sbean.rune_push_res:ctor()
	self._pname_ = "rune_push_res"
	--self.ok:		int32	
end

function i3k_sbean.rune_push_res:clone()
	return clone(self)
end

function i3k_sbean.rune_push_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rune_push_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 符文提取请求
i3k_sbean.rune_pop_res = i3k_class("rune_pop_res")
function i3k_sbean.rune_pop_res:ctor()
	self._pname_ = "rune_pop_res"
	--self.ok:		int32	
end

function i3k_sbean.rune_pop_res:clone()
	return clone(self)
end

function i3k_sbean.rune_pop_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rune_pop_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 重置天赋点请求
i3k_sbean.reset_talent_point_res = i3k_class("reset_talent_point_res")
function i3k_sbean.reset_talent_point_res:ctor()
	self._pname_ = "reset_talent_point_res"
	--self.ok:		int32	
end

function i3k_sbean.reset_talent_point_res:clone()
	return clone(self)
end

function i3k_sbean.reset_talent_point_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.reset_talent_point_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 重置天赋点请求
i3k_sbean.solt_group_unlock_res = i3k_class("solt_group_unlock_res")
function i3k_sbean.solt_group_unlock_res:ctor()
	self._pname_ = "solt_group_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.solt_group_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.solt_group_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.solt_group_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 符文镶嵌请求
i3k_sbean.solt_push_rune_res = i3k_class("solt_push_rune_res")
function i3k_sbean.solt_push_rune_res:ctor()
	self._pname_ = "solt_push_rune_res"
	--self.ok:		int32	
end

function i3k_sbean.solt_push_rune_res:clone()
	return clone(self)
end

function i3k_sbean.solt_push_rune_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.solt_push_rune_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 符文之语镶嵌请求
i3k_sbean.lang_push_rune_res = i3k_class("lang_push_rune_res")
function i3k_sbean.lang_push_rune_res:ctor()
	self._pname_ = "lang_push_rune_res"
	--self.ok:		int32	
end

function i3k_sbean.lang_push_rune_res:clone()
	return clone(self)
end

function i3k_sbean.lang_push_rune_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.lang_push_rune_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 符文许愿请求
i3k_sbean.rune_wish_res = i3k_class("rune_wish_res")
function i3k_sbean.rune_wish_res:ctor()
	self._pname_ = "rune_wish_res"
	--self.ok:		int32	
	--self.runes:		vector[DummyGoods]	
end

function i3k_sbean.rune_wish_res:clone()
	return clone(self)
end

function i3k_sbean.rune_wish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.runes = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.rune_wish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.runes)
end


-- 符文之语升级请求
i3k_sbean.rune_upgrade_res = i3k_class("rune_upgrade_res")
function i3k_sbean.rune_upgrade_res:ctor()
	self._pname_ = "rune_upgrade_res"
	--self.ok:		int32	
end

function i3k_sbean.rune_upgrade_res:clone()
	return clone(self)
end

function i3k_sbean.rune_upgrade_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rune_upgrade_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 存入仓库请求
i3k_sbean.put_in_warehouse_res = i3k_class("put_in_warehouse_res")
function i3k_sbean.put_in_warehouse_res:ctor()
	self._pname_ = "put_in_warehouse_res"
	--self.ok:		int32	
end

function i3k_sbean.put_in_warehouse_res:clone()
	return clone(self)
end

function i3k_sbean.put_in_warehouse_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.put_in_warehouse_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 取出物品请求
i3k_sbean.take_out_warehouse_res = i3k_class("take_out_warehouse_res")
function i3k_sbean.take_out_warehouse_res:ctor()
	self._pname_ = "take_out_warehouse_res"
	--self.ok:		int32	
end

function i3k_sbean.take_out_warehouse_res:clone()
	return clone(self)
end

function i3k_sbean.take_out_warehouse_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_out_warehouse_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 取出碎片请求
i3k_sbean.take_out_warehouse_piece_res = i3k_class("take_out_warehouse_piece_res")
function i3k_sbean.take_out_warehouse_piece_res:ctor()
	self._pname_ = "take_out_warehouse_piece_res"
	--self.ok:		int32	
end

function i3k_sbean.take_out_warehouse_piece_res:clone()
	return clone(self)
end

function i3k_sbean.take_out_warehouse_piece_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_out_warehouse_piece_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 扩展仓库请求
i3k_sbean.expand_warehouse_res = i3k_class("expand_warehouse_res")
function i3k_sbean.expand_warehouse_res:ctor()
	self._pname_ = "expand_warehouse_res"
	--self.ok:		int32	
end

function i3k_sbean.expand_warehouse_res:clone()
	return clone(self)
end

function i3k_sbean.expand_warehouse_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.expand_warehouse_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步角色私人仓库信息
i3k_sbean.sync_private_warehouse_res = i3k_class("sync_private_warehouse_res")
function i3k_sbean.sync_private_warehouse_res:ctor()
	self._pname_ = "sync_private_warehouse_res"
	--self.warehouse:		DBItemCells	
end

function i3k_sbean.sync_private_warehouse_res:clone()
	return clone(self)
end

function i3k_sbean.sync_private_warehouse_res:decode(is)
	is:popString()
	self.warehouse = is:pop(i3k_sbean.DBItemCells)
end

function i3k_sbean.sync_private_warehouse_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.warehouse)
end


-- 同步角色公共仓库信息
i3k_sbean.sync_public_warehouse_res = i3k_class("sync_public_warehouse_res")
function i3k_sbean.sync_public_warehouse_res:ctor()
	self._pname_ = "sync_public_warehouse_res"
	--self.warehouse:		DBItemCells	
end

function i3k_sbean.sync_public_warehouse_res:clone()
	return clone(self)
end

function i3k_sbean.sync_public_warehouse_res:decode(is)
	is:popString()
	self.warehouse = is:pop(i3k_sbean.DBItemCells)
end

function i3k_sbean.sync_public_warehouse_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.warehouse)
end


-- 同步角色家园仓库信息
i3k_sbean.sync_homeland_warehouse_res = i3k_class("sync_homeland_warehouse_res")
function i3k_sbean.sync_homeland_warehouse_res:ctor()
	self._pname_ = "sync_homeland_warehouse_res"
	--self.warehouse:		DBItemCells	
end

function i3k_sbean.sync_homeland_warehouse_res:clone()
	return clone(self)
end

function i3k_sbean.sync_homeland_warehouse_res:decode(is)
	is:popString()
	self.warehouse = is:pop(i3k_sbean.DBItemCells)
end

function i3k_sbean.sync_homeland_warehouse_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.warehouse)
end


-- 求婚推送
i3k_sbean.propose_push = i3k_class("propose_push")
function i3k_sbean.propose_push:ctor()
	self._pname_ = "propose_push"
	--self.grade:		int32	
end

function i3k_sbean.propose_push:clone()
	return clone(self)
end

function i3k_sbean.propose_push:decode(is)
	is:popString()
	self.grade = is:popNumber()
end

function i3k_sbean.propose_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.grade)
end


-- 求婚请求
i3k_sbean.propose_res = i3k_class("propose_res")
function i3k_sbean.propose_res:ctor()
	self._pname_ = "propose_res"
	--self.ok:		int32	
	--self.errorName:		string	
end

function i3k_sbean.propose_res:clone()
	return clone(self)
end

function i3k_sbean.propose_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.errorName = is:popString()
end

function i3k_sbean.propose_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushString(self.errorName)
end


-- 求婚响应请求
i3k_sbean.propose_response_res = i3k_class("propose_response_res")
function i3k_sbean.propose_response_res:ctor()
	self._pname_ = "propose_response_res"
	--self.ok:		int32	
end

function i3k_sbean.propose_response_res:clone()
	return clone(self)
end

function i3k_sbean.propose_response_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.propose_response_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 求婚响应推送
i3k_sbean.role_propose_response = i3k_class("role_propose_response")
function i3k_sbean.role_propose_response:ctor()
	self._pname_ = "role_propose_response"
	--self.ok:		int32	
end

function i3k_sbean.role_propose_response:clone()
	return clone(self)
end

function i3k_sbean.role_propose_response:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_propose_response:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步婚姻信息
i3k_sbean.marriage_sync_res = i3k_class("marriage_sync_res")
function i3k_sbean.marriage_sync_res:ctor()
	self._pname_ = "marriage_sync_res"
	--self.marriage:		MarriageShareOverView	
	--self.lastTransformTime:		int32	
end

function i3k_sbean.marriage_sync_res:clone()
	return clone(self)
end

function i3k_sbean.marriage_sync_res:decode(is)
	is:popString()
	self.marriage = is:pop(i3k_sbean.MarriageShareOverView)
	self.lastTransformTime = is:popNumber()
end

function i3k_sbean.marriage_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.marriage)
	os:pushNumber(self.lastTransformTime)
end


-- 登陆所需婚姻信息
i3k_sbean.login_marriage_info = i3k_class("login_marriage_info")
function i3k_sbean.login_marriage_info:ctor()
	self._pname_ = "login_marriage_info"
	--self.marriageLevel:		int32	
	--self.marriageSkill:		map[int32, MarriageSkillInfo]	
	--self.marriageTime:		int32	
	--self.marriageType:		int32	
	--self.marriageStep:		int32	
	--self.marriageRoleId:		int32	
end

function i3k_sbean.login_marriage_info:clone()
	return clone(self)
end

function i3k_sbean.login_marriage_info:decode(is)
	is:popString()
	self.marriageLevel = is:popNumber()
	self.marriageSkill = is:popNumberMap(i3k_sbean.MarriageSkillInfo)
	self.marriageTime = is:popNumber()
	self.marriageType = is:popNumber()
	self.marriageStep = is:popNumber()
	self.marriageRoleId = is:popNumber()
end

function i3k_sbean.login_marriage_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.marriageLevel)
	os:pushNumberMap(self.marriageSkill)
	os:pushNumber(self.marriageTime)
	os:pushNumber(self.marriageType)
	os:pushNumber(self.marriageStep)
	os:pushNumber(self.marriageRoleId)
end


-- 离婚请求
i3k_sbean.divorce_res = i3k_class("divorce_res")
function i3k_sbean.divorce_res:ctor()
	self._pname_ = "divorce_res"
	--self.ok:		int32	
end

function i3k_sbean.divorce_res:clone()
	return clone(self)
end

function i3k_sbean.divorce_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.divorce_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结婚技能升级请求
i3k_sbean.marriage_skill_levelup_res = i3k_class("marriage_skill_levelup_res")
function i3k_sbean.marriage_skill_levelup_res:ctor()
	self._pname_ = "marriage_skill_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.marriage_skill_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.marriage_skill_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.marriage_skill_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 传送至配偶请求
i3k_sbean.transform_to_partner_res = i3k_class("transform_to_partner_res")
function i3k_sbean.transform_to_partner_res:ctor()
	self._pname_ = "transform_to_partner_res"
	--self.ok:		int32	
end

function i3k_sbean.transform_to_partner_res:clone()
	return clone(self)
end

function i3k_sbean.transform_to_partner_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.transform_to_partner_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开始游街请求
i3k_sbean.marriage_start_parade_res = i3k_class("marriage_start_parade_res")
function i3k_sbean.marriage_start_parade_res:ctor()
	self._pname_ = "marriage_start_parade_res"
	--self.ok:		int32	
end

function i3k_sbean.marriage_start_parade_res:clone()
	return clone(self)
end

function i3k_sbean.marriage_start_parade_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.marriage_start_parade_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开始宴席请求
i3k_sbean.marriage_start_banquet_res = i3k_class("marriage_start_banquet_res")
function i3k_sbean.marriage_start_banquet_res:ctor()
	self._pname_ = "marriage_start_banquet_res"
	--self.ok:		int32	
end

function i3k_sbean.marriage_start_banquet_res:clone()
	return clone(self)
end

function i3k_sbean.marriage_start_banquet_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.marriage_start_banquet_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 物品交换请求
i3k_sbean.exchange_item_res = i3k_class("exchange_item_res")
function i3k_sbean.exchange_item_res:ctor()
	self._pname_ = "exchange_item_res"
	--self.ok:		int32	
end

function i3k_sbean.exchange_item_res:clone()
	return clone(self)
end

function i3k_sbean.exchange_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.exchange_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 批量兑换物品
i3k_sbean.batch_exchange_item_res = i3k_class("batch_exchange_item_res")
function i3k_sbean.batch_exchange_item_res:ctor()
	self._pname_ = "batch_exchange_item_res"
	--self.ok:		int32	
end

function i3k_sbean.batch_exchange_item_res:clone()
	return clone(self)
end

function i3k_sbean.batch_exchange_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.batch_exchange_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 收藏兑换物品
i3k_sbean.collect_exchange_item_res = i3k_class("collect_exchange_item_res")
function i3k_sbean.collect_exchange_item_res:ctor()
	self._pname_ = "collect_exchange_item_res"
	--self.ok:		int32	
end

function i3k_sbean.collect_exchange_item_res:clone()
	return clone(self)
end

function i3k_sbean.collect_exchange_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.collect_exchange_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 取消收藏兑换物品
i3k_sbean.cancel_collect_exchange_item_res = i3k_class("cancel_collect_exchange_item_res")
function i3k_sbean.cancel_collect_exchange_item_res:ctor()
	self._pname_ = "cancel_collect_exchange_item_res"
	--self.ok:		int32	
end

function i3k_sbean.cancel_collect_exchange_item_res:clone()
	return clone(self)
end

function i3k_sbean.cancel_collect_exchange_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cancel_collect_exchange_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 物品交换请求
i3k_sbean.exchange_item_times = i3k_class("exchange_item_times")
function i3k_sbean.exchange_item_times:ctor()
	self._pname_ = "exchange_item_times"
	--self.times:		map[int32, int32]	
	--self.collects:		map[int32, DBRoleCollectExchange]	
end

function i3k_sbean.exchange_item_times:clone()
	return clone(self)
end

function i3k_sbean.exchange_item_times:decode(is)
	is:popString()
	self.times = is:popNumberNumberMap()
	self.collects = is:popNumberMap(i3k_sbean.DBRoleCollectExchange)
end

function i3k_sbean.exchange_item_times:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.times)
	os:pushNumberMap(self.collects)
end


-- 姻缘系列任务开启
i3k_sbean.mrgseriestask_open_res = i3k_class("mrgseriestask_open_res")
function i3k_sbean.mrgseriestask_open_res:ctor()
	self._pname_ = "mrgseriestask_open_res"
	--self.ok:		int32	
end

function i3k_sbean.mrgseriestask_open_res:clone()
	return clone(self)
end

function i3k_sbean.mrgseriestask_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mrgseriestask_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 姻缘系列任务接取
i3k_sbean.mrgseriestask_take_res = i3k_class("mrgseriestask_take_res")
function i3k_sbean.mrgseriestask_take_res:ctor()
	self._pname_ = "mrgseriestask_take_res"
	--self.ok:		int32	
end

function i3k_sbean.mrgseriestask_take_res:clone()
	return clone(self)
end

function i3k_sbean.mrgseriestask_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mrgseriestask_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 姻缘系列任务领奖
i3k_sbean.mrgseriestask_reward_res = i3k_class("mrgseriestask_reward_res")
function i3k_sbean.mrgseriestask_reward_res:ctor()
	self._pname_ = "mrgseriestask_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.mrgseriestask_reward_res:clone()
	return clone(self)
end

function i3k_sbean.mrgseriestask_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mrgseriestask_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步姻缘系列任务开启状态
i3k_sbean.role_mrgseriestask_open = i3k_class("role_mrgseriestask_open")
function i3k_sbean.role_mrgseriestask_open:ctor()
	self._pname_ = "role_mrgseriestask_open"
	--self.open:		int32	
end

function i3k_sbean.role_mrgseriestask_open:clone()
	return clone(self)
end

function i3k_sbean.role_mrgseriestask_open:decode(is)
	is:popString()
	self.open = is:popNumber()
end

function i3k_sbean.role_mrgseriestask_open:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.open)
end


-- 通知任务接取
i3k_sbean.role_mrgseriestask_take = i3k_class("role_mrgseriestask_take")
function i3k_sbean.role_mrgseriestask_take:ctor()
	self._pname_ = "role_mrgseriestask_take"
	--self.receiveTime:		int32	
end

function i3k_sbean.role_mrgseriestask_take:clone()
	return clone(self)
end

function i3k_sbean.role_mrgseriestask_take:decode(is)
	is:popString()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.role_mrgseriestask_take:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.receiveTime)
end


-- 通知任务领奖
i3k_sbean.role_mrgseriestask_reward = i3k_class("role_mrgseriestask_reward")
function i3k_sbean.role_mrgseriestask_reward:ctor()
	self._pname_ = "role_mrgseriestask_reward"
	--self.receiveTime:		int32	
end

function i3k_sbean.role_mrgseriestask_reward:clone()
	return clone(self)
end

function i3k_sbean.role_mrgseriestask_reward:decode(is)
	is:popString()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.role_mrgseriestask_reward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.receiveTime)
end


-- 通知任务计数变化
i3k_sbean.role_mrgseriestask_update = i3k_class("role_mrgseriestask_update")
function i3k_sbean.role_mrgseriestask_update:ctor()
	self._pname_ = "role_mrgseriestask_update"
	--self.value:		int32	
end

function i3k_sbean.role_mrgseriestask_update:clone()
	return clone(self)
end

function i3k_sbean.role_mrgseriestask_update:decode(is)
	is:popString()
	self.value = is:popNumber()
end

function i3k_sbean.role_mrgseriestask_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.value)
end


-- 姻缘环任务开启
i3k_sbean.mrglooptask_open_res = i3k_class("mrglooptask_open_res")
function i3k_sbean.mrglooptask_open_res:ctor()
	self._pname_ = "mrglooptask_open_res"
	--self.ok:		int32	
end

function i3k_sbean.mrglooptask_open_res:clone()
	return clone(self)
end

function i3k_sbean.mrglooptask_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mrglooptask_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 姻缘环任务接取
i3k_sbean.mrglooptask_take_res = i3k_class("mrglooptask_take_res")
function i3k_sbean.mrglooptask_take_res:ctor()
	self._pname_ = "mrglooptask_take_res"
	--self.ok:		int32	
	--self.curLoop:		int32	
end

function i3k_sbean.mrglooptask_take_res:clone()
	return clone(self)
end

function i3k_sbean.mrglooptask_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.curLoop = is:popNumber()
end

function i3k_sbean.mrglooptask_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.curLoop)
end


-- 姻缘环任务领奖
i3k_sbean.mrglooptask_reward_res = i3k_class("mrglooptask_reward_res")
function i3k_sbean.mrglooptask_reward_res:ctor()
	self._pname_ = "mrglooptask_reward_res"
	--self.ok:		int32	
	--self.taskID:		int32	
	--self.curLoop:		int32	
end

function i3k_sbean.mrglooptask_reward_res:clone()
	return clone(self)
end

function i3k_sbean.mrglooptask_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.taskID = is:popNumber()
	self.curLoop = is:popNumber()
end

function i3k_sbean.mrglooptask_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.taskID)
	os:pushNumber(self.curLoop)
end


-- 同步姻缘环任务开启状态
i3k_sbean.role_mrglooptask_open = i3k_class("role_mrglooptask_open")
function i3k_sbean.role_mrglooptask_open:ctor()
	self._pname_ = "role_mrglooptask_open"
	--self.open:		int32	
end

function i3k_sbean.role_mrglooptask_open:clone()
	return clone(self)
end

function i3k_sbean.role_mrglooptask_open:decode(is)
	is:popString()
	self.open = is:popNumber()
end

function i3k_sbean.role_mrglooptask_open:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.open)
end


-- 通知任务接取
i3k_sbean.role_mrglooptask_take = i3k_class("role_mrglooptask_take")
function i3k_sbean.role_mrglooptask_take:ctor()
	self._pname_ = "role_mrglooptask_take"
	--self.receiveTime:		int32	
	--self.curLoop:		int32	
end

function i3k_sbean.role_mrglooptask_take:clone()
	return clone(self)
end

function i3k_sbean.role_mrglooptask_take:decode(is)
	is:popString()
	self.receiveTime = is:popNumber()
	self.curLoop = is:popNumber()
end

function i3k_sbean.role_mrglooptask_take:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.receiveTime)
	os:pushNumber(self.curLoop)
end


-- 通知任务领奖
i3k_sbean.role_mrglooptask_reward = i3k_class("role_mrglooptask_reward")
function i3k_sbean.role_mrglooptask_reward:ctor()
	self._pname_ = "role_mrglooptask_reward"
	--self.nextTaskID:		int32	
	--self.receiveTime:		int32	
	--self.curLoop:		int32	
end

function i3k_sbean.role_mrglooptask_reward:clone()
	return clone(self)
end

function i3k_sbean.role_mrglooptask_reward:decode(is)
	is:popString()
	self.nextTaskID = is:popNumber()
	self.receiveTime = is:popNumber()
	self.curLoop = is:popNumber()
end

function i3k_sbean.role_mrglooptask_reward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.nextTaskID)
	os:pushNumber(self.receiveTime)
	os:pushNumber(self.curLoop)
end


-- 通知任务计数变化
i3k_sbean.role_mrglooptask_update = i3k_class("role_mrglooptask_update")
function i3k_sbean.role_mrglooptask_update:ctor()
	self._pname_ = "role_mrglooptask_update"
	--self.value:		int32	
end

function i3k_sbean.role_mrglooptask_update:clone()
	return clone(self)
end

function i3k_sbean.role_mrglooptask_update:decode(is)
	is:popString()
	self.value = is:popNumber()
end

function i3k_sbean.role_mrglooptask_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.value)
end


-- 同步姻缘任务
i3k_sbean.role_mrgtask = i3k_class("role_mrgtask")
function i3k_sbean.role_mrgtask:ctor()
	self._pname_ = "role_mrgtask"
	--self.task:		DBMarriageTask	
end

function i3k_sbean.role_mrgtask:clone()
	return clone(self)
end

function i3k_sbean.role_mrgtask:decode(is)
	is:popString()
	self.task = is:pop(i3k_sbean.DBMarriageTask)
end

function i3k_sbean.role_mrgtask:encode(os)
	os:pushString(self._pname_)
	os:push(self.task)
end


-- 姻缘档次提升
i3k_sbean.marriage_upgrade_res = i3k_class("marriage_upgrade_res")
function i3k_sbean.marriage_upgrade_res:ctor()
	self._pname_ = "marriage_upgrade_res"
	--self.ok:		int32	
end

function i3k_sbean.marriage_upgrade_res:clone()
	return clone(self)
end

function i3k_sbean.marriage_upgrade_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.marriage_upgrade_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 姻缘档次变化
i3k_sbean.marriage_grade_sync = i3k_class("marriage_grade_sync")
function i3k_sbean.marriage_grade_sync:ctor()
	self._pname_ = "marriage_grade_sync"
	--self.grade:		int32	
end

function i3k_sbean.marriage_grade_sync:clone()
	return clone(self)
end

function i3k_sbean.marriage_grade_sync:decode(is)
	is:popString()
	self.grade = is:popNumber()
end

function i3k_sbean.marriage_grade_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.grade)
end


-- 保存技能预设请求
i3k_sbean.save_skill_preset_res = i3k_class("save_skill_preset_res")
function i3k_sbean.save_skill_preset_res:ctor()
	self._pname_ = "save_skill_preset_res"
	--self.ok:		int32	
end

function i3k_sbean.save_skill_preset_res:clone()
	return clone(self)
end

function i3k_sbean.save_skill_preset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.save_skill_preset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 保存技能预设请求
i3k_sbean.save_all_skill_preset_res = i3k_class("save_all_skill_preset_res")
function i3k_sbean.save_all_skill_preset_res:ctor()
	self._pname_ = "save_all_skill_preset_res"
	--self.ok:		int32	
end

function i3k_sbean.save_all_skill_preset_res:clone()
	return clone(self)
end

function i3k_sbean.save_all_skill_preset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.save_all_skill_preset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 保存气功预设请求
i3k_sbean.save_spirits_preset_res = i3k_class("save_spirits_preset_res")
function i3k_sbean.save_spirits_preset_res:ctor()
	self._pname_ = "save_spirits_preset_res"
	--self.ok:		int32	
end

function i3k_sbean.save_spirits_preset_res:clone()
	return clone(self)
end

function i3k_sbean.save_spirits_preset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.save_spirits_preset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 删除气功预设请求
i3k_sbean.delete_skill_preset_res = i3k_class("delete_skill_preset_res")
function i3k_sbean.delete_skill_preset_res:ctor()
	self._pname_ = "delete_skill_preset_res"
	--self.ok:		int32	
end

function i3k_sbean.delete_skill_preset_res:clone()
	return clone(self)
end

function i3k_sbean.delete_skill_preset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.delete_skill_preset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 删除气功预设请求
i3k_sbean.delete_spirits_preset_res = i3k_class("delete_spirits_preset_res")
function i3k_sbean.delete_spirits_preset_res:ctor()
	self._pname_ = "delete_spirits_preset_res"
	--self.ok:		int32	
end

function i3k_sbean.delete_spirits_preset_res:clone()
	return clone(self)
end

function i3k_sbean.delete_spirits_preset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.delete_spirits_preset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用技能预设请求
i3k_sbean.change_skill_preset_res = i3k_class("change_skill_preset_res")
function i3k_sbean.change_skill_preset_res:ctor()
	self._pname_ = "change_skill_preset_res"
	--self.ok:		int32	
end

function i3k_sbean.change_skill_preset_res:clone()
	return clone(self)
end

function i3k_sbean.change_skill_preset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.change_skill_preset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用气功预设请求
i3k_sbean.change_spirits_preset_res = i3k_class("change_spirits_preset_res")
function i3k_sbean.change_spirits_preset_res:ctor()
	self._pname_ = "change_spirits_preset_res"
	--self.ok:		int32	
end

function i3k_sbean.change_spirits_preset_res:clone()
	return clone(self)
end

function i3k_sbean.change_spirits_preset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.change_spirits_preset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步技能预设请求
i3k_sbean.role_skill_preset = i3k_class("role_skill_preset")
function i3k_sbean.role_skill_preset:ctor()
	self._pname_ = "role_skill_preset"
	--self.skillPreset:		vector[DBSkillPreset]	
	--self.spritsPreset:		vector[DBSpiritsPreset]	
end

function i3k_sbean.role_skill_preset:clone()
	return clone(self)
end

function i3k_sbean.role_skill_preset:decode(is)
	is:popString()
	self.skillPreset = is:popList(i3k_sbean.DBSkillPreset)
	self.spritsPreset = is:popList(i3k_sbean.DBSpiritsPreset)
end

function i3k_sbean.role_skill_preset:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.skillPreset)
	os:pushList(self.spritsPreset)
end


-- 帮派团队本开启请求
i3k_sbean.sect_group_map_open_res = i3k_class("sect_group_map_open_res")
function i3k_sbean.sect_group_map_open_res:ctor()
	self._pname_ = "sect_group_map_open_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_group_map_open_res:clone()
	return clone(self)
end

function i3k_sbean.sect_group_map_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_group_map_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派团队本进入请求
i3k_sbean.sect_group_map_enter_res = i3k_class("sect_group_map_enter_res")
function i3k_sbean.sect_group_map_enter_res:ctor()
	self._pname_ = "sect_group_map_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_group_map_enter_res:clone()
	return clone(self)
end

function i3k_sbean.sect_group_map_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_group_map_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派团队本信息同步请求
i3k_sbean.sect_group_map_sync_res = i3k_class("sect_group_map_sync_res")
function i3k_sbean.sect_group_map_sync_res:ctor()
	self._pname_ = "sect_group_map_sync_res"
	--self.sectGroupMapInfo:		map[int32, DBSectGroupMapData]	
	--self.sectMemberLevel:		vector[int32]	
end

function i3k_sbean.sect_group_map_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_group_map_sync_res:decode(is)
	is:popString()
	self.sectGroupMapInfo = is:popNumberMap(i3k_sbean.DBSectGroupMapData)
	self.sectMemberLevel = is:popNumberList()
end

function i3k_sbean.sect_group_map_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.sectGroupMapInfo)
	os:pushNumberList(self.sectMemberLevel)
end


-- 帮派团队本结束推送
i3k_sbean.sect_group_map_end = i3k_class("sect_group_map_end")
function i3k_sbean.sect_group_map_end:ctor()
	self._pname_ = "sect_group_map_end"
	--self.mapId:		int32	
	--self.finishTime:		int32	
	--self.progress:		int32	
	--self.rank:		int32	
end

function i3k_sbean.sect_group_map_end:clone()
	return clone(self)
end

function i3k_sbean.sect_group_map_end:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.finishTime = is:popNumber()
	self.progress = is:popNumber()
	self.rank = is:popNumber()
end

function i3k_sbean.sect_group_map_end:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.finishTime)
	os:pushNumber(self.progress)
	os:pushNumber(self.rank)
end


-- 神兵技能升级请求
i3k_sbean.weapon_skill_level_up_res = i3k_class("weapon_skill_level_up_res")
function i3k_sbean.weapon_skill_level_up_res:ctor()
	self._pname_ = "weapon_skill_level_up_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_skill_level_up_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_skill_level_up_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_skill_level_up_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵天赋升级请求
i3k_sbean.weapon_talent_level_up_res = i3k_class("weapon_talent_level_up_res")
function i3k_sbean.weapon_talent_level_up_res:ctor()
	self._pname_ = "weapon_talent_level_up_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_talent_level_up_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_talent_level_up_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_talent_level_up_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵天赋点购买请求
i3k_sbean.weapon_talent_point_buy_res = i3k_class("weapon_talent_point_buy_res")
function i3k_sbean.weapon_talent_point_buy_res:ctor()
	self._pname_ = "weapon_talent_point_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_talent_point_buy_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_talent_point_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_talent_point_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵天赋点重置请求
i3k_sbean.weapon_talent_point_reset_res = i3k_class("weapon_talent_point_reset_res")
function i3k_sbean.weapon_talent_point_reset_res:ctor()
	self._pname_ = "weapon_talent_point_reset_res"
	--self.ok:		int32	
end

function i3k_sbean.weapon_talent_point_reset_res:clone()
	return clone(self)
end

function i3k_sbean.weapon_talent_point_reset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapon_talent_point_reset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 发送礼物请求
i3k_sbean.send_gift_res = i3k_class("send_gift_res")
function i3k_sbean.send_gift_res:ctor()
	self._pname_ = "send_gift_res"
	--self.ok:		int32	
end

function i3k_sbean.send_gift_res:clone()
	return clone(self)
end

function i3k_sbean.send_gift_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.send_gift_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 打开地图同步旗帜信息
i3k_sbean.sync_big_map_flag_info_res = i3k_class("sync_big_map_flag_info_res")
function i3k_sbean.sync_big_map_flag_info_res:ctor()
	self._pname_ = "sync_big_map_flag_info_res"
	--self.flags:		map[int32, MapFlagInfo]	
end

function i3k_sbean.sync_big_map_flag_info_res:clone()
	return clone(self)
end

function i3k_sbean.sync_big_map_flag_info_res:decode(is)
	is:popString()
	self.flags = is:popNumberMap(i3k_sbean.MapFlagInfo)
end

function i3k_sbean.sync_big_map_flag_info_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.flags)
end


-- 同步地图旗帜信息
i3k_sbean.map_flag_info = i3k_class("map_flag_info")
function i3k_sbean.map_flag_info:ctor()
	self._pname_ = "map_flag_info"
	--self.sect:		MapFlagSectOverView	
end

function i3k_sbean.map_flag_info:clone()
	return clone(self)
end

function i3k_sbean.map_flag_info:decode(is)
	is:popString()
	self.sect = is:pop(i3k_sbean.MapFlagSectOverView)
end

function i3k_sbean.map_flag_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.sect)
end


-- 地图旗帜信息变更
i3k_sbean.map_flag_sect_change = i3k_class("map_flag_sect_change")
function i3k_sbean.map_flag_sect_change:ctor()
	self._pname_ = "map_flag_sect_change"
	--self.sect:		MapFlagSectOverView	
end

function i3k_sbean.map_flag_sect_change:clone()
	return clone(self)
end

function i3k_sbean.map_flag_sect_change:decode(is)
	is:popString()
	self.sect = is:pop(i3k_sbean.MapFlagSectOverView)
end

function i3k_sbean.map_flag_sect_change:encode(os)
	os:pushString(self._pname_)
	os:push(self.sect)
end


-- 同步角色道具添加属性
i3k_sbean.role_item_props = i3k_class("role_item_props")
function i3k_sbean.role_item_props:ctor()
	self._pname_ = "role_item_props"
	--self.itemProps:		map[int32, int32]	
end

function i3k_sbean.role_item_props:clone()
	return clone(self)
end

function i3k_sbean.role_item_props:decode(is)
	is:popString()
	self.itemProps = is:popNumberNumberMap()
end

function i3k_sbean.role_item_props:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.itemProps)
end


-- 同步角色限制使用物品历史使用次数
i3k_sbean.role_life_use = i3k_class("role_life_use")
function i3k_sbean.role_life_use:ctor()
	self._pname_ = "role_life_use"
	--self.lifeUse:		map[int32, int32]	
end

function i3k_sbean.role_life_use:clone()
	return clone(self)
end

function i3k_sbean.role_life_use:decode(is)
	is:popString()
	self.lifeUse = is:popNumberNumberMap()
end

function i3k_sbean.role_life_use:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.lifeUse)
end


-- 随从技能升级请求
i3k_sbean.pet_skill_level_up_res = i3k_class("pet_skill_level_up_res")
function i3k_sbean.pet_skill_level_up_res:ctor()
	self._pname_ = "pet_skill_level_up_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_skill_level_up_res:clone()
	return clone(self)
end

function i3k_sbean.pet_skill_level_up_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_skill_level_up_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步特权卡配置请求
i3k_sbean.sync_special_card_res = i3k_class("sync_special_card_res")
function i3k_sbean.sync_special_card_res:ctor()
	self._pname_ = "sync_special_card_res"
	--self.id:		int32	
	--self.info:		PayLevelInfo	
end

function i3k_sbean.sync_special_card_res:clone()
	return clone(self)
end

function i3k_sbean.sync_special_card_res:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.info = is:pop(i3k_sbean.PayLevelInfo)
end

function i3k_sbean.sync_special_card_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.info)
end


-- 领取特权卡奖励请求
i3k_sbean.take_special_card_reward_res = i3k_class("take_special_card_reward_res")
function i3k_sbean.take_special_card_reward_res:ctor()
	self._pname_ = "take_special_card_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.take_special_card_reward_res:clone()
	return clone(self)
end

function i3k_sbean.take_special_card_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_special_card_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通过类型同步充值商品
i3k_sbean.paygoods_sync_res = i3k_class("paygoods_sync_res")
function i3k_sbean.paygoods_sync_res:ctor()
	self._pname_ = "paygoods_sync_res"
	--self.id:		int32	
	--self.payLevels:		vector[PayLevelInfo]	
end

function i3k_sbean.paygoods_sync_res:clone()
	return clone(self)
end

function i3k_sbean.paygoods_sync_res:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.payLevels = is:popList(i3k_sbean.PayLevelInfo)
end

function i3k_sbean.paygoods_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushList(self.payLevels)
end


-- 同步每日体力奖励请求
i3k_sbean.sync_daily_vit_reward_res = i3k_class("sync_daily_vit_reward_res")
function i3k_sbean.sync_daily_vit_reward_res:ctor()
	self._pname_ = "sync_daily_vit_reward_res"
	--self.reward:		set[int32]	
end

function i3k_sbean.sync_daily_vit_reward_res:clone()
	return clone(self)
end

function i3k_sbean.sync_daily_vit_reward_res:decode(is)
	is:popString()
	self.reward = is:popNumberSet()
end

function i3k_sbean.sync_daily_vit_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.reward)
end


-- 领取每日体力奖励请求
i3k_sbean.take_daily_vit_reward_res = i3k_class("take_daily_vit_reward_res")
function i3k_sbean.take_daily_vit_reward_res:ctor()
	self._pname_ = "take_daily_vit_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.take_daily_vit_reward_res:clone()
	return clone(self)
end

function i3k_sbean.take_daily_vit_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_daily_vit_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神兵熟练度冒字使用
i3k_sbean.role_weapon_master = i3k_class("role_weapon_master")
function i3k_sbean.role_weapon_master:ctor()
	self._pname_ = "role_weapon_master"
	--self.master:		int32	
end

function i3k_sbean.role_weapon_master:clone()
	return clone(self)
end

function i3k_sbean.role_weapon_master:decode(is)
	is:popString()
	self.master = is:popNumber()
end

function i3k_sbean.role_weapon_master:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.master)
end


-- 同步角色活动本当前进度
i3k_sbean.role_activity_map_cur_process = i3k_class("role_activity_map_cur_process")
function i3k_sbean.role_activity_map_cur_process:ctor()
	self._pname_ = "role_activity_map_cur_process"
	--self.process:		int32	
end

function i3k_sbean.role_activity_map_cur_process:clone()
	return clone(self)
end

function i3k_sbean.role_activity_map_cur_process:decode(is)
	is:popString()
	self.process = is:popNumber()
end

function i3k_sbean.role_activity_map_cur_process:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.process)
end


-- 同步角色名望等级
i3k_sbean.role_fame_level = i3k_class("role_fame_level")
function i3k_sbean.role_fame_level:ctor()
	self._pname_ = "role_fame_level"
	--self.fameLevel:		int32	
end

function i3k_sbean.role_fame_level:clone()
	return clone(self)
end

function i3k_sbean.role_fame_level:decode(is)
	is:popString()
	self.fameLevel = is:popNumber()
end

function i3k_sbean.role_fame_level:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fameLevel)
end


-- 开启洞察请求
i3k_sbean.try_open_insight_res = i3k_class("try_open_insight_res")
function i3k_sbean.try_open_insight_res:ctor()
	self._pname_ = "try_open_insight_res"
	--self.ok:		int32	
end

function i3k_sbean.try_open_insight_res:clone()
	return clone(self)
end

function i3k_sbean.try_open_insight_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.try_open_insight_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开启寻仇请求
i3k_sbean.try_open_revenge_res = i3k_class("try_open_revenge_res")
function i3k_sbean.try_open_revenge_res:ctor()
	self._pname_ = "try_open_revenge_res"
	--self.ok:		int32	
end

function i3k_sbean.try_open_revenge_res:clone()
	return clone(self)
end

function i3k_sbean.try_open_revenge_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.try_open_revenge_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步洞察请求
i3k_sbean.try_sync_insight_res = i3k_class("try_sync_insight_res")
function i3k_sbean.try_sync_insight_res:ctor()
	self._pname_ = "try_sync_insight_res"
	--self.data:		DBInsightData	
end

function i3k_sbean.try_sync_insight_res:clone()
	return clone(self)
end

function i3k_sbean.try_sync_insight_res:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBInsightData)
end

function i3k_sbean.try_sync_insight_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 同步寻仇请求
i3k_sbean.try_sync_revenge_res = i3k_class("try_sync_revenge_res")
function i3k_sbean.try_sync_revenge_res:ctor()
	self._pname_ = "try_sync_revenge_res"
	--self.data:		DBRevengeData	
end

function i3k_sbean.try_sync_revenge_res:clone()
	return clone(self)
end

function i3k_sbean.try_sync_revenge_res:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBRevengeData)
end

function i3k_sbean.try_sync_revenge_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 传送至洞察目标请求
i3k_sbean.try_transform_insight_res = i3k_class("try_transform_insight_res")
function i3k_sbean.try_transform_insight_res:ctor()
	self._pname_ = "try_transform_insight_res"
	--self.ok:		int32	
end

function i3k_sbean.try_transform_insight_res:clone()
	return clone(self)
end

function i3k_sbean.try_transform_insight_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.try_transform_insight_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 传送至寻仇目标请求
i3k_sbean.try_transform_revenge_res = i3k_class("try_transform_revenge_res")
function i3k_sbean.try_transform_revenge_res:ctor()
	self._pname_ = "try_transform_revenge_res"
	--self.ok:		int32	
end

function i3k_sbean.try_transform_revenge_res:clone()
	return clone(self)
end

function i3k_sbean.try_transform_revenge_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.try_transform_revenge_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 传家宝擦拭请求
i3k_sbean.heirloom_wipe_res = i3k_class("heirloom_wipe_res")
function i3k_sbean.heirloom_wipe_res:ctor()
	self._pname_ = "heirloom_wipe_res"
	--self.ok:		int32	
end

function i3k_sbean.heirloom_wipe_res:clone()
	return clone(self)
end

function i3k_sbean.heirloom_wipe_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.heirloom_wipe_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 传家宝取出请求
i3k_sbean.heirloom_takeout_res = i3k_class("heirloom_takeout_res")
function i3k_sbean.heirloom_takeout_res:ctor()
	self._pname_ = "heirloom_takeout_res"
	--self.ok:		int32	
end

function i3k_sbean.heirloom_takeout_res:clone()
	return clone(self)
end

function i3k_sbean.heirloom_takeout_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.heirloom_takeout_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步传家宝信息
i3k_sbean.role_heirloom_info = i3k_class("role_heirloom_info")
function i3k_sbean.role_heirloom_info:ctor()
	self._pname_ = "role_heirloom_info"
	--self.heirloom:		DBHeirloom	
end

function i3k_sbean.role_heirloom_info:clone()
	return clone(self)
end

function i3k_sbean.role_heirloom_info:decode(is)
	is:popString()
	self.heirloom = is:pop(i3k_sbean.DBHeirloom)
end

function i3k_sbean.role_heirloom_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.heirloom)
end


-- 购买离线精灵修炼点请求
i3k_sbean.buy_offline_func_point_res = i3k_class("buy_offline_func_point_res")
function i3k_sbean.buy_offline_func_point_res:ctor()
	self._pname_ = "buy_offline_func_point_res"
	--self.ok:		int32	
end

function i3k_sbean.buy_offline_func_point_res:clone()
	return clone(self)
end

function i3k_sbean.buy_offline_func_point_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.buy_offline_func_point_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 离线精灵同步协议
i3k_sbean.role_offline_wizard = i3k_class("role_offline_wizard")
function i3k_sbean.role_offline_wizard:ctor()
	self._pname_ = "role_offline_wizard"
	--self.offlineWizard:		DBOfflineWizard	
end

function i3k_sbean.role_offline_wizard:clone()
	return clone(self)
end

function i3k_sbean.role_offline_wizard:decode(is)
	is:popString()
	self.offlineWizard = is:pop(i3k_sbean.DBOfflineWizard)
end

function i3k_sbean.role_offline_wizard:encode(os)
	os:pushString(self._pname_)
	os:push(self.offlineWizard)
end


-- 精灵旅行同步
i3k_sbean.role_wizard_trip_sync = i3k_class("role_wizard_trip_sync")
function i3k_sbean.role_wizard_trip_sync:ctor()
	self._pname_ = "role_wizard_trip_sync"
	--self.tripWizard:		DBWizardTrip	
end

function i3k_sbean.role_wizard_trip_sync:clone()
	return clone(self)
end

function i3k_sbean.role_wizard_trip_sync:decode(is)
	is:popString()
	self.tripWizard = is:pop(i3k_sbean.DBWizardTrip)
end

function i3k_sbean.role_wizard_trip_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.tripWizard)
end


-- 精灵旅行开始
i3k_sbean.role_wizard_trip_start_res = i3k_class("role_wizard_trip_start_res")
function i3k_sbean.role_wizard_trip_start_res:ctor()
	self._pname_ = "role_wizard_trip_start_res"
	--self.ok:		int32	
	--self.tripWizard:		DBWizardTrip	
end

function i3k_sbean.role_wizard_trip_start_res:clone()
	return clone(self)
end

function i3k_sbean.role_wizard_trip_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.tripWizard = is:pop(i3k_sbean.DBWizardTrip)
end

function i3k_sbean.role_wizard_trip_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.tripWizard)
end


-- 精灵旅行分享照片
i3k_sbean.role_wizard_trip_share_photo_res = i3k_class("role_wizard_trip_share_photo_res")
function i3k_sbean.role_wizard_trip_share_photo_res:ctor()
	self._pname_ = "role_wizard_trip_share_photo_res"
	--self.ok:		int32	
end

function i3k_sbean.role_wizard_trip_share_photo_res:clone()
	return clone(self)
end

function i3k_sbean.role_wizard_trip_share_photo_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_wizard_trip_share_photo_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 旅行精灵结束提示
i3k_sbean.role_wizard_trip_tips = i3k_class("role_wizard_trip_tips")
function i3k_sbean.role_wizard_trip_tips:ctor()
	self._pname_ = "role_wizard_trip_tips"
	--self.wizardID:		int32	
end

function i3k_sbean.role_wizard_trip_tips:clone()
	return clone(self)
end

function i3k_sbean.role_wizard_trip_tips:decode(is)
	is:popString()
	self.wizardID = is:popNumber()
end

function i3k_sbean.role_wizard_trip_tips:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wizardID)
end


-- 设置帮派QQ群请求
i3k_sbean.set_sect_qqgroup_res = i3k_class("set_sect_qqgroup_res")
function i3k_sbean.set_sect_qqgroup_res:ctor()
	self._pname_ = "set_sect_qqgroup_res"
	--self.ok:		int32	
end

function i3k_sbean.set_sect_qqgroup_res:clone()
	return clone(self)
end

function i3k_sbean.set_sect_qqgroup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.set_sect_qqgroup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置角色等级经验
i3k_sbean.role_level_exp = i3k_class("role_level_exp")
function i3k_sbean.role_level_exp:ctor()
	self._pname_ = "role_level_exp"
	--self.level:		int32	
	--self.exp:		int64	
end

function i3k_sbean.role_level_exp:clone()
	return clone(self)
end

function i3k_sbean.role_level_exp:decode(is)
	is:popString()
	self.level = is:popNumber()
	self.exp = is:popNumber()
end

function i3k_sbean.role_level_exp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
	os:pushNumber(self.exp)
end


-- 设置传家宝外观显示请求
i3k_sbean.set_heirloom_display_res = i3k_class("set_heirloom_display_res")
function i3k_sbean.set_heirloom_display_res:ctor()
	self._pname_ = "set_heirloom_display_res"
	--self.ok:		int32	
end

function i3k_sbean.set_heirloom_display_res:clone()
	return clone(self)
end

function i3k_sbean.set_heirloom_display_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.set_heirloom_display_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 武勋商城同步协议
i3k_sbean.feat_gambleshopsync_res = i3k_class("feat_gambleshopsync_res")
function i3k_sbean.feat_gambleshopsync_res:ctor()
	self._pname_ = "feat_gambleshopsync_res"
	--self.info:		GambleShopInfo	
end

function i3k_sbean.feat_gambleshopsync_res:clone()
	return clone(self)
end

function i3k_sbean.feat_gambleshopsync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.GambleShopInfo)
end

function i3k_sbean.feat_gambleshopsync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 武勋商城刷新协议
i3k_sbean.feat_gambleshoprefresh_res = i3k_class("feat_gambleshoprefresh_res")
function i3k_sbean.feat_gambleshoprefresh_res:ctor()
	self._pname_ = "feat_gambleshoprefresh_res"
	--self.info:		GambleShopInfo	
end

function i3k_sbean.feat_gambleshoprefresh_res:clone()
	return clone(self)
end

function i3k_sbean.feat_gambleshoprefresh_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.GambleShopInfo)
end

function i3k_sbean.feat_gambleshoprefresh_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 武勋商城买商品协议
i3k_sbean.feat_gambleshopbuy_res = i3k_class("feat_gambleshopbuy_res")
function i3k_sbean.feat_gambleshopbuy_res:ctor()
	self._pname_ = "feat_gambleshopbuy_res"
	--self.ok:		vector[DummyGoods]	
end

function i3k_sbean.feat_gambleshopbuy_res:clone()
	return clone(self)
end

function i3k_sbean.feat_gambleshopbuy_res:decode(is)
	is:popString()
	self.ok = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.feat_gambleshopbuy_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ok)
end


-- 添加结婚预约协议
i3k_sbean.add_marriage_bespeak_res = i3k_class("add_marriage_bespeak_res")
function i3k_sbean.add_marriage_bespeak_res:ctor()
	self._pname_ = "add_marriage_bespeak_res"
	--self.ok:		int32	
end

function i3k_sbean.add_marriage_bespeak_res:clone()
	return clone(self)
end

function i3k_sbean.add_marriage_bespeak_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.add_marriage_bespeak_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步结婚预约协议
i3k_sbean.sync_marriage_bespeak_res = i3k_class("sync_marriage_bespeak_res")
function i3k_sbean.sync_marriage_bespeak_res:ctor()
	self._pname_ = "sync_marriage_bespeak_res"
	--self.bespeaks:		vector[DBMarriageBespeak]	
end

function i3k_sbean.sync_marriage_bespeak_res:clone()
	return clone(self)
end

function i3k_sbean.sync_marriage_bespeak_res:decode(is)
	is:popString()
	self.bespeaks = is:popList(i3k_sbean.DBMarriageBespeak)
end

function i3k_sbean.sync_marriage_bespeak_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.bespeaks)
end


-- 领取结婚称号
i3k_sbean.take_marriage_title_res = i3k_class("take_marriage_title_res")
function i3k_sbean.take_marriage_title_res:ctor()
	self._pname_ = "take_marriage_title_res"
	--self.ok:		int32	
end

function i3k_sbean.take_marriage_title_res:clone()
	return clone(self)
end

function i3k_sbean.take_marriage_title_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_marriage_title_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步自己的结婚预定时间
i3k_sbean.role_marriage_bespeak_time = i3k_class("role_marriage_bespeak_time")
function i3k_sbean.role_marriage_bespeak_time:ctor()
	self._pname_ = "role_marriage_bespeak_time"
	--self.timeIndex:		int32	
end

function i3k_sbean.role_marriage_bespeak_time:clone()
	return clone(self)
end

function i3k_sbean.role_marriage_bespeak_time:decode(is)
	is:popString()
	self.timeIndex = is:popNumber()
end

function i3k_sbean.role_marriage_bespeak_time:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.timeIndex)
end


-- 有角色在当前地图结婚
i3k_sbean.role_marriage_here = i3k_class("role_marriage_here")
function i3k_sbean.role_marriage_here:ctor()
	self._pname_ = "role_marriage_here"
	--self.grade:		int32	
	--self.mapId:		int32	
	--self.line:		int32	
end

function i3k_sbean.role_marriage_here:clone()
	return clone(self)
end

function i3k_sbean.role_marriage_here:decode(is)
	is:popString()
	self.grade = is:popNumber()
	self.mapId = is:popNumber()
	self.line = is:popNumber()
end

function i3k_sbean.role_marriage_here:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.grade)
	os:pushNumber(self.mapId)
	os:pushNumber(self.line)
end


-- 同步角色结婚对象名称
i3k_sbean.role_marriage_partner_name = i3k_class("role_marriage_partner_name")
function i3k_sbean.role_marriage_partner_name:ctor()
	self._pname_ = "role_marriage_partner_name"
	--self.name:		string	
end

function i3k_sbean.role_marriage_partner_name:clone()
	return clone(self)
end

function i3k_sbean.role_marriage_partner_name:decode(is)
	is:popString()
	self.name = is:popString()
end

function i3k_sbean.role_marriage_partner_name:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.name)
end


-- 角色调研红点
i3k_sbean.role_survey_notice = i3k_class("role_survey_notice")
function i3k_sbean.role_survey_notice:ctor()
	self._pname_ = "role_survey_notice"
	--self.canOperate:		int32	
end

function i3k_sbean.role_survey_notice:clone()
	return clone(self)
end

function i3k_sbean.role_survey_notice:decode(is)
	is:popString()
	self.canOperate = is:popNumber()
end

function i3k_sbean.role_survey_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.canOperate)
end


-- 基础物品快速购买协议
i3k_sbean.base_dummygoods_quick_buy_res = i3k_class("base_dummygoods_quick_buy_res")
function i3k_sbean.base_dummygoods_quick_buy_res:ctor()
	self._pname_ = "base_dummygoods_quick_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.base_dummygoods_quick_buy_res:clone()
	return clone(self)
end

function i3k_sbean.base_dummygoods_quick_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.base_dummygoods_quick_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结婚步骤同步
i3k_sbean.role_marriage_step = i3k_class("role_marriage_step")
function i3k_sbean.role_marriage_step:ctor()
	self._pname_ = "role_marriage_step"
	--self.step:		int32	
end

function i3k_sbean.role_marriage_step:clone()
	return clone(self)
end

function i3k_sbean.role_marriage_step:decode(is)
	is:popString()
	self.step = is:popNumber()
end

function i3k_sbean.role_marriage_step:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.step)
end


-- 结婚步骤同步
i3k_sbean.sect_history_broadcast = i3k_class("sect_history_broadcast")
function i3k_sbean.sect_history_broadcast:ctor()
	self._pname_ = "sect_history_broadcast"
	--self.historyDetial:		DBSectHistory	
end

function i3k_sbean.sect_history_broadcast:clone()
	return clone(self)
end

function i3k_sbean.sect_history_broadcast:decode(is)
	is:popString()
	self.historyDetial = is:pop(i3k_sbean.DBSectHistory)
end

function i3k_sbean.sect_history_broadcast:encode(os)
	os:pushString(self._pname_)
	os:push(self.historyDetial)
end


-- 活动补做协议
i3k_sbean.activity_last_quick_done_res = i3k_class("activity_last_quick_done_res")
function i3k_sbean.activity_last_quick_done_res:ctor()
	self._pname_ = "activity_last_quick_done_res"
	--self.ok:		int32	
	--self.rewards:		MapRewards	
end

function i3k_sbean.activity_last_quick_done_res:clone()
	return clone(self)
end

function i3k_sbean.activity_last_quick_done_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:pop(i3k_sbean.MapRewards)
end

function i3k_sbean.activity_last_quick_done_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.rewards)
end


-- 登陆同步补做信息
i3k_sbean.role_activity_last = i3k_class("role_activity_last")
function i3k_sbean.role_activity_last:ctor()
	self._pname_ = "role_activity_last"
	--self.info:		DBActivityLastData	
end

function i3k_sbean.role_activity_last:clone()
	return clone(self)
end

function i3k_sbean.role_activity_last:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBActivityLastData)
end

function i3k_sbean.role_activity_last:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 打开太玄碑文同步信息(index: 当前第几个碑文)
i3k_sbean.stele_sync_res = i3k_class("stele_sync_res")
function i3k_sbean.stele_sync_res:ctor()
	self._pname_ = "stele_sync_res"
	--self.type:		int32	
	--self.remainTimes:		vector[int32]	
	--self.info:		DBRoleStele	
end

function i3k_sbean.stele_sync_res:clone()
	return clone(self)
end

function i3k_sbean.stele_sync_res:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.remainTimes = is:popNumberList()
	self.info = is:pop(i3k_sbean.DBRoleStele)
end

function i3k_sbean.stele_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumberList(self.remainTimes)
	os:push(self.info)
end


-- 参加活动
i3k_sbean.stele_join_res = i3k_class("stele_join_res")
function i3k_sbean.stele_join_res:ctor()
	self._pname_ = "stele_join_res"
	--self.receiveTime:		int32	
end

function i3k_sbean.stele_join_res:clone()
	return clone(self)
end

function i3k_sbean.stele_join_res:decode(is)
	is:popString()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.stele_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.receiveTime)
end


-- 排行榜同步
i3k_sbean.stele_rank_res = i3k_class("stele_rank_res")
function i3k_sbean.stele_rank_res:ctor()
	self._pname_ = "stele_rank_res"
	--self.ranks:		vector[RankRole]	
	--self.selfRank:		int32	
end

function i3k_sbean.stele_rank_res:clone()
	return clone(self)
end

function i3k_sbean.stele_rank_res:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.selfRank = is:popNumber()
end

function i3k_sbean.stele_rank_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
	os:pushNumber(self.selfRank)
end


-- 传送到太玄碑文
i3k_sbean.stele_teleport_res = i3k_class("stele_teleport_res")
function i3k_sbean.stele_teleport_res:ctor()
	self._pname_ = "stele_teleport_res"
	--self.ok:		int32	
end

function i3k_sbean.stele_teleport_res:clone()
	return clone(self)
end

function i3k_sbean.stele_teleport_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.stele_teleport_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录时同步太玄碑文
i3k_sbean.role_stele = i3k_class("role_stele")
function i3k_sbean.role_stele:ctor()
	self._pname_ = "role_stele"
	--self.type:		int32	
	--self.info:		DBRoleStele	
	--self.canMineral:		int8	
end

function i3k_sbean.role_stele:clone()
	return clone(self)
end

function i3k_sbean.role_stele:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.info = is:pop(i3k_sbean.DBRoleStele)
	self.canMineral = is:popNumber()
end

function i3k_sbean.role_stele:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:push(self.info)
	os:pushNumber(self.canMineral)
end


-- 更新太玄碑文拓片数量
i3k_sbean.role_stele_card = i3k_class("role_stele_card")
function i3k_sbean.role_stele_card:ctor()
	self._pname_ = "role_stele_card"
	--self.card:		int32	
end

function i3k_sbean.role_stele_card:clone()
	return clone(self)
end

function i3k_sbean.role_stele_card:decode(is)
	is:popString()
	self.card = is:popNumber()
end

function i3k_sbean.role_stele_card:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.card)
end


-- 添加黑名单
i3k_sbean.blacklist_add_res = i3k_class("blacklist_add_res")
function i3k_sbean.blacklist_add_res:ctor()
	self._pname_ = "blacklist_add_res"
	--self.ok:		int32	
end

function i3k_sbean.blacklist_add_res:clone()
	return clone(self)
end

function i3k_sbean.blacklist_add_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.blacklist_add_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 删除黑名单
i3k_sbean.blacklist_del_res = i3k_class("blacklist_del_res")
function i3k_sbean.blacklist_del_res:ctor()
	self._pname_ = "blacklist_del_res"
	--self.ok:		int32	
end

function i3k_sbean.blacklist_del_res:clone()
	return clone(self)
end

function i3k_sbean.blacklist_del_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.blacklist_del_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步黑名单
i3k_sbean.blacklist_sync_res = i3k_class("blacklist_sync_res")
function i3k_sbean.blacklist_sync_res:ctor()
	self._pname_ = "blacklist_sync_res"
	--self.overviews:		map[int32, RoleOverview]	
	--self.addTimes:		map[int32, int32]	
	--self.banList:		set[int32]	
	--self.isClear:		int32	
end

function i3k_sbean.blacklist_sync_res:clone()
	return clone(self)
end

function i3k_sbean.blacklist_sync_res:decode(is)
	is:popString()
	self.overviews = is:popNumberMap(i3k_sbean.RoleOverview)
	self.addTimes = is:popNumberNumberMap()
	self.banList = is:popNumberSet()
	self.isClear = is:popNumber()
end

function i3k_sbean.blacklist_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.overviews)
	os:pushNumberNumberMap(self.addTimes)
	os:pushNumberSet(self.banList)
	os:pushNumber(self.isClear)
end


-- 设置清除长时间未上线的好友
i3k_sbean.set_clear_friend_res = i3k_class("set_clear_friend_res")
function i3k_sbean.set_clear_friend_res:ctor()
	self._pname_ = "set_clear_friend_res"
	--self.ok:		int32	
end

function i3k_sbean.set_clear_friend_res:clone()
	return clone(self)
end

function i3k_sbean.set_clear_friend_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.set_clear_friend_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步黑名单
i3k_sbean.role_blacklist = i3k_class("role_blacklist")
function i3k_sbean.role_blacklist:ctor()
	self._pname_ = "role_blacklist"
	--self.blacklist:		set[int32]	
	--self.banList:		set[int32]	
end

function i3k_sbean.role_blacklist:clone()
	return clone(self)
end

function i3k_sbean.role_blacklist:decode(is)
	is:popString()
	self.blacklist = is:popNumberSet()
	self.banList = is:popNumberSet()
end

function i3k_sbean.role_blacklist:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.blacklist)
	os:pushNumberSet(self.banList)
end


-- 黑名单禁止互动
i3k_sbean.blacklist_ban_res = i3k_class("blacklist_ban_res")
function i3k_sbean.blacklist_ban_res:ctor()
	self._pname_ = "blacklist_ban_res"
	--self.ok:		int32	
end

function i3k_sbean.blacklist_ban_res:clone()
	return clone(self)
end

function i3k_sbean.blacklist_ban_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.blacklist_ban_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步伏魔洞信息
i3k_sbean.demonhole_sync_res = i3k_class("demonhole_sync_res")
function i3k_sbean.demonhole_sync_res:ctor()
	self._pname_ = "demonhole_sync_res"
	--self.curFloor:		int32	
	--self.dayEnterTimes:		int32	
end

function i3k_sbean.demonhole_sync_res:clone()
	return clone(self)
end

function i3k_sbean.demonhole_sync_res:decode(is)
	is:popString()
	self.curFloor = is:popNumber()
	self.dayEnterTimes = is:popNumber()
end

function i3k_sbean.demonhole_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curFloor)
	os:pushNumber(self.dayEnterTimes)
end


-- 参加伏魔洞
i3k_sbean.demonhole_join_res = i3k_class("demonhole_join_res")
function i3k_sbean.demonhole_join_res:ctor()
	self._pname_ = "demonhole_join_res"
	--self.ok:		int32	
end

function i3k_sbean.demonhole_join_res:clone()
	return clone(self)
end

function i3k_sbean.demonhole_join_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.demonhole_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入下一层或上一层
i3k_sbean.demonhole_changefloor_res = i3k_class("demonhole_changefloor_res")
function i3k_sbean.demonhole_changefloor_res:ctor()
	self._pname_ = "demonhole_changefloor_res"
	--self.ok:		int32	
end

function i3k_sbean.demonhole_changefloor_res:clone()
	return clone(self)
end

function i3k_sbean.demonhole_changefloor_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.demonhole_changefloor_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 战况界面
i3k_sbean.demonhole_battle_res = i3k_class("demonhole_battle_res")
function i3k_sbean.demonhole_battle_res:ctor()
	self._pname_ = "demonhole_battle_res"
	--self.curFloor:		vector[RoleDemonHole]	
	--self.total:		vector[RoleDemonHole]	
	--self.addExp:		int32	
end

function i3k_sbean.demonhole_battle_res:clone()
	return clone(self)
end

function i3k_sbean.demonhole_battle_res:decode(is)
	is:popString()
	self.curFloor = is:popList(i3k_sbean.RoleDemonHole)
	self.total = is:popList(i3k_sbean.RoleDemonHole)
	self.addExp = is:popNumber()
end

function i3k_sbean.demonhole_battle_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.curFloor)
	os:pushList(self.total)
	os:pushNumber(self.addExp)
end


-- 通知客户端伏魔洞开始
i3k_sbean.role_demonhole_start = i3k_class("role_demonhole_start")
function i3k_sbean.role_demonhole_start:ctor()
	self._pname_ = "role_demonhole_start"
	--self.firstEnter:		int32	
end

function i3k_sbean.role_demonhole_start:clone()
	return clone(self)
end

function i3k_sbean.role_demonhole_start:decode(is)
	is:popString()
	self.firstEnter = is:popNumber()
end

function i3k_sbean.role_demonhole_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.firstEnter)
end


-- 通知客户端伏魔洞结束
i3k_sbean.role_demonhole_end = i3k_class("role_demonhole_end")
function i3k_sbean.role_demonhole_end:ctor()
	self._pname_ = "role_demonhole_end"
end

function i3k_sbean.role_demonhole_end:decode(is)
	is:popString()
end

function i3k_sbean.role_demonhole_end:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.role_demonholemap_sync = i3k_class("role_demonholemap_sync")
function i3k_sbean.role_demonholemap_sync:ctor()
	self._pname_ = "role_demonholemap_sync"
	--self.curFloor:		int32	
	--self.grade:		int32	
	--self.startTime:		int32	
end

function i3k_sbean.role_demonholemap_sync:clone()
	return clone(self)
end

function i3k_sbean.role_demonholemap_sync:decode(is)
	is:popString()
	self.curFloor = is:popNumber()
	self.grade = is:popNumber()
	self.startTime = is:popNumber()
end

function i3k_sbean.role_demonholemap_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curFloor)
	os:pushNumber(self.grade)
	os:pushNumber(self.startTime)
end


-- 伏魔洞战报界面
i3k_sbean.role_demonhole_result = i3k_class("role_demonhole_result")
function i3k_sbean.role_demonhole_result:ctor()
	self._pname_ = "role_demonhole_result"
	--self.curFloor:		vector[RoleDemonHole]	
	--self.total:		vector[RoleDemonHole]	
	--self.addExp:		int32	
end

function i3k_sbean.role_demonhole_result:clone()
	return clone(self)
end

function i3k_sbean.role_demonhole_result:decode(is)
	is:popString()
	self.curFloor = is:popList(i3k_sbean.RoleDemonHole)
	self.total = is:popList(i3k_sbean.RoleDemonHole)
	self.addExp = is:popNumber()
end

function i3k_sbean.role_demonhole_result:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.curFloor)
	os:pushList(self.total)
	os:pushNumber(self.addExp)
end


-- 开始进入正义之心副本请求
i3k_sbean.justicemap_start_res = i3k_class("justicemap_start_res")
function i3k_sbean.justicemap_start_res:ctor()
	self._pname_ = "justicemap_start_res"
	--self.ok:		int32	
end

function i3k_sbean.justicemap_start_res:clone()
	return clone(self)
end

function i3k_sbean.justicemap_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.justicemap_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步正义之心副本进入次数
i3k_sbean.justicemap_day_enter_time = i3k_class("justicemap_day_enter_time")
function i3k_sbean.justicemap_day_enter_time:ctor()
	self._pname_ = "justicemap_day_enter_time"
	--self.dayJusticeEnterTimes:		int32	
end

function i3k_sbean.justicemap_day_enter_time:clone()
	return clone(self)
end

function i3k_sbean.justicemap_day_enter_time:decode(is)
	is:popString()
	self.dayJusticeEnterTimes = is:popNumber()
end

function i3k_sbean.justicemap_day_enter_time:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayJusticeEnterTimes)
end


-- 打开江湖告急同步信息
i3k_sbean.emergency_sync_res = i3k_class("emergency_sync_res")
function i3k_sbean.emergency_sync_res:ctor()
	self._pname_ = "emergency_sync_res"
	--self.infos:		map[int32, EmergencyInfo]	
end

function i3k_sbean.emergency_sync_res:clone()
	return clone(self)
end

function i3k_sbean.emergency_sync_res:decode(is)
	is:popString()
	self.infos = is:popNumberMap(i3k_sbean.EmergencyInfo)
end

function i3k_sbean.emergency_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.infos)
end


-- 进入江湖告急副本
i3k_sbean.emergency_enter_res = i3k_class("emergency_enter_res")
function i3k_sbean.emergency_enter_res:ctor()
	self._pname_ = "emergency_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.emergency_enter_res:clone()
	return clone(self)
end

function i3k_sbean.emergency_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.emergency_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 排行榜同步
i3k_sbean.emergency_rank_res = i3k_class("emergency_rank_res")
function i3k_sbean.emergency_rank_res:ctor()
	self._pname_ = "emergency_rank_res"
	--self.ranks:		vector[RankRole]	
	--self.selfRank:		int32	
end

function i3k_sbean.emergency_rank_res:clone()
	return clone(self)
end

function i3k_sbean.emergency_rank_res:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.selfRank = is:popNumber()
end

function i3k_sbean.emergency_rank_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
	os:pushNumber(self.selfRank)
end


-- 同步当前声望
i3k_sbean.sync_prestige_num = i3k_class("sync_prestige_num")
function i3k_sbean.sync_prestige_num:ctor()
	self._pname_ = "sync_prestige_num"
	--self.prestige:		int32	
end

function i3k_sbean.sync_prestige_num:clone()
	return clone(self)
end

function i3k_sbean.sync_prestige_num:decode(is)
	is:popString()
	self.prestige = is:popNumber()
end

function i3k_sbean.sync_prestige_num:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.prestige)
end


-- 江湖告急副本关闭推送
i3k_sbean.role_emergency_map_end = i3k_class("role_emergency_map_end")
function i3k_sbean.role_emergency_map_end:ctor()
	self._pname_ = "role_emergency_map_end"
end

function i3k_sbean.role_emergency_map_end:decode(is)
	is:popString()
end

function i3k_sbean.role_emergency_map_end:encode(os)
	os:pushString(self._pname_)
end


-- 幸运星同步
i3k_sbean.lucklystar_sync_res = i3k_class("lucklystar_sync_res")
function i3k_sbean.lucklystar_sync_res:ctor()
	self._pname_ = "lucklystar_sync_res"
	--self.info:		DBLucklyStar	
end

function i3k_sbean.lucklystar_sync_res:clone()
	return clone(self)
end

function i3k_sbean.lucklystar_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBLucklyStar)
end

function i3k_sbean.lucklystar_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 幸运星赠送
i3k_sbean.lucklystar_gift_res = i3k_class("lucklystar_gift_res")
function i3k_sbean.lucklystar_gift_res:ctor()
	self._pname_ = "lucklystar_gift_res"
	--self.ok:		int32	
end

function i3k_sbean.lucklystar_gift_res:clone()
	return clone(self)
end

function i3k_sbean.lucklystar_gift_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.lucklystar_gift_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 幸运星推送
i3k_sbean.lucklystar_push = i3k_class("lucklystar_push")
function i3k_sbean.lucklystar_push:ctor()
	self._pname_ = "lucklystar_push"
end

function i3k_sbean.lucklystar_push:decode(is)
	is:popString()
end

function i3k_sbean.lucklystar_push:encode(os)
	os:pushString(self._pname_)
end


-- 收到幸运星推送
i3k_sbean.recv_lucnlystar_by_role = i3k_class("recv_lucnlystar_by_role")
function i3k_sbean.recv_lucnlystar_by_role:ctor()
	self._pname_ = "recv_lucnlystar_by_role"
	--self.name:		string	
end

function i3k_sbean.recv_lucnlystar_by_role:clone()
	return clone(self)
end

function i3k_sbean.recv_lucnlystar_by_role:decode(is)
	is:popString()
	self.name = is:popString()
end

function i3k_sbean.recv_lucnlystar_by_role:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.name)
end


-- 开始挑战
i3k_sbean.fightnpc_start_res = i3k_class("fightnpc_start_res")
function i3k_sbean.fightnpc_start_res:ctor()
	self._pname_ = "fightnpc_start_res"
	--self.ok:		int32	
end

function i3k_sbean.fightnpc_start_res:clone()
	return clone(self)
end

function i3k_sbean.fightnpc_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fightnpc_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取奖励
i3k_sbean.fightnpc_reward_res = i3k_class("fightnpc_reward_res")
function i3k_sbean.fightnpc_reward_res:ctor()
	self._pname_ = "fightnpc_reward_res"
	--self.coolTime:		int32	
end

function i3k_sbean.fightnpc_reward_res:clone()
	return clone(self)
end

function i3k_sbean.fightnpc_reward_res:decode(is)
	is:popString()
	self.coolTime = is:popNumber()
end

function i3k_sbean.fightnpc_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.coolTime)
end


-- 登录时同步约战NPC信息
i3k_sbean.role_fightnpc = i3k_class("role_fightnpc")
function i3k_sbean.role_fightnpc:ctor()
	self._pname_ = "role_fightnpc"
	--self.info:		DBFightNpc	
end

function i3k_sbean.role_fightnpc:clone()
	return clone(self)
end

function i3k_sbean.role_fightnpc:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBFightNpc)
end

function i3k_sbean.role_fightnpc:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 副本开始
i3k_sbean.role_fightnpcmap_start = i3k_class("role_fightnpcmap_start")
function i3k_sbean.role_fightnpcmap_start:ctor()
	self._pname_ = "role_fightnpcmap_start"
end

function i3k_sbean.role_fightnpcmap_start:decode(is)
	is:popString()
end

function i3k_sbean.role_fightnpcmap_start:encode(os)
	os:pushString(self._pname_)
end


-- 副本结束
i3k_sbean.role_fightnpcmap_end = i3k_class("role_fightnpcmap_end")
function i3k_sbean.role_fightnpcmap_end:ctor()
	self._pname_ = "role_fightnpcmap_end"
end

function i3k_sbean.role_fightnpcmap_end:decode(is)
	is:popString()
end

function i3k_sbean.role_fightnpcmap_end:encode(os)
	os:pushString(self._pname_)
end


-- 副本结果
i3k_sbean.role_fightnpcmap_result = i3k_class("role_fightnpcmap_result")
function i3k_sbean.role_fightnpcmap_result:ctor()
	self._pname_ = "role_fightnpcmap_result"
	--self.curIndex:		int32	
	--self.win:		int32	
end

function i3k_sbean.role_fightnpcmap_result:clone()
	return clone(self)
end

function i3k_sbean.role_fightnpcmap_result:decode(is)
	is:popString()
	self.curIndex = is:popNumber()
	self.win = is:popNumber()
end

function i3k_sbean.role_fightnpcmap_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curIndex)
	os:pushNumber(self.win)
end


-- 分包奖励领取同步协议
i3k_sbean.packetreward_sync_res = i3k_class("packetreward_sync_res")
function i3k_sbean.packetreward_sync_res:ctor()
	self._pname_ = "packetreward_sync_res"
	--self.curIndex:		int32	
end

function i3k_sbean.packetreward_sync_res:clone()
	return clone(self)
end

function i3k_sbean.packetreward_sync_res:decode(is)
	is:popString()
	self.curIndex = is:popNumber()
end

function i3k_sbean.packetreward_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curIndex)
end


-- 分包奖励领取协议
i3k_sbean.packetreward_take_res = i3k_class("packetreward_take_res")
function i3k_sbean.packetreward_take_res:ctor()
	self._pname_ = "packetreward_take_res"
	--self.ok:		int32	
end

function i3k_sbean.packetreward_take_res:clone()
	return clone(self)
end

function i3k_sbean.packetreward_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.packetreward_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 坐骑解锁洗练属性
i3k_sbean.horse_enhance_prop_unlock_res = i3k_class("horse_enhance_prop_unlock_res")
function i3k_sbean.horse_enhance_prop_unlock_res:ctor()
	self._pname_ = "horse_enhance_prop_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.horse_enhance_prop_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.horse_enhance_prop_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horse_enhance_prop_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步当前休闲宠物
i3k_sbean.role_cur_wizard_pet = i3k_class("role_cur_wizard_pet")
function i3k_sbean.role_cur_wizard_pet:ctor()
	self._pname_ = "role_cur_wizard_pet"
	--self.petId:		int32	
end

function i3k_sbean.role_cur_wizard_pet:clone()
	return clone(self)
end

function i3k_sbean.role_cur_wizard_pet:decode(is)
	is:popString()
	self.petId = is:popNumber()
end

function i3k_sbean.role_cur_wizard_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
end


-- 购买休闲宠物时间
i3k_sbean.buy_wizard_pet_time_res = i3k_class("buy_wizard_pet_time_res")
function i3k_sbean.buy_wizard_pet_time_res:ctor()
	self._pname_ = "buy_wizard_pet_time_res"
	--self.ok:		int32	
end

function i3k_sbean.buy_wizard_pet_time_res:clone()
	return clone(self)
end

function i3k_sbean.buy_wizard_pet_time_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.buy_wizard_pet_time_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置当前休闲宠物
i3k_sbean.set_cur_wizard_pet_res = i3k_class("set_cur_wizard_pet_res")
function i3k_sbean.set_cur_wizard_pet_res:ctor()
	self._pname_ = "set_cur_wizard_pet_res"
	--self.ok:		int32	
end

function i3k_sbean.set_cur_wizard_pet_res:clone()
	return clone(self)
end

function i3k_sbean.set_cur_wizard_pet_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.set_cur_wizard_pet_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步当前已解锁头像
i3k_sbean.sync_item_unlock_head_res = i3k_class("sync_item_unlock_head_res")
function i3k_sbean.sync_item_unlock_head_res:ctor()
	self._pname_ = "sync_item_unlock_head_res"
	--self.unlockHeads:		set[int32]	
end

function i3k_sbean.sync_item_unlock_head_res:clone()
	return clone(self)
end

function i3k_sbean.sync_item_unlock_head_res:decode(is)
	is:popString()
	self.unlockHeads = is:popNumberSet()
end

function i3k_sbean.sync_item_unlock_head_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.unlockHeads)
end


-- 宠物，神兵评价
i3k_sbean.socialmsg_send_res = i3k_class("socialmsg_send_res")
function i3k_sbean.socialmsg_send_res:ctor()
	self._pname_ = "socialmsg_send_res"
	--self.commonId:		int32	
end

function i3k_sbean.socialmsg_send_res:clone()
	return clone(self)
end

function i3k_sbean.socialmsg_send_res:decode(is)
	is:popString()
	self.commonId = is:popNumber()
end

function i3k_sbean.socialmsg_send_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.commonId)
end


-- 点赞
i3k_sbean.socialmsg_like_res = i3k_class("socialmsg_like_res")
function i3k_sbean.socialmsg_like_res:ctor()
	self._pname_ = "socialmsg_like_res"
	--self.ok:		int32	
end

function i3k_sbean.socialmsg_like_res:clone()
	return clone(self)
end

function i3k_sbean.socialmsg_like_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.socialmsg_like_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 鄙视
i3k_sbean.socialmsg_dislike_res = i3k_class("socialmsg_dislike_res")
function i3k_sbean.socialmsg_dislike_res:ctor()
	self._pname_ = "socialmsg_dislike_res"
	--self.ok:		int32	
end

function i3k_sbean.socialmsg_dislike_res:clone()
	return clone(self)
end

function i3k_sbean.socialmsg_dislike_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.socialmsg_dislike_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.socialmsg_pageinfo_res = i3k_class("socialmsg_pageinfo_res")
function i3k_sbean.socialmsg_pageinfo_res:ctor()
	self._pname_ = "socialmsg_pageinfo_res"
	--self.comments:		vector[SocialComment]	
end

function i3k_sbean.socialmsg_pageinfo_res:clone()
	return clone(self)
end

function i3k_sbean.socialmsg_pageinfo_res:decode(is)
	is:popString()
	self.comments = is:popList(i3k_sbean.SocialComment)
end

function i3k_sbean.socialmsg_pageinfo_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.comments)
end


-- npc传送功能
i3k_sbean.npc_transfrom_res = i3k_class("npc_transfrom_res")
function i3k_sbean.npc_transfrom_res:ctor()
	self._pname_ = "npc_transfrom_res"
	--self.ok:		int32	
end

function i3k_sbean.npc_transfrom_res:clone()
	return clone(self)
end

function i3k_sbean.npc_transfrom_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.npc_transfrom_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 物品解锁头像
i3k_sbean.unlock_head_res = i3k_class("unlock_head_res")
function i3k_sbean.unlock_head_res:ctor()
	self._pname_ = "unlock_head_res"
	--self.ok:		int32	
end

function i3k_sbean.unlock_head_res:clone()
	return clone(self)
end

function i3k_sbean.unlock_head_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.unlock_head_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解锁头像边框回应
i3k_sbean.unlock_headborder_res = i3k_class("unlock_headborder_res")
function i3k_sbean.unlock_headborder_res:ctor()
	self._pname_ = "unlock_headborder_res"
	--self.ok:		int32	
end

function i3k_sbean.unlock_headborder_res:clone()
	return clone(self)
end

function i3k_sbean.unlock_headborder_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.unlock_headborder_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步已经解锁的边框回应
i3k_sbean.sync_headborder_res = i3k_class("sync_headborder_res")
function i3k_sbean.sync_headborder_res:ctor()
	self._pname_ = "sync_headborder_res"
	--self.ok:		map[int32,int32]	
end

function i3k_sbean.sync_headborder_res:clone()
	return clone(self)
end

function i3k_sbean.sync_headborder_res:decode(is)
	is:popString()
	self.ok = is:popNumberNumberMap()
end

function i3k_sbean.sync_headborder_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.ok)
end


-- 更改装备的头像边框回应
i3k_sbean.change_headborder_res = i3k_class("change_headborder_res")
function i3k_sbean.change_headborder_res:ctor()
	self._pname_ = "change_headborder_res"
	--self.ok:		int32	
end

function i3k_sbean.change_headborder_res:clone()
	return clone(self)
end

function i3k_sbean.change_headborder_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.change_headborder_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 自动解锁头像边框的通知
i3k_sbean.auto_unlock_headborder = i3k_class("auto_unlock_headborder")
function i3k_sbean.auto_unlock_headborder:ctor()
	self._pname_ = "auto_unlock_headborder"
	--self.border:		int32	
end

function i3k_sbean.auto_unlock_headborder:clone()
	return clone(self)
end

function i3k_sbean.auto_unlock_headborder:decode(is)
	is:popString()
	self.border = is:popNumber()
end

function i3k_sbean.auto_unlock_headborder:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.border)
end


-- 开始挑战
i3k_sbean.towerdefence_start_res = i3k_class("towerdefence_start_res")
function i3k_sbean.towerdefence_start_res:ctor()
	self._pname_ = "towerdefence_start_res"
	--self.ok:		int32	
end

function i3k_sbean.towerdefence_start_res:clone()
	return clone(self)
end

function i3k_sbean.towerdefence_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.towerdefence_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 手动翻牌抽奖回应
i3k_sbean.towerdefence_selectcard_res = i3k_class("towerdefence_selectcard_res")
function i3k_sbean.towerdefence_selectcard_res:ctor()
	self._pname_ = "towerdefence_selectcard_res"
	--self.item:		DummyGoods	
end

function i3k_sbean.towerdefence_selectcard_res:clone()
	return clone(self)
end

function i3k_sbean.towerdefence_selectcard_res:decode(is)
	is:popString()
	self.item = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.towerdefence_selectcard_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.item)
end


-- 自动翻牌抽奖
i3k_sbean.role_towerdefence_autocard = i3k_class("role_towerdefence_autocard")
function i3k_sbean.role_towerdefence_autocard:ctor()
	self._pname_ = "role_towerdefence_autocard"
	--self.item:		DummyGoods	
end

function i3k_sbean.role_towerdefence_autocard:clone()
	return clone(self)
end

function i3k_sbean.role_towerdefence_autocard:decode(is)
	is:popString()
	self.item = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.role_towerdefence_autocard:encode(os)
	os:pushString(self._pname_)
	os:push(self.item)
end


-- 副本开始
i3k_sbean.role_towerdefence_start = i3k_class("role_towerdefence_start")
function i3k_sbean.role_towerdefence_start:ctor()
	self._pname_ = "role_towerdefence_start"
	--self.mapID:		int32	
end

function i3k_sbean.role_towerdefence_start:clone()
	return clone(self)
end

function i3k_sbean.role_towerdefence_start:decode(is)
	is:popString()
	self.mapID = is:popNumber()
end

function i3k_sbean.role_towerdefence_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapID)
end


-- 副本结束
i3k_sbean.role_towerdefence_end = i3k_class("role_towerdefence_end")
function i3k_sbean.role_towerdefence_end:ctor()
	self._pname_ = "role_towerdefence_end"
end

function i3k_sbean.role_towerdefence_end:decode(is)
	is:popString()
end

function i3k_sbean.role_towerdefence_end:encode(os)
	os:pushString(self._pname_)
end


-- 副本结果
i3k_sbean.role_towerdefence_result = i3k_class("role_towerdefence_result")
function i3k_sbean.role_towerdefence_result:ctor()
	self._pname_ = "role_towerdefence_result"
	--self.score:		int32	
	--self.count:		int32	
	--self.useTime:		int32	
	--self.rewards:		MapRewards	
end

function i3k_sbean.role_towerdefence_result:clone()
	return clone(self)
end

function i3k_sbean.role_towerdefence_result:decode(is)
	is:popString()
	self.score = is:popNumber()
	self.count = is:popNumber()
	self.useTime = is:popNumber()
	self.rewards = is:pop(i3k_sbean.MapRewards)
end

function i3k_sbean.role_towerdefence_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
	os:pushNumber(self.count)
	os:pushNumber(self.useTime)
	os:push(self.rewards)
end


-- 同步守护副本信息
i3k_sbean.role_towerdefence_info = i3k_class("role_towerdefence_info")
function i3k_sbean.role_towerdefence_info:ctor()
	self._pname_ = "role_towerdefence_info"
	--self.score:		int32	
	--self.count:		int32	
end

function i3k_sbean.role_towerdefence_info:clone()
	return clone(self)
end

function i3k_sbean.role_towerdefence_info:decode(is)
	is:popString()
	self.score = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.role_towerdefence_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
	os:pushNumber(self.count)
end


-- 开始NPC副本
i3k_sbean.start_npc_map_res = i3k_class("start_npc_map_res")
function i3k_sbean.start_npc_map_res:ctor()
	self._pname_ = "start_npc_map_res"
	--self.ok:		int32	
end

function i3k_sbean.start_npc_map_res:clone()
	return clone(self)
end

function i3k_sbean.start_npc_map_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.start_npc_map_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步NPC副本次数
i3k_sbean.role_day_npc_map_times = i3k_class("role_day_npc_map_times")
function i3k_sbean.role_day_npc_map_times:ctor()
	self._pname_ = "role_day_npc_map_times"
	--self.times:		map[int32, int32]	
end

function i3k_sbean.role_day_npc_map_times:clone()
	return clone(self)
end

function i3k_sbean.role_day_npc_map_times:decode(is)
	is:popString()
	self.times = is:popNumberNumberMap()
end

function i3k_sbean.role_day_npc_map_times:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.times)
end


-- 参与NPC祈福
i3k_sbean.join_npc_pray_res = i3k_class("join_npc_pray_res")
function i3k_sbean.join_npc_pray_res:ctor()
	self._pname_ = "join_npc_pray_res"
	--self.ok:		int32	
	--self.drop:		DummyGoods	
end

function i3k_sbean.join_npc_pray_res:clone()
	return clone(self)
end

function i3k_sbean.join_npc_pray_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drop = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.join_npc_pray_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.drop)
end


-- 同步NPC祈福次数
i3k_sbean.role_day_npc_pray_times = i3k_class("role_day_npc_pray_times")
function i3k_sbean.role_day_npc_pray_times:ctor()
	self._pname_ = "role_day_npc_pray_times"
	--self.times:		map[int32, int32]	
end

function i3k_sbean.role_day_npc_pray_times:clone()
	return clone(self)
end

function i3k_sbean.role_day_npc_pray_times:decode(is)
	is:popString()
	self.times = is:popNumberNumberMap()
end

function i3k_sbean.role_day_npc_pray_times:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.times)
end


-- 解锁私人仓库
i3k_sbean.unlock_private_warehouse_res = i3k_class("unlock_private_warehouse_res")
function i3k_sbean.unlock_private_warehouse_res:ctor()
	self._pname_ = "unlock_private_warehouse_res"
	--self.ok:		int32	
end

function i3k_sbean.unlock_private_warehouse_res:clone()
	return clone(self)
end

function i3k_sbean.unlock_private_warehouse_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.unlock_private_warehouse_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解锁家园仓库
i3k_sbean.unlock_homeland_warehouse_res = i3k_class("unlock_homeland_warehouse_res")
function i3k_sbean.unlock_homeland_warehouse_res:ctor()
	self._pname_ = "unlock_homeland_warehouse_res"
	--self.ok:		int32	
end

function i3k_sbean.unlock_homeland_warehouse_res:clone()
	return clone(self)
end

function i3k_sbean.unlock_homeland_warehouse_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.unlock_homeland_warehouse_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 锁定强化序号
i3k_sbean.look_strength_heirloom_res = i3k_class("look_strength_heirloom_res")
function i3k_sbean.look_strength_heirloom_res:ctor()
	self._pname_ = "look_strength_heirloom_res"
	--self.ok:		int32	
end

function i3k_sbean.look_strength_heirloom_res:clone()
	return clone(self)
end

function i3k_sbean.look_strength_heirloom_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.look_strength_heirloom_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 强化传家宝
i3k_sbean.strength_heirloom_res = i3k_class("strength_heirloom_res")
function i3k_sbean.strength_heirloom_res:ctor()
	self._pname_ = "strength_heirloom_res"
	--self.ok:		int32	
end

function i3k_sbean.strength_heirloom_res:clone()
	return clone(self)
end

function i3k_sbean.strength_heirloom_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.strength_heirloom_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 摇一摇
i3k_sbean.exp_tree_get_drop_res = i3k_class("exp_tree_get_drop_res")
function i3k_sbean.exp_tree_get_drop_res:ctor()
	self._pname_ = "exp_tree_get_drop_res"
	--self.ok:		int32	
	--self.drop:		DummyGoods	
end

function i3k_sbean.exp_tree_get_drop_res:clone()
	return clone(self)
end

function i3k_sbean.exp_tree_get_drop_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drop = is:pop(i3k_sbean.DummyGoods)
end

function i3k_sbean.exp_tree_get_drop_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.drop)
end


-- 浇水
i3k_sbean.exp_tree_watering_res = i3k_class("exp_tree_watering_res")
function i3k_sbean.exp_tree_watering_res:ctor()
	self._pname_ = "exp_tree_watering_res"
	--self.ok:		int32	
end

function i3k_sbean.exp_tree_watering_res:clone()
	return clone(self)
end

function i3k_sbean.exp_tree_watering_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.exp_tree_watering_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 获取成熟奖励
i3k_sbean.exp_tree_mature_reward_res = i3k_class("exp_tree_mature_reward_res")
function i3k_sbean.exp_tree_mature_reward_res:ctor()
	self._pname_ = "exp_tree_mature_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.exp_tree_mature_reward_res:clone()
	return clone(self)
end

function i3k_sbean.exp_tree_mature_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.exp_tree_mature_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步经验果树信息
i3k_sbean.exp_tree_sync_res = i3k_class("exp_tree_sync_res")
function i3k_sbean.exp_tree_sync_res:ctor()
	self._pname_ = "exp_tree_sync_res"
	--self.info:		DBExpTree	
end

function i3k_sbean.exp_tree_sync_res:clone()
	return clone(self)
end

function i3k_sbean.exp_tree_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBExpTree)
end

function i3k_sbean.exp_tree_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 登录同步经验果树参与次数
i3k_sbean.role_exp_tree_times = i3k_class("role_exp_tree_times")
function i3k_sbean.role_exp_tree_times:ctor()
	self._pname_ = "role_exp_tree_times"
	--self.info:		DBRoleExpTree	
end

function i3k_sbean.role_exp_tree_times:clone()
	return clone(self)
end

function i3k_sbean.role_exp_tree_times:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleExpTree)
end

function i3k_sbean.role_exp_tree_times:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 魂玉解封
i3k_sbean.seal_dispelling_res = i3k_class("seal_dispelling_res")
function i3k_sbean.seal_dispelling_res:ctor()
	self._pname_ = "seal_dispelling_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_dispelling_res:clone()
	return clone(self)
end

function i3k_sbean.seal_dispelling_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_dispelling_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 魂玉解封晋级加速
i3k_sbean.seal_awaken_accelerate_res = i3k_class("seal_awaken_accelerate_res")
function i3k_sbean.seal_awaken_accelerate_res:ctor()
	self._pname_ = "seal_awaken_accelerate_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_awaken_accelerate_res:clone()
	return clone(self)
end

function i3k_sbean.seal_awaken_accelerate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_awaken_accelerate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 魂玉解封晋级
i3k_sbean.seal_awaken_res = i3k_class("seal_awaken_res")
function i3k_sbean.seal_awaken_res:ctor()
	self._pname_ = "seal_awaken_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_awaken_res:clone()
	return clone(self)
end

function i3k_sbean.seal_awaken_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_awaken_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步魂玉解封信息
i3k_sbean.role_seal_awaken = i3k_class("role_seal_awaken")
function i3k_sbean.role_seal_awaken:ctor()
	self._pname_ = "role_seal_awaken"
	--self.info:		DBSealAwaken	
end

function i3k_sbean.role_seal_awaken:clone()
	return clone(self)
end

function i3k_sbean.role_seal_awaken:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBSealAwaken)
end

function i3k_sbean.role_seal_awaken:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 进入城战成员同步
i3k_sbean.city_war_sect_roles_sync_res = i3k_class("city_war_sect_roles_sync_res")
function i3k_sbean.city_war_sect_roles_sync_res:ctor()
	self._pname_ = "city_war_sect_roles_sync_res"
	--self.roles:		map[int32, RoleOverview]	
end

function i3k_sbean.city_war_sect_roles_sync_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_sect_roles_sync_res:decode(is)
	is:popString()
	self.roles = is:popNumberMap(i3k_sbean.RoleOverview)
end

function i3k_sbean.city_war_sect_roles_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.roles)
end


i3k_sbean.city_war_info_sync_res = i3k_class("city_war_info_sync_res")
function i3k_sbean.city_war_info_sync_res:ctor()
	self._pname_ = "city_war_info_sync_res"
	--self.citySign:		map[int32, int32]	
	--self.cityBid:		map[int32, int32]	
	--self.cityPve:		map[int32, int32]	
	--self.cityPvp:		map[int32, int32]	
	--self.delayInfo:		map[int32, int32]	
	--self.kings:		map[int32, SectOverview]	
	--self.pveKings:		map[int32, SectOverview]	
end

function i3k_sbean.city_war_info_sync_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_info_sync_res:decode(is)
	is:popString()
	self.citySign = is:popNumberNumberMap()
	self.cityBid = is:popNumberNumberMap()
	self.cityPve = is:popNumberNumberMap()
	self.cityPvp = is:popNumberNumberMap()
	self.delayInfo = is:popNumberNumberMap()
	self.kings = is:popNumberMap(i3k_sbean.SectOverview)
	self.pveKings = is:popNumberMap(i3k_sbean.SectOverview)
end

function i3k_sbean.city_war_info_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.citySign)
	os:pushNumberNumberMap(self.cityBid)
	os:pushNumberNumberMap(self.cityPve)
	os:pushNumberNumberMap(self.cityPvp)
	os:pushNumberNumberMap(self.delayInfo)
	os:pushNumberMap(self.kings)
	os:pushNumberMap(self.pveKings)
end


-- 获取城池报名信息（citySign：表示每个城是否有帮派报名，0没有，1有，2本帮已报, delayInfo:每个城的延迟时间）
i3k_sbean.city_war_sign_info_res = i3k_class("city_war_sign_info_res")
function i3k_sbean.city_war_sign_info_res:ctor()
	self._pname_ = "city_war_sign_info_res"
	--self.citySign:		map[int32, int32]	
	--self.delayInfo:		map[int32, int32]	
	--self.dragonCrystal:		int32	
end

function i3k_sbean.city_war_sign_info_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_sign_info_res:decode(is)
	is:popString()
	self.citySign = is:popNumberNumberMap()
	self.delayInfo = is:popNumberNumberMap()
	self.dragonCrystal = is:popNumber()
end

function i3k_sbean.city_war_sign_info_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.citySign)
	os:pushNumberNumberMap(self.delayInfo)
	os:pushNumber(self.dragonCrystal)
end


-- 帮派报名
i3k_sbean.city_war_sect_sign_res = i3k_class("city_war_sect_sign_res")
function i3k_sbean.city_war_sect_sign_res:ctor()
	self._pname_ = "city_war_sect_sign_res"
	--self.ok:		int32	
end

function i3k_sbean.city_war_sect_sign_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_sect_sign_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.city_war_sect_sign_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 获取帮派竞标信息（cityBid：0无主城池，1没有帮派竞标，2有帮派竞标， 3本帮派已竞标； price：上次竞标出价； bidTimes：已出价次数）
i3k_sbean.city_war_bid_info_res = i3k_class("city_war_bid_info_res")
function i3k_sbean.city_war_bid_info_res:ctor()
	self._pname_ = "city_war_bid_info_res"
	--self.cityBid:		map[int32, int32]	
	--self.kings:		map[int32, SectOverview]	
	--self.price:		int32	
	--self.bidTimes:		int32	
	--self.dragonCrystal:		int32	
end

function i3k_sbean.city_war_bid_info_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_bid_info_res:decode(is)
	is:popString()
	self.cityBid = is:popNumberNumberMap()
	self.kings = is:popNumberMap(i3k_sbean.SectOverview)
	self.price = is:popNumber()
	self.bidTimes = is:popNumber()
	self.dragonCrystal = is:popNumber()
end

function i3k_sbean.city_war_bid_info_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.cityBid)
	os:pushNumberMap(self.kings)
	os:pushNumber(self.price)
	os:pushNumber(self.bidTimes)
	os:pushNumber(self.dragonCrystal)
end


-- 帮派竞标
i3k_sbean.city_war_sect_bid_res = i3k_class("city_war_sect_bid_res")
function i3k_sbean.city_war_sect_bid_res:ctor()
	self._pname_ = "city_war_sect_bid_res"
	--self.ok:		int32	
end

function i3k_sbean.city_war_sect_bid_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_sect_bid_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.city_war_sect_bid_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 竞标结果(ok：-1表示结果正在计算，-100超时；result:每个城帮派竞标展示； cityInfo：0无主城池，1没有帮派竞标，2有帮派竞标，3本帮派已中标 )
i3k_sbean.city_war_bid_result_res = i3k_class("city_war_bid_result_res")
function i3k_sbean.city_war_bid_result_res:ctor()
	self._pname_ = "city_war_bid_result_res"
	--self.ok:		int32	
	--self.result:		map[int32, CityWarBidRank]	
	--self.cityInfo:		map[int32,int32]	
end

function i3k_sbean.city_war_bid_result_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_bid_result_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.result = is:popNumberMap(i3k_sbean.CityWarBidRank)
	self.cityInfo = is:popNumberNumberMap()
end

function i3k_sbean.city_war_bid_result_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberMap(self.result)
	os:pushNumberNumberMap(self.cityInfo)
end


-- 同步城池归属者
i3k_sbean.city_war_current_kings_res = i3k_class("city_war_current_kings_res")
function i3k_sbean.city_war_current_kings_res:ctor()
	self._pname_ = "city_war_current_kings_res"
	--self.kings:		map[int32, SectOverview]	
end

function i3k_sbean.city_war_current_kings_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_current_kings_res:decode(is)
	is:popString()
	self.kings = is:popNumberMap(i3k_sbean.SectOverview)
end

function i3k_sbean.city_war_current_kings_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.kings)
end


-- 城战开始
i3k_sbean.city_war_start = i3k_class("city_war_start")
function i3k_sbean.city_war_start:ctor()
	self._pname_ = "city_war_start"
end

function i3k_sbean.city_war_start:decode(is)
	is:popString()
end

function i3k_sbean.city_war_start:encode(os)
	os:pushString(self._pname_)
end


-- 城战结束
i3k_sbean.city_war_end = i3k_class("city_war_end")
function i3k_sbean.city_war_end:ctor()
	self._pname_ = "city_war_end"
end

function i3k_sbean.city_war_end:decode(is)
	is:popString()
end

function i3k_sbean.city_war_end:encode(os)
	os:pushString(self._pname_)
end


-- 城战结果
i3k_sbean.city_war_result = i3k_class("city_war_result")
function i3k_sbean.city_war_result:ctor()
	self._pname_ = "city_war_result"
	--self.killer:		RoleOverview	
	--self.sect:		SectOverview	
	--self.useTime:		int32	
	--self.cityId:		int32	
	--self.isPvp:		int32	
end

function i3k_sbean.city_war_result:clone()
	return clone(self)
end

function i3k_sbean.city_war_result:decode(is)
	is:popString()
	self.killer = is:pop(i3k_sbean.RoleOverview)
	self.sect = is:pop(i3k_sbean.SectOverview)
	self.useTime = is:popNumber()
	self.cityId = is:popNumber()
	self.isPvp = is:popNumber()
end

function i3k_sbean.city_war_result:encode(os)
	os:pushString(self._pname_)
	os:push(self.killer)
	os:push(self.sect)
	os:pushNumber(self.useTime)
	os:pushNumber(self.cityId)
	os:pushNumber(self.isPvp)
end


-- 进入城战
i3k_sbean.city_war_enter_res = i3k_class("city_war_enter_res")
function i3k_sbean.city_war_enter_res:ctor()
	self._pname_ = "city_war_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.city_war_enter_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.city_war_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开启城市之光
i3k_sbean.city_light_open_res = i3k_class("city_light_open_res")
function i3k_sbean.city_light_open_res:ctor()
	self._pname_ = "city_light_open_res"
	--self.ok:		int32	
end

function i3k_sbean.city_light_open_res:clone()
	return clone(self)
end

function i3k_sbean.city_light_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.city_light_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 城市之光同步
i3k_sbean.city_light_login_sync = i3k_class("city_light_login_sync")
function i3k_sbean.city_light_login_sync:ctor()
	self._pname_ = "city_light_login_sync"
	--self.info:		DBRoleCityLight	
end

function i3k_sbean.city_light_login_sync:clone()
	return clone(self)
end

function i3k_sbean.city_light_login_sync:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleCityLight)
end

function i3k_sbean.city_light_login_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 城市之光同步
i3k_sbean.city_light_sync_res = i3k_class("city_light_sync_res")
function i3k_sbean.city_light_sync_res:ctor()
	self._pname_ = "city_light_sync_res"
	--self.info:		DBRoleCityLight	
	--self.localCitys:		set[int32]	
end

function i3k_sbean.city_light_sync_res:clone()
	return clone(self)
end

function i3k_sbean.city_light_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleCityLight)
	self.localCitys = is:popNumberSet()
end

function i3k_sbean.city_light_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumberSet(self.localCitys)
end


-- 攻城车变身
i3k_sbean.city_war_use_car_res = i3k_class("city_war_use_car_res")
function i3k_sbean.city_war_use_car_res:ctor()
	self._pname_ = "city_war_use_car_res"
	--self.ok:		int32	
end

function i3k_sbean.city_war_use_car_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_use_car_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.city_war_use_car_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 攻城车取消变身
i3k_sbean.city_war_cancel_car_res = i3k_class("city_war_cancel_car_res")
function i3k_sbean.city_war_cancel_car_res:ctor()
	self._pname_ = "city_war_cancel_car_res"
	--self.ok:		int32	
end

function i3k_sbean.city_war_cancel_car_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_cancel_car_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.city_war_cancel_car_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 箭塔修复
i3k_sbean.city_war_tower_fix_res = i3k_class("city_war_tower_fix_res")
function i3k_sbean.city_war_tower_fix_res:ctor()
	self._pname_ = "city_war_tower_fix_res"
	--self.ok:		int32	
end

function i3k_sbean.city_war_tower_fix_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_tower_fix_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.city_war_tower_fix_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 城战传送
i3k_sbean.city_war_transform_res = i3k_class("city_war_transform_res")
function i3k_sbean.city_war_transform_res:ctor()
	self._pname_ = "city_war_transform_res"
	--self.ok:		int32	
end

function i3k_sbean.city_war_transform_res:clone()
	return clone(self)
end

function i3k_sbean.city_war_transform_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.city_war_transform_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派分堂信息同步
i3k_sbean.sect_fight_group_sync_res = i3k_class("sect_fight_group_sync_res")
function i3k_sbean.sect_fight_group_sync_res:ctor()
	self._pname_ = "sect_fight_group_sync_res"
	--self.fightGroups:		map[int32, DBSectFightGroup]	
end

function i3k_sbean.sect_fight_group_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_sync_res:decode(is)
	is:popString()
	self.fightGroups = is:popNumberMap(i3k_sbean.DBSectFightGroup)
end

function i3k_sbean.sect_fight_group_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.fightGroups)
end


-- 创建帮派分堂
i3k_sbean.sect_fight_group_create_res = i3k_class("sect_fight_group_create_res")
function i3k_sbean.sect_fight_group_create_res:ctor()
	self._pname_ = "sect_fight_group_create_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_create_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_create_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_create_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解散帮派分堂
i3k_sbean.sect_fight_group_dismiss_res = i3k_class("sect_fight_group_dismiss_res")
function i3k_sbean.sect_fight_group_dismiss_res:ctor()
	self._pname_ = "sect_fight_group_dismiss_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_dismiss_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_dismiss_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_dismiss_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 退出帮派分堂
i3k_sbean.sect_fight_group_exit_res = i3k_class("sect_fight_group_exit_res")
function i3k_sbean.sect_fight_group_exit_res:ctor()
	self._pname_ = "sect_fight_group_exit_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_exit_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_exit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_exit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 申请加入帮派分堂
i3k_sbean.sect_fight_group_apply_res = i3k_class("sect_fight_group_apply_res")
function i3k_sbean.sect_fight_group_apply_res:ctor()
	self._pname_ = "sect_fight_group_apply_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_apply_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_apply_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_apply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同意加入帮派分堂
i3k_sbean.sect_fight_group_accept_res = i3k_class("sect_fight_group_accept_res")
function i3k_sbean.sect_fight_group_accept_res:ctor()
	self._pname_ = "sect_fight_group_accept_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_accept_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_accept_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_accept_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 拒绝加入帮派分堂
i3k_sbean.sect_fight_group_refuse_res = i3k_class("sect_fight_group_refuse_res")
function i3k_sbean.sect_fight_group_refuse_res:ctor()
	self._pname_ = "sect_fight_group_refuse_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_refuse_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_refuse_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_refuse_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 修改分堂堂主
i3k_sbean.sect_fight_group_change_leader_res = i3k_class("sect_fight_group_change_leader_res")
function i3k_sbean.sect_fight_group_change_leader_res:ctor()
	self._pname_ = "sect_fight_group_change_leader_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_change_leader_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_change_leader_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_change_leader_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 踢出帮派分堂
i3k_sbean.sect_fight_group_kick_res = i3k_class("sect_fight_group_kick_res")
function i3k_sbean.sect_fight_group_kick_res:ctor()
	self._pname_ = "sect_fight_group_kick_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_kick_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_kick_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_kick_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派分堂改名
i3k_sbean.sect_fight_group_change_name_res = i3k_class("sect_fight_group_change_name_res")
function i3k_sbean.sect_fight_group_change_name_res:ctor()
	self._pname_ = "sect_fight_group_change_name_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_change_name_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_change_name_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_change_name_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 邀请其他玩家进入分堂协议
i3k_sbean.sect_fight_group_invite_res = i3k_class("sect_fight_group_invite_res")
function i3k_sbean.sect_fight_group_invite_res:ctor()
	self._pname_ = "sect_fight_group_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_invite_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 接收到其他玩家分堂邀请后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
i3k_sbean.sect_fight_group_invitedby_res = i3k_class("sect_fight_group_invitedby_res")
function i3k_sbean.sect_fight_group_invitedby_res:ctor()
	self._pname_ = "sect_fight_group_invitedby_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_fight_group_invitedby_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_invitedby_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_fight_group_invitedby_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 接收到其他玩家分堂邀请后推送
i3k_sbean.sect_fight_group_invited_forward = i3k_class("sect_fight_group_invited_forward")
function i3k_sbean.sect_fight_group_invited_forward:ctor()
	self._pname_ = "sect_fight_group_invited_forward"
	--self.roleId:		int32	
	--self.roleName:		string	
	--self.groupId:		int32	
	--self.groupName:		string	
end

function i3k_sbean.sect_fight_group_invited_forward:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_invited_forward:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
	self.groupId = is:popNumber()
	self.groupName = is:popString()
end

function i3k_sbean.sect_fight_group_invited_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
	os:pushNumber(self.groupId)
	os:pushString(self.groupName)
end


-- 分堂邀请回应正忙
i3k_sbean.sect_fight_group_invite_busy = i3k_class("sect_fight_group_invite_busy")
function i3k_sbean.sect_fight_group_invite_busy:ctor()
	self._pname_ = "sect_fight_group_invite_busy"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.sect_fight_group_invite_busy:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_invite_busy:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.sect_fight_group_invite_busy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 分堂邀请回应拒绝
i3k_sbean.sect_fight_group_invite_refuse = i3k_class("sect_fight_group_invite_refuse")
function i3k_sbean.sect_fight_group_invite_refuse:ctor()
	self._pname_ = "sect_fight_group_invite_refuse"
	--self.roleId:		int32	
	--self.roleName:		string	
end

function i3k_sbean.sect_fight_group_invite_refuse:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_invite_refuse:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.sect_fight_group_invite_refuse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushString(self.roleName)
end


-- 分堂申请列表同步
i3k_sbean.sect_fight_group_apply_sync_res = i3k_class("sect_fight_group_apply_sync_res")
function i3k_sbean.sect_fight_group_apply_sync_res:ctor()
	self._pname_ = "sect_fight_group_apply_sync_res"
	--self.applys:		set[int32]	
end

function i3k_sbean.sect_fight_group_apply_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_apply_sync_res:decode(is)
	is:popString()
	self.applys = is:popNumberSet()
end

function i3k_sbean.sect_fight_group_apply_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.applys)
end


-- 分堂申请推送
i3k_sbean.sect_fight_group_apply_push = i3k_class("sect_fight_group_apply_push")
function i3k_sbean.sect_fight_group_apply_push:ctor()
	self._pname_ = "sect_fight_group_apply_push"
end

function i3k_sbean.sect_fight_group_apply_push:decode(is)
	is:popString()
end

function i3k_sbean.sect_fight_group_apply_push:encode(os)
	os:pushString(self._pname_)
end


-- 分堂报名帮派战
i3k_sbean.sect_war_sign_res = i3k_class("sect_war_sign_res")
function i3k_sbean.sect_war_sign_res:ctor()
	self._pname_ = "sect_war_sign_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_war_sign_res:clone()
	return clone(self)
end

function i3k_sbean.sect_war_sign_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_war_sign_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 分堂取消报名
i3k_sbean.sect_war_quit_res = i3k_class("sect_war_quit_res")
function i3k_sbean.sect_war_quit_res:ctor()
	self._pname_ = "sect_war_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_war_quit_res:clone()
	return clone(self)
end

function i3k_sbean.sect_war_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_war_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 分堂当前帮派战状态同步
i3k_sbean.sect_fight_group_cur_status_res = i3k_class("sect_fight_group_cur_status_res")
function i3k_sbean.sect_fight_group_cur_status_res:ctor()
	self._pname_ = "sect_fight_group_cur_status_res"
	--self.status:		SectWarStatus	
end

function i3k_sbean.sect_fight_group_cur_status_res:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_cur_status_res:decode(is)
	is:popString()
	self.status = is:pop(i3k_sbean.SectWarStatus)
end

function i3k_sbean.sect_fight_group_cur_status_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.status)
end


-- 帮派战开始推送
i3k_sbean.sect_war_start_push = i3k_class("sect_war_start_push")
function i3k_sbean.sect_war_start_push:ctor()
	self._pname_ = "sect_war_start_push"
end

function i3k_sbean.sect_war_start_push:decode(is)
	is:popString()
end

function i3k_sbean.sect_war_start_push:encode(os)
	os:pushString(self._pname_)
end


-- 进入帮战地图
i3k_sbean.enter_sectwar_res = i3k_class("enter_sectwar_res")
function i3k_sbean.enter_sectwar_res:ctor()
	self._pname_ = "enter_sectwar_res"
	--self.ok:		int32	
end

function i3k_sbean.enter_sectwar_res:clone()
	return clone(self)
end

function i3k_sbean.enter_sectwar_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.enter_sectwar_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知客户端帮派战开始
i3k_sbean.role_sectwar_start = i3k_class("role_sectwar_start")
function i3k_sbean.role_sectwar_start:ctor()
	self._pname_ = "role_sectwar_start"
end

function i3k_sbean.role_sectwar_start:decode(is)
	is:popString()
end

function i3k_sbean.role_sectwar_start:encode(os)
	os:pushString(self._pname_)
end


-- 通知客户端帮派战结束
i3k_sbean.role_sectwar_end = i3k_class("role_sectwar_end")
function i3k_sbean.role_sectwar_end:ctor()
	self._pname_ = "role_sectwar_end"
end

function i3k_sbean.role_sectwar_end:decode(is)
	is:popString()
end

function i3k_sbean.role_sectwar_end:encode(os)
	os:pushString(self._pname_)
end


-- 帮派战结束弹窗
i3k_sbean.role_sectwar_result = i3k_class("role_sectwar_result")
function i3k_sbean.role_sectwar_result:ctor()
	self._pname_ = "role_sectwar_result"
	--self.white:		vector[SectWarOverview]	
	--self.black:		vector[SectWarOverview]	
	--self.whiteGroup:		SectFightGroupOverview	
	--self.blackGroup:		SectFightGroupOverview	
	--self.winForceType:		int32	
end

function i3k_sbean.role_sectwar_result:clone()
	return clone(self)
end

function i3k_sbean.role_sectwar_result:decode(is)
	is:popString()
	self.white = is:popList(i3k_sbean.SectWarOverview)
	self.black = is:popList(i3k_sbean.SectWarOverview)
	self.whiteGroup = is:pop(i3k_sbean.SectFightGroupOverview)
	self.blackGroup = is:pop(i3k_sbean.SectFightGroupOverview)
	self.winForceType = is:popNumber()
end

function i3k_sbean.role_sectwar_result:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.white)
	os:pushList(self.black)
	os:push(self.whiteGroup)
	os:push(self.blackGroup)
	os:pushNumber(self.winForceType)
end


-- 变性请求
i3k_sbean.role_change_gender_res = i3k_class("role_change_gender_res")
function i3k_sbean.role_change_gender_res:ctor()
	self._pname_ = "role_change_gender_res"
	--self.ok:		int32	
end

function i3k_sbean.role_change_gender_res:clone()
	return clone(self)
end

function i3k_sbean.role_change_gender_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_change_gender_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 发起切磋邀请
i3k_sbean.role_single_invite_res = i3k_class("role_single_invite_res")
function i3k_sbean.role_single_invite_res:ctor()
	self._pname_ = "role_single_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.role_single_invite_res:clone()
	return clone(self)
end

function i3k_sbean.role_single_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_single_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 收到切磋邀请
i3k_sbean.role_single_invite_forward = i3k_class("role_single_invite_forward")
function i3k_sbean.role_single_invite_forward:ctor()
	self._pname_ = "role_single_invite_forward"
	--self.inviter:		RoleOverview	
	--self.hide:		bool	
end

function i3k_sbean.role_single_invite_forward:clone()
	return clone(self)
end

function i3k_sbean.role_single_invite_forward:decode(is)
	is:popString()
	self.inviter = is:pop(i3k_sbean.RoleOverview)
	self.hide = is:popBool()
end

function i3k_sbean.role_single_invite_forward:encode(os)
	os:pushString(self._pname_)
	os:push(self.inviter)
	os:pushBool(self.hide)
end


-- 切磋回应
i3k_sbean.role_single_response_res = i3k_class("role_single_response_res")
function i3k_sbean.role_single_response_res:ctor()
	self._pname_ = "role_single_response_res"
	--self.ok:		int32	
end

function i3k_sbean.role_single_response_res:clone()
	return clone(self)
end

function i3k_sbean.role_single_response_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_single_response_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 切磋邀请结果(-1: 拒绝 -2:正忙 )
i3k_sbean.role_single_invite_result = i3k_class("role_single_invite_result")
function i3k_sbean.role_single_invite_result:ctor()
	self._pname_ = "role_single_invite_result"
	--self.result:		int32	
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.role_single_invite_result:clone()
	return clone(self)
end

function i3k_sbean.role_single_invite_result:decode(is)
	is:popString()
	self.result = is:popNumber()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.role_single_invite_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.result)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 切磋结果
i3k_sbean.single_map_result = i3k_class("single_map_result")
function i3k_sbean.single_map_result:ctor()
	self._pname_ = "single_map_result"
	--self.win:		int32	
	--self.enemy:		RoleOverview	
end

function i3k_sbean.single_map_result:clone()
	return clone(self)
end

function i3k_sbean.single_map_result:decode(is)
	is:popString()
	self.win = is:popNumber()
	self.enemy = is:pop(i3k_sbean.RoleOverview)
end

function i3k_sbean.single_map_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.win)
	os:push(self.enemy)
end


-- 切磋开始
i3k_sbean.single_map_start = i3k_class("single_map_start")
function i3k_sbean.single_map_start:ctor()
	self._pname_ = "single_map_start"
end

function i3k_sbean.single_map_start:decode(is)
	is:popString()
end

function i3k_sbean.single_map_start:encode(os)
	os:pushString(self._pname_)
end


-- 切磋结束
i3k_sbean.single_map_end = i3k_class("single_map_end")
function i3k_sbean.single_map_end:ctor()
	self._pname_ = "single_map_end"
end

function i3k_sbean.single_map_end:decode(is)
	is:popString()
end

function i3k_sbean.single_map_end:encode(os)
	os:pushString(self._pname_)
end


-- 五绝秘藏是否开启同步
i3k_sbean.five_goals_isopen = i3k_class("five_goals_isopen")
function i3k_sbean.five_goals_isopen:ctor()
	self._pname_ = "five_goals_isopen"
	--self.isOpen:		int32	
end

function i3k_sbean.five_goals_isopen:clone()
	return clone(self)
end

function i3k_sbean.five_goals_isopen:decode(is)
	is:popString()
	self.isOpen = is:popNumber()
end

function i3k_sbean.five_goals_isopen:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isOpen)
end


-- 五绝秘藏同步
i3k_sbean.five_goals_sync_res = i3k_class("five_goals_sync_res")
function i3k_sbean.five_goals_sync_res:ctor()
	self._pname_ = "five_goals_sync_res"
	--self.type:		int32	
	--self.isOpen:		int32	
	--self.info:		FiveGoalsInfo	
end

function i3k_sbean.five_goals_sync_res:clone()
	return clone(self)
end

function i3k_sbean.five_goals_sync_res:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.isOpen = is:popNumber()
	self.info = is:pop(i3k_sbean.FiveGoalsInfo)
end

function i3k_sbean.five_goals_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.isOpen)
	os:push(self.info)
end


-- 五绝秘藏领取奖励
i3k_sbean.five_goals_take_reward_res = i3k_class("five_goals_take_reward_res")
function i3k_sbean.five_goals_take_reward_res:ctor()
	self._pname_ = "five_goals_take_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.five_goals_take_reward_res:clone()
	return clone(self)
end

function i3k_sbean.five_goals_take_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.five_goals_take_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用召回码
i3k_sbean.use_regression_code_res = i3k_class("use_regression_code_res")
function i3k_sbean.use_regression_code_res:ctor()
	self._pname_ = "use_regression_code_res"
	--self.ok:		int32	
end

function i3k_sbean.use_regression_code_res:clone()
	return clone(self)
end

function i3k_sbean.use_regression_code_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.use_regression_code_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取积分奖励
i3k_sbean.get_score_reward_res = i3k_class("get_score_reward_res")
function i3k_sbean.get_score_reward_res:ctor()
	self._pname_ = "get_score_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.get_score_reward_res:clone()
	return clone(self)
end

function i3k_sbean.get_score_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.get_score_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步召回信息
i3k_sbean.sync_regression_res = i3k_class("sync_regression_res")
function i3k_sbean.sync_regression_res:ctor()
	self._pname_ = "sync_regression_res"
	--self.info:		DBRegression	
	--self.code:		string	
end

function i3k_sbean.sync_regression_res:clone()
	return clone(self)
end

function i3k_sbean.sync_regression_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRegression)
	self.code = is:popString()
end

function i3k_sbean.sync_regression_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushString(self.code)
end


-- 领取登陆奖励
i3k_sbean.take_regression_login_gift_res = i3k_class("take_regression_login_gift_res")
function i3k_sbean.take_regression_login_gift_res:ctor()
	self._pname_ = "take_regression_login_gift_res"
	--self.ok:		int32	
end

function i3k_sbean.take_regression_login_gift_res:clone()
	return clone(self)
end

function i3k_sbean.take_regression_login_gift_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_regression_login_gift_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 购买每日折扣
i3k_sbean.buy_regression_daily_discount_res = i3k_class("buy_regression_daily_discount_res")
function i3k_sbean.buy_regression_daily_discount_res:ctor()
	self._pname_ = "buy_regression_daily_discount_res"
	--self.ok:		int32	
end

function i3k_sbean.buy_regression_daily_discount_res:clone()
	return clone(self)
end

function i3k_sbean.buy_regression_daily_discount_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.buy_regression_daily_discount_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步是否为老玩家
i3k_sbean.role_is_regression = i3k_class("role_is_regression")
function i3k_sbean.role_is_regression:ctor()
	self._pname_ = "role_is_regression"
	--self.regressionLogin:		int32	
end

function i3k_sbean.role_is_regression:clone()
	return clone(self)
end

function i3k_sbean.role_is_regression:decode(is)
	is:popString()
	self.regressionLogin = is:popNumber()
end

function i3k_sbean.role_is_regression:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.regressionLogin)
end


-- 职业转换请求
i3k_sbean.change_role_profession_res = i3k_class("change_role_profession_res")
function i3k_sbean.change_role_profession_res:ctor()
	self._pname_ = "change_role_profession_res"
	--self.ok:		int32	
end

function i3k_sbean.change_role_profession_res:clone()
	return clone(self)
end

function i3k_sbean.change_role_profession_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.change_role_profession_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步上次转职时间
i3k_sbean.sync_last_change_pro_time_res = i3k_class("sync_last_change_pro_time_res")
function i3k_sbean.sync_last_change_pro_time_res:ctor()
	self._pname_ = "sync_last_change_pro_time_res"
	--self.lastChangeTime:		int32	
end

function i3k_sbean.sync_last_change_pro_time_res:clone()
	return clone(self)
end

function i3k_sbean.sync_last_change_pro_time_res:decode(is)
	is:popString()
	self.lastChangeTime = is:popNumber()
end

function i3k_sbean.sync_last_change_pro_time_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.lastChangeTime)
end


-- 开心对对碰祈福
i3k_sbean.happy_mstching_take_word_res = i3k_class("happy_mstching_take_word_res")
function i3k_sbean.happy_mstching_take_word_res:ctor()
	self._pname_ = "happy_mstching_take_word_res"
	--self.ok:		int32	
	--self.itemId:		int32	
end

function i3k_sbean.happy_mstching_take_word_res:clone()
	return clone(self)
end

function i3k_sbean.happy_mstching_take_word_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.itemId = is:popNumber()
end

function i3k_sbean.happy_mstching_take_word_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.itemId)
end


-- 开心对对碰打开兑换界面
i3k_sbean.happy_mstching_open_exchange_res = i3k_class("happy_mstching_open_exchange_res")
function i3k_sbean.happy_mstching_open_exchange_res:ctor()
	self._pname_ = "happy_mstching_open_exchange_res"
	--self.lastTimes:		map[int32, int32]	
end

function i3k_sbean.happy_mstching_open_exchange_res:clone()
	return clone(self)
end

function i3k_sbean.happy_mstching_open_exchange_res:decode(is)
	is:popString()
	self.lastTimes = is:popNumberNumberMap()
end

function i3k_sbean.happy_mstching_open_exchange_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.lastTimes)
end


-- 开心对对碰兑换
i3k_sbean.happy_mstching_take_reward_res = i3k_class("happy_mstching_take_reward_res")
function i3k_sbean.happy_mstching_take_reward_res:ctor()
	self._pname_ = "happy_mstching_take_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.happy_mstching_take_reward_res:clone()
	return clone(self)
end

function i3k_sbean.happy_mstching_take_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.happy_mstching_take_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开心对对碰提示
i3k_sbean.happy_mstching_tip = i3k_class("happy_mstching_tip")
function i3k_sbean.happy_mstching_tip:ctor()
	self._pname_ = "happy_mstching_tip"
	--self.error:		int32	
end

function i3k_sbean.happy_mstching_tip:clone()
	return clone(self)
end

function i3k_sbean.happy_mstching_tip:decode(is)
	is:popString()
	self.error = is:popNumber()
end

function i3k_sbean.happy_mstching_tip:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.error)
end


-- 宠物赛跑投票
i3k_sbean.pet_run_ticket_res = i3k_class("pet_run_ticket_res")
function i3k_sbean.pet_run_ticket_res:ctor()
	self._pname_ = "pet_run_ticket_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_run_ticket_res:clone()
	return clone(self)
end

function i3k_sbean.pet_run_ticket_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_run_ticket_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物赛跑同步
i3k_sbean.pet_run_sync_res = i3k_class("pet_run_sync_res")
function i3k_sbean.pet_run_sync_res:ctor()
	self._pname_ = "pet_run_sync_res"
	--self.pets:		map[int32, PetRunPet]	
	--self.data:		DBPetRunRoleData	
end

function i3k_sbean.pet_run_sync_res:clone()
	return clone(self)
end

function i3k_sbean.pet_run_sync_res:decode(is)
	is:popString()
	self.pets = is:popNumberMap(i3k_sbean.PetRunPet)
	self.data = is:pop(i3k_sbean.DBPetRunRoleData)
end

function i3k_sbean.pet_run_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.pets)
	os:push(self.data)
end


-- 宠物赛跑扔道具
i3k_sbean.pet_run_throw_item_res = i3k_class("pet_run_throw_item_res")
function i3k_sbean.pet_run_throw_item_res:ctor()
	self._pname_ = "pet_run_throw_item_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_run_throw_item_res:clone()
	return clone(self)
end

function i3k_sbean.pet_run_throw_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_run_throw_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物赛跑同步协议
i3k_sbean.pet_run_shopsync_res = i3k_class("pet_run_shopsync_res")
function i3k_sbean.pet_run_shopsync_res:ctor()
	self._pname_ = "pet_run_shopsync_res"
	--self.info:		ShopInfo	
	--self.currency:		int32	
	--self.discount:		ShopDiscountInfo	
end

function i3k_sbean.pet_run_shopsync_res:clone()
	return clone(self)
end

function i3k_sbean.pet_run_shopsync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
	self.currency = is:popNumber()
	self.discount = is:pop(i3k_sbean.ShopDiscountInfo)
end

function i3k_sbean.pet_run_shopsync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumber(self.currency)
	os:push(self.discount)
end


-- 宠物赛跑刷新协议
i3k_sbean.pet_run_shoprefresh_res = i3k_class("pet_run_shoprefresh_res")
function i3k_sbean.pet_run_shoprefresh_res:ctor()
	self._pname_ = "pet_run_shoprefresh_res"
	--self.info:		ShopInfo	
end

function i3k_sbean.pet_run_shoprefresh_res:clone()
	return clone(self)
end

function i3k_sbean.pet_run_shoprefresh_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
end

function i3k_sbean.pet_run_shoprefresh_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 宠物赛跑买商品协议
i3k_sbean.pet_run_shopbuy_res = i3k_class("pet_run_shopbuy_res")
function i3k_sbean.pet_run_shopbuy_res:ctor()
	self._pname_ = "pet_run_shopbuy_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_run_shopbuy_res:clone()
	return clone(self)
end

function i3k_sbean.pet_run_shopbuy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_run_shopbuy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.bottle_exchange_sync_res = i3k_class("bottle_exchange_sync_res")
function i3k_sbean.bottle_exchange_sync_res:ctor()
	self._pname_ = "bottle_exchange_sync_res"
	--self.ok:		int32	
	--self.times:		int32	
end

function i3k_sbean.bottle_exchange_sync_res:clone()
	return clone(self)
end

function i3k_sbean.bottle_exchange_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.times = is:popNumber()
end

function i3k_sbean.bottle_exchange_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.times)
end


-- 交换漂流瓶响应
i3k_sbean.bottle_exchange_res = i3k_class("bottle_exchange_res")
function i3k_sbean.bottle_exchange_res:ctor()
	self._pname_ = "bottle_exchange_res"
	--self.ok:		int32	
	--self.bottle:		DBExchangeBottle	
	--self.exp:		int32	
	--self.extraReward:		vector[DummyGoods]	
end

function i3k_sbean.bottle_exchange_res:clone()
	return clone(self)
end

function i3k_sbean.bottle_exchange_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.bottle = is:pop(i3k_sbean.DBExchangeBottle)
	self.exp = is:popNumber()
	self.extraReward = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.bottle_exchange_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.bottle)
	os:pushNumber(self.exp)
	os:pushList(self.extraReward)
end


-- 同步泡温泉的次数
i3k_sbean.hot_spring_sync_cnt = i3k_class("hot_spring_sync_cnt")
function i3k_sbean.hot_spring_sync_cnt:ctor()
	self._pname_ = "hot_spring_sync_cnt"
	--self.weekEnterCnt:		int32	
	--self.addExpCnt:		int32	
	--self.enterTime:		int32	
	--self.serverBuffCnt:		int32	
	--self.sectBuffCnt:		int32	
	--self.molestCnt:		int32	
	--self.soapCnt:		int32	
	--self.rubCnt:		int32	
	--self.addExp:		int32	
end

function i3k_sbean.hot_spring_sync_cnt:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_sync_cnt:decode(is)
	is:popString()
	self.weekEnterCnt = is:popNumber()
	self.addExpCnt = is:popNumber()
	self.enterTime = is:popNumber()
	self.serverBuffCnt = is:popNumber()
	self.sectBuffCnt = is:popNumber()
	self.molestCnt = is:popNumber()
	self.soapCnt = is:popNumber()
	self.rubCnt = is:popNumber()
	self.addExp = is:popNumber()
end

function i3k_sbean.hot_spring_sync_cnt:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weekEnterCnt)
	os:pushNumber(self.addExpCnt)
	os:pushNumber(self.enterTime)
	os:pushNumber(self.serverBuffCnt)
	os:pushNumber(self.sectBuffCnt)
	os:pushNumber(self.molestCnt)
	os:pushNumber(self.soapCnt)
	os:pushNumber(self.rubCnt)
	os:pushNumber(self.addExp)
end


-- 同步祝福排行榜
i3k_sbean.hot_spring_buff_rank_res = i3k_class("hot_spring_buff_rank_res")
function i3k_sbean.hot_spring_buff_rank_res:ctor()
	self._pname_ = "hot_spring_buff_rank_res"
	--self.rankType:		int32	
	--self.rank:		vector[DBHotSpringRankRole]	
end

function i3k_sbean.hot_spring_buff_rank_res:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_buff_rank_res:decode(is)
	is:popString()
	self.rankType = is:popNumber()
	self.rank = is:popList(i3k_sbean.DBHotSpringRankRole)
end

function i3k_sbean.hot_spring_buff_rank_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rankType)
	os:pushList(self.rank)
end


-- 泡温泉使用单人动作 (actType   1=molest   2=soap  3=rub)
i3k_sbean.hot_spring_use_single_act_res = i3k_class("hot_spring_use_single_act_res")
function i3k_sbean.hot_spring_use_single_act_res:ctor()
	self._pname_ = "hot_spring_use_single_act_res"
	--self.ok:		int32	
end

function i3k_sbean.hot_spring_use_single_act_res:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_use_single_act_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hot_spring_use_single_act_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 泡温泉周围玩家开始单人动作
i3k_sbean.hot_spring_nearby_start_single_act = i3k_class("hot_spring_nearby_start_single_act")
function i3k_sbean.hot_spring_nearby_start_single_act:ctor()
	self._pname_ = "hot_spring_nearby_start_single_act"
	--self.actType:		int32	
	--self.actRid:		int32	
	--self.actRname:		string	
	--self.beusedRie:		int32	
	--self.beusedRname:		string	
end

function i3k_sbean.hot_spring_nearby_start_single_act:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_nearby_start_single_act:decode(is)
	is:popString()
	self.actType = is:popNumber()
	self.actRid = is:popNumber()
	self.actRname = is:popString()
	self.beusedRie = is:popNumber()
	self.beusedRname = is:popString()
end

function i3k_sbean.hot_spring_nearby_start_single_act:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.actType)
	os:pushNumber(self.actRid)
	os:pushString(self.actRname)
	os:pushNumber(self.beusedRie)
	os:pushString(self.beusedRname)
end


-- 泡温泉使用双人动作
i3k_sbean.hot_spring_use_double_act_res = i3k_class("hot_spring_use_double_act_res")
function i3k_sbean.hot_spring_use_double_act_res:ctor()
	self._pname_ = "hot_spring_use_double_act_res"
	--self.ok:		int32	
end

function i3k_sbean.hot_spring_use_double_act_res:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_use_double_act_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hot_spring_use_double_act_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 泡温泉双人动作请求
i3k_sbean.hot_spring_double_act_forward = i3k_class("hot_spring_double_act_forward")
function i3k_sbean.hot_spring_double_act_forward:ctor()
	self._pname_ = "hot_spring_double_act_forward"
	--self.useRid:		int32	
	--self.useRname:		string	
	--self.type:		int32	
end

function i3k_sbean.hot_spring_double_act_forward:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_double_act_forward:decode(is)
	is:popString()
	self.useRid = is:popNumber()
	self.useRname = is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.hot_spring_double_act_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.useRid)
	os:pushString(self.useRname)
	os:pushNumber(self.type)
end


-- 泡温泉双人动作应答
i3k_sbean.hot_spring_double_act_answer_res = i3k_class("hot_spring_double_act_answer_res")
function i3k_sbean.hot_spring_double_act_answer_res:ctor()
	self._pname_ = "hot_spring_double_act_answer_res"
	--self.useRid:		int32	
	--self.useRname:		string	
	--self.actType:		int32	
	--self.ok:		int32	
end

function i3k_sbean.hot_spring_double_act_answer_res:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_double_act_answer_res:decode(is)
	is:popString()
	self.useRid = is:popNumber()
	self.useRname = is:popString()
	self.actType = is:popNumber()
	self.ok = is:popNumber()
end

function i3k_sbean.hot_spring_double_act_answer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.useRid)
	os:pushString(self.useRname)
	os:pushNumber(self.actType)
	os:pushNumber(self.ok)
end


-- 泡温泉双人动作应答推送
i3k_sbean.hot_spring_double_act_answer_forward = i3k_class("hot_spring_double_act_answer_forward")
function i3k_sbean.hot_spring_double_act_answer_forward:ctor()
	self._pname_ = "hot_spring_double_act_answer_forward"
	--self.beusedRid:		int32	
	--self.beusedRname:		string	
	--self.actType:		int32	
	--self.ok:		int32	
end

function i3k_sbean.hot_spring_double_act_answer_forward:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_double_act_answer_forward:decode(is)
	is:popString()
	self.beusedRid = is:popNumber()
	self.beusedRname = is:popString()
	self.actType = is:popNumber()
	self.ok = is:popNumber()
end

function i3k_sbean.hot_spring_double_act_answer_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.beusedRid)
	os:pushString(self.beusedRname)
	os:pushNumber(self.actType)
	os:pushNumber(self.ok)
end


-- 泡温泉使用buff
i3k_sbean.hot_spring_use_buff_res = i3k_class("hot_spring_use_buff_res")
function i3k_sbean.hot_spring_use_buff_res:ctor()
	self._pname_ = "hot_spring_use_buff_res"
	--self.ok:		int32	
end

function i3k_sbean.hot_spring_use_buff_res:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_use_buff_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hot_spring_use_buff_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 泡温泉同步buff
i3k_sbean.hot_spring_buff_sync = i3k_class("hot_spring_buff_sync")
function i3k_sbean.hot_spring_buff_sync:ctor()
	self._pname_ = "hot_spring_buff_sync"
	--self.sectBuff:		int32	
	--self.serverBuff:		int32	
	--self.doubleActBuff:		int32	
	--self.fashionBuff:		int32	
end

function i3k_sbean.hot_spring_buff_sync:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_buff_sync:decode(is)
	is:popString()
	self.sectBuff = is:popNumber()
	self.serverBuff = is:popNumber()
	self.doubleActBuff = is:popNumber()
	self.fashionBuff = is:popNumber()
end

function i3k_sbean.hot_spring_buff_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectBuff)
	os:pushNumber(self.serverBuff)
	os:pushNumber(self.doubleActBuff)
	os:pushNumber(self.fashionBuff)
end


-- 泡温泉使用buff提示 (buffType 1 serverbuff 2sectbuff)
i3k_sbean.hot_spring_use_buff_tip = i3k_class("hot_spring_use_buff_tip")
function i3k_sbean.hot_spring_use_buff_tip:ctor()
	self._pname_ = "hot_spring_use_buff_tip"
	--self.buffType:		int32	
	--self.useRid:		int32	
	--self.useRname:		string	
	--self.sectName:		string	
	--self.buffValue:		int32	
end

function i3k_sbean.hot_spring_use_buff_tip:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_use_buff_tip:decode(is)
	is:popString()
	self.buffType = is:popNumber()
	self.useRid = is:popNumber()
	self.useRname = is:popString()
	self.sectName = is:popString()
	self.buffValue = is:popNumber()
end

function i3k_sbean.hot_spring_use_buff_tip:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.buffType)
	os:pushNumber(self.useRid)
	os:pushString(self.useRname)
	os:pushString(self.sectName)
	os:pushNumber(self.buffValue)
end


-- 泡温泉取消双人互动
i3k_sbean.hot_spring_cancel_double_act_res = i3k_class("hot_spring_cancel_double_act_res")
function i3k_sbean.hot_spring_cancel_double_act_res:ctor()
	self._pname_ = "hot_spring_cancel_double_act_res"
	--self.ok:		int32	
end

function i3k_sbean.hot_spring_cancel_double_act_res:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_cancel_double_act_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hot_spring_cancel_double_act_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 泡温泉 取消双人邀请推送
i3k_sbean.hot_spring_cancel_invite_forward = i3k_class("hot_spring_cancel_invite_forward")
function i3k_sbean.hot_spring_cancel_invite_forward:ctor()
	self._pname_ = "hot_spring_cancel_invite_forward"
	--self.useRid:		int32	
end

function i3k_sbean.hot_spring_cancel_invite_forward:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_cancel_invite_forward:decode(is)
	is:popString()
	self.useRid = is:popNumber()
end

function i3k_sbean.hot_spring_cancel_invite_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.useRid)
end


-- 泡温泉周进入次数
i3k_sbean.hot_spring_week_enter_cnt = i3k_class("hot_spring_week_enter_cnt")
function i3k_sbean.hot_spring_week_enter_cnt:ctor()
	self._pname_ = "hot_spring_week_enter_cnt"
	--self.cnt:		int32	
end

function i3k_sbean.hot_spring_week_enter_cnt:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_week_enter_cnt:decode(is)
	is:popString()
	self.cnt = is:popNumber()
end

function i3k_sbean.hot_spring_week_enter_cnt:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cnt)
end


-- 宠物赛跑开始
i3k_sbean.pet_run_start = i3k_class("pet_run_start")
function i3k_sbean.pet_run_start:ctor()
	self._pname_ = "pet_run_start"
end

function i3k_sbean.pet_run_start:decode(is)
	is:popString()
end

function i3k_sbean.pet_run_start:encode(os)
	os:pushString(self._pname_)
end


-- 宠物赛跑结束
i3k_sbean.pet_run_end = i3k_class("pet_run_end")
function i3k_sbean.pet_run_end:ctor()
	self._pname_ = "pet_run_end"
	--self.winId:		int32	
end

function i3k_sbean.pet_run_end:clone()
	return clone(self)
end

function i3k_sbean.pet_run_end:decode(is)
	is:popString()
	self.winId = is:popNumber()
end

function i3k_sbean.pet_run_end:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.winId)
end


-- 清除buff药
i3k_sbean.buffdrug_clear_res = i3k_class("buffdrug_clear_res")
function i3k_sbean.buffdrug_clear_res:ctor()
	self._pname_ = "buffdrug_clear_res"
	--self.ok:		int32	
end

function i3k_sbean.buffdrug_clear_res:clone()
	return clone(self)
end

function i3k_sbean.buffdrug_clear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.buffdrug_clear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- buff药更新
i3k_sbean.buff_drug_update = i3k_class("buff_drug_update")
function i3k_sbean.buff_drug_update:ctor()
	self._pname_ = "buff_drug_update"
	--self.type:		int32	
	--self.drug:		BuffDrug	
end

function i3k_sbean.buff_drug_update:clone()
	return clone(self)
end

function i3k_sbean.buff_drug_update:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.drug = is:pop(i3k_sbean.BuffDrug)
end

function i3k_sbean.buff_drug_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:push(self.drug)
end


-- 碎片请求回应
i3k_sbean.fragment_recycle_sync_res = i3k_class("fragment_recycle_sync_res")
function i3k_sbean.fragment_recycle_sync_res:ctor()
	self._pname_ = "fragment_recycle_sync_res"
	--self.ok:		int32	
	--self.log:		map[int32,int32]	
end

function i3k_sbean.fragment_recycle_sync_res:clone()
	return clone(self)
end

function i3k_sbean.fragment_recycle_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.log = is:popNumberNumberMap()
end

function i3k_sbean.fragment_recycle_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.log)
end


i3k_sbean.fragment_recycle_res = i3k_class("fragment_recycle_res")
function i3k_sbean.fragment_recycle_res:ctor()
	self._pname_ = "fragment_recycle_res"
	--self.ok:		int32	
end

function i3k_sbean.fragment_recycle_res:clone()
	return clone(self)
end

function i3k_sbean.fragment_recycle_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fragment_recycle_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.weapon_wolf_damage_reduction = i3k_class("weapon_wolf_damage_reduction")
function i3k_sbean.weapon_wolf_damage_reduction:ctor()
	self._pname_ = "weapon_wolf_damage_reduction"
	--self.currVal:		int32	
	--self.maxVal:		int32	
	--self.coolEndTime:		int32	
end

function i3k_sbean.weapon_wolf_damage_reduction:clone()
	return clone(self)
end

function i3k_sbean.weapon_wolf_damage_reduction:decode(is)
	is:popString()
	self.currVal = is:popNumber()
	self.maxVal = is:popNumber()
	self.coolEndTime = is:popNumber()
end

function i3k_sbean.weapon_wolf_damage_reduction:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.currVal)
	os:pushNumber(self.maxVal)
	os:pushNumber(self.coolEndTime)
end


-- 武魂方位升级
i3k_sbean.weaponsoul_lvlup_res = i3k_class("weaponsoul_lvlup_res")
function i3k_sbean.weaponsoul_lvlup_res:ctor()
	self._pname_ = "weaponsoul_lvlup_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_lvlup_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_lvlup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_lvlup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 武魂升阶
i3k_sbean.weaponsoul_gradeup_res = i3k_class("weaponsoul_gradeup_res")
function i3k_sbean.weaponsoul_gradeup_res:ctor()
	self._pname_ = "weaponsoul_gradeup_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_gradeup_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_gradeup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_gradeup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置升阶自动变更形象
i3k_sbean.weaponsoul_showauto_res = i3k_class("weaponsoul_showauto_res")
function i3k_sbean.weaponsoul_showauto_res:ctor()
	self._pname_ = "weaponsoul_showauto_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_showauto_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_showauto_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_showauto_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 变更形象
i3k_sbean.weaponsoul_showset_res = i3k_class("weaponsoul_showset_res")
function i3k_sbean.weaponsoul_showset_res:ctor()
	self._pname_ = "weaponsoul_showset_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_showset_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_showset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_showset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解锁追加形象
i3k_sbean.weaponsoul_unlockshow_res = i3k_class("weaponsoul_unlockshow_res")
function i3k_sbean.weaponsoul_unlockshow_res:ctor()
	self._pname_ = "weaponsoul_unlockshow_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_unlockshow_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_unlockshow_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_unlockshow_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 隐藏形象
i3k_sbean.weaponsoul_hide_res = i3k_class("weaponsoul_hide_res")
function i3k_sbean.weaponsoul_hide_res:ctor()
	self._pname_ = "weaponsoul_hide_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_hide_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_hide_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_hide_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 新增武魂形象
i3k_sbean.weaponsoul_show_add = i3k_class("weaponsoul_show_add")
function i3k_sbean.weaponsoul_show_add:ctor()
	self._pname_ = "weaponsoul_show_add"
	--self.showID:		int32	
end

function i3k_sbean.weaponsoul_show_add:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_show_add:decode(is)
	is:popString()
	self.showID = is:popNumber()
end

function i3k_sbean.weaponsoul_show_add:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
end


-- 方位重置
i3k_sbean.weaponsoul_partreset_res = i3k_class("weaponsoul_partreset_res")
function i3k_sbean.weaponsoul_partreset_res:ctor()
	self._pname_ = "weaponsoul_partreset_res"
	--self.balls:		map[int32, int32]	
end

function i3k_sbean.weaponsoul_partreset_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_partreset_res:decode(is)
	is:popString()
	self.balls = is:popNumberNumberMap()
end

function i3k_sbean.weaponsoul_partreset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.balls)
end


-- 保存方位重置
i3k_sbean.weaponsoul_savereset_res = i3k_class("weaponsoul_savereset_res")
function i3k_sbean.weaponsoul_savereset_res:ctor()
	self._pname_ = "weaponsoul_savereset_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_savereset_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_savereset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_savereset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 放弃方位重置
i3k_sbean.weaponsoul_quitreset_res = i3k_class("weaponsoul_quitreset_res")
function i3k_sbean.weaponsoul_quitreset_res:ctor()
	self._pname_ = "weaponsoul_quitreset_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_quitreset_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_quitreset_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_quitreset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 激活星耀
i3k_sbean.weaponsoul_staractivate_res = i3k_class("weaponsoul_staractivate_res")
function i3k_sbean.weaponsoul_staractivate_res:ctor()
	self._pname_ = "weaponsoul_staractivate_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_staractivate_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_staractivate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_staractivate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 快速激活星耀
i3k_sbean.weaponsoul_quickactivate_res = i3k_class("weaponsoul_quickactivate_res")
function i3k_sbean.weaponsoul_quickactivate_res:ctor()
	self._pname_ = "weaponsoul_quickactivate_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_quickactivate_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_quickactivate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_quickactivate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置当前星耀
i3k_sbean.weaponsoul_curstar_res = i3k_class("weaponsoul_curstar_res")
function i3k_sbean.weaponsoul_curstar_res:ctor()
	self._pname_ = "weaponsoul_curstar_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponsoul_curstar_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_curstar_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponsoul_curstar_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神木鼎同步次数
i3k_sbean.tripod_times_sync_res = i3k_class("tripod_times_sync_res")
function i3k_sbean.tripod_times_sync_res:ctor()
	self._pname_ = "tripod_times_sync_res"
	--self.dayUsedTimes:		int32	
	--self.dayBuyTimes:		int32	
end

function i3k_sbean.tripod_times_sync_res:clone()
	return clone(self)
end

function i3k_sbean.tripod_times_sync_res:decode(is)
	is:popString()
	self.dayUsedTimes = is:popNumber()
	self.dayBuyTimes = is:popNumber()
end

function i3k_sbean.tripod_times_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayUsedTimes)
	os:pushNumber(self.dayBuyTimes)
end


-- 神木鼎购买次数
i3k_sbean.tripod_buy_times_res = i3k_class("tripod_buy_times_res")
function i3k_sbean.tripod_buy_times_res:ctor()
	self._pname_ = "tripod_buy_times_res"
	--self.ok:		int32	
end

function i3k_sbean.tripod_buy_times_res:clone()
	return clone(self)
end

function i3k_sbean.tripod_buy_times_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.tripod_buy_times_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神木鼎融合 ok = 1 表示可以融合但是融合失败了  ok = 2 表示融合成功
i3k_sbean.tripod_merge_res = i3k_class("tripod_merge_res")
function i3k_sbean.tripod_merge_res:ctor()
	self._pname_ = "tripod_merge_res"
	--self.ok:		int32	
end

function i3k_sbean.tripod_merge_res:clone()
	return clone(self)
end

function i3k_sbean.tripod_merge_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.tripod_merge_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 激活器灵
i3k_sbean.weaponspirit_activite_res = i3k_class("weaponspirit_activite_res")
function i3k_sbean.weaponspirit_activite_res:ctor()
	self._pname_ = "weaponspirit_activite_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponspirit_activite_res:clone()
	return clone(self)
end

function i3k_sbean.weaponspirit_activite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponspirit_activite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 激活器灵节点
i3k_sbean.weaponspirit_activite_point_res = i3k_class("weaponspirit_activite_point_res")
function i3k_sbean.weaponspirit_activite_point_res:ctor()
	self._pname_ = "weaponspirit_activite_point_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponspirit_activite_point_res:clone()
	return clone(self)
end

function i3k_sbean.weaponspirit_activite_point_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponspirit_activite_point_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备器灵
i3k_sbean.weaponspirit_equip_res = i3k_class("weaponspirit_equip_res")
function i3k_sbean.weaponspirit_equip_res:ctor()
	self._pname_ = "weaponspirit_equip_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponspirit_equip_res:clone()
	return clone(self)
end

function i3k_sbean.weaponspirit_equip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponspirit_equip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 器灵升阶
i3k_sbean.weaponspirit_uprank_res = i3k_class("weaponspirit_uprank_res")
function i3k_sbean.weaponspirit_uprank_res:ctor()
	self._pname_ = "weaponspirit_uprank_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponspirit_uprank_res:clone()
	return clone(self)
end

function i3k_sbean.weaponspirit_uprank_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponspirit_uprank_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步器灵属性
i3k_sbean.role_weaponspirit = i3k_class("role_weaponspirit")
function i3k_sbean.role_weaponspirit:ctor()
	self._pname_ = "role_weaponspirit"
	--self.spirits:		map[int32, DBWeaponSpirit]	
end

function i3k_sbean.role_weaponspirit:clone()
	return clone(self)
end

function i3k_sbean.role_weaponspirit:decode(is)
	is:popString()
	self.spirits = is:popNumberMap(i3k_sbean.DBWeaponSpirit)
end

function i3k_sbean.role_weaponspirit:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.spirits)
end


-- 器灵技能升级
i3k_sbean.weaponspirit_skill_level_up_res = i3k_class("weaponspirit_skill_level_up_res")
function i3k_sbean.weaponspirit_skill_level_up_res:ctor()
	self._pname_ = "weaponspirit_skill_level_up_res"
	--self.ok:		int32	
end

function i3k_sbean.weaponspirit_skill_level_up_res:clone()
	return clone(self)
end

function i3k_sbean.weaponspirit_skill_level_up_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weaponspirit_skill_level_up_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 共享好礼活动同步
i3k_sbean.shared_pay_sync_res = i3k_class("shared_pay_sync_res")
function i3k_sbean.shared_pay_sync_res:ctor()
	self._pname_ = "shared_pay_sync_res"
	--self.ok:		int32	
	--self.info:		RoleSharedPayInfo	
end

function i3k_sbean.shared_pay_sync_res:clone()
	return clone(self)
end

function i3k_sbean.shared_pay_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleSharedPayInfo)
end

function i3k_sbean.shared_pay_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 共享好礼领奖
i3k_sbean.shared_pay_take_reward_res = i3k_class("shared_pay_take_reward_res")
function i3k_sbean.shared_pay_take_reward_res:ctor()
	self._pname_ = "shared_pay_take_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.shared_pay_take_reward_res:clone()
	return clone(self)
end

function i3k_sbean.shared_pay_take_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.shared_pay_take_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 连续使用道具活动同步
i3k_sbean.use_item_act_sync_res = i3k_class("use_item_act_sync_res")
function i3k_sbean.use_item_act_sync_res:ctor()
	self._pname_ = "use_item_act_sync_res"
	--self.ok:		int32	
	--self.info:		RoleUseItemActInfo	
end

function i3k_sbean.use_item_act_sync_res:clone()
	return clone(self)
end

function i3k_sbean.use_item_act_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleUseItemActInfo)
end

function i3k_sbean.use_item_act_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 连续使用道具活动领奖
i3k_sbean.use_item_act_take_reward_res = i3k_class("use_item_act_take_reward_res")
function i3k_sbean.use_item_act_take_reward_res:ctor()
	self._pname_ = "use_item_act_take_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.use_item_act_take_reward_res:clone()
	return clone(self)
end

function i3k_sbean.use_item_act_take_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.use_item_act_take_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 找你妹活动开始
i3k_sbean.finding_your_sister_start_res = i3k_class("finding_your_sister_start_res")
function i3k_sbean.finding_your_sister_start_res:ctor()
	self._pname_ = "finding_your_sister_start_res"
	--self.result:		int32	
	--self.info:		FindingYourSisterInfo	
end

function i3k_sbean.finding_your_sister_start_res:clone()
	return clone(self)
end

function i3k_sbean.finding_your_sister_start_res:decode(is)
	is:popString()
	self.result = is:popNumber()
	self.info = is:pop(i3k_sbean.FindingYourSisterInfo)
end

function i3k_sbean.finding_your_sister_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.result)
	os:push(self.info)
end


-- 找你妹点击图片
i3k_sbean.finding_your_sister_click_res = i3k_class("finding_your_sister_click_res")
function i3k_sbean.finding_your_sister_click_res:ctor()
	self._pname_ = "finding_your_sister_click_res"
	--self.ok:		int32	
end

function i3k_sbean.finding_your_sister_click_res:clone()
	return clone(self)
end

function i3k_sbean.finding_your_sister_click_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.finding_your_sister_click_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 找你妹请求奖励
i3k_sbean.finding_your_sister_get_rewards_res = i3k_class("finding_your_sister_get_rewards_res")
function i3k_sbean.finding_your_sister_get_rewards_res:ctor()
	self._pname_ = "finding_your_sister_get_rewards_res"
	--self.result:		int32	
end

function i3k_sbean.finding_your_sister_get_rewards_res:clone()
	return clone(self)
end

function i3k_sbean.finding_your_sister_get_rewards_res:decode(is)
	is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.finding_your_sister_get_rewards_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.result)
end


-- 找你妹登陆同步
i3k_sbean.finding_your_sister_reconnect = i3k_class("finding_your_sister_reconnect")
function i3k_sbean.finding_your_sister_reconnect:ctor()
	self._pname_ = "finding_your_sister_reconnect"
	--self.infos:		vector[FindingYourSisterInfo]	
end

function i3k_sbean.finding_your_sister_reconnect:clone()
	return clone(self)
end

function i3k_sbean.finding_your_sister_reconnect:decode(is)
	is:popString()
	self.infos = is:popList(i3k_sbean.FindingYourSisterInfo)
end

function i3k_sbean.finding_your_sister_reconnect:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.infos)
end


-- 角色加油
i3k_sbean.role_oil_res = i3k_class("role_oil_res")
function i3k_sbean.role_oil_res:ctor()
	self._pname_ = "role_oil_res"
	--self.ok:		int32	
end

function i3k_sbean.role_oil_res:clone()
	return clone(self)
end

function i3k_sbean.role_oil_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_oil_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步加油信息
i3k_sbean.sync_oil_res = i3k_class("sync_oil_res")
function i3k_sbean.sync_oil_res:ctor()
	self._pname_ = "sync_oil_res"
	--self.history:		vector[OilHistory]	
	--self.luckyRole:		map[int32, string]	
	--self.score:		int32	
	--self.reward:		set[int32]	
	--self.lastTime:		int32	
	--self.allscore:		int32	
	--self.dayOilTimes:		int32	
end

function i3k_sbean.sync_oil_res:clone()
	return clone(self)
end

function i3k_sbean.sync_oil_res:decode(is)
	is:popString()
	self.history = is:popList(i3k_sbean.OilHistory)
	self.luckyRole = is:popNumberStringMap()
	self.score = is:popNumber()
	self.reward = is:popNumberSet()
	self.lastTime = is:popNumber()
	self.allscore = is:popNumber()
	self.dayOilTimes = is:popNumber()
end

function i3k_sbean.sync_oil_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.history)
	os:pushNumberStringMap(self.luckyRole)
	os:pushNumber(self.score)
	os:pushNumberSet(self.reward)
	os:pushNumber(self.lastTime)
	os:pushNumber(self.allscore)
	os:pushNumber(self.dayOilTimes)
end


-- 领取加油奖励
i3k_sbean.take_oil_reward_res = i3k_class("take_oil_reward_res")
function i3k_sbean.take_oil_reward_res:ctor()
	self._pname_ = "take_oil_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.take_oil_reward_res:clone()
	return clone(self)
end

function i3k_sbean.take_oil_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_oil_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 排行榜同步
i3k_sbean.oil_rank_res = i3k_class("oil_rank_res")
function i3k_sbean.oil_rank_res:ctor()
	self._pname_ = "oil_rank_res"
	--self.ranks:		vector[RankRole]	
	--self.selfRank:		int32	
end

function i3k_sbean.oil_rank_res:clone()
	return clone(self)
end

function i3k_sbean.oil_rank_res:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.selfRank = is:popNumber()
end

function i3k_sbean.oil_rank_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
	os:pushNumber(self.selfRank)
end


-- 大富翁同步
i3k_sbean.rich_sync_res = i3k_class("rich_sync_res")
function i3k_sbean.rich_sync_res:ctor()
	self._pname_ = "rich_sync_res"
	--self.rich:		DBRoleRich	
end

function i3k_sbean.rich_sync_res:clone()
	return clone(self)
end

function i3k_sbean.rich_sync_res:decode(is)
	is:popString()
	self.rich = is:pop(i3k_sbean.DBRoleRich)
end

function i3k_sbean.rich_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.rich)
end


-- 大富翁扔色子
i3k_sbean.rich_go_res = i3k_class("rich_go_res")
function i3k_sbean.rich_go_res:ctor()
	self._pname_ = "rich_go_res"
	--self.ok:		int32	
	--self.number:		vector[int32]	
end

function i3k_sbean.rich_go_res:clone()
	return clone(self)
end

function i3k_sbean.rich_go_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.number = is:popNumberList()
end

function i3k_sbean.rich_go_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberList(self.number)
end


-- 大富翁完成事件
i3k_sbean.rich_get_event_res = i3k_class("rich_get_event_res")
function i3k_sbean.rich_get_event_res:ctor()
	self._pname_ = "rich_get_event_res"
	--self.ok:		int32	
end

function i3k_sbean.rich_get_event_res:clone()
	return clone(self)
end

function i3k_sbean.rich_get_event_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rich_get_event_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 大富翁放弃事件
i3k_sbean.rich_give_up_res = i3k_class("rich_give_up_res")
function i3k_sbean.rich_give_up_res:ctor()
	self._pname_ = "rich_give_up_res"
	--self.ok:		int32	
end

function i3k_sbean.rich_give_up_res:clone()
	return clone(self)
end

function i3k_sbean.rich_give_up_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.rich_give_up_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


--[[
'
            大富翁同步事件计数
 ]]
i3k_sbean.rich_sync_event_counts = i3k_class("rich_sync_event_counts")
function i3k_sbean.rich_sync_event_counts:ctor()
	self._pname_ = "rich_sync_event_counts"
	--self.groupId:		int32	
	--self.eventType:		int32	
	--self.count:		int32	
end

function i3k_sbean.rich_sync_event_counts:clone()
	return clone(self)
end

function i3k_sbean.rich_sync_event_counts:decode(is)
	is:popString()
	self.groupId = is:popNumber()
	self.eventType = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.rich_sync_event_counts:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
	os:pushNumber(self.eventType)
	os:pushNumber(self.count)
end


-- 帮派驻地建造同步
i3k_sbean.sect_zone_sync_build_res = i3k_class("sect_zone_sync_build_res")
function i3k_sbean.sect_zone_sync_build_res:ctor()
	self._pname_ = "sect_zone_sync_build_res"
	--self.process:		int32	
	--self.open:		int32	
end

function i3k_sbean.sect_zone_sync_build_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_sync_build_res:decode(is)
	is:popString()
	self.process = is:popNumber()
	self.open = is:popNumber()
end

function i3k_sbean.sect_zone_sync_build_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.process)
	os:pushNumber(self.open)
end


-- 帮派驻地建造
i3k_sbean.sect_zone_build_res = i3k_class("sect_zone_build_res")
function i3k_sbean.sect_zone_build_res:ctor()
	self._pname_ = "sect_zone_build_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_zone_build_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_build_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_zone_build_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派驻地开启
i3k_sbean.sect_zone_open_res = i3k_class("sect_zone_open_res")
function i3k_sbean.sect_zone_open_res:ctor()
	self._pname_ = "sect_zone_open_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_zone_open_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_zone_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派驻地建造排行同步
i3k_sbean.sect_zone_build_rank_res = i3k_class("sect_zone_build_rank_res")
function i3k_sbean.sect_zone_build_rank_res:ctor()
	self._pname_ = "sect_zone_build_rank_res"
	--self.ranks:		map[int32, ZoneBuildRole]	
end

function i3k_sbean.sect_zone_build_rank_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_build_rank_res:decode(is)
	is:popString()
	self.ranks = is:popNumberMap(i3k_sbean.ZoneBuildRole)
end

function i3k_sbean.sect_zone_build_rank_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.ranks)
end


-- 帮派驻地BOSS捐献道具
i3k_sbean.sect_zone_boss_item_res = i3k_class("sect_zone_boss_item_res")
function i3k_sbean.sect_zone_boss_item_res:ctor()
	self._pname_ = "sect_zone_boss_item_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_zone_boss_item_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_boss_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_zone_boss_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派驻地BOSS召唤
i3k_sbean.sect_zone_boss_open_res = i3k_class("sect_zone_boss_open_res")
function i3k_sbean.sect_zone_boss_open_res:ctor()
	self._pname_ = "sect_zone_boss_open_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_zone_boss_open_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_boss_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_zone_boss_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派驻地进入
i3k_sbean.sect_zone_enter_res = i3k_class("sect_zone_enter_res")
function i3k_sbean.sect_zone_enter_res:ctor()
	self._pname_ = "sect_zone_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_zone_enter_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_zone_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 可进入帮派驻地同步
i3k_sbean.sect_zone_list_res = i3k_class("sect_zone_list_res")
function i3k_sbean.sect_zone_list_res:ctor()
	self._pname_ = "sect_zone_list_res"
	--self.sects:		vector[SectZoneInfo]	
end

function i3k_sbean.sect_zone_list_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_list_res:decode(is)
	is:popString()
	self.sects = is:popList(i3k_sbean.SectZoneInfo)
end

function i3k_sbean.sect_zone_list_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.sects)
end


-- 发送气运礼包
i3k_sbean.send_destiny_reward_res = i3k_class("send_destiny_reward_res")
function i3k_sbean.send_destiny_reward_res:ctor()
	self._pname_ = "send_destiny_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.send_destiny_reward_res:clone()
	return clone(self)
end

function i3k_sbean.send_destiny_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.send_destiny_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派驻地BOSS信息同步
i3k_sbean.sect_zone_sync_boss_res = i3k_class("sect_zone_sync_boss_res")
function i3k_sbean.sect_zone_sync_boss_res:ctor()
	self._pname_ = "sect_zone_sync_boss_res"
	--self.process:		map[int32, int32]	
	--self.dayBossTimes:		int32	
	--self.itemUseTimes:		map[int32, int32]	
	--self.curBoss:		map[int32, int32]	
end

function i3k_sbean.sect_zone_sync_boss_res:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_sync_boss_res:decode(is)
	is:popString()
	self.process = is:popNumberNumberMap()
	self.dayBossTimes = is:popNumber()
	self.itemUseTimes = is:popNumberNumberMap()
	self.curBoss = is:popNumberNumberMap()
end

function i3k_sbean.sect_zone_sync_boss_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.process)
	os:pushNumber(self.dayBossTimes)
	os:pushNumberNumberMap(self.itemUseTimes)
	os:pushNumberNumberMap(self.curBoss)
end


-- 帮派驻地开始
i3k_sbean.sect_zone_map_sync = i3k_class("sect_zone_map_sync")
function i3k_sbean.sect_zone_map_sync:ctor()
	self._pname_ = "sect_zone_map_sync"
	--self.sectId:		int32	
	--self.sectName:		string	
end

function i3k_sbean.sect_zone_map_sync:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_map_sync:decode(is)
	is:popString()
	self.sectId = is:popNumber()
	self.sectName = is:popString()
end

function i3k_sbean.sect_zone_map_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectId)
	os:pushString(self.sectName)
end


-- 帮派消息推送
i3k_sbean.sect_msg_push = i3k_class("sect_msg_push")
function i3k_sbean.sect_msg_push:ctor()
	self._pname_ = "sect_msg_push"
	--self.type:		int32	
	--self.iArg1:		int32	
	--self.iArg2:		int32	
	--self.iArg3:		int32	
	--self.iArg4:		int32	
	--self.vArg:		string	
end

function i3k_sbean.sect_msg_push:clone()
	return clone(self)
end

function i3k_sbean.sect_msg_push:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.iArg1 = is:popNumber()
	self.iArg2 = is:popNumber()
	self.iArg3 = is:popNumber()
	self.iArg4 = is:popNumber()
	self.vArg = is:popString()
end

function i3k_sbean.sect_msg_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.iArg1)
	os:pushNumber(self.iArg2)
	os:pushNumber(self.iArg3)
	os:pushNumber(self.iArg4)
	os:pushString(self.vArg)
end


-- 帮派红包信息同步
i3k_sbean.sect_red_pack_sync_res = i3k_class("sect_red_pack_sync_res")
function i3k_sbean.sect_red_pack_sync_res:ctor()
	self._pname_ = "sect_red_pack_sync_res"
	--self.packs:		vector[SectRedPackInfo]	
	--self.sendTime:		int32	
	--self.recvTime:		int32	
end

function i3k_sbean.sect_red_pack_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_red_pack_sync_res:decode(is)
	is:popString()
	self.packs = is:popList(i3k_sbean.SectRedPackInfo)
	self.sendTime = is:popNumber()
	self.recvTime = is:popNumber()
end

function i3k_sbean.sect_red_pack_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.packs)
	os:pushNumber(self.sendTime)
	os:pushNumber(self.recvTime)
end


-- 帮派红包发送
i3k_sbean.sect_red_pack_send_res = i3k_class("sect_red_pack_send_res")
function i3k_sbean.sect_red_pack_send_res:ctor()
	self._pname_ = "sect_red_pack_send_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_red_pack_send_res:clone()
	return clone(self)
end

function i3k_sbean.sect_red_pack_send_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_red_pack_send_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派红包领取
i3k_sbean.sect_red_pack_take_res = i3k_class("sect_red_pack_take_res")
function i3k_sbean.sect_red_pack_take_res:ctor()
	self._pname_ = "sect_red_pack_take_res"
	--self.diamond:		int32	
end

function i3k_sbean.sect_red_pack_take_res:clone()
	return clone(self)
end

function i3k_sbean.sect_red_pack_take_res:decode(is)
	is:popString()
	self.diamond = is:popNumber()
end

function i3k_sbean.sect_red_pack_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.diamond)
end


-- 帮派龙运同步
i3k_sbean.sect_destiny_sync_res = i3k_class("sect_destiny_sync_res")
function i3k_sbean.sect_destiny_sync_res:ctor()
	self._pname_ = "sect_destiny_sync_res"
	--self.destinys:		vector[int32]	
end

function i3k_sbean.sect_destiny_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_destiny_sync_res:decode(is)
	is:popString()
	self.destinys = is:popNumberList()
end

function i3k_sbean.sect_destiny_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.destinys)
end


-- 帮派龙运礼包同步
i3k_sbean.sect_destiny_reward_sync_res = i3k_class("sect_destiny_reward_sync_res")
function i3k_sbean.sect_destiny_reward_sync_res:ctor()
	self._pname_ = "sect_destiny_reward_sync_res"
	--self.canUseDestiny:		int32	
	--self.dayGiftTimes:		int32	
end

function i3k_sbean.sect_destiny_reward_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_destiny_reward_sync_res:decode(is)
	is:popString()
	self.canUseDestiny = is:popNumber()
	self.dayGiftTimes = is:popNumber()
end

function i3k_sbean.sect_destiny_reward_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.canUseDestiny)
	os:pushNumber(self.dayGiftTimes)
end


-- 帮派气运夺取结果推送
i3k_sbean.sect_destiny_rob_push = i3k_class("sect_destiny_rob_push")
function i3k_sbean.sect_destiny_rob_push:ctor()
	self._pname_ = "sect_destiny_rob_push"
	--self.ok:		int32	
end

function i3k_sbean.sect_destiny_rob_push:clone()
	return clone(self)
end

function i3k_sbean.sect_destiny_rob_push:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_destiny_rob_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派红包历史查询
i3k_sbean.sect_red_pack_history_res = i3k_class("sect_red_pack_history_res")
function i3k_sbean.sect_red_pack_history_res:ctor()
	self._pname_ = "sect_red_pack_history_res"
	--self.packNum:		int32	
	--self.history:		vector[SectRedPackTakeHistory]	
end

function i3k_sbean.sect_red_pack_history_res:clone()
	return clone(self)
end

function i3k_sbean.sect_red_pack_history_res:decode(is)
	is:popString()
	self.packNum = is:popNumber()
	self.history = is:popList(i3k_sbean.SectRedPackTakeHistory)
end

function i3k_sbean.sect_red_pack_history_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.packNum)
	os:pushList(self.history)
end


-- 额外奖励查询
i3k_sbean.extra_gift_sync_res = i3k_class("extra_gift_sync_res")
function i3k_sbean.extra_gift_sync_res:ctor()
	self._pname_ = "extra_gift_sync_res"
	--self.extraGifts:		BuyExtraGift	
end

function i3k_sbean.extra_gift_sync_res:clone()
	return clone(self)
end

function i3k_sbean.extra_gift_sync_res:decode(is)
	is:popString()
	self.extraGifts = is:pop(i3k_sbean.BuyExtraGift)
end

function i3k_sbean.extra_gift_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.extraGifts)
end


-- 单个坐骑排行
i3k_sbean.single_horse_rank_res = i3k_class("single_horse_rank_res")
function i3k_sbean.single_horse_rank_res:ctor()
	self._pname_ = "single_horse_rank_res"
	--self.ok:		int32	
	--self.maxCount:		int32	
	--self.selfRank:		int32	
	--self.rankRoles:		vector[RankRole]	
	--self.horses:		map[int32, HorseOverview]	
end

function i3k_sbean.single_horse_rank_res:clone()
	return clone(self)
end

function i3k_sbean.single_horse_rank_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.maxCount = is:popNumber()
	self.selfRank = is:popNumber()
	self.rankRoles = is:popList(i3k_sbean.RankRole)
	self.horses = is:popNumberMap(i3k_sbean.HorseOverview)
end

function i3k_sbean.single_horse_rank_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.maxCount)
	os:pushNumber(self.selfRank)
	os:pushList(self.rankRoles)
	os:pushNumberMap(self.horses)
end


-- 玩家回归信息同步
i3k_sbean.role_back_sync_res = i3k_class("role_back_sync_res")
function i3k_sbean.role_back_sync_res:ctor()
	self._pname_ = "role_back_sync_res"
	--self.info:		DBRoleBackActivity	
end

function i3k_sbean.role_back_sync_res:clone()
	return clone(self)
end

function i3k_sbean.role_back_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleBackActivity)
end

function i3k_sbean.role_back_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 玩家充值奖励领取
i3k_sbean.role_back_pay_gift_take_res = i3k_class("role_back_pay_gift_take_res")
function i3k_sbean.role_back_pay_gift_take_res:ctor()
	self._pname_ = "role_back_pay_gift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.role_back_pay_gift_take_res:clone()
	return clone(self)
end

function i3k_sbean.role_back_pay_gift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_back_pay_gift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 玩家活跃奖励领取
i3k_sbean.role_back_schdule_gift_take_res = i3k_class("role_back_schdule_gift_take_res")
function i3k_sbean.role_back_schdule_gift_take_res:ctor()
	self._pname_ = "role_back_schdule_gift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.role_back_schdule_gift_take_res:clone()
	return clone(self)
end

function i3k_sbean.role_back_schdule_gift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_back_schdule_gift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 玩家每日奖励领取
i3k_sbean.role_back_day_gift_take_res = i3k_class("role_back_day_gift_take_res")
function i3k_sbean.role_back_day_gift_take_res:ctor()
	self._pname_ = "role_back_day_gift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.role_back_day_gift_take_res:clone()
	return clone(self)
end

function i3k_sbean.role_back_day_gift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_back_day_gift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 玩家回归人数奖励领取
i3k_sbean.role_back_back_num_gift_take_res = i3k_class("role_back_back_num_gift_take_res")
function i3k_sbean.role_back_back_num_gift_take_res:ctor()
	self._pname_ = "role_back_back_num_gift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.role_back_back_num_gift_take_res:clone()
	return clone(self)
end

function i3k_sbean.role_back_back_num_gift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_back_back_num_gift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 玩家每日任务数量奖励领取
i3k_sbean.role_back_task_num_gift_take_res = i3k_class("role_back_task_num_gift_take_res")
function i3k_sbean.role_back_task_num_gift_take_res:ctor()
	self._pname_ = "role_back_task_num_gift_take_res"
	--self.ok:		int32	
end

function i3k_sbean.role_back_task_num_gift_take_res:clone()
	return clone(self)
end

function i3k_sbean.role_back_task_num_gift_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_back_task_num_gift_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 玩家世界数量同步
i3k_sbean.role_back_world_num_sync_res = i3k_class("role_back_world_num_sync_res")
function i3k_sbean.role_back_world_num_sync_res:ctor()
	self._pname_ = "role_back_world_num_sync_res"
	--self.roleNum:		int32	
	--self.taskNum:		int32	
	--self.roleNumReward:		set[int32]	
	--self.taskNumReward:		set[int32]	
end

function i3k_sbean.role_back_world_num_sync_res:clone()
	return clone(self)
end

function i3k_sbean.role_back_world_num_sync_res:decode(is)
	is:popString()
	self.roleNum = is:popNumber()
	self.taskNum = is:popNumber()
	self.roleNumReward = is:popNumberSet()
	self.taskNumReward = is:popNumberSet()
end

function i3k_sbean.role_back_world_num_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleNum)
	os:pushNumber(self.taskNum)
	os:pushNumberSet(self.roleNumReward)
	os:pushNumberSet(self.taskNumReward)
end


-- 玩家回归充值信息同步
i3k_sbean.role_back_pay_sync_res = i3k_class("role_back_pay_sync_res")
function i3k_sbean.role_back_pay_sync_res:ctor()
	self._pname_ = "role_back_pay_sync_res"
	--self.info:		DBRoleBackPayActivity	
end

function i3k_sbean.role_back_pay_sync_res:clone()
	return clone(self)
end

function i3k_sbean.role_back_pay_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleBackPayActivity)
end

function i3k_sbean.role_back_pay_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 玩家回归充值领取积分奖励
i3k_sbean.role_back_pay_take_reward_res = i3k_class("role_back_pay_take_reward_res")
function i3k_sbean.role_back_pay_take_reward_res:ctor()
	self._pname_ = "role_back_pay_take_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.role_back_pay_take_reward_res:clone()
	return clone(self)
end

function i3k_sbean.role_back_pay_take_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_back_pay_take_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步聊天框
i3k_sbean.role_chat_box_sync_on_login = i3k_class("role_chat_box_sync_on_login")
function i3k_sbean.role_chat_box_sync_on_login:ctor()
	self._pname_ = "role_chat_box_sync_on_login"
	--self.currId:		int32	
	--self.chatBoxIds:		map[int32, int32]	
end

function i3k_sbean.role_chat_box_sync_on_login:clone()
	return clone(self)
end

function i3k_sbean.role_chat_box_sync_on_login:decode(is)
	is:popString()
	self.currId = is:popNumber()
	self.chatBoxIds = is:popNumberNumberMap()
end

function i3k_sbean.role_chat_box_sync_on_login:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.currId)
	os:pushNumberNumberMap(self.chatBoxIds)
end


-- 聊天框列表同步
i3k_sbean.role_chat_box_sync_res = i3k_class("role_chat_box_sync_res")
function i3k_sbean.role_chat_box_sync_res:ctor()
	self._pname_ = "role_chat_box_sync_res"
	--self.currId:		int32	
	--self.chatBoxIds:		map[int32, int32]	
end

function i3k_sbean.role_chat_box_sync_res:clone()
	return clone(self)
end

function i3k_sbean.role_chat_box_sync_res:decode(is)
	is:popString()
	self.currId = is:popNumber()
	self.chatBoxIds = is:popNumberNumberMap()
end

function i3k_sbean.role_chat_box_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.currId)
	os:pushNumberNumberMap(self.chatBoxIds)
end


-- 更换当前使用的聊天框
i3k_sbean.role_chat_box_change_res = i3k_class("role_chat_box_change_res")
function i3k_sbean.role_chat_box_change_res:ctor()
	self._pname_ = "role_chat_box_change_res"
	--self.ok:		int32	
end

function i3k_sbean.role_chat_box_change_res:clone()
	return clone(self)
end

function i3k_sbean.role_chat_box_change_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.role_chat_box_change_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.role_robbermonster = i3k_class("role_robbermonster")
function i3k_sbean.role_robbermonster:ctor()
	self._pname_ = "role_robbermonster"
	--self.dayRefreshTimes:		int32	
end

function i3k_sbean.role_robbermonster:clone()
	return clone(self)
end

function i3k_sbean.role_robbermonster:decode(is)
	is:popString()
	self.dayRefreshTimes = is:popNumber()
end

function i3k_sbean.role_robbermonster:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayRefreshTimes)
end


-- 江洋大盗信息同步
i3k_sbean.robbermonster_sync_res = i3k_class("robbermonster_sync_res")
function i3k_sbean.robbermonster_sync_res:ctor()
	self._pname_ = "robbermonster_sync_res"
	--self.robbers:		vector[RobberMonster]	
end

function i3k_sbean.robbermonster_sync_res:clone()
	return clone(self)
end

function i3k_sbean.robbermonster_sync_res:decode(is)
	is:popString()
	self.robbers = is:popList(i3k_sbean.RobberMonster)
end

function i3k_sbean.robbermonster_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.robbers)
end


-- 江洋大盗刷新
i3k_sbean.robbermonster_refresh_res = i3k_class("robbermonster_refresh_res")
function i3k_sbean.robbermonster_refresh_res:ctor()
	self._pname_ = "robbermonster_refresh_res"
	--self.robbers:		vector[RobberMonster]	
end

function i3k_sbean.robbermonster_refresh_res:clone()
	return clone(self)
end

function i3k_sbean.robbermonster_refresh_res:decode(is)
	is:popString()
	self.robbers = is:popList(i3k_sbean.RobberMonster)
end

function i3k_sbean.robbermonster_refresh_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.robbers)
end


-- 传送到大盗
i3k_sbean.robbermonster_tele_res = i3k_class("robbermonster_tele_res")
function i3k_sbean.robbermonster_tele_res:ctor()
	self._pname_ = "robbermonster_tele_res"
	--self.ok:		int32	
end

function i3k_sbean.robbermonster_tele_res:clone()
	return clone(self)
end

function i3k_sbean.robbermonster_tele_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.robbermonster_tele_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 黑市信息同步
i3k_sbean.black_market_sync_res = i3k_class("black_market_sync_res")
function i3k_sbean.black_market_sync_res:ctor()
	self._pname_ = "black_market_sync_res"
	--self.goods:		vector[BlackMarketGood]	
	--self.history:		vector[BlackMarketGoodHis]	
	--self.unAddGroupIds:		set[int32]	
end

function i3k_sbean.black_market_sync_res:clone()
	return clone(self)
end

function i3k_sbean.black_market_sync_res:decode(is)
	is:popString()
	self.goods = is:popList(i3k_sbean.BlackMarketGood)
	self.history = is:popList(i3k_sbean.BlackMarketGoodHis)
	self.unAddGroupIds = is:popNumberSet()
end

function i3k_sbean.black_market_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.goods)
	os:pushList(self.history)
	os:pushNumberSet(self.unAddGroupIds)
end


-- 黑市出价
i3k_sbean.black_market_price_res = i3k_class("black_market_price_res")
function i3k_sbean.black_market_price_res:ctor()
	self._pname_ = "black_market_price_res"
	--self.ok:		int32	
end

function i3k_sbean.black_market_price_res:clone()
	return clone(self)
end

function i3k_sbean.black_market_price_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.black_market_price_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步帮派工资信息
i3k_sbean.sect_salary_sync_res = i3k_class("sect_salary_sync_res")
function i3k_sbean.sect_salary_sync_res:ctor()
	self._pname_ = "sect_salary_sync_res"
	--self.sectDayVit:		int32	
	--self.roleData:		MemberSectSalaryData	
end

function i3k_sbean.sect_salary_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_salary_sync_res:decode(is)
	is:popString()
	self.sectDayVit = is:popNumber()
	self.roleData = is:pop(i3k_sbean.MemberSectSalaryData)
end

function i3k_sbean.sect_salary_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectDayVit)
	os:push(self.roleData)
end


-- 领取基础工资
i3k_sbean.sect_base_salary_take_res = i3k_class("sect_base_salary_take_res")
function i3k_sbean.sect_base_salary_take_res:ctor()
	self._pname_ = "sect_base_salary_take_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_base_salary_take_res:clone()
	return clone(self)
end

function i3k_sbean.sect_base_salary_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_base_salary_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取活跃工资
i3k_sbean.sect_activity_salary_take_res = i3k_class("sect_activity_salary_take_res")
function i3k_sbean.sect_activity_salary_take_res:ctor()
	self._pname_ = "sect_activity_salary_take_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_activity_salary_take_res:clone()
	return clone(self)
end

function i3k_sbean.sect_activity_salary_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_activity_salary_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步服务器封印是否被打破
i3k_sbean.breaklevel_state = i3k_class("breaklevel_state")
function i3k_sbean.breaklevel_state:ctor()
	self._pname_ = "breaklevel_state"
	--self.isBreak:		int32	
end

function i3k_sbean.breaklevel_state:clone()
	return clone(self)
end

function i3k_sbean.breaklevel_state:decode(is)
	is:popString()
	self.isBreak = is:popNumber()
end

function i3k_sbean.breaklevel_state:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isBreak)
end


-- 同步打破封印信息
i3k_sbean.breaklevel_sync_res = i3k_class("breaklevel_sync_res")
function i3k_sbean.breaklevel_sync_res:ctor()
	self._pname_ = "breaklevel_sync_res"
	--self.dayDobateTimes:		int32	
	--self.dayAddFame:		int32	
	--self.exp:		int32	
end

function i3k_sbean.breaklevel_sync_res:clone()
	return clone(self)
end

function i3k_sbean.breaklevel_sync_res:decode(is)
	is:popString()
	self.dayDobateTimes = is:popNumber()
	self.dayAddFame = is:popNumber()
	self.exp = is:popNumber()
end

function i3k_sbean.breaklevel_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayDobateTimes)
	os:pushNumber(self.dayAddFame)
	os:pushNumber(self.exp)
end


-- 打破封印捐赠
i3k_sbean.breaklevel_donate_res = i3k_class("breaklevel_donate_res")
function i3k_sbean.breaklevel_donate_res:ctor()
	self._pname_ = "breaklevel_donate_res"
	--self.ok:		int32	
end

function i3k_sbean.breaklevel_donate_res:clone()
	return clone(self)
end

function i3k_sbean.breaklevel_donate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.breaklevel_donate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 声望商城同步协议
i3k_sbean.fame_shopsync_res = i3k_class("fame_shopsync_res")
function i3k_sbean.fame_shopsync_res:ctor()
	self._pname_ = "fame_shopsync_res"
	--self.info:		ShopInfo	
	--self.currency:		int32	
	--self.discount:		ShopDiscountInfo	
end

function i3k_sbean.fame_shopsync_res:clone()
	return clone(self)
end

function i3k_sbean.fame_shopsync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
	self.currency = is:popNumber()
	self.discount = is:pop(i3k_sbean.ShopDiscountInfo)
end

function i3k_sbean.fame_shopsync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumber(self.currency)
	os:push(self.discount)
end


-- 声望商城刷新协议
i3k_sbean.fame_shoprefresh_res = i3k_class("fame_shoprefresh_res")
function i3k_sbean.fame_shoprefresh_res:ctor()
	self._pname_ = "fame_shoprefresh_res"
	--self.info:		ShopInfo	
end

function i3k_sbean.fame_shoprefresh_res:clone()
	return clone(self)
end

function i3k_sbean.fame_shoprefresh_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
end

function i3k_sbean.fame_shoprefresh_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 声望商城买商品协议
i3k_sbean.fame_shopbuy_res = i3k_class("fame_shopbuy_res")
function i3k_sbean.fame_shopbuy_res:ctor()
	self._pname_ = "fame_shopbuy_res"
	--self.ok:		int32	
end

function i3k_sbean.fame_shopbuy_res:clone()
	return clone(self)
end

function i3k_sbean.fame_shopbuy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fame_shopbuy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.tournament_info = i3k_class("tournament_info")
function i3k_sbean.tournament_info:ctor()
	self._pname_ = "tournament_info"
	--self.endTime:		int32	
end

function i3k_sbean.tournament_info:clone()
	return clone(self)
end

function i3k_sbean.tournament_info:decode(is)
	is:popString()
	self.endTime = is:popNumber()
end

function i3k_sbean.tournament_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.endTime)
end


i3k_sbean.role_fightteam = i3k_class("role_fightteam")
function i3k_sbean.role_fightteam:ctor()
	self._pname_ = "role_fightteam"
	--self.teamID:		int32	
	--self.teamName:		string	
	--self.state:		int32	
	--self.joinTime:		int32	
	--self.leaderID:		int32	
end

function i3k_sbean.role_fightteam:clone()
	return clone(self)
end

function i3k_sbean.role_fightteam:decode(is)
	is:popString()
	self.teamID = is:popNumber()
	self.teamName = is:popString()
	self.state = is:popNumber()
	self.joinTime = is:popNumber()
	self.leaderID = is:popNumber()
end

function i3k_sbean.role_fightteam:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.teamID)
	os:pushString(self.teamName)
	os:pushNumber(self.state)
	os:pushNumber(self.joinTime)
	os:pushNumber(self.leaderID)
end


i3k_sbean.role_tournament_honor = i3k_class("role_tournament_honor")
function i3k_sbean.role_tournament_honor:ctor()
	self._pname_ = "role_tournament_honor"
	--self.honor:		int32	
end

function i3k_sbean.role_tournament_honor:clone()
	return clone(self)
end

function i3k_sbean.role_tournament_honor:decode(is)
	is:popString()
	self.honor = is:popNumber()
end

function i3k_sbean.role_tournament_honor:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.honor)
end


-- 战队信息通知
i3k_sbean.fightteam_info = i3k_class("fightteam_info")
function i3k_sbean.fightteam_info:ctor()
	self._pname_ = "fightteam_info"
	--self.info:		FightTeamInfo	
end

function i3k_sbean.fightteam_info:clone()
	return clone(self)
end

function i3k_sbean.fightteam_info:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.FightTeamInfo)
end

function i3k_sbean.fightteam_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 队员加入通知
i3k_sbean.fightteam_join = i3k_class("fightteam_join")
function i3k_sbean.fightteam_join:ctor()
	self._pname_ = "fightteam_join"
	--self.member:		FightTeamMember	
end

function i3k_sbean.fightteam_join:clone()
	return clone(self)
end

function i3k_sbean.fightteam_join:decode(is)
	is:popString()
	self.member = is:pop(i3k_sbean.FightTeamMember)
end

function i3k_sbean.fightteam_join:encode(os)
	os:pushString(self._pname_)
	os:push(self.member)
end


-- 队员被踢通知
i3k_sbean.fightteam_kick = i3k_class("fightteam_kick")
function i3k_sbean.fightteam_kick:ctor()
	self._pname_ = "fightteam_kick"
	--self.memberID:		int32	
	--self.memberName:		string	
end

function i3k_sbean.fightteam_kick:clone()
	return clone(self)
end

function i3k_sbean.fightteam_kick:decode(is)
	is:popString()
	self.memberID = is:popNumber()
	self.memberName = is:popString()
end

function i3k_sbean.fightteam_kick:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.memberID)
	os:pushString(self.memberName)
end


-- 战队解散通知
i3k_sbean.fightteam_dismiss = i3k_class("fightteam_dismiss")
function i3k_sbean.fightteam_dismiss:ctor()
	self._pname_ = "fightteam_dismiss"
end

function i3k_sbean.fightteam_dismiss:decode(is)
	is:popString()
end

function i3k_sbean.fightteam_dismiss:encode(os)
	os:pushString(self._pname_)
end


-- 战队信息同步
i3k_sbean.fightteam_sync_res = i3k_class("fightteam_sync_res")
function i3k_sbean.fightteam_sync_res:ctor()
	self._pname_ = "fightteam_sync_res"
	--self.info:		FightTeamInfo	
	--self.season:		TournamentSeason	
	--self.honor:		int32	
	--self.group:		FightTeamGroup	
	--self.roleRank:		int32	
	--self.teamResult:		int32	
	--self.roleReward:		int32	
	--self.teamReward:		int32	
	--self.seasonJoinTeamTimes:		int32	
	--self.seasonGainHonorTimes:		int32	
end

function i3k_sbean.fightteam_sync_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.FightTeamInfo)
	self.season = is:pop(i3k_sbean.TournamentSeason)
	self.honor = is:popNumber()
	self.group = is:pop(i3k_sbean.FightTeamGroup)
	self.roleRank = is:popNumber()
	self.teamResult = is:popNumber()
	self.roleReward = is:popNumber()
	self.teamReward = is:popNumber()
	self.seasonJoinTeamTimes = is:popNumber()
	self.seasonGainHonorTimes = is:popNumber()
end

function i3k_sbean.fightteam_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:push(self.season)
	os:pushNumber(self.honor)
	os:push(self.group)
	os:pushNumber(self.roleRank)
	os:pushNumber(self.teamResult)
	os:pushNumber(self.roleReward)
	os:pushNumber(self.teamReward)
	os:pushNumber(self.seasonJoinTeamTimes)
	os:pushNumber(self.seasonGainHonorTimes)
end


-- 创建战队
i3k_sbean.fightteam_create_res = i3k_class("fightteam_create_res")
function i3k_sbean.fightteam_create_res:ctor()
	self._pname_ = "fightteam_create_res"
	--self.ok:		int32	
	--self.info:		FightTeamInfo	
end

function i3k_sbean.fightteam_create_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_create_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.FightTeamInfo)
end

function i3k_sbean.fightteam_create_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 解散战队
i3k_sbean.fightteam_dismiss_res = i3k_class("fightteam_dismiss_res")
function i3k_sbean.fightteam_dismiss_res:ctor()
	self._pname_ = "fightteam_dismiss_res"
	--self.ok:		int32	
end

function i3k_sbean.fightteam_dismiss_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_dismiss_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fightteam_dismiss_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 队长踢人
i3k_sbean.fightteam_kick_res = i3k_class("fightteam_kick_res")
function i3k_sbean.fightteam_kick_res:ctor()
	self._pname_ = "fightteam_kick_res"
	--self.ok:		int32	
end

function i3k_sbean.fightteam_kick_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_kick_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fightteam_kick_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 邀请加入战队
i3k_sbean.fightteam_invite_res = i3k_class("fightteam_invite_res")
function i3k_sbean.fightteam_invite_res:ctor()
	self._pname_ = "fightteam_invite_res"
	--self.ok:		int32	
end

function i3k_sbean.fightteam_invite_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_invite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fightteam_invite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 收到加入战队邀请
i3k_sbean.fightteam_invite_forward = i3k_class("fightteam_invite_forward")
function i3k_sbean.fightteam_invite_forward:ctor()
	self._pname_ = "fightteam_invite_forward"
	--self.roleID:		int32	
	--self.roleName:		string	
end

function i3k_sbean.fightteam_invite_forward:clone()
	return clone(self)
end

function i3k_sbean.fightteam_invite_forward:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
end

function i3k_sbean.fightteam_invite_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
end


-- 战队邀请响应
i3k_sbean.fightteam_invite_response_res = i3k_class("fightteam_invite_response_res")
function i3k_sbean.fightteam_invite_response_res:ctor()
	self._pname_ = "fightteam_invite_response_res"
	--self.ok:		int32	
	--self.info:		FightTeamInfo	
end

function i3k_sbean.fightteam_invite_response_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_invite_response_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.FightTeamInfo)
end

function i3k_sbean.fightteam_invite_response_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 通知队长邀请响应
i3k_sbean.fightteam_invite_response_forward = i3k_class("fightteam_invite_response_forward")
function i3k_sbean.fightteam_invite_response_forward:ctor()
	self._pname_ = "fightteam_invite_response_forward"
	--self.roleID:		int32	
	--self.roleName:		string	
	--self.response:		int32	
end

function i3k_sbean.fightteam_invite_response_forward:clone()
	return clone(self)
end

function i3k_sbean.fightteam_invite_response_forward:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roleName = is:popString()
	self.response = is:popNumber()
end

function i3k_sbean.fightteam_invite_response_forward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushString(self.roleName)
	os:pushNumber(self.response)
end


i3k_sbean.fightteam_queryf_res = i3k_class("fightteam_queryf_res")
function i3k_sbean.fightteam_queryf_res:ctor()
	self._pname_ = "fightteam_queryf_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.fightteam_queryf_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_queryf_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.fightteam_queryf_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 队长报名海选赛
i3k_sbean.fightteam_joinqualifying_res = i3k_class("fightteam_joinqualifying_res")
function i3k_sbean.fightteam_joinqualifying_res:ctor()
	self._pname_ = "fightteam_joinqualifying_res"
	--self.ok:		int32	
end

function i3k_sbean.fightteam_joinqualifying_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_joinqualifying_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fightteam_joinqualifying_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 队长取消报名海选赛
i3k_sbean.fightteam_quitqualifying_res = i3k_class("fightteam_quitqualifying_res")
function i3k_sbean.fightteam_quitqualifying_res:ctor()
	self._pname_ = "fightteam_quitqualifying_res"
	--self.ok:		int32	
end

function i3k_sbean.fightteam_quitqualifying_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_quitqualifying_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fightteam_quitqualifying_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.fightteam_state_update = i3k_class("fightteam_state_update")
function i3k_sbean.fightteam_state_update:ctor()
	self._pname_ = "fightteam_state_update"
	--self.state:		int32	
end

function i3k_sbean.fightteam_state_update:clone()
	return clone(self)
end

function i3k_sbean.fightteam_state_update:decode(is)
	is:popString()
	self.state = is:popNumber()
end

function i3k_sbean.fightteam_state_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.state)
end


i3k_sbean.fteam_member_state = i3k_class("fteam_member_state")
function i3k_sbean.fteam_member_state:ctor()
	self._pname_ = "fteam_member_state"
	--self.roleID:		int32	
	--self.state:		int32	
end

function i3k_sbean.fteam_member_state:clone()
	return clone(self)
end

function i3k_sbean.fteam_member_state:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.fteam_member_state:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.state)
end


i3k_sbean.tournament_map_start = i3k_class("tournament_map_start")
function i3k_sbean.tournament_map_start:ctor()
	self._pname_ = "tournament_map_start"
end

function i3k_sbean.tournament_map_start:decode(is)
	is:popString()
end

function i3k_sbean.tournament_map_start:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.tournament_map_result = i3k_class("tournament_map_result")
function i3k_sbean.tournament_map_result:ctor()
	self._pname_ = "tournament_map_result"
	--self.result:		TournamentMapResult	
end

function i3k_sbean.tournament_map_result:clone()
	return clone(self)
end

function i3k_sbean.tournament_map_result:decode(is)
	is:popString()
	self.result = is:pop(i3k_sbean.TournamentMapResult)
end

function i3k_sbean.tournament_map_result:encode(os)
	os:pushString(self._pname_)
	os:push(self.result)
end


i3k_sbean.tournament_teamgroup_sync_res = i3k_class("tournament_teamgroup_sync_res")
function i3k_sbean.tournament_teamgroup_sync_res:ctor()
	self._pname_ = "tournament_teamgroup_sync_res"
	--self.kingGroups:		vector[FightTeamGroup]	
	--self.kingGinalGroup:		FightTeamGroup	
	--self.emperorGroups:		vector[FightTeamGroup]	
	--self.emperorFinalGroup:		FightTeamGroup	
end

function i3k_sbean.tournament_teamgroup_sync_res:clone()
	return clone(self)
end

function i3k_sbean.tournament_teamgroup_sync_res:decode(is)
	is:popString()
	self.kingGroups = is:popList(i3k_sbean.FightTeamGroup)
	self.kingGinalGroup = is:pop(i3k_sbean.FightTeamGroup)
	self.emperorGroups = is:popList(i3k_sbean.FightTeamGroup)
	self.emperorFinalGroup = is:pop(i3k_sbean.FightTeamGroup)
end

function i3k_sbean.tournament_teamgroup_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.kingGroups)
	os:push(self.kingGinalGroup)
	os:pushList(self.emperorGroups)
	os:push(self.emperorFinalGroup)
end


-- 队员锦标赛签到
i3k_sbean.fightteam_joinknockout_res = i3k_class("fightteam_joinknockout_res")
function i3k_sbean.fightteam_joinknockout_res:ctor()
	self._pname_ = "fightteam_joinknockout_res"
	--self.ok:		int32	
end

function i3k_sbean.fightteam_joinknockout_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_joinknockout_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fightteam_joinknockout_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.fightteam_querym_res = i3k_class("fightteam_querym_res")
function i3k_sbean.fightteam_querym_res:ctor()
	self._pname_ = "fightteam_querym_res"
	--self.overview:		FightTeamMemberOverview	
end

function i3k_sbean.fightteam_querym_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_querym_res:decode(is)
	is:popString()
	self.overview = is:pop(i3k_sbean.FightTeamMemberOverview)
end

function i3k_sbean.fightteam_querym_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.overview)
end


-- 同步战队排行榜
i3k_sbean.fightteamrank_sync_res = i3k_class("fightteamrank_sync_res")
function i3k_sbean.fightteamrank_sync_res:ctor()
	self._pname_ = "fightteamrank_sync_res"
	--self.fightteamresult:		vector[RankBrief]	
end

function i3k_sbean.fightteamrank_sync_res:clone()
	return clone(self)
end

function i3k_sbean.fightteamrank_sync_res:decode(is)
	is:popString()
	self.fightteamresult = is:popList(i3k_sbean.RankBrief)
end

function i3k_sbean.fightteamrank_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.fightteamresult)
end


-- 获取战队排行榜列表
i3k_sbean.fightteamrank_get_res = i3k_class("fightteamrank_get_res")
function i3k_sbean.fightteamrank_get_res:ctor()
	self._pname_ = "fightteamrank_get_res"
	--self.ok:		int32	
	--self.ranks:		vector[RankFightTeam]	
end

function i3k_sbean.fightteamrank_get_res:clone()
	return clone(self)
end

function i3k_sbean.fightteamrank_get_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankFightTeam)
end

function i3k_sbean.fightteamrank_get_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.ranks)
end


-- 个人荣誉奖励
i3k_sbean.tournament_take_rolereward_res = i3k_class("tournament_take_rolereward_res")
function i3k_sbean.tournament_take_rolereward_res:ctor()
	self._pname_ = "tournament_take_rolereward_res"
	--self.ok:		int32	
end

function i3k_sbean.tournament_take_rolereward_res:clone()
	return clone(self)
end

function i3k_sbean.tournament_take_rolereward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.tournament_take_rolereward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 锦标赛奖励
i3k_sbean.tournament_take_teamreward_res = i3k_class("tournament_take_teamreward_res")
function i3k_sbean.tournament_take_teamreward_res:ctor()
	self._pname_ = "tournament_take_teamreward_res"
	--self.ok:		int32	
end

function i3k_sbean.tournament_take_teamreward_res:clone()
	return clone(self)
end

function i3k_sbean.tournament_take_teamreward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.tournament_take_teamreward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 锦标赛结果
i3k_sbean.tournament_knockout_result = i3k_class("tournament_knockout_result")
function i3k_sbean.tournament_knockout_result:ctor()
	self._pname_ = "tournament_knockout_result"
	--self.result:		int32	
end

function i3k_sbean.tournament_knockout_result:clone()
	return clone(self)
end

function i3k_sbean.tournament_knockout_result:decode(is)
	is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.tournament_knockout_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.result)
end


-- 锦标赛对手查询
i3k_sbean.fightteam_selfgroup_res = i3k_class("fightteam_selfgroup_res")
function i3k_sbean.fightteam_selfgroup_res:ctor()
	self._pname_ = "fightteam_selfgroup_res"
	--self.group:		FightTeamGroup	
end

function i3k_sbean.fightteam_selfgroup_res:clone()
	return clone(self)
end

function i3k_sbean.fightteam_selfgroup_res:decode(is)
	is:popString()
	self.group = is:pop(i3k_sbean.FightTeamGroup)
end

function i3k_sbean.fightteam_selfgroup_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.group)
end


-- 锦标赛对手签到状态通知
i3k_sbean.fightteam_enemy_join = i3k_class("fightteam_enemy_join")
function i3k_sbean.fightteam_enemy_join:ctor()
	self._pname_ = "fightteam_enemy_join"
	--self.join:		int32	
end

function i3k_sbean.fightteam_enemy_join:clone()
	return clone(self)
end

function i3k_sbean.fightteam_enemy_join:decode(is)
	is:popString()
	self.join = is:popNumber()
end

function i3k_sbean.fightteam_enemy_join:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.join)
end


-- 进入观战
i3k_sbean.tournament_guard_res = i3k_class("tournament_guard_res")
function i3k_sbean.tournament_guard_res:ctor()
	self._pname_ = "tournament_guard_res"
	--self.ok:		int32	
end

function i3k_sbean.tournament_guard_res:clone()
	return clone(self)
end

function i3k_sbean.tournament_guard_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.tournament_guard_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 刷新脉象
i3k_sbean.meridian_refresh_holebuff_res = i3k_class("meridian_refresh_holebuff_res")
function i3k_sbean.meridian_refresh_holebuff_res:ctor()
	self._pname_ = "meridian_refresh_holebuff_res"
	--self.ok:		int32	
	--self.holes:		map[int32, DBMeridianHole]	
end

function i3k_sbean.meridian_refresh_holebuff_res:clone()
	return clone(self)
end

function i3k_sbean.meridian_refresh_holebuff_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.holes = is:popNumberMap(i3k_sbean.DBMeridianHole)
end

function i3k_sbean.meridian_refresh_holebuff_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberMap(self.holes)
end


-- 冲穴
i3k_sbean.meridian_break_hole_res = i3k_class("meridian_break_hole_res")
function i3k_sbean.meridian_break_hole_res:ctor()
	self._pname_ = "meridian_break_hole_res"
	--self.ok:		int32	
	--self.addEnergy:		vector[BreakHoleAdd]	
end

function i3k_sbean.meridian_break_hole_res:clone()
	return clone(self)
end

function i3k_sbean.meridian_break_hole_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.addEnergy = is:popList(i3k_sbean.BreakHoleAdd)
end

function i3k_sbean.meridian_break_hole_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.addEnergy)
end


-- 潜能升级
i3k_sbean.meridian_potential_uplevel_res = i3k_class("meridian_potential_uplevel_res")
function i3k_sbean.meridian_potential_uplevel_res:ctor()
	self._pname_ = "meridian_potential_uplevel_res"
	--self.ok:		int32	
end

function i3k_sbean.meridian_potential_uplevel_res:clone()
	return clone(self)
end

function i3k_sbean.meridian_potential_uplevel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.meridian_potential_uplevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步潜能
i3k_sbean.role_potentials = i3k_class("role_potentials")
function i3k_sbean.role_potentials:ctor()
	self._pname_ = "role_potentials"
	--self.meridians:		map[int32, DBMeridian]	
	--self.potential:		map[int32, int32]	
end

function i3k_sbean.role_potentials:clone()
	return clone(self)
end

function i3k_sbean.role_potentials:decode(is)
	is:popString()
	self.meridians = is:popNumberMap(i3k_sbean.DBMeridian)
	self.potential = is:popNumberNumberMap()
end

function i3k_sbean.role_potentials:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.meridians)
	os:pushNumberNumberMap(self.potential)
end


-- 帮派招募令信息
i3k_sbean.sect_msg_info_res = i3k_class("sect_msg_info_res")
function i3k_sbean.sect_msg_info_res:ctor()
	self._pname_ = "sect_msg_info_res"
	--self.icon:		int32	
	--self.leader:		string	
	--self.level:		int32	
	--self.memberNum:		int32	
	--self.vit:		int32	
	--self.enterLvl:		int32	
end

function i3k_sbean.sect_msg_info_res:clone()
	return clone(self)
end

function i3k_sbean.sect_msg_info_res:decode(is)
	is:popString()
	self.icon = is:popNumber()
	self.leader = is:popString()
	self.level = is:popNumber()
	self.memberNum = is:popNumber()
	self.vit = is:popNumber()
	self.enterLvl = is:popNumber()
end

function i3k_sbean.sect_msg_info_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.icon)
	os:pushString(self.leader)
	os:pushNumber(self.level)
	os:pushNumber(self.memberNum)
	os:pushNumber(self.vit)
	os:pushNumber(self.enterLvl)
end


-- 登录时同步书包
i3k_sbean.role_bookbag = i3k_class("role_bookbag")
function i3k_sbean.role_bookbag:ctor()
	self._pname_ = "role_bookbag"
	--self.horseBooks:		map[int32, int32]	
	--self.petBooks:		map[int32, int32]	
end

function i3k_sbean.role_bookbag:clone()
	return clone(self)
end

function i3k_sbean.role_bookbag:decode(is)
	is:popString()
	self.horseBooks = is:popNumberNumberMap()
	self.petBooks = is:popNumberNumberMap()
end

function i3k_sbean.role_bookbag:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.horseBooks)
	os:pushNumberNumberMap(self.petBooks)
end


-- 骑术书存入
i3k_sbean.horsebook_push_res = i3k_class("horsebook_push_res")
function i3k_sbean.horsebook_push_res:ctor()
	self._pname_ = "horsebook_push_res"
	--self.ok:		int32	
end

function i3k_sbean.horsebook_push_res:clone()
	return clone(self)
end

function i3k_sbean.horsebook_push_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horsebook_push_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 骑术书取出
i3k_sbean.horsebook_pop_res = i3k_class("horsebook_pop_res")
function i3k_sbean.horsebook_pop_res:ctor()
	self._pname_ = "horsebook_pop_res"
	--self.ok:		int32	
end

function i3k_sbean.horsebook_pop_res:clone()
	return clone(self)
end

function i3k_sbean.horsebook_pop_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.horsebook_pop_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 兽决存入
i3k_sbean.petbook_push_res = i3k_class("petbook_push_res")
function i3k_sbean.petbook_push_res:ctor()
	self._pname_ = "petbook_push_res"
	--self.ok:		int32	
end

function i3k_sbean.petbook_push_res:clone()
	return clone(self)
end

function i3k_sbean.petbook_push_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.petbook_push_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 兽决取出
i3k_sbean.petbook_pop_res = i3k_class("petbook_pop_res")
function i3k_sbean.petbook_pop_res:ctor()
	self._pname_ = "petbook_pop_res"
	--self.ok:		int32	
end

function i3k_sbean.petbook_pop_res:clone()
	return clone(self)
end

function i3k_sbean.petbook_pop_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.petbook_pop_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结婚证点赞
i3k_sbean.marriage_card_sign_res = i3k_class("marriage_card_sign_res")
function i3k_sbean.marriage_card_sign_res:ctor()
	self._pname_ = "marriage_card_sign_res"
	--self.ok:		int32	
end

function i3k_sbean.marriage_card_sign_res:clone()
	return clone(self)
end

function i3k_sbean.marriage_card_sign_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.marriage_card_sign_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结婚证同步
i3k_sbean.marriage_card_sync_res = i3k_class("marriage_card_sync_res")
function i3k_sbean.marriage_card_sync_res:ctor()
	self._pname_ = "marriage_card_sync_res"
	--self.info:		MarriageCard	
end

function i3k_sbean.marriage_card_sync_res:clone()
	return clone(self)
end

function i3k_sbean.marriage_card_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.MarriageCard)
end

function i3k_sbean.marriage_card_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 同步被抢次数
i3k_sbean.be_robbed_times = i3k_class("be_robbed_times")
function i3k_sbean.be_robbed_times:ctor()
	self._pname_ = "be_robbed_times"
	--self.time:		int32	
end

function i3k_sbean.be_robbed_times:clone()
	return clone(self)
end

function i3k_sbean.be_robbed_times:decode(is)
	is:popString()
	self.time = is:popNumber()
end

function i3k_sbean.be_robbed_times:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.time)
end


-- 愿望卡片登陆同步
i3k_sbean.christmas_cards_login_sync_res = i3k_class("christmas_cards_login_sync_res")
function i3k_sbean.christmas_cards_login_sync_res:ctor()
	self._pname_ = "christmas_cards_login_sync_res"
	--self.wishUpdateTime:		int32	
	--self.dayCommentCnt:		int32	
	--self.overview:		ChristmasCardOverview	
end

function i3k_sbean.christmas_cards_login_sync_res:clone()
	return clone(self)
end

function i3k_sbean.christmas_cards_login_sync_res:decode(is)
	is:popString()
	self.wishUpdateTime = is:popNumber()
	self.dayCommentCnt = is:popNumber()
	self.overview = is:pop(i3k_sbean.ChristmasCardOverview)
end

function i3k_sbean.christmas_cards_login_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wishUpdateTime)
	os:pushNumber(self.dayCommentCnt)
	os:push(self.overview)
end


-- 愿望卡片同步
i3k_sbean.christmas_cards_sync_res = i3k_class("christmas_cards_sync_res")
function i3k_sbean.christmas_cards_sync_res:ctor()
	self._pname_ = "christmas_cards_sync_res"
	--self.ok:		int32	
	--self.wishUpdateTime:		int32	
	--self.dayCommentCnt:		int32	
	--self.overview:		ChristmasCardOverview	
end

function i3k_sbean.christmas_cards_sync_res:clone()
	return clone(self)
end

function i3k_sbean.christmas_cards_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.wishUpdateTime = is:popNumber()
	self.dayCommentCnt = is:popNumber()
	self.overview = is:pop(i3k_sbean.ChristmasCardOverview)
end

function i3k_sbean.christmas_cards_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.wishUpdateTime)
	os:pushNumber(self.dayCommentCnt)
	os:push(self.overview)
end


-- 请求愿望列表
i3k_sbean.christmas_cards_get_list_res = i3k_class("christmas_cards_get_list_res")
function i3k_sbean.christmas_cards_get_list_res:ctor()
	self._pname_ = "christmas_cards_get_list_res"
	--self.list:		vector[ChristmasCardOverview]	
end

function i3k_sbean.christmas_cards_get_list_res:clone()
	return clone(self)
end

function i3k_sbean.christmas_cards_get_list_res:decode(is)
	is:popString()
	self.list = is:popList(i3k_sbean.ChristmasCardOverview)
end

function i3k_sbean.christmas_cards_get_list_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.list)
end


-- 许愿返回
i3k_sbean.christmas_cards_wish_res = i3k_class("christmas_cards_wish_res")
function i3k_sbean.christmas_cards_wish_res:ctor()
	self._pname_ = "christmas_cards_wish_res"
	--self.ok:		int32	
end

function i3k_sbean.christmas_cards_wish_res:clone()
	return clone(self)
end

function i3k_sbean.christmas_cards_wish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.christmas_cards_wish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 送花返回
i3k_sbean.christmas_cards_comment_res = i3k_class("christmas_cards_comment_res")
function i3k_sbean.christmas_cards_comment_res:ctor()
	self._pname_ = "christmas_cards_comment_res"
	--self.ok:		int32	
end

function i3k_sbean.christmas_cards_comment_res:clone()
	return clone(self)
end

function i3k_sbean.christmas_cards_comment_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.christmas_cards_comment_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解锁镖车皮肤
i3k_sbean.sect_deliver_skin_unlock_res = i3k_class("sect_deliver_skin_unlock_res")
function i3k_sbean.sect_deliver_skin_unlock_res:ctor()
	self._pname_ = "sect_deliver_skin_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_deliver_skin_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_skin_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_deliver_skin_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 选择镖车皮肤
i3k_sbean.sect_deliver_skin_select_res = i3k_class("sect_deliver_skin_select_res")
function i3k_sbean.sect_deliver_skin_select_res:ctor()
	self._pname_ = "sect_deliver_skin_select_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_deliver_skin_select_res:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_skin_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_deliver_skin_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 周常任务信息同步
i3k_sbean.week_task_sync_res = i3k_class("week_task_sync_res")
function i3k_sbean.week_task_sync_res:ctor()
	self._pname_ = "week_task_sync_res"
	--self.data:		WeekTaskData	
	--self.gaintBossOpenTime:		set[int32]	
end

function i3k_sbean.week_task_sync_res:clone()
	return clone(self)
end

function i3k_sbean.week_task_sync_res:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.WeekTaskData)
	self.gaintBossOpenTime = is:popNumberSet()
end

function i3k_sbean.week_task_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
	os:pushNumberSet(self.gaintBossOpenTime)
end


-- 完成周常任务
i3k_sbean.week_task_finish_res = i3k_class("week_task_finish_res")
function i3k_sbean.week_task_finish_res:ctor()
	self._pname_ = "week_task_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.week_task_finish_res:clone()
	return clone(self)
end

function i3k_sbean.week_task_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.week_task_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取周常任务积分奖励
i3k_sbean.week_task_score_reward_take_res = i3k_class("week_task_score_reward_take_res")
function i3k_sbean.week_task_score_reward_take_res:ctor()
	self._pname_ = "week_task_score_reward_take_res"
	--self.ok:		int32	
	--self.drops:		map[int32, int32]	
end

function i3k_sbean.week_task_score_reward_take_res:clone()
	return clone(self)
end

function i3k_sbean.week_task_score_reward_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popNumberNumberMap()
end

function i3k_sbean.week_task_score_reward_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.drops)
end


-- 使用示爱道具
i3k_sbean.show_love_item_use_res = i3k_class("show_love_item_use_res")
function i3k_sbean.show_love_item_use_res:ctor()
	self._pname_ = "show_love_item_use_res"
	--self.ok:		int32	
	--self.cdEndTime:		int32	
end

function i3k_sbean.show_love_item_use_res:clone()
	return clone(self)
end

function i3k_sbean.show_love_item_use_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.cdEndTime = is:popNumber()
end

function i3k_sbean.show_love_item_use_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.cdEndTime)
end


-- 被使用示爱道具通知
i3k_sbean.show_love_item_be_used_notice = i3k_class("show_love_item_be_used_notice")
function i3k_sbean.show_love_item_be_used_notice:ctor()
	self._pname_ = "show_love_item_be_used_notice"
	--self.useRid:		int32	
	--self.useRname:		string	
	--self.itemID:		int32	
end

function i3k_sbean.show_love_item_be_used_notice:clone()
	return clone(self)
end

function i3k_sbean.show_love_item_be_used_notice:decode(is)
	is:popString()
	self.useRid = is:popNumber()
	self.useRname = is:popString()
	self.itemID = is:popNumber()
end

function i3k_sbean.show_love_item_be_used_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.useRid)
	os:pushString(self.useRname)
	os:pushNumber(self.itemID)
end


-- 送宝童子信息同步
i3k_sbean.wizard_wish_sync_res = i3k_class("wizard_wish_sync_res")
function i3k_sbean.wizard_wish_sync_res:ctor()
	self._pname_ = "wizard_wish_sync_res"
	--self.data:		map[int32, DBWizardWish]	
end

function i3k_sbean.wizard_wish_sync_res:clone()
	return clone(self)
end

function i3k_sbean.wizard_wish_sync_res:decode(is)
	is:popString()
	self.data = is:popNumberMap(i3k_sbean.DBWizardWish)
end

function i3k_sbean.wizard_wish_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.data)
end


-- 送宝童子求取
i3k_sbean.wizard_wish_operate_res = i3k_class("wizard_wish_operate_res")
function i3k_sbean.wizard_wish_operate_res:ctor()
	self._pname_ = "wizard_wish_operate_res"
	--self.ok:		int32	
	--self.items:		map[int32, int32]	
end

function i3k_sbean.wizard_wish_operate_res:clone()
	return clone(self)
end

function i3k_sbean.wizard_wish_operate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.wizard_wish_operate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.items)
end


-- 送宝童子领奖
i3k_sbean.wizard_wish_take_res = i3k_class("wizard_wish_take_res")
function i3k_sbean.wizard_wish_take_res:ctor()
	self._pname_ = "wizard_wish_take_res"
	--self.ok:		int32	
end

function i3k_sbean.wizard_wish_take_res:clone()
	return clone(self)
end

function i3k_sbean.wizard_wish_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.wizard_wish_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 星魂引星
i3k_sbean.star_spirit_operate_res = i3k_class("star_spirit_operate_res")
function i3k_sbean.star_spirit_operate_res:ctor()
	self._pname_ = "star_spirit_operate_res"
	--self.ok:		int32	
	--self.addExp:		map[int32, int32]	
end

function i3k_sbean.star_spirit_operate_res:clone()
	return clone(self)
end

function i3k_sbean.star_spirit_operate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.addExp = is:popNumberNumberMap()
end

function i3k_sbean.star_spirit_operate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.addExp)
end


-- 星魂升阶
i3k_sbean.star_spirit_uprank_res = i3k_class("star_spirit_uprank_res")
function i3k_sbean.star_spirit_uprank_res:ctor()
	self._pname_ = "star_spirit_uprank_res"
	--self.ok:		int32	
end

function i3k_sbean.star_spirit_uprank_res:clone()
	return clone(self)
end

function i3k_sbean.star_spirit_uprank_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.star_spirit_uprank_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 星魂属性洗练
i3k_sbean.main_star_refresh_res = i3k_class("main_star_refresh_res")
function i3k_sbean.main_star_refresh_res:ctor()
	self._pname_ = "main_star_refresh_res"
	--self.ok:		int32	
	--self.props:		set[int32]	
end

function i3k_sbean.main_star_refresh_res:clone()
	return clone(self)
end

function i3k_sbean.main_star_refresh_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.props = is:popNumberSet()
end

function i3k_sbean.main_star_refresh_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberSet(self.props)
end


-- 星魂主星属性推送
i3k_sbean.main_star_prop_push = i3k_class("main_star_prop_push")
function i3k_sbean.main_star_prop_push:ctor()
	self._pname_ = "main_star_prop_push"
	--self.props:		set[int32]	
end

function i3k_sbean.main_star_prop_push:clone()
	return clone(self)
end

function i3k_sbean.main_star_prop_push:decode(is)
	is:popString()
	self.props = is:popNumberSet()
end

function i3k_sbean.main_star_prop_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.props)
end


-- 星魂属性保存
i3k_sbean.main_star_save_res = i3k_class("main_star_save_res")
function i3k_sbean.main_star_save_res:ctor()
	self._pname_ = "main_star_save_res"
	--self.ok:		int32	
end

function i3k_sbean.main_star_save_res:clone()
	return clone(self)
end

function i3k_sbean.main_star_save_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.main_star_save_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录同步
i3k_sbean.role_adventure = i3k_class("role_adventure")
function i3k_sbean.role_adventure:ctor()
	self._pname_ = "role_adventure"
	--self.adventureValue:		int32	
	--self.trigID:		int32	
	--self.trigEndTime:		int32	
	--self.task:		DBAdventureTask	
	--self.finished:		map[int32, DBAdventureReward]	
end

function i3k_sbean.role_adventure:clone()
	return clone(self)
end

function i3k_sbean.role_adventure:decode(is)
	is:popString()
	self.adventureValue = is:popNumber()
	self.trigID = is:popNumber()
	self.trigEndTime = is:popNumber()
	self.task = is:pop(i3k_sbean.DBAdventureTask)
	self.finished = is:popNumberMap(i3k_sbean.DBAdventureReward)
end

function i3k_sbean.role_adventure:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.adventureValue)
	os:pushNumber(self.trigID)
	os:pushNumber(self.trigEndTime)
	os:push(self.task)
	os:pushNumberMap(self.finished)
end


-- 触发奇遇
i3k_sbean.role_trig_adventure = i3k_class("role_trig_adventure")
function i3k_sbean.role_trig_adventure:ctor()
	self._pname_ = "role_trig_adventure"
	--self.trigID:		int32	
end

function i3k_sbean.role_trig_adventure:clone()
	return clone(self)
end

function i3k_sbean.role_trig_adventure:decode(is)
	is:popString()
	self.trigID = is:popNumber()
end

function i3k_sbean.role_trig_adventure:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.trigID)
end


-- 接取奇遇任务
i3k_sbean.adtask_take_res = i3k_class("adtask_take_res")
function i3k_sbean.adtask_take_res:ctor()
	self._pname_ = "adtask_take_res"
	--self.ok:		int32	
end

function i3k_sbean.adtask_take_res:clone()
	return clone(self)
end

function i3k_sbean.adtask_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.adtask_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 放弃奇遇任务
i3k_sbean.adtask_quit_res = i3k_class("adtask_quit_res")
function i3k_sbean.adtask_quit_res:ctor()
	self._pname_ = "adtask_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.adtask_quit_res:clone()
	return clone(self)
end

function i3k_sbean.adtask_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.adtask_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 奇遇任务领取奖励
i3k_sbean.adtask_reward_res = i3k_class("adtask_reward_res")
function i3k_sbean.adtask_reward_res:ctor()
	self._pname_ = "adtask_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.adtask_reward_res:clone()
	return clone(self)
end

function i3k_sbean.adtask_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.adtask_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 接受奇遇任务
i3k_sbean.adtask_accept_res = i3k_class("adtask_accept_res")
function i3k_sbean.adtask_accept_res:ctor()
	self._pname_ = "adtask_accept_res"
	--self.ok:		int32	
end

function i3k_sbean.adtask_accept_res:clone()
	return clone(self)
end

function i3k_sbean.adtask_accept_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.adtask_accept_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 选择奇遇任务
i3k_sbean.adtask_select_res = i3k_class("adtask_select_res")
function i3k_sbean.adtask_select_res:ctor()
	self._pname_ = "adtask_select_res"
	--self.ok:		int32	
end

function i3k_sbean.adtask_select_res:clone()
	return clone(self)
end

function i3k_sbean.adtask_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.adtask_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取奇遇任务累计奖励
i3k_sbean.adtask_total_reward_res = i3k_class("adtask_total_reward_res")
function i3k_sbean.adtask_total_reward_res:ctor()
	self._pname_ = "adtask_total_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.adtask_total_reward_res:clone()
	return clone(self)
end

function i3k_sbean.adtask_total_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.adtask_total_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 弹幕添加
i3k_sbean.sect_popmsg_add_res = i3k_class("sect_popmsg_add_res")
function i3k_sbean.sect_popmsg_add_res:ctor()
	self._pname_ = "sect_popmsg_add_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_popmsg_add_res:clone()
	return clone(self)
end

function i3k_sbean.sect_popmsg_add_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_popmsg_add_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 弹幕同步
i3k_sbean.sect_popmsg_sync_res = i3k_class("sect_popmsg_sync_res")
function i3k_sbean.sect_popmsg_sync_res:ctor()
	self._pname_ = "sect_popmsg_sync_res"
	--self.msgs:		vector[DBSectPopMsg]	
end

function i3k_sbean.sect_popmsg_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_popmsg_sync_res:decode(is)
	is:popString()
	self.msgs = is:popList(i3k_sbean.DBSectPopMsg)
end

function i3k_sbean.sect_popmsg_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.msgs)
end


-- 刷新任务库
i3k_sbean.dragon_hole_task_refresh_res = i3k_class("dragon_hole_task_refresh_res")
function i3k_sbean.dragon_hole_task_refresh_res:ctor()
	self._pname_ = "dragon_hole_task_refresh_res"
	--self.ok:		int32	
end

function i3k_sbean.dragon_hole_task_refresh_res:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_task_refresh_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dragon_hole_task_refresh_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 接取任务
i3k_sbean.dragon_hole_task_take_res = i3k_class("dragon_hole_task_take_res")
function i3k_sbean.dragon_hole_task_take_res:ctor()
	self._pname_ = "dragon_hole_task_take_res"
	--self.ok:		int32	
end

function i3k_sbean.dragon_hole_task_take_res:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_task_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dragon_hole_task_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取任务奖励
i3k_sbean.dragon_hole_task_reward_res = i3k_class("dragon_hole_task_reward_res")
function i3k_sbean.dragon_hole_task_reward_res:ctor()
	self._pname_ = "dragon_hole_task_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.dragon_hole_task_reward_res:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_task_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dragon_hole_task_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 放弃任务
i3k_sbean.dragon_hole_task_giveup_res = i3k_class("dragon_hole_task_giveup_res")
function i3k_sbean.dragon_hole_task_giveup_res:ctor()
	self._pname_ = "dragon_hole_task_giveup_res"
	--self.ok:		int32	
end

function i3k_sbean.dragon_hole_task_giveup_res:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_task_giveup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dragon_hole_task_giveup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步龙穴任务信息
i3k_sbean.dragon_hole_task_sync_res = i3k_class("dragon_hole_task_sync_res")
function i3k_sbean.dragon_hole_task_sync_res:ctor()
	self._pname_ = "dragon_hole_task_sync_res"
	--self.curTaskLib:		set[int32]	
	--self.weekFinishTime:		int32	
	--self.score:		int32	
	--self.sectScore:		int32	
	--self.dayRefreshTimes:		int32	
end

function i3k_sbean.dragon_hole_task_sync_res:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_task_sync_res:decode(is)
	is:popString()
	self.curTaskLib = is:popNumberSet()
	self.weekFinishTime = is:popNumber()
	self.score = is:popNumber()
	self.sectScore = is:popNumber()
	self.dayRefreshTimes = is:popNumber()
end

function i3k_sbean.dragon_hole_task_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.curTaskLib)
	os:pushNumber(self.weekFinishTime)
	os:pushNumber(self.score)
	os:pushNumber(self.sectScore)
	os:pushNumber(self.dayRefreshTimes)
end


-- 登陆同步龙穴任务
i3k_sbean.role_dragon_hole_task = i3k_class("role_dragon_hole_task")
function i3k_sbean.role_dragon_hole_task:ctor()
	self._pname_ = "role_dragon_hole_task"
	--self.score:		int32	
	--self.tasks:		map[int32, DBDragonHoleTask]	
end

function i3k_sbean.role_dragon_hole_task:clone()
	return clone(self)
end

function i3k_sbean.role_dragon_hole_task:decode(is)
	is:popString()
	self.score = is:popNumber()
	self.tasks = is:popNumberMap(i3k_sbean.DBDragonHoleTask)
end

function i3k_sbean.role_dragon_hole_task:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
	os:pushNumberMap(self.tasks)
end


-- 快速完成龙穴任务
i3k_sbean.dragon_hole_quick_finish_task_res = i3k_class("dragon_hole_quick_finish_task_res")
function i3k_sbean.dragon_hole_quick_finish_task_res:ctor()
	self._pname_ = "dragon_hole_quick_finish_task_res"
	--self.ok:		int32	
end

function i3k_sbean.dragon_hole_quick_finish_task_res:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_quick_finish_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dragon_hole_quick_finish_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 擦拭雕像
i3k_sbean.honnor_statue_interation_res = i3k_class("honnor_statue_interation_res")
function i3k_sbean.honnor_statue_interation_res:ctor()
	self._pname_ = "honnor_statue_interation_res"
	--self.ok:		int32	
end

function i3k_sbean.honnor_statue_interation_res:clone()
	return clone(self)
end

function i3k_sbean.honnor_statue_interation_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.honnor_statue_interation_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 获取武道会雕像详细信息
i3k_sbean.honnor_statue_get_fightteam_statue_res = i3k_class("honnor_statue_get_fightteam_statue_res")
function i3k_sbean.honnor_statue_get_fightteam_statue_res:ctor()
	self._pname_ = "honnor_statue_get_fightteam_statue_res"
	--self.ok:		int32	
	--self.feature:		RoleFeature	
end

function i3k_sbean.honnor_statue_get_fightteam_statue_res:clone()
	return clone(self)
end

function i3k_sbean.honnor_statue_get_fightteam_statue_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.feature = is:pop(i3k_sbean.RoleFeature)
end

function i3k_sbean.honnor_statue_get_fightteam_statue_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.feature)
end


-- 同步春节福袋
i3k_sbean.new_year_pack_sync_res = i3k_class("new_year_pack_sync_res")
function i3k_sbean.new_year_pack_sync_res:ctor()
	self._pname_ = "new_year_pack_sync_res"
	--self.info:		DBNewYearPack	
end

function i3k_sbean.new_year_pack_sync_res:clone()
	return clone(self)
end

function i3k_sbean.new_year_pack_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBNewYearPack)
end

function i3k_sbean.new_year_pack_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 春节福袋打开
i3k_sbean.new_year_pack_take_res = i3k_class("new_year_pack_take_res")
function i3k_sbean.new_year_pack_take_res:ctor()
	self._pname_ = "new_year_pack_take_res"
	--self.ok:		int32	
	--self.drops:		map[int32, int32]	
end

function i3k_sbean.new_year_pack_take_res:clone()
	return clone(self)
end

function i3k_sbean.new_year_pack_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popNumberNumberMap()
end

function i3k_sbean.new_year_pack_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.drops)
end


-- 春节福袋登陆同步
i3k_sbean.role_new_year_pack_id = i3k_class("role_new_year_pack_id")
function i3k_sbean.role_new_year_pack_id:ctor()
	self._pname_ = "role_new_year_pack_id"
	--self.batch:		int32	
	--self.curId:		int32	
end

function i3k_sbean.role_new_year_pack_id:clone()
	return clone(self)
end

function i3k_sbean.role_new_year_pack_id:decode(is)
	is:popString()
	self.batch = is:popNumber()
	self.curId = is:popNumber()
end

function i3k_sbean.role_new_year_pack_id:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.batch)
	os:pushNumber(self.curId)
end


-- 新年红包同步领取过的npc
i3k_sbean.new_year_red_packet_sync_taked_npc = i3k_class("new_year_red_packet_sync_taked_npc")
function i3k_sbean.new_year_red_packet_sync_taked_npc:ctor()
	self._pname_ = "new_year_red_packet_sync_taked_npc"
	--self.npcIDs:		vector[int32]	
end

function i3k_sbean.new_year_red_packet_sync_taked_npc:clone()
	return clone(self)
end

function i3k_sbean.new_year_red_packet_sync_taked_npc:decode(is)
	is:popString()
	self.npcIDs = is:popNumberList()
end

function i3k_sbean.new_year_red_packet_sync_taked_npc:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.npcIDs)
end


-- 领取新年红包
i3k_sbean.new_year_red_packet_get_res = i3k_class("new_year_red_packet_get_res")
function i3k_sbean.new_year_red_packet_get_res:ctor()
	self._pname_ = "new_year_red_packet_get_res"
	--self.ok:		int32	
end

function i3k_sbean.new_year_red_packet_get_res:clone()
	return clone(self)
end

function i3k_sbean.new_year_red_packet_get_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.new_year_red_packet_get_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步灯谜
i3k_sbean.light_secret_sync_res = i3k_class("light_secret_sync_res")
function i3k_sbean.light_secret_sync_res:ctor()
	self._pname_ = "light_secret_sync_res"
	--self.roleInfo:		DBLightSecret	
	--self.worldScore:		int32	
end

function i3k_sbean.light_secret_sync_res:clone()
	return clone(self)
end

function i3k_sbean.light_secret_sync_res:decode(is)
	is:popString()
	self.roleInfo = is:pop(i3k_sbean.DBLightSecret)
	self.worldScore = is:popNumber()
end

function i3k_sbean.light_secret_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.roleInfo)
	os:pushNumber(self.worldScore)
end


-- 回答灯谜
i3k_sbean.light_secret_answer_res = i3k_class("light_secret_answer_res")
function i3k_sbean.light_secret_answer_res:ctor()
	self._pname_ = "light_secret_answer_res"
	--self.ok:		int32	
end

function i3k_sbean.light_secret_answer_res:clone()
	return clone(self)
end

function i3k_sbean.light_secret_answer_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.light_secret_answer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取角色奖励
i3k_sbean.light_secret_role_take_res = i3k_class("light_secret_role_take_res")
function i3k_sbean.light_secret_role_take_res:ctor()
	self._pname_ = "light_secret_role_take_res"
	--self.ok:		int32	
	--self.drops:		map[int32, int32]	
end

function i3k_sbean.light_secret_role_take_res:clone()
	return clone(self)
end

function i3k_sbean.light_secret_role_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popNumberNumberMap()
end

function i3k_sbean.light_secret_role_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.drops)
end


-- 领取世界奖励
i3k_sbean.light_secret_world_take_res = i3k_class("light_secret_world_take_res")
function i3k_sbean.light_secret_world_take_res:ctor()
	self._pname_ = "light_secret_world_take_res"
	--self.ok:		int32	
end

function i3k_sbean.light_secret_world_take_res:clone()
	return clone(self)
end

function i3k_sbean.light_secret_world_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.light_secret_world_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录同步跨服副本匹配信息
i3k_sbean.role_globalmap = i3k_class("role_globalmap")
function i3k_sbean.role_globalmap:ctor()
	self._pname_ = "role_globalmap"
	--self.info:		GlobalMap	
end

function i3k_sbean.role_globalmap:clone()
	return clone(self)
end

function i3k_sbean.role_globalmap:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.GlobalMap)
end

function i3k_sbean.role_globalmap:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 跨服副本匹配结果
i3k_sbean.globalmap_match_result = i3k_class("globalmap_match_result")
function i3k_sbean.globalmap_match_result:ctor()
	self._pname_ = "globalmap_match_result"
	--self.result:		int32	
end

function i3k_sbean.globalmap_match_result:clone()
	return clone(self)
end

function i3k_sbean.globalmap_match_result:decode(is)
	is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.globalmap_match_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.result)
end


-- 快速匹配跨服副本
i3k_sbean.globalmap_join_res = i3k_class("globalmap_join_res")
function i3k_sbean.globalmap_join_res:ctor()
	self._pname_ = "globalmap_join_res"
	--self.ok:		int32	
end

function i3k_sbean.globalmap_join_res:clone()
	return clone(self)
end

function i3k_sbean.globalmap_join_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.globalmap_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 取消匹配跨服副本
i3k_sbean.globalmap_quit_res = i3k_class("globalmap_quit_res")
function i3k_sbean.globalmap_quit_res:ctor()
	self._pname_ = "globalmap_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.globalmap_quit_res:clone()
	return clone(self)
end

function i3k_sbean.globalmap_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.globalmap_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步八卦锻造属性相关
i3k_sbean.role_eightdiagram_info = i3k_class("role_eightdiagram_info")
function i3k_sbean.role_eightdiagram_info:ctor()
	self._pname_ = "role_eightdiagram_info"
	--self.equipDiagrams:		map[int32, DBDiagram]	
	--self.partStrength:		map[int32, DBDiagramStrength]	
	--self.diagramChange:		DBDiagramChange	
end

function i3k_sbean.role_eightdiagram_info:clone()
	return clone(self)
end

function i3k_sbean.role_eightdiagram_info:decode(is)
	is:popString()
	self.equipDiagrams = is:popNumberMap(i3k_sbean.DBDiagram)
	self.partStrength = is:popNumberMap(i3k_sbean.DBDiagramStrength)
	self.diagramChange = is:pop(i3k_sbean.DBDiagramChange)
end

function i3k_sbean.role_eightdiagram_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.equipDiagrams)
	os:pushNumberMap(self.partStrength)
	os:push(self.diagramChange)
end


-- 八卦锻造同步
i3k_sbean.eightdiagram_sync_res = i3k_class("eightdiagram_sync_res")
function i3k_sbean.eightdiagram_sync_res:ctor()
	self._pname_ = "eightdiagram_sync_res"
	--self.energy:		int32	
	--self.bagDiagrams:		map[int32, DBDiagram]	
	--self.equipDiagrams:		map[int32, DBDiagram]	
	--self.partStrength:		map[int32, DBDiagramStrength]	
	--self.propStones:		vector[DBPropStone]	
	--self.diagramChange:		DBDiagramChange	
end

function i3k_sbean.eightdiagram_sync_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_sync_res:decode(is)
	is:popString()
	self.energy = is:popNumber()
	self.bagDiagrams = is:popNumberMap(i3k_sbean.DBDiagram)
	self.equipDiagrams = is:popNumberMap(i3k_sbean.DBDiagram)
	self.partStrength = is:popNumberMap(i3k_sbean.DBDiagramStrength)
	self.propStones = is:popList(i3k_sbean.DBPropStone)
	self.diagramChange = is:pop(i3k_sbean.DBDiagramChange)
end

function i3k_sbean.eightdiagram_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.energy)
	os:pushNumberMap(self.bagDiagrams)
	os:pushNumberMap(self.equipDiagrams)
	os:pushNumberMap(self.partStrength)
	os:pushList(self.propStones)
	os:push(self.diagramChange)
end


-- 八卦强化
i3k_sbean.eightdiagram_strength_res = i3k_class("eightdiagram_strength_res")
function i3k_sbean.eightdiagram_strength_res:ctor()
	self._pname_ = "eightdiagram_strength_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_strength_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_strength_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_strength_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 八卦分解
i3k_sbean.eightdiagram_splite_res = i3k_class("eightdiagram_splite_res")
function i3k_sbean.eightdiagram_splite_res:ctor()
	self._pname_ = "eightdiagram_splite_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_splite_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_splite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_splite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 八卦萃取
i3k_sbean.eightdiagram_extraction_res = i3k_class("eightdiagram_extraction_res")
function i3k_sbean.eightdiagram_extraction_res:ctor()
	self._pname_ = "eightdiagram_extraction_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_extraction_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_extraction_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_extraction_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 八卦制造
i3k_sbean.eightdiagram_create_res = i3k_class("eightdiagram_create_res")
function i3k_sbean.eightdiagram_create_res:ctor()
	self._pname_ = "eightdiagram_create_res"
	--self.ok:		int32	
	--self.diagram:		DBDiagram	
end

function i3k_sbean.eightdiagram_create_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_create_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.diagram = is:pop(i3k_sbean.DBDiagram)
end

function i3k_sbean.eightdiagram_create_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.diagram)
end


-- 八卦装备
i3k_sbean.eightdiagram_equip_res = i3k_class("eightdiagram_equip_res")
function i3k_sbean.eightdiagram_equip_res:ctor()
	self._pname_ = "eightdiagram_equip_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_equip_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_equip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_equip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 八卦取消装备
i3k_sbean.eightdiagram_unequip_res = i3k_class("eightdiagram_unequip_res")
function i3k_sbean.eightdiagram_unequip_res:ctor()
	self._pname_ = "eightdiagram_unequip_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_unequip_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_unequip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_unequip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用八卦原石
i3k_sbean.eightdiagram_use_stonebag_res = i3k_class("eightdiagram_use_stonebag_res")
function i3k_sbean.eightdiagram_use_stonebag_res:ctor()
	self._pname_ = "eightdiagram_use_stonebag_res"
	--self.ok:		int32	
	--self.result:		vector[PropStone]	
end

function i3k_sbean.eightdiagram_use_stonebag_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_use_stonebag_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.result = is:popList(i3k_sbean.PropStone)
end

function i3k_sbean.eightdiagram_use_stonebag_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.result)
end


-- 分解属性原石
i3k_sbean.eightdiagram_del_stonepool_res = i3k_class("eightdiagram_del_stonepool_res")
function i3k_sbean.eightdiagram_del_stonepool_res:ctor()
	self._pname_ = "eightdiagram_del_stonepool_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_del_stonepool_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_del_stonepool_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_del_stonepool_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 合成祭品
i3k_sbean.item_compose_res = i3k_class("item_compose_res")
function i3k_sbean.item_compose_res:ctor()
	self._pname_ = "item_compose_res"
	--self.ok:		int32	
end

function i3k_sbean.item_compose_res:clone()
	return clone(self)
end

function i3k_sbean.item_compose_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.item_compose_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 分解祭品
i3k_sbean.item_splite_res = i3k_class("item_splite_res")
function i3k_sbean.item_splite_res:ctor()
	self._pname_ = "item_splite_res"
	--self.ok:		int32	
end

function i3k_sbean.item_splite_res:clone()
	return clone(self)
end

function i3k_sbean.item_splite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.item_splite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开启八卦易数玩法
i3k_sbean.eightdiagram_change_open_res = i3k_class("eightdiagram_change_open_res")
function i3k_sbean.eightdiagram_change_open_res:ctor()
	self._pname_ = "eightdiagram_change_open_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_change_open_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_change_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 购买易数分配点数
i3k_sbean.eightdiagram_change_buy_point_res = i3k_class("eightdiagram_change_buy_point_res")
function i3k_sbean.eightdiagram_change_buy_point_res:ctor()
	self._pname_ = "eightdiagram_change_buy_point_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_change_buy_point_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_buy_point_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_change_buy_point_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 重置易数分配点数
i3k_sbean.eightdiagram_change_reset_point_res = i3k_class("eightdiagram_change_reset_point_res")
function i3k_sbean.eightdiagram_change_reset_point_res:ctor()
	self._pname_ = "eightdiagram_change_reset_point_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_change_reset_point_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_reset_point_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_change_reset_point_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 更新易数分配点数
i3k_sbean.eightdiagram_change_update_point_res = i3k_class("eightdiagram_change_update_point_res")
function i3k_sbean.eightdiagram_change_update_point_res:ctor()
	self._pname_ = "eightdiagram_change_update_point_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_change_update_point_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_update_point_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_change_update_point_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 技能升级
i3k_sbean.eightdiagram_change_uplevel_res = i3k_class("eightdiagram_change_uplevel_res")
function i3k_sbean.eightdiagram_change_uplevel_res:ctor()
	self._pname_ = "eightdiagram_change_uplevel_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_change_uplevel_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_uplevel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_change_uplevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备技能
i3k_sbean.eightdiagram_change_equip_skill_res = i3k_class("eightdiagram_change_equip_skill_res")
function i3k_sbean.eightdiagram_change_equip_skill_res:ctor()
	self._pname_ = "eightdiagram_change_equip_skill_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_change_equip_skill_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_equip_skill_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_change_equip_skill_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 卸载技能
i3k_sbean.eightdiagram_change_unequip_skill_res = i3k_class("eightdiagram_change_unequip_skill_res")
function i3k_sbean.eightdiagram_change_unequip_skill_res:ctor()
	self._pname_ = "eightdiagram_change_unequip_skill_res"
	--self.ok:		int32	
end

function i3k_sbean.eightdiagram_change_unequip_skill_res:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_unequip_skill_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.eightdiagram_change_unequip_skill_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 参加跨服PVE
i3k_sbean.globalpve_join_res = i3k_class("globalpve_join_res")
function i3k_sbean.globalpve_join_res:ctor()
	self._pname_ = "globalpve_join_res"
	--self.ok:		int32	
end

function i3k_sbean.globalpve_join_res:clone()
	return clone(self)
end

function i3k_sbean.globalpve_join_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.globalpve_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.globalpve_sync_res = i3k_class("globalpve_sync_res")
function i3k_sbean.globalpve_sync_res:ctor()
	self._pname_ = "globalpve_sync_res"
	--self.startTime:		int32	
	--self.endTime:		int32	
	--self.openDays:		set[int32]	
end

function i3k_sbean.globalpve_sync_res:clone()
	return clone(self)
end

function i3k_sbean.globalpve_sync_res:decode(is)
	is:popString()
	self.startTime = is:popNumber()
	self.endTime = is:popNumber()
	self.openDays = is:popNumberSet()
end

function i3k_sbean.globalpve_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.startTime)
	os:pushNumber(self.endTime)
	os:pushNumberSet(self.openDays)
end


i3k_sbean.globalpve_teleboss_res = i3k_class("globalpve_teleboss_res")
function i3k_sbean.globalpve_teleboss_res:ctor()
	self._pname_ = "globalpve_teleboss_res"
	--self.ok:		int32	
end

function i3k_sbean.globalpve_teleboss_res:clone()
	return clone(self)
end

function i3k_sbean.globalpve_teleboss_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.globalpve_teleboss_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入对战区
i3k_sbean.globalpve_enterwar_res = i3k_class("globalpve_enterwar_res")
function i3k_sbean.globalpve_enterwar_res:ctor()
	self._pname_ = "globalpve_enterwar_res"
	--self.ok:		int32	
end

function i3k_sbean.globalpve_enterwar_res:clone()
	return clone(self)
end

function i3k_sbean.globalpve_enterwar_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.globalpve_enterwar_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步对战区列表
i3k_sbean.globalpve_syncwararea_res = i3k_class("globalpve_syncwararea_res")
function i3k_sbean.globalpve_syncwararea_res:ctor()
	self._pname_ = "globalpve_syncwararea_res"
	--self.areas:		vector[GlobalPveMapInfo]	
end

function i3k_sbean.globalpve_syncwararea_res:clone()
	return clone(self)
end

function i3k_sbean.globalpve_syncwararea_res:decode(is)
	is:popString()
	self.areas = is:popList(i3k_sbean.GlobalPveMapInfo)
end

function i3k_sbean.globalpve_syncwararea_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.areas)
end


i3k_sbean.globalpve_keys_sync = i3k_class("globalpve_keys_sync")
function i3k_sbean.globalpve_keys_sync:ctor()
	self._pname_ = "globalpve_keys_sync"
	--self.keys:		int32	
end

function i3k_sbean.globalpve_keys_sync:clone()
	return clone(self)
end

function i3k_sbean.globalpve_keys_sync:decode(is)
	is:popString()
	self.keys = is:popNumber()
end

function i3k_sbean.globalpve_keys_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.keys)
end


i3k_sbean.globalpve_keys_add = i3k_class("globalpve_keys_add")
function i3k_sbean.globalpve_keys_add:ctor()
	self._pname_ = "globalpve_keys_add"
	--self.add:		int32	
end

function i3k_sbean.globalpve_keys_add:clone()
	return clone(self)
end

function i3k_sbean.globalpve_keys_add:decode(is)
	is:popString()
	self.add = is:popNumber()
end

function i3k_sbean.globalpve_keys_add:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.add)
end


i3k_sbean.role_globalpve_start = i3k_class("role_globalpve_start")
function i3k_sbean.role_globalpve_start:ctor()
	self._pname_ = "role_globalpve_start"
end

function i3k_sbean.role_globalpve_start:decode(is)
	is:popString()
end

function i3k_sbean.role_globalpve_start:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.role_globalpve_end = i3k_class("role_globalpve_end")
function i3k_sbean.role_globalpve_end:ctor()
	self._pname_ = "role_globalpve_end"
end

function i3k_sbean.role_globalpve_end:decode(is)
	is:popString()
end

function i3k_sbean.role_globalpve_end:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.sectshare_sync_res = i3k_class("sectshare_sync_res")
function i3k_sbean.sectshare_sync_res:ctor()
	self._pname_ = "sectshare_sync_res"
	--self.items:		map[int32, int32]	
	--self.item2price:		map[int32, int32]	
	--self.score:		int32	
end

function i3k_sbean.sectshare_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sectshare_sync_res:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
	self.item2price = is:popNumberNumberMap()
	self.score = is:popNumber()
end

function i3k_sbean.sectshare_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
	os:pushNumberNumberMap(self.item2price)
	os:pushNumber(self.score)
end


i3k_sbean.sectshare_event_sync_res = i3k_class("sectshare_event_sync_res")
function i3k_sbean.sectshare_event_sync_res:ctor()
	self._pname_ = "sectshare_event_sync_res"
	--self.ok:		int32	
end

function i3k_sbean.sectshare_event_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sectshare_event_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sectshare_event_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.sectshare_apply_sync_res = i3k_class("sectshare_apply_sync_res")
function i3k_sbean.sectshare_apply_sync_res:ctor()
	self._pname_ = "sectshare_apply_sync_res"
	--self.ok:		int32	
end

function i3k_sbean.sectshare_apply_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sectshare_apply_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sectshare_apply_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 共享道具申请
i3k_sbean.sectshare_apply_res = i3k_class("sectshare_apply_res")
function i3k_sbean.sectshare_apply_res:ctor()
	self._pname_ = "sectshare_apply_res"
	--self.ok:		int32	
end

function i3k_sbean.sectshare_apply_res:clone()
	return clone(self)
end

function i3k_sbean.sectshare_apply_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sectshare_apply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置兑换所需共享积分
i3k_sbean.sectshare_setprice_res = i3k_class("sectshare_setprice_res")
function i3k_sbean.sectshare_setprice_res:ctor()
	self._pname_ = "sectshare_setprice_res"
	--self.ok:		int32	
end

function i3k_sbean.sectshare_setprice_res:clone()
	return clone(self)
end

function i3k_sbean.sectshare_setprice_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sectshare_setprice_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.sectshare_score_add = i3k_class("sectshare_score_add")
function i3k_sbean.sectshare_score_add:ctor()
	self._pname_ = "sectshare_score_add"
	--self.score:		int32	
end

function i3k_sbean.sectshare_score_add:clone()
	return clone(self)
end

function i3k_sbean.sectshare_score_add:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.sectshare_score_add:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


i3k_sbean.sectshare_event_start = i3k_class("sectshare_event_start")
function i3k_sbean.sectshare_event_start:ctor()
	self._pname_ = "sectshare_event_start"
end

function i3k_sbean.sectshare_event_start:decode(is)
	is:popString()
end

function i3k_sbean.sectshare_event_start:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.sectshare_event_batch = i3k_class("sectshare_event_batch")
function i3k_sbean.sectshare_event_batch:ctor()
	self._pname_ = "sectshare_event_batch"
	--self.batch:		vector[SectShareEvent]	
end

function i3k_sbean.sectshare_event_batch:clone()
	return clone(self)
end

function i3k_sbean.sectshare_event_batch:decode(is)
	is:popString()
	self.batch = is:popList(i3k_sbean.SectShareEvent)
end

function i3k_sbean.sectshare_event_batch:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.batch)
end


i3k_sbean.sectshare_event_end = i3k_class("sectshare_event_end")
function i3k_sbean.sectshare_event_end:ctor()
	self._pname_ = "sectshare_event_end"
end

function i3k_sbean.sectshare_event_end:decode(is)
	is:popString()
end

function i3k_sbean.sectshare_event_end:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.sectshare_event_add = i3k_class("sectshare_event_add")
function i3k_sbean.sectshare_event_add:ctor()
	self._pname_ = "sectshare_event_add"
	--self.event:		SectShareEvent	
end

function i3k_sbean.sectshare_event_add:clone()
	return clone(self)
end

function i3k_sbean.sectshare_event_add:decode(is)
	is:popString()
	self.event = is:pop(i3k_sbean.SectShareEvent)
end

function i3k_sbean.sectshare_event_add:encode(os)
	os:pushString(self._pname_)
	os:push(self.event)
end


i3k_sbean.sectshare_apply_start = i3k_class("sectshare_apply_start")
function i3k_sbean.sectshare_apply_start:ctor()
	self._pname_ = "sectshare_apply_start"
end

function i3k_sbean.sectshare_apply_start:decode(is)
	is:popString()
end

function i3k_sbean.sectshare_apply_start:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.sectshare_apply_batch = i3k_class("sectshare_apply_batch")
function i3k_sbean.sectshare_apply_batch:ctor()
	self._pname_ = "sectshare_apply_batch"
	--self.batch:		vector[SectShareApply]	
end

function i3k_sbean.sectshare_apply_batch:clone()
	return clone(self)
end

function i3k_sbean.sectshare_apply_batch:decode(is)
	is:popString()
	self.batch = is:popList(i3k_sbean.SectShareApply)
end

function i3k_sbean.sectshare_apply_batch:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.batch)
end


i3k_sbean.sectshare_apply_end = i3k_class("sectshare_apply_end")
function i3k_sbean.sectshare_apply_end:ctor()
	self._pname_ = "sectshare_apply_end"
end

function i3k_sbean.sectshare_apply_end:decode(is)
	is:popString()
end

function i3k_sbean.sectshare_apply_end:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.million_answer_sync_res = i3k_class("million_answer_sync_res")
function i3k_sbean.million_answer_sync_res:ctor()
	self._pname_ = "million_answer_sync_res"
	--self.ok:		int32	
	--self.allPlayer:		int32	
	--self.roleInfo:		RoleMillionAnswer	
end

function i3k_sbean.million_answer_sync_res:clone()
	return clone(self)
end

function i3k_sbean.million_answer_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.allPlayer = is:popNumber()
	self.roleInfo = is:pop(i3k_sbean.RoleMillionAnswer)
end

function i3k_sbean.million_answer_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.allPlayer)
	os:push(self.roleInfo)
end


i3k_sbean.million_answer_reserve_res = i3k_class("million_answer_reserve_res")
function i3k_sbean.million_answer_reserve_res:ctor()
	self._pname_ = "million_answer_reserve_res"
	--self.ok:		int32	
end

function i3k_sbean.million_answer_reserve_res:clone()
	return clone(self)
end

function i3k_sbean.million_answer_reserve_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.million_answer_reserve_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.million_answer_click_res = i3k_class("million_answer_click_res")
function i3k_sbean.million_answer_click_res:ctor()
	self._pname_ = "million_answer_click_res"
	--self.live:		int32	
end

function i3k_sbean.million_answer_click_res:clone()
	return clone(self)
end

function i3k_sbean.million_answer_click_res:decode(is)
	is:popString()
	self.live = is:popNumber()
end

function i3k_sbean.million_answer_click_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.live)
end


i3k_sbean.million_answer_name_res = i3k_class("million_answer_name_res")
function i3k_sbean.million_answer_name_res:ctor()
	self._pname_ = "million_answer_name_res"
	--self.names:		vector[string]	
	--self.allFinishNum:		int32	
end

function i3k_sbean.million_answer_name_res:clone()
	return clone(self)
end

function i3k_sbean.million_answer_name_res:decode(is)
	is:popString()
	self.names = is:popStringList()
	self.allFinishNum = is:popNumber()
end

function i3k_sbean.million_answer_name_res:encode(os)
	os:pushString(self._pname_)
	os:pushStringList(self.names)
	os:pushNumber(self.allFinishNum)
end


-- 发送验证码
i3k_sbean.send_phone_msg_res = i3k_class("send_phone_msg_res")
function i3k_sbean.send_phone_msg_res:ctor()
	self._pname_ = "send_phone_msg_res"
	--self.ok:		int32	
end

function i3k_sbean.send_phone_msg_res:clone()
	return clone(self)
end

function i3k_sbean.send_phone_msg_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.send_phone_msg_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取绑定手机奖励
i3k_sbean.take_bind_phone_reward_res = i3k_class("take_bind_phone_reward_res")
function i3k_sbean.take_bind_phone_reward_res:ctor()
	self._pname_ = "take_bind_phone_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.take_bind_phone_reward_res:clone()
	return clone(self)
end

function i3k_sbean.take_bind_phone_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_bind_phone_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步绑定手机奖励
i3k_sbean.phone_reward_sync_res = i3k_class("phone_reward_sync_res")
function i3k_sbean.phone_reward_sync_res:ctor()
	self._pname_ = "phone_reward_sync_res"
	--self.lastTime:		int32	
	--self.phoneNumber:		string	
end

function i3k_sbean.phone_reward_sync_res:clone()
	return clone(self)
end

function i3k_sbean.phone_reward_sync_res:decode(is)
	is:popString()
	self.lastTime = is:popNumber()
	self.phoneNumber = is:popString()
end

function i3k_sbean.phone_reward_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.lastTime)
	os:pushString(self.phoneNumber)
end


-- 同步卜卦信息
i3k_sbean.divination_sync_res = i3k_class("divination_sync_res")
function i3k_sbean.divination_sync_res:ctor()
	self._pname_ = "divination_sync_res"
	--self.divinationCount:		int32	
	--self.fortuneId:		int32	
	--self.hasReward:		int32	
end

function i3k_sbean.divination_sync_res:clone()
	return clone(self)
end

function i3k_sbean.divination_sync_res:decode(is)
	is:popString()
	self.divinationCount = is:popNumber()
	self.fortuneId = is:popNumber()
	self.hasReward = is:popNumber()
end

function i3k_sbean.divination_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.divinationCount)
	os:pushNumber(self.fortuneId)
	os:pushNumber(self.hasReward)
end


-- 响应卜卦信息
i3k_sbean.divination_info_res = i3k_class("divination_info_res")
function i3k_sbean.divination_info_res:ctor()
	self._pname_ = "divination_info_res"
	--self.fortuneId:		int32	
end

function i3k_sbean.divination_info_res:clone()
	return clone(self)
end

function i3k_sbean.divination_info_res:decode(is)
	is:popString()
	self.fortuneId = is:popNumber()
end

function i3k_sbean.divination_info_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fortuneId)
end


-- 领取卜卦奖励
i3k_sbean.divination_reward_res = i3k_class("divination_reward_res")
function i3k_sbean.divination_reward_res:ctor()
	self._pname_ = "divination_reward_res"
	--self.fortuneId:		int32	
end

function i3k_sbean.divination_reward_res:clone()
	return clone(self)
end

function i3k_sbean.divination_reward_res:decode(is)
	is:popString()
	self.fortuneId = is:popNumber()
end

function i3k_sbean.divination_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fortuneId)
end


-- 登陆同步五转之路信息
i3k_sbean.role_transform_road = i3k_class("role_transform_road")
function i3k_sbean.role_transform_road:ctor()
	self._pname_ = "role_transform_road"
	--self.transformRoad:		DBTransformRoad	
end

function i3k_sbean.role_transform_road:clone()
	return clone(self)
end

function i3k_sbean.role_transform_road:decode(is)
	is:popString()
	self.transformRoad = is:pop(i3k_sbean.DBTransformRoad)
end

function i3k_sbean.role_transform_road:encode(os)
	os:pushString(self._pname_)
	os:push(self.transformRoad)
end


-- 升级五转之路
i3k_sbean.transform_road_uplevel_res = i3k_class("transform_road_uplevel_res")
function i3k_sbean.transform_road_uplevel_res:ctor()
	self._pname_ = "transform_road_uplevel_res"
	--self.ok:		int32	
end

function i3k_sbean.transform_road_uplevel_res:clone()
	return clone(self)
end

function i3k_sbean.transform_road_uplevel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.transform_road_uplevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 选择命轮
i3k_sbean.transform_road_use_lifewheel_res = i3k_class("transform_road_use_lifewheel_res")
function i3k_sbean.transform_road_use_lifewheel_res:ctor()
	self._pname_ = "transform_road_use_lifewheel_res"
	--self.ok:		int32	
end

function i3k_sbean.transform_road_use_lifewheel_res:clone()
	return clone(self)
end

function i3k_sbean.transform_road_use_lifewheel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.transform_road_use_lifewheel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 重置命轮
i3k_sbean.transform_road_reset_lifewheel_res = i3k_class("transform_road_reset_lifewheel_res")
function i3k_sbean.transform_road_reset_lifewheel_res:ctor()
	self._pname_ = "transform_road_reset_lifewheel_res"
	--self.ok:		int32	
end

function i3k_sbean.transform_road_reset_lifewheel_res:clone()
	return clone(self)
end

function i3k_sbean.transform_road_reset_lifewheel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.transform_road_reset_lifewheel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.send_kite_res = i3k_class("send_kite_res")
function i3k_sbean.send_kite_res:ctor()
	self._pname_ = "send_kite_res"
	--self.ok:		int32	
end

function i3k_sbean.send_kite_res:clone()
	return clone(self)
end

function i3k_sbean.send_kite_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.send_kite_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步单人闯关
i3k_sbean.single_explore_sync_res = i3k_class("single_explore_sync_res")
function i3k_sbean.single_explore_sync_res:ctor()
	self._pname_ = "single_explore_sync_res"
	--self.singleExplore:		DBSingleExplore	
end

function i3k_sbean.single_explore_sync_res:clone()
	return clone(self)
end

function i3k_sbean.single_explore_sync_res:decode(is)
	is:popString()
	self.singleExplore = is:pop(i3k_sbean.DBSingleExplore)
end

function i3k_sbean.single_explore_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.singleExplore)
end


-- 进入单人闯关
i3k_sbean.single_explore_start_res = i3k_class("single_explore_start_res")
function i3k_sbean.single_explore_start_res:ctor()
	self._pname_ = "single_explore_start_res"
	--self.ok:		int32	
end

function i3k_sbean.single_explore_start_res:clone()
	return clone(self)
end

function i3k_sbean.single_explore_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.single_explore_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 选择单人闯关宠物
i3k_sbean.single_explore_set_pet_res = i3k_class("single_explore_set_pet_res")
function i3k_sbean.single_explore_set_pet_res:ctor()
	self._pname_ = "single_explore_set_pet_res"
	--self.ok:		int32	
end

function i3k_sbean.single_explore_set_pet_res:clone()
	return clone(self)
end

function i3k_sbean.single_explore_set_pet_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.single_explore_set_pet_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 世界杯同步信息响应
i3k_sbean.world_cup_sync_res = i3k_class("world_cup_sync_res")
function i3k_sbean.world_cup_sync_res:ctor()
	self._pname_ = "world_cup_sync_res"
	--self.worldCupInfo:		WorldCupInfo	
end

function i3k_sbean.world_cup_sync_res:clone()
	return clone(self)
end

function i3k_sbean.world_cup_sync_res:decode(is)
	is:popString()
	self.worldCupInfo = is:pop(i3k_sbean.WorldCupInfo)
end

function i3k_sbean.world_cup_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.worldCupInfo)
end


-- 进行下注
i3k_sbean.world_cup_conduct_bet_res = i3k_class("world_cup_conduct_bet_res")
function i3k_sbean.world_cup_conduct_bet_res:ctor()
	self._pname_ = "world_cup_conduct_bet_res"
	--self.ok:		int32	
end

function i3k_sbean.world_cup_conduct_bet_res:clone()
	return clone(self)
end

function i3k_sbean.world_cup_conduct_bet_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.world_cup_conduct_bet_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 家园创建
i3k_sbean.homeland_create_res = i3k_class("homeland_create_res")
function i3k_sbean.homeland_create_res:ctor()
	self._pname_ = "homeland_create_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_create_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_create_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_create_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 家园改名
i3k_sbean.homeland_rename_res = i3k_class("homeland_rename_res")
function i3k_sbean.homeland_rename_res:ctor()
	self._pname_ = "homeland_rename_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_rename_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_rename_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_rename_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 家园升级
i3k_sbean.homeland_uplevel_res = i3k_class("homeland_uplevel_res")
function i3k_sbean.homeland_uplevel_res:ctor()
	self._pname_ = "homeland_uplevel_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_uplevel_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_uplevel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_uplevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 家园土地升级
i3k_sbean.homeland_ground_uplevel_res = i3k_class("homeland_ground_uplevel_res")
function i3k_sbean.homeland_ground_uplevel_res:ctor()
	self._pname_ = "homeland_ground_uplevel_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_ground_uplevel_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_ground_uplevel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_ground_uplevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 家园池塘升级
i3k_sbean.homeland_pool_uplevel_res = i3k_class("homeland_pool_uplevel_res")
function i3k_sbean.homeland_pool_uplevel_res:ctor()
	self._pname_ = "homeland_pool_uplevel_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_pool_uplevel_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_pool_uplevel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_pool_uplevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 种植作物
i3k_sbean.homeland_plant_res = i3k_class("homeland_plant_res")
function i3k_sbean.homeland_plant_res:ctor()
	self._pname_ = "homeland_plant_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_plant_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_plant_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_plant_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 铲除作物
i3k_sbean.homeland_remove_res = i3k_class("homeland_remove_res")
function i3k_sbean.homeland_remove_res:ctor()
	self._pname_ = "homeland_remove_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_remove_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_remove_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_remove_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 偷窃作物
i3k_sbean.homeland_steal_res = i3k_class("homeland_steal_res")
function i3k_sbean.homeland_steal_res:ctor()
	self._pname_ = "homeland_steal_res"
	--self.num:		int32	
	--self.extGet:		vector[DummyGoods]	
end

function i3k_sbean.homeland_steal_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_steal_res:decode(is)
	is:popString()
	self.num = is:popNumber()
	self.extGet = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.homeland_steal_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.num)
	os:pushList(self.extGet)
end


-- 收获作物
i3k_sbean.homeland_harvest_res = i3k_class("homeland_harvest_res")
function i3k_sbean.homeland_harvest_res:ctor()
	self._pname_ = "homeland_harvest_res"
	--self.num:		int32	
	--self.extGet:		vector[DummyGoods]	
	--self.lastTime:		int32	
end

function i3k_sbean.homeland_harvest_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_harvest_res:decode(is)
	is:popString()
	self.num = is:popNumber()
	self.extGet = is:popList(i3k_sbean.DummyGoods)
	self.lastTime = is:popNumber()
end

function i3k_sbean.homeland_harvest_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.num)
	os:pushList(self.extGet)
	os:pushNumber(self.lastTime)
end


-- 进入家园
i3k_sbean.homeland_enter_res = i3k_class("homeland_enter_res")
function i3k_sbean.homeland_enter_res:ctor()
	self._pname_ = "homeland_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_enter_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入家园同步
i3k_sbean.homeland_map_sync = i3k_class("homeland_map_sync")
function i3k_sbean.homeland_map_sync:ctor()
	self._pname_ = "homeland_map_sync"
	--self.roleId:		int32	
	--self.homeland:		HomelandMapInfo	
end

function i3k_sbean.homeland_map_sync:clone()
	return clone(self)
end

function i3k_sbean.homeland_map_sync:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.homeland = is:pop(i3k_sbean.HomelandMapInfo)
end

function i3k_sbean.homeland_map_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:push(self.homeland)
end


-- 登陆同步家园等级
i3k_sbean.homeland_login_sync = i3k_class("homeland_login_sync")
function i3k_sbean.homeland_login_sync:ctor()
	self._pname_ = "homeland_login_sync"
	--self.level:		int32	
	--self.plantLevel:		int32	
	--self.curEquips:		map[int32, DBHomelandEquip]	
end

function i3k_sbean.homeland_login_sync:clone()
	return clone(self)
end

function i3k_sbean.homeland_login_sync:decode(is)
	is:popString()
	self.level = is:popNumber()
	self.plantLevel = is:popNumber()
	self.curEquips = is:popNumberMap(i3k_sbean.DBHomelandEquip)
end

function i3k_sbean.homeland_login_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
	os:pushNumber(self.plantLevel)
	os:pushNumberMap(self.curEquips)
end


-- 同步家园信息
i3k_sbean.homeland_sync_res = i3k_class("homeland_sync_res")
function i3k_sbean.homeland_sync_res:ctor()
	self._pname_ = "homeland_sync_res"
	--self.homeland:		DBHomeland	
end

function i3k_sbean.homeland_sync_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_sync_res:decode(is)
	is:popString()
	self.homeland = is:pop(i3k_sbean.DBHomeland)
end

function i3k_sbean.homeland_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.homeland)
end


-- 同步家园装备信息
i3k_sbean.homeland_equip_sync_res = i3k_class("homeland_equip_sync_res")
function i3k_sbean.homeland_equip_sync_res:ctor()
	self._pname_ = "homeland_equip_sync_res"
	--self.homelandEquip:		DBHomelandEquipData	
end

function i3k_sbean.homeland_equip_sync_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_equip_sync_res:decode(is)
	is:popString()
	self.homelandEquip = is:pop(i3k_sbean.DBHomelandEquipData)
end

function i3k_sbean.homeland_equip_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.homelandEquip)
end


-- 作物浇水
i3k_sbean.homeland_water_res = i3k_class("homeland_water_res")
function i3k_sbean.homeland_water_res:ctor()
	self._pname_ = "homeland_water_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_water_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_water_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_water_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 作物护理
i3k_sbean.homeland_nurse_res = i3k_class("homeland_nurse_res")
function i3k_sbean.homeland_nurse_res:ctor()
	self._pname_ = "homeland_nurse_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_nurse_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_nurse_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_nurse_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 地图内土地收到操作
i3k_sbean.homeland_ground_operate = i3k_class("homeland_ground_operate")
function i3k_sbean.homeland_ground_operate:ctor()
	self._pname_ = "homeland_ground_operate"
	--self.type:		int32	
	--self.index:		int32	
	--self.operateType:		int32	
	--self.args:		vector[int32]	
end

function i3k_sbean.homeland_ground_operate:clone()
	return clone(self)
end

function i3k_sbean.homeland_ground_operate:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
	self.operateType = is:popNumber()
	self.args = is:popNumberList()
end

function i3k_sbean.homeland_ground_operate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
	os:pushNumber(self.operateType)
	os:pushNumberList(self.args)
end


-- 开始钓鱼
i3k_sbean.homeland_start_fish_res = i3k_class("homeland_start_fish_res")
function i3k_sbean.homeland_start_fish_res:ctor()
	self._pname_ = "homeland_start_fish_res"
	--self.fishTime:		int32	
end

function i3k_sbean.homeland_start_fish_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_start_fish_res:decode(is)
	is:popString()
	self.fishTime = is:popNumber()
end

function i3k_sbean.homeland_start_fish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fishTime)
end


-- 中断钓鱼
i3k_sbean.homeland_stop_fish_res = i3k_class("homeland_stop_fish_res")
function i3k_sbean.homeland_stop_fish_res:ctor()
	self._pname_ = "homeland_stop_fish_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_stop_fish_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_stop_fish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_stop_fish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结束钓鱼
i3k_sbean.homeland_finish_fish_res = i3k_class("homeland_finish_fish_res")
function i3k_sbean.homeland_finish_fish_res:ctor()
	self._pname_ = "homeland_finish_fish_res"
	--self.ok:		int32	
	--self.fishReward:		vector[DummyGoods]	
end

function i3k_sbean.homeland_finish_fish_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_finish_fish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.fishReward = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.homeland_finish_fish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.fishReward)
end


-- 穿戴装备
i3k_sbean.homeland_equip_wear_res = i3k_class("homeland_equip_wear_res")
function i3k_sbean.homeland_equip_wear_res:ctor()
	self._pname_ = "homeland_equip_wear_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_equip_wear_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_equip_wear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_equip_wear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 脱下装备
i3k_sbean.homeland_equip_unwaer_res = i3k_class("homeland_equip_unwaer_res")
function i3k_sbean.homeland_equip_unwaer_res:ctor()
	self._pname_ = "homeland_equip_unwaer_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_equip_unwaer_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_equip_unwaer_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_equip_unwaer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 销毁装备
i3k_sbean.homeland_equip_remove_res = i3k_class("homeland_equip_remove_res")
function i3k_sbean.homeland_equip_remove_res:ctor()
	self._pname_ = "homeland_equip_remove_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_equip_remove_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_equip_remove_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_equip_remove_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 踢出角色
i3k_sbean.homeland_kick_role_res = i3k_class("homeland_kick_role_res")
function i3k_sbean.homeland_kick_role_res:ctor()
	self._pname_ = "homeland_kick_role_res"
	--self.id:		int32	
end

function i3k_sbean.homeland_kick_role_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_kick_role_res:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.homeland_kick_role_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 被踢推送
i3k_sbean.homeland_kick_role_push = i3k_class("homeland_kick_role_push")
function i3k_sbean.homeland_kick_role_push:ctor()
	self._pname_ = "homeland_kick_role_push"
end

function i3k_sbean.homeland_kick_role_push:decode(is)
	is:popString()
end

function i3k_sbean.homeland_kick_role_push:encode(os)
	os:pushString(self._pname_)
end


-- 查询家园内角色
i3k_sbean.homeland_query_roles_res = i3k_class("homeland_query_roles_res")
function i3k_sbean.homeland_query_roles_res:ctor()
	self._pname_ = "homeland_query_roles_res"
	--self.roles:		vector[RoleOverview]	
end

function i3k_sbean.homeland_query_roles_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_query_roles_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.RoleOverview)
end

function i3k_sbean.homeland_query_roles_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 同步家园历史信息
i3k_sbean.homeland_history_sync_res = i3k_class("homeland_history_sync_res")
function i3k_sbean.homeland_history_sync_res:ctor()
	self._pname_ = "homeland_history_sync_res"
	--self.historys:		vector[DBHomelandHistory]	
end

function i3k_sbean.homeland_history_sync_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_history_sync_res:decode(is)
	is:popString()
	self.historys = is:popList(i3k_sbean.DBHomelandHistory)
end

function i3k_sbean.homeland_history_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.historys)
end


-- 修改钓鱼状态
i3k_sbean.homeland_fish_status_change_res = i3k_class("homeland_fish_status_change_res")
function i3k_sbean.homeland_fish_status_change_res:ctor()
	self._pname_ = "homeland_fish_status_change_res"
	--self.ok:		int32	
	--self.dayFishTime:		int32	
	--self.dayFishExpTime:		int32	
end

function i3k_sbean.homeland_fish_status_change_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_fish_status_change_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.dayFishTime = is:popNumber()
	self.dayFishExpTime = is:popNumber()
end

function i3k_sbean.homeland_fish_status_change_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.dayFishTime)
	os:pushNumber(self.dayFishExpTime)
end


-- 登陆同步钓鱼状态
i3k_sbean.role_homeland_fish_status = i3k_class("role_homeland_fish_status")
function i3k_sbean.role_homeland_fish_status:ctor()
	self._pname_ = "role_homeland_fish_status"
end

function i3k_sbean.role_homeland_fish_status:decode(is)
	is:popString()
end

function i3k_sbean.role_homeland_fish_status:encode(os)
	os:pushString(self._pname_)
end


-- 家园生产
i3k_sbean.homeland_produce_res = i3k_class("homeland_produce_res")
function i3k_sbean.homeland_produce_res:ctor()
	self._pname_ = "homeland_produce_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_produce_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_produce_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_produce_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入房间同步
i3k_sbean.house_map_sync = i3k_class("house_map_sync")
function i3k_sbean.house_map_sync:ctor()
	self._pname_ = "house_map_sync"
	--self.roleId:		int32	
	--self.homeland:		HouseMapInfo	
end

function i3k_sbean.house_map_sync:clone()
	return clone(self)
end

function i3k_sbean.house_map_sync:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.homeland = is:pop(i3k_sbean.HouseMapInfo)
end

function i3k_sbean.house_map_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:push(self.homeland)
end


-- 家园房屋升级
i3k_sbean.homeland_house_uplevel_res = i3k_class("homeland_house_uplevel_res")
function i3k_sbean.homeland_house_uplevel_res:ctor()
	self._pname_ = "homeland_house_uplevel_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_house_uplevel_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_house_uplevel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_house_uplevel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 家具背包存入
i3k_sbean.furniture_bag_put_res = i3k_class("furniture_bag_put_res")
function i3k_sbean.furniture_bag_put_res:ctor()
	self._pname_ = "furniture_bag_put_res"
	--self.ok:		int32	
end

function i3k_sbean.furniture_bag_put_res:clone()
	return clone(self)
end

function i3k_sbean.furniture_bag_put_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.furniture_bag_put_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 家具背包取出
i3k_sbean.furniture_bag_get_res = i3k_class("furniture_bag_get_res")
function i3k_sbean.furniture_bag_get_res:ctor()
	self._pname_ = "furniture_bag_get_res"
	--self.ok:		int32	
end

function i3k_sbean.furniture_bag_get_res:clone()
	return clone(self)
end

function i3k_sbean.furniture_bag_get_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.furniture_bag_get_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 地面家具放置
i3k_sbean.land_furniture_put_res = i3k_class("land_furniture_put_res")
function i3k_sbean.land_furniture_put_res:ctor()
	self._pname_ = "land_furniture_put_res"
	--self.ok:		int32	
end

function i3k_sbean.land_furniture_put_res:clone()
	return clone(self)
end

function i3k_sbean.land_furniture_put_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.land_furniture_put_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 地面家具移动
i3k_sbean.land_furniture_move_res = i3k_class("land_furniture_move_res")
function i3k_sbean.land_furniture_move_res:ctor()
	self._pname_ = "land_furniture_move_res"
	--self.ok:		int32	
end

function i3k_sbean.land_furniture_move_res:clone()
	return clone(self)
end

function i3k_sbean.land_furniture_move_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.land_furniture_move_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 地面家具取回
i3k_sbean.land_furniture_remove_res = i3k_class("land_furniture_remove_res")
function i3k_sbean.land_furniture_remove_res:ctor()
	self._pname_ = "land_furniture_remove_res"
	--self.ok:		int32	
end

function i3k_sbean.land_furniture_remove_res:clone()
	return clone(self)
end

function i3k_sbean.land_furniture_remove_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.land_furniture_remove_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 地毯家具放置
i3k_sbean.floor_furniture_put_res = i3k_class("floor_furniture_put_res")
function i3k_sbean.floor_furniture_put_res:ctor()
	self._pname_ = "floor_furniture_put_res"
	--self.ok:		int32	
end

function i3k_sbean.floor_furniture_put_res:clone()
	return clone(self)
end

function i3k_sbean.floor_furniture_put_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.floor_furniture_put_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 地毯家具移动
i3k_sbean.floor_furniture_move_res = i3k_class("floor_furniture_move_res")
function i3k_sbean.floor_furniture_move_res:ctor()
	self._pname_ = "floor_furniture_move_res"
	--self.ok:		int32	
end

function i3k_sbean.floor_furniture_move_res:clone()
	return clone(self)
end

function i3k_sbean.floor_furniture_move_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.floor_furniture_move_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 地毯家具取回
i3k_sbean.floor_furniture_remove_res = i3k_class("floor_furniture_remove_res")
function i3k_sbean.floor_furniture_remove_res:ctor()
	self._pname_ = "floor_furniture_remove_res"
	--self.ok:		int32	
end

function i3k_sbean.floor_furniture_remove_res:clone()
	return clone(self)
end

function i3k_sbean.floor_furniture_remove_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.floor_furniture_remove_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 墙面家具放置
i3k_sbean.wall_furniture_put_res = i3k_class("wall_furniture_put_res")
function i3k_sbean.wall_furniture_put_res:ctor()
	self._pname_ = "wall_furniture_put_res"
	--self.ok:		int32	
end

function i3k_sbean.wall_furniture_put_res:clone()
	return clone(self)
end

function i3k_sbean.wall_furniture_put_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.wall_furniture_put_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 墙面家具取回
i3k_sbean.wall_furniture_remove_res = i3k_class("wall_furniture_remove_res")
function i3k_sbean.wall_furniture_remove_res:ctor()
	self._pname_ = "wall_furniture_remove_res"
	--self.ok:		int32	
end

function i3k_sbean.wall_furniture_remove_res:clone()
	return clone(self)
end

function i3k_sbean.wall_furniture_remove_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.wall_furniture_remove_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 附加家具放置
i3k_sbean.addition_furniture_put_res = i3k_class("addition_furniture_put_res")
function i3k_sbean.addition_furniture_put_res:ctor()
	self._pname_ = "addition_furniture_put_res"
	--self.ok:		int32	
end

function i3k_sbean.addition_furniture_put_res:clone()
	return clone(self)
end

function i3k_sbean.addition_furniture_put_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.addition_furniture_put_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 附加家具取回
i3k_sbean.addition_furniture_remove_res = i3k_class("addition_furniture_remove_res")
function i3k_sbean.addition_furniture_remove_res:ctor()
	self._pname_ = "addition_furniture_remove_res"
	--self.ok:		int32	
end

function i3k_sbean.addition_furniture_remove_res:clone()
	return clone(self)
end

function i3k_sbean.addition_furniture_remove_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.addition_furniture_remove_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入房间
i3k_sbean.house_enter_res = i3k_class("house_enter_res")
function i3k_sbean.house_enter_res:ctor()
	self._pname_ = "house_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.house_enter_res:clone()
	return clone(self)
end

function i3k_sbean.house_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.house_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 家园房屋等级广播
i3k_sbean.homeland_house_level = i3k_class("homeland_house_level")
function i3k_sbean.homeland_house_level:ctor()
	self._pname_ = "homeland_house_level"
	--self.level:		int32	
end

function i3k_sbean.homeland_house_level:clone()
	return clone(self)
end

function i3k_sbean.homeland_house_level:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.homeland_house_level:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 家园地面家具摆放
i3k_sbean.house_land_furniture_use = i3k_class("house_land_furniture_use")
function i3k_sbean.house_land_furniture_use:ctor()
	self._pname_ = "house_land_furniture_use"
	--self.furniture:		DBHomelandFurnitures	
end

function i3k_sbean.house_land_furniture_use:clone()
	return clone(self)
end

function i3k_sbean.house_land_furniture_use:decode(is)
	is:popString()
	self.furniture = is:pop(i3k_sbean.DBHomelandFurnitures)
end

function i3k_sbean.house_land_furniture_use:encode(os)
	os:pushString(self._pname_)
	os:push(self.furniture)
end


-- 家园地毯家具摆放
i3k_sbean.house_floor_furniture_use = i3k_class("house_floor_furniture_use")
function i3k_sbean.house_floor_furniture_use:ctor()
	self._pname_ = "house_floor_furniture_use"
	--self.furniture:		DBHomelandFloorFurnitures	
end

function i3k_sbean.house_floor_furniture_use:clone()
	return clone(self)
end

function i3k_sbean.house_floor_furniture_use:decode(is)
	is:popString()
	self.furniture = is:pop(i3k_sbean.DBHomelandFloorFurnitures)
end

function i3k_sbean.house_floor_furniture_use:encode(os)
	os:pushString(self._pname_)
	os:push(self.furniture)
end


-- 家园墙面家具摆放
i3k_sbean.house_wall_furniture_use = i3k_class("house_wall_furniture_use")
function i3k_sbean.house_wall_furniture_use:ctor()
	self._pname_ = "house_wall_furniture_use"
	--self.furniture:		DBHomelandPendant	
end

function i3k_sbean.house_wall_furniture_use:clone()
	return clone(self)
end

function i3k_sbean.house_wall_furniture_use:decode(is)
	is:popString()
	self.furniture = is:pop(i3k_sbean.DBHomelandPendant)
end

function i3k_sbean.house_wall_furniture_use:encode(os)
	os:pushString(self._pname_)
	os:push(self.furniture)
end


-- 家园附加家具摆放
i3k_sbean.house_addition_furniture_use = i3k_class("house_addition_furniture_use")
function i3k_sbean.house_addition_furniture_use:ctor()
	self._pname_ = "house_addition_furniture_use"
	--self.furnitureId:		int32	
	--self.index:		int32	
end

function i3k_sbean.house_addition_furniture_use:clone()
	return clone(self)
end

function i3k_sbean.house_addition_furniture_use:decode(is)
	is:popString()
	self.furnitureId = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.house_addition_furniture_use:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.furnitureId)
	os:pushNumber(self.index)
end


-- 家园家具移除
i3k_sbean.house_land_furniture_remove = i3k_class("house_land_furniture_remove")
function i3k_sbean.house_land_furniture_remove:ctor()
	self._pname_ = "house_land_furniture_remove"
	--self.type:		int32	
	--self.index:		int32	
end

function i3k_sbean.house_land_furniture_remove:clone()
	return clone(self)
end

function i3k_sbean.house_land_furniture_remove:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.house_land_furniture_remove:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
end


-- 家园家具移动
i3k_sbean.house_furniture_move = i3k_class("house_furniture_move")
function i3k_sbean.house_furniture_move:ctor()
	self._pname_ = "house_furniture_move"
	--self.index:		int32	
	--self.type:		int32	
	--self.positionX:		int32	
	--self.positionY:		int32	
	--self.direction:		int32	
end

function i3k_sbean.house_furniture_move:clone()
	return clone(self)
end

function i3k_sbean.house_furniture_move:decode(is)
	is:popString()
	self.index = is:popNumber()
	self.type = is:popNumber()
	self.positionX = is:popNumber()
	self.positionY = is:popNumber()
	self.direction = is:popNumber()
end

function i3k_sbean.house_furniture_move:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
	os:pushNumber(self.type)
	os:pushNumber(self.positionX)
	os:pushNumber(self.positionY)
	os:pushNumber(self.direction)
end


-- 家具背包同步
i3k_sbean.house_bag_furniture_sync_res = i3k_class("house_bag_furniture_sync_res")
function i3k_sbean.house_bag_furniture_sync_res:ctor()
	self._pname_ = "house_bag_furniture_sync_res"
	--self.landFurniture:		map[int32, int32]	
	--self.wallFurniture:		map[int32, int32]	
	--self.additionFurniture:		map[int32, int32]	
	--self.floorFurniture:		map[int32, int32]	
end

function i3k_sbean.house_bag_furniture_sync_res:clone()
	return clone(self)
end

function i3k_sbean.house_bag_furniture_sync_res:decode(is)
	is:popString()
	self.landFurniture = is:popNumberNumberMap()
	self.wallFurniture = is:popNumberNumberMap()
	self.additionFurniture = is:popNumberNumberMap()
	self.floorFurniture = is:popNumberNumberMap()
end

function i3k_sbean.house_bag_furniture_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.landFurniture)
	os:pushNumberNumberMap(self.wallFurniture)
	os:pushNumberNumberMap(self.additionFurniture)
	os:pushNumberNumberMap(self.floorFurniture)
end


-- 钓鱼超时结束同步
i3k_sbean.homeland_fish_end = i3k_class("homeland_fish_end")
function i3k_sbean.homeland_fish_end:ctor()
	self._pname_ = "homeland_fish_end"
end

function i3k_sbean.homeland_fish_end:decode(is)
	is:popString()
end

function i3k_sbean.homeland_fish_end:encode(os)
	os:pushString(self._pname_)
end


-- 房屋皮肤切换
i3k_sbean.house_skin_select_res = i3k_class("house_skin_select_res")
function i3k_sbean.house_skin_select_res:ctor()
	self._pname_ = "house_skin_select_res"
	--self.ok:		int32	
end

function i3k_sbean.house_skin_select_res:clone()
	return clone(self)
end

function i3k_sbean.house_skin_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.house_skin_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 房屋皮肤切换通知
i3k_sbean.house_skin_change = i3k_class("house_skin_change")
function i3k_sbean.house_skin_change:ctor()
	self._pname_ = "house_skin_change"
	--self.index:		int32	
end

function i3k_sbean.house_skin_change:clone()
	return clone(self)
end

function i3k_sbean.house_skin_change:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.house_skin_change:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 使用房屋皮肤解锁道具
i3k_sbean.bag_use_house_skin_item_res = i3k_class("bag_use_house_skin_item_res")
function i3k_sbean.bag_use_house_skin_item_res:ctor()
	self._pname_ = "bag_use_house_skin_item_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_use_house_skin_item_res:clone()
	return clone(self)
end

function i3k_sbean.bag_use_house_skin_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_use_house_skin_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 房屋已解锁皮肤同步
i3k_sbean.house_unlock_skin_sync_res = i3k_class("house_unlock_skin_sync_res")
function i3k_sbean.house_unlock_skin_sync_res:ctor()
	self._pname_ = "house_unlock_skin_sync_res"
	--self.unlockSkin:		set[int32]	
end

function i3k_sbean.house_unlock_skin_sync_res:clone()
	return clone(self)
end

function i3k_sbean.house_unlock_skin_sync_res:decode(is)
	is:popString()
	self.unlockSkin = is:popNumberSet()
end

function i3k_sbean.house_unlock_skin_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.unlockSkin)
end


-- 传世大酬宾活动同步
i3k_sbean.legendmake_sync_res = i3k_class("legendmake_sync_res")
function i3k_sbean.legendmake_sync_res:ctor()
	self._pname_ = "legendmake_sync_res"
	--self.ok:		int32	
	--self.info:		RoleLegendMakeInfo	
end

function i3k_sbean.legendmake_sync_res:clone()
	return clone(self)
end

function i3k_sbean.legendmake_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.RoleLegendMakeInfo)
end

function i3k_sbean.legendmake_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 标记脚本角色
i3k_sbean.script_role_mark_res = i3k_class("script_role_mark_res")
function i3k_sbean.script_role_mark_res:ctor()
	self._pname_ = "script_role_mark_res"
	--self.ok:		int32	
end

function i3k_sbean.script_role_mark_res:clone()
	return clone(self)
end

function i3k_sbean.script_role_mark_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.script_role_mark_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆节日活动同步
i3k_sbean.role_festival_info = i3k_class("role_festival_info")
function i3k_sbean.role_festival_info:ctor()
	self._pname_ = "role_festival_info"
	--self.gifts:		map[int32, FestivalGift]	
	--self.bless:		map[int32, FestivalBless]	
end

function i3k_sbean.role_festival_info:clone()
	return clone(self)
end

function i3k_sbean.role_festival_info:decode(is)
	is:popString()
	self.gifts = is:popNumberMap(i3k_sbean.FestivalGift)
	self.bless = is:popNumberMap(i3k_sbean.FestivalBless)
end

function i3k_sbean.role_festival_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.gifts)
	os:pushNumberMap(self.bless)
end


-- 节日活动礼盒领取
i3k_sbean.festival_takegift_res = i3k_class("festival_takegift_res")
function i3k_sbean.festival_takegift_res:ctor()
	self._pname_ = "festival_takegift_res"
	--self.ok:		int32	
end

function i3k_sbean.festival_takegift_res:clone()
	return clone(self)
end

function i3k_sbean.festival_takegift_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.festival_takegift_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 节日活动世界祝福
i3k_sbean.festival_bless_res = i3k_class("festival_bless_res")
function i3k_sbean.festival_bless_res:ctor()
	self._pname_ = "festival_bless_res"
	--self.ok:		int32	
end

function i3k_sbean.festival_bless_res:clone()
	return clone(self)
end

function i3k_sbean.festival_bless_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.festival_bless_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 佛诞节信息同步
i3k_sbean.donate_sync_info_res = i3k_class("donate_sync_info_res")
function i3k_sbean.donate_sync_info_res:ctor()
	self._pname_ = "donate_sync_info_res"
	--self.ok:		int32	
	--self.donateInfo:		RoleDonateInfo	
end

function i3k_sbean.donate_sync_info_res:clone()
	return clone(self)
end

function i3k_sbean.donate_sync_info_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.donateInfo = is:pop(i3k_sbean.RoleDonateInfo)
end

function i3k_sbean.donate_sync_info_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.donateInfo)
end


-- 佛诞节进行捐赠
i3k_sbean.donate_conduct_res = i3k_class("donate_conduct_res")
function i3k_sbean.donate_conduct_res:ctor()
	self._pname_ = "donate_conduct_res"
	--self.totalTimes:		int32	
end

function i3k_sbean.donate_conduct_res:clone()
	return clone(self)
end

function i3k_sbean.donate_conduct_res:decode(is)
	is:popString()
	self.totalTimes = is:popNumber()
end

function i3k_sbean.donate_conduct_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.totalTimes)
end


-- 领取奖励
i3k_sbean.donate_reward_res = i3k_class("donate_reward_res")
function i3k_sbean.donate_reward_res:ctor()
	self._pname_ = "donate_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.donate_reward_res:clone()
	return clone(self)
end

function i3k_sbean.donate_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.donate_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 响应图钉信息
i3k_sbean.thumbtack_sync_res = i3k_class("thumbtack_sync_res")
function i3k_sbean.thumbtack_sync_res:ctor()
	self._pname_ = "thumbtack_sync_res"
	--self.ok:		int32	
	--self.info:		vector[ThumbTackInfos]	
end

function i3k_sbean.thumbtack_sync_res:clone()
	return clone(self)
end

function i3k_sbean.thumbtack_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:popList(i3k_sbean.ThumbTackInfos)
end

function i3k_sbean.thumbtack_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.info)
end


-- 添加图钉
i3k_sbean.thumbtack_add_res = i3k_class("thumbtack_add_res")
function i3k_sbean.thumbtack_add_res:ctor()
	self._pname_ = "thumbtack_add_res"
	--self.ok:		int32	
	--self.info:		ThumbTackInfo	
end

function i3k_sbean.thumbtack_add_res:clone()
	return clone(self)
end

function i3k_sbean.thumbtack_add_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.info = is:pop(i3k_sbean.ThumbTackInfo)
end

function i3k_sbean.thumbtack_add_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.info)
end


-- 修改备注
i3k_sbean.thumbtack_revise_remarks_res = i3k_class("thumbtack_revise_remarks_res")
function i3k_sbean.thumbtack_revise_remarks_res:ctor()
	self._pname_ = "thumbtack_revise_remarks_res"
	--self.ok:		int32	
	--self.remarks:		string	
end

function i3k_sbean.thumbtack_revise_remarks_res:clone()
	return clone(self)
end

function i3k_sbean.thumbtack_revise_remarks_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.remarks = is:popString()
end

function i3k_sbean.thumbtack_revise_remarks_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushString(self.remarks)
end


-- 删除图钉
i3k_sbean.thumbtack_delete_res = i3k_class("thumbtack_delete_res")
function i3k_sbean.thumbtack_delete_res:ctor()
	self._pname_ = "thumbtack_delete_res"
	--self.ok:		int32	
end

function i3k_sbean.thumbtack_delete_res:clone()
	return clone(self)
end

function i3k_sbean.thumbtack_delete_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.thumbtack_delete_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用图钉
i3k_sbean.thumbtack_use_res = i3k_class("thumbtack_use_res")
function i3k_sbean.thumbtack_use_res:ctor()
	self._pname_ = "thumbtack_use_res"
	--self.ok:		int32	
end

function i3k_sbean.thumbtack_use_res:clone()
	return clone(self)
end

function i3k_sbean.thumbtack_use_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.thumbtack_use_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派捐赠
i3k_sbean.sect_donation_res = i3k_class("sect_donation_res")
function i3k_sbean.sect_donation_res:ctor()
	self._pname_ = "sect_donation_res"
	--self.ok:		int32	
end

function i3k_sbean.sect_donation_res:clone()
	return clone(self)
end

function i3k_sbean.sect_donation_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_donation_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 帮派捐赠同步
i3k_sbean.sect_donation_sync_res = i3k_class("sect_donation_sync_res")
function i3k_sbean.sect_donation_sync_res:ctor()
	self._pname_ = "sect_donation_sync_res"
	--self.sectInfo:		DBSectDonation	
	--self.roleInfo:		DBRoleSectDonation	
end

function i3k_sbean.sect_donation_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_donation_sync_res:decode(is)
	is:popString()
	self.sectInfo = is:pop(i3k_sbean.DBSectDonation)
	self.roleInfo = is:pop(i3k_sbean.DBRoleSectDonation)
end

function i3k_sbean.sect_donation_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.sectInfo)
	os:push(self.roleInfo)
end


-- 帮派捐赠同步捐赠角色
i3k_sbean.sect_donation_roles_res = i3k_class("sect_donation_roles_res")
function i3k_sbean.sect_donation_roles_res:ctor()
	self._pname_ = "sect_donation_roles_res"
	--self.roles:		vector[DBSectMember]	
end

function i3k_sbean.sect_donation_roles_res:clone()
	return clone(self)
end

function i3k_sbean.sect_donation_roles_res:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.DBSectMember)
end

function i3k_sbean.sect_donation_roles_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 同步伙伴码
i3k_sbean.sync_partner_info_res = i3k_class("sync_partner_info_res")
function i3k_sbean.sync_partner_info_res:ctor()
	self._pname_ = "sync_partner_info_res"
	--self.code:		string	
	--self.bindCode:		string	
	--self.partnerInfo:		DBPartner	
	--self.fightPower:		int32	
end

function i3k_sbean.sync_partner_info_res:clone()
	return clone(self)
end

function i3k_sbean.sync_partner_info_res:decode(is)
	is:popString()
	self.code = is:popString()
	self.bindCode = is:popString()
	self.partnerInfo = is:pop(i3k_sbean.DBPartner)
	self.fightPower = is:popNumber()
end

function i3k_sbean.sync_partner_info_res:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.code)
	os:pushString(self.bindCode)
	os:push(self.partnerInfo)
	os:pushNumber(self.fightPower)
end


-- 绑定伙伴码
i3k_sbean.add_partner_code_res = i3k_class("add_partner_code_res")
function i3k_sbean.add_partner_code_res:ctor()
	self._pname_ = "add_partner_code_res"
	--self.ok:		int32	
end

function i3k_sbean.add_partner_code_res:clone()
	return clone(self)
end

function i3k_sbean.add_partner_code_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.add_partner_code_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取奖励
i3k_sbean.receive_partner_reward_res = i3k_class("receive_partner_reward_res")
function i3k_sbean.receive_partner_reward_res:ctor()
	self._pname_ = "receive_partner_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.receive_partner_reward_res:clone()
	return clone(self)
end

function i3k_sbean.receive_partner_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.receive_partner_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取荣耀归来奖励
i3k_sbean.receive_partner_honour_reward_res = i3k_class("receive_partner_honour_reward_res")
function i3k_sbean.receive_partner_honour_reward_res:ctor()
	self._pname_ = "receive_partner_honour_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.receive_partner_honour_reward_res:clone()
	return clone(self)
end

function i3k_sbean.receive_partner_honour_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.receive_partner_honour_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 是否绑定了伙伴码
i3k_sbean.role_is_bind_partner = i3k_class("role_is_bind_partner")
function i3k_sbean.role_is_bind_partner:ctor()
	self._pname_ = "role_is_bind_partner"
	--self.bindTime:		int32	
end

function i3k_sbean.role_is_bind_partner:clone()
	return clone(self)
end

function i3k_sbean.role_is_bind_partner:decode(is)
	is:popString()
	self.bindTime = is:popNumber()
end

function i3k_sbean.role_is_bind_partner:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bindTime)
end


-- 单人开启NPC副本
i3k_sbean.single_npc_map_start_res = i3k_class("single_npc_map_start_res")
function i3k_sbean.single_npc_map_start_res:ctor()
	self._pname_ = "single_npc_map_start_res"
	--self.ok:		int32	
end

function i3k_sbean.single_npc_map_start_res:clone()
	return clone(self)
end

function i3k_sbean.single_npc_map_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.single_npc_map_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 伙伴解绑下线玩家
i3k_sbean.unbind_partner_res = i3k_class("unbind_partner_res")
function i3k_sbean.unbind_partner_res:ctor()
	self._pname_ = "unbind_partner_res"
	--self.ok:		int32	
end

function i3k_sbean.unbind_partner_res:clone()
	return clone(self)
end

function i3k_sbean.unbind_partner_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.unbind_partner_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 伙伴解绑上线玩家
i3k_sbean.unbind_upper_partner_res = i3k_class("unbind_upper_partner_res")
function i3k_sbean.unbind_upper_partner_res:ctor()
	self._pname_ = "unbind_upper_partner_res"
	--self.ok:		int32	
end

function i3k_sbean.unbind_upper_partner_res:clone()
	return clone(self)
end

function i3k_sbean.unbind_upper_partner_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.unbind_upper_partner_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录通知善缘值
i3k_sbean.role_release_info = i3k_class("role_release_info")
function i3k_sbean.role_release_info:ctor()
	self._pname_ = "role_release_info"
	--self.kindFate:		int32	
end

function i3k_sbean.role_release_info:clone()
	return clone(self)
end

function i3k_sbean.role_release_info:decode(is)
	is:popString()
	self.kindFate = is:popNumber()
end

function i3k_sbean.role_release_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.kindFate)
end


-- 进行放生道具
i3k_sbean.conduct_release_item_res = i3k_class("conduct_release_item_res")
function i3k_sbean.conduct_release_item_res:ctor()
	self._pname_ = "conduct_release_item_res"
	--self.ok:		int32	
end

function i3k_sbean.conduct_release_item_res:clone()
	return clone(self)
end

function i3k_sbean.conduct_release_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.conduct_release_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步登科有礼信息
i3k_sbean.admission_sync_info_res = i3k_class("admission_sync_info_res")
function i3k_sbean.admission_sync_info_res:ctor()
	self._pname_ = "admission_sync_info_res"
	--self.info:		DBAdmission	
end

function i3k_sbean.admission_sync_info_res:clone()
	return clone(self)
end

function i3k_sbean.admission_sync_info_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBAdmission)
end

function i3k_sbean.admission_sync_info_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 卜算响应
i3k_sbean.admission_conduct_res = i3k_class("admission_conduct_res")
function i3k_sbean.admission_conduct_res:ctor()
	self._pname_ = "admission_conduct_res"
	--self.rewardId:		int32	
end

function i3k_sbean.admission_conduct_res:clone()
	return clone(self)
end

function i3k_sbean.admission_conduct_res:decode(is)
	is:popString()
	self.rewardId = is:popNumber()
end

function i3k_sbean.admission_conduct_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rewardId)
end


-- 领取姻缘成就奖励
i3k_sbean.marriage_achieve_receive_reward_res = i3k_class("marriage_achieve_receive_reward_res")
function i3k_sbean.marriage_achieve_receive_reward_res:ctor()
	self._pname_ = "marriage_achieve_receive_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.marriage_achieve_receive_reward_res:clone()
	return clone(self)
end

function i3k_sbean.marriage_achieve_receive_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.marriage_achieve_receive_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.marriage_achieve_accumulative_reward_res = i3k_class("marriage_achieve_accumulative_reward_res")
function i3k_sbean.marriage_achieve_accumulative_reward_res:ctor()
	self._pname_ = "marriage_achieve_accumulative_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.marriage_achieve_accumulative_reward_res:clone()
	return clone(self)
end

function i3k_sbean.marriage_achieve_accumulative_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.marriage_achieve_accumulative_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入宠物试炼副本
i3k_sbean.pettrain_enter_res = i3k_class("pettrain_enter_res")
function i3k_sbean.pettrain_enter_res:ctor()
	self._pname_ = "pettrain_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.pettrain_enter_res:clone()
	return clone(self)
end

function i3k_sbean.pettrain_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pettrain_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入宠物试炼副本同步
i3k_sbean.pettrain_enter_sync = i3k_class("pettrain_enter_sync")
function i3k_sbean.pettrain_enter_sync:ctor()
	self._pname_ = "pettrain_enter_sync"
	--self.info:		DBPetTrain	
end

function i3k_sbean.pettrain_enter_sync:clone()
	return clone(self)
end

function i3k_sbean.pettrain_enter_sync:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBPetTrain)
end

function i3k_sbean.pettrain_enter_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 领取宠物试炼任务
i3k_sbean.pettrain_task_take_res = i3k_class("pettrain_task_take_res")
function i3k_sbean.pettrain_task_take_res:ctor()
	self._pname_ = "pettrain_task_take_res"
	--self.ok:		int32	
end

function i3k_sbean.pettrain_task_take_res:clone()
	return clone(self)
end

function i3k_sbean.pettrain_task_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pettrain_task_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成宠物试炼任务
i3k_sbean.pettrain_task_finish_res = i3k_class("pettrain_task_finish_res")
function i3k_sbean.pettrain_task_finish_res:ctor()
	self._pname_ = "pettrain_task_finish_res"
	--self.ok:		int32	
	--self.buffs:		map[int32, int32]	
end

function i3k_sbean.pettrain_task_finish_res:clone()
	return clone(self)
end

function i3k_sbean.pettrain_task_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.buffs = is:popNumberNumberMap()
end

function i3k_sbean.pettrain_task_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.buffs)
end


-- 采集宠物试炼矿物
i3k_sbean.pettrain_mineral_take_res = i3k_class("pettrain_mineral_take_res")
function i3k_sbean.pettrain_mineral_take_res:ctor()
	self._pname_ = "pettrain_mineral_take_res"
	--self.ok:		int32	
	--self.drops:		map[int32, int32]	
	--self.buffs:		map[int32, int32]	
end

function i3k_sbean.pettrain_mineral_take_res:clone()
	return clone(self)
end

function i3k_sbean.pettrain_mineral_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popNumberNumberMap()
	self.buffs = is:popNumberNumberMap()
end

function i3k_sbean.pettrain_mineral_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.drops)
	os:pushNumberNumberMap(self.buffs)
end


-- 五绝争霸信息同步
i3k_sbean.five_hegemony_sync_info_res = i3k_class("five_hegemony_sync_info_res")
function i3k_sbean.five_hegemony_sync_info_res:ctor()
	self._pname_ = "five_hegemony_sync_info_res"
	--self.managerInfo:		FiveHegemonyInfo	
end

function i3k_sbean.five_hegemony_sync_info_res:clone()
	return clone(self)
end

function i3k_sbean.five_hegemony_sync_info_res:decode(is)
	is:popString()
	self.managerInfo = is:pop(i3k_sbean.FiveHegemonyInfo)
end

function i3k_sbean.five_hegemony_sync_info_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.managerInfo)
end


-- 选择npc
i3k_sbean.five_hegemony_choose_npc_res = i3k_class("five_hegemony_choose_npc_res")
function i3k_sbean.five_hegemony_choose_npc_res:ctor()
	self._pname_ = "five_hegemony_choose_npc_res"
	--self.ok:		int32	
end

function i3k_sbean.five_hegemony_choose_npc_res:clone()
	return clone(self)
end

function i3k_sbean.five_hegemony_choose_npc_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.five_hegemony_choose_npc_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 选择npc技能
i3k_sbean.five_hegemony_choose_skill_res = i3k_class("five_hegemony_choose_skill_res")
function i3k_sbean.five_hegemony_choose_skill_res:ctor()
	self._pname_ = "five_hegemony_choose_skill_res"
	--self.ok:		int32	
end

function i3k_sbean.five_hegemony_choose_skill_res:clone()
	return clone(self)
end

function i3k_sbean.five_hegemony_choose_skill_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.five_hegemony_choose_skill_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 请求回合争斗结果
i3k_sbean.five_hegemony_round_result_res = i3k_class("five_hegemony_round_result_res")
function i3k_sbean.five_hegemony_round_result_res:ctor()
	self._pname_ = "five_hegemony_round_result_res"
	--self.result:		FiveHegemonyFightResult	
end

function i3k_sbean.five_hegemony_round_result_res:clone()
	return clone(self)
end

function i3k_sbean.five_hegemony_round_result_res:decode(is)
	is:popString()
	self.result = is:pop(i3k_sbean.FiveHegemonyFightResult)
end

function i3k_sbean.five_hegemony_round_result_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.result)
end


-- 请求弹幕
i3k_sbean.notice_five_hegemony_barrages = i3k_class("notice_five_hegemony_barrages")
function i3k_sbean.notice_five_hegemony_barrages:ctor()
	self._pname_ = "notice_five_hegemony_barrages"
	--self.barrages:		FiveHegemonyBarrageInfo	
end

function i3k_sbean.notice_five_hegemony_barrages:clone()
	return clone(self)
end

function i3k_sbean.notice_five_hegemony_barrages:decode(is)
	is:popString()
	self.barrages = is:pop(i3k_sbean.FiveHegemonyBarrageInfo)
end

function i3k_sbean.notice_five_hegemony_barrages:encode(os)
	os:pushString(self._pname_)
	os:push(self.barrages)
end


-- 发送弹幕
i3k_sbean.five_hegemony_send_barrage_res = i3k_class("five_hegemony_send_barrage_res")
function i3k_sbean.five_hegemony_send_barrage_res:ctor()
	self._pname_ = "five_hegemony_send_barrage_res"
	--self.ok:		int32	
end

function i3k_sbean.five_hegemony_send_barrage_res:clone()
	return clone(self)
end

function i3k_sbean.five_hegemony_send_barrage_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.five_hegemony_send_barrage_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 奖励怪物刷新后进入副本推送坐标
i3k_sbean.monster_position = i3k_class("monster_position")
function i3k_sbean.monster_position:ctor()
	self._pname_ = "monster_position"
	--self.position:		Vector3	
end

function i3k_sbean.monster_position:clone()
	return clone(self)
end

function i3k_sbean.monster_position:decode(is)
	is:popString()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.monster_position:encode(os)
	os:pushString(self._pname_)
	os:push(self.position)
end


-- 邀请设置
i3k_sbean.invitation_relevant_settings_res = i3k_class("invitation_relevant_settings_res")
function i3k_sbean.invitation_relevant_settings_res:ctor()
	self._pname_ = "invitation_relevant_settings_res"
	--self.ok:		int32	
end

function i3k_sbean.invitation_relevant_settings_res:clone()
	return clone(self)
end

function i3k_sbean.invitation_relevant_settings_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.invitation_relevant_settings_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录同步邀请设置
i3k_sbean.sync_invitation_settings_info = i3k_class("sync_invitation_settings_info")
function i3k_sbean.sync_invitation_settings_info:ctor()
	self._pname_ = "sync_invitation_settings_info"
	--self.friend:		int32	
	--self.team:		int32	
	--self.single:		int32	
end

function i3k_sbean.sync_invitation_settings_info:clone()
	return clone(self)
end

function i3k_sbean.sync_invitation_settings_info:decode(is)
	is:popString()
	self.friend = is:popNumber()
	self.team = is:popNumber()
	self.single = is:popNumber()
end

function i3k_sbean.sync_invitation_settings_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.friend)
	os:pushNumber(self.team)
	os:pushNumber(self.single)
end


-- 日程记录同步
i3k_sbean.schdule_log_sync_res = i3k_class("schdule_log_sync_res")
function i3k_sbean.schdule_log_sync_res:ctor()
	self._pname_ = "schdule_log_sync_res"
	--self.logs:		vector[DBRoleSchduleLog]	
end

function i3k_sbean.schdule_log_sync_res:clone()
	return clone(self)
end

function i3k_sbean.schdule_log_sync_res:decode(is)
	is:popString()
	self.logs = is:popList(i3k_sbean.DBRoleSchduleLog)
end

function i3k_sbean.schdule_log_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.logs)
end


-- 登录同步战斗姿态信息
i3k_sbean.combat_type_info_sync = i3k_class("combat_type_info_sync")
function i3k_sbean.combat_type_info_sync:ctor()
	self._pname_ = "combat_type_info_sync"
	--self.info:		DBRoleCombatTypeInfo	
end

function i3k_sbean.combat_type_info_sync:clone()
	return clone(self)
end

function i3k_sbean.combat_type_info_sync:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleCombatTypeInfo)
end

function i3k_sbean.combat_type_info_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 通知客户端显示map服务器属性，用于调试
i3k_sbean.role_show_props = i3k_class("role_show_props")
function i3k_sbean.role_show_props:ctor()
	self._pname_ = "role_show_props"
	--self.props:		map[int32, int32]	
end

function i3k_sbean.role_show_props:clone()
	return clone(self)
end

function i3k_sbean.role_show_props:decode(is)
	is:popString()
	self.props = is:popNumberNumberMap()
end

function i3k_sbean.role_show_props:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.props)
end


-- 开始进入地图
i3k_sbean.role_map_welcome_start = i3k_class("role_map_welcome_start")
function i3k_sbean.role_map_welcome_start:ctor()
	self._pname_ = "role_map_welcome_start"
end

function i3k_sbean.role_map_welcome_start:decode(is)
	is:popString()
end

function i3k_sbean.role_map_welcome_start:encode(os)
	os:pushString(self._pname_)
end


-- 进入地图成功，对应role_enter_map的异步响应
i3k_sbean.role_map_welcome = i3k_class("role_map_welcome")
function i3k_sbean.role_map_welcome:ctor()
	self._pname_ = "role_map_welcome"
	--self.curHP:		int32	
	--self.curSP:		int32	
	--self.isDead:		int32	
	--self.fightSP:		int32	
	--self.buffs:		map[int32, CBuff]	
	--self.attackMode:		int32	
	--self.pkNameGrade:		int32	
	--self.pkState:		int32	
	--self.pets:		map[int32, FightPet]	
	--self.petHost:		PetHost	
	--self.timeTick:		TimeTick	
	--self.weaponBless:		WeaponBless	
end

function i3k_sbean.role_map_welcome:clone()
	return clone(self)
end

function i3k_sbean.role_map_welcome:decode(is)
	is:popString()
	self.curHP = is:popNumber()
	self.curSP = is:popNumber()
	self.isDead = is:popNumber()
	self.fightSP = is:popNumber()
	self.buffs = is:popNumberMap(i3k_sbean.CBuff)
	self.attackMode = is:popNumber()
	self.pkNameGrade = is:popNumber()
	self.pkState = is:popNumber()
	self.pets = is:popNumberMap(i3k_sbean.FightPet)
	self.petHost = is:pop(i3k_sbean.PetHost)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
	self.weaponBless = is:pop(i3k_sbean.WeaponBless)
end

function i3k_sbean.role_map_welcome:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curHP)
	os:pushNumber(self.curSP)
	os:pushNumber(self.isDead)
	os:pushNumber(self.fightSP)
	os:pushNumberMap(self.buffs)
	os:pushNumber(self.attackMode)
	os:pushNumber(self.pkNameGrade)
	os:pushNumber(self.pkState)
	os:pushNumberMap(self.pets)
	os:push(self.petHost)
	os:push(self.timeTick)
	os:push(self.weaponBless)
end


-- 进地图同步玩家技能CD(key: skillID, value: 剩余多少ms结束)
i3k_sbean.role_skills_cooldown = i3k_class("role_skills_cooldown")
function i3k_sbean.role_skills_cooldown:ctor()
	self._pname_ = "role_skills_cooldown"
	--self.cds:		map[int32, int32]	
end

function i3k_sbean.role_skills_cooldown:clone()
	return clone(self)
end

function i3k_sbean.role_skills_cooldown:decode(is)
	is:popString()
	self.cds = is:popNumberNumberMap()
end

function i3k_sbean.role_skills_cooldown:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.cds)
end


-- 进地图同步玩家在第几个出生点
i3k_sbean.role_spawn_point = i3k_class("role_spawn_point")
function i3k_sbean.role_spawn_point:ctor()
	self._pname_ = "role_spawn_point"
	--self.index:		int32	
end

function i3k_sbean.role_spawn_point:clone()
	return clone(self)
end

function i3k_sbean.role_spawn_point:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.role_spawn_point:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- map同步神兵变身剩余时间
i3k_sbean.role_weaponlefttime = i3k_class("role_weaponlefttime")
function i3k_sbean.role_weaponlefttime:ctor()
	self._pname_ = "role_weaponlefttime"
	--self.leftTime:		int32	
end

function i3k_sbean.role_weaponlefttime:clone()
	return clone(self)
end

function i3k_sbean.role_weaponlefttime:decode(is)
	is:popString()
	self.leftTime = is:popNumber()
end

function i3k_sbean.role_weaponlefttime:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.leftTime)
end


-- map同步当前神兵ID
i3k_sbean.role_curweapon = i3k_class("role_curweapon")
function i3k_sbean.role_curweapon:ctor()
	self._pname_ = "role_curweapon"
	--self.curWeapon:		int32	
end

function i3k_sbean.role_curweapon:clone()
	return clone(self)
end

function i3k_sbean.role_curweapon:decode(is)
	is:popString()
	self.curWeapon = is:popNumber()
end

function i3k_sbean.role_curweapon:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curWeapon)
end


-- map同步神兵快速变身时间
i3k_sbean.role_quickmotivatetime = i3k_class("role_quickmotivatetime")
function i3k_sbean.role_quickmotivatetime:ctor()
	self._pname_ = "role_quickmotivatetime"
	--self.lastUseTime:		int32	
end

function i3k_sbean.role_quickmotivatetime:clone()
	return clone(self)
end

function i3k_sbean.role_quickmotivatetime:decode(is)
	is:popString()
	self.lastUseTime = is:popNumber()
end

function i3k_sbean.role_quickmotivatetime:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.lastUseTime)
end


-- map同步当前的骑乘的坐骑
i3k_sbean.role_curridehorse = i3k_class("role_curridehorse")
function i3k_sbean.role_curridehorse:ctor()
	self._pname_ = "role_curridehorse"
	--self.hid:		int32	
end

function i3k_sbean.role_curridehorse:clone()
	return clone(self)
end

function i3k_sbean.role_curridehorse:decode(is)
	is:popString()
	self.hid = is:popNumber()
end

function i3k_sbean.role_curridehorse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hid)
end


-- map同步上马CD(ms)
i3k_sbean.role_ride_cooltime = i3k_class("role_ride_cooltime")
function i3k_sbean.role_ride_cooltime:ctor()
	self._pname_ = "role_ride_cooltime"
	--self.coolTime:		int32	
end

function i3k_sbean.role_ride_cooltime:clone()
	return clone(self)
end

function i3k_sbean.role_ride_cooltime:decode(is)
	is:popString()
	self.coolTime = is:popNumber()
end

function i3k_sbean.role_ride_cooltime:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.coolTime)
end


-- map同步任务变身状态
i3k_sbean.role_taskalter = i3k_class("role_taskalter")
function i3k_sbean.role_taskalter:ctor()
	self._pname_ = "role_taskalter"
	--self.alter:		DBAlterState	
end

function i3k_sbean.role_taskalter:clone()
	return clone(self)
end

function i3k_sbean.role_taskalter:decode(is)
	is:popString()
	self.alter = is:pop(i3k_sbean.DBAlterState)
end

function i3k_sbean.role_taskalter:encode(os)
	os:pushString(self._pname_)
	os:push(self.alter)
end


-- 进入身世副本同步变身的佣兵ID
i3k_sbean.role_petalter = i3k_class("role_petalter")
function i3k_sbean.role_petalter:ctor()
	self._pname_ = "role_petalter"
	--self.pid:		int32	
end

function i3k_sbean.role_petalter:clone()
	return clone(self)
end

function i3k_sbean.role_petalter:decode(is)
	is:popString()
	self.pid = is:popNumber()
end

function i3k_sbean.role_petalter:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
end


-- map同步当前出战佣兵
i3k_sbean.role_fightpets = i3k_class("role_fightpets")
function i3k_sbean.role_fightpets:ctor()
	self._pname_ = "role_fightpets"
	--self.pets:		set[int32]	
end

function i3k_sbean.role_fightpets:clone()
	return clone(self)
end

function i3k_sbean.role_fightpets:decode(is)
	is:popString()
	self.pets = is:popNumberSet()
end

function i3k_sbean.role_fightpets:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.pets)
end


-- 进入地图同步内甲信息
i3k_sbean.role_armor = i3k_class("role_armor")
function i3k_sbean.role_armor:ctor()
	self._pname_ = "role_armor"
	--self.armorVal:		int32	
	--self.freeze:		int32	
	--self.weak:		int32	
end

function i3k_sbean.role_armor:clone()
	return clone(self)
end

function i3k_sbean.role_armor:decode(is)
	is:popString()
	self.armorVal = is:popNumber()
	self.freeze = is:popNumber()
	self.weak = is:popNumber()
end

function i3k_sbean.role_armor:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.armorVal)
	os:pushNumber(self.freeze)
	os:pushNumber(self.weak)
end


i3k_sbean.role_escortcar = i3k_class("role_escortcar")
function i3k_sbean.role_escortcar:ctor()
	self._pname_ = "role_escortcar"
	--self.car:		EnterEscortCar	
end

function i3k_sbean.role_escortcar:clone()
	return clone(self)
end

function i3k_sbean.role_escortcar:decode(is)
	is:popString()
	self.car = is:pop(i3k_sbean.EnterEscortCar)
end

function i3k_sbean.role_escortcar:encode(os)
	os:pushString(self._pname_)
	os:push(self.car)
end


-- 新郎、新娘进入map通知结婚游街信息
i3k_sbean.role_weddingcar = i3k_class("role_weddingcar")
function i3k_sbean.role_weddingcar:ctor()
	self._pname_ = "role_weddingcar"
	--self.car:		EnterWeddingCar	
end

function i3k_sbean.role_weddingcar:clone()
	return clone(self)
end

function i3k_sbean.role_weddingcar:decode(is)
	is:popString()
	self.car = is:pop(i3k_sbean.EnterWeddingCar)
end

function i3k_sbean.role_weddingcar:encode(os)
	os:pushString(self._pname_)
	os:push(self.car)
end


-- 通知新郎、新娘销毁镖车
i3k_sbean.role_weddingcar_destory = i3k_class("role_weddingcar_destory")
function i3k_sbean.role_weddingcar_destory:ctor()
	self._pname_ = "role_weddingcar_destory"
end

function i3k_sbean.role_weddingcar_destory:decode(is)
	is:popString()
end

function i3k_sbean.role_weddingcar_destory:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.role_update_timetick = i3k_class("role_update_timetick")
function i3k_sbean.role_update_timetick:ctor()
	self._pname_ = "role_update_timetick"
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_update_timetick:clone()
	return clone(self)
end

function i3k_sbean.role_update_timetick:decode(is)
	is:popString()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_update_timetick:encode(os)
	os:pushString(self._pname_)
	os:push(self.timeTick)
end


-- 计算延迟(客户端发起client_ping_start的服务器异步回应)
i3k_sbean.client_ping_end = i3k_class("client_ping_end")
function i3k_sbean.client_ping_end:ctor()
	self._pname_ = "client_ping_end"
	--self.sendTimeTick:		TimeTick	
	--self.recvTimeTick:		TimeTick	
	--self.taskID:		int32	
end

function i3k_sbean.client_ping_end:clone()
	return clone(self)
end

function i3k_sbean.client_ping_end:decode(is)
	is:popString()
	self.sendTimeTick = is:pop(i3k_sbean.TimeTick)
	self.recvTimeTick = is:pop(i3k_sbean.TimeTick)
	self.taskID = is:popNumber()
end

function i3k_sbean.client_ping_end:encode(os)
	os:pushString(self._pname_)
	os:push(self.sendTimeTick)
	os:push(self.recvTimeTick)
	os:pushNumber(self.taskID)
end


-- 玩家鬼魂状态
i3k_sbean.role_ghost = i3k_class("role_ghost")
function i3k_sbean.role_ghost:ctor()
	self._pname_ = "role_ghost"
end

function i3k_sbean.role_ghost:decode(is)
	is:popString()
end

function i3k_sbean.role_ghost:encode(os)
	os:pushString(self._pname_)
end


-- 周围玩家穿时装
i3k_sbean.nearby_upwear_fashion = i3k_class("nearby_upwear_fashion")
function i3k_sbean.nearby_upwear_fashion:ctor()
	self._pname_ = "nearby_upwear_fashion"
	--self.roleID:		int32	
	--self.type:		int32	
	--self.fashionID:		int32	
end

function i3k_sbean.nearby_upwear_fashion:clone()
	return clone(self)
end

function i3k_sbean.nearby_upwear_fashion:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.type = is:popNumber()
	self.fashionID = is:popNumber()
end

function i3k_sbean.nearby_upwear_fashion:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.type)
	os:pushNumber(self.fashionID)
end


-- 周围玩家时装是否显示
i3k_sbean.nearby_set_fashionshow = i3k_class("nearby_set_fashionshow")
function i3k_sbean.nearby_set_fashionshow:ctor()
	self._pname_ = "nearby_set_fashionshow"
	--self.roleID:		int32	
	--self.type:		int32	
	--self.isShow:		int32	
end

function i3k_sbean.nearby_set_fashionshow:clone()
	return clone(self)
end

function i3k_sbean.nearby_set_fashionshow:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.type = is:popNumber()
	self.isShow = is:popNumber()
end

function i3k_sbean.nearby_set_fashionshow:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.type)
	os:pushNumber(self.isShow)
end


-- 周围玩家设置当前称号(titleType 0:永久 大于0:时效  titleID 小于0: 卸载称号)
i3k_sbean.nearby_role_updatetitle = i3k_class("nearby_role_updatetitle")
function i3k_sbean.nearby_role_updatetitle:ctor()
	self._pname_ = "nearby_role_updatetitle"
	--self.roleID:		int32	
	--self.titles:		vector[DBTitleSlot]	
end

function i3k_sbean.nearby_role_updatetitle:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updatetitle:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.titles = is:popList(i3k_sbean.DBTitleSlot)
end

function i3k_sbean.nearby_role_updatetitle:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushList(self.titles)
end


-- 周围玩家变身状态（任务变身）
i3k_sbean.nearby_role_alterstate = i3k_class("nearby_role_alterstate")
function i3k_sbean.nearby_role_alterstate:ctor()
	self._pname_ = "nearby_role_alterstate"
	--self.roleID:		int32	
	--self.alterID:		int32	
end

function i3k_sbean.nearby_role_alterstate:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_alterstate:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.alterID = is:popNumber()
end

function i3k_sbean.nearby_role_alterstate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.alterID)
end


-- 周围玩家更换当前骑乘的坐骑
i3k_sbean.nearby_ride_horse = i3k_class("nearby_ride_horse")
function i3k_sbean.nearby_ride_horse:ctor()
	self._pname_ = "nearby_ride_horse"
	--self.rid:		int32	
	--self.horseShowID:		int32	
end

function i3k_sbean.nearby_ride_horse:clone()
	return clone(self)
end

function i3k_sbean.nearby_ride_horse:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.horseShowID = is:popNumber()
end

function i3k_sbean.nearby_ride_horse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.horseShowID)
end


-- 周围玩家下马
i3k_sbean.nearby_unride_horse = i3k_class("nearby_unride_horse")
function i3k_sbean.nearby_unride_horse:ctor()
	self._pname_ = "nearby_unride_horse"
	--self.rid:		int32	
end

function i3k_sbean.nearby_unride_horse:clone()
	return clone(self)
end

function i3k_sbean.nearby_unride_horse:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.nearby_unride_horse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 周围玩家更换良驹之灵外观
i3k_sbean.nearby_horse_spirit_show = i3k_class("nearby_horse_spirit_show")
function i3k_sbean.nearby_horse_spirit_show:ctor()
	self._pname_ = "nearby_horse_spirit_show"
	--self.rid:		int32	
	--self.showID:		int32	
end

function i3k_sbean.nearby_horse_spirit_show:clone()
	return clone(self)
end

function i3k_sbean.nearby_horse_spirit_show:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.showID = is:popNumber()
end

function i3k_sbean.nearby_horse_spirit_show:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.showID)
end


-- 附近玩家技能伤害结束（清除disattack状态）
i3k_sbean.nearby_role_endskill = i3k_class("nearby_role_endskill")
function i3k_sbean.nearby_role_endskill:ctor()
	self._pname_ = "nearby_role_endskill"
	--self.rid:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_endskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_endskill:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_endskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近玩家技能结束（清除attack状态）
i3k_sbean.nearby_role_finishattack = i3k_class("nearby_role_finishattack")
function i3k_sbean.nearby_role_finishattack:ctor()
	self._pname_ = "nearby_role_finishattack"
	--self.rid:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_finishattack:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_finishattack:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_finishattack:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近佣兵技能伤害结束（清除disattack状态）
i3k_sbean.nearby_pet_endskill = i3k_class("nearby_pet_endskill")
function i3k_sbean.nearby_pet_endskill:ctor()
	self._pname_ = "nearby_pet_endskill"
	--self.pid:		int32	
	--self.ownerID:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_pet_endskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_endskill:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.ownerID = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_pet_endskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近佣兵技能结束（清除attack状态）
i3k_sbean.nearby_pet_finishattack = i3k_class("nearby_pet_finishattack")
function i3k_sbean.nearby_pet_finishattack:ctor()
	self._pname_ = "nearby_pet_finishattack"
	--self.pid:		int32	
	--self.ownerID:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_pet_finishattack:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_finishattack:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.ownerID = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_pet_finishattack:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近怪物技能伤害结束（清除disattack状态）
i3k_sbean.nearby_monster_endskill = i3k_class("nearby_monster_endskill")
function i3k_sbean.nearby_monster_endskill:ctor()
	self._pname_ = "nearby_monster_endskill"
	--self.mid:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_monster_endskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_endskill:decode(is)
	is:popString()
	self.mid = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_monster_endskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近怪物技能结束（清除attack状态）
i3k_sbean.nearby_monster_finishattack = i3k_class("nearby_monster_finishattack")
function i3k_sbean.nearby_monster_finishattack:ctor()
	self._pname_ = "nearby_monster_finishattack"
	--self.mid:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_monster_finishattack:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_finishattack:decode(is)
	is:popString()
	self.mid = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_monster_finishattack:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近残影技能伤害结束（清除disattack状态）
i3k_sbean.nearby_blur_endskill = i3k_class("nearby_blur_endskill")
function i3k_sbean.nearby_blur_endskill:ctor()
	self._pname_ = "nearby_blur_endskill"
	--self.bid:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_blur_endskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_endskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_blur_endskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近残影技能结束（清除attack状态）
i3k_sbean.nearby_blur_finishattack = i3k_class("nearby_blur_finishattack")
function i3k_sbean.nearby_blur_finishattack:ctor()
	self._pname_ = "nearby_blur_finishattack"
	--self.bid:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_blur_finishattack:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_finishattack:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_blur_finishattack:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近符灵卫技能伤害结束（清除disattack状态）
i3k_sbean.nearby_summoned_endskill = i3k_class("nearby_summoned_endskill")
function i3k_sbean.nearby_summoned_endskill:ctor()
	self._pname_ = "nearby_summoned_endskill"
	--self.bid:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_summoned_endskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_endskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_summoned_endskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近符灵卫技能结束（清除attack状态）
i3k_sbean.nearby_summoned_finishattack = i3k_class("nearby_summoned_finishattack")
function i3k_sbean.nearby_summoned_finishattack:ctor()
	self._pname_ = "nearby_summoned_finishattack"
	--self.bid:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_summoned_finishattack:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_finishattack:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_summoned_finishattack:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近法阵能伤害结束（清除disattack状态）
i3k_sbean.nearby_skillentity_endskill = i3k_class("nearby_skillentity_endskill")
function i3k_sbean.nearby_skillentity_endskill:ctor()
	self._pname_ = "nearby_skillentity_endskill"
	--self.sid:		int32	
	--self.skillID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_skillentity_endskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_skillentity_endskill:decode(is)
	is:popString()
	self.sid = is:popNumber()
	self.skillID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_skillentity_endskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sid)
	os:pushNumber(self.skillID)
	os:push(self.timeTick)
end


-- 附近玩家技能被打断
i3k_sbean.nearby_role_breakskill = i3k_class("nearby_role_breakskill")
function i3k_sbean.nearby_role_breakskill:ctor()
	self._pname_ = "nearby_role_breakskill"
	--self.rid:		int32	
end

function i3k_sbean.nearby_role_breakskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_breakskill:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.nearby_role_breakskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 附近佣兵技能被打断
i3k_sbean.nearby_pet_breakskill = i3k_class("nearby_pet_breakskill")
function i3k_sbean.nearby_pet_breakskill:ctor()
	self._pname_ = "nearby_pet_breakskill"
	--self.rid:		int32	
	--self.pid:		int32	
end

function i3k_sbean.nearby_pet_breakskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_breakskill:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.pid = is:popNumber()
end

function i3k_sbean.nearby_pet_breakskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.pid)
end


-- 附近怪物技能被打断
i3k_sbean.nearby_monster_breakskill = i3k_class("nearby_monster_breakskill")
function i3k_sbean.nearby_monster_breakskill:ctor()
	self._pname_ = "nearby_monster_breakskill"
	--self.mid:		int32	
end

function i3k_sbean.nearby_monster_breakskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_breakskill:decode(is)
	is:popString()
	self.mid = is:popNumber()
end

function i3k_sbean.nearby_monster_breakskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
end


-- 附近残影技能被打断
i3k_sbean.nearby_blur_breakskill = i3k_class("nearby_blur_breakskill")
function i3k_sbean.nearby_blur_breakskill:ctor()
	self._pname_ = "nearby_blur_breakskill"
	--self.bid:		int32	
end

function i3k_sbean.nearby_blur_breakskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_breakskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
end

function i3k_sbean.nearby_blur_breakskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
end


-- 附近符灵卫技能被打断
i3k_sbean.nearby_summoned_breakskill = i3k_class("nearby_summoned_breakskill")
function i3k_sbean.nearby_summoned_breakskill:ctor()
	self._pname_ = "nearby_summoned_breakskill"
	--self.bid:		int32	
end

function i3k_sbean.nearby_summoned_breakskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_breakskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
end

function i3k_sbean.nearby_summoned_breakskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
end


-- 附近玩家攻击目标改变（单体技能时使用）
i3k_sbean.nearby_role_change_target = i3k_class("nearby_role_change_target")
function i3k_sbean.nearby_role_change_target:ctor()
	self._pname_ = "nearby_role_change_target"
	--self.rid:		int32	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.targetOwnerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_change_target:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_change_target:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.targetOwnerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_change_target:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.targetOwnerID)
	os:push(self.timeTick)
end


-- 附近玩家改变朝向（单体技能时使用）
i3k_sbean.nearby_role_change_rotation = i3k_class("nearby_role_change_rotation")
function i3k_sbean.nearby_role_change_rotation:ctor()
	self._pname_ = "nearby_role_change_rotation"
	--self.rid:		int32	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_change_rotation:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_change_rotation:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_change_rotation:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 玩家位置矫正(服务器矫正客户端)
i3k_sbean.role_adjust_pos = i3k_class("role_adjust_pos")
function i3k_sbean.role_adjust_pos:ctor()
	self._pname_ = "role_adjust_pos"
	--self.pos:		Vector3	
end

function i3k_sbean.role_adjust_pos:clone()
	return clone(self)
end

function i3k_sbean.role_adjust_pos:decode(is)
	is:popString()
	self.pos = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.role_adjust_pos:encode(os)
	os:pushString(self._pname_)
	os:push(self.pos)
end


-- 佣兵位置矫正(服务器矫正客户端)
i3k_sbean.pet_adjust_pos = i3k_class("pet_adjust_pos")
function i3k_sbean.pet_adjust_pos:ctor()
	self._pname_ = "pet_adjust_pos"
	--self.cfgid:		int32	
	--self.pos:		Vector3	
end

function i3k_sbean.pet_adjust_pos:clone()
	return clone(self)
end

function i3k_sbean.pet_adjust_pos:decode(is)
	is:popString()
	self.cfgid = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.pet_adjust_pos:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cfgid)
	os:push(self.pos)
end


-- 怪物位置矫正
i3k_sbean.monster_adjust_pos = i3k_class("monster_adjust_pos")
function i3k_sbean.monster_adjust_pos:ctor()
	self._pname_ = "monster_adjust_pos"
	--self.mid:		int32	
	--self.pos:		Vector3	
end

function i3k_sbean.monster_adjust_pos:clone()
	return clone(self)
end

function i3k_sbean.monster_adjust_pos:decode(is)
	is:popString()
	self.mid = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.monster_adjust_pos:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
	os:push(self.pos)
end


-- 周围玩家进入视野(请求详细信息)
i3k_sbean.nearby_enter_roles = i3k_class("nearby_enter_roles")
function i3k_sbean.nearby_enter_roles:ctor()
	self._pname_ = "nearby_enter_roles"
	--self.roles:		vector[EnterDetail]	
end

function i3k_sbean.nearby_enter_roles:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_roles:decode(is)
	is:popString()
	self.roles = is:popList(i3k_sbean.EnterDetail)
end

function i3k_sbean.nearby_enter_roles:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roles)
end


-- 周围佣兵进入视野(请求详细信息)
i3k_sbean.nearby_enter_pets = i3k_class("nearby_enter_pets")
function i3k_sbean.nearby_enter_pets:ctor()
	self._pname_ = "nearby_enter_pets"
	--self.pets:		vector[EnterPet]	
end

function i3k_sbean.nearby_enter_pets:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_pets:decode(is)
	is:popString()
	self.pets = is:popList(i3k_sbean.EnterPet)
end

function i3k_sbean.nearby_enter_pets:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.pets)
end


-- 周围陷阱进入视野(请求详细信息)
i3k_sbean.nearby_enter_traps = i3k_class("nearby_enter_traps")
function i3k_sbean.nearby_enter_traps:ctor()
	self._pname_ = "nearby_enter_traps"
	--self.traps:		vector[EnterBase]	
end

function i3k_sbean.nearby_enter_traps:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_traps:decode(is)
	is:popString()
	self.traps = is:popList(i3k_sbean.EnterBase)
end

function i3k_sbean.nearby_enter_traps:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.traps)
end


-- 周围镖车进入视野
i3k_sbean.nearby_enter_escortcars = i3k_class("nearby_enter_escortcars")
function i3k_sbean.nearby_enter_escortcars:ctor()
	self._pname_ = "nearby_enter_escortcars"
	--self.cars:		vector[EnterEscortCar]	
end

function i3k_sbean.nearby_enter_escortcars:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_escortcars:decode(is)
	is:popString()
	self.cars = is:popList(i3k_sbean.EnterEscortCar)
end

function i3k_sbean.nearby_enter_escortcars:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.cars)
end


-- 周围怪物进入视野
i3k_sbean.nearby_enter_monsters = i3k_class("nearby_enter_monsters")
function i3k_sbean.nearby_enter_monsters:ctor()
	self._pname_ = "nearby_enter_monsters"
	--self.monsters:		vector[EnterMonster]	
end

function i3k_sbean.nearby_enter_monsters:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_monsters:decode(is)
	is:popString()
	self.monsters = is:popList(i3k_sbean.EnterMonster)
end

function i3k_sbean.nearby_enter_monsters:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.monsters)
end


-- 周围残影进入视野
i3k_sbean.nearby_enter_blurs = i3k_class("nearby_enter_blurs")
function i3k_sbean.nearby_enter_blurs:ctor()
	self._pname_ = "nearby_enter_blurs"
	--self.blurs:		vector[EnterDetail]	
end

function i3k_sbean.nearby_enter_blurs:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_blurs:decode(is)
	is:popString()
	self.blurs = is:popList(i3k_sbean.EnterDetail)
end

function i3k_sbean.nearby_enter_blurs:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.blurs)
end


-- 周围符灵卫进入视野
i3k_sbean.nearby_enter_summoneds = i3k_class("nearby_enter_summoneds")
function i3k_sbean.nearby_enter_summoneds:ctor()
	self._pname_ = "nearby_enter_summoneds"
	--self.summoneds:		vector[EnterDetail]	
end

function i3k_sbean.nearby_enter_summoneds:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_summoneds:decode(is)
	is:popString()
	self.summoneds = is:popList(i3k_sbean.EnterDetail)
end

function i3k_sbean.nearby_enter_summoneds:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.summoneds)
end


-- 周围法阵进入视野
i3k_sbean.nearby_enter_skillentitys = i3k_class("nearby_enter_skillentitys")
function i3k_sbean.nearby_enter_skillentitys:ctor()
	self._pname_ = "nearby_enter_skillentitys"
	--self.skillentitys:		vector[EnterSkillEntity]	
end

function i3k_sbean.nearby_enter_skillentitys:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_skillentitys:decode(is)
	is:popString()
	self.skillentitys = is:popList(i3k_sbean.EnterSkillEntity)
end

function i3k_sbean.nearby_enter_skillentitys:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.skillentitys)
end


-- 周围NPC进入视野
i3k_sbean.nearby_enter_npcs = i3k_class("nearby_enter_npcs")
function i3k_sbean.nearby_enter_npcs:ctor()
	self._pname_ = "nearby_enter_npcs"
	--self.npcs:		vector[EnterBase]	
end

function i3k_sbean.nearby_enter_npcs:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_npcs:decode(is)
	is:popString()
	self.npcs = is:popList(i3k_sbean.EnterBase)
end

function i3k_sbean.nearby_enter_npcs:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.npcs)
end


-- 周围婚车进入视野
i3k_sbean.nearby_enter_weddingcars = i3k_class("nearby_enter_weddingcars")
function i3k_sbean.nearby_enter_weddingcars:ctor()
	self._pname_ = "nearby_enter_weddingcars"
	--self.cars:		vector[EnterWeddingCar]	
end

function i3k_sbean.nearby_enter_weddingcars:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_weddingcars:decode(is)
	is:popString()
	self.cars = is:popList(i3k_sbean.EnterWeddingCar)
end

function i3k_sbean.nearby_enter_weddingcars:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.cars)
end


-- 周围竞赛宠物进入视野
i3k_sbean.nearby_enter_petrunpets = i3k_class("nearby_enter_petrunpets")
function i3k_sbean.nearby_enter_petrunpets:ctor()
	self._pname_ = "nearby_enter_petrunpets"
	--self.pets:		vector[EnterBase]	
end

function i3k_sbean.nearby_enter_petrunpets:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_petrunpets:decode(is)
	is:popString()
	self.pets = is:popList(i3k_sbean.EnterBase)
end

function i3k_sbean.nearby_enter_petrunpets:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.pets)
end


-- 周围实例进入视野
i3k_sbean.nearby_enter_entities = i3k_class("nearby_enter_entities")
function i3k_sbean.nearby_enter_entities:ctor()
	self._pname_ = "nearby_enter_entities"
	--self.type:		int32	
	--self.entities:		vector[EnterEntity]	
end

function i3k_sbean.nearby_enter_entities:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_entities:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.entities = is:popList(i3k_sbean.EnterEntity)
end

function i3k_sbean.nearby_enter_entities:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushList(self.entities)
end


-- 周围周年活动NPC创建
i3k_sbean.nearby_create_jubileeactivitynpc = i3k_class("nearby_create_jubileeactivitynpc")
function i3k_sbean.nearby_create_jubileeactivitynpc:ctor()
	self._pname_ = "nearby_create_jubileeactivitynpc"
	--self.entity:		EnterEntity	
end

function i3k_sbean.nearby_create_jubileeactivitynpc:clone()
	return clone(self)
end

function i3k_sbean.nearby_create_jubileeactivitynpc:decode(is)
	is:popString()
	self.entity = is:pop(i3k_sbean.EnterEntity)
end

function i3k_sbean.nearby_create_jubileeactivitynpc:encode(os)
	os:pushString(self._pname_)
	os:push(self.entity)
end


-- 周围示爱道具进入视野
i3k_sbean.nearby_enter_showloveitems = i3k_class("nearby_enter_showloveitems")
function i3k_sbean.nearby_enter_showloveitems:ctor()
	self._pname_ = "nearby_enter_showloveitems"
	--self.showloveitems:		vector[EnterBase]	
end

function i3k_sbean.nearby_enter_showloveitems:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_showloveitems:decode(is)
	is:popString()
	self.showloveitems = is:popList(i3k_sbean.EnterBase)
end

function i3k_sbean.nearby_enter_showloveitems:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.showloveitems)
end


-- 周围雕像进入视野
i3k_sbean.nearby_enter_honnorstatue = i3k_class("nearby_enter_honnorstatue")
function i3k_sbean.nearby_enter_honnorstatue:ctor()
	self._pname_ = "nearby_enter_honnorstatue"
	--self.statue:		vector[EnterHonnorStatue]	
end

function i3k_sbean.nearby_enter_honnorstatue:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_honnorstatue:decode(is)
	is:popString()
	self.statue = is:popList(i3k_sbean.EnterHonnorStatue)
end

function i3k_sbean.nearby_enter_honnorstatue:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.statue)
end


-- 周围矿点进入视野
i3k_sbean.nearby_enter_minerals = i3k_class("nearby_enter_minerals")
function i3k_sbean.nearby_enter_minerals:ctor()
	self._pname_ = "nearby_enter_minerals"
	--self.minerals:		vector[EnterMineral]	
end

function i3k_sbean.nearby_enter_minerals:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_minerals:decode(is)
	is:popString()
	self.minerals = is:popList(i3k_sbean.EnterMineral)
end

function i3k_sbean.nearby_enter_minerals:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.minerals)
end


-- 周围传送点进入视野
i3k_sbean.nearby_enter_waypoints = i3k_class("nearby_enter_waypoints")
function i3k_sbean.nearby_enter_waypoints:ctor()
	self._pname_ = "nearby_enter_waypoints"
	--self.waypoints:		vector[EnterBase]	
end

function i3k_sbean.nearby_enter_waypoints:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_waypoints:decode(is)
	is:popString()
	self.waypoints = is:popList(i3k_sbean.EnterBase)
end

function i3k_sbean.nearby_enter_waypoints:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.waypoints)
end


-- 周围场景BUFF进入视野
i3k_sbean.nearby_enter_mapbuffs = i3k_class("nearby_enter_mapbuffs")
function i3k_sbean.nearby_enter_mapbuffs:ctor()
	self._pname_ = "nearby_enter_mapbuffs"
	--self.mapbuffs:		vector[EnterBase]	
end

function i3k_sbean.nearby_enter_mapbuffs:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_mapbuffs:decode(is)
	is:popString()
	self.mapbuffs = is:popList(i3k_sbean.EnterBase)
end

function i3k_sbean.nearby_enter_mapbuffs:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.mapbuffs)
end


-- 周围玩家进入视野
i3k_sbean.nearby_enter_role = i3k_class("nearby_enter_role")
function i3k_sbean.nearby_enter_role:ctor()
	self._pname_ = "nearby_enter_role"
	--self.id:		int32	
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
	--self.curHP:		int32	
	--self.maxHP:		int32	
end

function i3k_sbean.nearby_enter_role:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_role:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
end

function i3k_sbean.nearby_enter_role:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.position)
	os:push(self.rotation)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
end


-- 周围佣兵进入视野
i3k_sbean.nearby_enter_pet = i3k_class("nearby_enter_pet")
function i3k_sbean.nearby_enter_pet:ctor()
	self._pname_ = "nearby_enter_pet"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
	--self.curHP:		int32	
	--self.maxHP:		int32	
end

function i3k_sbean.nearby_enter_pet:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_pet:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
end

function i3k_sbean.nearby_enter_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:push(self.position)
	os:push(self.rotation)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
end


-- 周围怪物开始变身
i3k_sbean.nearby_monster_alterstart = i3k_class("nearby_monster_alterstart")
function i3k_sbean.nearby_monster_alterstart:ctor()
	self._pname_ = "nearby_monster_alterstart"
	--self.mid:		int32	
end

function i3k_sbean.nearby_monster_alterstart:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_alterstart:decode(is)
	is:popString()
	self.mid = is:popNumber()
end

function i3k_sbean.nearby_monster_alterstart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
end


-- 周围怪物结束变身
i3k_sbean.nearby_monster_alterend = i3k_class("nearby_monster_alterend")
function i3k_sbean.nearby_monster_alterend:ctor()
	self._pname_ = "nearby_monster_alterend"
	--self.mid:		int32	
	--self.alterType:		int32	
	--self.alterID:		int32	
end

function i3k_sbean.nearby_monster_alterend:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_alterend:decode(is)
	is:popString()
	self.mid = is:popNumber()
	self.alterType = is:popNumber()
	self.alterID = is:popNumber()
end

function i3k_sbean.nearby_monster_alterend:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
	os:pushNumber(self.alterType)
	os:pushNumber(self.alterID)
end


-- 周围怪物说话
i3k_sbean.nearby_monster_pop = i3k_class("nearby_monster_pop")
function i3k_sbean.nearby_monster_pop:ctor()
	self._pname_ = "nearby_monster_pop"
	--self.mid:		int32	
	--self.dialogID:		int32	
end

function i3k_sbean.nearby_monster_pop:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_pop:decode(is)
	is:popString()
	self.mid = is:popNumber()
	self.dialogID = is:popNumber()
end

function i3k_sbean.nearby_monster_pop:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
	os:pushNumber(self.dialogID)
end


-- 周围有怪物出生
i3k_sbean.nearby_spawn_monster = i3k_class("nearby_spawn_monster")
function i3k_sbean.nearby_spawn_monster:ctor()
	self._pname_ = "nearby_spawn_monster"
	--self.monster:		EnterMonster	
end

function i3k_sbean.nearby_spawn_monster:clone()
	return clone(self)
end

function i3k_sbean.nearby_spawn_monster:decode(is)
	is:popString()
	self.monster = is:pop(i3k_sbean.EnterMonster)
end

function i3k_sbean.nearby_spawn_monster:encode(os)
	os:pushString(self._pname_)
	os:push(self.monster)
end


-- 周围怪物进入视野
i3k_sbean.nearby_enter_monster = i3k_class("nearby_enter_monster")
function i3k_sbean.nearby_enter_monster:ctor()
	self._pname_ = "nearby_enter_monster"
	--self.id:		int32	
	--self.configID:		int32	
	--self.position:		Vector3	
	--self.curHP:		int32	
	--self.maxHP:		int32	
end

function i3k_sbean.nearby_enter_monster:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_monster:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.configID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
end

function i3k_sbean.nearby_enter_monster:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.configID)
	os:push(self.position)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
end


-- 周围陷阱进入视野
i3k_sbean.nearby_enter_trap = i3k_class("nearby_enter_trap")
function i3k_sbean.nearby_enter_trap:ctor()
	self._pname_ = "nearby_enter_trap"
	--self.id:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.nearby_enter_trap:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_trap:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_enter_trap:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.position)
end


-- 周围NPC进入视野
i3k_sbean.nearby_enter_npc = i3k_class("nearby_enter_npc")
function i3k_sbean.nearby_enter_npc:ctor()
	self._pname_ = "nearby_enter_npc"
	--self.id:		int32	
	--self.configID:		int32	
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
end

function i3k_sbean.nearby_enter_npc:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_npc:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.configID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
end

function i3k_sbean.nearby_enter_npc:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.configID)
	os:push(self.position)
	os:push(self.rotation)
end


-- 周围矿点进入视野
i3k_sbean.nearby_enter_mineral = i3k_class("nearby_enter_mineral")
function i3k_sbean.nearby_enter_mineral:ctor()
	self._pname_ = "nearby_enter_mineral"
	--self.id:		int32	
	--self.configID:		int32	
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
end

function i3k_sbean.nearby_enter_mineral:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_mineral:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.configID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
end

function i3k_sbean.nearby_enter_mineral:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.configID)
	os:push(self.position)
	os:push(self.rotation)
end


-- 周围传送点进入视野
i3k_sbean.nearby_enter_waypoint = i3k_class("nearby_enter_waypoint")
function i3k_sbean.nearby_enter_waypoint:ctor()
	self._pname_ = "nearby_enter_waypoint"
	--self.id:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.nearby_enter_waypoint:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_waypoint:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_enter_waypoint:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.position)
end


-- 周围场景BUFF进入视野
i3k_sbean.nearby_enter_mapbuff = i3k_class("nearby_enter_mapbuff")
function i3k_sbean.nearby_enter_mapbuff:ctor()
	self._pname_ = "nearby_enter_mapbuff"
	--self.id:		int32	
	--self.configID:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.nearby_enter_mapbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_mapbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.configID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_enter_mapbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.configID)
	os:push(self.position)
end


-- 周围法阵进入视野
i3k_sbean.nearby_enter_skillentity = i3k_class("nearby_enter_skillentity")
function i3k_sbean.nearby_enter_skillentity:ctor()
	self._pname_ = "nearby_enter_skillentity"
	--self.ownerID:		int32	
	--self.id:		int32	
	--self.skillID:		int32	
	--self.modelID:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.nearby_enter_skillentity:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_skillentity:decode(is)
	is:popString()
	self.ownerID = is:popNumber()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.modelID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_enter_skillentity:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:pushNumber(self.modelID)
	os:push(self.position)
end


-- 周围残影进入视野
i3k_sbean.nearby_enter_blur = i3k_class("nearby_enter_blur")
function i3k_sbean.nearby_enter_blur:ctor()
	self._pname_ = "nearby_enter_blur"
	--self.id:		int32	
	--self.ownerID:		int32	
	--self.configID:		int32	
	--self.curHP:		int32	
	--self.maxHP:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.nearby_enter_blur:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_blur:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.ownerID = is:popNumber()
	self.configID = is:popNumber()
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_enter_blur:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.configID)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
	os:push(self.position)
end


-- 周围符灵卫进入视野
i3k_sbean.nearby_enter_summoned = i3k_class("nearby_enter_summoned")
function i3k_sbean.nearby_enter_summoned:ctor()
	self._pname_ = "nearby_enter_summoned"
	--self.id:		int32	
	--self.ownerID:		int32	
	--self.configID:		int32	
	--self.curHP:		int32	
	--self.maxHP:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.nearby_enter_summoned:clone()
	return clone(self)
end

function i3k_sbean.nearby_enter_summoned:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.ownerID = is:popNumber()
	self.configID = is:popNumber()
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_enter_summoned:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.configID)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
	os:push(self.position)
end


-- 周围玩家离开视野
i3k_sbean.nearby_leave_roles = i3k_class("nearby_leave_roles")
function i3k_sbean.nearby_leave_roles:ctor()
	self._pname_ = "nearby_leave_roles"
	--self.roles:		vector[int32]	
	--self.destory:		int32	
end

function i3k_sbean.nearby_leave_roles:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_roles:decode(is)
	is:popString()
	self.roles = is:popNumberList()
	self.destory = is:popNumber()
end

function i3k_sbean.nearby_leave_roles:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.roles)
	os:pushNumber(self.destory)
end


-- 周围怪物离开视野
i3k_sbean.nearby_leave_monsters = i3k_class("nearby_leave_monsters")
function i3k_sbean.nearby_leave_monsters:ctor()
	self._pname_ = "nearby_leave_monsters"
	--self.monsters:		vector[int32]	
end

function i3k_sbean.nearby_leave_monsters:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_monsters:decode(is)
	is:popString()
	self.monsters = is:popNumberList()
end

function i3k_sbean.nearby_leave_monsters:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.monsters)
end


-- 周围陷阱离开视野
i3k_sbean.nearby_leave_traps = i3k_class("nearby_leave_traps")
function i3k_sbean.nearby_leave_traps:ctor()
	self._pname_ = "nearby_leave_traps"
	--self.traps:		vector[int32]	
end

function i3k_sbean.nearby_leave_traps:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_traps:decode(is)
	is:popString()
	self.traps = is:popNumberList()
end

function i3k_sbean.nearby_leave_traps:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.traps)
end


-- 周围佣兵离开视野
i3k_sbean.nearby_leave_pets = i3k_class("nearby_leave_pets")
function i3k_sbean.nearby_leave_pets:ctor()
	self._pname_ = "nearby_leave_pets"
	--self.pets:		vector[PetBase]	
	--self.destory:		int32	
end

function i3k_sbean.nearby_leave_pets:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_pets:decode(is)
	is:popString()
	self.pets = is:popList(i3k_sbean.PetBase)
	self.destory = is:popNumber()
end

function i3k_sbean.nearby_leave_pets:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.pets)
	os:pushNumber(self.destory)
end


-- 周围镖车离开视野
i3k_sbean.nearby_leave_escortcars = i3k_class("nearby_leave_escortcars")
function i3k_sbean.nearby_leave_escortcars:ctor()
	self._pname_ = "nearby_leave_escortcars"
	--self.cars:		vector[int32]	
end

function i3k_sbean.nearby_leave_escortcars:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_escortcars:decode(is)
	is:popString()
	self.cars = is:popNumberList()
end

function i3k_sbean.nearby_leave_escortcars:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.cars)
end


-- 周围NPC离开视野
i3k_sbean.nearby_leave_npcs = i3k_class("nearby_leave_npcs")
function i3k_sbean.nearby_leave_npcs:ctor()
	self._pname_ = "nearby_leave_npcs"
	--self.npcs:		vector[int32]	
end

function i3k_sbean.nearby_leave_npcs:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_npcs:decode(is)
	is:popString()
	self.npcs = is:popNumberList()
end

function i3k_sbean.nearby_leave_npcs:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.npcs)
end


-- 周围婚车离开视野
i3k_sbean.nearby_leave_weddingcars = i3k_class("nearby_leave_weddingcars")
function i3k_sbean.nearby_leave_weddingcars:ctor()
	self._pname_ = "nearby_leave_weddingcars"
	--self.cars:		vector[int32]	
end

function i3k_sbean.nearby_leave_weddingcars:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_weddingcars:decode(is)
	is:popString()
	self.cars = is:popNumberList()
end

function i3k_sbean.nearby_leave_weddingcars:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.cars)
end


-- 周围竞赛宠物离开视野
i3k_sbean.nearby_leave_petrunpets = i3k_class("nearby_leave_petrunpets")
function i3k_sbean.nearby_leave_petrunpets:ctor()
	self._pname_ = "nearby_leave_petrunpets"
	--self.pets:		vector[int32]	
end

function i3k_sbean.nearby_leave_petrunpets:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_petrunpets:decode(is)
	is:popString()
	self.pets = is:popNumberList()
end

function i3k_sbean.nearby_leave_petrunpets:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.pets)
end


-- 周围实例离开视野
i3k_sbean.nearby_leave_entities = i3k_class("nearby_leave_entities")
function i3k_sbean.nearby_leave_entities:ctor()
	self._pname_ = "nearby_leave_entities"
	--self.type:		int32	
	--self.entities:		vector[int32]	
end

function i3k_sbean.nearby_leave_entities:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_entities:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.entities = is:popNumberList()
end

function i3k_sbean.nearby_leave_entities:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumberList(self.entities)
end


-- 周围周年活动NPC销毁
i3k_sbean.nearby_destory_jubileeactivitynpc = i3k_class("nearby_destory_jubileeactivitynpc")
function i3k_sbean.nearby_destory_jubileeactivitynpc:ctor()
	self._pname_ = "nearby_destory_jubileeactivitynpc"
	--self.id:		int32	
end

function i3k_sbean.nearby_destory_jubileeactivitynpc:clone()
	return clone(self)
end

function i3k_sbean.nearby_destory_jubileeactivitynpc:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.nearby_destory_jubileeactivitynpc:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 周围示爱道具离开视野
i3k_sbean.nearby_leave_showloveitems = i3k_class("nearby_leave_showloveitems")
function i3k_sbean.nearby_leave_showloveitems:ctor()
	self._pname_ = "nearby_leave_showloveitems"
	--self.showloveitems:		vector[int32]	
end

function i3k_sbean.nearby_leave_showloveitems:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_showloveitems:decode(is)
	is:popString()
	self.showloveitems = is:popNumberList()
end

function i3k_sbean.nearby_leave_showloveitems:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.showloveitems)
end


-- 周围荣耀雕像离开视野
i3k_sbean.nearby_leave_honnorstatue = i3k_class("nearby_leave_honnorstatue")
function i3k_sbean.nearby_leave_honnorstatue:ctor()
	self._pname_ = "nearby_leave_honnorstatue"
	--self.status:		vector[int32]	
end

function i3k_sbean.nearby_leave_honnorstatue:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_honnorstatue:decode(is)
	is:popString()
	self.status = is:popNumberList()
end

function i3k_sbean.nearby_leave_honnorstatue:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.status)
end


-- 周围矿点离开视野
i3k_sbean.nearby_leave_minerals = i3k_class("nearby_leave_minerals")
function i3k_sbean.nearby_leave_minerals:ctor()
	self._pname_ = "nearby_leave_minerals"
	--self.minerals:		vector[int32]	
end

function i3k_sbean.nearby_leave_minerals:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_minerals:decode(is)
	is:popString()
	self.minerals = is:popNumberList()
end

function i3k_sbean.nearby_leave_minerals:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.minerals)
end


-- 周围传送点离开视野
i3k_sbean.nearby_leave_waypoints = i3k_class("nearby_leave_waypoints")
function i3k_sbean.nearby_leave_waypoints:ctor()
	self._pname_ = "nearby_leave_waypoints"
	--self.waypoints:		vector[int32]	
end

function i3k_sbean.nearby_leave_waypoints:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_waypoints:decode(is)
	is:popString()
	self.waypoints = is:popNumberList()
end

function i3k_sbean.nearby_leave_waypoints:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.waypoints)
end


-- 周围场景BUFF离开视野
i3k_sbean.nearby_leave_mapbuffs = i3k_class("nearby_leave_mapbuffs")
function i3k_sbean.nearby_leave_mapbuffs:ctor()
	self._pname_ = "nearby_leave_mapbuffs"
	--self.mapbuffs:		vector[int32]	
end

function i3k_sbean.nearby_leave_mapbuffs:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_mapbuffs:decode(is)
	is:popString()
	self.mapbuffs = is:popNumberList()
end

function i3k_sbean.nearby_leave_mapbuffs:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.mapbuffs)
end


-- 周围法阵离开视野
i3k_sbean.nearby_leave_skillentitys = i3k_class("nearby_leave_skillentitys")
function i3k_sbean.nearby_leave_skillentitys:ctor()
	self._pname_ = "nearby_leave_skillentitys"
	--self.skillentitys:		vector[int32]	
end

function i3k_sbean.nearby_leave_skillentitys:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_skillentitys:decode(is)
	is:popString()
	self.skillentitys = is:popNumberList()
end

function i3k_sbean.nearby_leave_skillentitys:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.skillentitys)
end


-- 周围残影离开视野
i3k_sbean.nearby_leave_blurs = i3k_class("nearby_leave_blurs")
function i3k_sbean.nearby_leave_blurs:ctor()
	self._pname_ = "nearby_leave_blurs"
	--self.blurs:		vector[int32]	
end

function i3k_sbean.nearby_leave_blurs:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_blurs:decode(is)
	is:popString()
	self.blurs = is:popNumberList()
end

function i3k_sbean.nearby_leave_blurs:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.blurs)
end


-- 周围符灵卫离开视野
i3k_sbean.nearby_leave_summoneds = i3k_class("nearby_leave_summoneds")
function i3k_sbean.nearby_leave_summoneds:ctor()
	self._pname_ = "nearby_leave_summoneds"
	--self.blurs:		vector[int32]	
end

function i3k_sbean.nearby_leave_summoneds:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_summoneds:decode(is)
	is:popString()
	self.blurs = is:popNumberList()
end

function i3k_sbean.nearby_leave_summoneds:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.blurs)
end


-- 周围玩家离开视野
i3k_sbean.nearby_leave_role = i3k_class("nearby_leave_role")
function i3k_sbean.nearby_leave_role:ctor()
	self._pname_ = "nearby_leave_role"
	--self.id:		int32	
	--self.destory:		int32	
end

function i3k_sbean.nearby_leave_role:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_role:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.destory = is:popNumber()
end

function i3k_sbean.nearby_leave_role:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.destory)
end


-- 周围怪物离开视野
i3k_sbean.nearby_leave_monster = i3k_class("nearby_leave_monster")
function i3k_sbean.nearby_leave_monster:ctor()
	self._pname_ = "nearby_leave_monster"
	--self.id:		int32	
end

function i3k_sbean.nearby_leave_monster:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_monster:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.nearby_leave_monster:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 周围陷阱离开视野
i3k_sbean.nearby_leave_trap = i3k_class("nearby_leave_trap")
function i3k_sbean.nearby_leave_trap:ctor()
	self._pname_ = "nearby_leave_trap"
	--self.id:		int32	
end

function i3k_sbean.nearby_leave_trap:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_trap:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.nearby_leave_trap:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 周围佣兵离开视野
i3k_sbean.nearby_leave_pet = i3k_class("nearby_leave_pet")
function i3k_sbean.nearby_leave_pet:ctor()
	self._pname_ = "nearby_leave_pet"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.destory:		int32	
end

function i3k_sbean.nearby_leave_pet:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_pet:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.destory = is:popNumber()
end

function i3k_sbean.nearby_leave_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.destory)
end


-- 周围NPC离开视野
i3k_sbean.nearby_leave_npc = i3k_class("nearby_leave_npc")
function i3k_sbean.nearby_leave_npc:ctor()
	self._pname_ = "nearby_leave_npc"
	--self.id:		int32	
end

function i3k_sbean.nearby_leave_npc:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_npc:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.nearby_leave_npc:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 周围矿点离开视野
i3k_sbean.nearby_leave_mineral = i3k_class("nearby_leave_mineral")
function i3k_sbean.nearby_leave_mineral:ctor()
	self._pname_ = "nearby_leave_mineral"
	--self.id:		int32	
end

function i3k_sbean.nearby_leave_mineral:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_mineral:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.nearby_leave_mineral:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 周围传送点离开视野
i3k_sbean.nearby_leave_waypoint = i3k_class("nearby_leave_waypoint")
function i3k_sbean.nearby_leave_waypoint:ctor()
	self._pname_ = "nearby_leave_waypoint"
	--self.id:		int32	
end

function i3k_sbean.nearby_leave_waypoint:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_waypoint:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.nearby_leave_waypoint:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 周围场景BUFF离开视野
i3k_sbean.nearby_leave_mapbuff = i3k_class("nearby_leave_mapbuff")
function i3k_sbean.nearby_leave_mapbuff:ctor()
	self._pname_ = "nearby_leave_mapbuff"
	--self.id:		int32	
end

function i3k_sbean.nearby_leave_mapbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_mapbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.nearby_leave_mapbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 周围法阵离开视野
i3k_sbean.nearby_leave_skillentity = i3k_class("nearby_leave_skillentity")
function i3k_sbean.nearby_leave_skillentity:ctor()
	self._pname_ = "nearby_leave_skillentity"
	--self.id:		int32	
end

function i3k_sbean.nearby_leave_skillentity:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_skillentity:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.nearby_leave_skillentity:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 周围残影离开视野
i3k_sbean.nearby_leave_blur = i3k_class("nearby_leave_blur")
function i3k_sbean.nearby_leave_blur:ctor()
	self._pname_ = "nearby_leave_blur"
	--self.id:		int32	
	--self.destory:		int32	
end

function i3k_sbean.nearby_leave_blur:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_blur:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.destory = is:popNumber()
end

function i3k_sbean.nearby_leave_blur:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.destory)
end


-- 周围符灵卫离开视野
i3k_sbean.nearby_leave_summoned = i3k_class("nearby_leave_summoned")
function i3k_sbean.nearby_leave_summoned:ctor()
	self._pname_ = "nearby_leave_summoned"
	--self.id:		int32	
	--self.destory:		int32	
end

function i3k_sbean.nearby_leave_summoned:clone()
	return clone(self)
end

function i3k_sbean.nearby_leave_summoned:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.destory = is:popNumber()
end

function i3k_sbean.nearby_leave_summoned:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.destory)
end


-- 周围玩家重置位置
i3k_sbean.nearby_role_resetposition = i3k_class("nearby_role_resetposition")
function i3k_sbean.nearby_role_resetposition:ctor()
	self._pname_ = "nearby_role_resetposition"
	--self.id:		int32	
	--self.pos:		Vector3	
end

function i3k_sbean.nearby_role_resetposition:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_resetposition:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_role_resetposition:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
end


-- 周围玩家更新位置
i3k_sbean.nearby_role_updateposition = i3k_class("nearby_role_updateposition")
function i3k_sbean.nearby_role_updateposition:ctor()
	self._pname_ = "nearby_role_updateposition"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_updateposition:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updateposition:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_updateposition:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围玩家移动
i3k_sbean.nearby_move_role = i3k_class("nearby_move_role")
function i3k_sbean.nearby_move_role:ctor()
	self._pname_ = "nearby_move_role"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.target:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_role:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_role:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.target = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_role:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.target)
	os:push(self.timeTick)
end


-- 周围佣兵重置位置
i3k_sbean.nearby_pet_resetposition = i3k_class("nearby_pet_resetposition")
function i3k_sbean.nearby_pet_resetposition:ctor()
	self._pname_ = "nearby_pet_resetposition"
	--self.rid:		int32	
	--self.pid:		int32	
	--self.pos:		Vector3	
end

function i3k_sbean.nearby_pet_resetposition:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_resetposition:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.pid = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_pet_resetposition:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.pid)
	os:push(self.pos)
end


-- 周围佣兵更新位置
i3k_sbean.nearby_pet_updateposition = i3k_class("nearby_pet_updateposition")
function i3k_sbean.nearby_pet_updateposition:ctor()
	self._pname_ = "nearby_pet_updateposition"
	--self.rid:		int32	
	--self.pid:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_pet_updateposition:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_updateposition:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.pid = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_pet_updateposition:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.pid)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围佣兵移动
i3k_sbean.nearby_move_pet = i3k_class("nearby_move_pet")
function i3k_sbean.nearby_move_pet:ctor()
	self._pname_ = "nearby_move_pet"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_pet:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_pet:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 周围镖车移动
i3k_sbean.nearby_move_escortcar = i3k_class("nearby_move_escortcar")
function i3k_sbean.nearby_move_escortcar:ctor()
	self._pname_ = "nearby_move_escortcar"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.target:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_escortcar:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_escortcar:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.target = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_escortcar:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.target)
	os:push(self.timeTick)
end


-- 周围怪物移动
i3k_sbean.nearby_move_monster = i3k_class("nearby_move_monster")
function i3k_sbean.nearby_move_monster:ctor()
	self._pname_ = "nearby_move_monster"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.target:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_monster:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_monster:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.target = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_monster:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.target)
	os:push(self.timeTick)
end


-- 周围残影移动
i3k_sbean.nearby_move_blur = i3k_class("nearby_move_blur")
function i3k_sbean.nearby_move_blur:ctor()
	self._pname_ = "nearby_move_blur"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.target:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_blur:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_blur:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.target = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_blur:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.target)
	os:push(self.timeTick)
end


-- 周围符灵卫移动
i3k_sbean.nearby_move_summoned = i3k_class("nearby_move_summoned")
function i3k_sbean.nearby_move_summoned:ctor()
	self._pname_ = "nearby_move_summoned"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.target:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_summoned:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_summoned:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.target = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_summoned:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.target)
	os:push(self.timeTick)
end


-- 周围法阵移动
i3k_sbean.nearby_move_skillentity = i3k_class("nearby_move_skillentity")
function i3k_sbean.nearby_move_skillentity:ctor()
	self._pname_ = "nearby_move_skillentity"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_skillentity:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_skillentity:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_skillentity:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 周围婚车移动
i3k_sbean.nearby_move_weddingcar = i3k_class("nearby_move_weddingcar")
function i3k_sbean.nearby_move_weddingcar:ctor()
	self._pname_ = "nearby_move_weddingcar"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_weddingcar:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_weddingcar:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_weddingcar:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 周围竞赛宠物移动
i3k_sbean.nearby_move_petrunpet = i3k_class("nearby_move_petrunpet")
function i3k_sbean.nearby_move_petrunpet:ctor()
	self._pname_ = "nearby_move_petrunpet"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_petrunpet:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_petrunpet:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_petrunpet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 周围实例移动
i3k_sbean.nearby_move_entity = i3k_class("nearby_move_entity")
function i3k_sbean.nearby_move_entity:ctor()
	self._pname_ = "nearby_move_entity"
	--self.type:		int32	
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_move_entity:clone()
	return clone(self)
end

function i3k_sbean.nearby_move_entity:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_move_entity:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 周围玩家停止移动
i3k_sbean.nearby_stopmove_role = i3k_class("nearby_stopmove_role")
function i3k_sbean.nearby_stopmove_role:ctor()
	self._pname_ = "nearby_stopmove_role"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_role:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_role:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_role:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.timeTick)
end


-- 周围佣兵停止移动
i3k_sbean.nearby_stopmove_pet = i3k_class("nearby_stopmove_pet")
function i3k_sbean.nearby_stopmove_pet:ctor()
	self._pname_ = "nearby_stopmove_pet"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.pos:		Vector3	
	--self.speed:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_pet:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_pet:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:push(self.pos)
	os:pushNumber(self.speed)
	os:push(self.timeTick)
end


-- 周围怪物停止移动
i3k_sbean.nearby_stopmove_monster = i3k_class("nearby_stopmove_monster")
function i3k_sbean.nearby_stopmove_monster:ctor()
	self._pname_ = "nearby_stopmove_monster"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_monster:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_monster:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_monster:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围镖车停止移动
i3k_sbean.nearby_stopmove_escortcar = i3k_class("nearby_stopmove_escortcar")
function i3k_sbean.nearby_stopmove_escortcar:ctor()
	self._pname_ = "nearby_stopmove_escortcar"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_escortcar:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_escortcar:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_escortcar:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围残影停止移动
i3k_sbean.nearby_stopmove_blur = i3k_class("nearby_stopmove_blur")
function i3k_sbean.nearby_stopmove_blur:ctor()
	self._pname_ = "nearby_stopmove_blur"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_blur:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_blur:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_blur:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围符灵卫停止移动
i3k_sbean.nearby_stopmove_summoned = i3k_class("nearby_stopmove_summoned")
function i3k_sbean.nearby_stopmove_summoned:ctor()
	self._pname_ = "nearby_stopmove_summoned"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_summoned:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_summoned:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_summoned:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围法阵停止移动
i3k_sbean.nearby_stopmove_skillentity = i3k_class("nearby_stopmove_skillentity")
function i3k_sbean.nearby_stopmove_skillentity:ctor()
	self._pname_ = "nearby_stopmove_skillentity"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_skillentity:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_skillentity:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_skillentity:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围婚车停止移动
i3k_sbean.nearby_stopmove_weddingcar = i3k_class("nearby_stopmove_weddingcar")
function i3k_sbean.nearby_stopmove_weddingcar:ctor()
	self._pname_ = "nearby_stopmove_weddingcar"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_weddingcar:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_weddingcar:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_weddingcar:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围竞赛宠物停止移动
i3k_sbean.nearby_stopmove_petrunpet = i3k_class("nearby_stopmove_petrunpet")
function i3k_sbean.nearby_stopmove_petrunpet:ctor()
	self._pname_ = "nearby_stopmove_petrunpet"
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_petrunpet:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_petrunpet:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_petrunpet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围实例停止移动
i3k_sbean.nearby_stopmove_entity = i3k_class("nearby_stopmove_entity")
function i3k_sbean.nearby_stopmove_entity:ctor()
	self._pname_ = "nearby_stopmove_entity"
	--self.type:		int32	
	--self.id:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_stopmove_entity:clone()
	return clone(self)
end

function i3k_sbean.nearby_stopmove_entity:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.id = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_stopmove_entity:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.id)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 周围玩家使用后续技能
i3k_sbean.nearby_role_usefollowskill = i3k_class("nearby_role_usefollowskill")
function i3k_sbean.nearby_role_usefollowskill:ctor()
	self._pname_ = "nearby_role_usefollowskill"
	--self.id:		int32	
	--self.skillID:		int32	
	--self.seq:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_usefollowskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_usefollowskill:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.seq = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_usefollowskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:pushNumber(self.seq)
	os:push(self.timeTick)
end


i3k_sbean.nearby_role_socialaction = i3k_class("nearby_role_socialaction")
function i3k_sbean.nearby_role_socialaction:ctor()
	self._pname_ = "nearby_role_socialaction"
	--self.rid:		int32	
	--self.actionID:		int32	
	--self.useRname:		string	
	--self.beusedRname:		string	
end

function i3k_sbean.nearby_role_socialaction:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_socialaction:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.actionID = is:popNumber()
	self.useRname = is:popString()
	self.beusedRname = is:popString()
end

function i3k_sbean.nearby_role_socialaction:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.actionID)
	os:pushString(self.useRname)
	os:pushString(self.beusedRname)
end


-- 周围玩家闪烁突刺
i3k_sbean.nearby_role_blinkskill = i3k_class("nearby_role_blinkskill")
function i3k_sbean.nearby_role_blinkskill:ctor()
	self._pname_ = "nearby_role_blinkskill"
	--self.id:		int32	
	--self.skillID:		int32	
	--self.pos:		Vector3	
	--self.endPos:		Vector3	
	--self.rotation:		Vector3F	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_blinkskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_blinkskill:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_blinkskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:push(self.pos)
	os:push(self.endPos)
	os:push(self.rotation)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 周围玩家使用技能
i3k_sbean.nearby_role_useskill = i3k_class("nearby_role_useskill")
function i3k_sbean.nearby_role_useskill:ctor()
	self._pname_ = "nearby_role_useskill"
	--self.id:		int32	
	--self.skillID:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_useskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_useskill:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_useskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:push(self.pos)
	os:push(self.rotation)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 周围玩家使用自创技能
i3k_sbean.nearby_role_usediyskill = i3k_class("nearby_role_usediyskill")
function i3k_sbean.nearby_role_usediyskill:ctor()
	self._pname_ = "nearby_role_usediyskill"
	--self.id:		int32	
	--self.skillID:		int32	
	--self.actionID:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_usediyskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_usediyskill:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.actionID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_usediyskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:pushNumber(self.actionID)
	os:push(self.pos)
	os:push(self.rotation)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 周围佣兵使用技能
i3k_sbean.nearby_pet_useskill = i3k_class("nearby_pet_useskill")
function i3k_sbean.nearby_pet_useskill:ctor()
	self._pname_ = "nearby_pet_useskill"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.skillID:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_pet_useskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_useskill:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.skillID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_pet_useskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.skillID)
	os:push(self.pos)
	os:push(self.rotation)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 周围怪物使用技能
i3k_sbean.nearby_monster_useskill = i3k_class("nearby_monster_useskill")
function i3k_sbean.nearby_monster_useskill:ctor()
	self._pname_ = "nearby_monster_useskill"
	--self.id:		int32	
	--self.skillID:		int32	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_monster_useskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_useskill:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_monster_useskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.pos)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 周围陷阱使用技能
i3k_sbean.nearby_trap_useskill = i3k_class("nearby_trap_useskill")
function i3k_sbean.nearby_trap_useskill:ctor()
	self._pname_ = "nearby_trap_useskill"
	--self.trapID:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_trap_useskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_trap_useskill:decode(is)
	is:popString()
	self.trapID = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_trap_useskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.trapID)
	os:pushNumber(self.skillID)
end


-- 周围残影使用技能
i3k_sbean.nearby_blur_useskill = i3k_class("nearby_blur_useskill")
function i3k_sbean.nearby_blur_useskill:ctor()
	self._pname_ = "nearby_blur_useskill"
	--self.bid:		int32	
	--self.skillID:		int32	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_blur_useskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_useskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.skillID = is:popNumber()
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_blur_useskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.skillID)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.pos)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 周围符灵卫使用技能
i3k_sbean.nearby_summoned_useskill = i3k_class("nearby_summoned_useskill")
function i3k_sbean.nearby_summoned_useskill:ctor()
	self._pname_ = "nearby_summoned_useskill"
	--self.bid:		int32	
	--self.skillID:		int32	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_summoned_useskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_useskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.skillID = is:popNumber()
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_summoned_useskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.skillID)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.pos)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 周围玩家使用子技能
i3k_sbean.nearby_role_usechildskill = i3k_class("nearby_role_usechildskill")
function i3k_sbean.nearby_role_usechildskill:ctor()
	self._pname_ = "nearby_role_usechildskill"
	--self.rid:		int32	
	--self.mainSkill:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_role_usechildskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_usechildskill:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.mainSkill = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_role_usechildskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.mainSkill)
	os:pushNumber(self.skillID)
end


-- 周围佣兵使用子技能
i3k_sbean.nearby_pet_usechildskill = i3k_class("nearby_pet_usechildskill")
function i3k_sbean.nearby_pet_usechildskill:ctor()
	self._pname_ = "nearby_pet_usechildskill"
	--self.rid:		int32	
	--self.pid:		int32	
	--self.mainSkill:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_pet_usechildskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_usechildskill:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.pid = is:popNumber()
	self.mainSkill = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_pet_usechildskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.pid)
	os:pushNumber(self.mainSkill)
	os:pushNumber(self.skillID)
end


-- 周围怪物使用子技能
i3k_sbean.nearby_monster_usechildskill = i3k_class("nearby_monster_usechildskill")
function i3k_sbean.nearby_monster_usechildskill:ctor()
	self._pname_ = "nearby_monster_usechildskill"
	--self.mid:		int32	
	--self.mainSkill:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_monster_usechildskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_usechildskill:decode(is)
	is:popString()
	self.mid = is:popNumber()
	self.mainSkill = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_monster_usechildskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
	os:pushNumber(self.mainSkill)
	os:pushNumber(self.skillID)
end


-- 周围残影使用子技能
i3k_sbean.nearby_blur_usechildskill = i3k_class("nearby_blur_usechildskill")
function i3k_sbean.nearby_blur_usechildskill:ctor()
	self._pname_ = "nearby_blur_usechildskill"
	--self.bid:		int32	
	--self.mainSkill:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_blur_usechildskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_usechildskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.mainSkill = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_blur_usechildskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.mainSkill)
	os:pushNumber(self.skillID)
end


-- 周围符灵卫使用子技能
i3k_sbean.nearby_summoned_usechildskill = i3k_class("nearby_summoned_usechildskill")
function i3k_sbean.nearby_summoned_usechildskill:ctor()
	self._pname_ = "nearby_summoned_usechildskill"
	--self.bid:		int32	
	--self.mainSkill:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_summoned_usechildskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_usechildskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.mainSkill = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_summoned_usechildskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.mainSkill)
	os:pushNumber(self.skillID)
end


-- 周围法阵使用子技能
i3k_sbean.nearby_skillentity_usechildskill = i3k_class("nearby_skillentity_usechildskill")
function i3k_sbean.nearby_skillentity_usechildskill:ctor()
	self._pname_ = "nearby_skillentity_usechildskill"
	--self.sid:		int32	
	--self.mainSkill:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_skillentity_usechildskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_skillentity_usechildskill:decode(is)
	is:popString()
	self.sid = is:popNumber()
	self.mainSkill = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_skillentity_usechildskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sid)
	os:pushNumber(self.mainSkill)
	os:pushNumber(self.skillID)
end


-- 周围玩家使用触发技能
i3k_sbean.nearby_role_usetrigskill = i3k_class("nearby_role_usetrigskill")
function i3k_sbean.nearby_role_usetrigskill:ctor()
	self._pname_ = "nearby_role_usetrigskill"
	--self.id:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_role_usetrigskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_usetrigskill:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_role_usetrigskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
end


-- 周围佣兵使用触发技能
i3k_sbean.nearby_pet_usetrigskill = i3k_class("nearby_pet_usetrigskill")
function i3k_sbean.nearby_pet_usetrigskill:ctor()
	self._pname_ = "nearby_pet_usetrigskill"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_pet_usetrigskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_usetrigskill:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_pet_usetrigskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.skillID)
end


-- 周围怪物使用触发技能
i3k_sbean.nearby_monster_usetrigskill = i3k_class("nearby_monster_usetrigskill")
function i3k_sbean.nearby_monster_usetrigskill:ctor()
	self._pname_ = "nearby_monster_usetrigskill"
	--self.id:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_monster_usetrigskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_usetrigskill:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_monster_usetrigskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
end


-- 周围残影使用触发技能技能
i3k_sbean.nearby_blur_usetrigskill = i3k_class("nearby_blur_usetrigskill")
function i3k_sbean.nearby_blur_usetrigskill:ctor()
	self._pname_ = "nearby_blur_usetrigskill"
	--self.bid:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_blur_usetrigskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_usetrigskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_blur_usetrigskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.skillID)
end


-- 周围符灵卫使用触发技能技能
i3k_sbean.nearby_summoned_usetrigskill = i3k_class("nearby_summoned_usetrigskill")
function i3k_sbean.nearby_summoned_usetrigskill:ctor()
	self._pname_ = "nearby_summoned_usetrigskill"
	--self.bid:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.nearby_summoned_usetrigskill:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_usetrigskill:decode(is)
	is:popString()
	self.bid = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.nearby_summoned_usetrigskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
	os:pushNumber(self.skillID)
end


-- 4v4竞技场广播首杀
i3k_sbean.nearby_first_blood = i3k_class("nearby_first_blood")
function i3k_sbean.nearby_first_blood:ctor()
	self._pname_ = "nearby_first_blood"
	--self.killer:		RoleKill	
	--self.deader:		RoleKill	
	--self.assist:		vector[RoleKill]	
end

function i3k_sbean.nearby_first_blood:clone()
	return clone(self)
end

function i3k_sbean.nearby_first_blood:decode(is)
	is:popString()
	self.killer = is:pop(i3k_sbean.RoleKill)
	self.deader = is:pop(i3k_sbean.RoleKill)
	self.assist = is:popList(i3k_sbean.RoleKill)
end

function i3k_sbean.nearby_first_blood:encode(os)
	os:pushString(self._pname_)
	os:push(self.killer)
	os:push(self.deader)
	os:pushList(self.assist)
end


-- 4v4竞技场广播击杀玩家
i3k_sbean.nearby_role_kill = i3k_class("nearby_role_kill")
function i3k_sbean.nearby_role_kill:ctor()
	self._pname_ = "nearby_role_kill"
	--self.killer:		RoleKill	
	--self.deader:		RoleKill	
	--self.assist:		vector[RoleKill]	
end

function i3k_sbean.nearby_role_kill:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_kill:decode(is)
	is:popString()
	self.killer = is:pop(i3k_sbean.RoleKill)
	self.deader = is:pop(i3k_sbean.RoleKill)
	self.assist = is:popList(i3k_sbean.RoleKill)
end

function i3k_sbean.nearby_role_kill:encode(os)
	os:pushString(self._pname_)
	os:push(self.killer)
	os:push(self.deader)
	os:pushList(self.assist)
end


i3k_sbean.nearby_processdamage_end = i3k_class("nearby_processdamage_end")
function i3k_sbean.nearby_processdamage_end:ctor()
	self._pname_ = "nearby_processdamage_end"
	--self.attackerID:		int32	
	--self.attackerType:		int32	
	--self.ownerID:		int32	
	--self.skillID:		int32	
	--self.curEventTime:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_processdamage_end:clone()
	return clone(self)
end

function i3k_sbean.nearby_processdamage_end:decode(is)
	is:popString()
	self.attackerID = is:popNumber()
	self.attackerType = is:popNumber()
	self.ownerID = is:popNumber()
	self.skillID = is:popNumber()
	self.curEventTime = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_processdamage_end:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.attackerID)
	os:pushNumber(self.attackerType)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.curEventTime)
	os:push(self.timeTick)
end


-- 周围玩家受到伤害
i3k_sbean.nearby_role_ondamage = i3k_class("nearby_role_ondamage")
function i3k_sbean.nearby_role_ondamage:ctor()
	self._pname_ = "nearby_role_ondamage"
	--self.id:		int32	
	--self.attackerID:		int32	
	--self.attackerType:		int32	
	--self.ownerID:		int32	
	--self.skillID:		int32	
	--self.curEventTime:		int32	
	--self.curHP:		int32	
	--self.dodge:		int32	
	--self.deflect:		int32	
	--self.crit:		int32	
	--self.suckBlood:		int32	
	--self.behead:		int32	
	--self.remit:		int32	
	--self.armor:		ArmorDamage	
	--self.timeTick:		TimeTick	
	--self.batter:		int32	
	--self.godStarDefend:		int8	
	--self.godStarSplite:		int8	
end

function i3k_sbean.nearby_role_ondamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_ondamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.attackerID = is:popNumber()
	self.attackerType = is:popNumber()
	self.ownerID = is:popNumber()
	self.skillID = is:popNumber()
	self.curEventTime = is:popNumber()
	self.curHP = is:popNumber()
	self.dodge = is:popNumber()
	self.deflect = is:popNumber()
	self.crit = is:popNumber()
	self.suckBlood = is:popNumber()
	self.behead = is:popNumber()
	self.remit = is:popNumber()
	self.armor = is:pop(i3k_sbean.ArmorDamage)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
	self.batter = is:popNumber()
	self.godStarDefend = is:popNumber()
	self.godStarSplite = is:popNumber()
end

function i3k_sbean.nearby_role_ondamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.attackerID)
	os:pushNumber(self.attackerType)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.curEventTime)
	os:pushNumber(self.curHP)
	os:pushNumber(self.dodge)
	os:pushNumber(self.deflect)
	os:pushNumber(self.crit)
	os:pushNumber(self.suckBlood)
	os:pushNumber(self.behead)
	os:pushNumber(self.remit)
	os:push(self.armor)
	os:push(self.timeTick)
	os:pushNumber(self.batter)
	os:pushNumber(self.godStarDefend)
	os:pushNumber(self.godStarSplite)
end


-- 周围佣兵受到伤害
i3k_sbean.nearby_pet_ondamage = i3k_class("nearby_pet_ondamage")
function i3k_sbean.nearby_pet_ondamage:ctor()
	self._pname_ = "nearby_pet_ondamage"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.attackerID:		int32	
	--self.attackerType:		int32	
	--self.ownerID:		int32	
	--self.skillID:		int32	
	--self.curEventTime:		int32	
	--self.curHP:		int32	
	--self.dodge:		int32	
	--self.deflect:		int32	
	--self.crit:		int32	
	--self.suckBlood:		int32	
	--self.behead:		int32	
	--self.remit:		int32	
	--self.timeTick:		TimeTick	
	--self.batter:		int32	
	--self.godStarDefend:		int8	
	--self.godStarSplite:		int8	
end

function i3k_sbean.nearby_pet_ondamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_ondamage:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.attackerID = is:popNumber()
	self.attackerType = is:popNumber()
	self.ownerID = is:popNumber()
	self.skillID = is:popNumber()
	self.curEventTime = is:popNumber()
	self.curHP = is:popNumber()
	self.dodge = is:popNumber()
	self.deflect = is:popNumber()
	self.crit = is:popNumber()
	self.suckBlood = is:popNumber()
	self.behead = is:popNumber()
	self.remit = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
	self.batter = is:popNumber()
	self.godStarDefend = is:popNumber()
	self.godStarSplite = is:popNumber()
end

function i3k_sbean.nearby_pet_ondamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.attackerID)
	os:pushNumber(self.attackerType)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.curEventTime)
	os:pushNumber(self.curHP)
	os:pushNumber(self.dodge)
	os:pushNumber(self.deflect)
	os:pushNumber(self.crit)
	os:pushNumber(self.suckBlood)
	os:pushNumber(self.behead)
	os:pushNumber(self.remit)
	os:push(self.timeTick)
	os:pushNumber(self.batter)
	os:pushNumber(self.godStarDefend)
	os:pushNumber(self.godStarSplite)
end


-- 周围镖车受到伤害
i3k_sbean.nearby_escortcar_ondamage = i3k_class("nearby_escortcar_ondamage")
function i3k_sbean.nearby_escortcar_ondamage:ctor()
	self._pname_ = "nearby_escortcar_ondamage"
	--self.id:		int32	
	--self.attackerID:		int32	
	--self.attackerType:		int32	
	--self.ownerID:		int32	
	--self.skillID:		int32	
	--self.curEventTime:		int32	
	--self.curHP:		int32	
	--self.dodge:		int32	
	--self.deflect:		int32	
	--self.crit:		int32	
	--self.suckBlood:		int32	
	--self.behead:		int32	
	--self.remit:		int32	
	--self.timeTick:		TimeTick	
	--self.batter:		int32	
	--self.godStarDefend:		int8	
	--self.godStarSplite:		int8	
end

function i3k_sbean.nearby_escortcar_ondamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_escortcar_ondamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.attackerID = is:popNumber()
	self.attackerType = is:popNumber()
	self.ownerID = is:popNumber()
	self.skillID = is:popNumber()
	self.curEventTime = is:popNumber()
	self.curHP = is:popNumber()
	self.dodge = is:popNumber()
	self.deflect = is:popNumber()
	self.crit = is:popNumber()
	self.suckBlood = is:popNumber()
	self.behead = is:popNumber()
	self.remit = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
	self.batter = is:popNumber()
	self.godStarDefend = is:popNumber()
	self.godStarSplite = is:popNumber()
end

function i3k_sbean.nearby_escortcar_ondamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.attackerID)
	os:pushNumber(self.attackerType)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.curEventTime)
	os:pushNumber(self.curHP)
	os:pushNumber(self.dodge)
	os:pushNumber(self.deflect)
	os:pushNumber(self.crit)
	os:pushNumber(self.suckBlood)
	os:pushNumber(self.behead)
	os:pushNumber(self.remit)
	os:push(self.timeTick)
	os:pushNumber(self.batter)
	os:pushNumber(self.godStarDefend)
	os:pushNumber(self.godStarSplite)
end


-- 周围怪物受到伤害
i3k_sbean.nearby_monster_ondamage = i3k_class("nearby_monster_ondamage")
function i3k_sbean.nearby_monster_ondamage:ctor()
	self._pname_ = "nearby_monster_ondamage"
	--self.id:		int32	
	--self.attackerID:		int32	
	--self.attackerType:		int32	
	--self.ownerID:		int32	
	--self.skillID:		int32	
	--self.curEventTime:		int32	
	--self.curHP:		int32	
	--self.dodge:		int32	
	--self.deflect:		int32	
	--self.crit:		int32	
	--self.suckBlood:		int32	
	--self.behead:		int32	
	--self.remit:		int32	
	--self.armor:		ArmorDamage	
	--self.timeTick:		TimeTick	
	--self.batter:		int32	
	--self.godStarDefend:		int8	
	--self.godStarSplite:		int8	
end

function i3k_sbean.nearby_monster_ondamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_ondamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.attackerID = is:popNumber()
	self.attackerType = is:popNumber()
	self.ownerID = is:popNumber()
	self.skillID = is:popNumber()
	self.curEventTime = is:popNumber()
	self.curHP = is:popNumber()
	self.dodge = is:popNumber()
	self.deflect = is:popNumber()
	self.crit = is:popNumber()
	self.suckBlood = is:popNumber()
	self.behead = is:popNumber()
	self.remit = is:popNumber()
	self.armor = is:pop(i3k_sbean.ArmorDamage)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
	self.batter = is:popNumber()
	self.godStarDefend = is:popNumber()
	self.godStarSplite = is:popNumber()
end

function i3k_sbean.nearby_monster_ondamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.attackerID)
	os:pushNumber(self.attackerType)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.curEventTime)
	os:pushNumber(self.curHP)
	os:pushNumber(self.dodge)
	os:pushNumber(self.deflect)
	os:pushNumber(self.crit)
	os:pushNumber(self.suckBlood)
	os:pushNumber(self.behead)
	os:pushNumber(self.remit)
	os:push(self.armor)
	os:push(self.timeTick)
	os:pushNumber(self.batter)
	os:pushNumber(self.godStarDefend)
	os:pushNumber(self.godStarSplite)
end


-- 周围残影受到伤害
i3k_sbean.nearby_blur_ondamage = i3k_class("nearby_blur_ondamage")
function i3k_sbean.nearby_blur_ondamage:ctor()
	self._pname_ = "nearby_blur_ondamage"
	--self.id:		int32	
	--self.attackerID:		int32	
	--self.attackerType:		int32	
	--self.ownerID:		int32	
	--self.skillID:		int32	
	--self.curEventTime:		int32	
	--self.curHP:		int32	
	--self.dodge:		int32	
	--self.deflect:		int32	
	--self.crit:		int32	
	--self.suckBlood:		int32	
	--self.behead:		int32	
	--self.remit:		int32	
	--self.timeTick:		TimeTick	
	--self.batter:		int32	
	--self.godStarDefend:		int8	
	--self.godStarSplite:		int8	
end

function i3k_sbean.nearby_blur_ondamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_ondamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.attackerID = is:popNumber()
	self.attackerType = is:popNumber()
	self.ownerID = is:popNumber()
	self.skillID = is:popNumber()
	self.curEventTime = is:popNumber()
	self.curHP = is:popNumber()
	self.dodge = is:popNumber()
	self.deflect = is:popNumber()
	self.crit = is:popNumber()
	self.suckBlood = is:popNumber()
	self.behead = is:popNumber()
	self.remit = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
	self.batter = is:popNumber()
	self.godStarDefend = is:popNumber()
	self.godStarSplite = is:popNumber()
end

function i3k_sbean.nearby_blur_ondamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.attackerID)
	os:pushNumber(self.attackerType)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.curEventTime)
	os:pushNumber(self.curHP)
	os:pushNumber(self.dodge)
	os:pushNumber(self.deflect)
	os:pushNumber(self.crit)
	os:pushNumber(self.suckBlood)
	os:pushNumber(self.behead)
	os:pushNumber(self.remit)
	os:push(self.timeTick)
	os:pushNumber(self.batter)
	os:pushNumber(self.godStarDefend)
	os:pushNumber(self.godStarSplite)
end


-- 周围符灵卫受到伤害
i3k_sbean.nearby_summoned_ondamage = i3k_class("nearby_summoned_ondamage")
function i3k_sbean.nearby_summoned_ondamage:ctor()
	self._pname_ = "nearby_summoned_ondamage"
	--self.id:		int32	
	--self.attackerID:		int32	
	--self.attackerType:		int32	
	--self.ownerID:		int32	
	--self.skillID:		int32	
	--self.curEventTime:		int32	
	--self.curHP:		int32	
	--self.dodge:		int32	
	--self.deflect:		int32	
	--self.crit:		int32	
	--self.suckBlood:		int32	
	--self.behead:		int32	
	--self.remit:		int32	
	--self.timeTick:		TimeTick	
	--self.batter:		int32	
	--self.godStarDefend:		int8	
	--self.godStarSplite:		int8	
end

function i3k_sbean.nearby_summoned_ondamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_ondamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.attackerID = is:popNumber()
	self.attackerType = is:popNumber()
	self.ownerID = is:popNumber()
	self.skillID = is:popNumber()
	self.curEventTime = is:popNumber()
	self.curHP = is:popNumber()
	self.dodge = is:popNumber()
	self.deflect = is:popNumber()
	self.crit = is:popNumber()
	self.suckBlood = is:popNumber()
	self.behead = is:popNumber()
	self.remit = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
	self.batter = is:popNumber()
	self.godStarDefend = is:popNumber()
	self.godStarSplite = is:popNumber()
end

function i3k_sbean.nearby_summoned_ondamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.attackerID)
	os:pushNumber(self.attackerType)
	os:pushNumber(self.ownerID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.curEventTime)
	os:pushNumber(self.curHP)
	os:pushNumber(self.dodge)
	os:pushNumber(self.deflect)
	os:pushNumber(self.crit)
	os:pushNumber(self.suckBlood)
	os:pushNumber(self.behead)
	os:pushNumber(self.remit)
	os:push(self.timeTick)
	os:pushNumber(self.batter)
	os:pushNumber(self.godStarDefend)
	os:pushNumber(self.godStarSplite)
end


i3k_sbean.nearby_role_prolong_floating = i3k_class("nearby_role_prolong_floating")
function i3k_sbean.nearby_role_prolong_floating:ctor()
	self._pname_ = "nearby_role_prolong_floating"
	--self.rid:		int32	
	--self.buffID:		int32	
end

function i3k_sbean.nearby_role_prolong_floating:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_prolong_floating:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.buffID = is:popNumber()
end

function i3k_sbean.nearby_role_prolong_floating:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.buffID)
end


-- 周围玩家添加BUFF(remainTime： 剩余毫秒)
i3k_sbean.nearby_role_addbuff = i3k_class("nearby_role_addbuff")
function i3k_sbean.nearby_role_addbuff:ctor()
	self._pname_ = "nearby_role_addbuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.realmLvl:		int32	
	--self.remainTime:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_addbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_addbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.realmLvl = is:popNumber()
	self.remainTime = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_addbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:pushNumber(self.realmLvl)
	os:pushNumber(self.remainTime)
	os:push(self.timeTick)
end


-- 周围怪物添加BUFF(remainTime： 剩余毫秒)
i3k_sbean.nearby_monster_addbuff = i3k_class("nearby_monster_addbuff")
function i3k_sbean.nearby_monster_addbuff:ctor()
	self._pname_ = "nearby_monster_addbuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.realmLvl:		int32	
	--self.remainTime:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_monster_addbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_addbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.realmLvl = is:popNumber()
	self.remainTime = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_monster_addbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:pushNumber(self.realmLvl)
	os:pushNumber(self.remainTime)
	os:push(self.timeTick)
end


-- 周围赛跑宠物添加BUFF(remainTime： 剩余毫秒)
i3k_sbean.nearby_petrunpet_addbuff = i3k_class("nearby_petrunpet_addbuff")
function i3k_sbean.nearby_petrunpet_addbuff:ctor()
	self._pname_ = "nearby_petrunpet_addbuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.realmLvl:		int32	
	--self.remainTime:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_petrunpet_addbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_petrunpet_addbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.realmLvl = is:popNumber()
	self.remainTime = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_petrunpet_addbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:pushNumber(self.realmLvl)
	os:pushNumber(self.remainTime)
	os:push(self.timeTick)
end


-- 周围佣兵添加BUFF(remainTime： 剩余毫秒)
i3k_sbean.nearby_pet_addbuff = i3k_class("nearby_pet_addbuff")
function i3k_sbean.nearby_pet_addbuff:ctor()
	self._pname_ = "nearby_pet_addbuff"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.buffID:		int32	
	--self.realmLvl:		int32	
	--self.remainTime:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_pet_addbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_addbuff:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.buffID = is:popNumber()
	self.realmLvl = is:popNumber()
	self.remainTime = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_pet_addbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.buffID)
	os:pushNumber(self.realmLvl)
	os:pushNumber(self.remainTime)
	os:push(self.timeTick)
end


-- 周围镖车添加BUFF
i3k_sbean.nearby_escortcar_addbuff = i3k_class("nearby_escortcar_addbuff")
function i3k_sbean.nearby_escortcar_addbuff:ctor()
	self._pname_ = "nearby_escortcar_addbuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_escortcar_addbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_escortcar_addbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_escortcar_addbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围残影添加BUFF(remainTime： 剩余毫秒)
i3k_sbean.nearby_blur_addbuff = i3k_class("nearby_blur_addbuff")
function i3k_sbean.nearby_blur_addbuff:ctor()
	self._pname_ = "nearby_blur_addbuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.realmLvl:		int32	
	--self.remainTime:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_blur_addbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_addbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.realmLvl = is:popNumber()
	self.remainTime = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_blur_addbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:pushNumber(self.realmLvl)
	os:pushNumber(self.remainTime)
	os:push(self.timeTick)
end


-- 周围符灵卫添加BUFF(remainTime： 剩余毫秒)
i3k_sbean.nearby_summoned_addbuff = i3k_class("nearby_summoned_addbuff")
function i3k_sbean.nearby_summoned_addbuff:ctor()
	self._pname_ = "nearby_summoned_addbuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.realmLvl:		int32	
	--self.remainTime:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_summoned_addbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_addbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.realmLvl = is:popNumber()
	self.remainTime = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_summoned_addbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:pushNumber(self.realmLvl)
	os:pushNumber(self.remainTime)
	os:push(self.timeTick)
end


-- 周围玩家去除BUFF
i3k_sbean.nearby_role_removebuff = i3k_class("nearby_role_removebuff")
function i3k_sbean.nearby_role_removebuff:ctor()
	self._pname_ = "nearby_role_removebuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_removebuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_removebuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_removebuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围怪物去除BUFF
i3k_sbean.nearby_monster_removebuff = i3k_class("nearby_monster_removebuff")
function i3k_sbean.nearby_monster_removebuff:ctor()
	self._pname_ = "nearby_monster_removebuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_monster_removebuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_removebuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_monster_removebuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围赛跑宠物去除BUFF
i3k_sbean.nearby_petrunpet_removebuff = i3k_class("nearby_petrunpet_removebuff")
function i3k_sbean.nearby_petrunpet_removebuff:ctor()
	self._pname_ = "nearby_petrunpet_removebuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_petrunpet_removebuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_petrunpet_removebuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_petrunpet_removebuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围镖车去除BUFF
i3k_sbean.nearby_escortcar_removebuff = i3k_class("nearby_escortcar_removebuff")
function i3k_sbean.nearby_escortcar_removebuff:ctor()
	self._pname_ = "nearby_escortcar_removebuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_escortcar_removebuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_escortcar_removebuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_escortcar_removebuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围佣兵去除BUFF
i3k_sbean.nearby_pet_removebuff = i3k_class("nearby_pet_removebuff")
function i3k_sbean.nearby_pet_removebuff:ctor()
	self._pname_ = "nearby_pet_removebuff"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_pet_removebuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_removebuff:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_pet_removebuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围残影去除BUFF
i3k_sbean.nearby_blur_removebuff = i3k_class("nearby_blur_removebuff")
function i3k_sbean.nearby_blur_removebuff:ctor()
	self._pname_ = "nearby_blur_removebuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_blur_removebuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_removebuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_blur_removebuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围符灵卫去除BUFF
i3k_sbean.nearby_summoned_removebuff = i3k_class("nearby_summoned_removebuff")
function i3k_sbean.nearby_summoned_removebuff:ctor()
	self._pname_ = "nearby_summoned_removebuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_summoned_removebuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_removebuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_summoned_removebuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围玩家驱散BUFF
i3k_sbean.nearby_role_dispelbuff = i3k_class("nearby_role_dispelbuff")
function i3k_sbean.nearby_role_dispelbuff:ctor()
	self._pname_ = "nearby_role_dispelbuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_dispelbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_dispelbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_dispelbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围怪物驱散BUFF
i3k_sbean.nearby_monster_dispelbuff = i3k_class("nearby_monster_dispelbuff")
function i3k_sbean.nearby_monster_dispelbuff:ctor()
	self._pname_ = "nearby_monster_dispelbuff"
	--self.id:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_monster_dispelbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_dispelbuff:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_monster_dispelbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围佣兵驱散BUFF
i3k_sbean.nearby_pet_dispelbuff = i3k_class("nearby_pet_dispelbuff")
function i3k_sbean.nearby_pet_dispelbuff:ctor()
	self._pname_ = "nearby_pet_dispelbuff"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.buffID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_pet_dispelbuff:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_dispelbuff:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.buffID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_pet_dispelbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.buffID)
	os:push(self.timeTick)
end


-- 周围玩家吸吸收伤害
i3k_sbean.nearby_role_reduce = i3k_class("nearby_role_reduce")
function i3k_sbean.nearby_role_reduce:ctor()
	self._pname_ = "nearby_role_reduce"
	--self.id:		int32	
	--self.value:		int32	
end

function i3k_sbean.nearby_role_reduce:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_reduce:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.nearby_role_reduce:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
end


-- 周围佣兵吸吸收伤害
i3k_sbean.nearby_pet_reduce = i3k_class("nearby_pet_reduce")
function i3k_sbean.nearby_pet_reduce:ctor()
	self._pname_ = "nearby_pet_reduce"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.value:		int32	
end

function i3k_sbean.nearby_pet_reduce:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_reduce:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.nearby_pet_reduce:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.value)
end


-- 周围怪物吸吸收伤害
i3k_sbean.nearby_monster_reduce = i3k_class("nearby_monster_reduce")
function i3k_sbean.nearby_monster_reduce:ctor()
	self._pname_ = "nearby_monster_reduce"
	--self.id:		int32	
	--self.value:		int32	
end

function i3k_sbean.nearby_monster_reduce:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_reduce:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.nearby_monster_reduce:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.value)
end


-- 周围玩家受到BUFF伤害
i3k_sbean.nearby_role_buffdamage = i3k_class("nearby_role_buffdamage")
function i3k_sbean.nearby_role_buffdamage:ctor()
	self._pname_ = "nearby_role_buffdamage"
	--self.id:		int32	
	--self.curHP:		int32	
	--self.attackerType:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_buffdamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_buffdamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
	self.attackerType = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_buffdamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
	os:pushNumber(self.attackerType)
	os:push(self.timeTick)
end


-- 周围玩家受到内伤伤害
i3k_sbean.nearby_role_internalinjurydamage = i3k_class("nearby_role_internalinjurydamage")
function i3k_sbean.nearby_role_internalinjurydamage:ctor()
	self._pname_ = "nearby_role_internalinjurydamage"
	--self.id:		int32	
	--self.curHP:		int32	
	--self.curInternalInjury:		int32	
	--self.damageType:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_internalinjurydamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_internalinjurydamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
	self.curInternalInjury = is:popNumber()
	self.damageType = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_internalinjurydamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
	os:pushNumber(self.curInternalInjury)
	os:pushNumber(self.damageType)
	os:push(self.timeTick)
end


-- 周围怪物受到BUFF伤害
i3k_sbean.nearby_monster_buffdamage = i3k_class("nearby_monster_buffdamage")
function i3k_sbean.nearby_monster_buffdamage:ctor()
	self._pname_ = "nearby_monster_buffdamage"
	--self.id:		int32	
	--self.curHP:		int32	
	--self.attackerType:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_monster_buffdamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_buffdamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
	self.attackerType = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_monster_buffdamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
	os:pushNumber(self.attackerType)
	os:push(self.timeTick)
end


-- 周围镖车受到BUFF伤害
i3k_sbean.nearby_escortcar_buffdamage = i3k_class("nearby_escortcar_buffdamage")
function i3k_sbean.nearby_escortcar_buffdamage:ctor()
	self._pname_ = "nearby_escortcar_buffdamage"
	--self.id:		int32	
	--self.curHP:		int32	
	--self.attackerType:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_escortcar_buffdamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_escortcar_buffdamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
	self.attackerType = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_escortcar_buffdamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
	os:pushNumber(self.attackerType)
	os:push(self.timeTick)
end


-- 周围佣兵受到BUFF伤害
i3k_sbean.nearby_pet_buffdamage = i3k_class("nearby_pet_buffdamage")
function i3k_sbean.nearby_pet_buffdamage:ctor()
	self._pname_ = "nearby_pet_buffdamage"
	--self.roleID:		int32	
	--self.cfgID:		int32	
	--self.curHP:		int32	
	--self.attackerType:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_pet_buffdamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_buffdamage:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgID = is:popNumber()
	self.curHP = is:popNumber()
	self.attackerType = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_pet_buffdamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgID)
	os:pushNumber(self.curHP)
	os:pushNumber(self.attackerType)
	os:push(self.timeTick)
end


-- 周围残影受到BUFF伤害
i3k_sbean.nearby_blur_buffdamage = i3k_class("nearby_blur_buffdamage")
function i3k_sbean.nearby_blur_buffdamage:ctor()
	self._pname_ = "nearby_blur_buffdamage"
	--self.id:		int32	
	--self.curHP:		int32	
	--self.attackerType:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_blur_buffdamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_buffdamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
	self.attackerType = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_blur_buffdamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
	os:pushNumber(self.attackerType)
	os:push(self.timeTick)
end


-- 周围符灵卫受到BUFF伤害
i3k_sbean.nearby_summoned_buffdamage = i3k_class("nearby_summoned_buffdamage")
function i3k_sbean.nearby_summoned_buffdamage:ctor()
	self._pname_ = "nearby_summoned_buffdamage"
	--self.id:		int32	
	--self.curHP:		int32	
	--self.attackerType:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_summoned_buffdamage:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_buffdamage:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
	self.attackerType = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_summoned_buffdamage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
	os:pushNumber(self.attackerType)
	os:push(self.timeTick)
end


-- 周围玩家同步血量
i3k_sbean.nearby_role_updatehp = i3k_class("nearby_role_updatehp")
function i3k_sbean.nearby_role_updatehp:ctor()
	self._pname_ = "nearby_role_updatehp"
	--self.id:		int32	
	--self.curHP:		int32	
end

function i3k_sbean.nearby_role_updatehp:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updatehp:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
end

function i3k_sbean.nearby_role_updatehp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
end


-- 周围玩家同步内伤值
i3k_sbean.nearby_role_updateinternalinjury = i3k_class("nearby_role_updateinternalinjury")
function i3k_sbean.nearby_role_updateinternalinjury:ctor()
	self._pname_ = "nearby_role_updateinternalinjury"
	--self.id:		int32	
	--self.curInternalInjury:		int32	
end

function i3k_sbean.nearby_role_updateinternalinjury:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updateinternalinjury:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curInternalInjury = is:popNumber()
end

function i3k_sbean.nearby_role_updateinternalinjury:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curInternalInjury)
end


-- 周围怪物同步血量
i3k_sbean.nearby_monster_updatehp = i3k_class("nearby_monster_updatehp")
function i3k_sbean.nearby_monster_updatehp:ctor()
	self._pname_ = "nearby_monster_updatehp"
	--self.id:		int32	
	--self.curHP:		int32	
end

function i3k_sbean.nearby_monster_updatehp:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_updatehp:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
end

function i3k_sbean.nearby_monster_updatehp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
end


-- 周围怪物同步头顶信息
i3k_sbean.nearby_monster_updatetop = i3k_class("nearby_monster_updatetop")
function i3k_sbean.nearby_monster_updatetop:ctor()
	self._pname_ = "nearby_monster_updatetop"
	--self.id:		int32	
	--self.curHP:		int32	
	--self.curArmor:		int32	
end

function i3k_sbean.nearby_monster_updatetop:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_updatetop:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
	self.curArmor = is:popNumber()
end

function i3k_sbean.nearby_monster_updatetop:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
	os:pushNumber(self.curArmor)
end


-- 周围佣兵同步血量
i3k_sbean.nearby_pet_updatehp = i3k_class("nearby_pet_updatehp")
function i3k_sbean.nearby_pet_updatehp:ctor()
	self._pname_ = "nearby_pet_updatehp"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.curHP:		int32	
end

function i3k_sbean.nearby_pet_updatehp:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_updatehp:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.curHP = is:popNumber()
end

function i3k_sbean.nearby_pet_updatehp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.curHP)
end


-- 周围残影同步血量
i3k_sbean.nearby_blur_updatehp = i3k_class("nearby_blur_updatehp")
function i3k_sbean.nearby_blur_updatehp:ctor()
	self._pname_ = "nearby_blur_updatehp"
	--self.id:		int32	
	--self.curHP:		int32	
end

function i3k_sbean.nearby_blur_updatehp:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_updatehp:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
end

function i3k_sbean.nearby_blur_updatehp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
end


-- 周围符灵卫同步血量
i3k_sbean.nearby_summoned_updatehp = i3k_class("nearby_summoned_updatehp")
function i3k_sbean.nearby_summoned_updatehp:ctor()
	self._pname_ = "nearby_summoned_updatehp"
	--self.id:		int32	
	--self.curHP:		int32	
end

function i3k_sbean.nearby_summoned_updatehp:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_updatehp:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
end

function i3k_sbean.nearby_summoned_updatehp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
end


-- 周围镖车同步血量(包括镖车主人)
i3k_sbean.nearby_escortcar_updatehp = i3k_class("nearby_escortcar_updatehp")
function i3k_sbean.nearby_escortcar_updatehp:ctor()
	self._pname_ = "nearby_escortcar_updatehp"
	--self.id:		int32	
	--self.curHP:		int32	
end

function i3k_sbean.nearby_escortcar_updatehp:clone()
	return clone(self)
end

function i3k_sbean.nearby_escortcar_updatehp:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
end

function i3k_sbean.nearby_escortcar_updatehp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
end


-- 周围镖车社交信息
i3k_sbean.nearby_escortcar_updatesocial = i3k_class("nearby_escortcar_updatesocial")
function i3k_sbean.nearby_escortcar_updatesocial:ctor()
	self._pname_ = "nearby_escortcar_updatesocial"
	--self.id:		int32	
	--self.teamID:		int32	
	--self.sectID:		int32	
end

function i3k_sbean.nearby_escortcar_updatesocial:clone()
	return clone(self)
end

function i3k_sbean.nearby_escortcar_updatesocial:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.teamID = is:popNumber()
	self.sectID = is:popNumber()
end

function i3k_sbean.nearby_escortcar_updatesocial:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.teamID)
	os:pushNumber(self.sectID)
end


-- 周围镖车同步状态（1:正常  0:破损）
i3k_sbean.nearby_escortcar_updatestate = i3k_class("nearby_escortcar_updatestate")
function i3k_sbean.nearby_escortcar_updatestate:ctor()
	self._pname_ = "nearby_escortcar_updatestate"
	--self.id:		int32	
	--self.state:		int32	
end

function i3k_sbean.nearby_escortcar_updatestate:clone()
	return clone(self)
end

function i3k_sbean.nearby_escortcar_updatestate:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.nearby_escortcar_updatestate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.state)
end


-- 周围镖车被劫镖
i3k_sbean.nearby_escortcar_robbed = i3k_class("nearby_escortcar_robbed")
function i3k_sbean.nearby_escortcar_robbed:ctor()
	self._pname_ = "nearby_escortcar_robbed"
	--self.carID:		int32	
	--self.owner:		RoleInfo	
	--self.robs:		vector[RoleInfo]	
end

function i3k_sbean.nearby_escortcar_robbed:clone()
	return clone(self)
end

function i3k_sbean.nearby_escortcar_robbed:decode(is)
	is:popString()
	self.carID = is:popNumber()
	self.owner = is:pop(i3k_sbean.RoleInfo)
	self.robs = is:popList(i3k_sbean.RoleInfo)
end

function i3k_sbean.nearby_escortcar_robbed:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.carID)
	os:push(self.owner)
	os:pushList(self.robs)
end


-- 周围玩家死亡
i3k_sbean.nearby_role_dead = i3k_class("nearby_role_dead")
function i3k_sbean.nearby_role_dead:ctor()
	self._pname_ = "nearby_role_dead"
	--self.id:		int32	
	--self.killerID:		int32	
end

function i3k_sbean.nearby_role_dead:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_dead:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.killerID = is:popNumber()
end

function i3k_sbean.nearby_role_dead:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.killerID)
end


-- 广播击杀玩家
i3k_sbean.map_role_kill = i3k_class("map_role_kill")
function i3k_sbean.map_role_kill:ctor()
	self._pname_ = "map_role_kill"
	--self.deader:		RoleOverview	
	--self.killer:		RoleOverview	
	--self.killerForceType:		int32	
end

function i3k_sbean.map_role_kill:clone()
	return clone(self)
end

function i3k_sbean.map_role_kill:decode(is)
	is:popString()
	self.deader = is:pop(i3k_sbean.RoleOverview)
	self.killer = is:pop(i3k_sbean.RoleOverview)
	self.killerForceType = is:popNumber()
end

function i3k_sbean.map_role_kill:encode(os)
	os:pushString(self._pname_)
	os:push(self.deader)
	os:push(self.killer)
	os:pushNumber(self.killerForceType)
end


-- 周围佣兵死亡
i3k_sbean.nearby_pet_dead = i3k_class("nearby_pet_dead")
function i3k_sbean.nearby_pet_dead:ctor()
	self._pname_ = "nearby_pet_dead"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.killerID:		int32	
end

function i3k_sbean.nearby_pet_dead:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_dead:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.killerID = is:popNumber()
end

function i3k_sbean.nearby_pet_dead:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.killerID)
end


-- 周围怪物死亡
i3k_sbean.nearby_monster_dead = i3k_class("nearby_monster_dead")
function i3k_sbean.nearby_monster_dead:ctor()
	self._pname_ = "nearby_monster_dead"
	--self.id:		int32	
	--self.killerID:		int32	
end

function i3k_sbean.nearby_monster_dead:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_dead:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.killerID = is:popNumber()
end

function i3k_sbean.nearby_monster_dead:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.killerID)
end


-- 周围残影死亡
i3k_sbean.nearby_blur_dead = i3k_class("nearby_blur_dead")
function i3k_sbean.nearby_blur_dead:ctor()
	self._pname_ = "nearby_blur_dead"
	--self.id:		int32	
	--self.killerID:		int32	
end

function i3k_sbean.nearby_blur_dead:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_dead:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.killerID = is:popNumber()
end

function i3k_sbean.nearby_blur_dead:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.killerID)
end


-- 周围符灵卫死亡
i3k_sbean.nearby_summoned_dead = i3k_class("nearby_summoned_dead")
function i3k_sbean.nearby_summoned_dead:ctor()
	self._pname_ = "nearby_summoned_dead"
	--self.id:		int32	
	--self.killerID:		int32	
end

function i3k_sbean.nearby_summoned_dead:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_dead:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.killerID = is:popNumber()
end

function i3k_sbean.nearby_summoned_dead:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.killerID)
end


-- 周围玩家开始冲锋
i3k_sbean.nearby_role_rushstart = i3k_class("nearby_role_rushstart")
function i3k_sbean.nearby_role_rushstart:ctor()
	self._pname_ = "nearby_role_rushstart"
	--self.id:		int32	
	--self.skillID:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_rushstart:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_rushstart:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_rushstart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 周围佣兵开始冲锋
i3k_sbean.nearby_pet_rushstart = i3k_class("nearby_pet_rushstart")
function i3k_sbean.nearby_pet_rushstart:ctor()
	self._pname_ = "nearby_pet_rushstart"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.skillID:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_pet_rushstart:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_rushstart:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.skillID = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_pet_rushstart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.skillID)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 周围怪物开始冲锋
i3k_sbean.nearby_monster_rushstart = i3k_class("nearby_monster_rushstart")
function i3k_sbean.nearby_monster_rushstart:ctor()
	self._pname_ = "nearby_monster_rushstart"
	--self.id:		int32	
	--self.skillID:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_monster_rushstart:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_rushstart:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_monster_rushstart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 周围怪物冲锋结束
i3k_sbean.nearby_monster_rushend = i3k_class("nearby_monster_rushend")
function i3k_sbean.nearby_monster_rushend:ctor()
	self._pname_ = "nearby_monster_rushend"
	--self.id:		int32	
	--self.targetPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_monster_rushend:clone()
	return clone(self)
end

function i3k_sbean.nearby_monster_rushend:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.targetPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_monster_rushend:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.targetPos)
	os:push(self.timeTick)
end


-- 周围残影开始冲锋
i3k_sbean.nearby_blur_rushstart = i3k_class("nearby_blur_rushstart")
function i3k_sbean.nearby_blur_rushstart:ctor()
	self._pname_ = "nearby_blur_rushstart"
	--self.id:		int32	
	--self.skillID:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_blur_rushstart:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_rushstart:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_blur_rushstart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 周围残影冲锋结束
i3k_sbean.nearby_blur_rushend = i3k_class("nearby_blur_rushend")
function i3k_sbean.nearby_blur_rushend:ctor()
	self._pname_ = "nearby_blur_rushend"
	--self.id:		int32	
	--self.targetPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_blur_rushend:clone()
	return clone(self)
end

function i3k_sbean.nearby_blur_rushend:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.targetPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_blur_rushend:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.targetPos)
	os:push(self.timeTick)
end


-- 周围符灵卫开始冲锋
i3k_sbean.nearby_summoned_rushstart = i3k_class("nearby_summoned_rushstart")
function i3k_sbean.nearby_summoned_rushstart:ctor()
	self._pname_ = "nearby_summoned_rushstart"
	--self.id:		int32	
	--self.skillID:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_summoned_rushstart:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_rushstart:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.skillID = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_summoned_rushstart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.skillID)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 周围符灵卫冲锋结束
i3k_sbean.nearby_summoned_rushend = i3k_class("nearby_summoned_rushend")
function i3k_sbean.nearby_summoned_rushend:ctor()
	self._pname_ = "nearby_summoned_rushend"
	--self.id:		int32	
	--self.targetPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_summoned_rushend:clone()
	return clone(self)
end

function i3k_sbean.nearby_summoned_rushend:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.targetPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_summoned_rushend:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.targetPos)
	os:push(self.timeTick)
end


-- 周围玩家升级
i3k_sbean.nearby_role_lvlup = i3k_class("nearby_role_lvlup")
function i3k_sbean.nearby_role_lvlup:ctor()
	self._pname_ = "nearby_role_lvlup"
	--self.id:		int32	
	--self.newLvl:		int32	
end

function i3k_sbean.nearby_role_lvlup:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_lvlup:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.newLvl = is:popNumber()
end

function i3k_sbean.nearby_role_lvlup:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.newLvl)
end


-- 周围玩家部位更新
i3k_sbean.nearby_role_updatepart = i3k_class("nearby_role_updatepart")
function i3k_sbean.nearby_role_updatepart:ctor()
	self._pname_ = "nearby_role_updatepart"
	--self.id:		int32	
	--self.equipPart:		EquipPart	
end

function i3k_sbean.nearby_role_updatepart:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updatepart:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.equipPart = is:pop(i3k_sbean.EquipPart)
end

function i3k_sbean.nearby_role_updatepart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.equipPart)
end


-- 周围玩家同步最大血量
i3k_sbean.nearby_role_updatemaxhp = i3k_class("nearby_role_updatemaxhp")
function i3k_sbean.nearby_role_updatemaxhp:ctor()
	self._pname_ = "nearby_role_updatemaxhp"
	--self.id:		int32	
	--self.newMaxHp:		int32	
end

function i3k_sbean.nearby_role_updatemaxhp:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updatemaxhp:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.newMaxHp = is:popNumber()
end

function i3k_sbean.nearby_role_updatemaxhp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.newMaxHp)
end


-- 更新周围玩家是否是运镖行为
i3k_sbean.nearby_role_carbehavior = i3k_class("nearby_role_carbehavior")
function i3k_sbean.nearby_role_carbehavior:ctor()
	self._pname_ = "nearby_role_carbehavior"
	--self.id:		int32	
	--self.carOwner:		int32	
	--self.carRobber:		int32	
end

function i3k_sbean.nearby_role_carbehavior:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_carbehavior:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.carOwner = is:popNumber()
	self.carRobber = is:popNumber()
end

function i3k_sbean.nearby_role_carbehavior:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.carOwner)
	os:pushNumber(self.carRobber)
end


-- 周围佣兵同步最大血量
i3k_sbean.nearby_pet_updatemaxhp = i3k_class("nearby_pet_updatemaxhp")
function i3k_sbean.nearby_pet_updatemaxhp:ctor()
	self._pname_ = "nearby_pet_updatemaxhp"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.newMaxHp:		int32	
end

function i3k_sbean.nearby_pet_updatemaxhp:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_updatemaxhp:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.newMaxHp = is:popNumber()
end

function i3k_sbean.nearby_pet_updatemaxhp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.newMaxHp)
end


-- 周围镖车同步最大血量(包括镖车主人)
i3k_sbean.nearby_escortcar_updatemaxhp = i3k_class("nearby_escortcar_updatemaxhp")
function i3k_sbean.nearby_escortcar_updatemaxhp:ctor()
	self._pname_ = "nearby_escortcar_updatemaxhp"
	--self.id:		int32	
	--self.newMaxHp:		int32	
end

function i3k_sbean.nearby_escortcar_updatemaxhp:clone()
	return clone(self)
end

function i3k_sbean.nearby_escortcar_updatemaxhp:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.newMaxHp = is:popNumber()
end

function i3k_sbean.nearby_escortcar_updatemaxhp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.newMaxHp)
end


-- 周围单位复活
i3k_sbean.nearby_role_revive = i3k_class("nearby_role_revive")
function i3k_sbean.nearby_role_revive:ctor()
	self._pname_ = "nearby_role_revive"
	--self.id:		int32	
	--self.curHP:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.nearby_role_revive:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_revive:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_role_revive:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
	os:push(self.position)
end


-- 周围佣兵复活
i3k_sbean.nearby_pet_revive = i3k_class("nearby_pet_revive")
function i3k_sbean.nearby_pet_revive:ctor()
	self._pname_ = "nearby_pet_revive"
	--self.roleID:		int32	
	--self.cfgID:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.nearby_pet_revive:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_revive:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.nearby_pet_revive:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgID)
	os:push(self.position)
end


-- 周围陷阱改变状态
i3k_sbean.nearby_trap_changestate = i3k_class("nearby_trap_changestate")
function i3k_sbean.nearby_trap_changestate:ctor()
	self._pname_ = "nearby_trap_changestate"
	--self.trapID:		int32	
	--self.curState:		int32	
end

function i3k_sbean.nearby_trap_changestate:clone()
	return clone(self)
end

function i3k_sbean.nearby_trap_changestate:decode(is)
	is:popString()
	self.trapID = is:popNumber()
	self.curState = is:popNumber()
end

function i3k_sbean.nearby_trap_changestate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.trapID)
	os:pushNumber(self.curState)
end


-- 周围玩家更换装备
i3k_sbean.nearby_role_updateequip = i3k_class("nearby_role_updateequip")
function i3k_sbean.nearby_role_updateequip:ctor()
	self._pname_ = "nearby_role_updateequip"
	--self.roleID:		int32	
	--self.wid:		int32	
	--self.eid:		int32	
end

function i3k_sbean.nearby_role_updateequip:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updateequip:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.wid = is:popNumber()
	self.eid = is:popNumber()
end

function i3k_sbean.nearby_role_updateequip:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.wid)
	os:pushNumber(self.eid)
end


-- 周围玩家更改脚底特效
i3k_sbean.nearby_role_updatefooteffect = i3k_class("nearby_role_updatefooteffect")
function i3k_sbean.nearby_role_updatefooteffect:ctor()
	self._pname_ = "nearby_role_updatefooteffect"
	--self.roleID:		int32	
	--self.footEffect:		int32	
end

function i3k_sbean.nearby_role_updatefooteffect:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updatefooteffect:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.footEffect = is:popNumber()
end

function i3k_sbean.nearby_role_updatefooteffect:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.footEffect)
end


-- 周围玩家更改装备外显
i3k_sbean.nearby_role_updateweapondisplay = i3k_class("nearby_role_updateweapondisplay")
function i3k_sbean.nearby_role_updateweapondisplay:ctor()
	self._pname_ = "nearby_role_updateweapondisplay"
	--self.roleID:		int32	
	--self.weaponDisplay:		int32	
end

function i3k_sbean.nearby_role_updateweapondisplay:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updateweapondisplay:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.weaponDisplay = is:popNumber()
end

function i3k_sbean.nearby_role_updateweapondisplay:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.weaponDisplay)
end


-- 周围玩家更改守护灵兽
i3k_sbean.nearby_role_changepetguard = i3k_class("nearby_role_changepetguard")
function i3k_sbean.nearby_role_changepetguard:ctor()
	self._pname_ = "nearby_role_changepetguard"
	--self.roleID:		int32	
	--self.isShow:		int32	
	--self.curPetGuard:		int32	
	--self.pets:		set[int32]	
end

function i3k_sbean.nearby_role_changepetguard:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_changepetguard:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.isShow = is:popNumber()
	self.curPetGuard = is:popNumber()
	self.pets = is:popNumberSet()
end

function i3k_sbean.nearby_role_changepetguard:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.isShow)
	os:pushNumber(self.curPetGuard)
	os:pushNumberSet(self.pets)
end


-- 周围玩家脱装备
i3k_sbean.nearby_role_removeequip = i3k_class("nearby_role_removeequip")
function i3k_sbean.nearby_role_removeequip:ctor()
	self._pname_ = "nearby_role_removeequip"
	--self.roleID:		int32	
	--self.wid:		int32	
end

function i3k_sbean.nearby_role_removeequip:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_removeequip:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.wid = is:popNumber()
end

function i3k_sbean.nearby_role_removeequip:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.wid)
end


-- 周围玩家激活神兵
i3k_sbean.nearby_role_motivateweapon = i3k_class("nearby_role_motivateweapon")
function i3k_sbean.nearby_role_motivateweapon:ctor()
	self._pname_ = "nearby_role_motivateweapon"
	--self.roleID:		int32	
	--self.weaponID:		int32	
	--self.form:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_motivateweapon:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_motivateweapon:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.weaponID = is:popNumber()
	self.form = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_motivateweapon:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.weaponID)
	os:pushNumber(self.form)
	os:push(self.timeTick)
end


-- 周围玩家更新武器祝福状态
i3k_sbean.nearby_role_update_weaponbless = i3k_class("nearby_role_update_weaponbless")
function i3k_sbean.nearby_role_update_weaponbless:ctor()
	self._pname_ = "nearby_role_update_weaponbless"
	--self.roleID:		int32	
	--self.skillID:		int32	
	--self.isactive:		int32	
	--self.curlvl:		int32	
end

function i3k_sbean.nearby_role_update_weaponbless:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_update_weaponbless:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.skillID = is:popNumber()
	self.isactive = is:popNumber()
	self.curlvl = is:popNumber()
end

function i3k_sbean.nearby_role_update_weaponbless:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.isactive)
	os:pushNumber(self.curlvl)
end


-- 自己触发武器祝福特效
i3k_sbean.role_weaponbless_state = i3k_class("role_weaponbless_state")
function i3k_sbean.role_weaponbless_state:ctor()
	self._pname_ = "role_weaponbless_state"
	--self.state:		int32	
end

function i3k_sbean.role_weaponbless_state:clone()
	return clone(self)
end

function i3k_sbean.role_weaponbless_state:decode(is)
	is:popString()
	self.state = is:popNumber()
end

function i3k_sbean.role_weaponbless_state:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.state)
end


-- 周围玩家激活神兵结束
i3k_sbean.nearby_role_motivateend = i3k_class("nearby_role_motivateend")
function i3k_sbean.nearby_role_motivateend:ctor()
	self._pname_ = "nearby_role_motivateend"
	--self.roleID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_motivateend:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_motivateend:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_motivateend:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:push(self.timeTick)
end


-- 周围玩家开始采矿
i3k_sbean.nearby_role_mineralstart = i3k_class("nearby_role_mineralstart")
function i3k_sbean.nearby_role_mineralstart:ctor()
	self._pname_ = "nearby_role_mineralstart"
	--self.roleID:		int32	
	--self.mineralID:		int32	
end

function i3k_sbean.nearby_role_mineralstart:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_mineralstart:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.mineralID = is:popNumber()
end

function i3k_sbean.nearby_role_mineralstart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.mineralID)
end


-- 周围玩家采矿结束
i3k_sbean.nearby_role_mineralend = i3k_class("nearby_role_mineralend")
function i3k_sbean.nearby_role_mineralend:ctor()
	self._pname_ = "nearby_role_mineralend"
	--self.success:		int32	
	--self.roleID:		int32	
	--self.mineralId:		int32	
	--self.disappear:		int32	
end

function i3k_sbean.nearby_role_mineralend:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_mineralend:decode(is)
	is:popString()
	self.success = is:popNumber()
	self.roleID = is:popNumber()
	self.mineralId = is:popNumber()
	self.disappear = is:popNumber()
end

function i3k_sbean.nearby_role_mineralend:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.success)
	os:pushNumber(self.roleID)
	os:pushNumber(self.mineralId)
	os:pushNumber(self.disappear)
end


-- 周围矿状态更新(state 0:损坏 1::正常)
i3k_sbean.nearby_mineral_updatestate = i3k_class("nearby_mineral_updatestate")
function i3k_sbean.nearby_mineral_updatestate:ctor()
	self._pname_ = "nearby_mineral_updatestate"
	--self.id:		int32	
	--self.state:		int32	
end

function i3k_sbean.nearby_mineral_updatestate:clone()
	return clone(self)
end

function i3k_sbean.nearby_mineral_updatestate:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.nearby_mineral_updatestate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.state)
end


i3k_sbean.nearby_mineral_updateowntype = i3k_class("nearby_mineral_updateowntype")
function i3k_sbean.nearby_mineral_updateowntype:ctor()
	self._pname_ = "nearby_mineral_updateowntype"
	--self.id:		int32	
	--self.winType:		int32	
end

function i3k_sbean.nearby_mineral_updateowntype:clone()
	return clone(self)
end

function i3k_sbean.nearby_mineral_updateowntype:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.winType = is:popNumber()
end

function i3k_sbean.nearby_mineral_updateowntype:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.winType)
end


-- 周围玩家采矿打断
i3k_sbean.nearby_role_mineralbreak = i3k_class("nearby_role_mineralbreak")
function i3k_sbean.nearby_role_mineralbreak:ctor()
	self._pname_ = "nearby_role_mineralbreak"
	--self.roleID:		int32	
	--self.mineralID:		int32	
end

function i3k_sbean.nearby_role_mineralbreak:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_mineralbreak:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.mineralID = is:popNumber()
end

function i3k_sbean.nearby_role_mineralbreak:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.mineralID)
end


-- 同步玩家击退结束位置
i3k_sbean.nearby_shiftend_role = i3k_class("nearby_shiftend_role")
function i3k_sbean.nearby_shiftend_role:ctor()
	self._pname_ = "nearby_shiftend_role"
	--self.skillID:		int32	
	--self.rid:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_shiftend_role:clone()
	return clone(self)
end

function i3k_sbean.nearby_shiftend_role:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.rid = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_shiftend_role:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.rid)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 同步佣兵击退结束位置
i3k_sbean.nearby_shiftend_pet = i3k_class("nearby_shiftend_pet")
function i3k_sbean.nearby_shiftend_pet:ctor()
	self._pname_ = "nearby_shiftend_pet"
	--self.skillID:		int32	
	--self.rid:		int32	
	--self.pid:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_shiftend_pet:clone()
	return clone(self)
end

function i3k_sbean.nearby_shiftend_pet:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.rid = is:popNumber()
	self.pid = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_shiftend_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.rid)
	os:pushNumber(self.pid)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 同步怪物击退结束位置
i3k_sbean.nearby_shiftend_monster = i3k_class("nearby_shiftend_monster")
function i3k_sbean.nearby_shiftend_monster:ctor()
	self._pname_ = "nearby_shiftend_monster"
	--self.skillID:		int32	
	--self.mid:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_shiftend_monster:clone()
	return clone(self)
end

function i3k_sbean.nearby_shiftend_monster:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.mid = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_shiftend_monster:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.mid)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 同步残影击退结束位置
i3k_sbean.nearby_shiftend_blur = i3k_class("nearby_shiftend_blur")
function i3k_sbean.nearby_shiftend_blur:ctor()
	self._pname_ = "nearby_shiftend_blur"
	--self.skillID:		int32	
	--self.bid:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_shiftend_blur:clone()
	return clone(self)
end

function i3k_sbean.nearby_shiftend_blur:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.bid = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_shiftend_blur:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.bid)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 同步符灵卫击退结束位置
i3k_sbean.nearby_shiftend_summoned = i3k_class("nearby_shiftend_summoned")
function i3k_sbean.nearby_shiftend_summoned:ctor()
	self._pname_ = "nearby_shiftend_summoned"
	--self.skillID:		int32	
	--self.bid:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_shiftend_summoned:clone()
	return clone(self)
end

function i3k_sbean.nearby_shiftend_summoned:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.bid = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_shiftend_summoned:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.bid)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 周围玩家添加嘲讽状态
i3k_sbean.nearby_addataunt_role = i3k_class("nearby_addataunt_role")
function i3k_sbean.nearby_addataunt_role:ctor()
	self._pname_ = "nearby_addataunt_role"
	--self.trid:		int32	
	--self.id:		int32	
	--self.type:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_addataunt_role:clone()
	return clone(self)
end

function i3k_sbean.nearby_addataunt_role:decode(is)
	is:popString()
	self.trid = is:popNumber()
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_addataunt_role:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.trid)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 周围佣兵添加嘲讽状态
i3k_sbean.nearby_addataunt_pet = i3k_class("nearby_addataunt_pet")
function i3k_sbean.nearby_addataunt_pet:ctor()
	self._pname_ = "nearby_addataunt_pet"
	--self.tpid:		int32	
	--self.townerID:		int32	
	--self.id:		int32	
	--self.type:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_addataunt_pet:clone()
	return clone(self)
end

function i3k_sbean.nearby_addataunt_pet:decode(is)
	is:popString()
	self.tpid = is:popNumber()
	self.townerID = is:popNumber()
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_addataunt_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.tpid)
	os:pushNumber(self.townerID)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 周围怪物添加嘲讽状态
i3k_sbean.nearby_addataunt_monster = i3k_class("nearby_addataunt_monster")
function i3k_sbean.nearby_addataunt_monster:ctor()
	self._pname_ = "nearby_addataunt_monster"
	--self.tmid:		int32	
	--self.id:		int32	
	--self.type:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_addataunt_monster:clone()
	return clone(self)
end

function i3k_sbean.nearby_addataunt_monster:decode(is)
	is:popString()
	self.tmid = is:popNumber()
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_addataunt_monster:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.tmid)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 周围残影添加嘲讽状态
i3k_sbean.nearby_addataunt_blur = i3k_class("nearby_addataunt_blur")
function i3k_sbean.nearby_addataunt_blur:ctor()
	self._pname_ = "nearby_addataunt_blur"
	--self.tbid:		int32	
	--self.id:		int32	
	--self.type:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_addataunt_blur:clone()
	return clone(self)
end

function i3k_sbean.nearby_addataunt_blur:decode(is)
	is:popString()
	self.tbid = is:popNumber()
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_addataunt_blur:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.tbid)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 周围符灵卫添加嘲讽状态
i3k_sbean.nearby_addataunt_summoned = i3k_class("nearby_addataunt_summoned")
function i3k_sbean.nearby_addataunt_summoned:ctor()
	self._pname_ = "nearby_addataunt_summoned"
	--self.tbid:		int32	
	--self.id:		int32	
	--self.type:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_addataunt_summoned:clone()
	return clone(self)
end

function i3k_sbean.nearby_addataunt_summoned:decode(is)
	is:popString()
	self.tbid = is:popNumber()
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_addataunt_summoned:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.tbid)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 周围怪物添加硬直状态
i3k_sbean.nearby_addspa_monster = i3k_class("nearby_addspa_monster")
function i3k_sbean.nearby_addspa_monster:ctor()
	self._pname_ = "nearby_addspa_monster"
	--self.tmid:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_addspa_monster:clone()
	return clone(self)
end

function i3k_sbean.nearby_addspa_monster:decode(is)
	is:popString()
	self.tmid = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_addspa_monster:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.tmid)
	os:push(self.timeTick)
end


-- 更新周围玩家帮派信息
i3k_sbean.nearby_update_sectbrief = i3k_class("nearby_update_sectbrief")
function i3k_sbean.nearby_update_sectbrief:ctor()
	self._pname_ = "nearby_update_sectbrief"
	--self.rid:		int32	
	--self.sectBrief:		SectBrief	
end

function i3k_sbean.nearby_update_sectbrief:clone()
	return clone(self)
end

function i3k_sbean.nearby_update_sectbrief:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.sectBrief = is:pop(i3k_sbean.SectBrief)
end

function i3k_sbean.nearby_update_sectbrief:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:push(self.sectBrief)
end


-- 周围玩家添加状态
i3k_sbean.nearby_role_addstate = i3k_class("nearby_role_addstate")
function i3k_sbean.nearby_role_addstate:ctor()
	self._pname_ = "nearby_role_addstate"
	--self.rid:		int32	
	--self.sid:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_addstate:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_addstate:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.sid = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_addstate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.sid)
	os:push(self.timeTick)
end


-- 周围玩家去除状态
i3k_sbean.nearby_role_removestate = i3k_class("nearby_role_removestate")
function i3k_sbean.nearby_role_removestate:ctor()
	self._pname_ = "nearby_role_removestate"
	--self.rid:		int32	
	--self.sid:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.nearby_role_removestate:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_removestate:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.sid = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.nearby_role_removestate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.sid)
	os:push(self.timeTick)
end


-- 玩家自身添加状态
i3k_sbean.role_addstate = i3k_class("role_addstate")
function i3k_sbean.role_addstate:ctor()
	self._pname_ = "role_addstate"
	--self.sid:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_addstate:clone()
	return clone(self)
end

function i3k_sbean.role_addstate:decode(is)
	is:popString()
	self.sid = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_addstate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sid)
	os:push(self.timeTick)
end


-- 玩家自身去除状态
i3k_sbean.role_removestate = i3k_class("role_removestate")
function i3k_sbean.role_removestate:ctor()
	self._pname_ = "role_removestate"
	--self.sid:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_removestate:clone()
	return clone(self)
end

function i3k_sbean.role_removestate:decode(is)
	is:popString()
	self.sid = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_removestate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sid)
	os:push(self.timeTick)
end


-- 佣兵自身添加状态
i3k_sbean.pet_addstate = i3k_class("pet_addstate")
function i3k_sbean.pet_addstate:ctor()
	self._pname_ = "pet_addstate"
	--self.pid:		int32	
	--self.sid:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.pet_addstate:clone()
	return clone(self)
end

function i3k_sbean.pet_addstate:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.sid = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.pet_addstate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumber(self.sid)
	os:push(self.timeTick)
end


-- 佣兵自身去除状态
i3k_sbean.pet_removestate = i3k_class("pet_removestate")
function i3k_sbean.pet_removestate:ctor()
	self._pname_ = "pet_removestate"
	--self.pid:		int32	
	--self.sid:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.pet_removestate:clone()
	return clone(self)
end

function i3k_sbean.pet_removestate:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.sid = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.pet_removestate:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumber(self.sid)
	os:push(self.timeTick)
end


-- 通知玩家复活
i3k_sbean.role_revive = i3k_class("role_revive")
function i3k_sbean.role_revive:ctor()
	self._pname_ = "role_revive"
	--self.curHP:		int32	
	--self.pos:		Vector3	
end

function i3k_sbean.role_revive:clone()
	return clone(self)
end

function i3k_sbean.role_revive:decode(is)
	is:popString()
	self.curHP = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.role_revive:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curHP)
	os:push(self.pos)
end


-- 佣兵召唤协议
i3k_sbean.role_summon_pet = i3k_class("role_summon_pet")
function i3k_sbean.role_summon_pet:ctor()
	self._pname_ = "role_summon_pet"
	--self.petId:		int32	
	--self.curHP:		int32	
	--self.curSP:		int32	
	--self.location:		Location	
	--self.seq:		int32	
	--self.isDead:		int32	
end

function i3k_sbean.role_summon_pet:clone()
	return clone(self)
end

function i3k_sbean.role_summon_pet:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.curHP = is:popNumber()
	self.curSP = is:popNumber()
	self.location = is:pop(i3k_sbean.Location)
	self.seq = is:popNumber()
	self.isDead = is:popNumber()
end

function i3k_sbean.role_summon_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.curHP)
	os:pushNumber(self.curSP)
	os:push(self.location)
	os:pushNumber(self.seq)
	os:pushNumber(self.isDead)
end


-- 佣兵解散协议
i3k_sbean.role_unsummon_pet = i3k_class("role_unsummon_pet")
function i3k_sbean.role_unsummon_pet:ctor()
	self._pname_ = "role_unsummon_pet"
	--self.petId:		int32	
end

function i3k_sbean.role_unsummon_pet:clone()
	return clone(self)
end

function i3k_sbean.role_unsummon_pet:decode(is)
	is:popString()
	self.petId = is:popNumber()
end

function i3k_sbean.role_unsummon_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
end


-- 佣兵复活协议(map回应)
i3k_sbean.role_revive_pet = i3k_class("role_revive_pet")
function i3k_sbean.role_revive_pet:ctor()
	self._pname_ = "role_revive_pet"
	--self.pet:		int32	
	--self.location:		Location	
end

function i3k_sbean.role_revive_pet:clone()
	return clone(self)
end

function i3k_sbean.role_revive_pet:decode(is)
	is:popString()
	self.pet = is:popNumber()
	self.location = is:pop(i3k_sbean.Location)
end

function i3k_sbean.role_revive_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pet)
	os:push(self.location)
end


-- 佣兵位置重置
i3k_sbean.pet_reset_position = i3k_class("pet_reset_position")
function i3k_sbean.pet_reset_position:ctor()
	self._pname_ = "pet_reset_position"
	--self.pid:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.pet_reset_position:clone()
	return clone(self)
end

function i3k_sbean.pet_reset_position:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.pet_reset_position:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:push(self.position)
end


-- 周围召唤出一个佣兵
i3k_sbean.nearby_call_pet = i3k_class("nearby_call_pet")
function i3k_sbean.nearby_call_pet:ctor()
	self._pname_ = "nearby_call_pet"
	--self.roleID:		int32	
	--self.cfgid:		int32	
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
	--self.curHP:		int32	
	--self.maxHP:		int32	
end

function i3k_sbean.nearby_call_pet:clone()
	return clone(self)
end

function i3k_sbean.nearby_call_pet:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
end

function i3k_sbean.nearby_call_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
	os:push(self.position)
	os:push(self.rotation)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
end


-- 解散一个佣兵
i3k_sbean.nearby_dissolve_pet = i3k_class("nearby_dissolve_pet")
function i3k_sbean.nearby_dissolve_pet:ctor()
	self._pname_ = "nearby_dissolve_pet"
	--self.roleID:		int32	
	--self.cfgid:		int32	
end

function i3k_sbean.nearby_dissolve_pet:clone()
	return clone(self)
end

function i3k_sbean.nearby_dissolve_pet:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.cfgid = is:popNumber()
end

function i3k_sbean.nearby_dissolve_pet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.cfgid)
end


-- 同步玩家耐久度
i3k_sbean.role_sync_durability = i3k_class("role_sync_durability")
function i3k_sbean.role_sync_durability:ctor()
	self._pname_ = "role_sync_durability"
	--self.wid:		int32	
	--self.durability:		int32	
end

function i3k_sbean.role_sync_durability:clone()
	return clone(self)
end

function i3k_sbean.role_sync_durability:decode(is)
	is:popString()
	self.wid = is:popNumber()
	self.durability = is:popNumber()
end

function i3k_sbean.role_sync_durability:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
	os:pushNumber(self.durability)
end


-- 同步玩家能量
i3k_sbean.role_sync_sp = i3k_class("role_sync_sp")
function i3k_sbean.role_sync_sp:ctor()
	self._pname_ = "role_sync_sp"
	--self.sp:		int32	
end

function i3k_sbean.role_sync_sp:clone()
	return clone(self)
end

function i3k_sbean.role_sync_sp:decode(is)
	is:popString()
	self.sp = is:popNumber()
end

function i3k_sbean.role_sync_sp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sp)
end


-- 同步玩家武器祝福层数
i3k_sbean.role_sync_weaponbless_curlvl = i3k_class("role_sync_weaponbless_curlvl")
function i3k_sbean.role_sync_weaponbless_curlvl:ctor()
	self._pname_ = "role_sync_weaponbless_curlvl"
	--self.isactive:		int32	
	--self.curlvl:		int32	
end

function i3k_sbean.role_sync_weaponbless_curlvl:clone()
	return clone(self)
end

function i3k_sbean.role_sync_weaponbless_curlvl:decode(is)
	is:popString()
	self.isactive = is:popNumber()
	self.curlvl = is:popNumber()
end

function i3k_sbean.role_sync_weaponbless_curlvl:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isactive)
	os:pushNumber(self.curlvl)
end


-- 同步玩家魂语
i3k_sbean.role_sync_soulenergy = i3k_class("role_sync_soulenergy")
function i3k_sbean.role_sync_soulenergy:ctor()
	self._pname_ = "role_sync_soulenergy"
	--self.soulenergy:		int32	
end

function i3k_sbean.role_sync_soulenergy:clone()
	return clone(self)
end

function i3k_sbean.role_sync_soulenergy:decode(is)
	is:popString()
	self.soulenergy = is:popNumber()
end

function i3k_sbean.role_sync_soulenergy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.soulenergy)
end


-- 同步玩家buff增减战斗能量
i3k_sbean.role_sync_bufffightSP = i3k_class("role_sync_bufffightSP")
function i3k_sbean.role_sync_bufffightSP:ctor()
	self._pname_ = "role_sync_bufffightSP"
	--self.fightSP:		int32	
end

function i3k_sbean.role_sync_bufffightSP:clone()
	return clone(self)
end

function i3k_sbean.role_sync_bufffightSP:decode(is)
	is:popString()
	self.fightSP = is:popNumber()
end

function i3k_sbean.role_sync_bufffightSP:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fightSP)
end


-- 同步玩家战斗能量
i3k_sbean.role_sync_fightSP = i3k_class("role_sync_fightSP")
function i3k_sbean.role_sync_fightSP:ctor()
	self._pname_ = "role_sync_fightSP"
	--self.fightSP:		int32	
end

function i3k_sbean.role_sync_fightSP:clone()
	return clone(self)
end

function i3k_sbean.role_sync_fightSP:decode(is)
	is:popString()
	self.fightSP = is:popNumber()
end

function i3k_sbean.role_sync_fightSP:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fightSP)
end


-- 同步佣兵能量
i3k_sbean.pet_sync_sp = i3k_class("pet_sync_sp")
function i3k_sbean.pet_sync_sp:ctor()
	self._pname_ = "pet_sync_sp"
	--self.cfgID:		int32	
	--self.sp:		int32	
end

function i3k_sbean.pet_sync_sp:clone()
	return clone(self)
end

function i3k_sbean.pet_sync_sp:decode(is)
	is:popString()
	self.cfgID = is:popNumber()
	self.sp = is:popNumber()
end

function i3k_sbean.pet_sync_sp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cfgID)
	os:pushNumber(self.sp)
end


-- 激活神兵回应(motivate_weapon的异步回应)
i3k_sbean.motivate_state = i3k_class("motivate_state")
function i3k_sbean.motivate_state:ctor()
	self._pname_ = "motivate_state"
	--self.success:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.motivate_state:clone()
	return clone(self)
end

function i3k_sbean.motivate_state:decode(is)
	is:popString()
	self.success = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.motivate_state:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.success)
	os:push(self.timeTick)
end


-- 更新神兵变身减少时间
i3k_sbean.update_motivate_time = i3k_class("update_motivate_time")
function i3k_sbean.update_motivate_time:ctor()
	self._pname_ = "update_motivate_time"
	--self.reduceTime:		int32	
end

function i3k_sbean.update_motivate_time:clone()
	return clone(self)
end

function i3k_sbean.update_motivate_time:decode(is)
	is:popString()
	self.reduceTime = is:popNumber()
end

function i3k_sbean.update_motivate_time:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.reduceTime)
end


-- 激活武器祝福回应(role_active_weapon_bless)
i3k_sbean.weaponbless_state = i3k_class("weaponbless_state")
function i3k_sbean.weaponbless_state:ctor()
	self._pname_ = "weaponbless_state"
	--self.success:		int32	
	--self.curLvl:		int32	
end

function i3k_sbean.weaponbless_state:clone()
	return clone(self)
end

function i3k_sbean.weaponbless_state:decode(is)
	is:popString()
	self.success = is:popNumber()
	self.curLvl = is:popNumber()
end

function i3k_sbean.weaponbless_state:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.success)
	os:pushNumber(self.curLvl)
end


-- 查询周围玩家回应(query_roles_detail的异步回应)
i3k_sbean.roles_detail = i3k_class("roles_detail")
function i3k_sbean.roles_detail:ctor()
	self._pname_ = "roles_detail"
	--self.roledetails:		vector[RoleQueryDetail]	
end

function i3k_sbean.roles_detail:clone()
	return clone(self)
end

function i3k_sbean.roles_detail:decode(is)
	is:popString()
	self.roledetails = is:popList(i3k_sbean.RoleQueryDetail)
end

function i3k_sbean.roles_detail:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.roledetails)
end


-- 查询周围佣兵信息回应(query_pets_detail的异步回应)
i3k_sbean.pets_detail = i3k_class("pets_detail")
function i3k_sbean.pets_detail:ctor()
	self._pname_ = "pets_detail"
	--self.petdetails:		vector[PetDetail]	
end

function i3k_sbean.pets_detail:clone()
	return clone(self)
end

function i3k_sbean.pets_detail:decode(is)
	is:popString()
	self.petdetails = is:popList(i3k_sbean.PetDetail)
end

function i3k_sbean.pets_detail:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.petdetails)
end


-- 删除掉落
i3k_sbean.drop_delete = i3k_class("drop_delete")
function i3k_sbean.drop_delete:ctor()
	self._pname_ = "drop_delete"
	--self.dropID:		int32	
end

function i3k_sbean.drop_delete:clone()
	return clone(self)
end

function i3k_sbean.drop_delete:decode(is)
	is:popString()
	self.dropID = is:popNumber()
end

function i3k_sbean.drop_delete:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dropID)
end


-- 拾取掉落成功(role_pickup_drops的异步回应)
i3k_sbean.role_pickup_add = i3k_class("role_pickup_add")
function i3k_sbean.role_pickup_add:ctor()
	self._pname_ = "role_pickup_add"
	--self.drops:		set[int32]	
end

function i3k_sbean.role_pickup_add:clone()
	return clone(self)
end

function i3k_sbean.role_pickup_add:decode(is)
	is:popString()
	self.drops = is:popNumberSet()
end

function i3k_sbean.role_pickup_add:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.drops)
end


-- 掉落
i3k_sbean.role_sync_drops = i3k_class("role_sync_drops")
function i3k_sbean.role_sync_drops:ctor()
	self._pname_ = "role_sync_drops"
	--self.position:		Vector3	
	--self.drops:		vector[DropInfo]	
end

function i3k_sbean.role_sync_drops:clone()
	return clone(self)
end

function i3k_sbean.role_sync_drops:decode(is)
	is:popString()
	self.position = is:pop(i3k_sbean.Vector3)
	self.drops = is:popList(i3k_sbean.DropInfo)
end

function i3k_sbean.role_sync_drops:encode(os)
	os:pushString(self._pname_)
	os:push(self.position)
	os:pushList(self.drops)
end


-- 进地图同步所以掉落
i3k_sbean.role_sync_alldrops = i3k_class("role_sync_alldrops")
function i3k_sbean.role_sync_alldrops:ctor()
	self._pname_ = "role_sync_alldrops"
	--self.drops:		vector[DropDetail]	
end

function i3k_sbean.role_sync_alldrops:clone()
	return clone(self)
end

function i3k_sbean.role_sync_alldrops:decode(is)
	is:popString()
	self.drops = is:popList(i3k_sbean.DropDetail)
end

function i3k_sbean.role_sync_alldrops:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.drops)
end


-- 拾取场景BUFF回应(role_pickup_mapbuff的异步回应)
i3k_sbean.role_mapbuff_add = i3k_class("role_mapbuff_add")
function i3k_sbean.role_mapbuff_add:ctor()
	self._pname_ = "role_mapbuff_add"
	--self.success:		int32	
	--self.mapBuffID:		int32	
end

function i3k_sbean.role_mapbuff_add:clone()
	return clone(self)
end

function i3k_sbean.role_mapbuff_add:decode(is)
	is:popString()
	self.success = is:popNumber()
	self.mapBuffID = is:popNumber()
end

function i3k_sbean.role_mapbuff_add:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.success)
	os:pushNumber(self.mapBuffID)
end


-- 掉落场景BUFF
i3k_sbean.drop_mapbuff = i3k_class("drop_mapbuff")
function i3k_sbean.drop_mapbuff:ctor()
	self._pname_ = "drop_mapbuff"
	--self.mapbuff:		BriefInfo	
end

function i3k_sbean.drop_mapbuff:clone()
	return clone(self)
end

function i3k_sbean.drop_mapbuff:decode(is)
	is:popString()
	self.mapbuff = is:pop(i3k_sbean.BriefInfo)
end

function i3k_sbean.drop_mapbuff:encode(os)
	os:pushString(self._pname_)
	os:push(self.mapbuff)
end


-- 同步单机副本进度
i3k_sbean.privatemap_sync_progress = i3k_class("privatemap_sync_progress")
function i3k_sbean.privatemap_sync_progress:ctor()
	self._pname_ = "privatemap_sync_progress"
	--self.mapprogress:		MapProgress	
end

function i3k_sbean.privatemap_sync_progress:clone()
	return clone(self)
end

function i3k_sbean.privatemap_sync_progress:decode(is)
	is:popString()
	self.mapprogress = is:pop(i3k_sbean.MapProgress)
end

function i3k_sbean.privatemap_sync_progress:encode(os)
	os:pushString(self._pname_)
	os:push(self.mapprogress)
end


-- 同步会武竞技场信息
i3k_sbean.superarena_info = i3k_class("superarena_info")
function i3k_sbean.superarena_info:ctor()
	self._pname_ = "superarena_info"
	--self.teamMembers:		map[int32, int32]	
	--self.enemies:		map[int32, SuperArenaEnemy]	
end

function i3k_sbean.superarena_info:clone()
	return clone(self)
end

function i3k_sbean.superarena_info:decode(is)
	is:popString()
	self.teamMembers = is:popNumberNumberMap()
	self.enemies = is:popNumberMap(i3k_sbean.SuperArenaEnemy)
end

function i3k_sbean.superarena_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.teamMembers)
	os:pushNumberMap(self.enemies)
end


-- 更新组队副本当前刷怪区域ID
i3k_sbean.update_curspawnarea = i3k_class("update_curspawnarea")
function i3k_sbean.update_curspawnarea:ctor()
	self._pname_ = "update_curspawnarea"
	--self.id:		int32	
end

function i3k_sbean.update_curspawnarea:clone()
	return clone(self)
end

function i3k_sbean.update_curspawnarea:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.update_curspawnarea:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 玩家自己触发技能（服务器触发）
i3k_sbean.role_trig_skill = i3k_class("role_trig_skill")
function i3k_sbean.role_trig_skill:ctor()
	self._pname_ = "role_trig_skill"
	--self.skillID:		int32	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
end

function i3k_sbean.role_trig_skill:clone()
	return clone(self)
end

function i3k_sbean.role_trig_skill:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
end

function i3k_sbean.role_trig_skill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
end


-- 佣兵自己触发技能（服务器触发）
i3k_sbean.pet_trig_skill = i3k_class("pet_trig_skill")
function i3k_sbean.pet_trig_skill:ctor()
	self._pname_ = "pet_trig_skill"
	--self.pid:		int32	
	--self.skillID:		int32	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
end

function i3k_sbean.pet_trig_skill:clone()
	return clone(self)
end

function i3k_sbean.pet_trig_skill:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.skillID = is:popNumber()
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
end

function i3k_sbean.pet_trig_skill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumber(self.skillID)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
end


-- 更新PK值
i3k_sbean.role_update_pkvalue = i3k_class("role_update_pkvalue")
function i3k_sbean.role_update_pkvalue:ctor()
	self._pname_ = "role_update_pkvalue"
	--self.pkValue:		int32	
end

function i3k_sbean.role_update_pkvalue:clone()
	return clone(self)
end

function i3k_sbean.role_update_pkvalue:decode(is)
	is:popString()
	self.pkValue = is:popNumber()
end

function i3k_sbean.role_update_pkvalue:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pkValue)
end


-- 周围玩家同步PK状态
i3k_sbean.nearby_update_pkinfo = i3k_class("nearby_update_pkinfo")
function i3k_sbean.nearby_update_pkinfo:ctor()
	self._pname_ = "nearby_update_pkinfo"
	--self.roleID:		int32	
	--self.grade:		int32	
	--self.pkState:		int32	
end

function i3k_sbean.nearby_update_pkinfo:clone()
	return clone(self)
end

function i3k_sbean.nearby_update_pkinfo:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.grade = is:popNumber()
	self.pkState = is:popNumber()
end

function i3k_sbean.nearby_update_pkinfo:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.grade)
	os:pushNumber(self.pkState)
end


-- 冷却玩家某个技能（使技能不能使用）
i3k_sbean.role_reset_skill = i3k_class("role_reset_skill")
function i3k_sbean.role_reset_skill:ctor()
	self._pname_ = "role_reset_skill"
	--self.skillID:		int32	
end

function i3k_sbean.role_reset_skill:clone()
	return clone(self)
end

function i3k_sbean.role_reset_skill:decode(is)
	is:popString()
	self.skillID = is:popNumber()
end

function i3k_sbean.role_reset_skill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
end


-- 冷却佣兵某个技能（使技能不能使用）
i3k_sbean.pet_reset_skill = i3k_class("pet_reset_skill")
function i3k_sbean.pet_reset_skill:ctor()
	self._pname_ = "pet_reset_skill"
	--self.pid:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.pet_reset_skill:clone()
	return clone(self)
end

function i3k_sbean.pet_reset_skill:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.pet_reset_skill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumber(self.skillID)
end


-- 快速冷却玩家某个技能（减少CD时间）
i3k_sbean.role_quickcool_skill = i3k_class("role_quickcool_skill")
function i3k_sbean.role_quickcool_skill:ctor()
	self._pname_ = "role_quickcool_skill"
	--self.skillID:		int32	
	--self.time:		int32	
end

function i3k_sbean.role_quickcool_skill:clone()
	return clone(self)
end

function i3k_sbean.role_quickcool_skill:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.time = is:popNumber()
end

function i3k_sbean.role_quickcool_skill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.time)
end


-- 快速冷却佣兵某个技能（减少CD时间）
i3k_sbean.pet_quickcool_skill = i3k_class("pet_quickcool_skill")
function i3k_sbean.pet_quickcool_skill:ctor()
	self._pname_ = "pet_quickcool_skill"
	--self.pid:		int32	
	--self.skillID:		int32	
	--self.time:		int32	
end

function i3k_sbean.pet_quickcool_skill:clone()
	return clone(self)
end

function i3k_sbean.pet_quickcool_skill:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.skillID = is:popNumber()
	self.time = is:popNumber()
end

function i3k_sbean.pet_quickcool_skill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumber(self.skillID)
	os:pushNumber(self.time)
end


-- 查询家园人员位置(query_homeland_members_pos的回应)
i3k_sbean.homeland_members_position = i3k_class("homeland_members_position")
function i3k_sbean.homeland_members_position:ctor()
	self._pname_ = "homeland_members_position"
	--self.members:		map[int32, Vector3]	
end

function i3k_sbean.homeland_members_position:clone()
	return clone(self)
end

function i3k_sbean.homeland_members_position:decode(is)
	is:popString()
	self.members = is:popNumberMap(i3k_sbean.Vector3)
end

function i3k_sbean.homeland_members_position:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.members)
end


-- 势力战自己积分更新
i3k_sbean.role_forcewar_score = i3k_class("role_forcewar_score")
function i3k_sbean.role_forcewar_score:ctor()
	self._pname_ = "role_forcewar_score"
	--self.score:		int32	
end

function i3k_sbean.role_forcewar_score:clone()
	return clone(self)
end

function i3k_sbean.role_forcewar_score:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.role_forcewar_score:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 查询势力战队友位置信息(query_forcewar_members_pos的回应)
i3k_sbean.forcewar_members_position = i3k_class("forcewar_members_position")
function i3k_sbean.forcewar_members_position:ctor()
	self._pname_ = "forcewar_members_position"
	--self.members:		map[int32, Vector3]	
end

function i3k_sbean.forcewar_members_position:clone()
	return clone(self)
end

function i3k_sbean.forcewar_members_position:decode(is)
	is:popString()
	self.members = is:popNumberMap(i3k_sbean.Vector3)
end

function i3k_sbean.forcewar_members_position:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.members)
end


-- 势力战雕像、水晶（进地图时同步的）
i3k_sbean.role_forcewar_statues = i3k_class("role_forcewar_statues")
function i3k_sbean.role_forcewar_statues:ctor()
	self._pname_ = "role_forcewar_statues"
	--self.statues:		vector[EnterDetail]	
	--self.totalNormalStatue:		int32	
	--self.totalBigStatue:		int32	
end

function i3k_sbean.role_forcewar_statues:clone()
	return clone(self)
end

function i3k_sbean.role_forcewar_statues:decode(is)
	is:popString()
	self.statues = is:popList(i3k_sbean.EnterDetail)
	self.totalNormalStatue = is:popNumber()
	self.totalBigStatue = is:popNumber()
end

function i3k_sbean.role_forcewar_statues:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.statues)
	os:pushNumber(self.totalNormalStatue)
	os:pushNumber(self.totalBigStatue)
end


-- 势力战战报查询回应(query_forcewar_result的回应)
i3k_sbean.roles_forcewaroverview = i3k_class("roles_forcewaroverview")
function i3k_sbean.roles_forcewaroverview:ctor()
	self._pname_ = "roles_forcewaroverview"
	--self.white:		vector[ForceWarOverview]	
	--self.black:		vector[ForceWarOverview]	
end

function i3k_sbean.roles_forcewaroverview:clone()
	return clone(self)
end

function i3k_sbean.roles_forcewaroverview:decode(is)
	is:popString()
	self.white = is:popList(i3k_sbean.ForceWarOverview)
	self.black = is:popList(i3k_sbean.ForceWarOverview)
end

function i3k_sbean.roles_forcewaroverview:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.white)
	os:pushList(self.black)
end


-- 击杀加分
i3k_sbean.role_forcewar_kill = i3k_class("role_forcewar_kill")
function i3k_sbean.role_forcewar_kill:ctor()
	self._pname_ = "role_forcewar_kill"
	--self.addScore:		int32	
end

function i3k_sbean.role_forcewar_kill:clone()
	return clone(self)
end

function i3k_sbean.role_forcewar_kill:decode(is)
	is:popString()
	self.addScore = is:popNumber()
end

function i3k_sbean.role_forcewar_kill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.addScore)
end


-- 助攻加分
i3k_sbean.role_forcewar_assist = i3k_class("role_forcewar_assist")
function i3k_sbean.role_forcewar_assist:ctor()
	self._pname_ = "role_forcewar_assist"
	--self.addScore:		int32	
end

function i3k_sbean.role_forcewar_assist:clone()
	return clone(self)
end

function i3k_sbean.role_forcewar_assist:decode(is)
	is:popString()
	self.addScore = is:popNumber()
end

function i3k_sbean.role_forcewar_assist:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.addScore)
end


i3k_sbean.nearby_forcewar_statues = i3k_class("nearby_forcewar_statues")
function i3k_sbean.nearby_forcewar_statues:ctor()
	self._pname_ = "nearby_forcewar_statues"
	--self.id:		int32	
	--self.curHP:		int32	
end

function i3k_sbean.nearby_forcewar_statues:clone()
	return clone(self)
end

function i3k_sbean.nearby_forcewar_statues:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHP = is:popNumber()
end

function i3k_sbean.nearby_forcewar_statues:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHP)
end


-- 势力战阵营积分更新
i3k_sbean.nearby_forcewar_campscore = i3k_class("nearby_forcewar_campscore")
function i3k_sbean.nearby_forcewar_campscore:ctor()
	self._pname_ = "nearby_forcewar_campscore"
	--self.whiteScore:		int32	
	--self.blackScore:		int32	
end

function i3k_sbean.nearby_forcewar_campscore:clone()
	return clone(self)
end

function i3k_sbean.nearby_forcewar_campscore:decode(is)
	is:popString()
	self.whiteScore = is:popNumber()
	self.blackScore = is:popNumber()
end

function i3k_sbean.nearby_forcewar_campscore:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.whiteScore)
	os:pushNumber(self.blackScore)
end


-- 势力战首杀
i3k_sbean.forcewar_first_blood = i3k_class("forcewar_first_blood")
function i3k_sbean.forcewar_first_blood:ctor()
	self._pname_ = "forcewar_first_blood"
	--self.killer:		string	
	--self.deader:		string	
end

function i3k_sbean.forcewar_first_blood:clone()
	return clone(self)
end

function i3k_sbean.forcewar_first_blood:decode(is)
	is:popString()
	self.killer = is:popString()
	self.deader = is:popString()
end

function i3k_sbean.forcewar_first_blood:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.killer)
	os:pushString(self.deader)
end


-- 势力战连杀、或者终结连杀
i3k_sbean.nearby_forcewar_kill = i3k_class("nearby_forcewar_kill")
function i3k_sbean.nearby_forcewar_kill:ctor()
	self._pname_ = "nearby_forcewar_kill"
	--self.killer:		string	
	--self.killerKills:		int32	
	--self.deader:		string	
	--self.deaderKills:		int32	
end

function i3k_sbean.nearby_forcewar_kill:clone()
	return clone(self)
end

function i3k_sbean.nearby_forcewar_kill:decode(is)
	is:popString()
	self.killer = is:popString()
	self.killerKills = is:popNumber()
	self.deader = is:popString()
	self.deaderKills = is:popNumber()
end

function i3k_sbean.nearby_forcewar_kill:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.killer)
	os:pushNumber(self.killerKills)
	os:pushString(self.deader)
	os:pushNumber(self.deaderKills)
end


-- 查询帮战队友位置信息(query_sectwar_members_pos的回应)
i3k_sbean.sectwar_members_position = i3k_class("sectwar_members_position")
function i3k_sbean.sectwar_members_position:ctor()
	self._pname_ = "sectwar_members_position"
	--self.members:		map[int32, Vector3]	
end

function i3k_sbean.sectwar_members_position:clone()
	return clone(self)
end

function i3k_sbean.sectwar_members_position:decode(is)
	is:popString()
	self.members = is:popNumberMap(i3k_sbean.Vector3)
end

function i3k_sbean.sectwar_members_position:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.members)
end


-- 帮战战报查询回应(query_sectwar_result的回应, winForceType -1:未结束 0:平局)
i3k_sbean.roles_sectwaroverview = i3k_class("roles_sectwaroverview")
function i3k_sbean.roles_sectwaroverview:ctor()
	self._pname_ = "roles_sectwaroverview"
	--self.white:		vector[SectWarOverview]	
	--self.black:		vector[SectWarOverview]	
	--self.whiteGroup:		SectFightGroupOverview	
	--self.blackGroup:		SectFightGroupOverview	
	--self.winForceType:		int32	
end

function i3k_sbean.roles_sectwaroverview:clone()
	return clone(self)
end

function i3k_sbean.roles_sectwaroverview:decode(is)
	is:popString()
	self.white = is:popList(i3k_sbean.SectWarOverview)
	self.black = is:popList(i3k_sbean.SectWarOverview)
	self.whiteGroup = is:pop(i3k_sbean.SectFightGroupOverview)
	self.blackGroup = is:pop(i3k_sbean.SectFightGroupOverview)
	self.winForceType = is:popNumber()
end

function i3k_sbean.roles_sectwaroverview:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.white)
	os:pushList(self.black)
	os:push(self.whiteGroup)
	os:push(self.blackGroup)
	os:pushNumber(self.winForceType)
end


-- 通知帮派战战斗阶段是否结束
i3k_sbean.role_sectwar_fightend = i3k_class("role_sectwar_fightend")
function i3k_sbean.role_sectwar_fightend:ctor()
	self._pname_ = "role_sectwar_fightend"
	--self.winForceType:		int32	
end

function i3k_sbean.role_sectwar_fightend:clone()
	return clone(self)
end

function i3k_sbean.role_sectwar_fightend:decode(is)
	is:popString()
	self.winForceType = is:popNumber()
end

function i3k_sbean.role_sectwar_fightend:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.winForceType)
end


-- 通知客户端强制切换PK模式
i3k_sbean.role_force_change_pk_state = i3k_class("role_force_change_pk_state")
function i3k_sbean.role_force_change_pk_state:ctor()
	self._pname_ = "role_force_change_pk_state"
	--self.pkState:		int32	
end

function i3k_sbean.role_force_change_pk_state:clone()
	return clone(self)
end

function i3k_sbean.role_force_change_pk_state:decode(is)
	is:popString()
	self.pkState = is:popNumber()
end

function i3k_sbean.role_force_change_pk_state:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pkState)
end


-- 帮战阵营积分更新
i3k_sbean.nearby_sectwar_campscore = i3k_class("nearby_sectwar_campscore")
function i3k_sbean.nearby_sectwar_campscore:ctor()
	self._pname_ = "nearby_sectwar_campscore"
	--self.whiteScore:		int32	
	--self.blackScore:		int32	
end

function i3k_sbean.nearby_sectwar_campscore:clone()
	return clone(self)
end

function i3k_sbean.nearby_sectwar_campscore:decode(is)
	is:popString()
	self.whiteScore = is:popNumber()
	self.blackScore = is:popNumber()
end

function i3k_sbean.nearby_sectwar_campscore:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.whiteScore)
	os:pushNumber(self.blackScore)
end


-- 帮战首杀
i3k_sbean.sectwar_first_blood = i3k_class("sectwar_first_blood")
function i3k_sbean.sectwar_first_blood:ctor()
	self._pname_ = "sectwar_first_blood"
	--self.killer:		string	
	--self.deader:		string	
end

function i3k_sbean.sectwar_first_blood:clone()
	return clone(self)
end

function i3k_sbean.sectwar_first_blood:decode(is)
	is:popString()
	self.killer = is:popString()
	self.deader = is:popString()
end

function i3k_sbean.sectwar_first_blood:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.killer)
	os:pushString(self.deader)
end


-- 帮战连杀、或者终结连杀
i3k_sbean.nearby_sectwar_kill = i3k_class("nearby_sectwar_kill")
function i3k_sbean.nearby_sectwar_kill:ctor()
	self._pname_ = "nearby_sectwar_kill"
	--self.killer:		string	
	--self.killerKills:		int32	
	--self.deader:		string	
	--self.deaderKills:		int32	
end

function i3k_sbean.nearby_sectwar_kill:clone()
	return clone(self)
end

function i3k_sbean.nearby_sectwar_kill:decode(is)
	is:popString()
	self.killer = is:popString()
	self.killerKills = is:popNumber()
	self.deader = is:popString()
	self.deaderKills = is:popNumber()
end

function i3k_sbean.nearby_sectwar_kill:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.killer)
	os:pushNumber(self.killerKills)
	os:pushString(self.deader)
	os:pushNumber(self.deaderKills)
end


-- 周围玩家改名
i3k_sbean.nearby_role_rename = i3k_class("nearby_role_rename")
function i3k_sbean.nearby_role_rename:ctor()
	self._pname_ = "nearby_role_rename"
	--self.rid:		int32	
	--self.newName:		string	
end

function i3k_sbean.nearby_role_rename:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_rename:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.newName = is:popString()
end

function i3k_sbean.nearby_role_rename:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushString(self.newName)
end


-- 周围玩家佣兵改名
i3k_sbean.nearby_pet_rename = i3k_class("nearby_pet_rename")
function i3k_sbean.nearby_pet_rename:ctor()
	self._pname_ = "nearby_pet_rename"
	--self.rid:		int32	
	--self.petId:		int32	
	--self.newName:		string	
end

function i3k_sbean.nearby_pet_rename:clone()
	return clone(self)
end

function i3k_sbean.nearby_pet_rename:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.petId = is:popNumber()
	self.newName = is:popString()
end

function i3k_sbean.nearby_pet_rename:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.petId)
	os:pushString(self.newName)
end


-- 同步多人坐骑信息
i3k_sbean.role_mulhorse = i3k_class("role_mulhorse")
function i3k_sbean.role_mulhorse:ctor()
	self._pname_ = "role_mulhorse"
	--self.leader:		RoleDetail	
	--self.members:		map[int32, RoleDetail]	
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
end

function i3k_sbean.role_mulhorse:clone()
	return clone(self)
end

function i3k_sbean.role_mulhorse:decode(is)
	is:popString()
	self.leader = is:pop(i3k_sbean.RoleDetail)
	self.members = is:popNumberMap(i3k_sbean.RoleDetail)
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
end

function i3k_sbean.role_mulhorse:encode(os)
	os:pushString(self._pname_)
	os:push(self.leader)
	os:pushNumberMap(self.members)
	os:push(self.position)
	os:push(self.rotation)
end


-- 离开多人坐骑
i3k_sbean.role_leave_mulhorse = i3k_class("role_leave_mulhorse")
function i3k_sbean.role_leave_mulhorse:ctor()
	self._pname_ = "role_leave_mulhorse"
	--self.position:		Vector3	
end

function i3k_sbean.role_leave_mulhorse:clone()
	return clone(self)
end

function i3k_sbean.role_leave_mulhorse:decode(is)
	is:popString()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.role_leave_mulhorse:encode(os)
	os:pushString(self._pname_)
	os:push(self.position)
end


-- 通知成员多人坐骑变化
i3k_sbean.role_update_mulhorse = i3k_class("role_update_mulhorse")
function i3k_sbean.role_update_mulhorse:ctor()
	self._pname_ = "role_update_mulhorse"
	--self.index:		int32	
	--self.member:		RoleDetail	
end

function i3k_sbean.role_update_mulhorse:clone()
	return clone(self)
end

function i3k_sbean.role_update_mulhorse:decode(is)
	is:popString()
	self.index = is:popNumber()
	self.member = is:pop(i3k_sbean.RoleDetail)
end

function i3k_sbean.role_update_mulhorse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
	os:push(self.member)
end


-- 广播周围玩家多人坐骑变化
i3k_sbean.nearby_update_mulhorse = i3k_class("nearby_update_mulhorse")
function i3k_sbean.nearby_update_mulhorse:ctor()
	self._pname_ = "nearby_update_mulhorse"
	--self.leaderID:		int32	
	--self.index:		int32	
	--self.member:		RoleDetail	
end

function i3k_sbean.nearby_update_mulhorse:clone()
	return clone(self)
end

function i3k_sbean.nearby_update_mulhorse:decode(is)
	is:popString()
	self.leaderID = is:popNumber()
	self.index = is:popNumber()
	self.member = is:pop(i3k_sbean.RoleDetail)
end

function i3k_sbean.nearby_update_mulhorse:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.leaderID)
	os:pushNumber(self.index)
	os:push(self.member)
end


-- 相依相偎
i3k_sbean.role_staywith = i3k_class("role_staywith")
function i3k_sbean.role_staywith:ctor()
	self._pname_ = "role_staywith"
	--self.leader:		RoleDetail	
	--self.member:		RoleDetail	
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
end

function i3k_sbean.role_staywith:clone()
	return clone(self)
end

function i3k_sbean.role_staywith:decode(is)
	is:popString()
	self.leader = is:pop(i3k_sbean.RoleDetail)
	self.member = is:pop(i3k_sbean.RoleDetail)
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
end

function i3k_sbean.role_staywith:encode(os)
	os:pushString(self._pname_)
	os:push(self.leader)
	os:push(self.member)
	os:push(self.position)
	os:push(self.rotation)
end


-- 解散相依相偎
i3k_sbean.role_dissolve_staywith = i3k_class("role_dissolve_staywith")
function i3k_sbean.role_dissolve_staywith:ctor()
	self._pname_ = "role_dissolve_staywith"
end

function i3k_sbean.role_dissolve_staywith:decode(is)
	is:popString()
end

function i3k_sbean.role_dissolve_staywith:encode(os)
	os:pushString(self._pname_)
end


-- 广播周围玩家相依相偎
i3k_sbean.nearby_role_staywith = i3k_class("nearby_role_staywith")
function i3k_sbean.nearby_role_staywith:ctor()
	self._pname_ = "nearby_role_staywith"
	--self.rid:		int32	
	--self.leader:		RoleDetail	
	--self.member:		RoleDetail	
end

function i3k_sbean.nearby_role_staywith:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_staywith:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.leader = is:pop(i3k_sbean.RoleDetail)
	self.member = is:pop(i3k_sbean.RoleDetail)
end

function i3k_sbean.nearby_role_staywith:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:push(self.leader)
	os:push(self.member)
end


-- 广播周围玩家解散相依相偎
i3k_sbean.nearby_dissolve_staywith = i3k_class("nearby_dissolve_staywith")
function i3k_sbean.nearby_dissolve_staywith:ctor()
	self._pname_ = "nearby_dissolve_staywith"
	--self.rid:		int32	
end

function i3k_sbean.nearby_dissolve_staywith:clone()
	return clone(self)
end

function i3k_sbean.nearby_dissolve_staywith:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.nearby_dissolve_staywith:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 广播周围玩家么么哒
i3k_sbean.nearby_role_memeda = i3k_class("nearby_role_memeda")
function i3k_sbean.nearby_role_memeda:ctor()
	self._pname_ = "nearby_role_memeda"
	--self.rid:		int32	
end

function i3k_sbean.nearby_role_memeda:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_memeda:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.nearby_role_memeda:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 温泉双人动作
i3k_sbean.role_doubleAct = i3k_class("role_doubleAct")
function i3k_sbean.role_doubleAct:ctor()
	self._pname_ = "role_doubleAct"
	--self.actType:		int32	
	--self.leader:		RoleDetail	
	--self.member:		RoleDetail	
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
end

function i3k_sbean.role_doubleAct:clone()
	return clone(self)
end

function i3k_sbean.role_doubleAct:decode(is)
	is:popString()
	self.actType = is:popNumber()
	self.leader = is:pop(i3k_sbean.RoleDetail)
	self.member = is:pop(i3k_sbean.RoleDetail)
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
end

function i3k_sbean.role_doubleAct:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.actType)
	os:push(self.leader)
	os:push(self.member)
	os:push(self.position)
	os:push(self.rotation)
end


-- 解散温泉双人动作
i3k_sbean.role_dissolve_doubleAct = i3k_class("role_dissolve_doubleAct")
function i3k_sbean.role_dissolve_doubleAct:ctor()
	self._pname_ = "role_dissolve_doubleAct"
end

function i3k_sbean.role_dissolve_doubleAct:decode(is)
	is:popString()
end

function i3k_sbean.role_dissolve_doubleAct:encode(os)
	os:pushString(self._pname_)
end


-- 广播周围玩家双人动作
i3k_sbean.nearby_role_doubleAct = i3k_class("nearby_role_doubleAct")
function i3k_sbean.nearby_role_doubleAct:ctor()
	self._pname_ = "nearby_role_doubleAct"
	--self.actType:		int32	
	--self.rid:		int32	
	--self.leader:		RoleDetail	
	--self.member:		RoleDetail	
end

function i3k_sbean.nearby_role_doubleAct:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_doubleAct:decode(is)
	is:popString()
	self.actType = is:popNumber()
	self.rid = is:popNumber()
	self.leader = is:pop(i3k_sbean.RoleDetail)
	self.member = is:pop(i3k_sbean.RoleDetail)
end

function i3k_sbean.nearby_role_doubleAct:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.actType)
	os:pushNumber(self.rid)
	os:push(self.leader)
	os:push(self.member)
end


-- 广播周围玩家解散双人动作
i3k_sbean.nearby_dissolve_doubleAct = i3k_class("nearby_dissolve_doubleAct")
function i3k_sbean.nearby_dissolve_doubleAct:ctor()
	self._pname_ = "nearby_dissolve_doubleAct"
	--self.rid:		int32	
end

function i3k_sbean.nearby_dissolve_doubleAct:clone()
	return clone(self)
end

function i3k_sbean.nearby_dissolve_doubleAct:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.nearby_dissolve_doubleAct:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 同步世界boss伤害排行
i3k_sbean.boss_damage_rank = i3k_class("boss_damage_rank")
function i3k_sbean.boss_damage_rank:ctor()
	self._pname_ = "boss_damage_rank"
	--self.bossID:		int32	
	--self.rank:		vector[DamageInfo]	
	--self.selfDamage:		int32	
end

function i3k_sbean.boss_damage_rank:clone()
	return clone(self)
end

function i3k_sbean.boss_damage_rank:decode(is)
	is:popString()
	self.bossID = is:popNumber()
	self.rank = is:popList(i3k_sbean.DamageInfo)
	self.selfDamage = is:popNumber()
end

function i3k_sbean.boss_damage_rank:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
	os:pushList(self.rank)
	os:pushNumber(self.selfDamage)
end


-- 关闭世界boss伤害界面
i3k_sbean.boss_damage_close = i3k_class("boss_damage_close")
function i3k_sbean.boss_damage_close:ctor()
	self._pname_ = "boss_damage_close"
	--self.bossID:		int32	
end

function i3k_sbean.boss_damage_close:clone()
	return clone(self)
end

function i3k_sbean.boss_damage_close:decode(is)
	is:popString()
	self.bossID = is:popNumber()
end

function i3k_sbean.boss_damage_close:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
end


-- 周围玩家内甲变化广播
i3k_sbean.nearby_role_updatearmor = i3k_class("nearby_role_updatearmor")
function i3k_sbean.nearby_role_updatearmor:ctor()
	self._pname_ = "nearby_role_updatearmor"
	--self.rid:		int32	
	--self.armor:		ArmorBrief	
end

function i3k_sbean.nearby_role_updatearmor:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updatearmor:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.armor = is:pop(i3k_sbean.ArmorBrief)
end

function i3k_sbean.nearby_role_updatearmor:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:push(self.armor)
end


-- 周围玩家家园装备变化广播
i3k_sbean.nearby_role_updatehomelandequip = i3k_class("nearby_role_updatehomelandequip")
function i3k_sbean.nearby_role_updatehomelandequip:ctor()
	self._pname_ = "nearby_role_updatehomelandequip"
	--self.rid:		int32	
	--self.homelandEquip:		map[int32, DBHomelandEquip]	
end

function i3k_sbean.nearby_role_updatehomelandequip:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updatehomelandequip:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.homelandEquip = is:popNumberMap(i3k_sbean.DBHomelandEquip)
end

function i3k_sbean.nearby_role_updatehomelandequip:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumberMap(self.homelandEquip)
end


-- 周围玩家开始钓鱼
i3k_sbean.nearby_role_startfish = i3k_class("nearby_role_startfish")
function i3k_sbean.nearby_role_startfish:ctor()
	self._pname_ = "nearby_role_startfish"
	--self.rid:		int32	
	--self.rotation:		Vector3F	
end

function i3k_sbean.nearby_role_startfish:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_startfish:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
end

function i3k_sbean.nearby_role_startfish:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:push(self.rotation)
end


-- 周围玩家结束钓鱼
i3k_sbean.nearby_role_endfish = i3k_class("nearby_role_endfish")
function i3k_sbean.nearby_role_endfish:ctor()
	self._pname_ = "nearby_role_endfish"
	--self.rid:		int32	
end

function i3k_sbean.nearby_role_endfish:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_endfish:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.nearby_role_endfish:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 周围玩家更新钓鱼状态
i3k_sbean.nearby_role_fishstatus = i3k_class("nearby_role_fishstatus")
function i3k_sbean.nearby_role_fishstatus:ctor()
	self._pname_ = "nearby_role_fishstatus"
	--self.rid:		int32	
	--self.status:		int32	
end

function i3k_sbean.nearby_role_fishstatus:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_fishstatus:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.status = is:popNumber()
end

function i3k_sbean.nearby_role_fishstatus:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.status)
end


-- 玩家内甲冻结状态更新
i3k_sbean.role_armorfreeze_update = i3k_class("role_armorfreeze_update")
function i3k_sbean.role_armorfreeze_update:ctor()
	self._pname_ = "role_armorfreeze_update"
	--self.freeze:		int32	
end

function i3k_sbean.role_armorfreeze_update:clone()
	return clone(self)
end

function i3k_sbean.role_armorfreeze_update:decode(is)
	is:popString()
	self.freeze = is:popNumber()
end

function i3k_sbean.role_armorfreeze_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.freeze)
end


-- 玩家内甲值变化
i3k_sbean.role_armorval_update = i3k_class("role_armorval_update")
function i3k_sbean.role_armorval_update:ctor()
	self._pname_ = "role_armorval_update"
	--self.armorVal:		int32	
end

function i3k_sbean.role_armorval_update:clone()
	return clone(self)
end

function i3k_sbean.role_armorval_update:decode(is)
	is:popString()
	self.armorVal = is:popNumber()
end

function i3k_sbean.role_armorval_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.armorVal)
end


-- 玩家内甲虚弱状态更新
i3k_sbean.role_armorweak_update = i3k_class("role_armorweak_update")
function i3k_sbean.role_armorweak_update:ctor()
	self._pname_ = "role_armorweak_update"
	--self.weak:		int32	
end

function i3k_sbean.role_armorweak_update:clone()
	return clone(self)
end

function i3k_sbean.role_armorweak_update:decode(is)
	is:popString()
	self.weak = is:popNumber()
end

function i3k_sbean.role_armorweak_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weak)
end


-- 广播周围玩家内甲虚弱状态更新
i3k_sbean.nearby_role_armorweak = i3k_class("nearby_role_armorweak")
function i3k_sbean.nearby_role_armorweak:ctor()
	self._pname_ = "nearby_role_armorweak"
	--self.rid:		int32	
	--self.weak:		int32	
end

function i3k_sbean.nearby_role_armorweak:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_armorweak:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.weak = is:popNumber()
end

function i3k_sbean.nearby_role_armorweak:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.weak)
end


-- 2v2竞技场每一小场结果（0：负  1：胜 2：平）
i3k_sbean.superarena_race_result = i3k_class("superarena_race_result")
function i3k_sbean.superarena_race_result:ctor()
	self._pname_ = "superarena_race_result"
	--self.result:		int32	
end

function i3k_sbean.superarena_race_result:clone()
	return clone(self)
end

function i3k_sbean.superarena_race_result:decode(is)
	is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.superarena_race_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.result)
end


-- 进入地图同步当前比分
i3k_sbean.superarena_race_results = i3k_class("superarena_race_results")
function i3k_sbean.superarena_race_results:ctor()
	self._pname_ = "superarena_race_results"
	--self.results:		vector[int32]	
end

function i3k_sbean.superarena_race_results:clone()
	return clone(self)
end

function i3k_sbean.superarena_race_results:decode(is)
	is:popString()
	self.results = is:popNumberList()
end

function i3k_sbean.superarena_race_results:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.results)
end


-- 神器乱斗进地图信息同步
i3k_sbean.superarena_weaponmap_info = i3k_class("superarena_weaponmap_info")
function i3k_sbean.superarena_weaponmap_info:ctor()
	self._pname_ = "superarena_weaponmap_info"
	--self.scores:		map[int32, int32]	
	--self.weaponInfo:		vector[WeaponChangeInfo]	
	--self.skillInfo:		map[int32, int32]	
end

function i3k_sbean.superarena_weaponmap_info:clone()
	return clone(self)
end

function i3k_sbean.superarena_weaponmap_info:decode(is)
	is:popString()
	self.scores = is:popNumberNumberMap()
	self.weaponInfo = is:popList(i3k_sbean.WeaponChangeInfo)
	self.skillInfo = is:popNumberNumberMap()
end

function i3k_sbean.superarena_weaponmap_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.scores)
	os:pushList(self.weaponInfo)
	os:pushNumberNumberMap(self.skillInfo)
end


-- 神器乱斗积分更新
i3k_sbean.superarena_weaponmap_updatescore = i3k_class("superarena_weaponmap_updatescore")
function i3k_sbean.superarena_weaponmap_updatescore:ctor()
	self._pname_ = "superarena_weaponmap_updatescore"
	--self.forceType:		int32	
	--self.score:		int32	
end

function i3k_sbean.superarena_weaponmap_updatescore:clone()
	return clone(self)
end

function i3k_sbean.superarena_weaponmap_updatescore:decode(is)
	is:popString()
	self.forceType = is:popNumber()
	self.score = is:popNumber()
end

function i3k_sbean.superarena_weaponmap_updatescore:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.forceType)
	os:pushNumber(self.score)
end


-- 神器乱斗神兵切换通知
i3k_sbean.superarena_weaponchangetimes = i3k_class("superarena_weaponchangetimes")
function i3k_sbean.superarena_weaponchangetimes:ctor()
	self._pname_ = "superarena_weaponchangetimes"
	--self.index:		int32	
end

function i3k_sbean.superarena_weaponchangetimes:clone()
	return clone(self)
end

function i3k_sbean.superarena_weaponchangetimes:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.superarena_weaponchangetimes:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 神器乱斗乱战技能使用通知
i3k_sbean.superarena_skillusetimes = i3k_class("superarena_skillusetimes")
function i3k_sbean.superarena_skillusetimes:ctor()
	self._pname_ = "superarena_skillusetimes"
	--self.skillID:		int32	
end

function i3k_sbean.superarena_skillusetimes:clone()
	return clone(self)
end

function i3k_sbean.superarena_skillusetimes:decode(is)
	is:popString()
	self.skillID = is:popNumber()
end

function i3k_sbean.superarena_skillusetimes:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
end


-- 战况同步
i3k_sbean.sect_group_map_sync_info = i3k_class("sect_group_map_sync_info")
function i3k_sbean.sect_group_map_sync_info:ctor()
	self._pname_ = "sect_group_map_sync_info"
	--self.killNum:		map[int32, int32]	
	--self.damageRank:		map[int32, RoleDamageDetail]	
end

function i3k_sbean.sect_group_map_sync_info:clone()
	return clone(self)
end

function i3k_sbean.sect_group_map_sync_info:decode(is)
	is:popString()
	self.killNum = is:popNumberNumberMap()
	self.damageRank = is:popNumberMap(i3k_sbean.RoleDamageDetail)
end

function i3k_sbean.sect_group_map_sync_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.killNum)
	os:pushNumberMap(self.damageRank)
end


-- 进入帮派本同步
i3k_sbean.enter_sect_group_map = i3k_class("enter_sect_group_map")
function i3k_sbean.enter_sect_group_map:ctor()
	self._pname_ = "enter_sect_group_map"
	--self.mapId:		int32	
	--self.killNum:		map[int32, int32]	
	--self.damageRank:		map[int32, RoleDamageDetail]	
end

function i3k_sbean.enter_sect_group_map:clone()
	return clone(self)
end

function i3k_sbean.enter_sect_group_map:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.killNum = is:popNumberNumberMap()
	self.damageRank = is:popNumberMap(i3k_sbean.RoleDamageDetail)
end

function i3k_sbean.enter_sect_group_map:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumberNumberMap(self.killNum)
	os:pushNumberMap(self.damageRank)
end


-- 双倍掉落冒字
i3k_sbean.role_double_drop = i3k_class("role_double_drop")
function i3k_sbean.role_double_drop:ctor()
	self._pname_ = "role_double_drop"
end

function i3k_sbean.role_double_drop:decode(is)
	is:popString()
end

function i3k_sbean.role_double_drop:encode(os)
	os:pushString(self._pname_)
end


-- 世界boss冒泡
i3k_sbean.world_boss_pop = i3k_class("world_boss_pop")
function i3k_sbean.world_boss_pop:ctor()
	self._pname_ = "world_boss_pop"
	--self.monsterID:		int32	
	--self.bossID:		int32	
	--self.index:		int32	
end

function i3k_sbean.world_boss_pop:clone()
	return clone(self)
end

function i3k_sbean.world_boss_pop:decode(is)
	is:popString()
	self.monsterID = is:popNumber()
	self.bossID = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.world_boss_pop:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.monsterID)
	os:pushNumber(self.bossID)
	os:pushNumber(self.index)
end


i3k_sbean.entity_nearby = i3k_class("entity_nearby")
function i3k_sbean.entity_nearby:ctor()
	self._pname_ = "entity_nearby"
	--self.id:		int32	
	--self.type:		int32	
	--self.near:		int32	
end

function i3k_sbean.entity_nearby:clone()
	return clone(self)
end

function i3k_sbean.entity_nearby:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.type = is:popNumber()
	self.near = is:popNumber()
end

function i3k_sbean.entity_nearby:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
	os:pushNumber(self.near)
end


-- 周围玩家传家宝更新
i3k_sbean.nearby_role_updateheirloom = i3k_class("nearby_role_updateheirloom")
function i3k_sbean.nearby_role_updateheirloom:ctor()
	self._pname_ = "nearby_role_updateheirloom"
	--self.rid:		int32	
	--self.heirloom:		HeirloomBrief	
end

function i3k_sbean.nearby_role_updateheirloom:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updateheirloom:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.heirloom = is:pop(i3k_sbean.HeirloomBrief)
end

function i3k_sbean.nearby_role_updateheirloom:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:push(self.heirloom)
end


-- 周围玩家休闲宠物更新
i3k_sbean.nearby_role_updatewizardpet = i3k_class("nearby_role_updatewizardpet")
function i3k_sbean.nearby_role_updatewizardpet:ctor()
	self._pname_ = "nearby_role_updatewizardpet"
	--self.rid:		int32	
	--self.petId:		int32	
end

function i3k_sbean.nearby_role_updatewizardpet:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_updatewizardpet:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.petId = is:popNumber()
end

function i3k_sbean.nearby_role_updatewizardpet:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.petId)
end


-- 正义之心目标信息
i3k_sbean.justice_map_target_info = i3k_class("justice_map_target_info")
function i3k_sbean.justice_map_target_info:ctor()
	self._pname_ = "justice_map_target_info"
	--self.targetIndex:		int32	
	--self.value:		int32	
end

function i3k_sbean.justice_map_target_info:clone()
	return clone(self)
end

function i3k_sbean.justice_map_target_info:decode(is)
	is:popString()
	self.targetIndex = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.justice_map_target_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.targetIndex)
	os:pushNumber(self.value)
end


-- 角色伤害排行
i3k_sbean.map_copy_damage_rank = i3k_class("map_copy_damage_rank")
function i3k_sbean.map_copy_damage_rank:ctor()
	self._pname_ = "map_copy_damage_rank"
	--self.damageRank:		map[int32, AttackDamageDetail]	
end

function i3k_sbean.map_copy_damage_rank:clone()
	return clone(self)
end

function i3k_sbean.map_copy_damage_rank:decode(is)
	is:popString()
	self.damageRank = is:popNumberMap(i3k_sbean.AttackDamageDetail)
end

function i3k_sbean.map_copy_damage_rank:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.damageRank)
end


i3k_sbean.receive_towerdefence_alarm = i3k_class("receive_towerdefence_alarm")
function i3k_sbean.receive_towerdefence_alarm:ctor()
	self._pname_ = "receive_towerdefence_alarm"
	--self.rid:		int32	
	--self.name:		string	
	--self.type:		int32	
end

function i3k_sbean.receive_towerdefence_alarm:clone()
	return clone(self)
end

function i3k_sbean.receive_towerdefence_alarm:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.name = is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.receive_towerdefence_alarm:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushString(self.name)
	os:pushNumber(self.type)
end


i3k_sbean.towerdefence_npc_pop = i3k_class("towerdefence_npc_pop")
function i3k_sbean.towerdefence_npc_pop:ctor()
	self._pname_ = "towerdefence_npc_pop"
	--self.mid:		int32	
	--self.percent:		int32	
end

function i3k_sbean.towerdefence_npc_pop:clone()
	return clone(self)
end

function i3k_sbean.towerdefence_npc_pop:decode(is)
	is:popString()
	self.mid = is:popNumber()
	self.percent = is:popNumber()
end

function i3k_sbean.towerdefence_npc_pop:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
	os:pushNumber(self.percent)
end


i3k_sbean.towerdefence_spawn_monsters = i3k_class("towerdefence_spawn_monsters")
function i3k_sbean.towerdefence_spawn_monsters:ctor()
	self._pname_ = "towerdefence_spawn_monsters"
	--self.count:		int32	
end

function i3k_sbean.towerdefence_spawn_monsters:clone()
	return clone(self)
end

function i3k_sbean.towerdefence_spawn_monsters:decode(is)
	is:popString()
	self.count = is:popNumber()
end

function i3k_sbean.towerdefence_spawn_monsters:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.count)
end


i3k_sbean.towerdefence_npc_info = i3k_class("towerdefence_npc_info")
function i3k_sbean.towerdefence_npc_info:ctor()
	self._pname_ = "towerdefence_npc_info"
	--self.curHP:		int32	
	--self.maxHP:		int32	
end

function i3k_sbean.towerdefence_npc_info:clone()
	return clone(self)
end

function i3k_sbean.towerdefence_npc_info:decode(is)
	is:popString()
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
end

function i3k_sbean.towerdefence_npc_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
end


-- 守护副本npc死亡
i3k_sbean.towerdefence_npc_dead = i3k_class("towerdefence_npc_dead")
function i3k_sbean.towerdefence_npc_dead:ctor()
	self._pname_ = "towerdefence_npc_dead"
end

function i3k_sbean.towerdefence_npc_dead:decode(is)
	is:popString()
end

function i3k_sbean.towerdefence_npc_dead:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.sync_role_forcetype = i3k_class("sync_role_forcetype")
function i3k_sbean.sync_role_forcetype:ctor()
	self._pname_ = "sync_role_forcetype"
	--self.forceType:		int32	
end

function i3k_sbean.sync_role_forcetype:clone()
	return clone(self)
end

function i3k_sbean.sync_role_forcetype:decode(is)
	is:popString()
	self.forceType = is:popNumber()
end

function i3k_sbean.sync_role_forcetype:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.forceType)
end


i3k_sbean.sync_role_mapskill = i3k_class("sync_role_mapskill")
function i3k_sbean.sync_role_mapskill:ctor()
	self._pname_ = "sync_role_mapskill"
	--self.skillInfo:		MapSkillData	
end

function i3k_sbean.sync_role_mapskill:clone()
	return clone(self)
end

function i3k_sbean.sync_role_mapskill:decode(is)
	is:popString()
	self.skillInfo = is:pop(i3k_sbean.MapSkillData)
end

function i3k_sbean.sync_role_mapskill:encode(os)
	os:pushString(self._pname_)
	os:push(self.skillInfo)
end


i3k_sbean.role_usemapskill_ok = i3k_class("role_usemapskill_ok")
function i3k_sbean.role_usemapskill_ok:ctor()
	self._pname_ = "role_usemapskill_ok"
	--self.skillId:		int32	
	--self.success:		int32	
end

function i3k_sbean.role_usemapskill_ok:clone()
	return clone(self)
end

function i3k_sbean.role_usemapskill_ok:decode(is)
	is:popString()
	self.skillId = is:popNumber()
	self.success = is:popNumber()
end

function i3k_sbean.role_usemapskill_ok:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillId)
	os:pushNumber(self.success)
end


i3k_sbean.demonhole_boss_state = i3k_class("demonhole_boss_state")
function i3k_sbean.demonhole_boss_state:ctor()
	self._pname_ = "demonhole_boss_state"
	--self.state:		int32	
end

function i3k_sbean.demonhole_boss_state:clone()
	return clone(self)
end

function i3k_sbean.demonhole_boss_state:decode(is)
	is:popString()
	self.state = is:popNumber()
end

function i3k_sbean.demonhole_boss_state:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.state)
end


-- 观战状态
i3k_sbean.role_guard = i3k_class("role_guard")
function i3k_sbean.role_guard:ctor()
	self._pname_ = "role_guard"
end

function i3k_sbean.role_guard:decode(is)
	is:popString()
end

function i3k_sbean.role_guard:encode(os)
	os:pushString(self._pname_)
end


-- 刷怪点数量
i3k_sbean.point_monster_num = i3k_class("point_monster_num")
function i3k_sbean.point_monster_num:ctor()
	self._pname_ = "point_monster_num"
	--self.monsters:		map[int32, int32]	
end

function i3k_sbean.point_monster_num:clone()
	return clone(self)
end

function i3k_sbean.point_monster_num:decode(is)
	is:popString()
	self.monsters = is:popNumberNumberMap()
end

function i3k_sbean.point_monster_num:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.monsters)
end


-- 旗帜占领状况
i3k_sbean.sectwar_flag_status = i3k_class("sectwar_flag_status")
function i3k_sbean.sectwar_flag_status:ctor()
	self._pname_ = "sectwar_flag_status"
	--self.status:		map[int32, int32]	
end

function i3k_sbean.sectwar_flag_status:clone()
	return clone(self)
end

function i3k_sbean.sectwar_flag_status:decode(is)
	is:popString()
	self.status = is:popNumberNumberMap()
end

function i3k_sbean.sectwar_flag_status:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.status)
end


-- 周围玩家变更武魂形象
i3k_sbean.nearby_weaponsoulshow_update = i3k_class("nearby_weaponsoulshow_update")
function i3k_sbean.nearby_weaponsoulshow_update:ctor()
	self._pname_ = "nearby_weaponsoulshow_update"
	--self.rid:		int32	
	--self.showID:		int32	
end

function i3k_sbean.nearby_weaponsoulshow_update:clone()
	return clone(self)
end

function i3k_sbean.nearby_weaponsoulshow_update:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.showID = is:popNumber()
end

function i3k_sbean.nearby_weaponsoulshow_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.showID)
end


i3k_sbean.nearby_petawake_update = i3k_class("nearby_petawake_update")
function i3k_sbean.nearby_petawake_update:ctor()
	self._pname_ = "nearby_petawake_update"
	--self.rid:		int32	
	--self.pid:		int32	
	--self.use:		int32	
end

function i3k_sbean.nearby_petawake_update:clone()
	return clone(self)
end

function i3k_sbean.nearby_petawake_update:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.pid = is:popNumber()
	self.use = is:popNumber()
end

function i3k_sbean.nearby_petawake_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.pid)
	os:pushNumber(self.use)
end


-- 观战同步信息
i3k_sbean.tournamentmap_guard = i3k_class("tournamentmap_guard")
function i3k_sbean.tournamentmap_guard:ctor()
	self._pname_ = "tournamentmap_guard"
	--self.team1Members:		vector[FightProfile]	
	--self.team2Members:		vector[FightProfile]	
	--self.team1Name:		string	
	--self.team2Name:		string	
end

function i3k_sbean.tournamentmap_guard:clone()
	return clone(self)
end

function i3k_sbean.tournamentmap_guard:decode(is)
	is:popString()
	self.team1Members = is:popList(i3k_sbean.FightProfile)
	self.team2Members = is:popList(i3k_sbean.FightProfile)
	self.team1Name = is:popString()
	self.team2Name = is:popString()
end

function i3k_sbean.tournamentmap_guard:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.team1Members)
	os:pushList(self.team2Members)
	os:pushString(self.team1Name)
	os:pushString(self.team2Name)
end


-- members(包括自己)
i3k_sbean.tournamentmap_info = i3k_class("tournamentmap_info")
function i3k_sbean.tournamentmap_info:ctor()
	self._pname_ = "tournamentmap_info"
	--self.members:		vector[FightProfile]	
end

function i3k_sbean.tournamentmap_info:clone()
	return clone(self)
end

function i3k_sbean.tournamentmap_info:decode(is)
	is:popString()
	self.members = is:popList(i3k_sbean.FightProfile)
end

function i3k_sbean.tournamentmap_info:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.members)
end


-- 更新队友生命数
i3k_sbean.tournamentmap_rolelives = i3k_class("tournamentmap_rolelives")
function i3k_sbean.tournamentmap_rolelives:ctor()
	self._pname_ = "tournamentmap_rolelives"
	--self.roleID:		int32	
	--self.lives:		int32	
end

function i3k_sbean.tournamentmap_rolelives:clone()
	return clone(self)
end

function i3k_sbean.tournamentmap_rolelives:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.lives = is:popNumber()
end

function i3k_sbean.tournamentmap_rolelives:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.lives)
end


-- 更新双方存活数
i3k_sbean.tournamentmap_teamlives = i3k_class("tournamentmap_teamlives")
function i3k_sbean.tournamentmap_teamlives:ctor()
	self._pname_ = "tournamentmap_teamlives"
	--self.self:		int32	
	--self.enemy:		int32	
end

function i3k_sbean.tournamentmap_teamlives:clone()
	return clone(self)
end

function i3k_sbean.tournamentmap_teamlives:decode(is)
	is:popString()
	self.self = is:popNumber()
	self.enemy = is:popNumber()
end

function i3k_sbean.tournamentmap_teamlives:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.self)
	os:pushNumber(self.enemy)
end


-- 更新自己武道荣誉
i3k_sbean.tournamentmap_honor = i3k_class("tournamentmap_honor")
function i3k_sbean.tournamentmap_honor:ctor()
	self._pname_ = "tournamentmap_honor"
	--self.honor:		int32	
end

function i3k_sbean.tournamentmap_honor:clone()
	return clone(self)
end

function i3k_sbean.tournamentmap_honor:decode(is)
	is:popString()
	self.honor = is:popNumber()
end

function i3k_sbean.tournamentmap_honor:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.honor)
end


-- 首杀
i3k_sbean.map_first_blood = i3k_class("map_first_blood")
function i3k_sbean.map_first_blood:ctor()
	self._pname_ = "map_first_blood"
	--self.killer:		string	
	--self.deader:		string	
end

function i3k_sbean.map_first_blood:clone()
	return clone(self)
end

function i3k_sbean.map_first_blood:decode(is)
	is:popString()
	self.killer = is:popString()
	self.deader = is:popString()
end

function i3k_sbean.map_first_blood:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.killer)
	os:pushString(self.deader)
end


-- 查询队友位置信息(query_mapcopy_members_pos的回应)
i3k_sbean.mapcopy_members_position = i3k_class("mapcopy_members_position")
function i3k_sbean.mapcopy_members_position:ctor()
	self._pname_ = "mapcopy_members_position"
	--self.members:		map[int32, Vector3]	
end

function i3k_sbean.mapcopy_members_position:clone()
	return clone(self)
end

function i3k_sbean.mapcopy_members_position:decode(is)
	is:popString()
	self.members = is:popNumberMap(i3k_sbean.Vector3)
end

function i3k_sbean.mapcopy_members_position:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.members)
end


i3k_sbean.globalpve_bosses_info = i3k_class("globalpve_bosses_info")
function i3k_sbean.globalpve_bosses_info:ctor()
	self._pname_ = "globalpve_bosses_info"
	--self.alive:		map[int32, int32]	
	--self.dead:		map[int32, int32]	
end

function i3k_sbean.globalpve_bosses_info:clone()
	return clone(self)
end

function i3k_sbean.globalpve_bosses_info:decode(is)
	is:popString()
	self.alive = is:popNumberNumberMap()
	self.dead = is:popNumberNumberMap()
end

function i3k_sbean.globalpve_bosses_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.alive)
	os:pushNumberNumberMap(self.dead)
end


i3k_sbean.globalpve_boss_dead = i3k_class("globalpve_boss_dead")
function i3k_sbean.globalpve_boss_dead:ctor()
	self._pname_ = "globalpve_boss_dead"
	--self.bossID:		int32	
	--self.lastCheckTime:		int32	
end

function i3k_sbean.globalpve_boss_dead:clone()
	return clone(self)
end

function i3k_sbean.globalpve_boss_dead:decode(is)
	is:popString()
	self.bossID = is:popNumber()
	self.lastCheckTime = is:popNumber()
end

function i3k_sbean.globalpve_boss_dead:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
	os:pushNumber(self.lastCheckTime)
end


-- query_globalpve_boss_rankd的异步回应
i3k_sbean.globalpve_boss_rank = i3k_class("globalpve_boss_rank")
function i3k_sbean.globalpve_boss_rank:ctor()
	self._pname_ = "globalpve_boss_rank"
	--self.rank:		vector[GlobalPveDamage]	
	--self.selfDamage:		int32	
end

function i3k_sbean.globalpve_boss_rank:clone()
	return clone(self)
end

function i3k_sbean.globalpve_boss_rank:decode(is)
	is:popString()
	self.rank = is:popList(i3k_sbean.GlobalPveDamage)
	self.selfDamage = is:popNumber()
end

function i3k_sbean.globalpve_boss_rank:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.rank)
	os:pushNumber(self.selfDamage)
end


i3k_sbean.globalpve_superboss_create = i3k_class("globalpve_superboss_create")
function i3k_sbean.globalpve_superboss_create:ctor()
	self._pname_ = "globalpve_superboss_create"
	--self.sectID:		int32	
	--self.sectName:		string	
end

function i3k_sbean.globalpve_superboss_create:clone()
	return clone(self)
end

function i3k_sbean.globalpve_superboss_create:decode(is)
	is:popString()
	self.sectID = is:popNumber()
	self.sectName = is:popString()
end

function i3k_sbean.globalpve_superboss_create:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectID)
	os:pushString(self.sectName)
end


i3k_sbean.globalpve_superboss_dead = i3k_class("globalpve_superboss_dead")
function i3k_sbean.globalpve_superboss_dead:ctor()
	self._pname_ = "globalpve_superboss_dead"
	--self.sectID:		int32	
	--self.sectName:		string	
	--self.alter:		int32	
end

function i3k_sbean.globalpve_superboss_dead:clone()
	return clone(self)
end

function i3k_sbean.globalpve_superboss_dead:decode(is)
	is:popString()
	self.sectID = is:popNumber()
	self.sectName = is:popString()
	self.alter = is:popNumber()
end

function i3k_sbean.globalpve_superboss_dead:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectID)
	os:pushString(self.sectName)
	os:pushNumber(self.alter)
end


i3k_sbean.globalpve_shareboss_damage = i3k_class("globalpve_shareboss_damage")
function i3k_sbean.globalpve_shareboss_damage:ctor()
	self._pname_ = "globalpve_shareboss_damage"
	--self.mid:		int32	
	--self.totalDamage:		int32	
end

function i3k_sbean.globalpve_shareboss_damage:clone()
	return clone(self)
end

function i3k_sbean.globalpve_shareboss_damage:decode(is)
	is:popString()
	self.mid = is:popNumber()
	self.totalDamage = is:popNumber()
end

function i3k_sbean.globalpve_shareboss_damage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
	os:pushNumber(self.totalDamage)
end


-- 进城战地图同步信息(reviveTime 毫秒的时间戳)
i3k_sbean.citywar_map_info = i3k_class("citywar_map_info")
function i3k_sbean.citywar_map_info:ctor()
	self._pname_ = "citywar_map_info"
	--self.killMonsters:		map[int32, int32]	
	--self.totalMonsters:		map[int32, int32]	
	--self.score:		int32	
	--self.reviveTime:		int64	
end

function i3k_sbean.citywar_map_info:clone()
	return clone(self)
end

function i3k_sbean.citywar_map_info:decode(is)
	is:popString()
	self.killMonsters = is:popNumberNumberMap()
	self.totalMonsters = is:popNumberNumberMap()
	self.score = is:popNumber()
	self.reviveTime = is:popNumber()
end

function i3k_sbean.citywar_map_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.killMonsters)
	os:pushNumberNumberMap(self.totalMonsters)
	os:pushNumber(self.score)
	os:pushNumber(self.reviveTime)
end


-- 城战击杀信息更新
i3k_sbean.citywar_update_kill = i3k_class("citywar_update_kill")
function i3k_sbean.citywar_update_kill:ctor()
	self._pname_ = "citywar_update_kill"
	--self.monsterType:		int32	
	--self.killCount:		int32	
end

function i3k_sbean.citywar_update_kill:clone()
	return clone(self)
end

function i3k_sbean.citywar_update_kill:decode(is)
	is:popString()
	self.monsterType = is:popNumber()
	self.killCount = is:popNumber()
end

function i3k_sbean.citywar_update_kill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.monsterType)
	os:pushNumber(self.killCount)
end


-- 城战复活点旗子信息更新
i3k_sbean.citywar_update_reviveflag = i3k_class("citywar_update_reviveflag")
function i3k_sbean.citywar_update_reviveflag:ctor()
	self._pname_ = "citywar_update_reviveflag"
	--self.id:		int32	
	--self.ownType:		int32	
end

function i3k_sbean.citywar_update_reviveflag:clone()
	return clone(self)
end

function i3k_sbean.citywar_update_reviveflag:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.ownType = is:popNumber()
end

function i3k_sbean.citywar_update_reviveflag:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.ownType)
end


-- 城战积分更新
i3k_sbean.citywar_update_score = i3k_class("citywar_update_score")
function i3k_sbean.citywar_update_score:ctor()
	self._pname_ = "citywar_update_score"
	--self.score:		int32	
end

function i3k_sbean.citywar_update_score:clone()
	return clone(self)
end

function i3k_sbean.citywar_update_score:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.citywar_update_score:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 城战小地图信息(citywar_entities_query的异步回应)
i3k_sbean.citywar_entities_info = i3k_class("citywar_entities_info")
function i3k_sbean.citywar_entities_info:ctor()
	self._pname_ = "citywar_entities_info"
	--self.reviveFlag:		vector[ForceTypeInfo]	
	--self.arrayTower:		vector[ForceTypeInfo]	
end

function i3k_sbean.citywar_entities_info:clone()
	return clone(self)
end

function i3k_sbean.citywar_entities_info:decode(is)
	is:popString()
	self.reviveFlag = is:popList(i3k_sbean.ForceTypeInfo)
	self.arrayTower = is:popList(i3k_sbean.ForceTypeInfo)
end

function i3k_sbean.citywar_entities_info:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.reviveFlag)
	os:pushList(self.arrayTower)
end


-- 城战修复箭塔
i3k_sbean.citywar_arrowtower_fix = i3k_class("citywar_arrowtower_fix")
function i3k_sbean.citywar_arrowtower_fix:ctor()
	self._pname_ = "citywar_arrowtower_fix"
	--self.errorCode:		int32	
end

function i3k_sbean.citywar_arrowtower_fix:clone()
	return clone(self)
end

function i3k_sbean.citywar_arrowtower_fix:decode(is)
	is:popString()
	self.errorCode = is:popNumber()
end

function i3k_sbean.citywar_arrowtower_fix:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.errorCode)
end


-- 城战传送
i3k_sbean.citywar_teleport = i3k_class("citywar_teleport")
function i3k_sbean.citywar_teleport:ctor()
	self._pname_ = "citywar_teleport"
	--self.teleportID:		int32	
	--self.errorCode:		int32	
end

function i3k_sbean.citywar_teleport:clone()
	return clone(self)
end

function i3k_sbean.citywar_teleport:decode(is)
	is:popString()
	self.teleportID = is:popNumber()
	self.errorCode = is:popNumber()
end

function i3k_sbean.citywar_teleport:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.teleportID)
	os:pushNumber(self.errorCode)
end


-- 城战大将军信息同步
i3k_sbean.citywar_boss_state = i3k_class("citywar_boss_state")
function i3k_sbean.citywar_boss_state:ctor()
	self._pname_ = "citywar_boss_state"
	--self.curHP:		int32	
	--self.maxHP:		int32	
end

function i3k_sbean.citywar_boss_state:clone()
	return clone(self)
end

function i3k_sbean.citywar_boss_state:decode(is)
	is:popString()
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
end

function i3k_sbean.citywar_boss_state:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
end


-- 同步周围玩家怪物点击次数状态
i3k_sbean.sync_monster_click_num = i3k_class("sync_monster_click_num")
function i3k_sbean.sync_monster_click_num:ctor()
	self._pname_ = "sync_monster_click_num"
	--self.mid:		int32	
	--self.clickNum:		int32	
end

function i3k_sbean.sync_monster_click_num:clone()
	return clone(self)
end

function i3k_sbean.sync_monster_click_num:decode(is)
	is:popString()
	self.mid = is:popNumber()
	self.clickNum = is:popNumber()
end

function i3k_sbean.sync_monster_click_num:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
	os:pushNumber(self.clickNum)
end


-- 活动副本通知客户端播放动画
i3k_sbean.broadcast_animation_activity_copy = i3k_class("broadcast_animation_activity_copy")
function i3k_sbean.broadcast_animation_activity_copy:ctor()
	self._pname_ = "broadcast_animation_activity_copy"
	--self.animationID:		int32	
end

function i3k_sbean.broadcast_animation_activity_copy:clone()
	return clone(self)
end

function i3k_sbean.broadcast_animation_activity_copy:decode(is)
	is:popString()
	self.animationID = is:popNumber()
end

function i3k_sbean.broadcast_animation_activity_copy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.animationID)
end


-- 幻境副本 通知客户端刷新过的BOSS
i3k_sbean.illusory_map_sync_refreshed_bossIDs = i3k_class("illusory_map_sync_refreshed_bossIDs")
function i3k_sbean.illusory_map_sync_refreshed_bossIDs:ctor()
	self._pname_ = "illusory_map_sync_refreshed_bossIDs"
	--self.curBossID:		int32	
	--self.bossIDs:		vector[int32]	
	--self.deadBossIDs:		vector[int32]	
end

function i3k_sbean.illusory_map_sync_refreshed_bossIDs:clone()
	return clone(self)
end

function i3k_sbean.illusory_map_sync_refreshed_bossIDs:decode(is)
	is:popString()
	self.curBossID = is:popNumber()
	self.bossIDs = is:popNumberList()
	self.deadBossIDs = is:popNumberList()
end

function i3k_sbean.illusory_map_sync_refreshed_bossIDs:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curBossID)
	os:pushNumberList(self.bossIDs)
	os:pushNumberList(self.deadBossIDs)
end


-- 驻地精灵 同步找到精灵的数量
i3k_sbean.sect_zone_spirit_find_count = i3k_class("sect_zone_spirit_find_count")
function i3k_sbean.sect_zone_spirit_find_count:ctor()
	self._pname_ = "sect_zone_spirit_find_count"
	--self.sectFind:		int32	
	--self.selfFind:		int32	
end

function i3k_sbean.sect_zone_spirit_find_count:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_spirit_find_count:decode(is)
	is:popString()
	self.sectFind = is:popNumber()
	self.selfFind = is:popNumber()
end

function i3k_sbean.sect_zone_spirit_find_count:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectFind)
	os:pushNumber(self.selfFind)
end


-- 会武楚汉之争同步兵种
i3k_sbean.role_sachess_arm = i3k_class("role_sachess_arm")
function i3k_sbean.role_sachess_arm:ctor()
	self._pname_ = "role_sachess_arm"
	--self.arm:		int32	
end

function i3k_sbean.role_sachess_arm:clone()
	return clone(self)
end

function i3k_sbean.role_sachess_arm:decode(is)
	is:popString()
	self.arm = is:popNumber()
end

function i3k_sbean.role_sachess_arm:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.arm)
end


-- 楚汉之争同步地图所有兵种信息
i3k_sbean.sync_superarena_chessarm_info = i3k_class("sync_superarena_chessarm_info")
function i3k_sbean.sync_superarena_chessarm_info:ctor()
	self._pname_ = "sync_superarena_chessarm_info"
	--self.armInfos:		map[int32, SuperArenaChessArmInfo]	
end

function i3k_sbean.sync_superarena_chessarm_info:clone()
	return clone(self)
end

function i3k_sbean.sync_superarena_chessarm_info:decode(is)
	is:popString()
	self.armInfos = is:popNumberMap(i3k_sbean.SuperArenaChessArmInfo)
end

function i3k_sbean.sync_superarena_chessarm_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.armInfos)
end


-- 最近获得同步
i3k_sbean.item_history_sync_res = i3k_class("item_history_sync_res")
function i3k_sbean.item_history_sync_res:ctor()
	self._pname_ = "item_history_sync_res"
	--self.history:		vector[DBItemHistory]	
end

function i3k_sbean.item_history_sync_res:clone()
	return clone(self)
end

function i3k_sbean.item_history_sync_res:decode(is)
	is:popString()
	self.history = is:popList(i3k_sbean.DBItemHistory)
end

function i3k_sbean.item_history_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.history)
end


-- 会武周奖励同步
i3k_sbean.super_arena_week_reward_sync_res = i3k_class("super_arena_week_reward_sync_res")
function i3k_sbean.super_arena_week_reward_sync_res:ctor()
	self._pname_ = "super_arena_week_reward_sync_res"
	--self.info:		DBRoleSuperArenaWeekReward	
end

function i3k_sbean.super_arena_week_reward_sync_res:clone()
	return clone(self)
end

function i3k_sbean.super_arena_week_reward_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleSuperArenaWeekReward)
end

function i3k_sbean.super_arena_week_reward_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 会武周奖励领取
i3k_sbean.super_arena_week_reward_take_res = i3k_class("super_arena_week_reward_take_res")
function i3k_sbean.super_arena_week_reward_take_res:ctor()
	self._pname_ = "super_arena_week_reward_take_res"
	--self.ok:		int32	
end

function i3k_sbean.super_arena_week_reward_take_res:clone()
	return clone(self)
end

function i3k_sbean.super_arena_week_reward_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.super_arena_week_reward_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步今日兽灵地图组
i3k_sbean.day_hunter_map_group_sync_res = i3k_class("day_hunter_map_group_sync_res")
function i3k_sbean.day_hunter_map_group_sync_res:ctor()
	self._pname_ = "day_hunter_map_group_sync_res"
	--self.group:		int32	
end

function i3k_sbean.day_hunter_map_group_sync_res:clone()
	return clone(self)
end

function i3k_sbean.day_hunter_map_group_sync_res:decode(is)
	is:popString()
	self.group = is:popNumber()
end

function i3k_sbean.day_hunter_map_group_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.group)
end


-- 添加副本技能
i3k_sbean.sync_role_map_skill_info = i3k_class("sync_role_map_skill_info")
function i3k_sbean.sync_role_map_skill_info:ctor()
	self._pname_ = "sync_role_map_skill_info"
	--self.info:		MapSkillData	
end

function i3k_sbean.sync_role_map_skill_info:clone()
	return clone(self)
end

function i3k_sbean.sync_role_map_skill_info:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.MapSkillData)
end

function i3k_sbean.sync_role_map_skill_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 同步帮派合照角色信息
i3k_sbean.sect_photo_roles_sync_res = i3k_class("sect_photo_roles_sync_res")
function i3k_sbean.sect_photo_roles_sync_res:ctor()
	self._pname_ = "sect_photo_roles_sync_res"
	--self.roles:		map[int32, RoleFeature]	
end

function i3k_sbean.sect_photo_roles_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sect_photo_roles_sync_res:decode(is)
	is:popString()
	self.roles = is:popNumberMap(i3k_sbean.RoleFeature)
end

function i3k_sbean.sect_photo_roles_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.roles)
end


-- 进入地图同步经验果树等级
i3k_sbean.exp_tree_enter_sync = i3k_class("exp_tree_enter_sync")
function i3k_sbean.exp_tree_enter_sync:ctor()
	self._pname_ = "exp_tree_enter_sync"
	--self.level:		int32	
end

function i3k_sbean.exp_tree_enter_sync:clone()
	return clone(self)
end

function i3k_sbean.exp_tree_enter_sync:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.exp_tree_enter_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 通知周围玩家改变战斗姿态
i3k_sbean.nearby_role_change_combat_type = i3k_class("nearby_role_change_combat_type")
function i3k_sbean.nearby_role_change_combat_type:ctor()
	self._pname_ = "nearby_role_change_combat_type"
	--self.rid:		int32	
	--self.combatType:		int32	
end

function i3k_sbean.nearby_role_change_combat_type:clone()
	return clone(self)
end

function i3k_sbean.nearby_role_change_combat_type:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.combatType = is:popNumber()
end

function i3k_sbean.nearby_role_change_combat_type:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.combatType)
end


-- åæ­¥å¸å¾ç³»ç»åºæ¬ä¿¡æ¯(ææ¶ä½åº)
i3k_sbean.master_brief_sync = i3k_class("master_brief_sync")
function i3k_sbean.master_brief_sync:ctor()
	self._pname_ = "master_brief_sync"
	--self.masterRoleID:		int32	
	--self.masterRoleName:		string	
	--self.apprenticeCount:		int32	
	--self.graduated:		bool	
	--self.point:		int32	
	--self.reputation:		int32	
end

function i3k_sbean.master_brief_sync:clone()
	return clone(self)
end

function i3k_sbean.master_brief_sync:decode(is)
	is:popString()
	self.masterRoleID = is:popNumber()
	self.masterRoleName = is:popString()
	self.apprenticeCount = is:popNumber()
	self.graduated = is:popBool()
	self.point = is:popNumber()
	self.reputation = is:popNumber()
end

function i3k_sbean.master_brief_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.masterRoleID)
	os:pushString(self.masterRoleName)
	os:pushNumber(self.apprenticeCount)
	os:pushBool(self.graduated)
	os:pushNumber(self.point)
	os:pushNumber(self.reputation)
end


-- æå¸ç³è¯·éç¥
i3k_sbean.master_apply_notice = i3k_class("master_apply_notice")
function i3k_sbean.master_apply_notice:ctor()
	self._pname_ = "master_apply_notice"
	--self.apprentice:		ApprenticeDetail	
end

function i3k_sbean.master_apply_notice:clone()
	return clone(self)
end

function i3k_sbean.master_apply_notice:decode(is)
	is:popString()
	self.apprentice = is:pop(i3k_sbean.ApprenticeDetail)
end

function i3k_sbean.master_apply_notice:encode(os)
	os:pushString(self._pname_)
	os:push(self.apprentice)
end


-- é¢å¯¹é¢æ¶å¾ç³è¯·éç¥
i3k_sbean.master_offer_notice = i3k_class("master_offer_notice")
function i3k_sbean.master_offer_notice:ctor()
	self._pname_ = "master_offer_notice"
	--self.master:		MasterDetail	
end

function i3k_sbean.master_offer_notice:clone()
	return clone(self)
end

function i3k_sbean.master_offer_notice:decode(is)
	is:popString()
	self.master = is:pop(i3k_sbean.MasterDetail)
end

function i3k_sbean.master_offer_notice:encode(os)
	os:pushString(self._pname_)
	os:push(self.master)
end


-- æå¸ç³è¯·è¢«å¤çéç¥
i3k_sbean.master_accept_apply_notice = i3k_class("master_accept_apply_notice")
function i3k_sbean.master_accept_apply_notice:ctor()
	self._pname_ = "master_accept_apply_notice"
	--self.masterID:		int32	
	--self.masterName:		string	
	--self.accept:		bool	
end

function i3k_sbean.master_accept_apply_notice:clone()
	return clone(self)
end

function i3k_sbean.master_accept_apply_notice:decode(is)
	is:popString()
	self.masterID = is:popNumber()
	self.masterName = is:popString()
	self.accept = is:popBool()
end

function i3k_sbean.master_accept_apply_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.masterID)
	os:pushString(self.masterName)
	os:pushBool(self.accept)
end


-- æ¶å¾ç³è¯·éè¿éç¥
i3k_sbean.master_accept_offer_notice = i3k_class("master_accept_offer_notice")
function i3k_sbean.master_accept_offer_notice:ctor()
	self._pname_ = "master_accept_offer_notice"
	--self.appID:		int32	
	--self.appName:		string	
end

function i3k_sbean.master_accept_offer_notice:clone()
	return clone(self)
end

function i3k_sbean.master_accept_offer_notice:decode(is)
	is:popString()
	self.appID = is:popNumber()
	self.appName = is:popString()
end

function i3k_sbean.master_accept_offer_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.appID)
	os:pushString(self.appName)
end


-- æå¸ç³è¯·ååº
i3k_sbean.master_apply_res = i3k_class("master_apply_res")
function i3k_sbean.master_apply_res:ctor()
	self._pname_ = "master_apply_res"
	--self.retCode:		int32	
	--self.targetRoleID:		int32	
end

function i3k_sbean.master_apply_res:clone()
	return clone(self)
end

function i3k_sbean.master_apply_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.targetRoleID = is:popNumber()
end

function i3k_sbean.master_apply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushNumber(self.targetRoleID)
end


-- æ¥åå½é¢æ¶å¾ç³è¯·ååº
i3k_sbean.master_accept_offer_res = i3k_class("master_accept_offer_res")
function i3k_sbean.master_accept_offer_res:ctor()
	self._pname_ = "master_accept_offer_res"
	--self.retCode:		int32	
	--self.targetRoleID:		int32	
end

function i3k_sbean.master_accept_offer_res:clone()
	return clone(self)
end

function i3k_sbean.master_accept_offer_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.targetRoleID = is:popNumber()
end

function i3k_sbean.master_accept_offer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushNumber(self.targetRoleID)
end


-- å½é¢æ¶å¾ç³è¯·ååº
i3k_sbean.master_offer_res = i3k_class("master_offer_res")
function i3k_sbean.master_offer_res:ctor()
	self._pname_ = "master_offer_res"
	--self.retCode:		int32	
	--self.targetRoleID:		int32	
end

function i3k_sbean.master_offer_res:clone()
	return clone(self)
end

function i3k_sbean.master_offer_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.targetRoleID = is:popNumber()
end

function i3k_sbean.master_offer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushNumber(self.targetRoleID)
end


-- æ¥åæå¸ç³è¯·ååº
i3k_sbean.master_accept_apply_res = i3k_class("master_accept_apply_res")
function i3k_sbean.master_accept_apply_res:ctor()
	self._pname_ = "master_accept_apply_res"
	--self.retCode:		int32	
	--self.targetRoleID:		int32	
	--self.accept:		bool	
end

function i3k_sbean.master_accept_apply_res:clone()
	return clone(self)
end

function i3k_sbean.master_accept_apply_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.targetRoleID = is:popNumber()
	self.accept = is:popBool()
end

function i3k_sbean.master_accept_apply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushNumber(self.targetRoleID)
	os:pushBool(self.accept)
end


-- åå¸ååº
i3k_sbean.master_betray_res = i3k_class("master_betray_res")
function i3k_sbean.master_betray_res:ctor()
	self._pname_ = "master_betray_res"
	--self.retCode:		int32	
end

function i3k_sbean.master_betray_res:clone()
	return clone(self)
end

function i3k_sbean.master_betray_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
end

function i3k_sbean.master_betray_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
end


-- åºå¸ååº
i3k_sbean.master_graduate_res = i3k_class("master_graduate_res")
function i3k_sbean.master_graduate_res:ctor()
	self._pname_ = "master_graduate_res"
	--self.retCode:		int32	
end

function i3k_sbean.master_graduate_res:clone()
	return clone(self)
end

function i3k_sbean.master_graduate_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
end

function i3k_sbean.master_graduate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
end


-- åæåºå¸ç³è¯·ååº
i3k_sbean.master_agree_graduate_res = i3k_class("master_agree_graduate_res")
function i3k_sbean.master_agree_graduate_res:ctor()
	self._pname_ = "master_agree_graduate_res"
	--self.retCode:		int32	
	--self.targetRoleID:		int32	
	--self.agree:		bool	
end

function i3k_sbean.master_agree_graduate_res:clone()
	return clone(self)
end

function i3k_sbean.master_agree_graduate_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.targetRoleID = is:popNumber()
	self.agree = is:popBool()
end

function i3k_sbean.master_agree_graduate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushNumber(self.targetRoleID)
	os:pushBool(self.agree)
end


-- å¼é¤ååº
i3k_sbean.master_dismiss_res = i3k_class("master_dismiss_res")
function i3k_sbean.master_dismiss_res:ctor()
	self._pname_ = "master_dismiss_res"
	--self.retCode:		int32	
	--self.targetRoleID:		int32	
end

function i3k_sbean.master_dismiss_res:clone()
	return clone(self)
end

function i3k_sbean.master_dismiss_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.targetRoleID = is:popNumber()
end

function i3k_sbean.master_dismiss_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushNumber(self.targetRoleID)
end


-- æ¥è¯¢èªå·±çæ¶å¾å®£è¨ååº
i3k_sbean.master_get_announce_res = i3k_class("master_get_announce_res")
function i3k_sbean.master_get_announce_res:ctor()
	self._pname_ = "master_get_announce_res"
	--self.retCode:		int32	
	--self.content:		string	
end

function i3k_sbean.master_get_announce_res:clone()
	return clone(self)
end

function i3k_sbean.master_get_announce_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.content = is:popString()
end

function i3k_sbean.master_get_announce_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushString(self.content)
end


-- è®¾ç½®èªå·±çæ¶å¾å®£è¨ååº
i3k_sbean.master_set_announce_res = i3k_class("master_set_announce_res")
function i3k_sbean.master_set_announce_res:ctor()
	self._pname_ = "master_set_announce_res"
	--self.retCode:		int32	
	--self.content:		string	
end

function i3k_sbean.master_set_announce_res:clone()
	return clone(self)
end

function i3k_sbean.master_set_announce_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.content = is:popString()
end

function i3k_sbean.master_set_announce_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushString(self.content)
end


-- å é¤èªå·±çæ¶å¾å®£è¨ååº
i3k_sbean.master_del_announce_res = i3k_class("master_del_announce_res")
function i3k_sbean.master_del_announce_res:ctor()
	self._pname_ = "master_del_announce_res"
	--self.retCode:		int32	
end

function i3k_sbean.master_del_announce_res:clone()
	return clone(self)
end

function i3k_sbean.master_del_announce_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
end

function i3k_sbean.master_del_announce_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
end


-- åºæ¬ä¿¡æ¯éç¥
i3k_sbean.master_brief_info_notice = i3k_class("master_brief_info_notice")
function i3k_sbean.master_brief_info_notice:ctor()
	self._pname_ = "master_brief_info_notice"
	--self.master:		int32	
	--self.apprentices:		vector[int32]	
	--self.lastDismissTime:		int32	
	--self.lastBetrayTime:		int32	
end

function i3k_sbean.master_brief_info_notice:clone()
	return clone(self)
end

function i3k_sbean.master_brief_info_notice:decode(is)
	is:popString()
	self.master = is:popNumber()
	self.apprentices = is:popNumberList()
	self.lastDismissTime = is:popNumber()
	self.lastBetrayTime = is:popNumber()
end

function i3k_sbean.master_brief_info_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.master)
	os:pushNumberList(self.apprentices)
	os:pushNumber(self.lastDismissTime)
	os:pushNumber(self.lastBetrayTime)
end


-- è¯·æ±åºæ¬ä¿¡æ¯ååº
i3k_sbean.master_info_res = i3k_class("master_info_res")
function i3k_sbean.master_info_res:ctor()
	self._pname_ = "master_info_res"
	--self.retCode:		int32	
	--self.masterRoleID:		int32	
	--self.apprenticeCount:		int32	
	--self.point:		int32	
	--self.reputation:		int32	
	--self.lastDismissTime:		int32	
	--self.lastBetrayTime:		int32	
	--self.lastReqGraduateTime:		int32	
	--self.members:		vector[MasterMember]	
	--self.masterAnnounce:		string	
end

function i3k_sbean.master_info_res:clone()
	return clone(self)
end

function i3k_sbean.master_info_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.masterRoleID = is:popNumber()
	self.apprenticeCount = is:popNumber()
	self.point = is:popNumber()
	self.reputation = is:popNumber()
	self.lastDismissTime = is:popNumber()
	self.lastBetrayTime = is:popNumber()
	self.lastReqGraduateTime = is:popNumber()
	self.members = is:popList(i3k_sbean.MasterMember)
	self.masterAnnounce = is:popString()
end

function i3k_sbean.master_info_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushNumber(self.masterRoleID)
	os:pushNumber(self.apprenticeCount)
	os:pushNumber(self.point)
	os:pushNumber(self.reputation)
	os:pushNumber(self.lastDismissTime)
	os:pushNumber(self.lastBetrayTime)
	os:pushNumber(self.lastReqGraduateTime)
	os:pushList(self.members)
	os:pushString(self.masterAnnounce)
end


-- æ¥çä¸ªäººæ¶æ¯ååº
i3k_sbean.master_msg_list_res = i3k_class("master_msg_list_res")
function i3k_sbean.master_msg_list_res:ctor()
	self._pname_ = "master_msg_list_res"
	--self.retCode:		int32	
	--self.applyList:		vector[MasterApplyEntry]	
	--self.betrayList:		vector[MasterApplyEntry]	
	--self.graduateReqList:		vector[MasterApplyEntry]	
end

function i3k_sbean.master_msg_list_res:clone()
	return clone(self)
end

function i3k_sbean.master_msg_list_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.applyList = is:popList(i3k_sbean.MasterApplyEntry)
	self.betrayList = is:popList(i3k_sbean.MasterApplyEntry)
	self.graduateReqList = is:popList(i3k_sbean.MasterApplyEntry)
end

function i3k_sbean.master_msg_list_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushList(self.applyList)
	os:pushList(self.betrayList)
	os:pushList(self.graduateReqList)
end


-- å é¤åå¸æ¶æ¯ååº
i3k_sbean.master_remove_betray_msg_res = i3k_class("master_remove_betray_msg_res")
function i3k_sbean.master_remove_betray_msg_res:ctor()
	self._pname_ = "master_remove_betray_msg_res"
	--self.retCode:		int32	
	--self.roleID:		int32	
end

function i3k_sbean.master_remove_betray_msg_res:clone()
	return clone(self)
end

function i3k_sbean.master_remove_betray_msg_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.roleID = is:popNumber()
end

function i3k_sbean.master_remove_betray_msg_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushNumber(self.roleID)
end


-- è¯·æ±å¸ç¶åè¡¨ååº
i3k_sbean.master_list_res = i3k_class("master_list_res")
function i3k_sbean.master_list_res:ctor()
	self._pname_ = "master_list_res"
	--self.retCode:		int32	
	--self.startIndex:		int32	
	--self.masters:		vector[MasterDetail]	
end

function i3k_sbean.master_list_res:clone()
	return clone(self)
end

function i3k_sbean.master_list_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.startIndex = is:popNumber()
	self.masters = is:popList(i3k_sbean.MasterDetail)
end

function i3k_sbean.master_list_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushNumber(self.startIndex)
	os:pushList(self.masters)
end


-- æ¥çæ´»è·ååº
i3k_sbean.master_list_apprentice_res = i3k_class("master_list_apprentice_res")
function i3k_sbean.master_list_apprentice_res:ctor()
	self._pname_ = "master_list_apprentice_res"
	--self.retCode:		int32	
	--self.apprentices:		vector[ApprenticeDetail]	
end

function i3k_sbean.master_list_apprentice_res:clone()
	return clone(self)
end

function i3k_sbean.master_list_apprentice_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.apprentices = is:popList(i3k_sbean.ApprenticeDetail)
end

function i3k_sbean.master_list_apprentice_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushList(self.apprentices)
end


-- è¯·æ±ä»»å¡è¿åº¦ååº
i3k_sbean.master_tasks_res = i3k_class("master_tasks_res")
function i3k_sbean.master_tasks_res:ctor()
	self._pname_ = "master_tasks_res"
	--self.retCode:		int32	
	--self.tasks:		vector[DBMasterTask]	
end

function i3k_sbean.master_tasks_res:clone()
	return clone(self)
end

function i3k_sbean.master_tasks_res:decode(is)
	is:popString()
	self.retCode = is:popNumber()
	self.tasks = is:popList(i3k_sbean.DBMasterTask)
end

function i3k_sbean.master_tasks_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.retCode)
	os:pushList(self.tasks)
end


-- å¸å¾åååæ­¥åè®®
i3k_sbean.master_shopsync_res = i3k_class("master_shopsync_res")
function i3k_sbean.master_shopsync_res:ctor()
	self._pname_ = "master_shopsync_res"
	--self.info:		ShopInfo	
	--self.currency:		int32	
	--self.discount:		ShopDiscountInfo	
end

function i3k_sbean.master_shopsync_res:clone()
	return clone(self)
end

function i3k_sbean.master_shopsync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
	self.currency = is:popNumber()
	self.discount = is:pop(i3k_sbean.ShopDiscountInfo)
end

function i3k_sbean.master_shopsync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
	os:pushNumber(self.currency)
	os:push(self.discount)
end


-- å¸å¾ååå·æ°åè®®
i3k_sbean.master_shoprefresh_res = i3k_class("master_shoprefresh_res")
function i3k_sbean.master_shoprefresh_res:ctor()
	self._pname_ = "master_shoprefresh_res"
	--self.info:		ShopInfo	
end

function i3k_sbean.master_shoprefresh_res:clone()
	return clone(self)
end

function i3k_sbean.master_shoprefresh_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.ShopInfo)
end

function i3k_sbean.master_shoprefresh_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- å¸å¾ååä¹°åååè®®
i3k_sbean.master_shopbuy_res = i3k_class("master_shopbuy_res")
function i3k_sbean.master_shopbuy_res:ctor()
	self._pname_ = "master_shopbuy_res"
	--self.ok:		int32	
end

function i3k_sbean.master_shopbuy_res:clone()
	return clone(self)
end

function i3k_sbean.master_shopbuy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.master_shopbuy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- æ¡æè¯ä¿®æ¹å®£è¨
i3k_sbean.master_card_change_declaration_res = i3k_class("master_card_change_declaration_res")
function i3k_sbean.master_card_change_declaration_res:ctor()
	self._pname_ = "master_card_change_declaration_res"
	--self.ok:		int32	
end

function i3k_sbean.master_card_change_declaration_res:clone()
	return clone(self)
end

function i3k_sbean.master_card_change_declaration_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.master_card_change_declaration_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- æ¡æè¯ç¹èµ
i3k_sbean.master_card_sign_res = i3k_class("master_card_sign_res")
function i3k_sbean.master_card_sign_res:ctor()
	self._pname_ = "master_card_sign_res"
	--self.ok:		int32	
end

function i3k_sbean.master_card_sign_res:clone()
	return clone(self)
end

function i3k_sbean.master_card_sign_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.master_card_sign_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- æ¡æè¯åæ­¥
i3k_sbean.master_card_sync_res = i3k_class("master_card_sync_res")
function i3k_sbean.master_card_sync_res:ctor()
	self._pname_ = "master_card_sync_res"
	--self.overview:		MasterCardOverview	
end

function i3k_sbean.master_card_sync_res:clone()
	return clone(self)
end

function i3k_sbean.master_card_sync_res:decode(is)
	is:popString()
	self.overview = is:pop(i3k_sbean.MasterCardOverview)
end

function i3k_sbean.master_card_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.overview)
end


-- 打开心情日记主页(type=1自己 type=2他人)
i3k_sbean.mood_diary_open_main_page_res = i3k_class("mood_diary_open_main_page_res")
function i3k_sbean.mood_diary_open_main_page_res:ctor()
	self._pname_ = "mood_diary_open_main_page_res"
	--self.ok:		int32	
	--self.moodDiary:		MoodDiaryView	
	--self.personalInfo:		DBPersonalInfo	
end

function i3k_sbean.mood_diary_open_main_page_res:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_open_main_page_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.moodDiary = is:pop(i3k_sbean.MoodDiaryView)
	self.personalInfo = is:pop(i3k_sbean.DBPersonalInfo)
end

function i3k_sbean.mood_diary_open_main_page_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.moodDiary)
	os:push(self.personalInfo)
end


-- 请求心情日记内容
i3k_sbean.mood_diary_get_diaries_res = i3k_class("mood_diary_get_diaries_res")
function i3k_sbean.mood_diary_get_diaries_res:ctor()
	self._pname_ = "mood_diary_get_diaries_res"
	--self.ok:		int32	
	--self.rid:		int32	
	--self.diaries:		vector[DBMoodDiaryText]	
	--self.startNum:		int32	
end

function i3k_sbean.mood_diary_get_diaries_res:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_get_diaries_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rid = is:popNumber()
	self.diaries = is:popList(i3k_sbean.DBMoodDiaryText)
	self.startNum = is:popNumber()
end

function i3k_sbean.mood_diary_get_diaries_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.rid)
	os:pushList(self.diaries)
	os:pushNumber(self.startNum)
end


-- 删除日记
i3k_sbean.mood_diary_delete_res = i3k_class("mood_diary_delete_res")
function i3k_sbean.mood_diary_delete_res:ctor()
	self._pname_ = "mood_diary_delete_res"
	--self.ok:		int32	
end

function i3k_sbean.mood_diary_delete_res:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_delete_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mood_diary_delete_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 赠送人气值道具
i3k_sbean.mood_diary_send_popularity_item_res = i3k_class("mood_diary_send_popularity_item_res")
function i3k_sbean.mood_diary_send_popularity_item_res:ctor()
	self._pname_ = "mood_diary_send_popularity_item_res"
	--self.ok:		int32	
end

function i3k_sbean.mood_diary_send_popularity_item_res:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_send_popularity_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mood_diary_send_popularity_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 改变装饰
i3k_sbean.mood_diary_change_decorates_res = i3k_class("mood_diary_change_decorates_res")
function i3k_sbean.mood_diary_change_decorates_res:ctor()
	self._pname_ = "mood_diary_change_decorates_res"
	--self.ok:		int32	
end

function i3k_sbean.mood_diary_change_decorates_res:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_change_decorates_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mood_diary_change_decorates_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 激活装饰
i3k_sbean.mood_diary_activite_decorate_res = i3k_class("mood_diary_activite_decorate_res")
function i3k_sbean.mood_diary_activite_decorate_res:ctor()
	self._pname_ = "mood_diary_activite_decorate_res"
	--self.ok:		int32	
end

function i3k_sbean.mood_diary_activite_decorate_res:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_activite_decorate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mood_diary_activite_decorate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 聊天分享type=1分享本服 type=2分享全服
i3k_sbean.mood_diary_share_res = i3k_class("mood_diary_share_res")
function i3k_sbean.mood_diary_share_res:ctor()
	self._pname_ = "mood_diary_share_res"
	--self.ok:		int32	
end

function i3k_sbean.mood_diary_share_res:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_share_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.mood_diary_share_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 写日记
i3k_sbean.mood_diary_wirte_diary_res = i3k_class("mood_diary_wirte_diary_res")
function i3k_sbean.mood_diary_wirte_diary_res:ctor()
	self._pname_ = "mood_diary_wirte_diary_res"
	--self.ok:		int32	
	--self.diary:		DBMoodDiaryText	
end

function i3k_sbean.mood_diary_wirte_diary_res:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_wirte_diary_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.diary = is:pop(i3k_sbean.DBMoodDiaryText)
end

function i3k_sbean.mood_diary_wirte_diary_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.diary)
end


-- 获取自己人气值
i3k_sbean.mood_diary_get_self_popularity_res = i3k_class("mood_diary_get_self_popularity_res")
function i3k_sbean.mood_diary_get_self_popularity_res:ctor()
	self._pname_ = "mood_diary_get_self_popularity_res"
	--self.popularity:		int32	
end

function i3k_sbean.mood_diary_get_self_popularity_res:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_get_self_popularity_res:decode(is)
	is:popString()
	self.popularity = is:popNumber()
end

function i3k_sbean.mood_diary_get_self_popularity_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.popularity)
end


-- 登录同步热血情缘信息
i3k_sbean.role_cross_friends = i3k_class("role_cross_friends")
function i3k_sbean.role_cross_friends:ctor()
	self._pname_ = "role_cross_friends"
	--self.self:		DBPersonalInfo	
	--self.friends:		map[int32, CrossFriendOverview]	
	--self.hasApply:		int32	
end

function i3k_sbean.role_cross_friends:clone()
	return clone(self)
end

function i3k_sbean.role_cross_friends:decode(is)
	is:popString()
	self.self = is:pop(i3k_sbean.DBPersonalInfo)
	self.friends = is:popNumberMap(i3k_sbean.CrossFriendOverview)
	self.hasApply = is:popNumber()
end

function i3k_sbean.role_cross_friends:encode(os)
	os:pushString(self._pname_)
	os:push(self.self)
	os:pushNumberMap(self.friends)
	os:pushNumber(self.hasApply)
end


-- 星座设置
i3k_sbean.personal_info_constellation_res = i3k_class("personal_info_constellation_res")
function i3k_sbean.personal_info_constellation_res:ctor()
	self._pname_ = "personal_info_constellation_res"
	--self.ok:		int32	
end

function i3k_sbean.personal_info_constellation_res:clone()
	return clone(self)
end

function i3k_sbean.personal_info_constellation_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.personal_info_constellation_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 性别设置
i3k_sbean.personal_info_gender_res = i3k_class("personal_info_gender_res")
function i3k_sbean.personal_info_gender_res:ctor()
	self._pname_ = "personal_info_gender_res"
	--self.ok:		int32	
end

function i3k_sbean.personal_info_gender_res:clone()
	return clone(self)
end

function i3k_sbean.personal_info_gender_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.personal_info_gender_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 爱好设置
i3k_sbean.personal_info_hobbies_res = i3k_class("personal_info_hobbies_res")
function i3k_sbean.personal_info_hobbies_res:ctor()
	self._pname_ = "personal_info_hobbies_res"
	--self.ok:		int32	
end

function i3k_sbean.personal_info_hobbies_res:clone()
	return clone(self)
end

function i3k_sbean.personal_info_hobbies_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.personal_info_hobbies_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 星愿测试
i3k_sbean.personal_info_answer_res = i3k_class("personal_info_answer_res")
function i3k_sbean.personal_info_answer_res:ctor()
	self._pname_ = "personal_info_answer_res"
	--self.ok:		int32	
end

function i3k_sbean.personal_info_answer_res:clone()
	return clone(self)
end

function i3k_sbean.personal_info_answer_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.personal_info_answer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 分享星愿测试
i3k_sbean.personal_info_share_res = i3k_class("personal_info_share_res")
function i3k_sbean.personal_info_share_res:ctor()
	self._pname_ = "personal_info_share_res"
	--self.ok:		int32	
end

function i3k_sbean.personal_info_share_res:clone()
	return clone(self)
end

function i3k_sbean.personal_info_share_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.personal_info_share_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 交友宣言设置
i3k_sbean.personal_info_signature_res = i3k_class("personal_info_signature_res")
function i3k_sbean.personal_info_signature_res:ctor()
	self._pname_ = "personal_info_signature_res"
	--self.ok:		int32	
end

function i3k_sbean.personal_info_signature_res:clone()
	return clone(self)
end

function i3k_sbean.personal_info_signature_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.personal_info_signature_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 更新跨服好友信息(info为null时表示 删除)
i3k_sbean.cross_friend_update = i3k_class("cross_friend_update")
function i3k_sbean.cross_friend_update:ctor()
	self._pname_ = "cross_friend_update"
	--self.roleID:		int32	
	--self.info:		CrossFriendOverview	
end

function i3k_sbean.cross_friend_update:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_update:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.info = is:pop(i3k_sbean.CrossFriendOverview)
end

function i3k_sbean.cross_friend_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:push(self.info)
end


-- 跨服好友 同步信息(matchInfo 匹配信息, applies好友申请)
i3k_sbean.cross_friend_sync_res = i3k_class("cross_friend_sync_res")
function i3k_sbean.cross_friend_sync_res:ctor()
	self._pname_ = "cross_friend_sync_res"
	--self.matchInfo:		DBCrossInfo	
	--self.applies:		vector[DBCrossInfo]	
	--self.dayRefreshTimes:		int32	
	--self.openMatch:		int8	
end

function i3k_sbean.cross_friend_sync_res:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_sync_res:decode(is)
	is:popString()
	self.matchInfo = is:pop(i3k_sbean.DBCrossInfo)
	self.applies = is:popList(i3k_sbean.DBCrossInfo)
	self.dayRefreshTimes = is:popNumber()
	self.openMatch = is:popNumber()
end

function i3k_sbean.cross_friend_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.matchInfo)
	os:pushList(self.applies)
	os:pushNumber(self.dayRefreshTimes)
	os:pushNumber(self.openMatch)
end


-- 跨服好友 立即匹配
i3k_sbean.cross_friend_match_res = i3k_class("cross_friend_match_res")
function i3k_sbean.cross_friend_match_res:ctor()
	self._pname_ = "cross_friend_match_res"
	--self.ok:		int32	
	--self.matchInfo:		DBCrossInfo	
end

function i3k_sbean.cross_friend_match_res:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_match_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.matchInfo = is:pop(i3k_sbean.DBCrossInfo)
end

function i3k_sbean.cross_friend_match_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.matchInfo)
end


-- 跨服好友 换一批
i3k_sbean.cross_friend_refresh_res = i3k_class("cross_friend_refresh_res")
function i3k_sbean.cross_friend_refresh_res:ctor()
	self._pname_ = "cross_friend_refresh_res"
	--self.ok:		int32	
	--self.matchInfo:		DBCrossInfo	
end

function i3k_sbean.cross_friend_refresh_res:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_refresh_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.matchInfo = is:pop(i3k_sbean.DBCrossInfo)
end

function i3k_sbean.cross_friend_refresh_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.matchInfo)
end


-- 跨服好友 爱心(添加好友)
i3k_sbean.cross_friend_like_res = i3k_class("cross_friend_like_res")
function i3k_sbean.cross_friend_like_res:ctor()
	self._pname_ = "cross_friend_like_res"
	--self.ok:		int32	
end

function i3k_sbean.cross_friend_like_res:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_like_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cross_friend_like_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 跨服好友 裂心(忽略)
i3k_sbean.cross_friend_dislike_res = i3k_class("cross_friend_dislike_res")
function i3k_sbean.cross_friend_dislike_res:ctor()
	self._pname_ = "cross_friend_dislike_res"
	--self.ok:		int32	
end

function i3k_sbean.cross_friend_dislike_res:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_dislike_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cross_friend_dislike_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 跨服好友 好友申请 处理
i3k_sbean.cross_friend_reply_res = i3k_class("cross_friend_reply_res")
function i3k_sbean.cross_friend_reply_res:ctor()
	self._pname_ = "cross_friend_reply_res"
	--self.ok:		int32	
end

function i3k_sbean.cross_friend_reply_res:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_reply_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cross_friend_reply_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 跨服好友 删除好友
i3k_sbean.cross_friend_delete_res = i3k_class("cross_friend_delete_res")
function i3k_sbean.cross_friend_delete_res:ctor()
	self._pname_ = "cross_friend_delete_res"
	--self.ok:		int32	
end

function i3k_sbean.cross_friend_delete_res:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_delete_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cross_friend_delete_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 跨服好友 好友申请通知
i3k_sbean.cross_friend_apply = i3k_class("cross_friend_apply")
function i3k_sbean.cross_friend_apply:ctor()
	self._pname_ = "cross_friend_apply"
	--self.apply:		DBCrossInfo	
end

function i3k_sbean.cross_friend_apply:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_apply:decode(is)
	is:popString()
	self.apply = is:pop(i3k_sbean.DBCrossInfo)
end

function i3k_sbean.cross_friend_apply:encode(os)
	os:pushString(self._pname_)
	os:push(self.apply)
end


-- 附灵同步
i3k_sbean.seal_given_spirit_sync = i3k_class("seal_given_spirit_sync")
function i3k_sbean.seal_given_spirit_sync:ctor()
	self._pname_ = "seal_given_spirit_sync"
	--self.roleSealGivenSpirit:		DBRoleSealGivenSpirit	
end

function i3k_sbean.seal_given_spirit_sync:clone()
	return clone(self)
end

function i3k_sbean.seal_given_spirit_sync:decode(is)
	is:popString()
	self.roleSealGivenSpirit = is:pop(i3k_sbean.DBRoleSealGivenSpirit)
end

function i3k_sbean.seal_given_spirit_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.roleSealGivenSpirit)
end


-- 附灵升阶
i3k_sbean.seal_given_spirit_uplvl_res = i3k_class("seal_given_spirit_uplvl_res")
function i3k_sbean.seal_given_spirit_uplvl_res:ctor()
	self._pname_ = "seal_given_spirit_uplvl_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_given_spirit_uplvl_res:clone()
	return clone(self)
end

function i3k_sbean.seal_given_spirit_uplvl_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_given_spirit_uplvl_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 附灵加点
i3k_sbean.seal_given_spirit_addpoint_res = i3k_class("seal_given_spirit_addpoint_res")
function i3k_sbean.seal_given_spirit_addpoint_res:ctor()
	self._pname_ = "seal_given_spirit_addpoint_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_given_spirit_addpoint_res:clone()
	return clone(self)
end

function i3k_sbean.seal_given_spirit_addpoint_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_given_spirit_addpoint_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 附灵五行相升升级
i3k_sbean.seal_given_spirit_upeachotheruplvl_res = i3k_class("seal_given_spirit_upeachotheruplvl_res")
function i3k_sbean.seal_given_spirit_upeachotheruplvl_res:ctor()
	self._pname_ = "seal_given_spirit_upeachotheruplvl_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_given_spirit_upeachotheruplvl_res:clone()
	return clone(self)
end

function i3k_sbean.seal_given_spirit_upeachotheruplvl_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_given_spirit_upeachotheruplvl_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 附灵重置加点
i3k_sbean.seal_given_spirit_resetPoint_res = i3k_class("seal_given_spirit_resetPoint_res")
function i3k_sbean.seal_given_spirit_resetPoint_res:ctor()
	self._pname_ = "seal_given_spirit_resetPoint_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_given_spirit_resetPoint_res:clone()
	return clone(self)
end

function i3k_sbean.seal_given_spirit_resetPoint_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_given_spirit_resetPoint_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 附灵加点购买
i3k_sbean.seal_given_spirit_buy_point_res = i3k_class("seal_given_spirit_buy_point_res")
function i3k_sbean.seal_given_spirit_buy_point_res:ctor()
	self._pname_ = "seal_given_spirit_buy_point_res"
	--self.ok:		int32	
end

function i3k_sbean.seal_given_spirit_buy_point_res:clone()
	return clone(self)
end

function i3k_sbean.seal_given_spirit_buy_point_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.seal_given_spirit_buy_point_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 珍珑棋局同步
i3k_sbean.chess_game_sync = i3k_class("chess_game_sync")
function i3k_sbean.chess_game_sync:ctor()
	self._pname_ = "chess_game_sync"
	--self.chessGame:		DBChessGame	
end

function i3k_sbean.chess_game_sync:clone()
	return clone(self)
end

function i3k_sbean.chess_game_sync:decode(is)
	is:popString()
	self.chessGame = is:pop(i3k_sbean.DBChessGame)
end

function i3k_sbean.chess_game_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.chessGame)
end


-- 珍珑棋局任务接取结果
i3k_sbean.chess_game_receive_res = i3k_class("chess_game_receive_res")
function i3k_sbean.chess_game_receive_res:ctor()
	self._pname_ = "chess_game_receive_res"
	--self.ok:		int32	
	--self.taskID:		int32	
	--self.receiveTime:		int32	
end

function i3k_sbean.chess_game_receive_res:clone()
	return clone(self)
end

function i3k_sbean.chess_game_receive_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.taskID = is:popNumber()
	self.receiveTime = is:popNumber()
end

function i3k_sbean.chess_game_receive_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.taskID)
	os:pushNumber(self.receiveTime)
end


-- 珍珑棋局任务取消结果
i3k_sbean.chess_game_cancel_res = i3k_class("chess_game_cancel_res")
function i3k_sbean.chess_game_cancel_res:ctor()
	self._pname_ = "chess_game_cancel_res"
	--self.ok:		int32	
end

function i3k_sbean.chess_game_cancel_res:clone()
	return clone(self)
end

function i3k_sbean.chess_game_cancel_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.chess_game_cancel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 珍珑棋局任务完成结果
i3k_sbean.chess_game_finish_res = i3k_class("chess_game_finish_res")
function i3k_sbean.chess_game_finish_res:ctor()
	self._pname_ = "chess_game_finish_res"
	--self.ok:		int32	
	--self.chessGame:		DBChessGame	
end

function i3k_sbean.chess_game_finish_res:clone()
	return clone(self)
end

function i3k_sbean.chess_game_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.chessGame = is:pop(i3k_sbean.DBChessGame)
end

function i3k_sbean.chess_game_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.chessGame)
end


-- 珍珑棋局解困
i3k_sbean.chess_game_uplooplvl_res = i3k_class("chess_game_uplooplvl_res")
function i3k_sbean.chess_game_uplooplvl_res:ctor()
	self._pname_ = "chess_game_uplooplvl_res"
	--self.ok:		int32	
	--self.chessGame:		DBChessGame	
end

function i3k_sbean.chess_game_uplooplvl_res:clone()
	return clone(self)
end

function i3k_sbean.chess_game_uplooplvl_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.chessGame = is:pop(i3k_sbean.DBChessGame)
end

function i3k_sbean.chess_game_uplooplvl_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.chessGame)
end


-- 珍珑棋局 获取排行榜列表
i3k_sbean.chess_game_rank_get_res = i3k_class("chess_game_rank_get_res")
function i3k_sbean.chess_game_rank_get_res:ctor()
	self._pname_ = "chess_game_rank_get_res"
	--self.ok:		int32	
	--self.selfRank:		int32	
	--self.selfLoopLvl:		int32	
	--self.selfChessValue:		int32	
	--self.ranks:		vector[ChessGameRankRole]	
end

function i3k_sbean.chess_game_rank_get_res:clone()
	return clone(self)
end

function i3k_sbean.chess_game_rank_get_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.selfRank = is:popNumber()
	self.selfLoopLvl = is:popNumber()
	self.selfChessValue = is:popNumber()
	self.ranks = is:popList(i3k_sbean.ChessGameRankRole)
end

function i3k_sbean.chess_game_rank_get_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.selfRank)
	os:pushNumber(self.selfLoopLvl)
	os:pushNumber(self.selfChessValue)
	os:pushList(self.ranks)
end


-- 登录同步心决信息
i3k_sbean.role_soulspell_sync = i3k_class("role_soulspell_sync")
function i3k_sbean.role_soulspell_sync:ctor()
	self._pname_ = "role_soulspell_sync"
	--self.info:		DBRoleSoulSpell	
end

function i3k_sbean.role_soulspell_sync:clone()
	return clone(self)
end

function i3k_sbean.role_soulspell_sync:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleSoulSpell)
end

function i3k_sbean.role_soulspell_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 心决解锁
i3k_sbean.soulspell_unlock_res = i3k_class("soulspell_unlock_res")
function i3k_sbean.soulspell_unlock_res:ctor()
	self._pname_ = "soulspell_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.soulspell_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.soulspell_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.soulspell_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 心决修心(props:value是终值)
i3k_sbean.soulspell_props_res = i3k_class("soulspell_props_res")
function i3k_sbean.soulspell_props_res:ctor()
	self._pname_ = "soulspell_props_res"
	--self.props:		map[int32, int32]	
end

function i3k_sbean.soulspell_props_res:clone()
	return clone(self)
end

function i3k_sbean.soulspell_props_res:decode(is)
	is:popString()
	self.props = is:popNumberNumberMap()
end

function i3k_sbean.soulspell_props_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.props)
end


-- 心决突破(ok:协议是否成功, success:概率是否成功)
i3k_sbean.soulspell_break_res = i3k_class("soulspell_break_res")
function i3k_sbean.soulspell_break_res:ctor()
	self._pname_ = "soulspell_break_res"
	--self.ok:		int32	
	--self.success:		int32	
end

function i3k_sbean.soulspell_break_res:clone()
	return clone(self)
end

function i3k_sbean.soulspell_break_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.success = is:popNumber()
end

function i3k_sbean.soulspell_break_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.success)
end


i3k_sbean.hideweapon_login_sync = i3k_class("hideweapon_login_sync")
function i3k_sbean.hideweapon_login_sync:ctor()
	self._pname_ = "hideweapon_login_sync"
	--self.info:		DBRoleHideWeapon	
end

function i3k_sbean.hideweapon_login_sync:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_login_sync:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleHideWeapon)
end

function i3k_sbean.hideweapon_login_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 暗器激活
i3k_sbean.hideweapon_make_res = i3k_class("hideweapon_make_res")
function i3k_sbean.hideweapon_make_res:ctor()
	self._pname_ = "hideweapon_make_res"
	--self.ok:		int32	
end

function i3k_sbean.hideweapon_make_res:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_make_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hideweapon_make_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 更换暗器
i3k_sbean.hideweapon_change_res = i3k_class("hideweapon_change_res")
function i3k_sbean.hideweapon_change_res:ctor()
	self._pname_ = "hideweapon_change_res"
	--self.ok:		int32	
end

function i3k_sbean.hideweapon_change_res:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_change_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hideweapon_change_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 暗器升品
i3k_sbean.hideweapon_rankup_res = i3k_class("hideweapon_rankup_res")
function i3k_sbean.hideweapon_rankup_res:ctor()
	self._pname_ = "hideweapon_rankup_res"
	--self.ok:		int32	
end

function i3k_sbean.hideweapon_rankup_res:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_rankup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hideweapon_rankup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 暗器升级
i3k_sbean.hideweapon_levelup_res = i3k_class("hideweapon_levelup_res")
function i3k_sbean.hideweapon_levelup_res:ctor()
	self._pname_ = "hideweapon_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.hideweapon_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hideweapon_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 暗器被动技能升级
i3k_sbean.hideweapon_pskill_levelup_res = i3k_class("hideweapon_pskill_levelup_res")
function i3k_sbean.hideweapon_pskill_levelup_res:ctor()
	self._pname_ = "hideweapon_pskill_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.hideweapon_pskill_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_pskill_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hideweapon_pskill_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 暗器更换被动技能
i3k_sbean.hideweapon_pskill_select_res = i3k_class("hideweapon_pskill_select_res")
function i3k_sbean.hideweapon_pskill_select_res:ctor()
	self._pname_ = "hideweapon_pskill_select_res"
	--self.ok:		int32	
end

function i3k_sbean.hideweapon_pskill_select_res:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_pskill_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hideweapon_pskill_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 暗器主动技能升级
i3k_sbean.hideweapon_askill_levelup_res = i3k_class("hideweapon_askill_levelup_res")
function i3k_sbean.hideweapon_askill_levelup_res:ctor()
	self._pname_ = "hideweapon_askill_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.hideweapon_askill_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_askill_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hideweapon_askill_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 暗器皮肤解锁
i3k_sbean.hideweapon_skin_unLock_res = i3k_class("hideweapon_skin_unLock_res")
function i3k_sbean.hideweapon_skin_unLock_res:ctor()
	self._pname_ = "hideweapon_skin_unLock_res"
	--self.ok:		int32	
end

function i3k_sbean.hideweapon_skin_unLock_res:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_skin_unLock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hideweapon_skin_unLock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 暗器更换皮肤
i3k_sbean.hideweapon_change_skin_res = i3k_class("hideweapon_change_skin_res")
function i3k_sbean.hideweapon_change_skin_res:ctor()
	self._pname_ = "hideweapon_change_skin_res"
	--self.ok:		int32	
end

function i3k_sbean.hideweapon_change_skin_res:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_change_skin_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hideweapon_change_skin_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.hideweapon_skill_damage = i3k_class("hideweapon_skill_damage")
function i3k_sbean.hideweapon_skill_damage:ctor()
	self._pname_ = "hideweapon_skill_damage"
	--self.wid:		int32	
	--self.curSkin:		int32	
	--self.type:		int32	
end

function i3k_sbean.hideweapon_skill_damage:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_skill_damage:decode(is)
	is:popString()
	self.wid = is:popNumber()
	self.curSkin = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.hideweapon_skill_damage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
	os:pushNumber(self.curSkin)
	os:pushNumber(self.type)
end


-- 玩家登陆信息同步
i3k_sbean.role_gaintboss_sync = i3k_class("role_gaintboss_sync")
function i3k_sbean.role_gaintboss_sync:ctor()
	self._pname_ = "role_gaintboss_sync"
end

function i3k_sbean.role_gaintboss_sync:decode(is)
	is:popString()
end

function i3k_sbean.role_gaintboss_sync:encode(os)
	os:pushString(self._pname_)
end


-- 巨灵信息同步
i3k_sbean.gaintboss_sync_res = i3k_class("gaintboss_sync_res")
function i3k_sbean.gaintboss_sync_res:ctor()
	self._pname_ = "gaintboss_sync_res"
	--self.openDays:		set[int32]	
end

function i3k_sbean.gaintboss_sync_res:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_sync_res:decode(is)
	is:popString()
	self.openDays = is:popNumberSet()
end

function i3k_sbean.gaintboss_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.openDays)
end


-- 参加巨灵攻城
i3k_sbean.gaintboss_join_res = i3k_class("gaintboss_join_res")
function i3k_sbean.gaintboss_join_res:ctor()
	self._pname_ = "gaintboss_join_res"
	--self.ok:		int32	
end

function i3k_sbean.gaintboss_join_res:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_join_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.gaintboss_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 抽奖
i3k_sbean.gaintboss_reward_res = i3k_class("gaintboss_reward_res")
function i3k_sbean.gaintboss_reward_res:ctor()
	self._pname_ = "gaintboss_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.gaintboss_reward_res:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.gaintboss_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神秘buff
i3k_sbean.gaintboss_takebuff_res = i3k_class("gaintboss_takebuff_res")
function i3k_sbean.gaintboss_takebuff_res:ctor()
	self._pname_ = "gaintboss_takebuff_res"
	--self.ok:		int32	
end

function i3k_sbean.gaintboss_takebuff_res:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_takebuff_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.gaintboss_takebuff_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 通知客户端巨灵攻城开始
i3k_sbean.role_gaintboss_start = i3k_class("role_gaintboss_start")
function i3k_sbean.role_gaintboss_start:ctor()
	self._pname_ = "role_gaintboss_start"
	--self.firstEnter:		int32	
end

function i3k_sbean.role_gaintboss_start:clone()
	return clone(self)
end

function i3k_sbean.role_gaintboss_start:decode(is)
	is:popString()
	self.firstEnter = is:popNumber()
end

function i3k_sbean.role_gaintboss_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.firstEnter)
end


-- 通知客户端巨灵攻城结束
i3k_sbean.role_gaintboss_end = i3k_class("role_gaintboss_end")
function i3k_sbean.role_gaintboss_end:ctor()
	self._pname_ = "role_gaintboss_end"
end

function i3k_sbean.role_gaintboss_end:decode(is)
	is:popString()
end

function i3k_sbean.role_gaintboss_end:encode(os)
	os:pushString(self._pname_)
end


-- 通知客户端增加巨灵币
i3k_sbean.role_add_gaintboss_coin = i3k_class("role_add_gaintboss_coin")
function i3k_sbean.role_add_gaintboss_coin:ctor()
	self._pname_ = "role_add_gaintboss_coin"
	--self.gaintBossCoin:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_gaintboss_coin:clone()
	return clone(self)
end

function i3k_sbean.role_add_gaintboss_coin:decode(is)
	is:popString()
	self.gaintBossCoin = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_gaintboss_coin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gaintBossCoin)
	os:pushNumber(self.reason)
end


-- 同步巨灵币
i3k_sbean.sync_gaintboss_coin = i3k_class("sync_gaintboss_coin")
function i3k_sbean.sync_gaintboss_coin:ctor()
	self._pname_ = "sync_gaintboss_coin"
	--self.gaintBossCoin:		int32	
end

function i3k_sbean.sync_gaintboss_coin:clone()
	return clone(self)
end

function i3k_sbean.sync_gaintboss_coin:decode(is)
	is:popString()
	self.gaintBossCoin = is:popNumber()
end

function i3k_sbean.sync_gaintboss_coin:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gaintBossCoin)
end


-- 即将刷新boss(抽奖 rewards key index, value rate, curBossIndex：当前是第几个boss)
i3k_sbean.gaintboss_map_info = i3k_class("gaintboss_map_info")
function i3k_sbean.gaintboss_map_info:ctor()
	self._pname_ = "gaintboss_map_info"
	--self.rewards:		map[int32, int32]	
	--self.nextCanTakeBuffTime:		int32	
	--self.curBossID:		int32	
	--self.curBossHP:		int32	
	--self.curBossIndex:		int32	
end

function i3k_sbean.gaintboss_map_info:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_map_info:decode(is)
	is:popString()
	self.rewards = is:popNumberNumberMap()
	self.nextCanTakeBuffTime = is:popNumber()
	self.curBossID = is:popNumber()
	self.curBossHP = is:popNumber()
	self.curBossIndex = is:popNumber()
end

function i3k_sbean.gaintboss_map_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.rewards)
	os:pushNumber(self.nextCanTakeBuffTime)
	os:pushNumber(self.curBossID)
	os:pushNumber(self.curBossHP)
	os:pushNumber(self.curBossIndex)
end


-- 即将刷新boss
i3k_sbean.gaintboss_welcome = i3k_class("gaintboss_welcome")
function i3k_sbean.gaintboss_welcome:ctor()
	self._pname_ = "gaintboss_welcome"
	--self.bossID:		int32	
end

function i3k_sbean.gaintboss_welcome:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_welcome:decode(is)
	is:popString()
	self.bossID = is:popNumber()
end

function i3k_sbean.gaintboss_welcome:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
end


-- 同步伤害排行榜(gaintboss_rank_query异步回应)
i3k_sbean.gaintboss_rank = i3k_class("gaintboss_rank")
function i3k_sbean.gaintboss_rank:ctor()
	self._pname_ = "gaintboss_rank"
	--self.bossID:		int32	
	--self.selfDamage:		int32	
	--self.rank:		vector[DamageInfo]	
end

function i3k_sbean.gaintboss_rank:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_rank:decode(is)
	is:popString()
	self.bossID = is:popNumber()
	self.selfDamage = is:popNumber()
	self.rank = is:popList(i3k_sbean.DamageInfo)
end

function i3k_sbean.gaintboss_rank:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
	os:pushNumber(self.selfDamage)
	os:pushList(self.rank)
end


-- boss死亡结算信息(dead 0:boss未死亡 1:boss死亡 2:boss死亡并且是最后一个boss)
i3k_sbean.gaintboss_result = i3k_class("gaintboss_result")
function i3k_sbean.gaintboss_result:ctor()
	self._pname_ = "gaintboss_result"
	--self.bossID:		int32	
	--self.selfRank:		int32	
	--self.rank:		vector[DamageInfo]	
	--self.top3:		map[int32, RoleDetail]	
	--self.rewards:		map[int32, int32]	
	--self.dead:		int32	
end

function i3k_sbean.gaintboss_result:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_result:decode(is)
	is:popString()
	self.bossID = is:popNumber()
	self.selfRank = is:popNumber()
	self.rank = is:popList(i3k_sbean.DamageInfo)
	self.top3 = is:popNumberMap(i3k_sbean.RoleDetail)
	self.rewards = is:popNumberNumberMap()
	self.dead = is:popNumber()
end

function i3k_sbean.gaintboss_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
	os:pushNumber(self.selfRank)
	os:pushList(self.rank)
	os:pushNumberMap(self.top3)
	os:pushNumberNumberMap(self.rewards)
	os:pushNumber(self.dead)
end


-- 抽奖(map结果)
i3k_sbean.gaintboss_map_reward = i3k_class("gaintboss_map_reward")
function i3k_sbean.gaintboss_map_reward:ctor()
	self._pname_ = "gaintboss_map_reward"
	--self.bossID:		int32	
	--self.index:		int32	
	--self.rate:		int32	
end

function i3k_sbean.gaintboss_map_reward:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_map_reward:decode(is)
	is:popString()
	self.bossID = is:popNumber()
	self.index = is:popNumber()
	self.rate = is:popNumber()
end

function i3k_sbean.gaintboss_map_reward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
	os:pushNumber(self.index)
	os:pushNumber(self.rate)
end


-- 神秘buff(map结果)
i3k_sbean.gaintboss_map_takebuff = i3k_class("gaintboss_map_takebuff")
function i3k_sbean.gaintboss_map_takebuff:ctor()
	self._pname_ = "gaintboss_map_takebuff"
	--self.buffID:		int32	
	--self.nextCanTakeBuffTime:		int32	
end

function i3k_sbean.gaintboss_map_takebuff:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_map_takebuff:decode(is)
	is:popString()
	self.buffID = is:popNumber()
	self.nextCanTakeBuffTime = is:popNumber()
end

function i3k_sbean.gaintboss_map_takebuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.buffID)
	os:pushNumber(self.nextCanTakeBuffTime)
end


-- 外传副本登陆同步
i3k_sbean.biography_login_sync = i3k_class("biography_login_sync")
function i3k_sbean.biography_login_sync:ctor()
	self._pname_ = "biography_login_sync"
	--self.biography:		DBRoleBiography	
end

function i3k_sbean.biography_login_sync:clone()
	return clone(self)
end

function i3k_sbean.biography_login_sync:decode(is)
	is:popString()
	self.biography = is:pop(i3k_sbean.DBRoleBiography)
end

function i3k_sbean.biography_login_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.biography)
end


-- 外传副本同步条件
i3k_sbean.biography_sync_conditions_res = i3k_class("biography_sync_conditions_res")
function i3k_sbean.biography_sync_conditions_res:ctor()
	self._pname_ = "biography_sync_conditions_res"
	--self.con:		map[int32, int32]	
end

function i3k_sbean.biography_sync_conditions_res:clone()
	return clone(self)
end

function i3k_sbean.biography_sync_conditions_res:decode(is)
	is:popString()
	self.con = is:popNumberNumberMap()
end

function i3k_sbean.biography_sync_conditions_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.con)
end


-- 外传副本解锁外传
i3k_sbean.biography_unlock_res = i3k_class("biography_unlock_res")
function i3k_sbean.biography_unlock_res:ctor()
	self._pname_ = "biography_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.biography_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传副本开始副本
i3k_sbean.biography_start_mapcopy_res = i3k_class("biography_start_mapcopy_res")
function i3k_sbean.biography_start_mapcopy_res:ctor()
	self._pname_ = "biography_start_mapcopy_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_start_mapcopy_res:clone()
	return clone(self)
end

function i3k_sbean.biography_start_mapcopy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_start_mapcopy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传副本接任务
i3k_sbean.biography_take_task_res = i3k_class("biography_take_task_res")
function i3k_sbean.biography_take_task_res:ctor()
	self._pname_ = "biography_take_task_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_take_task_res:clone()
	return clone(self)
end

function i3k_sbean.biography_take_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_take_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传副本任务提交物品
i3k_sbean.biography_submit_item_res = i3k_class("biography_submit_item_res")
function i3k_sbean.biography_submit_item_res:ctor()
	self._pname_ = "biography_submit_item_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_submit_item_res:clone()
	return clone(self)
end

function i3k_sbean.biography_submit_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_submit_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传副本完成任务
i3k_sbean.biography_finish_task_res = i3k_class("biography_finish_task_res")
function i3k_sbean.biography_finish_task_res:ctor()
	self._pname_ = "biography_finish_task_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_finish_task_res:clone()
	return clone(self)
end

function i3k_sbean.biography_finish_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_finish_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传副本领取完成奖励
i3k_sbean.biography_take_reward_res = i3k_class("biography_take_reward_res")
function i3k_sbean.biography_take_reward_res:ctor()
	self._pname_ = "biography_take_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_take_reward_res:clone()
	return clone(self)
end

function i3k_sbean.biography_take_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_take_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备锤炼解锁属性
i3k_sbean.equip_smelting_unlock_res = i3k_class("equip_smelting_unlock_res")
function i3k_sbean.equip_smelting_unlock_res:ctor()
	self._pname_ = "equip_smelting_unlock_res"
	--self.props:		vector[Prop]	
end

function i3k_sbean.equip_smelting_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.equip_smelting_unlock_res:decode(is)
	is:popString()
	self.props = is:popList(i3k_sbean.Prop)
end

function i3k_sbean.equip_smelting_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.props)
end


-- 装备锤炼百炼
i3k_sbean.equip_smelting_res = i3k_class("equip_smelting_res")
function i3k_sbean.equip_smelting_res:ctor()
	self._pname_ = "equip_smelting_res"
	--self.props:		vector[Prop]	
end

function i3k_sbean.equip_smelting_res:clone()
	return clone(self)
end

function i3k_sbean.equip_smelting_res:decode(is)
	is:popString()
	self.props = is:popList(i3k_sbean.Prop)
end

function i3k_sbean.equip_smelting_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.props)
end


-- 装备锤炼百炼保存
i3k_sbean.equip_smelting_save_res = i3k_class("equip_smelting_save_res")
function i3k_sbean.equip_smelting_save_res:ctor()
	self._pname_ = "equip_smelting_save_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_smelting_save_res:clone()
	return clone(self)
end

function i3k_sbean.equip_smelting_save_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_smelting_save_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备锤炼千锤
i3k_sbean.equip_hammer_res = i3k_class("equip_hammer_res")
function i3k_sbean.equip_hammer_res:ctor()
	self._pname_ = "equip_hammer_res"
	--self.props:		vector[Prop]	
end

function i3k_sbean.equip_hammer_res:clone()
	return clone(self)
end

function i3k_sbean.equip_hammer_res:decode(is)
	is:popString()
	self.props = is:popList(i3k_sbean.Prop)
end

function i3k_sbean.equip_hammer_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.props)
end


-- 装备锤炼千锤保存
i3k_sbean.equip_hammer_save_res = i3k_class("equip_hammer_save_res")
function i3k_sbean.equip_hammer_save_res:ctor()
	self._pname_ = "equip_hammer_save_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_hammer_save_res:clone()
	return clone(self)
end

function i3k_sbean.equip_hammer_save_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_hammer_save_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 装备锤炼技能解锁
i3k_sbean.equip_hammer_skill_unlock_res = i3k_class("equip_hammer_skill_unlock_res")
function i3k_sbean.equip_hammer_skill_unlock_res:ctor()
	self._pname_ = "equip_hammer_skill_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.equip_hammer_skill_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.equip_hammer_skill_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.equip_hammer_skill_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 打开活动界面
i3k_sbean.regular_task_open_res = i3k_class("regular_task_open_res")
function i3k_sbean.regular_task_open_res:ctor()
	self._pname_ = "regular_task_open_res"
	--self.data:		DBRegularTaskData	
end

function i3k_sbean.regular_task_open_res:clone()
	return clone(self)
end

function i3k_sbean.regular_task_open_res:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBRegularTaskData)
end

function i3k_sbean.regular_task_open_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


i3k_sbean.regular_task_sync = i3k_class("regular_task_sync")
function i3k_sbean.regular_task_sync:ctor()
	self._pname_ = "regular_task_sync"
	--self.data:		DBRegularTaskData	
end

function i3k_sbean.regular_task_sync:clone()
	return clone(self)
end

function i3k_sbean.regular_task_sync:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBRegularTaskData)
end

function i3k_sbean.regular_task_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 领取定期活动积分奖励
i3k_sbean.regular_task_score_reward_take_res = i3k_class("regular_task_score_reward_take_res")
function i3k_sbean.regular_task_score_reward_take_res:ctor()
	self._pname_ = "regular_task_score_reward_take_res"
	--self.ok:		int32	
	--self.drops:		map[int32, int32]	
end

function i3k_sbean.regular_task_score_reward_take_res:clone()
	return clone(self)
end

function i3k_sbean.regular_task_score_reward_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popNumberNumberMap()
end

function i3k_sbean.regular_task_score_reward_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.drops)
end


-- 定期活动兑换
i3k_sbean.regular_task_exchange_res = i3k_class("regular_task_exchange_res")
function i3k_sbean.regular_task_exchange_res:ctor()
	self._pname_ = "regular_task_exchange_res"
	--self.ok:		int32	
end

function i3k_sbean.regular_task_exchange_res:clone()
	return clone(self)
end

function i3k_sbean.regular_task_exchange_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.regular_task_exchange_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用定期活动道具
i3k_sbean.bag_use_regular_item_res = i3k_class("bag_use_regular_item_res")
function i3k_sbean.bag_use_regular_item_res:ctor()
	self._pname_ = "bag_use_regular_item_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_use_regular_item_res:clone()
	return clone(self)
end

function i3k_sbean.bag_use_regular_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_use_regular_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 打开活动祈愿界面
i3k_sbean.regular_pray_open_res = i3k_class("regular_pray_open_res")
function i3k_sbean.regular_pray_open_res:ctor()
	self._pname_ = "regular_pray_open_res"
	--self.info:		RegularPrayData	
end

function i3k_sbean.regular_pray_open_res:clone()
	return clone(self)
end

function i3k_sbean.regular_pray_open_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.RegularPrayData)
end

function i3k_sbean.regular_pray_open_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 祈愿
i3k_sbean.regular_pray_res = i3k_class("regular_pray_res")
function i3k_sbean.regular_pray_res:ctor()
	self._pname_ = "regular_pray_res"
	--self.ok:		int32	
end

function i3k_sbean.regular_pray_res:clone()
	return clone(self)
end

function i3k_sbean.regular_pray_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.regular_pray_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 祈愿领奖
i3k_sbean.regular_pray_take_reward_res = i3k_class("regular_pray_take_reward_res")
function i3k_sbean.regular_pray_take_reward_res:ctor()
	self._pname_ = "regular_pray_take_reward_res"
	--self.ok:		int32	
	--self.fixDrops:		map[int32, int32]	
	--self.randomDrops:		vector[DummyGoods]	
end

function i3k_sbean.regular_pray_take_reward_res:clone()
	return clone(self)
end

function i3k_sbean.regular_pray_take_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.fixDrops = is:popNumberNumberMap()
	self.randomDrops = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.regular_pray_take_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.fixDrops)
	os:pushList(self.randomDrops)
end


-- 宠物驯养数据登陆同步
i3k_sbean.pet_domestication_sync = i3k_class("pet_domestication_sync")
function i3k_sbean.pet_domestication_sync:ctor()
	self._pname_ = "pet_domestication_sync"
	--self.petDomestication:		DBPetDomestication	
end

function i3k_sbean.pet_domestication_sync:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_sync:decode(is)
	is:popString()
	self.petDomestication = is:pop(i3k_sbean.DBPetDomestication)
end

function i3k_sbean.pet_domestication_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.petDomestication)
end


-- 宠物装备精华增加
i3k_sbean.role_add_pet_equip_spirit = i3k_class("role_add_pet_equip_spirit")
function i3k_sbean.role_add_pet_equip_spirit:ctor()
	self._pname_ = "role_add_pet_equip_spirit"
	--self.petEquipSpirit:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_pet_equip_spirit:clone()
	return clone(self)
end

function i3k_sbean.role_add_pet_equip_spirit:decode(is)
	is:popString()
	self.petEquipSpirit = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_pet_equip_spirit:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petEquipSpirit)
	os:pushNumber(self.reason)
end


-- 宠物穿上装备
i3k_sbean.pet_domestication_equip_wear_res = i3k_class("pet_domestication_equip_wear_res")
function i3k_sbean.pet_domestication_equip_wear_res:ctor()
	self._pname_ = "pet_domestication_equip_wear_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_domestication_equip_wear_res:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_equip_wear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_domestication_equip_wear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物脱下装备
i3k_sbean.pet_domestication_equip_unwear_res = i3k_class("pet_domestication_equip_unwear_res")
function i3k_sbean.pet_domestication_equip_unwear_res:ctor()
	self._pname_ = "pet_domestication_equip_unwear_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_domestication_equip_unwear_res:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_equip_unwear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_domestication_equip_unwear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物装备部位升级
i3k_sbean.pet_domestication_part_lvlup_res = i3k_class("pet_domestication_part_lvlup_res")
function i3k_sbean.pet_domestication_part_lvlup_res:ctor()
	self._pname_ = "pet_domestication_part_lvlup_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_domestication_part_lvlup_res:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_part_lvlup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_domestication_part_lvlup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物驯养技能升级
i3k_sbean.pet_domestication_skill_lvlup_res = i3k_class("pet_domestication_skill_lvlup_res")
function i3k_sbean.pet_domestication_skill_lvlup_res:ctor()
	self._pname_ = "pet_domestication_skill_lvlup_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_domestication_skill_lvlup_res:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_skill_lvlup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_domestication_skill_lvlup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 宠物装备分解
i3k_sbean.pet_domestication_equip_split_res = i3k_class("pet_domestication_equip_split_res")
function i3k_sbean.pet_domestication_equip_split_res:ctor()
	self._pname_ = "pet_domestication_equip_split_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_domestication_equip_split_res:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_equip_split_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_domestication_equip_split_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 打开页签同步信息
i3k_sbean.survive_sync_res = i3k_class("survive_sync_res")
function i3k_sbean.survive_sync_res:ctor()
	self._pname_ = "survive_sync_res"
	--self.info:		DBRoleSurvive	
end

function i3k_sbean.survive_sync_res:clone()
	return clone(self)
end

function i3k_sbean.survive_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleSurvive)
end

function i3k_sbean.survive_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 设置当前英雄
i3k_sbean.survive_sethero_res = i3k_class("survive_sethero_res")
function i3k_sbean.survive_sethero_res:ctor()
	self._pname_ = "survive_sethero_res"
	--self.ok:		int32	
end

function i3k_sbean.survive_sethero_res:clone()
	return clone(self)
end

function i3k_sbean.survive_sethero_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.survive_sethero_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 穿装备
i3k_sbean.survive_equip_upwear_res = i3k_class("survive_equip_upwear_res")
function i3k_sbean.survive_equip_upwear_res:ctor()
	self._pname_ = "survive_equip_upwear_res"
	--self.ok:		int32	
end

function i3k_sbean.survive_equip_upwear_res:clone()
	return clone(self)
end

function i3k_sbean.survive_equip_upwear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.survive_equip_upwear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 脱装备
i3k_sbean.survive_equip_downwear_res = i3k_class("survive_equip_downwear_res")
function i3k_sbean.survive_equip_downwear_res:ctor()
	self._pname_ = "survive_equip_downwear_res"
	--self.ok:		int32	
end

function i3k_sbean.survive_equip_downwear_res:clone()
	return clone(self)
end

function i3k_sbean.survive_equip_downwear_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.survive_equip_downwear_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 销毁道具请求
i3k_sbean.survive_destoryitems_res = i3k_class("survive_destoryitems_res")
function i3k_sbean.survive_destoryitems_res:ctor()
	self._pname_ = "survive_destoryitems_res"
	--self.ok:		int32	
end

function i3k_sbean.survive_destoryitems_res:clone()
	return clone(self)
end

function i3k_sbean.survive_destoryitems_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.survive_destoryitems_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用药品
i3k_sbean.survive_usedrug_res = i3k_class("survive_usedrug_res")
function i3k_sbean.survive_usedrug_res:ctor()
	self._pname_ = "survive_usedrug_res"
	--self.ok:		int32	
end

function i3k_sbean.survive_usedrug_res:clone()
	return clone(self)
end

function i3k_sbean.survive_usedrug_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.survive_usedrug_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 个人最终积分结果
i3k_sbean.survive_final_score_result_res = i3k_class("survive_final_score_result_res")
function i3k_sbean.survive_final_score_result_res:ctor()
	self._pname_ = "survive_final_score_result_res"
	--self.result:		SurviveScore	
	--self.rewards:		vector[DummyGoods]	
end

function i3k_sbean.survive_final_score_result_res:clone()
	return clone(self)
end

function i3k_sbean.survive_final_score_result_res:decode(is)
	is:popString()
	self.result = is:pop(i3k_sbean.SurviveScore)
	self.rewards = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.survive_final_score_result_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.result)
	os:pushList(self.rewards)
end


-- 通知客户端向副本背包添加副本道具
i3k_sbean.role_add_survive_items = i3k_class("role_add_survive_items")
function i3k_sbean.role_add_survive_items:ctor()
	self._pname_ = "role_add_survive_items"
	--self.gis:		vector[GameItem]	
end

function i3k_sbean.role_add_survive_items:clone()
	return clone(self)
end

function i3k_sbean.role_add_survive_items:decode(is)
	is:popString()
	self.gis = is:popList(i3k_sbean.GameItem)
end

function i3k_sbean.role_add_survive_items:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.gis)
end


-- 通知客户端副本背包减少道具
i3k_sbean.role_del_survive_items = i3k_class("role_del_survive_items")
function i3k_sbean.role_del_survive_items:ctor()
	self._pname_ = "role_del_survive_items"
	--self.gis:		vector[GameItem]	
end

function i3k_sbean.role_del_survive_items:clone()
	return clone(self)
end

function i3k_sbean.role_del_survive_items:decode(is)
	is:popString()
	self.gis = is:popList(i3k_sbean.GameItem)
end

function i3k_sbean.role_del_survive_items:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.gis)
end


-- 通知客户端移除身上装备
i3k_sbean.role_del_survive_equips = i3k_class("role_del_survive_equips")
function i3k_sbean.role_del_survive_equips:ctor()
	self._pname_ = "role_del_survive_equips"
	--self.gis:		set[int32]	
end

function i3k_sbean.role_del_survive_equips:clone()
	return clone(self)
end

function i3k_sbean.role_del_survive_equips:decode(is)
	is:popString()
	self.gis = is:popNumberSet()
end

function i3k_sbean.role_del_survive_equips:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.gis)
end


-- 决战荒漠副本开始通知
i3k_sbean.survive_map_start = i3k_class("survive_map_start")
function i3k_sbean.survive_map_start:ctor()
	self._pname_ = "survive_map_start"
end

function i3k_sbean.survive_map_start:decode(is)
	is:popString()
end

function i3k_sbean.survive_map_start:encode(os)
	os:pushString(self._pname_)
end


-- gs 进入地图同步信息
i3k_sbean.survive_map_sync = i3k_class("survive_map_sync")
function i3k_sbean.survive_map_sync:ctor()
	self._pname_ = "survive_map_sync"
	--self.curHero:		int32	
	--self.wearEquips:		map[int32, int32]	
	--self.bag:		map[int32, int32]	
	--self.lastUseDrugTime:		int32	
end

function i3k_sbean.survive_map_sync:clone()
	return clone(self)
end

function i3k_sbean.survive_map_sync:decode(is)
	is:popString()
	self.curHero = is:popNumber()
	self.wearEquips = is:popNumberNumberMap()
	self.bag = is:popNumberNumberMap()
	self.lastUseDrugTime = is:popNumber()
end

function i3k_sbean.survive_map_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curHero)
	os:pushNumberNumberMap(self.wearEquips)
	os:pushNumberNumberMap(self.bag)
	os:pushNumber(self.lastUseDrugTime)
end


-- 添加副本道具
i3k_sbean.survive_add_item = i3k_class("survive_add_item")
function i3k_sbean.survive_add_item:ctor()
	self._pname_ = "survive_add_item"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.survive_add_item:clone()
	return clone(self)
end

function i3k_sbean.survive_add_item:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.survive_add_item:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 同步玩家决战荒野信息
i3k_sbean.sync_role_survive_info = i3k_class("sync_role_survive_info")
function i3k_sbean.sync_role_survive_info:ctor()
	self._pname_ = "sync_role_survive_info"
	--self.roleSurvive:		DBRoleSurvive	
end

function i3k_sbean.sync_role_survive_info:clone()
	return clone(self)
end

function i3k_sbean.sync_role_survive_info:decode(is)
	is:popString()
	self.roleSurvive = is:pop(i3k_sbean.DBRoleSurvive)
end

function i3k_sbean.sync_role_survive_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.roleSurvive)
end


-- 所在队伍最终结果
i3k_sbean.survive_final_team_result = i3k_class("survive_final_team_result")
function i3k_sbean.survive_final_team_result:ctor()
	self._pname_ = "survive_final_team_result"
	--self.result:		SurviveTeam	
	--self.selfRewards:		vector[DummyGoods]	
	--self.teamRewards:		vector[DummyGoods]	
end

function i3k_sbean.survive_final_team_result:clone()
	return clone(self)
end

function i3k_sbean.survive_final_team_result:decode(is)
	is:popString()
	self.result = is:pop(i3k_sbean.SurviveTeam)
	self.selfRewards = is:popList(i3k_sbean.DummyGoods)
	self.teamRewards = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.survive_final_team_result:encode(os)
	os:pushString(self._pname_)
	os:push(self.result)
	os:pushList(self.selfRewards)
	os:pushList(self.teamRewards)
end


-- map进入地图同步信息(lifes: 队友命数包括自己)
i3k_sbean.survive_map_info = i3k_class("survive_map_info")
function i3k_sbean.survive_map_info:ctor()
	self._pname_ = "survive_map_info"
	--self.lifes:		map[int32, int32]	
	--self.leftRoles:		int32	
	--self.score:		int32	
end

function i3k_sbean.survive_map_info:clone()
	return clone(self)
end

function i3k_sbean.survive_map_info:decode(is)
	is:popString()
	self.lifes = is:popNumberNumberMap()
	self.leftRoles = is:popNumber()
	self.score = is:popNumber()
end

function i3k_sbean.survive_map_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.lifes)
	os:pushNumber(self.leftRoles)
	os:pushNumber(self.score)
end


-- 同步个人积分排行榜(survive_score_rank_query 的异步回应)
i3k_sbean.survive_score_rank = i3k_class("survive_score_rank")
function i3k_sbean.survive_score_rank:ctor()
	self._pname_ = "survive_score_rank"
	--self.ranks:		vector[RankSurvive]	
	--self.selfRank:		int32	
end

function i3k_sbean.survive_score_rank:clone()
	return clone(self)
end

function i3k_sbean.survive_score_rank:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.RankSurvive)
	self.selfRank = is:popNumber()
end

function i3k_sbean.survive_score_rank:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
	os:pushNumber(self.selfRank)
end


-- 个人积分变化通知
i3k_sbean.survive_score_update = i3k_class("survive_score_update")
function i3k_sbean.survive_score_update:ctor()
	self._pname_ = "survive_score_update"
	--self.score:		int32	
end

function i3k_sbean.survive_score_update:clone()
	return clone(self)
end

function i3k_sbean.survive_score_update:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.survive_score_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 剩余玩家变化通知
i3k_sbean.survive_leftrole_update = i3k_class("survive_leftrole_update")
function i3k_sbean.survive_leftrole_update:ctor()
	self._pname_ = "survive_leftrole_update"
	--self.left:		int32	
end

function i3k_sbean.survive_leftrole_update:clone()
	return clone(self)
end

function i3k_sbean.survive_leftrole_update:decode(is)
	is:popString()
	self.left = is:popNumber()
end

function i3k_sbean.survive_leftrole_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.left)
end


-- 周围玩家 个人积分变化通知
i3k_sbean.nearby_survive_score_update = i3k_class("nearby_survive_score_update")
function i3k_sbean.nearby_survive_score_update:ctor()
	self._pname_ = "nearby_survive_score_update"
	--self.rid:		int32	
	--self.score:		int32	
end

function i3k_sbean.nearby_survive_score_update:clone()
	return clone(self)
end

function i3k_sbean.nearby_survive_score_update:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.score = is:popNumber()
end

function i3k_sbean.nearby_survive_score_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.score)
end


-- 同步玩家观战信息
i3k_sbean.role_view_info = i3k_class("role_view_info")
function i3k_sbean.role_view_info:ctor()
	self._pname_ = "role_view_info"
	--self.viewer:		RoleDetail	
	--self.position:		Vector3	
	--self.rotation:		Vector3F	
end

function i3k_sbean.role_view_info:clone()
	return clone(self)
end

function i3k_sbean.role_view_info:decode(is)
	is:popString()
	self.viewer = is:pop(i3k_sbean.RoleDetail)
	self.position = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
end

function i3k_sbean.role_view_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.viewer)
	os:push(self.position)
	os:push(self.rotation)
end


-- 队友命数变化通知(包括自己)
i3k_sbean.survive_member_life_update = i3k_class("survive_member_life_update")
function i3k_sbean.survive_member_life_update:ctor()
	self._pname_ = "survive_member_life_update"
	--self.rid:		int32	
	--self.lifes:		int32	
end

function i3k_sbean.survive_member_life_update:clone()
	return clone(self)
end

function i3k_sbean.survive_member_life_update:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.lifes = is:popNumber()
end

function i3k_sbean.survive_member_life_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.lifes)
end


-- 补给点信息
i3k_sbean.survive_supply_infos = i3k_class("survive_supply_infos")
function i3k_sbean.survive_supply_infos:ctor()
	self._pname_ = "survive_supply_infos"
	--self.round:		int32	
	--self.refreshTime:		int32	
	--self.gatheredIDs:		vector[int32]	
end

function i3k_sbean.survive_supply_infos:clone()
	return clone(self)
end

function i3k_sbean.survive_supply_infos:decode(is)
	is:popString()
	self.round = is:popNumber()
	self.refreshTime = is:popNumber()
	self.gatheredIDs = is:popNumberList()
end

function i3k_sbean.survive_supply_infos:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.round)
	os:pushNumber(self.refreshTime)
	os:pushNumberList(self.gatheredIDs)
end


-- 安全区毒圈信息
i3k_sbean.survive_safe_area_infos = i3k_class("survive_safe_area_infos")
function i3k_sbean.survive_safe_area_infos:ctor()
	self._pname_ = "survive_safe_area_infos"
	--self.round:		int32	
	--self.safeOrigin:		Vector3	
	--self.poisonOrigin:		Vector3	
	--self.roundEndTime:		int32	
end

function i3k_sbean.survive_safe_area_infos:clone()
	return clone(self)
end

function i3k_sbean.survive_safe_area_infos:decode(is)
	is:popString()
	self.round = is:popNumber()
	self.safeOrigin = is:pop(i3k_sbean.Vector3)
	self.poisonOrigin = is:pop(i3k_sbean.Vector3)
	self.roundEndTime = is:popNumber()
end

function i3k_sbean.survive_safe_area_infos:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.round)
	os:push(self.safeOrigin)
	os:push(self.poisonOrigin)
	os:pushNumber(self.roundEndTime)
end


-- out 0:正常击杀 1:淘汰
i3k_sbean.nearby_survive_kill = i3k_class("nearby_survive_kill")
function i3k_sbean.nearby_survive_kill:ctor()
	self._pname_ = "nearby_survive_kill"
	--self.killer:		RoleInfo	
	--self.deader:		RoleInfo	
	--self.out:		int32	
end

function i3k_sbean.nearby_survive_kill:clone()
	return clone(self)
end

function i3k_sbean.nearby_survive_kill:decode(is)
	is:popString()
	self.killer = is:pop(i3k_sbean.RoleInfo)
	self.deader = is:pop(i3k_sbean.RoleInfo)
	self.out = is:popNumber()
end

function i3k_sbean.nearby_survive_kill:encode(os)
	os:pushString(self._pname_)
	os:push(self.killer)
	os:push(self.deader)
	os:pushNumber(self.out)
end


-- 同步数据
i3k_sbean.week_treasure_box_sync = i3k_class("week_treasure_box_sync")
function i3k_sbean.week_treasure_box_sync:ctor()
	self._pname_ = "week_treasure_box_sync"
	--self.log:		DBRoleWeekTreasureBox	
end

function i3k_sbean.week_treasure_box_sync:clone()
	return clone(self)
end

function i3k_sbean.week_treasure_box_sync:decode(is)
	is:popString()
	self.log = is:pop(i3k_sbean.DBRoleWeekTreasureBox)
end

function i3k_sbean.week_treasure_box_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.log)
end


-- 领取宝箱
i3k_sbean.week_treasure_box_take_res = i3k_class("week_treasure_box_take_res")
function i3k_sbean.week_treasure_box_take_res:ctor()
	self._pname_ = "week_treasure_box_take_res"
	--self.ok:		int32	
	--self.drops:		map[int32, int32]	
end

function i3k_sbean.week_treasure_box_take_res:clone()
	return clone(self)
end

function i3k_sbean.week_treasure_box_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popNumberNumberMap()
end

function i3k_sbean.week_treasure_box_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.drops)
end


-- 开始创建结拜
i3k_sbean.create_sworn_start_res = i3k_class("create_sworn_start_res")
function i3k_sbean.create_sworn_start_res:ctor()
	self._pname_ = "create_sworn_start_res"
	--self.ok:		int32	
end

function i3k_sbean.create_sworn_start_res:clone()
	return clone(self)
end

function i3k_sbean.create_sworn_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.create_sworn_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结拜生日信息收集推送
i3k_sbean.sworn_birthday_sign_push = i3k_class("sworn_birthday_sign_push")
function i3k_sbean.sworn_birthday_sign_push:ctor()
	self._pname_ = "sworn_birthday_sign_push"
	--self.isJoin:		int32	
	--self.oldMember:		map[int32, int32]	
end

function i3k_sbean.sworn_birthday_sign_push:clone()
	return clone(self)
end

function i3k_sbean.sworn_birthday_sign_push:decode(is)
	is:popString()
	self.isJoin = is:popNumber()
	self.oldMember = is:popNumberNumberMap()
end

function i3k_sbean.sworn_birthday_sign_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isJoin)
	os:pushNumberNumberMap(self.oldMember)
end


-- 登记结拜生日
i3k_sbean.sworn_sign_birthday_res = i3k_class("sworn_sign_birthday_res")
function i3k_sbean.sworn_sign_birthday_res:ctor()
	self._pname_ = "sworn_sign_birthday_res"
	--self.ok:		int32	
end

function i3k_sbean.sworn_sign_birthday_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_sign_birthday_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sworn_sign_birthday_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 修改结拜生日
i3k_sbean.sworn_change_birthday_res = i3k_class("sworn_change_birthday_res")
function i3k_sbean.sworn_change_birthday_res:ctor()
	self._pname_ = "sworn_change_birthday_res"
	--self.ok:		int32	
end

function i3k_sbean.sworn_change_birthday_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_change_birthday_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sworn_change_birthday_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结拜生日信息推送
i3k_sbean.sworn_birthday_push = i3k_class("sworn_birthday_push")
function i3k_sbean.sworn_birthday_push:ctor()
	self._pname_ = "sworn_birthday_push"
	--self.birthday:		map[int32, SwornRoleData]	
end

function i3k_sbean.sworn_birthday_push:clone()
	return clone(self)
end

function i3k_sbean.sworn_birthday_push:decode(is)
	is:popString()
	self.birthday = is:popNumberMap(i3k_sbean.SwornRoleData)
end

function i3k_sbean.sworn_birthday_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.birthday)
end


-- 结束创建结拜
i3k_sbean.create_sworn_end_res = i3k_class("create_sworn_end_res")
function i3k_sbean.create_sworn_end_res:ctor()
	self._pname_ = "create_sworn_end_res"
	--self.ok:		int32	
end

function i3k_sbean.create_sworn_end_res:clone()
	return clone(self)
end

function i3k_sbean.create_sworn_end_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.create_sworn_end_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结拜结束推送
i3k_sbean.sworn_end_push = i3k_class("sworn_end_push")
function i3k_sbean.sworn_end_push:ctor()
	self._pname_ = "sworn_end_push"
	--self.prefix:		string	
end

function i3k_sbean.sworn_end_push:clone()
	return clone(self)
end

function i3k_sbean.sworn_end_push:decode(is)
	is:popString()
	self.prefix = is:popString()
end

function i3k_sbean.sworn_end_push:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.prefix)
end


-- 结拜添加角色
i3k_sbean.sworn_add_role_res = i3k_class("sworn_add_role_res")
function i3k_sbean.sworn_add_role_res:ctor()
	self._pname_ = "sworn_add_role_res"
	--self.ok:		int32	
end

function i3k_sbean.sworn_add_role_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_add_role_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sworn_add_role_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结拜踢出角色
i3k_sbean.sworn_kick_role_res = i3k_class("sworn_kick_role_res")
function i3k_sbean.sworn_kick_role_res:ctor()
	self._pname_ = "sworn_kick_role_res"
	--self.ok:		int32	
end

function i3k_sbean.sworn_kick_role_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_kick_role_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sworn_kick_role_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结拜同步
i3k_sbean.sworn_sync_res = i3k_class("sworn_sync_res")
function i3k_sbean.sworn_sync_res:ctor()
	self._pname_ = "sworn_sync_res"
	--self.data:		SwornTransformData	
	--self.roleData:		DBRoleSworn	
end

function i3k_sbean.sworn_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_sync_res:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.SwornTransformData)
	self.roleData = is:pop(i3k_sbean.DBRoleSworn)
end

function i3k_sbean.sworn_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
	os:push(self.roleData)
end


-- 修改结拜前缀
i3k_sbean.sworn_change_prefix_res = i3k_class("sworn_change_prefix_res")
function i3k_sbean.sworn_change_prefix_res:ctor()
	self._pname_ = "sworn_change_prefix_res"
	--self.ok:		int32	
end

function i3k_sbean.sworn_change_prefix_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_change_prefix_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sworn_change_prefix_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 修改结拜后缀
i3k_sbean.sworn_change_suffix_res = i3k_class("sworn_change_suffix_res")
function i3k_sbean.sworn_change_suffix_res:ctor()
	self._pname_ = "sworn_change_suffix_res"
	--self.ok:		int32	
end

function i3k_sbean.sworn_change_suffix_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_change_suffix_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sworn_change_suffix_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步结拜信息
i3k_sbean.login_sync_sworn = i3k_class("login_sync_sworn")
function i3k_sbean.login_sync_sworn:ctor()
	self._pname_ = "login_sync_sworn"
end

function i3k_sbean.login_sync_sworn:decode(is)
	is:popString()
end

function i3k_sbean.login_sync_sworn:encode(os)
	os:pushString(self._pname_)
end


-- 领取结拜活跃奖励
i3k_sbean.sworn_activity_reward_take_res = i3k_class("sworn_activity_reward_take_res")
function i3k_sbean.sworn_activity_reward_take_res:ctor()
	self._pname_ = "sworn_activity_reward_take_res"
	--self.ok:		int32	
	--self.drops:		map[int32, int32]	
end

function i3k_sbean.sworn_activity_reward_take_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_activity_reward_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popNumberNumberMap()
end

function i3k_sbean.sworn_activity_reward_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberNumberMap(self.drops)
end


-- 使用结拜金兰值道具
i3k_sbean.use_sworn_gift_item_res = i3k_class("use_sworn_gift_item_res")
function i3k_sbean.use_sworn_gift_item_res:ctor()
	self._pname_ = "use_sworn_gift_item_res"
	--self.ok:		int32	
end

function i3k_sbean.use_sworn_gift_item_res:clone()
	return clone(self)
end

function i3k_sbean.use_sworn_gift_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.use_sworn_gift_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结拜助战奖励领取
i3k_sbean.sworn_help_map_reward_take_res = i3k_class("sworn_help_map_reward_take_res")
function i3k_sbean.sworn_help_map_reward_take_res:ctor()
	self._pname_ = "sworn_help_map_reward_take_res"
	--self.ok:		int32	
end

function i3k_sbean.sworn_help_map_reward_take_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_help_map_reward_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sworn_help_map_reward_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 退出结拜
i3k_sbean.sworn_leave_res = i3k_class("sworn_leave_res")
function i3k_sbean.sworn_leave_res:ctor()
	self._pname_ = "sworn_leave_res"
	--self.ok:		int32	
end

function i3k_sbean.sworn_leave_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_leave_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sworn_leave_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结拜解散推送
i3k_sbean.sworn_leave_push = i3k_class("sworn_leave_push")
function i3k_sbean.sworn_leave_push:ctor()
	self._pname_ = "sworn_leave_push"
end

function i3k_sbean.sworn_leave_push:decode(is)
	is:popString()
end

function i3k_sbean.sworn_leave_push:encode(os)
	os:pushString(self._pname_)
end


-- 退出结拜操作通知
i3k_sbean.sworn_step_early_end_push = i3k_class("sworn_step_early_end_push")
function i3k_sbean.sworn_step_early_end_push:ctor()
	self._pname_ = "sworn_step_early_end_push"
	--self.roleId:		int32	
	--self.errorCode:		int32	
end

function i3k_sbean.sworn_step_early_end_push:clone()
	return clone(self)
end

function i3k_sbean.sworn_step_early_end_push:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.errorCode = is:popNumber()
end

function i3k_sbean.sworn_step_early_end_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.errorCode)
end


-- 登陆同步角色结拜存储
i3k_sbean.login_sync_sworn_role_data = i3k_class("login_sync_sworn_role_data")
function i3k_sbean.login_sync_sworn_role_data:ctor()
	self._pname_ = "login_sync_sworn_role_data"
	--self.data:		DBRoleSworn	
end

function i3k_sbean.login_sync_sworn_role_data:clone()
	return clone(self)
end

function i3k_sbean.login_sync_sworn_role_data:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBRoleSworn)
end

function i3k_sbean.login_sync_sworn_role_data:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 同步结拜助战完成次数
i3k_sbean.login_sync_sworn_help_times = i3k_class("login_sync_sworn_help_times")
function i3k_sbean.login_sync_sworn_help_times:ctor()
	self._pname_ = "login_sync_sworn_help_times"
	--self.mapTimes:		SwornMapTimes	
end

function i3k_sbean.login_sync_sworn_help_times:clone()
	return clone(self)
end

function i3k_sbean.login_sync_sworn_help_times:decode(is)
	is:popString()
	self.mapTimes = is:pop(i3k_sbean.SwornMapTimes)
end

function i3k_sbean.login_sync_sworn_help_times:encode(os)
	os:pushString(self._pname_)
	os:push(self.mapTimes)
end


-- 修改寄语
i3k_sbean.set_gift_string_res = i3k_class("set_gift_string_res")
function i3k_sbean.set_gift_string_res:ctor()
	self._pname_ = "set_gift_string_res"
	--self.ok:		int32	
end

function i3k_sbean.set_gift_string_res:clone()
	return clone(self)
end

function i3k_sbean.set_gift_string_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.set_gift_string_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步金兰证
i3k_sbean.sworn_card_sync_res = i3k_class("sworn_card_sync_res")
function i3k_sbean.sworn_card_sync_res:ctor()
	self._pname_ = "sworn_card_sync_res"
	--self.card:		SwornCard	
end

function i3k_sbean.sworn_card_sync_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_card_sync_res:decode(is)
	is:popString()
	self.card = is:pop(i3k_sbean.SwornCard)
end

function i3k_sbean.sworn_card_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.card)
end


-- 点赞金兰证
i3k_sbean.sworn_card_sign_res = i3k_class("sworn_card_sign_res")
function i3k_sbean.sworn_card_sign_res:ctor()
	self._pname_ = "sworn_card_sign_res"
	--self.ok:		int32	
end

function i3k_sbean.sworn_card_sign_res:clone()
	return clone(self)
end

function i3k_sbean.sworn_card_sign_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sworn_card_sign_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成成就任务
i3k_sbean.finish_achievement_task_res = i3k_class("finish_achievement_task_res")
function i3k_sbean.finish_achievement_task_res:ctor()
	self._pname_ = "finish_achievement_task_res"
	--self.ok:		int32	
end

function i3k_sbean.finish_achievement_task_res:clone()
	return clone(self)
end

function i3k_sbean.finish_achievement_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.finish_achievement_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取成就点奖励
i3k_sbean.take_achievement_point_reward_res = i3k_class("take_achievement_point_reward_res")
function i3k_sbean.take_achievement_point_reward_res:ctor()
	self._pname_ = "take_achievement_point_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.take_achievement_point_reward_res:clone()
	return clone(self)
end

function i3k_sbean.take_achievement_point_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.take_achievement_point_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 结拜红点
i3k_sbean.sworn_point = i3k_class("sworn_point")
function i3k_sbean.sworn_point:ctor()
	self._pname_ = "sworn_point"
end

function i3k_sbean.sworn_point:decode(is)
	is:popString()
end

function i3k_sbean.sworn_point:encode(os)
	os:pushString(self._pname_)
end


-- 同步武诀信息
i3k_sbean.login_sync_skill_formula = i3k_class("login_sync_skill_formula")
function i3k_sbean.login_sync_skill_formula:ctor()
	self._pname_ = "login_sync_skill_formula"
	--self.data:		DBSkillFormula	
end

function i3k_sbean.login_sync_skill_formula:clone()
	return clone(self)
end

function i3k_sbean.login_sync_skill_formula:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBSkillFormula)
end

function i3k_sbean.login_sync_skill_formula:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 使用武诀经验道具
i3k_sbean.use_skill_formula_exp_item_res = i3k_class("use_skill_formula_exp_item_res")
function i3k_sbean.use_skill_formula_exp_item_res:ctor()
	self._pname_ = "use_skill_formula_exp_item_res"
	--self.ok:		int32	
end

function i3k_sbean.use_skill_formula_exp_item_res:clone()
	return clone(self)
end

function i3k_sbean.use_skill_formula_exp_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.use_skill_formula_exp_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 武诀升阶
i3k_sbean.skill_formula_up_rank_res = i3k_class("skill_formula_up_rank_res")
function i3k_sbean.skill_formula_up_rank_res:ctor()
	self._pname_ = "skill_formula_up_rank_res"
	--self.ok:		int32	
end

function i3k_sbean.skill_formula_up_rank_res:clone()
	return clone(self)
end

function i3k_sbean.skill_formula_up_rank_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.skill_formula_up_rank_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 武诀技能升级
i3k_sbean.skill_formula_skill_level_up_res = i3k_class("skill_formula_skill_level_up_res")
function i3k_sbean.skill_formula_skill_level_up_res:ctor()
	self._pname_ = "skill_formula_skill_level_up_res"
	--self.ok:		int32	
end

function i3k_sbean.skill_formula_skill_level_up_res:clone()
	return clone(self)
end

function i3k_sbean.skill_formula_skill_level_up_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.skill_formula_skill_level_up_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 武诀开启
i3k_sbean.skill_formula_open_res = i3k_class("skill_formula_open_res")
function i3k_sbean.skill_formula_open_res:ctor()
	self._pname_ = "skill_formula_open_res"
	--self.ok:		int32	
end

function i3k_sbean.skill_formula_open_res:clone()
	return clone(self)
end

function i3k_sbean.skill_formula_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.skill_formula_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 武诀信息同步
i3k_sbean.skill_formula_sync_res = i3k_class("skill_formula_sync_res")
function i3k_sbean.skill_formula_sync_res:ctor()
	self._pname_ = "skill_formula_sync_res"
	--self.data:		DBSkillFormula	
end

function i3k_sbean.skill_formula_sync_res:clone()
	return clone(self)
end

function i3k_sbean.skill_formula_sync_res:decode(is)
	is:popString()
	self.data = is:pop(i3k_sbean.DBSkillFormula)
end

function i3k_sbean.skill_formula_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.data)
end


-- 武诀潜魂升级
i3k_sbean.skill_formula_hidden_soul_uplvl_res = i3k_class("skill_formula_hidden_soul_uplvl_res")
function i3k_sbean.skill_formula_hidden_soul_uplvl_res:ctor()
	self._pname_ = "skill_formula_hidden_soul_uplvl_res"
	--self.ok:		int32	
end

function i3k_sbean.skill_formula_hidden_soul_uplvl_res:clone()
	return clone(self)
end

function i3k_sbean.skill_formula_hidden_soul_uplvl_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.skill_formula_hidden_soul_uplvl_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录同步幻形信息
i3k_sbean.role_transform_info = i3k_class("role_transform_info")
function i3k_sbean.role_transform_info:ctor()
	self._pname_ = "role_transform_info"
	--self.info:		DBRoleTransform	
end

function i3k_sbean.role_transform_info:clone()
	return clone(self)
end

function i3k_sbean.role_transform_info:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleTransform)
end

function i3k_sbean.role_transform_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 激活幻形
i3k_sbean.transform_active_res = i3k_class("transform_active_res")
function i3k_sbean.transform_active_res:ctor()
	self._pname_ = "transform_active_res"
	--self.ok:		int32	
end

function i3k_sbean.transform_active_res:clone()
	return clone(self)
end

function i3k_sbean.transform_active_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.transform_active_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置当前幻形
i3k_sbean.transform_set_res = i3k_class("transform_set_res")
function i3k_sbean.transform_set_res:ctor()
	self._pname_ = "transform_set_res"
	--self.ok:		int32	
end

function i3k_sbean.transform_set_res:clone()
	return clone(self)
end

function i3k_sbean.transform_set_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.transform_set_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用当前幻形(这个协议只是请求服务器修改数据, 客户端修改数据由服务器通知role_transform_use)
i3k_sbean.transform_use_res = i3k_class("transform_use_res")
function i3k_sbean.transform_use_res:ctor()
	self._pname_ = "transform_use_res"
	--self.ok:		int32	
end

function i3k_sbean.transform_use_res:clone()
	return clone(self)
end

function i3k_sbean.transform_use_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.transform_use_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.role_transform_use = i3k_class("role_transform_use")
function i3k_sbean.role_transform_use:ctor()
	self._pname_ = "role_transform_use"
	--self.use:		int32	
end

function i3k_sbean.role_transform_use:clone()
	return clone(self)
end

function i3k_sbean.role_transform_use:decode(is)
	is:popString()
	self.use = is:popNumber()
end

function i3k_sbean.role_transform_use:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.use)
end


-- 打开界面同步信息
i3k_sbean.maze_sync_res = i3k_class("maze_sync_res")
function i3k_sbean.maze_sync_res:ctor()
	self._pname_ = "maze_sync_res"
	--self.dayEnterTimes:		int32	
	--self.lastJoinTime:		int32	
end

function i3k_sbean.maze_sync_res:clone()
	return clone(self)
end

function i3k_sbean.maze_sync_res:decode(is)
	is:popString()
	self.dayEnterTimes = is:popNumber()
	self.lastJoinTime = is:popNumber()
end

function i3k_sbean.maze_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.lastJoinTime)
end


-- 参加天魔迷宫
i3k_sbean.maze_join_res = i3k_class("maze_join_res")
function i3k_sbean.maze_join_res:ctor()
	self._pname_ = "maze_join_res"
	--self.ok:		int32	
end

function i3k_sbean.maze_join_res:clone()
	return clone(self)
end

function i3k_sbean.maze_join_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.maze_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入传送阵
i3k_sbean.maze_transfer_res = i3k_class("maze_transfer_res")
function i3k_sbean.maze_transfer_res:ctor()
	self._pname_ = "maze_transfer_res"
	--self.ok:		int32	
end

function i3k_sbean.maze_transfer_res:clone()
	return clone(self)
end

function i3k_sbean.maze_transfer_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.maze_transfer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步当前收益
i3k_sbean.maze_commongain_res = i3k_class("maze_commongain_res")
function i3k_sbean.maze_commongain_res:ctor()
	self._pname_ = "maze_commongain_res"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.maze_commongain_res:clone()
	return clone(self)
end

function i3k_sbean.maze_commongain_res:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.maze_commongain_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 同步额外收益
i3k_sbean.maze_extragain_res = i3k_class("maze_extragain_res")
function i3k_sbean.maze_extragain_res:ctor()
	self._pname_ = "maze_extragain_res"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.maze_extragain_res:clone()
	return clone(self)
end

function i3k_sbean.maze_extragain_res:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.maze_extragain_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 添加传送道具数量
i3k_sbean.maze_transfer_item_add = i3k_class("maze_transfer_item_add")
function i3k_sbean.maze_transfer_item_add:ctor()
	self._pname_ = "maze_transfer_item_add"
	--self.add:		int32	
end

function i3k_sbean.maze_transfer_item_add:clone()
	return clone(self)
end

function i3k_sbean.maze_transfer_item_add:decode(is)
	is:popString()
	self.add = is:popNumber()
end

function i3k_sbean.maze_transfer_item_add:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.add)
end


-- 特殊事件通知客户端
i3k_sbean.maze_sync_trig_event = i3k_class("maze_sync_trig_event")
function i3k_sbean.maze_sync_trig_event:ctor()
	self._pname_ = "maze_sync_trig_event"
	--self.eventType:		int32	
	--self.param:		int32	
end

function i3k_sbean.maze_sync_trig_event:clone()
	return clone(self)
end

function i3k_sbean.maze_sync_trig_event:decode(is)
	is:popString()
	self.eventType = is:popNumber()
	self.param = is:popNumber()
end

function i3k_sbean.maze_sync_trig_event:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eventType)
	os:pushNumber(self.param)
end


-- 特殊事件通知客户端
i3k_sbean.maze_sync_kill_times = i3k_class("maze_sync_kill_times")
function i3k_sbean.maze_sync_kill_times:ctor()
	self._pname_ = "maze_sync_kill_times"
	--self.times:		int32	
end

function i3k_sbean.maze_sync_kill_times:clone()
	return clone(self)
end

function i3k_sbean.maze_sync_kill_times:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.maze_sync_kill_times:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 进入地图(重连)同步信息
i3k_sbean.role_maze_sync = i3k_class("role_maze_sync")
function i3k_sbean.role_maze_sync:ctor()
	self._pname_ = "role_maze_sync"
	--self.curZoneID:		int32	
	--self.startTime:		int32	
	--self.transferItemCnt:		int32	
	--self.zoneMineralTimes:		int32	
	--self.killTimes:		int32	
	--self.totalExp:		int64	
end

function i3k_sbean.role_maze_sync:clone()
	return clone(self)
end

function i3k_sbean.role_maze_sync:decode(is)
	is:popString()
	self.curZoneID = is:popNumber()
	self.startTime = is:popNumber()
	self.transferItemCnt = is:popNumber()
	self.zoneMineralTimes = is:popNumber()
	self.killTimes = is:popNumber()
	self.totalExp = is:popNumber()
end

function i3k_sbean.role_maze_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.curZoneID)
	os:pushNumber(self.startTime)
	os:pushNumber(self.transferItemCnt)
	os:pushNumber(self.zoneMineralTimes)
	os:pushNumber(self.killTimes)
	os:pushNumber(self.totalExp)
end


-- 通知客户端天魔迷宫开始
i3k_sbean.role_maze_start = i3k_class("role_maze_start")
function i3k_sbean.role_maze_start:ctor()
	self._pname_ = "role_maze_start"
	--self.firstEnter:		int32	
end

function i3k_sbean.role_maze_start:clone()
	return clone(self)
end

function i3k_sbean.role_maze_start:decode(is)
	is:popString()
	self.firstEnter = is:popNumber()
end

function i3k_sbean.role_maze_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.firstEnter)
end


-- 通知客户端天魔迷宫结束
i3k_sbean.role_maze_end = i3k_class("role_maze_end")
function i3k_sbean.role_maze_end:ctor()
	self._pname_ = "role_maze_end"
end

function i3k_sbean.role_maze_end:decode(is)
	is:popString()
end

function i3k_sbean.role_maze_end:encode(os)
	os:pushString(self._pname_)
end


-- map进入地图同步信息
i3k_sbean.practicegate_map_info = i3k_class("practicegate_map_info")
function i3k_sbean.practicegate_map_info:ctor()
	self._pname_ = "practicegate_map_info"
	--self.addBuffs:		map[int32, int32]	
	--self.monsterRound:		int32	
end

function i3k_sbean.practicegate_map_info:clone()
	return clone(self)
end

function i3k_sbean.practicegate_map_info:decode(is)
	is:popString()
	self.addBuffs = is:popNumberNumberMap()
	self.monsterRound = is:popNumber()
end

function i3k_sbean.practicegate_map_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.addBuffs)
	os:pushNumber(self.monsterRound)
end


-- 登陆同步节日任务
i3k_sbean.role_festival_tasks = i3k_class("role_festival_tasks")
function i3k_sbean.role_festival_tasks:ctor()
	self._pname_ = "role_festival_tasks"
	--self.tasks:		map[int32, DBFestivalTaskGroup]	
end

function i3k_sbean.role_festival_tasks:clone()
	return clone(self)
end

function i3k_sbean.role_festival_tasks:decode(is)
	is:popString()
	self.tasks = is:popNumberMap(i3k_sbean.DBFestivalTaskGroup)
end

function i3k_sbean.role_festival_tasks:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.tasks)
end


-- 开始节日任务
i3k_sbean.festival_task_enter_res = i3k_class("festival_task_enter_res")
function i3k_sbean.festival_task_enter_res:ctor()
	self._pname_ = "festival_task_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.festival_task_enter_res:clone()
	return clone(self)
end

function i3k_sbean.festival_task_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.festival_task_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取节日任务
i3k_sbean.festival_task_accept_res = i3k_class("festival_task_accept_res")
function i3k_sbean.festival_task_accept_res:ctor()
	self._pname_ = "festival_task_accept_res"
	--self.ok:		int32	
end

function i3k_sbean.festival_task_accept_res:clone()
	return clone(self)
end

function i3k_sbean.festival_task_accept_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.festival_task_accept_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成节日任务
i3k_sbean.festival_task_finish_res = i3k_class("festival_task_finish_res")
function i3k_sbean.festival_task_finish_res:ctor()
	self._pname_ = "festival_task_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.festival_task_finish_res:clone()
	return clone(self)
end

function i3k_sbean.festival_task_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.festival_task_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 记录任务访问点
i3k_sbean.task_log_point_res = i3k_class("task_log_point_res")
function i3k_sbean.task_log_point_res:ctor()
	self._pname_ = "task_log_point_res"
	--self.ok:		int32	
end

function i3k_sbean.task_log_point_res:clone()
	return clone(self)
end

function i3k_sbean.task_log_point_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_log_point_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 客户端计算任务请求
i3k_sbean.client_log_task_res = i3k_class("client_log_task_res")
function i3k_sbean.client_log_task_res:ctor()
	self._pname_ = "client_log_task_res"
	--self.ok:		int32	
end

function i3k_sbean.client_log_task_res:clone()
	return clone(self)
end

function i3k_sbean.client_log_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.client_log_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录同步骑战装备
i3k_sbean.steed_equip_login_sync = i3k_class("steed_equip_login_sync")
function i3k_sbean.steed_equip_login_sync:ctor()
	self._pname_ = "steed_equip_login_sync"
	--self.info:		DBRoleSteedEquip	
end

function i3k_sbean.steed_equip_login_sync:clone()
	return clone(self)
end

function i3k_sbean.steed_equip_login_sync:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleSteedEquip)
end

function i3k_sbean.steed_equip_login_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 穿骑战装备
i3k_sbean.dress_steed_equip_res = i3k_class("dress_steed_equip_res")
function i3k_sbean.dress_steed_equip_res:ctor()
	self._pname_ = "dress_steed_equip_res"
	--self.ok:		int32	
end

function i3k_sbean.dress_steed_equip_res:clone()
	return clone(self)
end

function i3k_sbean.dress_steed_equip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.dress_steed_equip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 脱骑战装备
i3k_sbean.takeoff_steed_equip_res = i3k_class("takeoff_steed_equip_res")
function i3k_sbean.takeoff_steed_equip_res:ctor()
	self._pname_ = "takeoff_steed_equip_res"
	--self.ok:		int32	
end

function i3k_sbean.takeoff_steed_equip_res:clone()
	return clone(self)
end

function i3k_sbean.takeoff_steed_equip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.takeoff_steed_equip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 激活骑战套装
i3k_sbean.unlock_steed_equip_suit_res = i3k_class("unlock_steed_equip_suit_res")
function i3k_sbean.unlock_steed_equip_suit_res:ctor()
	self._pname_ = "unlock_steed_equip_suit_res"
	--self.ok:		int32	
end

function i3k_sbean.unlock_steed_equip_suit_res:clone()
	return clone(self)
end

function i3k_sbean.unlock_steed_equip_suit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.unlock_steed_equip_suit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 制作骑战装备
i3k_sbean.steed_equip_create_res = i3k_class("steed_equip_create_res")
function i3k_sbean.steed_equip_create_res:ctor()
	self._pname_ = "steed_equip_create_res"
	--self.ok:		int32	
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.steed_equip_create_res:clone()
	return clone(self)
end

function i3k_sbean.steed_equip_create_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.steed_equip_create_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.items)
end


-- 熔炼骑战装备
i3k_sbean.steed_equip_destory_res = i3k_class("steed_equip_destory_res")
function i3k_sbean.steed_equip_destory_res:ctor()
	self._pname_ = "steed_equip_destory_res"
	--self.ok:		int32	
end

function i3k_sbean.steed_equip_destory_res:clone()
	return clone(self)
end

function i3k_sbean.steed_equip_destory_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.steed_equip_destory_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 灵签登陆同步
i3k_sbean.lingqian_sync = i3k_class("lingqian_sync")
function i3k_sbean.lingqian_sync:ctor()
	self._pname_ = "lingqian_sync"
	--self.useCnt:		map[int32, int32]	
end

function i3k_sbean.lingqian_sync:clone()
	return clone(self)
end

function i3k_sbean.lingqian_sync:decode(is)
	is:popString()
	self.useCnt = is:popNumberNumberMap()
end

function i3k_sbean.lingqian_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.useCnt)
end


-- 灵签抽签
i3k_sbean.lingqian_get_res = i3k_class("lingqian_get_res")
function i3k_sbean.lingqian_get_res:ctor()
	self._pname_ = "lingqian_get_res"
	--self.ok:		int32	
	--self.dropID:		int32	
end

function i3k_sbean.lingqian_get_res:clone()
	return clone(self)
end

function i3k_sbean.lingqian_get_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.dropID = is:popNumber()
end

function i3k_sbean.lingqian_get_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.dropID)
end


-- 打开界面同步消息
i3k_sbean.money_tree_open_res = i3k_class("money_tree_open_res")
function i3k_sbean.money_tree_open_res:ctor()
	self._pname_ = "money_tree_open_res"
	--self.moneyTree:		DBRoleMoneyTree	
end

function i3k_sbean.money_tree_open_res:clone()
	return clone(self)
end

function i3k_sbean.money_tree_open_res:decode(is)
	is:popString()
	self.moneyTree = is:pop(i3k_sbean.DBRoleMoneyTree)
end

function i3k_sbean.money_tree_open_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.moneyTree)
end


-- 每日摇一摇
i3k_sbean.money_tree_shake_res = i3k_class("money_tree_shake_res")
function i3k_sbean.money_tree_shake_res:ctor()
	self._pname_ = "money_tree_shake_res"
	--self.ok:		int32	
	--self.rewards:		vector[DummyGoods]	
end

function i3k_sbean.money_tree_shake_res:clone()
	return clone(self)
end

function i3k_sbean.money_tree_shake_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.money_tree_shake_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.rewards)
end


-- 领取累计奖励
i3k_sbean.money_tree_get_add_up_res = i3k_class("money_tree_get_add_up_res")
function i3k_sbean.money_tree_get_add_up_res:ctor()
	self._pname_ = "money_tree_get_add_up_res"
	--self.ok:		int32	
end

function i3k_sbean.money_tree_get_add_up_res:clone()
	return clone(self)
end

function i3k_sbean.money_tree_get_add_up_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.money_tree_get_add_up_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开启家园宠物位置
i3k_sbean.homeland_pet_position_open_res = i3k_class("homeland_pet_position_open_res")
function i3k_sbean.homeland_pet_position_open_res:ctor()
	self._pname_ = "homeland_pet_position_open_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_pet_position_open_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_pet_position_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 设置家园宠物
i3k_sbean.homeland_pet_position_set_res = i3k_class("homeland_pet_position_set_res")
function i3k_sbean.homeland_pet_position_set_res:ctor()
	self._pname_ = "homeland_pet_position_set_res"
	--self.ok:		int32	
end

function i3k_sbean.homeland_pet_position_set_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_set_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.homeland_pet_position_set_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 家园宠物互动
i3k_sbean.homeland_pet_position_action_res = i3k_class("homeland_pet_position_action_res")
function i3k_sbean.homeland_pet_position_action_res:ctor()
	self._pname_ = "homeland_pet_position_action_res"
	--self.ok:		int32	
	--self.rewards:		vector[DummyGoods]	
	--self.mood:		int32	
end

function i3k_sbean.homeland_pet_position_action_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_action_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popList(i3k_sbean.DummyGoods)
	self.mood = is:popNumber()
end

function i3k_sbean.homeland_pet_position_action_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.rewards)
	os:pushNumber(self.mood)
end


-- 家园宠物一键互动
i3k_sbean.homeland_pet_position_onekey_action_res = i3k_class("homeland_pet_position_onekey_action_res")
function i3k_sbean.homeland_pet_position_onekey_action_res:ctor()
	self._pname_ = "homeland_pet_position_onekey_action_res"
	--self.ok:		int32	
	--self.rewards:		vector[DummyGoods]	
	--self.moods:		map[int32, int32]	
end

function i3k_sbean.homeland_pet_position_onekey_action_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_onekey_action_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popList(i3k_sbean.DummyGoods)
	self.moods = is:popNumberNumberMap()
end

function i3k_sbean.homeland_pet_position_onekey_action_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.rewards)
	os:pushNumberNumberMap(self.moods)
end


-- 家园宠物领奖
i3k_sbean.homeland_pet_position_reward_res = i3k_class("homeland_pet_position_reward_res")
function i3k_sbean.homeland_pet_position_reward_res:ctor()
	self._pname_ = "homeland_pet_position_reward_res"
	--self.ok:		int32	
	--self.rewards:		vector[DummyGoods]	
end

function i3k_sbean.homeland_pet_position_reward_res:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.homeland_pet_position_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.rewards)
end


-- 更新家园宠物
i3k_sbean.homeland_pet_position_update = i3k_class("homeland_pet_position_update")
function i3k_sbean.homeland_pet_position_update:ctor()
	self._pname_ = "homeland_pet_position_update"
	--self.id:		int32	
	--self.position:		DBHomelandPetPosition	
end

function i3k_sbean.homeland_pet_position_update:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_update:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.position = is:pop(i3k_sbean.DBHomelandPetPosition)
end

function i3k_sbean.homeland_pet_position_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:push(self.position)
end


-- 家园宠物领奖
i3k_sbean.homeland_pet_position_query_info = i3k_class("homeland_pet_position_query_info")
function i3k_sbean.homeland_pet_position_query_info:ctor()
	self._pname_ = "homeland_pet_position_query_info"
	--self.pets:		map[int32, EnterEntity]	
end

function i3k_sbean.homeland_pet_position_query_info:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_query_info:decode(is)
	is:popString()
	self.pets = is:popNumberMap(i3k_sbean.EnterEntity)
end

function i3k_sbean.homeland_pet_position_query_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.pets)
end


-- 进入随时随地副本
i3k_sbean.anywhere_map_enter_res = i3k_class("anywhere_map_enter_res")
function i3k_sbean.anywhere_map_enter_res:ctor()
	self._pname_ = "anywhere_map_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.anywhere_map_enter_res:clone()
	return clone(self)
end

function i3k_sbean.anywhere_map_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.anywhere_map_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 传送至随时随地副本
i3k_sbean.anywhere_map_point_transfer_res = i3k_class("anywhere_map_point_transfer_res")
function i3k_sbean.anywhere_map_point_transfer_res:ctor()
	self._pname_ = "anywhere_map_point_transfer_res"
	--self.ok:		int32	
end

function i3k_sbean.anywhere_map_point_transfer_res:clone()
	return clone(self)
end

function i3k_sbean.anywhere_map_point_transfer_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.anywhere_map_point_transfer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录同步舞会信息
i3k_sbean.role_danceparty = i3k_class("role_danceparty")
function i3k_sbean.role_danceparty:ctor()
	self._pname_ = "role_danceparty"
	--self.dayAddExpTimes:		int32	
	--self.dayAddExps:		int32	
end

function i3k_sbean.role_danceparty:clone()
	return clone(self)
end

function i3k_sbean.role_danceparty:decode(is)
	is:popString()
	self.dayAddExpTimes = is:popNumber()
	self.dayAddExps = is:popNumber()
end

function i3k_sbean.role_danceparty:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayAddExpTimes)
	os:pushNumber(self.dayAddExps)
end


-- 舞会获得经验
i3k_sbean.danceparty_addexp = i3k_class("danceparty_addexp")
function i3k_sbean.danceparty_addexp:ctor()
	self._pname_ = "danceparty_addexp"
	--self.exp:		int32	
	--self.reward:		map[int32, int32]	
end

function i3k_sbean.danceparty_addexp:clone()
	return clone(self)
end

function i3k_sbean.danceparty_addexp:decode(is)
	is:popString()
	self.exp = is:popNumber()
	self.reward = is:popNumberNumberMap()
end

function i3k_sbean.danceparty_addexp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.exp)
	os:pushNumberNumberMap(self.reward)
end


-- 开启灵墟寻路
i3k_sbean.soaring_position_open_res = i3k_class("soaring_position_open_res")
function i3k_sbean.soaring_position_open_res:ctor()
	self._pname_ = "soaring_position_open_res"
	--self.ok:		int32	
end

function i3k_sbean.soaring_position_open_res:clone()
	return clone(self)
end

function i3k_sbean.soaring_position_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.soaring_position_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入灵墟
i3k_sbean.soaring_map_enter_res = i3k_class("soaring_map_enter_res")
function i3k_sbean.soaring_map_enter_res:ctor()
	self._pname_ = "soaring_map_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.soaring_map_enter_res:clone()
	return clone(self)
end

function i3k_sbean.soaring_map_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.soaring_map_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开启飞升
i3k_sbean.soaring_task_open_res = i3k_class("soaring_task_open_res")
function i3k_sbean.soaring_task_open_res:ctor()
	self._pname_ = "soaring_task_open_res"
	--self.ok:		int32	
end

function i3k_sbean.soaring_task_open_res:clone()
	return clone(self)
end

function i3k_sbean.soaring_task_open_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.soaring_task_open_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成飞升
i3k_sbean.soaring_task_finish_res = i3k_class("soaring_task_finish_res")
function i3k_sbean.soaring_task_finish_res:ctor()
	self._pname_ = "soaring_task_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.soaring_task_finish_res:clone()
	return clone(self)
end

function i3k_sbean.soaring_task_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.soaring_task_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步飞升
i3k_sbean.soaring_login_sync = i3k_class("soaring_login_sync")
function i3k_sbean.soaring_login_sync:ctor()
	self._pname_ = "soaring_login_sync"
	--self.soarings:		map[int32, DBSoaring]	
	--self.display:		DBRoleExtraDisplay	
	--self.mainSoaring:		DBMainSoaring	
end

function i3k_sbean.soaring_login_sync:clone()
	return clone(self)
end

function i3k_sbean.soaring_login_sync:decode(is)
	is:popString()
	self.soarings = is:popNumberMap(i3k_sbean.DBSoaring)
	self.display = is:pop(i3k_sbean.DBRoleExtraDisplay)
	self.mainSoaring = is:pop(i3k_sbean.DBMainSoaring)
end

function i3k_sbean.soaring_login_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.soarings)
	os:push(self.display)
	os:push(self.mainSoaring)
end


-- 解锁脚底特效
i3k_sbean.footeffect_unlock_res = i3k_class("footeffect_unlock_res")
function i3k_sbean.footeffect_unlock_res:ctor()
	self._pname_ = "footeffect_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.footeffect_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.footeffect_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.footeffect_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 选择脚底特效
i3k_sbean.footeffect_select_res = i3k_class("footeffect_select_res")
function i3k_sbean.footeffect_select_res:ctor()
	self._pname_ = "footeffect_select_res"
	--self.ok:		int32	
end

function i3k_sbean.footeffect_select_res:clone()
	return clone(self)
end

function i3k_sbean.footeffect_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.footeffect_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 脚底特效同步
i3k_sbean.footeffect_sync_res = i3k_class("footeffect_sync_res")
function i3k_sbean.footeffect_sync_res:ctor()
	self._pname_ = "footeffect_sync_res"
	--self.info:		DBRoleSoaringDisplay	
end

function i3k_sbean.footeffect_sync_res:clone()
	return clone(self)
end

function i3k_sbean.footeffect_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleSoaringDisplay)
end

function i3k_sbean.footeffect_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 选择外显
i3k_sbean.weapondisplay_select_res = i3k_class("weapondisplay_select_res")
function i3k_sbean.weapondisplay_select_res:ctor()
	self._pname_ = "weapondisplay_select_res"
	--self.ok:		int32	
end

function i3k_sbean.weapondisplay_select_res:clone()
	return clone(self)
end

function i3k_sbean.weapondisplay_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.weapondisplay_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 飞升装备推送
i3k_sbean.soaring_equip_push = i3k_class("soaring_equip_push")
function i3k_sbean.soaring_equip_push:ctor()
	self._pname_ = "soaring_equip_push"
	--self.id:		int32	
	--self.guid:		string	
	--self.equip:		DBEquip	
end

function i3k_sbean.soaring_equip_push:clone()
	return clone(self)
end

function i3k_sbean.soaring_equip_push:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
	self.equip = is:pop(i3k_sbean.DBEquip)
end

function i3k_sbean.soaring_equip_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
	os:push(self.equip)
end


-- 接取飞升任务
i3k_sbean.soaring_day_task_take_res = i3k_class("soaring_day_task_take_res")
function i3k_sbean.soaring_day_task_take_res:ctor()
	self._pname_ = "soaring_day_task_take_res"
	--self.ok:		int32	
end

function i3k_sbean.soaring_day_task_take_res:clone()
	return clone(self)
end

function i3k_sbean.soaring_day_task_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.soaring_day_task_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成飞升任务
i3k_sbean.soaring_day_task_finish_res = i3k_class("soaring_day_task_finish_res")
function i3k_sbean.soaring_day_task_finish_res:ctor()
	self._pname_ = "soaring_day_task_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.soaring_day_task_finish_res:clone()
	return clone(self)
end

function i3k_sbean.soaring_day_task_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.soaring_day_task_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 快速完成飞升任务
i3k_sbean.soaring_day_task_quick_finish_res = i3k_class("soaring_day_task_quick_finish_res")
function i3k_sbean.soaring_day_task_quick_finish_res:ctor()
	self._pname_ = "soaring_day_task_quick_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.soaring_day_task_quick_finish_res:clone()
	return clone(self)
end

function i3k_sbean.soaring_day_task_quick_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.soaring_day_task_quick_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 新的飞升环任务同步
i3k_sbean.soaring_day_task_next = i3k_class("soaring_day_task_next")
function i3k_sbean.soaring_day_task_next:ctor()
	self._pname_ = "soaring_day_task_next"
	--self.id:		int32	
end

function i3k_sbean.soaring_day_task_next:clone()
	return clone(self)
end

function i3k_sbean.soaring_day_task_next:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.soaring_day_task_next:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 使用提升飞升经验道具
i3k_sbean.soaring_use_exp_item_res = i3k_class("soaring_use_exp_item_res")
function i3k_sbean.soaring_use_exp_item_res:ctor()
	self._pname_ = "soaring_use_exp_item_res"
	--self.ok:		int32	
end

function i3k_sbean.soaring_use_exp_item_res:clone()
	return clone(self)
end

function i3k_sbean.soaring_use_exp_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.soaring_use_exp_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 守护灵兽登陆同步
i3k_sbean.pet_guard_sync = i3k_class("pet_guard_sync")
function i3k_sbean.pet_guard_sync:ctor()
	self._pname_ = "pet_guard_sync"
	--self.petGuard:		DBRolePetGuard	
end

function i3k_sbean.pet_guard_sync:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_sync:decode(is)
	is:popString()
	self.petGuard = is:pop(i3k_sbean.DBRolePetGuard)
end

function i3k_sbean.pet_guard_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.petGuard)
end


-- 守护灵兽激活
i3k_sbean.pet_guard_active_res = i3k_class("pet_guard_active_res")
function i3k_sbean.pet_guard_active_res:ctor()
	self._pname_ = "pet_guard_active_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_guard_active_res:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_active_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_guard_active_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 守护灵兽升级
i3k_sbean.pet_guard_lvl_up_res = i3k_class("pet_guard_lvl_up_res")
function i3k_sbean.pet_guard_lvl_up_res:ctor()
	self._pname_ = "pet_guard_lvl_up_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_guard_lvl_up_res:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_lvl_up_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_guard_lvl_up_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 守护灵兽解锁潜能
i3k_sbean.pet_guard_unlock_latent_res = i3k_class("pet_guard_unlock_latent_res")
function i3k_sbean.pet_guard_unlock_latent_res:ctor()
	self._pname_ = "pet_guard_unlock_latent_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_guard_unlock_latent_res:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_unlock_latent_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_guard_unlock_latent_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 守护灵兽出战
i3k_sbean.pet_guard_change_res = i3k_class("pet_guard_change_res")
function i3k_sbean.pet_guard_change_res:ctor()
	self._pname_ = "pet_guard_change_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_guard_change_res:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_change_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_guard_change_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 守护灵兽隐藏显示
i3k_sbean.pet_guard_show_res = i3k_class("pet_guard_show_res")
function i3k_sbean.pet_guard_show_res:ctor()
	self._pname_ = "pet_guard_show_res"
	--self.ok:		int32	
end

function i3k_sbean.pet_guard_show_res:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_show_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.pet_guard_show_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 周年活动步骤一奖励
i3k_sbean.jubilee_activity_step1_reward_res = i3k_class("jubilee_activity_step1_reward_res")
function i3k_sbean.jubilee_activity_step1_reward_res:ctor()
	self._pname_ = "jubilee_activity_step1_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.jubilee_activity_step1_reward_res:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step1_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.jubilee_activity_step1_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 周年活动步骤二奖励
i3k_sbean.jubilee_activity_step2_reward_res = i3k_class("jubilee_activity_step2_reward_res")
function i3k_sbean.jubilee_activity_step2_reward_res:ctor()
	self._pname_ = "jubilee_activity_step2_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.jubilee_activity_step2_reward_res:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step2_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.jubilee_activity_step2_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 周年活动步骤二任务组选择
i3k_sbean.jubilee_activity_step2_group_choose_res = i3k_class("jubilee_activity_step2_group_choose_res")
function i3k_sbean.jubilee_activity_step2_group_choose_res:ctor()
	self._pname_ = "jubilee_activity_step2_group_choose_res"
	--self.ok:		int32	
end

function i3k_sbean.jubilee_activity_step2_group_choose_res:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step2_group_choose_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.jubilee_activity_step2_group_choose_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 周年活动步骤二任务接取
i3k_sbean.jubilee_activity_step2_task_take_res = i3k_class("jubilee_activity_step2_task_take_res")
function i3k_sbean.jubilee_activity_step2_task_take_res:ctor()
	self._pname_ = "jubilee_activity_step2_task_take_res"
	--self.ok:		int32	
end

function i3k_sbean.jubilee_activity_step2_task_take_res:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step2_task_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.jubilee_activity_step2_task_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 周年活动步骤二任务完成
i3k_sbean.jubilee_activity_step2_task_finish_res = i3k_class("jubilee_activity_step2_task_finish_res")
function i3k_sbean.jubilee_activity_step2_task_finish_res:ctor()
	self._pname_ = "jubilee_activity_step2_task_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.jubilee_activity_step2_task_finish_res:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step2_task_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.jubilee_activity_step2_task_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 周年活动登陆同步
i3k_sbean.jubilee_activity_login_sync = i3k_class("jubilee_activity_login_sync")
function i3k_sbean.jubilee_activity_login_sync:ctor()
	self._pname_ = "jubilee_activity_login_sync"
	--self.info:		DBRoleJubileeActivity	
end

function i3k_sbean.jubilee_activity_login_sync:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_login_sync:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleJubileeActivity)
end

function i3k_sbean.jubilee_activity_login_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 周年活动进度同步
i3k_sbean.jubilee_activity_process_sync_res = i3k_class("jubilee_activity_process_sync_res")
function i3k_sbean.jubilee_activity_process_sync_res:ctor()
	self._pname_ = "jubilee_activity_process_sync_res"
	--self.step1Activity:		int32	
	--self.info:		DBAuctionJubileeActivity	
end

function i3k_sbean.jubilee_activity_process_sync_res:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_process_sync_res:decode(is)
	is:popString()
	self.step1Activity = is:popNumber()
	self.info = is:pop(i3k_sbean.DBAuctionJubileeActivity)
end

function i3k_sbean.jubilee_activity_process_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.step1Activity)
	os:push(self.info)
end


-- 周年活动步骤三矿物传送
i3k_sbean.jubilee_activity_step3_teleport_res = i3k_class("jubilee_activity_step3_teleport_res")
function i3k_sbean.jubilee_activity_step3_teleport_res:ctor()
	self._pname_ = "jubilee_activity_step3_teleport_res"
	--self.ok:		int32	
end

function i3k_sbean.jubilee_activity_step3_teleport_res:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step3_teleport_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.jubilee_activity_step3_teleport_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 周年活动步骤一活跃度达标推送
i3k_sbean.jubilee_activity_point_push = i3k_class("jubilee_activity_point_push")
function i3k_sbean.jubilee_activity_point_push:ctor()
	self._pname_ = "jubilee_activity_point_push"
end

function i3k_sbean.jubilee_activity_point_push:decode(is)
	is:popString()
end

function i3k_sbean.jubilee_activity_point_push:encode(os)
	os:pushString(self._pname_)
end


-- 周年活动步骤二达标推送
i3k_sbean.jubilee_step2_point = i3k_class("jubilee_step2_point")
function i3k_sbean.jubilee_step2_point:ctor()
	self._pname_ = "jubilee_step2_point"
end

function i3k_sbean.jubilee_step2_point:decode(is)
	is:popString()
end

function i3k_sbean.jubilee_step2_point:encode(os)
	os:pushString(self._pname_)
end


-- 周年活动步骤三矿物采集
i3k_sbean.jubilee_activity_step3_take_res = i3k_class("jubilee_activity_step3_take_res")
function i3k_sbean.jubilee_activity_step3_take_res:ctor()
	self._pname_ = "jubilee_activity_step3_take_res"
	--self.ok:		int32	
	--self.reward:		vector[DummyGoods]	
end

function i3k_sbean.jubilee_activity_step3_take_res:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step3_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.reward = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.jubilee_activity_step3_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.reward)
end


-- 登录同步公主出嫁信息(signTime: 报名时间)
i3k_sbean.role_princess_marry = i3k_class("role_princess_marry")
function i3k_sbean.role_princess_marry:ctor()
	self._pname_ = "role_princess_marry"
	--self.signTime:		int32	
	--self.dayEnterTimes:		int32	
end

function i3k_sbean.role_princess_marry:clone()
	return clone(self)
end

function i3k_sbean.role_princess_marry:decode(is)
	is:popString()
	self.signTime = is:popNumber()
	self.dayEnterTimes = is:popNumber()
end

function i3k_sbean.role_princess_marry:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.signTime)
	os:pushNumber(self.dayEnterTimes)
end


-- 公主出嫁匹配结果 (result 1:成功 -1:超时)
i3k_sbean.princess_marry_match = i3k_class("princess_marry_match")
function i3k_sbean.princess_marry_match:ctor()
	self._pname_ = "princess_marry_match"
	--self.result:		int32	
end

function i3k_sbean.princess_marry_match:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_match:decode(is)
	is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.princess_marry_match:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.result)
end


-- 公主出嫁副本开始
i3k_sbean.princess_marry_map_start = i3k_class("princess_marry_map_start")
function i3k_sbean.princess_marry_map_start:ctor()
	self._pname_ = "princess_marry_map_start"
end

function i3k_sbean.princess_marry_map_start:decode(is)
	is:popString()
end

function i3k_sbean.princess_marry_map_start:encode(os)
	os:pushString(self._pname_)
end


-- 公主出嫁结算
i3k_sbean.princess_marry_map_result = i3k_class("princess_marry_map_result")
function i3k_sbean.princess_marry_map_result:ctor()
	self._pname_ = "princess_marry_map_result"
	--self.win:		int32	
	--self.selfRank:		int32	
	--self.ranks:		vector[RankRole]	
end

function i3k_sbean.princess_marry_map_result:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_map_result:decode(is)
	is:popString()
	self.win = is:popNumber()
	self.selfRank = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankRole)
end

function i3k_sbean.princess_marry_map_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.win)
	os:pushNumber(self.selfRank)
	os:pushList(self.ranks)
end


-- 公主出嫁报名
i3k_sbean.princess_marry_sign_res = i3k_class("princess_marry_sign_res")
function i3k_sbean.princess_marry_sign_res:ctor()
	self._pname_ = "princess_marry_sign_res"
	--self.ok:		int32	
end

function i3k_sbean.princess_marry_sign_res:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_sign_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.princess_marry_sign_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 公主出嫁取消报名
i3k_sbean.princess_marry_quit_res = i3k_class("princess_marry_quit_res")
function i3k_sbean.princess_marry_quit_res:ctor()
	self._pname_ = "princess_marry_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.princess_marry_quit_res:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.princess_marry_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- map进入地图同步信息
i3k_sbean.princess_marry_map_info = i3k_class("princess_marry_map_info")
function i3k_sbean.princess_marry_map_info:ctor()
	self._pname_ = "princess_marry_map_info"
	--self.eventID:		int32	
	--self.taskValue:		int32	
	--self.score:		int32	
	--self.princessCurHP:		int64	
	--self.princessMaxHP:		int64	
end

function i3k_sbean.princess_marry_map_info:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_map_info:decode(is)
	is:popString()
	self.eventID = is:popNumber()
	self.taskValue = is:popNumber()
	self.score = is:popNumber()
	self.princessCurHP = is:popNumber()
	self.princessMaxHP = is:popNumber()
end

function i3k_sbean.princess_marry_map_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eventID)
	os:pushNumber(self.taskValue)
	os:pushNumber(self.score)
	os:pushNumber(self.princessCurHP)
	os:pushNumber(self.princessMaxHP)
end


-- 通知触发事件
i3k_sbean.princess_marry_trig_event = i3k_class("princess_marry_trig_event")
function i3k_sbean.princess_marry_trig_event:ctor()
	self._pname_ = "princess_marry_trig_event"
end

function i3k_sbean.princess_marry_trig_event:decode(is)
	is:popString()
end

function i3k_sbean.princess_marry_trig_event:encode(os)
	os:pushString(self._pname_)
end


-- 同步当前事件
i3k_sbean.princess_marry_sync_event = i3k_class("princess_marry_sync_event")
function i3k_sbean.princess_marry_sync_event:ctor()
	self._pname_ = "princess_marry_sync_event"
	--self.eventID:		int32	
end

function i3k_sbean.princess_marry_sync_event:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_sync_event:decode(is)
	is:popString()
	self.eventID = is:popNumber()
end

function i3k_sbean.princess_marry_sync_event:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eventID)
end


-- 同步任务进度
i3k_sbean.princess_marry_update_task = i3k_class("princess_marry_update_task")
function i3k_sbean.princess_marry_update_task:ctor()
	self._pname_ = "princess_marry_update_task"
	--self.taskValue:		int32	
end

function i3k_sbean.princess_marry_update_task:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_update_task:decode(is)
	is:popString()
	self.taskValue = is:popNumber()
end

function i3k_sbean.princess_marry_update_task:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskValue)
end


-- 通知积分增加
i3k_sbean.princess_marry_add_score = i3k_class("princess_marry_add_score")
function i3k_sbean.princess_marry_add_score:ctor()
	self._pname_ = "princess_marry_add_score"
	--self.add:		int32	
end

function i3k_sbean.princess_marry_add_score:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_add_score:decode(is)
	is:popString()
	self.add = is:popNumber()
end

function i3k_sbean.princess_marry_add_score:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.add)
end


-- 同步马车位置和血量(princess_marry_get_pos 的异步回应)
i3k_sbean.princess_marry_sync_pos = i3k_class("princess_marry_sync_pos")
function i3k_sbean.princess_marry_sync_pos:ctor()
	self._pname_ = "princess_marry_sync_pos"
	--self.pos:		Vector3	
	--self.curHP:		int64	
	--self.maxHP:		int64	
end

function i3k_sbean.princess_marry_sync_pos:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_sync_pos:decode(is)
	is:popString()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.curHP = is:popNumber()
	self.maxHP = is:popNumber()
end

function i3k_sbean.princess_marry_sync_pos:encode(os)
	os:pushString(self._pname_)
	os:push(self.pos)
	os:pushNumber(self.curHP)
	os:pushNumber(self.maxHP)
end


-- 同步排行榜(princess_marry_get_rank 的异步回应)
i3k_sbean.princess_marry_sync_rank = i3k_class("princess_marry_sync_rank")
function i3k_sbean.princess_marry_sync_rank:ctor()
	self._pname_ = "princess_marry_sync_rank"
	--self.ranks:		vector[RankRole]	
end

function i3k_sbean.princess_marry_sync_rank:clone()
	return clone(self)
end

function i3k_sbean.princess_marry_sync_rank:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.RankRole)
end

function i3k_sbean.princess_marry_sync_rank:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
end


-- 回归玩家双倍掉落活动同步
i3k_sbean.back_role_double_drop_sync_res = i3k_class("back_role_double_drop_sync_res")
function i3k_sbean.back_role_double_drop_sync_res:ctor()
	self._pname_ = "back_role_double_drop_sync_res"
	--self.ok:		int32	
	--self.cfg:		BackRoleDoubleDropInfo	
end

function i3k_sbean.back_role_double_drop_sync_res:clone()
	return clone(self)
end

function i3k_sbean.back_role_double_drop_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.cfg = is:pop(i3k_sbean.BackRoleDoubleDropInfo)
end

function i3k_sbean.back_role_double_drop_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.cfg)
end


-- 神斗升级
i3k_sbean.god_star_levelup_res = i3k_class("god_star_levelup_res")
function i3k_sbean.god_star_levelup_res:ctor()
	self._pname_ = "god_star_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.god_star_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.god_star_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.god_star_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神斗技能升级
i3k_sbean.god_star_skill_levelup_res = i3k_class("god_star_skill_levelup_res")
function i3k_sbean.god_star_skill_levelup_res:ctor()
	self._pname_ = "god_star_skill_levelup_res"
	--self.ok:		int32	
end

function i3k_sbean.god_star_skill_levelup_res:clone()
	return clone(self)
end

function i3k_sbean.god_star_skill_levelup_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.god_star_skill_levelup_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 方位强制重置
i3k_sbean.weaponsoul_partmustreset_res = i3k_class("weaponsoul_partmustreset_res")
function i3k_sbean.weaponsoul_partmustreset_res:ctor()
	self._pname_ = "weaponsoul_partmustreset_res"
	--self.balls:		map[int32, int32]	
end

function i3k_sbean.weaponsoul_partmustreset_res:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_partmustreset_res:decode(is)
	is:popString()
	self.balls = is:popNumberNumberMap()
end

function i3k_sbean.weaponsoul_partmustreset_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.balls)
end


-- 登录同步神机藏海信息
i3k_sbean.role_hidden_sea_info = i3k_class("role_hidden_sea_info")
function i3k_sbean.role_hidden_sea_info:ctor()
	self._pname_ = "role_hidden_sea_info"
	--self.dayEnterTimes:		int32	
	--self.signTime:		int32	
end

function i3k_sbean.role_hidden_sea_info:clone()
	return clone(self)
end

function i3k_sbean.role_hidden_sea_info:decode(is)
	is:popString()
	self.dayEnterTimes = is:popNumber()
	self.signTime = is:popNumber()
end

function i3k_sbean.role_hidden_sea_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayEnterTimes)
	os:pushNumber(self.signTime)
end


-- 神机藏海报名
i3k_sbean.hidden_sea_sign_res = i3k_class("hidden_sea_sign_res")
function i3k_sbean.hidden_sea_sign_res:ctor()
	self._pname_ = "hidden_sea_sign_res"
	--self.ok:		int32	
end

function i3k_sbean.hidden_sea_sign_res:clone()
	return clone(self)
end

function i3k_sbean.hidden_sea_sign_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hidden_sea_sign_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神机藏海取消报名
i3k_sbean.hidden_sea_quit_res = i3k_class("hidden_sea_quit_res")
function i3k_sbean.hidden_sea_quit_res:ctor()
	self._pname_ = "hidden_sea_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.hidden_sea_quit_res:clone()
	return clone(self)
end

function i3k_sbean.hidden_sea_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.hidden_sea_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 神机藏海副本开始
i3k_sbean.hidden_sea_map_start = i3k_class("hidden_sea_map_start")
function i3k_sbean.hidden_sea_map_start:ctor()
	self._pname_ = "hidden_sea_map_start"
end

function i3k_sbean.hidden_sea_map_start:decode(is)
	is:popString()
end

function i3k_sbean.hidden_sea_map_start:encode(os)
	os:pushString(self._pname_)
end


-- 神机藏海匹配结果
i3k_sbean.hidden_sea_match_result = i3k_class("hidden_sea_match_result")
function i3k_sbean.hidden_sea_match_result:ctor()
	self._pname_ = "hidden_sea_match_result"
	--self.result:		int32	
end

function i3k_sbean.hidden_sea_match_result:clone()
	return clone(self)
end

function i3k_sbean.hidden_sea_match_result:decode(is)
	is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.hidden_sea_match_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.result)
end


-- 神机藏海结算
i3k_sbean.hidden_sea_map_result = i3k_class("hidden_sea_map_result")
function i3k_sbean.hidden_sea_map_result:ctor()
	self._pname_ = "hidden_sea_map_result"
	--self.win:		int32	
	--self.selfRank:		int32	
	--self.selfScore:		int32	
	--self.hiddenBoss:		int32	
	--self.useTime:		int32	
	--self.ranks:		vector[RankRole]	
	--self.avgLevel:		int32	
end

function i3k_sbean.hidden_sea_map_result:clone()
	return clone(self)
end

function i3k_sbean.hidden_sea_map_result:decode(is)
	is:popString()
	self.win = is:popNumber()
	self.selfRank = is:popNumber()
	self.selfScore = is:popNumber()
	self.hiddenBoss = is:popNumber()
	self.useTime = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.avgLevel = is:popNumber()
end

function i3k_sbean.hidden_sea_map_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.win)
	os:pushNumber(self.selfRank)
	os:pushNumber(self.selfScore)
	os:pushNumber(self.hiddenBoss)
	os:pushNumber(self.useTime)
	os:pushList(self.ranks)
	os:pushNumber(self.avgLevel)
end


-- 神机藏海同步幸运团队
i3k_sbean.hidden_sea_lucky_team_res = i3k_class("hidden_sea_lucky_team_res")
function i3k_sbean.hidden_sea_lucky_team_res:ctor()
	self._pname_ = "hidden_sea_lucky_team_res"
	--self.teamInfos:		vector[DBHiddenSeaTeamInfo]	
end

function i3k_sbean.hidden_sea_lucky_team_res:clone()
	return clone(self)
end

function i3k_sbean.hidden_sea_lucky_team_res:decode(is)
	is:popString()
	self.teamInfos = is:popList(i3k_sbean.DBHiddenSeaTeamInfo)
end

function i3k_sbean.hidden_sea_lucky_team_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.teamInfos)
end


-- 同步玩家地图积分
i3k_sbean.hidden_sea_score_info = i3k_class("hidden_sea_score_info")
function i3k_sbean.hidden_sea_score_info:ctor()
	self._pname_ = "hidden_sea_score_info"
	--self.scoreInfo:		map[int32, int32]	
end

function i3k_sbean.hidden_sea_score_info:clone()
	return clone(self)
end

function i3k_sbean.hidden_sea_score_info:decode(is)
	is:popString()
	self.scoreInfo = is:popNumberNumberMap()
end

function i3k_sbean.hidden_sea_score_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.scoreInfo)
end


-- 触发隐藏boss
i3k_sbean.hidden_sea_trig_hidden_boss = i3k_class("hidden_sea_trig_hidden_boss")
function i3k_sbean.hidden_sea_trig_hidden_boss:ctor()
	self._pname_ = "hidden_sea_trig_hidden_boss"
end

function i3k_sbean.hidden_sea_trig_hidden_boss:decode(is)
	is:popString()
end

function i3k_sbean.hidden_sea_trig_hidden_boss:encode(os)
	os:pushString(self._pname_)
end


-- 通知客户端npc开始行动
i3k_sbean.hidden_sea_start_timing = i3k_class("hidden_sea_start_timing")
function i3k_sbean.hidden_sea_start_timing:ctor()
	self._pname_ = "hidden_sea_start_timing"
	--self.route:		int32	
end

function i3k_sbean.hidden_sea_start_timing:clone()
	return clone(self)
end

function i3k_sbean.hidden_sea_start_timing:decode(is)
	is:popString()
	self.route = is:popNumber()
end

function i3k_sbean.hidden_sea_start_timing:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.route)
end


-- 同步地图信息
i3k_sbean.hidden_sea_map_info = i3k_class("hidden_sea_map_info")
function i3k_sbean.hidden_sea_map_info:ctor()
	self._pname_ = "hidden_sea_map_info"
	--self.scoreInfo:		map[int32, int32]	
	--self.npcDistance:		int32	
	--self.npcRoute:		int32	
	--self.npcStartTime:		int32	
end

function i3k_sbean.hidden_sea_map_info:clone()
	return clone(self)
end

function i3k_sbean.hidden_sea_map_info:decode(is)
	is:popString()
	self.scoreInfo = is:popNumberNumberMap()
	self.npcDistance = is:popNumber()
	self.npcRoute = is:popNumber()
	self.npcStartTime = is:popNumber()
end

function i3k_sbean.hidden_sea_map_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.scoreInfo)
	os:pushNumber(self.npcDistance)
	os:pushNumber(self.npcRoute)
	os:pushNumber(self.npcStartTime)
end


-- 登陆同步卡包信息
i3k_sbean.role_card_packet = i3k_class("role_card_packet")
function i3k_sbean.role_card_packet:ctor()
	self._pname_ = "role_card_packet"
	--self.info:		DBCardPacket	
end

function i3k_sbean.role_card_packet:clone()
	return clone(self)
end

function i3k_sbean.role_card_packet:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBCardPacket)
end

function i3k_sbean.role_card_packet:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 卡牌解锁推送
i3k_sbean.card_unlock_push = i3k_class("card_unlock_push")
function i3k_sbean.card_unlock_push:ctor()
	self._pname_ = "card_unlock_push"
	--self.id:		int32	
end

function i3k_sbean.card_unlock_push:clone()
	return clone(self)
end

function i3k_sbean.card_unlock_push:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.card_unlock_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 使用卡牌道具
i3k_sbean.card_item_use_res = i3k_class("card_item_use_res")
function i3k_sbean.card_item_use_res:ctor()
	self._pname_ = "card_item_use_res"
	--self.ok:		int32	
end

function i3k_sbean.card_item_use_res:clone()
	return clone(self)
end

function i3k_sbean.card_item_use_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.card_item_use_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解锁卡背
i3k_sbean.card_back_unlock_res = i3k_class("card_back_unlock_res")
function i3k_sbean.card_back_unlock_res:ctor()
	self._pname_ = "card_back_unlock_res"
	--self.ok:		int32	
end

function i3k_sbean.card_back_unlock_res:clone()
	return clone(self)
end

function i3k_sbean.card_back_unlock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.card_back_unlock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 选择卡背
i3k_sbean.card_back_select_res = i3k_class("card_back_select_res")
function i3k_sbean.card_back_select_res:ctor()
	self._pname_ = "card_back_select_res"
	--self.ok:		int32	
end

function i3k_sbean.card_back_select_res:clone()
	return clone(self)
end

function i3k_sbean.card_back_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.card_back_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步地图信息
i3k_sbean.homeland_guard_map_info = i3k_class("homeland_guard_map_info")
function i3k_sbean.homeland_guard_map_info:ctor()
	self._pname_ = "homeland_guard_map_info"
	--self.mapSkillInfo:		MapSkillData	
	--self.curSpawnCount:		int32	
	--self.goldenTreeInfos:		map[int32, HomelandGuardGoldenTreeHpInfo]	
end

function i3k_sbean.homeland_guard_map_info:clone()
	return clone(self)
end

function i3k_sbean.homeland_guard_map_info:decode(is)
	is:popString()
	self.mapSkillInfo = is:pop(i3k_sbean.MapSkillData)
	self.curSpawnCount = is:popNumber()
	self.goldenTreeInfos = is:popNumberMap(i3k_sbean.HomelandGuardGoldenTreeHpInfo)
end

function i3k_sbean.homeland_guard_map_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.mapSkillInfo)
	os:pushNumber(self.curSpawnCount)
	os:pushNumberMap(self.goldenTreeInfos)
end


-- 同步当前刷怪波数
i3k_sbean.homeland_guard_spawn_count = i3k_class("homeland_guard_spawn_count")
function i3k_sbean.homeland_guard_spawn_count:ctor()
	self._pname_ = "homeland_guard_spawn_count"
	--self.count:		int32	
end

function i3k_sbean.homeland_guard_spawn_count:clone()
	return clone(self)
end

function i3k_sbean.homeland_guard_spawn_count:decode(is)
	is:popString()
	self.count = is:popNumber()
end

function i3k_sbean.homeland_guard_spawn_count:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.count)
end


-- 同步黄金果树气血百分比
i3k_sbean.homeland_guard_goldentree_pop = i3k_class("homeland_guard_goldentree_pop")
function i3k_sbean.homeland_guard_goldentree_pop:ctor()
	self._pname_ = "homeland_guard_goldentree_pop"
	--self.id:		int32	
	--self.percent:		int32	
end

function i3k_sbean.homeland_guard_goldentree_pop:clone()
	return clone(self)
end

function i3k_sbean.homeland_guard_goldentree_pop:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.percent = is:popNumber()
end

function i3k_sbean.homeland_guard_goldentree_pop:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.percent)
end


-- 同步黄金果树血量
i3k_sbean.homeland_guard_goldentree_info = i3k_class("homeland_guard_goldentree_info")
function i3k_sbean.homeland_guard_goldentree_info:ctor()
	self._pname_ = "homeland_guard_goldentree_info"
	--self.id:		int32	
	--self.curHp:		int32	
	--self.maxHp:		int32	
end

function i3k_sbean.homeland_guard_goldentree_info:clone()
	return clone(self)
end

function i3k_sbean.homeland_guard_goldentree_info:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.curHp = is:popNumber()
	self.maxHp = is:popNumber()
end

function i3k_sbean.homeland_guard_goldentree_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.curHp)
	os:pushNumber(self.maxHp)
end


-- 选择初始关卡
i3k_sbean.fiveelement_org_res = i3k_class("fiveelement_org_res")
function i3k_sbean.fiveelement_org_res:ctor()
	self._pname_ = "fiveelement_org_res"
	--self.ok:		int32	
end

function i3k_sbean.fiveelement_org_res:clone()
	return clone(self)
end

function i3k_sbean.fiveelement_org_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fiveelement_org_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 开始五行副本
i3k_sbean.fiveelement_start_res = i3k_class("fiveelement_start_res")
function i3k_sbean.fiveelement_start_res:ctor()
	self._pname_ = "fiveelement_start_res"
	--self.ok:		int32	
end

function i3k_sbean.fiveelement_start_res:clone()
	return clone(self)
end

function i3k_sbean.fiveelement_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.fiveelement_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 触发解锁最后一个副本
i3k_sbean.fiveelenemt_unlock_lastmap = i3k_class("fiveelenemt_unlock_lastmap")
function i3k_sbean.fiveelenemt_unlock_lastmap:ctor()
	self._pname_ = "fiveelenemt_unlock_lastmap"
end

function i3k_sbean.fiveelenemt_unlock_lastmap:decode(is)
	is:popString()
end

function i3k_sbean.fiveelenemt_unlock_lastmap:encode(os)
	os:pushString(self._pname_)
end


-- 登录游戏同步信息
i3k_sbean.role_fiveelenemt = i3k_class("role_fiveelenemt")
function i3k_sbean.role_fiveelenemt:ctor()
	self._pname_ = "role_fiveelenemt"
	--self.info:		DBRoleFiveElement	
end

function i3k_sbean.role_fiveelenemt:clone()
	return clone(self)
end

function i3k_sbean.role_fiveelenemt:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleFiveElement)
end

function i3k_sbean.role_fiveelenemt:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 江湖侠探同步
i3k_sbean.spy_sync = i3k_class("spy_sync")
function i3k_sbean.spy_sync:ctor()
	self._pname_ = "spy_sync"
	--self.spy:		DBRoleSpy	
end

function i3k_sbean.spy_sync:clone()
	return clone(self)
end

function i3k_sbean.spy_sync:decode(is)
	is:popString()
	self.spy = is:pop(i3k_sbean.DBRoleSpy)
end

function i3k_sbean.spy_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.spy)
end


-- 江湖侠探开启活动
i3k_sbean.spy_open_res = i3k_class("spy_open_res")
function i3k_sbean.spy_open_res:ctor()
	self._pname_ = "spy_open_res"
	--self.spy:		DBRoleSpy	
end

function i3k_sbean.spy_open_res:clone()
	return clone(self)
end

function i3k_sbean.spy_open_res:decode(is)
	is:popString()
	self.spy = is:pop(i3k_sbean.DBRoleSpy)
end

function i3k_sbean.spy_open_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.spy)
end


-- 江湖侠探调查
i3k_sbean.spy_survey_res = i3k_class("spy_survey_res")
function i3k_sbean.spy_survey_res:ctor()
	self._pname_ = "spy_survey_res"
	--self.ok:		int32	
end

function i3k_sbean.spy_survey_res:clone()
	return clone(self)
end

function i3k_sbean.spy_survey_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spy_survey_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 江湖侠探追击
i3k_sbean.spy_chasing_res = i3k_class("spy_chasing_res")
function i3k_sbean.spy_chasing_res:ctor()
	self._pname_ = "spy_chasing_res"
	--self.ok:		int32	
end

function i3k_sbean.spy_chasing_res:clone()
	return clone(self)
end

function i3k_sbean.spy_chasing_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spy_chasing_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 江湖侠探揭露BOSS
i3k_sbean.spy_finding_boss_res = i3k_class("spy_finding_boss_res")
function i3k_sbean.spy_finding_boss_res:ctor()
	self._pname_ = "spy_finding_boss_res"
	--self.ok:		int32	
end

function i3k_sbean.spy_finding_boss_res:clone()
	return clone(self)
end

function i3k_sbean.spy_finding_boss_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spy_finding_boss_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 江湖侠探追击boss
i3k_sbean.spy_chasing_boss_res = i3k_class("spy_chasing_boss_res")
function i3k_sbean.spy_chasing_boss_res:ctor()
	self._pname_ = "spy_chasing_boss_res"
	--self.ok:		int32	
end

function i3k_sbean.spy_chasing_boss_res:clone()
	return clone(self)
end

function i3k_sbean.spy_chasing_boss_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spy_chasing_boss_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步
i3k_sbean.friend_circle_sync = i3k_class("friend_circle_sync")
function i3k_sbean.friend_circle_sync:ctor()
	self._pname_ = "friend_circle_sync"
	--self.friendCircle:		DBRoleFriendCircle	
end

function i3k_sbean.friend_circle_sync:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_sync:decode(is)
	is:popString()
	self.friendCircle = is:pop(i3k_sbean.DBRoleFriendCircle)
end

function i3k_sbean.friend_circle_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.friendCircle)
end


-- 打开界面
i3k_sbean.friend_circle_open_res = i3k_class("friend_circle_open_res")
function i3k_sbean.friend_circle_open_res:ctor()
	self._pname_ = "friend_circle_open_res"
	--self.friendCircle:		DBRoleFriendCircle	
end

function i3k_sbean.friend_circle_open_res:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_open_res:decode(is)
	is:popString()
	self.friendCircle = is:pop(i3k_sbean.DBRoleFriendCircle)
end

function i3k_sbean.friend_circle_open_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.friendCircle)
end


-- 接取任务 (status 0=是界面点接取, 1是在NPC对话点接取)
i3k_sbean.friend_circle_take_task_res = i3k_class("friend_circle_take_task_res")
function i3k_sbean.friend_circle_take_task_res:ctor()
	self._pname_ = "friend_circle_take_task_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_circle_take_task_res:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_take_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_circle_take_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成任务
i3k_sbean.friend_circle_finish_task_res = i3k_class("friend_circle_finish_task_res")
function i3k_sbean.friend_circle_finish_task_res:ctor()
	self._pname_ = "friend_circle_finish_task_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_circle_finish_task_res:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_finish_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_circle_finish_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 放弃任务
i3k_sbean.friend_circle_cancel_task_res = i3k_class("friend_circle_cancel_task_res")
function i3k_sbean.friend_circle_cancel_task_res:ctor()
	self._pname_ = "friend_circle_cancel_task_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_circle_cancel_task_res:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_cancel_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_circle_cancel_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 购买任务次数
i3k_sbean.friend_circle_buy_task_cnt_res = i3k_class("friend_circle_buy_task_cnt_res")
function i3k_sbean.friend_circle_buy_task_cnt_res:ctor()
	self._pname_ = "friend_circle_buy_task_cnt_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_circle_buy_task_cnt_res:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_buy_task_cnt_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_circle_buy_task_cnt_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取每日奖励
i3k_sbean.friend_circle_take_day_reward_res = i3k_class("friend_circle_take_day_reward_res")
function i3k_sbean.friend_circle_take_day_reward_res:ctor()
	self._pname_ = "friend_circle_take_day_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_circle_take_day_reward_res:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_take_day_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_circle_take_day_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取情义值奖励
i3k_sbean.friend_circle_take_friendship_reward_res = i3k_class("friend_circle_take_friendship_reward_res")
function i3k_sbean.friend_circle_take_friendship_reward_res:ctor()
	self._pname_ = "friend_circle_take_friendship_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.friend_circle_take_friendship_reward_res:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_take_friendship_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.friend_circle_take_friendship_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 任务跟多个NPC对话 送信
i3k_sbean.task_talk_mul_npc_res = i3k_class("task_talk_mul_npc_res")
function i3k_sbean.task_talk_mul_npc_res:ctor()
	self._pname_ = "task_talk_mul_npc_res"
	--self.ok:		int32	
end

function i3k_sbean.task_talk_mul_npc_res:clone()
	return clone(self)
end

function i3k_sbean.task_talk_mul_npc_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.task_talk_mul_npc_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 任务交换物品
i3k_sbean.task_exchange_item_res = i3k_class("task_exchange_item_res")
function i3k_sbean.task_exchange_item_res:ctor()
	self._pname_ = "task_exchange_item_res"
	--self.ok:		int32	
	--self.cnt:		int32	
end

function i3k_sbean.task_exchange_item_res:clone()
	return clone(self)
end

function i3k_sbean.task_exchange_item_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.cnt = is:popNumber()
end

function i3k_sbean.task_exchange_item_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumber(self.cnt)
end


-- 消耗符文提升铸锭经验
i3k_sbean.cast_ingot_use_rune_res = i3k_class("cast_ingot_use_rune_res")
function i3k_sbean.cast_ingot_use_rune_res:ctor()
	self._pname_ = "cast_ingot_use_rune_res"
	--self.ok:		int32	
end

function i3k_sbean.cast_ingot_use_rune_res:clone()
	return clone(self)
end

function i3k_sbean.cast_ingot_use_rune_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.cast_ingot_use_rune_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 阵法石同步
i3k_sbean.role_arraystone_info = i3k_class("role_arraystone_info")
function i3k_sbean.role_arraystone_info:ctor()
	self._pname_ = "role_arraystone_info"
	--self.info:		DBArrayStone	
end

function i3k_sbean.role_arraystone_info:clone()
	return clone(self)
end

function i3k_sbean.role_arraystone_info:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBArrayStone)
end

function i3k_sbean.role_arraystone_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 祈言
i3k_sbean.array_stone_prayer_res = i3k_class("array_stone_prayer_res")
function i3k_sbean.array_stone_prayer_res:ctor()
	self._pname_ = "array_stone_prayer_res"
	--self.ok:		int32	
	--self.ciphertexts:		vector[int32]	
end

function i3k_sbean.array_stone_prayer_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_prayer_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.ciphertexts = is:popNumberList()
end

function i3k_sbean.array_stone_prayer_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberList(self.ciphertexts)
end


-- 设置密文直接转换能量
i3k_sbean.array_stone_set_conversion_res = i3k_class("array_stone_set_conversion_res")
function i3k_sbean.array_stone_set_conversion_res:ctor()
	self._pname_ = "array_stone_set_conversion_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_set_conversion_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_set_conversion_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_set_conversion_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 解锁祈言孔位
i3k_sbean.array_stone_unlock_hole_res = i3k_class("array_stone_unlock_hole_res")
function i3k_sbean.array_stone_unlock_hole_res:ctor()
	self._pname_ = "array_stone_unlock_hole_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_unlock_hole_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_unlock_hole_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_unlock_hole_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 密文批量回收
i3k_sbean.array_stone_ciphertext_batch_destroy_res = i3k_class("array_stone_ciphertext_batch_destroy_res")
function i3k_sbean.array_stone_ciphertext_batch_destroy_res:ctor()
	self._pname_ = "array_stone_ciphertext_batch_destroy_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_ciphertext_batch_destroy_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_batch_destroy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_batch_destroy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 密文上阵
i3k_sbean.array_stone_ciphertext_equip_res = i3k_class("array_stone_ciphertext_equip_res")
function i3k_sbean.array_stone_ciphertext_equip_res:ctor()
	self._pname_ = "array_stone_ciphertext_equip_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_ciphertext_equip_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_equip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_equip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 密文下阵
i3k_sbean.array_stone_ciphertext_unequip_res = i3k_class("array_stone_ciphertext_unequip_res")
function i3k_sbean.array_stone_ciphertext_unequip_res:ctor()
	self._pname_ = "array_stone_ciphertext_unequip_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_ciphertext_unequip_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_unequip_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_unequip_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 密文回收
i3k_sbean.array_stone_ciphertext_destroy_res = i3k_class("array_stone_ciphertext_destroy_res")
function i3k_sbean.array_stone_ciphertext_destroy_res:ctor()
	self._pname_ = "array_stone_ciphertext_destroy_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_ciphertext_destroy_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_destroy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_destroy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 密文合成
i3k_sbean.array_stone_ciphertext_uplvl_res = i3k_class("array_stone_ciphertext_uplvl_res")
function i3k_sbean.array_stone_ciphertext_uplvl_res:ctor()
	self._pname_ = "array_stone_ciphertext_uplvl_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_ciphertext_uplvl_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_uplvl_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_uplvl_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 密文置换
i3k_sbean.array_stone_ciphertext_change_res = i3k_class("array_stone_ciphertext_change_res")
function i3k_sbean.array_stone_ciphertext_change_res:ctor()
	self._pname_ = "array_stone_ciphertext_change_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_ciphertext_change_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_change_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_change_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 密文锁定
i3k_sbean.array_stone_ciphertext_lock_res = i3k_class("array_stone_ciphertext_lock_res")
function i3k_sbean.array_stone_ciphertext_lock_res:ctor()
	self._pname_ = "array_stone_ciphertext_lock_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_ciphertext_lock_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_lock_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_lock_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用密文能量道具
i3k_sbean.bag_useitemciphertextenergy_res = i3k_class("bag_useitemciphertextenergy_res")
function i3k_sbean.bag_useitemciphertextenergy_res:ctor()
	self._pname_ = "bag_useitemciphertextenergy_res"
	--self.ok:		int32	
end

function i3k_sbean.bag_useitemciphertextenergy_res:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemciphertextenergy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.bag_useitemciphertextenergy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 添加真言等级熟练度
i3k_sbean.array_stone_mantra_uplvl_res = i3k_class("array_stone_mantra_uplvl_res")
function i3k_sbean.array_stone_mantra_uplvl_res:ctor()
	self._pname_ = "array_stone_mantra_uplvl_res"
	--self.ok:		int32	
end

function i3k_sbean.array_stone_mantra_uplvl_res:clone()
	return clone(self)
end

function i3k_sbean.array_stone_mantra_uplvl_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.array_stone_mantra_uplvl_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 获取玩家秘祝信息
i3k_sbean.query_arraystoneoverviews_res = i3k_class("query_arraystoneoverviews_res")
function i3k_sbean.query_arraystoneoverviews_res:ctor()
	self._pname_ = "query_arraystoneoverviews_res"
	--self.overview:		ArrayStoneEquipData	
end

function i3k_sbean.query_arraystoneoverviews_res:clone()
	return clone(self)
end

function i3k_sbean.query_arraystoneoverviews_res:decode(is)
	is:popString()
	self.overview = is:pop(i3k_sbean.ArrayStoneEquipData)
end

function i3k_sbean.query_arraystoneoverviews_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.overview)
end


-- 添加密文能量
i3k_sbean.role_add_ciphertext_energy = i3k_class("role_add_ciphertext_energy")
function i3k_sbean.role_add_ciphertext_energy:ctor()
	self._pname_ = "role_add_ciphertext_energy"
	--self.amount:		int32	
	--self.reason:		int32	
end

function i3k_sbean.role_add_ciphertext_energy:clone()
	return clone(self)
end

function i3k_sbean.role_add_ciphertext_energy:decode(is)
	is:popString()
	self.amount = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.role_add_ciphertext_energy:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.amount)
	os:pushNumber(self.reason)
end


-- 进入黄金海岸
i3k_sbean.global_world_enter_res = i3k_class("global_world_enter_res")
function i3k_sbean.global_world_enter_res:ctor()
	self._pname_ = "global_world_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.global_world_enter_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.global_world_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 同步地图信息
i3k_sbean.global_world_sync_res = i3k_class("global_world_sync_res")
function i3k_sbean.global_world_sync_res:ctor()
	self._pname_ = "global_world_sync_res"
	--self.worlds:		map[int32, GlobalWorldLines]	
	--self.ok:		int32	
end

function i3k_sbean.global_world_sync_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_sync_res:decode(is)
	is:popString()
	self.worlds = is:popNumberMap(i3k_sbean.GlobalWorldLines)
	self.ok = is:popNumber()
end

function i3k_sbean.global_world_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.worlds)
	os:pushNumber(self.ok)
end


-- 切换分线
i3k_sbean.global_world_change_res = i3k_class("global_world_change_res")
function i3k_sbean.global_world_change_res:ctor()
	self._pname_ = "global_world_change_res"
	--self.ok:		int32	
end

function i3k_sbean.global_world_change_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_change_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.global_world_change_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登陆同步黄金海岸角色卡片信息
i3k_sbean.global_world_login_sync = i3k_class("global_world_login_sync")
function i3k_sbean.global_world_login_sync:ctor()
	self._pname_ = "global_world_login_sync"
	--self.card:		DBGlobalWorldCard	
	--self.card2DayUseCount:		map[int32, int32]	
	--self.card2DaySectDrawCount:		map[int32, int32]	
	--self.daySectDonateCount:		int32	
end

function i3k_sbean.global_world_login_sync:clone()
	return clone(self)
end

function i3k_sbean.global_world_login_sync:decode(is)
	is:popString()
	self.card = is:pop(i3k_sbean.DBGlobalWorldCard)
	self.card2DayUseCount = is:popNumberNumberMap()
	self.card2DaySectDrawCount = is:popNumberNumberMap()
	self.daySectDonateCount = is:popNumber()
end

function i3k_sbean.global_world_login_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.card)
	os:pushNumberNumberMap(self.card2DayUseCount)
	os:pushNumberNumberMap(self.card2DaySectDrawCount)
	os:pushNumber(self.daySectDonateCount)
end


-- 更新卡牌 0是背包1是使用中，0是增加1是删除
i3k_sbean.global_world_role_card_sync = i3k_class("global_world_role_card_sync")
function i3k_sbean.global_world_role_card_sync:ctor()
	self._pname_ = "global_world_role_card_sync"
	--self.id:		int32	
	--self.time:		int32	
	--self.bagOrInUse:		int8	
	--self.addOrRemove:		int8	
end

function i3k_sbean.global_world_role_card_sync:clone()
	return clone(self)
end

function i3k_sbean.global_world_role_card_sync:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.time = is:popNumber()
	self.bagOrInUse = is:popNumber()
	self.addOrRemove = is:popNumber()
end

function i3k_sbean.global_world_role_card_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.time)
	os:pushNumber(self.bagOrInUse)
	os:pushNumber(self.addOrRemove)
end


-- 通知客户端卡片拾取或者掉落，0是拾取1是由于被玩家pk而掉落
i3k_sbean.global_world_notice_card_drop = i3k_class("global_world_notice_card_drop")
function i3k_sbean.global_world_notice_card_drop:ctor()
	self._pname_ = "global_world_notice_card_drop"
	--self.id:		int32	
	--self.addOrRemove:		int8	
end

function i3k_sbean.global_world_notice_card_drop:clone()
	return clone(self)
end

function i3k_sbean.global_world_notice_card_drop:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.addOrRemove = is:popNumber()
end

function i3k_sbean.global_world_notice_card_drop:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.addOrRemove)
end


-- 卡片操作，类型1.激活 2.放弃
i3k_sbean.global_world_card_operation_res = i3k_class("global_world_card_operation_res")
function i3k_sbean.global_world_card_operation_res:ctor()
	self._pname_ = "global_world_card_operation_res"
	--self.ok:		int32	
	--self.drops:		vector[DummyGoods]	
end

function i3k_sbean.global_world_card_operation_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_card_operation_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.global_world_card_operation_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.drops)
end


-- 请求卡片日志，类型1.个人 2.战区
i3k_sbean.global_world_log_res = i3k_class("global_world_log_res")
function i3k_sbean.global_world_log_res:ctor()
	self._pname_ = "global_world_log_res"
	--self.log:		vector[DBGlobalWorldCardLog]	
end

function i3k_sbean.global_world_log_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_log_res:decode(is)
	is:popString()
	self.log = is:popList(i3k_sbean.DBGlobalWorldCardLog)
end

function i3k_sbean.global_world_log_res:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.log)
end


-- 帮派卡片捐赠
i3k_sbean.global_world_card_sect_donate_res = i3k_class("global_world_card_sect_donate_res")
function i3k_sbean.global_world_card_sect_donate_res:ctor()
	self._pname_ = "global_world_card_sect_donate_res"
	--self.ok:		int32	
end

function i3k_sbean.global_world_card_sect_donate_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_card_sect_donate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.global_world_card_sect_donate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 请求帮派卡池的面板
i3k_sbean.global_world_sect_panel_res = i3k_class("global_world_sect_panel_res")
function i3k_sbean.global_world_sect_panel_res:ctor()
	self._pname_ = "global_world_sect_panel_res"
	--self.card2Inventory:		map[int32, int32]	
end

function i3k_sbean.global_world_sect_panel_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_sect_panel_res:decode(is)
	is:popString()
	self.card2Inventory = is:popNumberNumberMap()
end

function i3k_sbean.global_world_sect_panel_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.card2Inventory)
end


-- 请求领取帮派的卡片
i3k_sbean.global_world_sect_drawcard_res = i3k_class("global_world_sect_drawcard_res")
function i3k_sbean.global_world_sect_drawcard_res:ctor()
	self._pname_ = "global_world_sect_drawcard_res"
	--self.ok:		int32	
	--self.drops:		vector[DummyGoods]	
end

function i3k_sbean.global_world_sect_drawcard_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_sect_drawcard_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.drops = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.global_world_sect_drawcard_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.drops)
end


-- 同步任务
i3k_sbean.global_world_task_sync = i3k_class("global_world_task_sync")
function i3k_sbean.global_world_task_sync:ctor()
	self._pname_ = "global_world_task_sync"
	--self.tasks:		map[int32, GlobalWorldTask]	
end

function i3k_sbean.global_world_task_sync:clone()
	return clone(self)
end

function i3k_sbean.global_world_task_sync:decode(is)
	is:popString()
	self.tasks = is:popNumberMap(i3k_sbean.GlobalWorldTask)
end

function i3k_sbean.global_world_task_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.tasks)
end


-- 领取任务奖励
i3k_sbean.global_world_task_take_reward_res = i3k_class("global_world_task_take_reward_res")
function i3k_sbean.global_world_task_take_reward_res:ctor()
	self._pname_ = "global_world_task_take_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.global_world_task_take_reward_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_task_take_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.global_world_task_take_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用卡片包道具
i3k_sbean.global_world_use_card_box_res = i3k_class("global_world_use_card_box_res")
function i3k_sbean.global_world_use_card_box_res:ctor()
	self._pname_ = "global_world_use_card_box_res"
	--self.ok:		int32	
end

function i3k_sbean.global_world_use_card_box_res:clone()
	return clone(self)
end

function i3k_sbean.global_world_use_card_box_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.global_world_use_card_box_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 转盘同步
i3k_sbean.newluckyroll_sync_res = i3k_class("newluckyroll_sync_res")
function i3k_sbean.newluckyroll_sync_res:ctor()
	self._pname_ = "newluckyroll_sync_res"
	--self.ok:		int32	
	--self.infos:		NewLuckyRollInfo	
end

function i3k_sbean.newluckyroll_sync_res:clone()
	return clone(self)
end

function i3k_sbean.newluckyroll_sync_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.infos = is:pop(i3k_sbean.NewLuckyRollInfo)
end

function i3k_sbean.newluckyroll_sync_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:push(self.infos)
end


-- 连续转转盘回应
i3k_sbean.newluckyroll_play_res = i3k_class("newluckyroll_play_res")
function i3k_sbean.newluckyroll_play_res:ctor()
	self._pname_ = "newluckyroll_play_res"
	--self.ok:		int32	
	--self.rewards:		vector[int32]	
end

function i3k_sbean.newluckyroll_play_res:clone()
	return clone(self)
end

function i3k_sbean.newluckyroll_play_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.rewards = is:popNumberList()
end

function i3k_sbean.newluckyroll_play_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushNumberList(self.rewards)
end


-- 登录同步万寿阁信息(signTime: 报名时间)
i3k_sbean.role_longevity_loft = i3k_class("role_longevity_loft")
function i3k_sbean.role_longevity_loft:ctor()
	self._pname_ = "role_longevity_loft"
	--self.signTime:		int32	
	--self.dayEnterTimes:		int32	
end

function i3k_sbean.role_longevity_loft:clone()
	return clone(self)
end

function i3k_sbean.role_longevity_loft:decode(is)
	is:popString()
	self.signTime = is:popNumber()
	self.dayEnterTimes = is:popNumber()
end

function i3k_sbean.role_longevity_loft:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.signTime)
	os:pushNumber(self.dayEnterTimes)
end


-- 万寿阁匹配结果 (result 1:成功 -1:超时)
i3k_sbean.longevity_loft_match = i3k_class("longevity_loft_match")
function i3k_sbean.longevity_loft_match:ctor()
	self._pname_ = "longevity_loft_match"
	--self.result:		int32	
end

function i3k_sbean.longevity_loft_match:clone()
	return clone(self)
end

function i3k_sbean.longevity_loft_match:decode(is)
	is:popString()
	self.result = is:popNumber()
end

function i3k_sbean.longevity_loft_match:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.result)
end


-- 万寿阁副本开始
i3k_sbean.longevity_loft_map_start = i3k_class("longevity_loft_map_start")
function i3k_sbean.longevity_loft_map_start:ctor()
	self._pname_ = "longevity_loft_map_start"
end

function i3k_sbean.longevity_loft_map_start:decode(is)
	is:popString()
end

function i3k_sbean.longevity_loft_map_start:encode(os)
	os:pushString(self._pname_)
end


-- 万寿阁结算
i3k_sbean.longevity_loft_map_result = i3k_class("longevity_loft_map_result")
function i3k_sbean.longevity_loft_map_result:ctor()
	self._pname_ = "longevity_loft_map_result"
	--self.win:		int32	
	--self.selfRank:		int32	
	--self.ranks:		vector[RankRole]	
	--self.killBossTotal:		int32	
	--self.useTime:		int32	
end

function i3k_sbean.longevity_loft_map_result:clone()
	return clone(self)
end

function i3k_sbean.longevity_loft_map_result:decode(is)
	is:popString()
	self.win = is:popNumber()
	self.selfRank = is:popNumber()
	self.ranks = is:popList(i3k_sbean.RankRole)
	self.killBossTotal = is:popNumber()
	self.useTime = is:popNumber()
end

function i3k_sbean.longevity_loft_map_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.win)
	os:pushNumber(self.selfRank)
	os:pushList(self.ranks)
	os:pushNumber(self.killBossTotal)
	os:pushNumber(self.useTime)
end


-- 万寿阁报名
i3k_sbean.longevity_loft_sign_res = i3k_class("longevity_loft_sign_res")
function i3k_sbean.longevity_loft_sign_res:ctor()
	self._pname_ = "longevity_loft_sign_res"
	--self.ok:		int32	
end

function i3k_sbean.longevity_loft_sign_res:clone()
	return clone(self)
end

function i3k_sbean.longevity_loft_sign_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.longevity_loft_sign_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 万寿阁取消报名
i3k_sbean.longevity_loft_quit_res = i3k_class("longevity_loft_quit_res")
function i3k_sbean.longevity_loft_quit_res:ctor()
	self._pname_ = "longevity_loft_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.longevity_loft_quit_res:clone()
	return clone(self)
end

function i3k_sbean.longevity_loft_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.longevity_loft_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- map进入地图同步信息(trigTeleport 1:已触发boss房间传送 0:未触发)
i3k_sbean.longevity_loft_map_info = i3k_class("longevity_loft_map_info")
function i3k_sbean.longevity_loft_map_info:ctor()
	self._pname_ = "longevity_loft_map_info"
	--self.stage:		int32	
	--self.tasks:		map[int32, int32]	
	--self.score:		int32	
	--self.trigTeleport:		int32	
end

function i3k_sbean.longevity_loft_map_info:clone()
	return clone(self)
end

function i3k_sbean.longevity_loft_map_info:decode(is)
	is:popString()
	self.stage = is:popNumber()
	self.tasks = is:popNumberNumberMap()
	self.score = is:popNumber()
	self.trigTeleport = is:popNumber()
end

function i3k_sbean.longevity_loft_map_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.stage)
	os:pushNumberNumberMap(self.tasks)
	os:pushNumber(self.score)
	os:pushNumber(self.trigTeleport)
end


-- 同步当前阶段
i3k_sbean.longevity_loft_sync_stage = i3k_class("longevity_loft_sync_stage")
function i3k_sbean.longevity_loft_sync_stage:ctor()
	self._pname_ = "longevity_loft_sync_stage"
	--self.stage:		int32	
end

function i3k_sbean.longevity_loft_sync_stage:clone()
	return clone(self)
end

function i3k_sbean.longevity_loft_sync_stage:decode(is)
	is:popString()
	self.stage = is:popNumber()
end

function i3k_sbean.longevity_loft_sync_stage:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.stage)
end


-- 同步任务进度
i3k_sbean.longevity_loft_update_task = i3k_class("longevity_loft_update_task")
function i3k_sbean.longevity_loft_update_task:ctor()
	self._pname_ = "longevity_loft_update_task"
	--self.taskID:		int32	
	--self.taskValue:		int32	
end

function i3k_sbean.longevity_loft_update_task:clone()
	return clone(self)
end

function i3k_sbean.longevity_loft_update_task:decode(is)
	is:popString()
	self.taskID = is:popNumber()
	self.taskValue = is:popNumber()
end

function i3k_sbean.longevity_loft_update_task:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
	os:pushNumber(self.taskValue)
end


-- 通知积分增加
i3k_sbean.longevity_loft_add_score = i3k_class("longevity_loft_add_score")
function i3k_sbean.longevity_loft_add_score:ctor()
	self._pname_ = "longevity_loft_add_score"
	--self.add:		int32	
end

function i3k_sbean.longevity_loft_add_score:clone()
	return clone(self)
end

function i3k_sbean.longevity_loft_add_score:decode(is)
	is:popString()
	self.add = is:popNumber()
end

function i3k_sbean.longevity_loft_add_score:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.add)
end


-- 通知已开启boss房间传送
i3k_sbean.longevity_loft_open_teleport = i3k_class("longevity_loft_open_teleport")
function i3k_sbean.longevity_loft_open_teleport:ctor()
	self._pname_ = "longevity_loft_open_teleport"
end

function i3k_sbean.longevity_loft_open_teleport:decode(is)
	is:popString()
end

function i3k_sbean.longevity_loft_open_teleport:encode(os)
	os:pushString(self._pname_)
end


-- 同步排行榜(longevity_loft_get_rank 的异步回应)
i3k_sbean.longevity_loft_sync_rank = i3k_class("longevity_loft_sync_rank")
function i3k_sbean.longevity_loft_sync_rank:ctor()
	self._pname_ = "longevity_loft_sync_rank"
	--self.ranks:		vector[RankRole]	
end

function i3k_sbean.longevity_loft_sync_rank:clone()
	return clone(self)
end

function i3k_sbean.longevity_loft_sync_rank:decode(is)
	is:popString()
	self.ranks = is:popList(i3k_sbean.RankRole)
end

function i3k_sbean.longevity_loft_sync_rank:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.ranks)
end


-- 进入御灵鬼岛请求
i3k_sbean.ghost_island_enter_res = i3k_class("ghost_island_enter_res")
function i3k_sbean.ghost_island_enter_res:ctor()
	self._pname_ = "ghost_island_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.ghost_island_enter_res:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.ghost_island_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 碎片交换请求回应
i3k_sbean.ghost_island_exchange_res = i3k_class("ghost_island_exchange_res")
function i3k_sbean.ghost_island_exchange_res:ctor()
	self._pname_ = "ghost_island_exchange_res"
	--self.ok:		int32	
end

function i3k_sbean.ghost_island_exchange_res:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_exchange_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.ghost_island_exchange_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 碎片交换结果通知
i3k_sbean.ghost_island_syn_exchange_result = i3k_class("ghost_island_syn_exchange_result")
function i3k_sbean.ghost_island_syn_exchange_result:ctor()
	self._pname_ = "ghost_island_syn_exchange_result"
	--self.ok:		int32	
end

function i3k_sbean.ghost_island_syn_exchange_result:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_syn_exchange_result:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.ghost_island_syn_exchange_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 取消碎片交换请求回应
i3k_sbean.ghost_island_exchange_cancle_res = i3k_class("ghost_island_exchange_cancle_res")
function i3k_sbean.ghost_island_exchange_cancle_res:ctor()
	self._pname_ = "ghost_island_exchange_cancle_res"
	--self.ok:		int32	
end

function i3k_sbean.ghost_island_exchange_cancle_res:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_exchange_cancle_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.ghost_island_exchange_cancle_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 炼化请求回应
i3k_sbean.ghost_island_artifice_res = i3k_class("ghost_island_artifice_res")
function i3k_sbean.ghost_island_artifice_res:ctor()
	self._pname_ = "ghost_island_artifice_res"
	--self.ok:		int32	
end

function i3k_sbean.ghost_island_artifice_res:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_artifice_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.ghost_island_artifice_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录同步信息
i3k_sbean.ghost_island_syn_info = i3k_class("ghost_island_syn_info")
function i3k_sbean.ghost_island_syn_info:ctor()
	self._pname_ = "ghost_island_syn_info"
	--self.info:		DBRoleGhostIsland	
end

function i3k_sbean.ghost_island_syn_info:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_syn_info:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleGhostIsland)
end

function i3k_sbean.ghost_island_syn_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 同步消息返回
i3k_sbean.ghost_island_info_res = i3k_class("ghost_island_info_res")
function i3k_sbean.ghost_island_info_res:ctor()
	self._pname_ = "ghost_island_info_res"
	--self.info:		DBRoleGhostIsland	
end

function i3k_sbean.ghost_island_info_res:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_info_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBRoleGhostIsland)
end

function i3k_sbean.ghost_island_info_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


i3k_sbean.ghost_island_enter_info = i3k_class("ghost_island_enter_info")
function i3k_sbean.ghost_island_enter_info:ctor()
	self._pname_ = "ghost_island_enter_info"
	--self.points:		set[int32]	
	--self.pointCD:		map[int32, int32]	
	--self.bosses:		map[int32, int32]	
end

function i3k_sbean.ghost_island_enter_info:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_enter_info:decode(is)
	is:popString()
	self.points = is:popNumberSet()
	self.pointCD = is:popNumberNumberMap()
	self.bosses = is:popNumberNumberMap()
end

function i3k_sbean.ghost_island_enter_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.points)
	os:pushNumberNumberMap(self.pointCD)
	os:pushNumberNumberMap(self.bosses)
end


i3k_sbean.ghost_island_pointcd_update = i3k_class("ghost_island_pointcd_update")
function i3k_sbean.ghost_island_pointcd_update:ctor()
	self._pname_ = "ghost_island_pointcd_update"
	--self.pointCD:		map[int32, int32]	
end

function i3k_sbean.ghost_island_pointcd_update:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_pointcd_update:decode(is)
	is:popString()
	self.pointCD = is:popNumberNumberMap()
end

function i3k_sbean.ghost_island_pointcd_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.pointCD)
end


i3k_sbean.ghost_island_single_point_update = i3k_class("ghost_island_single_point_update")
function i3k_sbean.ghost_island_single_point_update:ctor()
	self._pname_ = "ghost_island_single_point_update"
	--self.point:		int32	
	--self.time:		int32	
end

function i3k_sbean.ghost_island_single_point_update:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_single_point_update:decode(is)
	is:popString()
	self.point = is:popNumber()
	self.time = is:popNumber()
end

function i3k_sbean.ghost_island_single_point_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.point)
	os:pushNumber(self.time)
end


i3k_sbean.ghost_island_boss_update = i3k_class("ghost_island_boss_update")
function i3k_sbean.ghost_island_boss_update:ctor()
	self._pname_ = "ghost_island_boss_update"
	--self.bosses:		map[int32, int32]	
end

function i3k_sbean.ghost_island_boss_update:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_boss_update:decode(is)
	is:popString()
	self.bosses = is:popNumberNumberMap()
end

function i3k_sbean.ghost_island_boss_update:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.bosses)
end


i3k_sbean.role_drop_spirit = i3k_class("role_drop_spirit")
function i3k_sbean.role_drop_spirit:ctor()
	self._pname_ = "role_drop_spirit"
	--self.spiritId:		int32	
	--self.position:		Vector3	
end

function i3k_sbean.role_drop_spirit:clone()
	return clone(self)
end

function i3k_sbean.role_drop_spirit:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.role_drop_spirit:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
	os:push(self.position)
end


i3k_sbean.ghost_island_learn_skill_res = i3k_class("ghost_island_learn_skill_res")
function i3k_sbean.ghost_island_learn_skill_res:ctor()
	self._pname_ = "ghost_island_learn_skill_res"
	--self.ok:		int32	
end

function i3k_sbean.ghost_island_learn_skill_res:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_learn_skill_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.ghost_island_learn_skill_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


i3k_sbean.summoned_result = i3k_class("summoned_result")
function i3k_sbean.summoned_result:ctor()
	self._pname_ = "summoned_result"
	--self.ok:		int32	
end

function i3k_sbean.summoned_result:clone()
	return clone(self)
end

function i3k_sbean.summoned_result:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.summoned_result:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 登录同步密探风云信息
i3k_sbean.role_spy_world = i3k_class("role_spy_world")
function i3k_sbean.role_spy_world:ctor()
	self._pname_ = "role_spy_world"
	--self.roleSpyWorld:		DBRoleSpyWorld	
end

function i3k_sbean.role_spy_world:clone()
	return clone(self)
end

function i3k_sbean.role_spy_world:decode(is)
	is:popString()
	self.roleSpyWorld = is:pop(i3k_sbean.DBRoleSpyWorld)
end

function i3k_sbean.role_spy_world:encode(os)
	os:pushString(self._pname_)
	os:push(self.roleSpyWorld)
end


-- 密探风云副本开始
i3k_sbean.role_spy_world_map_start = i3k_class("role_spy_world_map_start")
function i3k_sbean.role_spy_world_map_start:ctor()
	self._pname_ = "role_spy_world_map_start"
end

function i3k_sbean.role_spy_world_map_start:decode(is)
	is:popString()
end

function i3k_sbean.role_spy_world_map_start:encode(os)
	os:pushString(self._pname_)
end


-- 密探风云副本结束
i3k_sbean.role_spy_world_map_end = i3k_class("role_spy_world_map_end")
function i3k_sbean.role_spy_world_map_end:ctor()
	self._pname_ = "role_spy_world_map_end"
end

function i3k_sbean.role_spy_world_map_end:decode(is)
	is:popString()
end

function i3k_sbean.role_spy_world_map_end:encode(os)
	os:pushString(self._pname_)
end


-- gs进入地图同步信息
i3k_sbean.sync_spy_world = i3k_class("sync_spy_world")
function i3k_sbean.sync_spy_world:ctor()
	self._pname_ = "sync_spy_world"
	--self.campType:		int32	
	--self.useAlterCount:		int32	
end

function i3k_sbean.sync_spy_world:clone()
	return clone(self)
end

function i3k_sbean.sync_spy_world:decode(is)
	is:popString()
	self.campType = is:popNumber()
	self.useAlterCount = is:popNumber()
end

function i3k_sbean.sync_spy_world:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.campType)
	os:pushNumber(self.useAlterCount)
end


-- 密探风云每日奖励
i3k_sbean.spy_world_day_reward_res = i3k_class("spy_world_day_reward_res")
function i3k_sbean.spy_world_day_reward_res:ctor()
	self._pname_ = "spy_world_day_reward_res"
	--self.ok:		int32	
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.spy_world_day_reward_res:clone()
	return clone(self)
end

function i3k_sbean.spy_world_day_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.spy_world_day_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.items)
end


-- 密探风云活动奖励
i3k_sbean.spy_world_activity_reward_res = i3k_class("spy_world_activity_reward_res")
function i3k_sbean.spy_world_activity_reward_res:ctor()
	self._pname_ = "spy_world_activity_reward_res"
	--self.ok:		int32	
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.spy_world_activity_reward_res:clone()
	return clone(self)
end

function i3k_sbean.spy_world_activity_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.spy_world_activity_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
	os:pushList(self.items)
end


-- 密探风云变箱子
i3k_sbean.spy_world_alter_res = i3k_class("spy_world_alter_res")
function i3k_sbean.spy_world_alter_res:ctor()
	self._pname_ = "spy_world_alter_res"
	--self.ok:		int32	
end

function i3k_sbean.spy_world_alter_res:clone()
	return clone(self)
end

function i3k_sbean.spy_world_alter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spy_world_alter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 密探风云取消变箱子
i3k_sbean.spy_world_alter_quit_res = i3k_class("spy_world_alter_quit_res")
function i3k_sbean.spy_world_alter_quit_res:ctor()
	self._pname_ = "spy_world_alter_quit_res"
	--self.ok:		int32	
end

function i3k_sbean.spy_world_alter_quit_res:clone()
	return clone(self)
end

function i3k_sbean.spy_world_alter_quit_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spy_world_alter_quit_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- map进入地图同步信息
i3k_sbean.spy_world_map_info = i3k_class("spy_world_map_info")
function i3k_sbean.spy_world_map_info:ctor()
	self._pname_ = "spy_world_map_info"
	--self.tasks:		map[int32, int32]	
	--self.score:		int32	
	--self.alterID:		int32	
end

function i3k_sbean.spy_world_map_info:clone()
	return clone(self)
end

function i3k_sbean.spy_world_map_info:decode(is)
	is:popString()
	self.tasks = is:popNumberNumberMap()
	self.score = is:popNumber()
	self.alterID = is:popNumber()
end

function i3k_sbean.spy_world_map_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.tasks)
	os:pushNumber(self.score)
	os:pushNumber(self.alterID)
end


-- 同步任务进度
i3k_sbean.spy_world_update_task = i3k_class("spy_world_update_task")
function i3k_sbean.spy_world_update_task:ctor()
	self._pname_ = "spy_world_update_task"
	--self.taskID:		int32	
	--self.taskValue:		int32	
end

function i3k_sbean.spy_world_update_task:clone()
	return clone(self)
end

function i3k_sbean.spy_world_update_task:decode(is)
	is:popString()
	self.taskID = is:popNumber()
	self.taskValue = is:popNumber()
end

function i3k_sbean.spy_world_update_task:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
	os:pushNumber(self.taskValue)
end


-- 通知积分增加 addType 1 = 任务  2 = 杀人
i3k_sbean.spy_world_add_score = i3k_class("spy_world_add_score")
function i3k_sbean.spy_world_add_score:ctor()
	self._pname_ = "spy_world_add_score"
	--self.addType:		int32	
	--self.add:		int32	
end

function i3k_sbean.spy_world_add_score:clone()
	return clone(self)
end

function i3k_sbean.spy_world_add_score:decode(is)
	is:popString()
	self.addType = is:popNumber()
	self.add = is:popNumber()
end

function i3k_sbean.spy_world_add_score:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.addType)
	os:pushNumber(self.add)
end


-- 巡逻怪走到终点或超时消失
i3k_sbean.spy_world_patrol_monster_vanish = i3k_class("spy_world_patrol_monster_vanish")
function i3k_sbean.spy_world_patrol_monster_vanish:ctor()
	self._pname_ = "spy_world_patrol_monster_vanish"
	--self.monsterID:		int32	
end

function i3k_sbean.spy_world_patrol_monster_vanish:clone()
	return clone(self)
end

function i3k_sbean.spy_world_patrol_monster_vanish:decode(is)
	is:popString()
	self.monsterID = is:popNumber()
end

function i3k_sbean.spy_world_patrol_monster_vanish:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.monsterID)
end


-- 同步外传职业信息
i3k_sbean.sync_biography_class_info = i3k_class("sync_biography_class_info")
function i3k_sbean.sync_biography_class_info:ctor()
	self._pname_ = "sync_biography_class_info"
	--self.info:		DBBiographyClass	
end

function i3k_sbean.sync_biography_class_info:clone()
	return clone(self)
end

function i3k_sbean.sync_biography_class_info:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBBiographyClass)
end

function i3k_sbean.sync_biography_class_info:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 开始外传职业副本
i3k_sbean.biography_class_map_start_res = i3k_class("biography_class_map_start_res")
function i3k_sbean.biography_class_map_start_res:ctor()
	self._pname_ = "biography_class_map_start_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_map_start_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_map_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_map_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传职业副本装备技能
i3k_sbean.biography_class_skill_select_res = i3k_class("biography_class_skill_select_res")
function i3k_sbean.biography_class_skill_select_res:ctor()
	self._pname_ = "biography_class_skill_select_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_skill_select_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_skill_select_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_skill_select_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传职业副本卸载技能
i3k_sbean.biography_class_skill_unselect_res = i3k_class("biography_class_skill_unselect_res")
function i3k_sbean.biography_class_skill_unselect_res:ctor()
	self._pname_ = "biography_class_skill_unselect_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_skill_unselect_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_skill_unselect_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_skill_unselect_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传职业副本装备心法
i3k_sbean.biography_class_spirit_install_res = i3k_class("biography_class_spirit_install_res")
function i3k_sbean.biography_class_spirit_install_res:ctor()
	self._pname_ = "biography_class_spirit_install_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_spirit_install_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_spirit_install_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_spirit_install_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传职业副本卸载心法
i3k_sbean.biography_class_spirit_uninstall_res = i3k_class("biography_class_spirit_uninstall_res")
function i3k_sbean.biography_class_spirit_uninstall_res:ctor()
	self._pname_ = "biography_class_spirit_uninstall_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_spirit_uninstall_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_spirit_uninstall_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_spirit_uninstall_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 接取外传职业副本任务
i3k_sbean.biography_class_take_task_res = i3k_class("biography_class_take_task_res")
function i3k_sbean.biography_class_take_task_res:ctor()
	self._pname_ = "biography_class_take_task_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_take_task_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_take_task_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_take_task_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取外传职业副本任务奖励
i3k_sbean.biography_class_task_reward_res = i3k_class("biography_class_task_reward_res")
function i3k_sbean.biography_class_task_reward_res:ctor()
	self._pname_ = "biography_class_task_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_task_reward_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_task_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_task_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传副本变更职业
i3k_sbean.biography_class_change_profession_res = i3k_class("biography_class_change_profession_res")
function i3k_sbean.biography_class_change_profession_res:ctor()
	self._pname_ = "biography_class_change_profession_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_change_profession_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_change_profession_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_change_profession_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 外传变更职业反悔
i3k_sbean.biography_class_regret_profession_res = i3k_class("biography_class_regret_profession_res")
function i3k_sbean.biography_class_regret_profession_res:ctor()
	self._pname_ = "biography_class_regret_profession_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_regret_profession_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_regret_profession_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_regret_profession_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取宝箱奖励
i3k_sbean.biography_class_receive_box_reward_res = i3k_class("biography_class_receive_box_reward_res")
function i3k_sbean.biography_class_receive_box_reward_res:ctor()
	self._pname_ = "biography_class_receive_box_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.biography_class_receive_box_reward_res:clone()
	return clone(self)
end

function i3k_sbean.biography_class_receive_box_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.biography_class_receive_box_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 进入地图同步职业
i3k_sbean.sync_biography_class_class_type = i3k_class("sync_biography_class_class_type")
function i3k_sbean.sync_biography_class_class_type:ctor()
	self._pname_ = "sync_biography_class_class_type"
	--self.classType:		int32	
end

function i3k_sbean.sync_biography_class_class_type:clone()
	return clone(self)
end

function i3k_sbean.sync_biography_class_class_type:decode(is)
	is:popString()
	self.classType = is:popNumber()
end

function i3k_sbean.sync_biography_class_class_type:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.classType)
end


-- 登录同步
i3k_sbean.sync_first_access_info = i3k_class("sync_first_access_info")
function i3k_sbean.sync_first_access_info:ctor()
	self._pname_ = "sync_first_access_info"
	--self.info:		map[int32, DBFirstAccessRecord]	
end

function i3k_sbean.sync_first_access_info:clone()
	return clone(self)
end

function i3k_sbean.sync_first_access_info:decode(is)
	is:popString()
	self.info = is:popNumberMap(i3k_sbean.DBFirstAccessRecord)
end

function i3k_sbean.sync_first_access_info:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.info)
end


-- 领取奖励
i3k_sbean.first_access_take_reward_res = i3k_class("first_access_take_reward_res")
function i3k_sbean.first_access_take_reward_res:ctor()
	self._pname_ = "first_access_take_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.first_access_take_reward_res:clone()
	return clone(self)
end

function i3k_sbean.first_access_take_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.first_access_take_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 领取限时任务
i3k_sbean.time_limit_task_take_res = i3k_class("time_limit_task_take_res")
function i3k_sbean.time_limit_task_take_res:ctor()
	self._pname_ = "time_limit_task_take_res"
	--self.id:		int32	
end

function i3k_sbean.time_limit_task_take_res:clone()
	return clone(self)
end

function i3k_sbean.time_limit_task_take_res:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.time_limit_task_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 开始限时任务
i3k_sbean.time_limit_task_start_res = i3k_class("time_limit_task_start_res")
function i3k_sbean.time_limit_task_start_res:ctor()
	self._pname_ = "time_limit_task_start_res"
	--self.ok:		int32	
end

function i3k_sbean.time_limit_task_start_res:clone()
	return clone(self)
end

function i3k_sbean.time_limit_task_start_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.time_limit_task_start_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成限时任务
i3k_sbean.time_limit_task_finish_res = i3k_class("time_limit_task_finish_res")
function i3k_sbean.time_limit_task_finish_res:ctor()
	self._pname_ = "time_limit_task_finish_res"
	--self.ok:		int32	
end

function i3k_sbean.time_limit_task_finish_res:clone()
	return clone(self)
end

function i3k_sbean.time_limit_task_finish_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.time_limit_task_finish_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 限时任务登陆同步
i3k_sbean.time_limit_task_login_sync = i3k_class("time_limit_task_login_sync")
function i3k_sbean.time_limit_task_login_sync:ctor()
	self._pname_ = "time_limit_task_login_sync"
	--self.tasks:		map[int32, DBNewTimeLimitTask]	
end

function i3k_sbean.time_limit_task_login_sync:clone()
	return clone(self)
end

function i3k_sbean.time_limit_task_login_sync:decode(is)
	is:popString()
	self.tasks = is:popNumberMap(i3k_sbean.DBNewTimeLimitTask)
end

function i3k_sbean.time_limit_task_login_sync:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.tasks)
end


-- 节日活动同步
i3k_sbean.festival_activity_sync_res = i3k_class("festival_activity_sync_res")
function i3k_sbean.festival_activity_sync_res:ctor()
	self._pname_ = "festival_activity_sync_res"
	--self.roleInfo:		DBRoleFestivalActivity	
	--self.worldScore:		int32	
end

function i3k_sbean.festival_activity_sync_res:clone()
	return clone(self)
end

function i3k_sbean.festival_activity_sync_res:decode(is)
	is:popString()
	self.roleInfo = is:pop(i3k_sbean.DBRoleFestivalActivity)
	self.worldScore = is:popNumber()
end

function i3k_sbean.festival_activity_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.roleInfo)
	os:pushNumber(self.worldScore)
end


-- 节日活动捐赠
i3k_sbean.festival_activity_donate_res = i3k_class("festival_activity_donate_res")
function i3k_sbean.festival_activity_donate_res:ctor()
	self._pname_ = "festival_activity_donate_res"
	--self.ok:		int32	
end

function i3k_sbean.festival_activity_donate_res:clone()
	return clone(self)
end

function i3k_sbean.festival_activity_donate_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.festival_activity_donate_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 节日活动角色积分奖励
i3k_sbean.festival_activity_role_reward_res = i3k_class("festival_activity_role_reward_res")
function i3k_sbean.festival_activity_role_reward_res:ctor()
	self._pname_ = "festival_activity_role_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.festival_activity_role_reward_res:clone()
	return clone(self)
end

function i3k_sbean.festival_activity_role_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.festival_activity_role_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 节日活动世界积分奖励
i3k_sbean.festival_activity_world_reward_res = i3k_class("festival_activity_world_reward_res")
function i3k_sbean.festival_activity_world_reward_res:ctor()
	self._pname_ = "festival_activity_world_reward_res"
	--self.ok:		int32	
end

function i3k_sbean.festival_activity_world_reward_res:clone()
	return clone(self)
end

function i3k_sbean.festival_activity_world_reward_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.festival_activity_world_reward_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 节日活动积分阶段变化推送
i3k_sbean.festival_activity_score_push = i3k_class("festival_activity_score_push")
function i3k_sbean.festival_activity_score_push:ctor()
	self._pname_ = "festival_activity_score_push"
	--self.score:		int32	
end

function i3k_sbean.festival_activity_score_push:clone()
	return clone(self)
end

function i3k_sbean.festival_activity_score_push:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.festival_activity_score_push:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 同步新春灯卷
i3k_sbean.spring_lantern_sync_res = i3k_class("spring_lantern_sync_res")
function i3k_sbean.spring_lantern_sync_res:ctor()
	self._pname_ = "spring_lantern_sync_res"
	--self.info:		DBSpringLantern	
end

function i3k_sbean.spring_lantern_sync_res:clone()
	return clone(self)
end

function i3k_sbean.spring_lantern_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBSpringLantern)
end

function i3k_sbean.spring_lantern_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 同步新春灯卷每日NPC组
i3k_sbean.spring_lantern_day_group = i3k_class("spring_lantern_day_group")
function i3k_sbean.spring_lantern_day_group:ctor()
	self._pname_ = "spring_lantern_day_group"
	--self.dayNpcGroup:		int32	
end

function i3k_sbean.spring_lantern_day_group:clone()
	return clone(self)
end

function i3k_sbean.spring_lantern_day_group:decode(is)
	is:popString()
	self.dayNpcGroup = is:popNumber()
end

function i3k_sbean.spring_lantern_day_group:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayNpcGroup)
end


-- 进入新春灯卷地图
i3k_sbean.spring_lantern_map_enter_res = i3k_class("spring_lantern_map_enter_res")
function i3k_sbean.spring_lantern_map_enter_res:ctor()
	self._pname_ = "spring_lantern_map_enter_res"
	--self.ok:		int32	
end

function i3k_sbean.spring_lantern_map_enter_res:clone()
	return clone(self)
end

function i3k_sbean.spring_lantern_map_enter_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spring_lantern_map_enter_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 完成新春灯卷NPC活动
i3k_sbean.spring_lantern_join_res = i3k_class("spring_lantern_join_res")
function i3k_sbean.spring_lantern_join_res:ctor()
	self._pname_ = "spring_lantern_join_res"
	--self.ok:		int32	
end

function i3k_sbean.spring_lantern_join_res:clone()
	return clone(self)
end

function i3k_sbean.spring_lantern_join_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spring_lantern_join_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用灯笼
i3k_sbean.spring_lantern_use_res = i3k_class("spring_lantern_use_res")
function i3k_sbean.spring_lantern_use_res:ctor()
	self._pname_ = "spring_lantern_use_res"
	--self.ok:		int32	
end

function i3k_sbean.spring_lantern_use_res:clone()
	return clone(self)
end

function i3k_sbean.spring_lantern_use_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.spring_lantern_use_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 使用灯笼完成掉落
i3k_sbean.spring_lantern_finish_drop = i3k_class("spring_lantern_finish_drop")
function i3k_sbean.spring_lantern_finish_drop:ctor()
	self._pname_ = "spring_lantern_finish_drop"
	--self.drop:		vector[DummyGoods]	
end

function i3k_sbean.spring_lantern_finish_drop:clone()
	return clone(self)
end

function i3k_sbean.spring_lantern_finish_drop:decode(is)
	is:popString()
	self.drop = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.spring_lantern_finish_drop:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.drop)
end


-- 纪念币同步
i3k_sbean.souvenir_coin_sync_res = i3k_class("souvenir_coin_sync_res")
function i3k_sbean.souvenir_coin_sync_res:ctor()
	self._pname_ = "souvenir_coin_sync_res"
	--self.info:		DBSouvenirCoin	
end

function i3k_sbean.souvenir_coin_sync_res:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_sync_res:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBSouvenirCoin)
end

function i3k_sbean.souvenir_coin_sync_res:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 纪念币登陆同步
i3k_sbean.souvenir_coin_login_sync = i3k_class("souvenir_coin_login_sync")
function i3k_sbean.souvenir_coin_login_sync:ctor()
	self._pname_ = "souvenir_coin_login_sync"
	--self.info:		DBSouvenirCoin	
end

function i3k_sbean.souvenir_coin_login_sync:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_login_sync:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.DBSouvenirCoin)
end

function i3k_sbean.souvenir_coin_login_sync:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 购买纪念币
i3k_sbean.souvenir_coin_buy_res = i3k_class("souvenir_coin_buy_res")
function i3k_sbean.souvenir_coin_buy_res:ctor()
	self._pname_ = "souvenir_coin_buy_res"
	--self.ok:		int32	
end

function i3k_sbean.souvenir_coin_buy_res:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_buy_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.souvenir_coin_buy_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 兑现纪念币
i3k_sbean.souvenir_coin_cash_res = i3k_class("souvenir_coin_cash_res")
function i3k_sbean.souvenir_coin_cash_res:ctor()
	self._pname_ = "souvenir_coin_cash_res"
	--self.ok:		int32	
end

function i3k_sbean.souvenir_coin_cash_res:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_cash_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.souvenir_coin_cash_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 代币兑换
i3k_sbean.souvenir_coin_exchange_res = i3k_class("souvenir_coin_exchange_res")
function i3k_sbean.souvenir_coin_exchange_res:ctor()
	self._pname_ = "souvenir_coin_exchange_res"
	--self.ok:		int32	
end

function i3k_sbean.souvenir_coin_exchange_res:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_exchange_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.souvenir_coin_exchange_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 强制兑现纪念币
i3k_sbean.souvenir_coin_force_cash_res = i3k_class("souvenir_coin_force_cash_res")
function i3k_sbean.souvenir_coin_force_cash_res:ctor()
	self._pname_ = "souvenir_coin_force_cash_res"
	--self.ok:		int32	
end

function i3k_sbean.souvenir_coin_force_cash_res:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_force_cash_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.souvenir_coin_force_cash_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 保持奖励领取
i3k_sbean.souvenir_coin_hold_reward_take_res = i3k_class("souvenir_coin_hold_reward_take_res")
function i3k_sbean.souvenir_coin_hold_reward_take_res:ctor()
	self._pname_ = "souvenir_coin_hold_reward_take_res"
	--self.ok:		int32	
end

function i3k_sbean.souvenir_coin_hold_reward_take_res:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_hold_reward_take_res:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.souvenir_coin_hold_reward_take_res:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- ping with stamp
i3k_sbean.client_ping = i3k_class("client_ping")
function i3k_sbean.client_ping:ctor()
	self._pname_ = "client_ping"
	--self.stamp:		int32	
end

function i3k_sbean.client_ping:clone()
	return clone(self)
end

function i3k_sbean.client_ping:decode(is)
	is:popString()
	self.stamp = is:popNumber()
end

function i3k_sbean.client_ping:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.stamp)
end


-- keep alive
i3k_sbean.keep_alive = i3k_class("keep_alive")
function i3k_sbean.keep_alive:ctor()
	self._pname_ = "keep_alive"
end

function i3k_sbean.keep_alive:decode(is)
	is:popString()
end

function i3k_sbean.keep_alive:encode(os)
	os:pushString(self._pname_)
end


-- 登录协议
i3k_sbean.user_login_req = i3k_class("user_login_req")
function i3k_sbean.user_login_req:ctor()
	self._pname_ = "user_login_req"
	--self.gsId:		int32	
	--self.openId:		string	
	--self.channel:		string	
	--self.loginInfo:		UserLoginInfo	
	--self.roleId:		int32	
	--self.createParam:		CreateRoleParam	
end

function i3k_sbean.user_login_req:clone()
	return clone(self)
end

function i3k_sbean.user_login_req:decode(is)
	is:popString()
	self.gsId = is:popNumber()
	self.openId = is:popString()
	self.channel = is:popString()
	self.loginInfo = is:pop(i3k_sbean.UserLoginInfo)
	self.roleId = is:popNumber()
	self.createParam = is:pop(i3k_sbean.CreateRoleParam)
end

function i3k_sbean.user_login_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gsId)
	os:pushString(self.openId)
	os:pushString(self.channel)
	os:push(self.loginInfo)
	os:pushNumber(self.roleId)
	os:push(self.createParam)
end


-- 客户端通知服务器要退出到选人界面
i3k_sbean.role_logout_req = i3k_class("role_logout_req")
function i3k_sbean.role_logout_req:ctor()
	self._pname_ = "role_logout_req"
end

function i3k_sbean.role_logout_req:decode(is)
	is:popString()
end

function i3k_sbean.role_logout_req:encode(os)
	os:pushString(self._pname_)
end


-- 客户端查询排队位置
i3k_sbean.query_loginqueue_pos = i3k_class("query_loginqueue_pos")
function i3k_sbean.query_loginqueue_pos:ctor()
	self._pname_ = "query_loginqueue_pos"
end

function i3k_sbean.query_loginqueue_pos:decode(is)
	is:popString()
end

function i3k_sbean.query_loginqueue_pos:encode(os)
	os:pushString(self._pname_)
end


-- 客户端查询排队位置
i3k_sbean.cancel_loginqueue = i3k_class("cancel_loginqueue")
function i3k_sbean.cancel_loginqueue:ctor()
	self._pname_ = "cancel_loginqueue"
end

function i3k_sbean.cancel_loginqueue:decode(is)
	is:popString()
end

function i3k_sbean.cancel_loginqueue:encode(os)
	os:pushString(self._pname_)
end


-- 客户端从堵塞状态恢复协议
i3k_sbean.role_sync_map = i3k_class("role_sync_map")
function i3k_sbean.role_sync_map:ctor()
	self._pname_ = "role_sync_map"
end

function i3k_sbean.role_sync_map:decode(is)
	is:popString()
end

function i3k_sbean.role_sync_map:encode(os)
	os:pushString(self._pname_)
end


-- 发送聊天消息请求
i3k_sbean.msg_send_req = i3k_class("msg_send_req")
function i3k_sbean.msg_send_req:ctor()
	self._pname_ = "msg_send_req"
	--self.type:		int32	
	--self.id:		int32	
	--self.msg:		string	
	--self.gsName:		string	
end

function i3k_sbean.msg_send_req:clone()
	return clone(self)
end

function i3k_sbean.msg_send_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.id = is:popNumber()
	self.msg = is:popString()
	self.gsName = is:popString()
end

function i3k_sbean.msg_send_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.id)
	os:pushString(self.msg)
	os:pushString(self.gsName)
end


-- 客户端通知服务器已经load好地图资源准备好进入地图的协议
i3k_sbean.role_enter_map = i3k_class("role_enter_map")
function i3k_sbean.role_enter_map:ctor()
	self._pname_ = "role_enter_map"
end

function i3k_sbean.role_enter_map:decode(is)
	is:popString()
end

function i3k_sbean.role_enter_map:encode(os)
	os:pushString(self._pname_)
end


-- 进入大地图传送点
i3k_sbean.waypoint_enter_req = i3k_class("waypoint_enter_req")
function i3k_sbean.waypoint_enter_req:ctor()
	self._pname_ = "waypoint_enter_req"
	--self.wid:		int32	
	--self.line:		int32	
end

function i3k_sbean.waypoint_enter_req:clone()
	return clone(self)
end

function i3k_sbean.waypoint_enter_req:decode(is)
	is:popString()
	self.wid = is:popNumber()
	self.line = is:popNumber()
end

function i3k_sbean.waypoint_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
	os:pushNumber(self.line)
end


-- 脱离卡死点
i3k_sbean.wrongpos_leave_req = i3k_class("wrongpos_leave_req")
function i3k_sbean.wrongpos_leave_req:ctor()
	self._pname_ = "wrongpos_leave_req"
end

function i3k_sbean.wrongpos_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.wrongpos_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步世界地图分线状态
i3k_sbean.worldline_sync_req = i3k_class("worldline_sync_req")
function i3k_sbean.worldline_sync_req:ctor()
	self._pname_ = "worldline_sync_req"
end

function i3k_sbean.worldline_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.worldline_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 切换当前地图分线(line: 从1开始)
i3k_sbean.worldline_change_req = i3k_class("worldline_change_req")
function i3k_sbean.worldline_change_req:ctor()
	self._pname_ = "worldline_change_req"
	--self.line:		int32	
end

function i3k_sbean.worldline_change_req:clone()
	return clone(self)
end

function i3k_sbean.worldline_change_req:decode(is)
	is:popString()
	self.line = is:popNumber()
end

function i3k_sbean.worldline_change_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.line)
end


-- 查询玩家信息
i3k_sbean.query_rolebrief_req = i3k_class("query_rolebrief_req")
function i3k_sbean.query_rolebrief_req:ctor()
	self._pname_ = "query_rolebrief_req"
	--self.rid:		int32	
end

function i3k_sbean.query_rolebrief_req:clone()
	return clone(self)
end

function i3k_sbean.query_rolebrief_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.query_rolebrief_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 查询机器人信息响应
i3k_sbean.query_robot_req = i3k_class("query_robot_req")
function i3k_sbean.query_robot_req:ctor()
	self._pname_ = "query_robot_req"
	--self.rid:		int32	
	--self.rank:		int32	
end

function i3k_sbean.query_robot_req:clone()
	return clone(self)
end

function i3k_sbean.query_robot_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.rank = is:popNumber()
end

function i3k_sbean.query_robot_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.rank)
end


-- 获取玩家的特性信息
i3k_sbean.query_rolefeature_req = i3k_class("query_rolefeature_req")
function i3k_sbean.query_rolefeature_req:ctor()
	self._pname_ = "query_rolefeature_req"
	--self.rid:		int32	
end

function i3k_sbean.query_rolefeature_req:clone()
	return clone(self)
end

function i3k_sbean.query_rolefeature_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.query_rolefeature_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 获取玩家所有已获得的佣兵信息
i3k_sbean.query_petoverviews_req = i3k_class("query_petoverviews_req")
function i3k_sbean.query_petoverviews_req:ctor()
	self._pname_ = "query_petoverviews_req"
	--self.rid:		int32	
end

function i3k_sbean.query_petoverviews_req:clone()
	return clone(self)
end

function i3k_sbean.query_petoverviews_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.query_petoverviews_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 获取玩家所有已获得的神兵信息
i3k_sbean.query_weaponoverviews_req = i3k_class("query_weaponoverviews_req")
function i3k_sbean.query_weaponoverviews_req:ctor()
	self._pname_ = "query_weaponoverviews_req"
	--self.rid:		int32	
end

function i3k_sbean.query_weaponoverviews_req:clone()
	return clone(self)
end

function i3k_sbean.query_weaponoverviews_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.query_weaponoverviews_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 获取玩家所有已获得的暗器信息
i3k_sbean.query_hideWeaponoverviews_req = i3k_class("query_hideWeaponoverviews_req")
function i3k_sbean.query_hideWeaponoverviews_req:ctor()
	self._pname_ = "query_hideWeaponoverviews_req"
	--self.rid:		int32	
end

function i3k_sbean.query_hideWeaponoverviews_req:clone()
	return clone(self)
end

function i3k_sbean.query_hideWeaponoverviews_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.query_hideWeaponoverviews_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 获取玩家所有坐骑信息
i3k_sbean.query_horseoverviews_req = i3k_class("query_horseoverviews_req")
function i3k_sbean.query_horseoverviews_req:ctor()
	self._pname_ = "query_horseoverviews_req"
	--self.rid:		int32	
end

function i3k_sbean.query_horseoverviews_req:clone()
	return clone(self)
end

function i3k_sbean.query_horseoverviews_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.query_horseoverviews_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 获取玩家单个坐骑信息
i3k_sbean.query_single_horseoverview_req = i3k_class("query_single_horseoverview_req")
function i3k_sbean.query_single_horseoverview_req:ctor()
	self._pname_ = "query_single_horseoverview_req"
	--self.rid:		int32	
	--self.horseId:		int32	
end

function i3k_sbean.query_single_horseoverview_req:clone()
	return clone(self)
end

function i3k_sbean.query_single_horseoverview_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.horseId = is:popNumber()
end

function i3k_sbean.query_single_horseoverview_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.horseId)
end


-- 获取玩家内甲信息
i3k_sbean.query_armoroverviews_req = i3k_class("query_armoroverviews_req")
function i3k_sbean.query_armoroverviews_req:ctor()
	self._pname_ = "query_armoroverviews_req"
	--self.rid:		int32	
end

function i3k_sbean.query_armoroverviews_req:clone()
	return clone(self)
end

function i3k_sbean.query_armoroverviews_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.query_armoroverviews_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 获取玩家武魂信息
i3k_sbean.query_weaponsouloverview_req = i3k_class("query_weaponsouloverview_req")
function i3k_sbean.query_weaponsouloverview_req:ctor()
	self._pname_ = "query_weaponsouloverview_req"
	--self.rid:		int32	
end

function i3k_sbean.query_weaponsouloverview_req:clone()
	return clone(self)
end

function i3k_sbean.query_weaponsouloverview_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.query_weaponsouloverview_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 原地复活
i3k_sbean.role_revive_insitu_req = i3k_class("role_revive_insitu_req")
function i3k_sbean.role_revive_insitu_req:ctor()
	self._pname_ = "role_revive_insitu_req"
	--self.useStone:		int32	
end

function i3k_sbean.role_revive_insitu_req:clone()
	return clone(self)
end

function i3k_sbean.role_revive_insitu_req:decode(is)
	is:popString()
	self.useStone = is:popNumber()
end

function i3k_sbean.role_revive_insitu_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.useStone)
end


-- cpr复活
i3k_sbean.role_revive_cpr_req = i3k_class("role_revive_cpr_req")
function i3k_sbean.role_revive_cpr_req:ctor()
	self._pname_ = "role_revive_cpr_req"
end

function i3k_sbean.role_revive_cpr_req:decode(is)
	is:popString()
end

function i3k_sbean.role_revive_cpr_req:encode(os)
	os:pushString(self._pname_)
end


-- 其他方式复活复活点复活
i3k_sbean.role_revive_other_req = i3k_class("role_revive_other_req")
function i3k_sbean.role_revive_other_req:ctor()
	self._pname_ = "role_revive_other_req"
end

function i3k_sbean.role_revive_other_req:decode(is)
	is:popString()
end

function i3k_sbean.role_revive_other_req:encode(os)
	os:pushString(self._pname_)
end


-- 安全点复活
i3k_sbean.role_revive_safe_req = i3k_class("role_revive_safe_req")
function i3k_sbean.role_revive_safe_req:ctor()
	self._pname_ = "role_revive_safe_req"
end

function i3k_sbean.role_revive_safe_req:decode(is)
	is:popString()
end

function i3k_sbean.role_revive_safe_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派驻地安全点复活
i3k_sbean.role_sect_zone_revive_safe_req = i3k_class("role_sect_zone_revive_safe_req")
function i3k_sbean.role_sect_zone_revive_safe_req:ctor()
	self._pname_ = "role_sect_zone_revive_safe_req"
end

function i3k_sbean.role_sect_zone_revive_safe_req:decode(is)
	is:popString()
end

function i3k_sbean.role_sect_zone_revive_safe_req:encode(os)
	os:pushString(self._pname_)
end


-- 转职
i3k_sbean.role_transform_req = i3k_class("role_transform_req")
function i3k_sbean.role_transform_req:ctor()
	self._pname_ = "role_transform_req"
	--self.tlvl:		int8	
	--self.bwType:		int8	
end

function i3k_sbean.role_transform_req:clone()
	return clone(self)
end

function i3k_sbean.role_transform_req:decode(is)
	is:popString()
	self.tlvl = is:popNumber()
	self.bwType = is:popNumber()
end

function i3k_sbean.role_transform_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.tlvl)
	os:pushNumber(self.bwType)
end


-- 签到同步
i3k_sbean.checkin_sync_req = i3k_class("checkin_sync_req")
function i3k_sbean.checkin_sync_req:ctor()
	self._pname_ = "checkin_sync_req"
end

function i3k_sbean.checkin_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.checkin_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 签到领奖
i3k_sbean.checkin_take_req = i3k_class("checkin_take_req")
function i3k_sbean.checkin_take_req:ctor()
	self._pname_ = "checkin_take_req"
end

function i3k_sbean.checkin_take_req:decode(is)
	is:popString()
end

function i3k_sbean.checkin_take_req:encode(os)
	os:pushString(self._pname_)
end


-- 签到领取累计额外奖励
i3k_sbean.checkin_take_additional_req = i3k_class("checkin_take_additional_req")
function i3k_sbean.checkin_take_additional_req:ctor()
	self._pname_ = "checkin_take_additional_req"
	--self.finishDay:		int32	
end

function i3k_sbean.checkin_take_additional_req:clone()
	return clone(self)
end

function i3k_sbean.checkin_take_additional_req:decode(is)
	is:popString()
	self.finishDay = is:popNumber()
end

function i3k_sbean.checkin_take_additional_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.finishDay)
end


-- 商城同步
i3k_sbean.mall_sync_req = i3k_class("mall_sync_req")
function i3k_sbean.mall_sync_req:ctor()
	self._pname_ = "mall_sync_req"
end

function i3k_sbean.mall_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.mall_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 商城购买
i3k_sbean.mall_buy_req = i3k_class("mall_buy_req")
function i3k_sbean.mall_buy_req:ctor()
	self._pname_ = "mall_buy_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.gid:		int32	
	--self.count:		int32	
	--self.mallType:		int32	
	--self.price:		int32	
end

function i3k_sbean.mall_buy_req:clone()
	return clone(self)
end

function i3k_sbean.mall_buy_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.gid = is:popNumber()
	self.count = is:popNumber()
	self.mallType = is:popNumber()
	self.price = is:popNumber()
end

function i3k_sbean.mall_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.gid)
	os:pushNumber(self.count)
	os:pushNumber(self.mallType)
	os:pushNumber(self.price)
end


-- 福利同步
i3k_sbean.benefit_sync_req = i3k_class("benefit_sync_req")
function i3k_sbean.benefit_sync_req:ctor()
	self._pname_ = "benefit_sync_req"
end

function i3k_sbean.benefit_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.benefit_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 充值相关活动同步
i3k_sbean.payactivity_sync_req = i3k_class("payactivity_sync_req")
function i3k_sbean.payactivity_sync_req:ctor()
	self._pname_ = "payactivity_sync_req"
end

function i3k_sbean.payactivity_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.payactivity_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步首次充值送礼活动信息
i3k_sbean.firstpaygift_sync_req = i3k_class("firstpaygift_sync_req")
function i3k_sbean.firstpaygift_sync_req:ctor()
	self._pname_ = "firstpaygift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.firstpaygift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.firstpaygift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.firstpaygift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取首次充值送礼活动奖励
i3k_sbean.firstpaygift_take_req = i3k_class("firstpaygift_take_req")
function i3k_sbean.firstpaygift_take_req:ctor()
	self._pname_ = "firstpaygift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.firstpaygift_take_req:clone()
	return clone(self)
end

function i3k_sbean.firstpaygift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.firstpaygift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 同步首次充值送礼活动信息
i3k_sbean.dailypaygift_sync_req = i3k_class("dailypaygift_sync_req")
function i3k_sbean.dailypaygift_sync_req:ctor()
	self._pname_ = "dailypaygift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.dailypaygift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.dailypaygift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.dailypaygift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取首次充值送礼活动奖励
i3k_sbean.dailypaygift_take_req = i3k_class("dailypaygift_take_req")
function i3k_sbean.dailypaygift_take_req:ctor()
	self._pname_ = "dailypaygift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.dailypaygift_take_req:clone()
	return clone(self)
end

function i3k_sbean.dailypaygift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.dailypaygift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 同步持续充值送礼活动信息
i3k_sbean.lastpaygift_sync_req = i3k_class("lastpaygift_sync_req")
function i3k_sbean.lastpaygift_sync_req:ctor()
	self._pname_ = "lastpaygift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.lastpaygift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.lastpaygift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.lastpaygift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取持续充值送礼活动奖励
i3k_sbean.lastpaygift_take_req = i3k_class("lastpaygift_take_req")
function i3k_sbean.lastpaygift_take_req:ctor()
	self._pname_ = "lastpaygift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.seq:		int32	
end

function i3k_sbean.lastpaygift_take_req:clone()
	return clone(self)
end

function i3k_sbean.lastpaygift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.lastpaygift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.seq)
end


-- 同步活动挑战活动信息
i3k_sbean.activitychallengegift_sync_req = i3k_class("activitychallengegift_sync_req")
function i3k_sbean.activitychallengegift_sync_req:ctor()
	self._pname_ = "activitychallengegift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.activitychallengegift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.activitychallengegift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.activitychallengegift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取活动挑战活动奖励
i3k_sbean.activitychallengegift_take_req = i3k_class("activitychallengegift_take_req")
function i3k_sbean.activitychallengegift_take_req:ctor()
	self._pname_ = "activitychallengegift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.activityId:		int32	
	--self.times:		int32	
end

function i3k_sbean.activitychallengegift_take_req:clone()
	return clone(self)
end

function i3k_sbean.activitychallengegift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.activityId = is:popNumber()
	self.times = is:popNumber()
end

function i3k_sbean.activitychallengegift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.activityId)
	os:pushNumber(self.times)
end


-- 同步升级特惠活动信息
i3k_sbean.upgradepurchase_sync_req = i3k_class("upgradepurchase_sync_req")
function i3k_sbean.upgradepurchase_sync_req:ctor()
	self._pname_ = "upgradepurchase_sync_req"
	--self.id:		int32	
end

function i3k_sbean.upgradepurchase_sync_req:clone()
	return clone(self)
end

function i3k_sbean.upgradepurchase_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.upgradepurchase_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 购买升级特惠活动奖励
i3k_sbean.upgradepurchase_buy_req = i3k_class("upgradepurchase_buy_req")
function i3k_sbean.upgradepurchase_buy_req:ctor()
	self._pname_ = "upgradepurchase_buy_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.upgradepurchase_buy_req:clone()
	return clone(self)
end

function i3k_sbean.upgradepurchase_buy_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.upgradepurchase_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 同步活跃领奖活动信息
i3k_sbean.schdulegift_sync_req = i3k_class("schdulegift_sync_req")
function i3k_sbean.schdulegift_sync_req:ctor()
	self._pname_ = "schdulegift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.schdulegift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.schdulegift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.schdulegift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取活跃领奖活动奖励
i3k_sbean.schudulegift_take_req = i3k_class("schudulegift_take_req")
function i3k_sbean.schudulegift_take_req:ctor()
	self._pname_ = "schudulegift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.schduleLevel:		int32	
end

function i3k_sbean.schudulegift_take_req:clone()
	return clone(self)
end

function i3k_sbean.schudulegift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.schduleLevel = is:popNumber()
end

function i3k_sbean.schudulegift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.schduleLevel)
end


-- 同步充值送礼活动信息
i3k_sbean.paygift_sync_req = i3k_class("paygift_sync_req")
function i3k_sbean.paygift_sync_req:ctor()
	self._pname_ = "paygift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.paygift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.paygift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.paygift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取充值送礼活动奖励
i3k_sbean.paygift_take_req = i3k_class("paygift_take_req")
function i3k_sbean.paygift_take_req:ctor()
	self._pname_ = "paygift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.payLevel:		int32	
end

function i3k_sbean.paygift_take_req:clone()
	return clone(self)
end

function i3k_sbean.paygift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.payLevel = is:popNumber()
end

function i3k_sbean.paygift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.payLevel)
end


-- 同步充值折扣礼包活动信息
i3k_sbean.paydiscountgift_sync_req = i3k_class("paydiscountgift_sync_req")
function i3k_sbean.paydiscountgift_sync_req:ctor()
	self._pname_ = "paydiscountgift_sync_req"
end

function i3k_sbean.paydiscountgift_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.paydiscountgift_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取充值折扣礼包活动奖励
i3k_sbean.paydiscountgift_take_req = i3k_class("paydiscountgift_take_req")
function i3k_sbean.paydiscountgift_take_req:ctor()
	self._pname_ = "paydiscountgift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.payLevel:		int32	
end

function i3k_sbean.paydiscountgift_take_req:clone()
	return clone(self)
end

function i3k_sbean.paydiscountgift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.payLevel = is:popNumber()
end

function i3k_sbean.paydiscountgift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.payLevel)
end


-- 同步消费送礼活动信息
i3k_sbean.consumegift_sync_req = i3k_class("consumegift_sync_req")
function i3k_sbean.consumegift_sync_req:ctor()
	self._pname_ = "consumegift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.consumegift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.consumegift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.consumegift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取消费送礼活动奖励
i3k_sbean.consumegift_take_req = i3k_class("consumegift_take_req")
function i3k_sbean.consumegift_take_req:ctor()
	self._pname_ = "consumegift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.consumeLevel:		int32	
end

function i3k_sbean.consumegift_take_req:clone()
	return clone(self)
end

function i3k_sbean.consumegift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.consumeLevel = is:popNumber()
end

function i3k_sbean.consumegift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.consumeLevel)
end


-- 同步冲级送礼活动信息
i3k_sbean.upgradegift_sync_req = i3k_class("upgradegift_sync_req")
function i3k_sbean.upgradegift_sync_req:ctor()
	self._pname_ = "upgradegift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.upgradegift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.upgradegift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.upgradegift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取冲级送礼活动奖励
i3k_sbean.upgradegift_take_req = i3k_class("upgradegift_take_req")
function i3k_sbean.upgradegift_take_req:ctor()
	self._pname_ = "upgradegift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.level:		int32	
end

function i3k_sbean.upgradegift_take_req:clone()
	return clone(self)
end

function i3k_sbean.upgradegift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.upgradegift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
end


-- 红包拿来活动信息
i3k_sbean.redpack_sync_req = i3k_class("redpack_sync_req")
function i3k_sbean.redpack_sync_req:ctor()
	self._pname_ = "redpack_sync_req"
	--self.id:		int32	
end

function i3k_sbean.redpack_sync_req:clone()
	return clone(self)
end

function i3k_sbean.redpack_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.redpack_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 红包拿来活动奖励
i3k_sbean.redpack_take_req = i3k_class("redpack_take_req")
function i3k_sbean.redpack_take_req:ctor()
	self._pname_ = "redpack_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.day:		int32	
end

function i3k_sbean.redpack_take_req:clone()
	return clone(self)
end

function i3k_sbean.redpack_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.day = is:popNumber()
end

function i3k_sbean.redpack_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.day)
end


-- 充值返还活动信息
i3k_sbean.payrebate_sync_req = i3k_class("payrebate_sync_req")
function i3k_sbean.payrebate_sync_req:ctor()
	self._pname_ = "payrebate_sync_req"
	--self.id:		int32	
end

function i3k_sbean.payrebate_sync_req:clone()
	return clone(self)
end

function i3k_sbean.payrebate_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.payrebate_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 充值返还活动奖励
i3k_sbean.payrebate_take_req = i3k_class("payrebate_take_req")
function i3k_sbean.payrebate_take_req:ctor()
	self._pname_ = "payrebate_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.payrebate_take_req:clone()
	return clone(self)
end

function i3k_sbean.payrebate_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.payrebate_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 同步投资基金活动信息
i3k_sbean.investmentfund_sync_req = i3k_class("investmentfund_sync_req")
function i3k_sbean.investmentfund_sync_req:ctor()
	self._pname_ = "investmentfund_sync_req"
	--self.id:		int32	
end

function i3k_sbean.investmentfund_sync_req:clone()
	return clone(self)
end

function i3k_sbean.investmentfund_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.investmentfund_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 买投资基金
i3k_sbean.investmentfund_buy_req = i3k_class("investmentfund_buy_req")
function i3k_sbean.investmentfund_buy_req:ctor()
	self._pname_ = "investmentfund_buy_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.investmentfund_buy_req:clone()
	return clone(self)
end

function i3k_sbean.investmentfund_buy_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.investmentfund_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 领取投资基金活动奖励
i3k_sbean.investmentfund_take_req = i3k_class("investmentfund_take_req")
function i3k_sbean.investmentfund_take_req:ctor()
	self._pname_ = "investmentfund_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.day:		int32	
end

function i3k_sbean.investmentfund_take_req:clone()
	return clone(self)
end

function i3k_sbean.investmentfund_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.day = is:popNumber()
end

function i3k_sbean.investmentfund_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.day)
end


-- 同步成长基金活动信息
i3k_sbean.growthfund_sync_req = i3k_class("growthfund_sync_req")
function i3k_sbean.growthfund_sync_req:ctor()
	self._pname_ = "growthfund_sync_req"
	--self.id:		int32	
end

function i3k_sbean.growthfund_sync_req:clone()
	return clone(self)
end

function i3k_sbean.growthfund_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.growthfund_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 买成长基金
i3k_sbean.growthfund_buy_req = i3k_class("growthfund_buy_req")
function i3k_sbean.growthfund_buy_req:ctor()
	self._pname_ = "growthfund_buy_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.growthfund_buy_req:clone()
	return clone(self)
end

function i3k_sbean.growthfund_buy_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.growthfund_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 领取成长基金活动奖励
i3k_sbean.growthfund_take_req = i3k_class("growthfund_take_req")
function i3k_sbean.growthfund_take_req:ctor()
	self._pname_ = "growthfund_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.level:		int32	
end

function i3k_sbean.growthfund_take_req:clone()
	return clone(self)
end

function i3k_sbean.growthfund_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.growthfund_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.level)
end


-- 同步双倍掉落副本活动信息
i3k_sbean.doubledrop_sync_req = i3k_class("doubledrop_sync_req")
function i3k_sbean.doubledrop_sync_req:ctor()
	self._pname_ = "doubledrop_sync_req"
	--self.id:		int32	
end

function i3k_sbean.doubledrop_sync_req:clone()
	return clone(self)
end

function i3k_sbean.doubledrop_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.doubledrop_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 同步额外掉落副本活动信息
i3k_sbean.extradrop_sync_req = i3k_class("extradrop_sync_req")
function i3k_sbean.extradrop_sync_req:ctor()
	self._pname_ = "extradrop_sync_req"
	--self.id:		int32	
end

function i3k_sbean.extradrop_sync_req:clone()
	return clone(self)
end

function i3k_sbean.extradrop_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.extradrop_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 同步兑换礼品活动信息
i3k_sbean.exchangegift_sync_req = i3k_class("exchangegift_sync_req")
function i3k_sbean.exchangegift_sync_req:ctor()
	self._pname_ = "exchangegift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.exchangegift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.exchangegift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.exchangegift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取兑换礼品
i3k_sbean.exchangegift_take_req = i3k_class("exchangegift_take_req")
function i3k_sbean.exchangegift_take_req:ctor()
	self._pname_ = "exchangegift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.seq:		int32	
end

function i3k_sbean.exchangegift_take_req:clone()
	return clone(self)
end

function i3k_sbean.exchangegift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.exchangegift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.seq)
end


-- 同步累积登录送礼活动信息
i3k_sbean.logingift_sync_req = i3k_class("logingift_sync_req")
function i3k_sbean.logingift_sync_req:ctor()
	self._pname_ = "logingift_sync_req"
	--self.id:		int32	
end

function i3k_sbean.logingift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.logingift_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.logingift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取累积登录送礼活动奖励
i3k_sbean.logingift_take_req = i3k_class("logingift_take_req")
function i3k_sbean.logingift_take_req:ctor()
	self._pname_ = "logingift_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.day:		int32	
end

function i3k_sbean.logingift_take_req:clone()
	return clone(self)
end

function i3k_sbean.logingift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.day = is:popNumber()
end

function i3k_sbean.logingift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.day)
end


-- 同步礼包兑换活动信息
i3k_sbean.giftpackage_sync_req = i3k_class("giftpackage_sync_req")
function i3k_sbean.giftpackage_sync_req:ctor()
	self._pname_ = "giftpackage_sync_req"
	--self.id:		int32	
end

function i3k_sbean.giftpackage_sync_req:clone()
	return clone(self)
end

function i3k_sbean.giftpackage_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.giftpackage_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 兑换礼包
i3k_sbean.giftpackage_take_req = i3k_class("giftpackage_take_req")
function i3k_sbean.giftpackage_take_req:ctor()
	self._pname_ = "giftpackage_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.key:		string	
end

function i3k_sbean.giftpackage_take_req:clone()
	return clone(self)
end

function i3k_sbean.giftpackage_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.key = is:popString()
end

function i3k_sbean.giftpackage_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushString(self.key)
end


-- 公测返现查询
i3k_sbean.pbtcashback_sync_req = i3k_class("pbtcashback_sync_req")
function i3k_sbean.pbtcashback_sync_req:ctor()
	self._pname_ = "pbtcashback_sync_req"
	--self.bid:		int32	
end

function i3k_sbean.pbtcashback_sync_req:clone()
	return clone(self)
end

function i3k_sbean.pbtcashback_sync_req:decode(is)
	is:popString()
	self.bid = is:popNumber()
end

function i3k_sbean.pbtcashback_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
end


-- 公测返现兑换
i3k_sbean.pbtcashback_take_req = i3k_class("pbtcashback_take_req")
function i3k_sbean.pbtcashback_take_req:ctor()
	self._pname_ = "pbtcashback_take_req"
	--self.bid:		int32	
end

function i3k_sbean.pbtcashback_take_req:clone()
	return clone(self)
end

function i3k_sbean.pbtcashback_take_req:decode(is)
	is:popString()
	self.bid = is:popNumber()
end

function i3k_sbean.pbtcashback_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
end


-- 充值排行活动同步
i3k_sbean.payrank_sync_req = i3k_class("payrank_sync_req")
function i3k_sbean.payrank_sync_req:ctor()
	self._pname_ = "payrank_sync_req"
	--self.bid:		int32	
end

function i3k_sbean.payrank_sync_req:clone()
	return clone(self)
end

function i3k_sbean.payrank_sync_req:decode(is)
	is:popString()
	self.bid = is:popNumber()
end

function i3k_sbean.payrank_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
end


-- 消费排行活动同步
i3k_sbean.consumerank_sync_req = i3k_class("consumerank_sync_req")
function i3k_sbean.consumerank_sync_req:ctor()
	self._pname_ = "consumerank_sync_req"
	--self.bid:		int32	
end

function i3k_sbean.consumerank_sync_req:clone()
	return clone(self)
end

function i3k_sbean.consumerank_sync_req:decode(is)
	is:popString()
	self.bid = is:popNumber()
end

function i3k_sbean.consumerank_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
end


-- 新登陆活动同步
i3k_sbean.luckygift_sync_req = i3k_class("luckygift_sync_req")
function i3k_sbean.luckygift_sync_req:ctor()
	self._pname_ = "luckygift_sync_req"
	--self.bid:		int32	
end

function i3k_sbean.luckygift_sync_req:clone()
	return clone(self)
end

function i3k_sbean.luckygift_sync_req:decode(is)
	is:popString()
	self.bid = is:popNumber()
end

function i3k_sbean.luckygift_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
end


-- 新登陆活动领奖
i3k_sbean.luckygift_take_req = i3k_class("luckygift_take_req")
function i3k_sbean.luckygift_take_req:ctor()
	self._pname_ = "luckygift_take_req"
	--self.effectiveTime:		int32	
	--self.bid:		int32	
	--self.dayReq:		int32	
end

function i3k_sbean.luckygift_take_req:clone()
	return clone(self)
end

function i3k_sbean.luckygift_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.bid = is:popNumber()
	self.dayReq = is:popNumber()
end

function i3k_sbean.luckygift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.bid)
	os:pushNumber(self.dayReq)
end


-- 团购活动同步
i3k_sbean.groupbuy_sync_req = i3k_class("groupbuy_sync_req")
function i3k_sbean.groupbuy_sync_req:ctor()
	self._pname_ = "groupbuy_sync_req"
end

function i3k_sbean.groupbuy_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.groupbuy_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 购买团购商品
i3k_sbean.groupbuy_buy_req = i3k_class("groupbuy_buy_req")
function i3k_sbean.groupbuy_buy_req:ctor()
	self._pname_ = "groupbuy_buy_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.gid:		int32	
	--self.count:		int32	
end

function i3k_sbean.groupbuy_buy_req:clone()
	return clone(self)
end

function i3k_sbean.groupbuy_buy_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.gid = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.groupbuy_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.gid)
	os:pushNumber(self.count)
end


-- 拼多多活动同步
i3k_sbean.morerolediscount_sync_req = i3k_class("morerolediscount_sync_req")
function i3k_sbean.morerolediscount_sync_req:ctor()
	self._pname_ = "morerolediscount_sync_req"
	--self.id:		int32	
end

function i3k_sbean.morerolediscount_sync_req:clone()
	return clone(self)
end

function i3k_sbean.morerolediscount_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.morerolediscount_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 参与拼多多商品团购
i3k_sbean.morerolediscount_join_req = i3k_class("morerolediscount_join_req")
function i3k_sbean.morerolediscount_join_req:ctor()
	self._pname_ = "morerolediscount_join_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.gid:		int32	
end

function i3k_sbean.morerolediscount_join_req:clone()
	return clone(self)
end

function i3k_sbean.morerolediscount_join_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.gid = is:popNumber()
end

function i3k_sbean.morerolediscount_join_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.gid)
end


-- 购买拼多多商品
i3k_sbean.morerolediscount_buy_req = i3k_class("morerolediscount_buy_req")
function i3k_sbean.morerolediscount_buy_req:ctor()
	self._pname_ = "morerolediscount_buy_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.gid:		int32	
end

function i3k_sbean.morerolediscount_buy_req:clone()
	return clone(self)
end

function i3k_sbean.morerolediscount_buy_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.gid = is:popNumber()
end

function i3k_sbean.morerolediscount_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.gid)
end


-- 限时抢购活动同步
i3k_sbean.flashsale_sync_req = i3k_class("flashsale_sync_req")
function i3k_sbean.flashsale_sync_req:ctor()
	self._pname_ = "flashsale_sync_req"
end

function i3k_sbean.flashsale_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.flashsale_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 限时抢购活动购买请求
i3k_sbean.flashsale_buy_req = i3k_class("flashsale_buy_req")
function i3k_sbean.flashsale_buy_req:ctor()
	self._pname_ = "flashsale_buy_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.goodid:		int32	
	--self.count:		int32	
end

function i3k_sbean.flashsale_buy_req:clone()
	return clone(self)
end

function i3k_sbean.flashsale_buy_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.goodid = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.flashsale_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.goodid)
	os:pushNumber(self.count)
end


-- 打开宝箱
i3k_sbean.falshsale_open_box = i3k_class("falshsale_open_box")
function i3k_sbean.falshsale_open_box:ctor()
	self._pname_ = "falshsale_open_box"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.falshsale_open_box:clone()
	return clone(self)
end

function i3k_sbean.falshsale_open_box:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.falshsale_open_box:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 转盘同步请求
i3k_sbean.luckyroll_sync_req = i3k_class("luckyroll_sync_req")
function i3k_sbean.luckyroll_sync_req:ctor()
	self._pname_ = "luckyroll_sync_req"
end

function i3k_sbean.luckyroll_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.luckyroll_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 转盘同步请求
i3k_sbean.luckyroll_play_req = i3k_class("luckyroll_play_req")
function i3k_sbean.luckyroll_play_req:ctor()
	self._pname_ = "luckyroll_play_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.luckyroll_play_req:clone()
	return clone(self)
end

function i3k_sbean.luckyroll_play_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.luckyroll_play_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 多次转盘同步请求
i3k_sbean.luckyroll_multiplay_req = i3k_class("luckyroll_multiplay_req")
function i3k_sbean.luckyroll_multiplay_req:ctor()
	self._pname_ = "luckyroll_multiplay_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.luckyroll_multiplay_req:clone()
	return clone(self)
end

function i3k_sbean.luckyroll_multiplay_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.luckyroll_multiplay_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 直购礼包活动信息
i3k_sbean.directpurchase_sync_req = i3k_class("directpurchase_sync_req")
function i3k_sbean.directpurchase_sync_req:ctor()
	self._pname_ = "directpurchase_sync_req"
	--self.id:		int32	
end

function i3k_sbean.directpurchase_sync_req:clone()
	return clone(self)
end

function i3k_sbean.directpurchase_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.directpurchase_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取直购礼包活动奖励
i3k_sbean.directpurchase_take_req = i3k_class("directpurchase_take_req")
function i3k_sbean.directpurchase_take_req:ctor()
	self._pname_ = "directpurchase_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.payLevel:		int32	
end

function i3k_sbean.directpurchase_take_req:clone()
	return clone(self)
end

function i3k_sbean.directpurchase_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.payLevel = is:popNumber()
end

function i3k_sbean.directpurchase_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.payLevel)
end


-- 老虎机活动信息
i3k_sbean.onearmbandit_sync_req = i3k_class("onearmbandit_sync_req")
function i3k_sbean.onearmbandit_sync_req:ctor()
	self._pname_ = "onearmbandit_sync_req"
	--self.id:		int32	
end

function i3k_sbean.onearmbandit_sync_req:clone()
	return clone(self)
end

function i3k_sbean.onearmbandit_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.onearmbandit_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取老虎机活动奖励
i3k_sbean.onearmbandit_take_req = i3k_class("onearmbandit_take_req")
function i3k_sbean.onearmbandit_take_req:ctor()
	self._pname_ = "onearmbandit_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.onearmbandit_take_req:clone()
	return clone(self)
end

function i3k_sbean.onearmbandit_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.onearmbandit_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 金蛋活动信息
i3k_sbean.goldenegg_sync_req = i3k_class("goldenegg_sync_req")
function i3k_sbean.goldenegg_sync_req:ctor()
	self._pname_ = "goldenegg_sync_req"
	--self.id:		int32	
end

function i3k_sbean.goldenegg_sync_req:clone()
	return clone(self)
end

function i3k_sbean.goldenegg_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.goldenegg_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 砸金蛋奖励的道具
i3k_sbean.goldenegg_play_req = i3k_class("goldenegg_play_req")
function i3k_sbean.goldenegg_play_req:ctor()
	self._pname_ = "goldenegg_play_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.curtimes:		int32	
	--self.playtimes:		int32	
	--self.useEggs:		set[int32]	
end

function i3k_sbean.goldenegg_play_req:clone()
	return clone(self)
end

function i3k_sbean.goldenegg_play_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.curtimes = is:popNumber()
	self.playtimes = is:popNumber()
	self.useEggs = is:popNumberSet()
end

function i3k_sbean.goldenegg_play_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.curtimes)
	os:pushNumber(self.playtimes)
	os:pushNumberSet(self.useEggs)
end


-- 砸金蛋刷新奖励列表
i3k_sbean.goldenegg_refresh_req = i3k_class("goldenegg_refresh_req")
function i3k_sbean.goldenegg_refresh_req:ctor()
	self._pname_ = "goldenegg_refresh_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.curtimes:		int32	
end

function i3k_sbean.goldenegg_refresh_req:clone()
	return clone(self)
end

function i3k_sbean.goldenegg_refresh_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.curtimes = is:popNumber()
end

function i3k_sbean.goldenegg_refresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.curtimes)
end


-- 广告同步协议
i3k_sbean.adver_sync_req = i3k_class("adver_sync_req")
function i3k_sbean.adver_sync_req:ctor()
	self._pname_ = "adver_sync_req"
	--self.id:		int32	
end

function i3k_sbean.adver_sync_req:clone()
	return clone(self)
end

function i3k_sbean.adver_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.adver_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 同步循环基金活动信息
i3k_sbean.cyclefund_sync_req = i3k_class("cyclefund_sync_req")
function i3k_sbean.cyclefund_sync_req:ctor()
	self._pname_ = "cyclefund_sync_req"
	--self.id:		int32	
end

function i3k_sbean.cyclefund_sync_req:clone()
	return clone(self)
end

function i3k_sbean.cyclefund_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.cyclefund_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 买循环基金
i3k_sbean.cyclefund_buy_req = i3k_class("cyclefund_buy_req")
function i3k_sbean.cyclefund_buy_req:ctor()
	self._pname_ = "cyclefund_buy_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.cyclefund_buy_req:clone()
	return clone(self)
end

function i3k_sbean.cyclefund_buy_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.cyclefund_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
end


-- 领取循环基金活动奖励
i3k_sbean.cyclefund_take_req = i3k_class("cyclefund_take_req")
function i3k_sbean.cyclefund_take_req:ctor()
	self._pname_ = "cyclefund_take_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.seq:		int32	
end

function i3k_sbean.cyclefund_take_req:clone()
	return clone(self)
end

function i3k_sbean.cyclefund_take_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.cyclefund_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.seq)
end


-- 主动离开副本请求
i3k_sbean.mapcopy_leave_req = i3k_class("mapcopy_leave_req")
function i3k_sbean.mapcopy_leave_req:ctor()
	self._pname_ = "mapcopy_leave_req"
end

function i3k_sbean.mapcopy_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.mapcopy_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 开始进入标准副本请求
i3k_sbean.normalmap_start_req = i3k_class("normalmap_start_req")
function i3k_sbean.normalmap_start_req:ctor()
	self._pname_ = "normalmap_start_req"
	--self.mapId:		int32	
end

function i3k_sbean.normalmap_start_req:clone()
	return clone(self)
end

function i3k_sbean.normalmap_start_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.normalmap_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 开始进入活动副本请求
i3k_sbean.activitymap_start_req = i3k_class("activitymap_start_req")
function i3k_sbean.activitymap_start_req:ctor()
	self._pname_ = "activitymap_start_req"
	--self.mapId:		int32	
end

function i3k_sbean.activitymap_start_req:clone()
	return clone(self)
end

function i3k_sbean.activitymap_start_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.activitymap_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 翻牌抽奖
i3k_sbean.commonmap_selectcard_req = i3k_class("commonmap_selectcard_req")
function i3k_sbean.commonmap_selectcard_req:ctor()
	self._pname_ = "commonmap_selectcard_req"
	--self.cardNo:		int32	
end

function i3k_sbean.commonmap_selectcard_req:clone()
	return clone(self)
end

function i3k_sbean.commonmap_selectcard_req:decode(is)
	is:popString()
	self.cardNo = is:popNumber()
end

function i3k_sbean.commonmap_selectcard_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cardNo)
end


-- 购买进入标准副本次数的请求
i3k_sbean.normalmap_buytimes_req = i3k_class("normalmap_buytimes_req")
function i3k_sbean.normalmap_buytimes_req:ctor()
	self._pname_ = "normalmap_buytimes_req"
	--self.mapId:		int32	
	--self.count:		int32	
end

function i3k_sbean.normalmap_buytimes_req:clone()
	return clone(self)
end

function i3k_sbean.normalmap_buytimes_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.normalmap_buytimes_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.count)
end


-- 购买进入活动副本次数的请求
i3k_sbean.activitymap_buytimes_req = i3k_class("activitymap_buytimes_req")
function i3k_sbean.activitymap_buytimes_req:ctor()
	self._pname_ = "activitymap_buytimes_req"
	--self.groupId:		int32	
	--self.count:		int32	
end

function i3k_sbean.activitymap_buytimes_req:clone()
	return clone(self)
end

function i3k_sbean.activitymap_buytimes_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.activitymap_buytimes_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
	os:pushNumber(self.count)
end


-- 副本扫荡
i3k_sbean.privatemap_sweep_req = i3k_class("privatemap_sweep_req")
function i3k_sbean.privatemap_sweep_req:ctor()
	self._pname_ = "privatemap_sweep_req"
	--self.mapId:		int32	
	--self.times:		int32	
	--self.extraCard:		int32	
end

function i3k_sbean.privatemap_sweep_req:clone()
	return clone(self)
end

function i3k_sbean.privatemap_sweep_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.times = is:popNumber()
	self.extraCard = is:popNumber()
end

function i3k_sbean.privatemap_sweep_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.times)
	os:pushNumber(self.extraCard)
end


-- 活动副本扫荡
i3k_sbean.activity_sweep_req = i3k_class("activity_sweep_req")
function i3k_sbean.activity_sweep_req:ctor()
	self._pname_ = "activity_sweep_req"
	--self.mapId:		int32	
	--self.times:		int32	
	--self.extraCard:		int32	
end

function i3k_sbean.activity_sweep_req:clone()
	return clone(self)
end

function i3k_sbean.activity_sweep_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.times = is:popNumber()
	self.extraCard = is:popNumber()
end

function i3k_sbean.activity_sweep_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.times)
	os:pushNumber(self.extraCard)
end


-- 特殊活动记录
i3k_sbean.activity_instance_logs_sync_req = i3k_class("activity_instance_logs_sync_req")
function i3k_sbean.activity_instance_logs_sync_req:ctor()
	self._pname_ = "activity_instance_logs_sync_req"
end

function i3k_sbean.activity_instance_logs_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.activity_instance_logs_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 活动副本一键扫荡
i3k_sbean.activity_multi_sweep_req = i3k_class("activity_multi_sweep_req")
function i3k_sbean.activity_multi_sweep_req:ctor()
	self._pname_ = "activity_multi_sweep_req"
	--self.maps:		vector[ActivitySweepInfo]	
end

function i3k_sbean.activity_multi_sweep_req:clone()
	return clone(self)
end

function i3k_sbean.activity_multi_sweep_req:decode(is)
	is:popString()
	self.maps = is:popList(i3k_sbean.ActivitySweepInfo)
end

function i3k_sbean.activity_multi_sweep_req:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.maps)
end


-- 同步试炼周常宝箱
i3k_sbean.activitymap_week_sync_req = i3k_class("activitymap_week_sync_req")
function i3k_sbean.activitymap_week_sync_req:ctor()
	self._pname_ = "activitymap_week_sync_req"
end

function i3k_sbean.activitymap_week_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.activitymap_week_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取周常宝箱奖励
i3k_sbean.activitymap_week_rewards_req = i3k_class("activitymap_week_rewards_req")
function i3k_sbean.activitymap_week_rewards_req:ctor()
	self._pname_ = "activitymap_week_rewards_req"
	--self.id:		int32	
end

function i3k_sbean.activitymap_week_rewards_req:clone()
	return clone(self)
end

function i3k_sbean.activitymap_week_rewards_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.activitymap_week_rewards_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 同步系统邮件
i3k_sbean.mail_syncsys_req = i3k_class("mail_syncsys_req")
function i3k_sbean.mail_syncsys_req:ctor()
	self._pname_ = "mail_syncsys_req"
	--self.pageNO:		int32	
end

function i3k_sbean.mail_syncsys_req:clone()
	return clone(self)
end

function i3k_sbean.mail_syncsys_req:decode(is)
	is:popString()
	self.pageNO = is:popNumber()
end

function i3k_sbean.mail_syncsys_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pageNO)
end


-- 同步临时邮件
i3k_sbean.mail_synctmp_req = i3k_class("mail_synctmp_req")
function i3k_sbean.mail_synctmp_req:ctor()
	self._pname_ = "mail_synctmp_req"
	--self.pageNO:		int32	
end

function i3k_sbean.mail_synctmp_req:clone()
	return clone(self)
end

function i3k_sbean.mail_synctmp_req:decode(is)
	is:popString()
	self.pageNO = is:popNumber()
end

function i3k_sbean.mail_synctmp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pageNO)
end


-- 读邮件
i3k_sbean.mail_read_req = i3k_class("mail_read_req")
function i3k_sbean.mail_read_req:ctor()
	self._pname_ = "mail_read_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_read_req:clone()
	return clone(self)
end

function i3k_sbean.mail_read_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_read_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 读系统邮件
i3k_sbean.mail_readsys_req = i3k_class("mail_readsys_req")
function i3k_sbean.mail_readsys_req:ctor()
	self._pname_ = "mail_readsys_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_readsys_req:clone()
	return clone(self)
end

function i3k_sbean.mail_readsys_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_readsys_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 读临时邮件
i3k_sbean.mail_readtmp_req = i3k_class("mail_readtmp_req")
function i3k_sbean.mail_readtmp_req:ctor()
	self._pname_ = "mail_readtmp_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_readtmp_req:clone()
	return clone(self)
end

function i3k_sbean.mail_readtmp_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_readtmp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 取邮件附件
i3k_sbean.mail_take_req = i3k_class("mail_take_req")
function i3k_sbean.mail_take_req:ctor()
	self._pname_ = "mail_take_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_take_req:clone()
	return clone(self)
end

function i3k_sbean.mail_take_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 取系统邮件附件
i3k_sbean.mail_takesys_req = i3k_class("mail_takesys_req")
function i3k_sbean.mail_takesys_req:ctor()
	self._pname_ = "mail_takesys_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_takesys_req:clone()
	return clone(self)
end

function i3k_sbean.mail_takesys_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_takesys_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 取临时邮件附件
i3k_sbean.mail_taketmp_req = i3k_class("mail_taketmp_req")
function i3k_sbean.mail_taketmp_req:ctor()
	self._pname_ = "mail_taketmp_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_taketmp_req:clone()
	return clone(self)
end

function i3k_sbean.mail_taketmp_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_taketmp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 邮件删除
i3k_sbean.mail_del_req = i3k_class("mail_del_req")
function i3k_sbean.mail_del_req:ctor()
	self._pname_ = "mail_del_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_del_req:clone()
	return clone(self)
end

function i3k_sbean.mail_del_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_del_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 系统邮件删除
i3k_sbean.mail_delsys_req = i3k_class("mail_delsys_req")
function i3k_sbean.mail_delsys_req:ctor()
	self._pname_ = "mail_delsys_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_delsys_req:clone()
	return clone(self)
end

function i3k_sbean.mail_delsys_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_delsys_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 临时邮件删除
i3k_sbean.mail_deltmp_req = i3k_class("mail_deltmp_req")
function i3k_sbean.mail_deltmp_req:ctor()
	self._pname_ = "mail_deltmp_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_deltmp_req:clone()
	return clone(self)
end

function i3k_sbean.mail_deltmp_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_deltmp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 取全部系统邮件附件
i3k_sbean.mail_takeallsys_req = i3k_class("mail_takeallsys_req")
function i3k_sbean.mail_takeallsys_req:ctor()
	self._pname_ = "mail_takeallsys_req"
end

function i3k_sbean.mail_takeallsys_req:decode(is)
	is:popString()
end

function i3k_sbean.mail_takeallsys_req:encode(os)
	os:pushString(self._pname_)
end


-- 取全部系统邮件附件
i3k_sbean.mail_takealltmp_req = i3k_class("mail_takealltmp_req")
function i3k_sbean.mail_takealltmp_req:ctor()
	self._pname_ = "mail_takealltmp_req"
end

function i3k_sbean.mail_takealltmp_req:decode(is)
	is:popString()
end

function i3k_sbean.mail_takealltmp_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步帮派邮件
i3k_sbean.mail_syncsect_req = i3k_class("mail_syncsect_req")
function i3k_sbean.mail_syncsect_req:ctor()
	self._pname_ = "mail_syncsect_req"
	--self.pageNO:		int32	
end

function i3k_sbean.mail_syncsect_req:clone()
	return clone(self)
end

function i3k_sbean.mail_syncsect_req:decode(is)
	is:popString()
	self.pageNO = is:popNumber()
end

function i3k_sbean.mail_syncsect_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pageNO)
end


-- 读帮派邮件
i3k_sbean.mail_readsect_req = i3k_class("mail_readsect_req")
function i3k_sbean.mail_readsect_req:ctor()
	self._pname_ = "mail_readsect_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_readsect_req:clone()
	return clone(self)
end

function i3k_sbean.mail_readsect_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_readsect_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- 帮派邮件删除
i3k_sbean.mail_delsect_req = i3k_class("mail_delsect_req")
function i3k_sbean.mail_delsect_req:ctor()
	self._pname_ = "mail_delsect_req"
	--self.mailId:		int32	
end

function i3k_sbean.mail_delsect_req:clone()
	return clone(self)
end

function i3k_sbean.mail_delsect_req:decode(is)
	is:popString()
	self.mailId = is:popNumber()
end

function i3k_sbean.mail_delsect_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mailId)
end


-- rollnotice_detail的异步响应
i3k_sbean.rollnotice_query = i3k_class("rollnotice_query")
function i3k_sbean.rollnotice_query:ctor()
	self._pname_ = "rollnotice_query"
	--self.noticeId:		int32	
end

function i3k_sbean.rollnotice_query:clone()
	return clone(self)
end

function i3k_sbean.rollnotice_query:decode(is)
	is:popString()
	self.noticeId = is:popNumber()
end

function i3k_sbean.rollnotice_query:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.noticeId)
end


-- 同步排行榜
i3k_sbean.rank_sync_req = i3k_class("rank_sync_req")
function i3k_sbean.rank_sync_req:ctor()
	self._pname_ = "rank_sync_req"
end

function i3k_sbean.rank_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.rank_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步帮派排行榜
i3k_sbean.sectrank_sync_req = i3k_class("sectrank_sync_req")
function i3k_sbean.sectrank_sync_req:ctor()
	self._pname_ = "sectrank_sync_req"
end

function i3k_sbean.sectrank_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sectrank_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 获取排行榜列表
i3k_sbean.rank_get_req = i3k_class("rank_get_req")
function i3k_sbean.rank_get_req:ctor()
	self._pname_ = "rank_get_req"
	--self.id:		int32	
	--self.createTime:		int32	
	--self.index:		int32	
	--self.length:		int32	
end

function i3k_sbean.rank_get_req:clone()
	return clone(self)
end

function i3k_sbean.rank_get_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.createTime = is:popNumber()
	self.index = is:popNumber()
	self.length = is:popNumber()
end

function i3k_sbean.rank_get_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.createTime)
	os:pushNumber(self.index)
	os:pushNumber(self.length)
end


-- 获取帮派排行榜列表
i3k_sbean.sectrank_get_req = i3k_class("sectrank_get_req")
function i3k_sbean.sectrank_get_req:ctor()
	self._pname_ = "sectrank_get_req"
	--self.id:		int32	
	--self.createTime:		int32	
	--self.index:		int32	
	--self.length:		int32	
end

function i3k_sbean.sectrank_get_req:clone()
	return clone(self)
end

function i3k_sbean.sectrank_get_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.createTime = is:popNumber()
	self.index = is:popNumber()
	self.length = is:popNumber()
end

function i3k_sbean.sectrank_get_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.createTime)
	os:pushNumber(self.index)
	os:pushNumber(self.length)
end


-- 获取分堂排行榜列表
i3k_sbean.fightgrouprank_get_req = i3k_class("fightgrouprank_get_req")
function i3k_sbean.fightgrouprank_get_req:ctor()
	self._pname_ = "fightgrouprank_get_req"
	--self.id:		int32	
	--self.createTime:		int32	
	--self.index:		int32	
	--self.length:		int32	
end

function i3k_sbean.fightgrouprank_get_req:clone()
	return clone(self)
end

function i3k_sbean.fightgrouprank_get_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.createTime = is:popNumber()
	self.index = is:popNumber()
	self.length = is:popNumber()
end

function i3k_sbean.fightgrouprank_get_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.createTime)
	os:pushNumber(self.index)
	os:pushNumber(self.length)
end


-- 获取自己排名(不在榜上返回0)
i3k_sbean.rank_self_req = i3k_class("rank_self_req")
function i3k_sbean.rank_self_req:ctor()
	self._pname_ = "rank_self_req"
	--self.id:		int32	
end

function i3k_sbean.rank_self_req:clone()
	return clone(self)
end

function i3k_sbean.rank_self_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.rank_self_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 获取自己帮派排名(不在榜上返回0)
i3k_sbean.sectrank_self_req = i3k_class("sectrank_self_req")
function i3k_sbean.sectrank_self_req:ctor()
	self._pname_ = "sectrank_self_req"
	--self.id:		int32	
end

function i3k_sbean.sectrank_self_req:clone()
	return clone(self)
end

function i3k_sbean.sectrank_self_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sectrank_self_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 买金币
i3k_sbean.buy_coin_req = i3k_class("buy_coin_req")
function i3k_sbean.buy_coin_req:ctor()
	self._pname_ = "buy_coin_req"
	--self.times:		int32	
end

function i3k_sbean.buy_coin_req:clone()
	return clone(self)
end

function i3k_sbean.buy_coin_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.buy_coin_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 买体力
i3k_sbean.buy_vit_req = i3k_class("buy_vit_req")
function i3k_sbean.buy_vit_req:ctor()
	self._pname_ = "buy_vit_req"
end

function i3k_sbean.buy_vit_req:decode(is)
	is:popString()
end

function i3k_sbean.buy_vit_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步充值信息
i3k_sbean.pay_sync_req = i3k_class("pay_sync_req")
function i3k_sbean.pay_sync_req:ctor()
	self._pname_ = "pay_sync_req"
end

function i3k_sbean.pay_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.pay_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 神模式充值
i3k_sbean.pay_asgod_req = i3k_class("pay_asgod_req")
function i3k_sbean.pay_asgod_req:ctor()
	self._pname_ = "pay_asgod_req"
	--self.level:		int32	
end

function i3k_sbean.pay_asgod_req:clone()
	return clone(self)
end

function i3k_sbean.pay_asgod_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.pay_asgod_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 领取vip礼包的请求信息
i3k_sbean.vip_take_req = i3k_class("vip_take_req")
function i3k_sbean.vip_take_req:ctor()
	self._pname_ = "vip_take_req"
	--self.level:		int32	
end

function i3k_sbean.vip_take_req:clone()
	return clone(self)
end

function i3k_sbean.vip_take_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.vip_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 背包扩展
i3k_sbean.bag_expand_req = i3k_class("bag_expand_req")
function i3k_sbean.bag_expand_req:ctor()
	self._pname_ = "bag_expand_req"
	--self.times:		int32	
	--self.useItem:		int32	
end

function i3k_sbean.bag_expand_req:clone()
	return clone(self)
end

function i3k_sbean.bag_expand_req:decode(is)
	is:popString()
	self.times = is:popNumber()
	self.useItem = is:popNumber()
end

function i3k_sbean.bag_expand_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
	os:pushNumber(self.useItem)
end


-- 出售背包里的装备
i3k_sbean.bag_sellequip_req = i3k_class("bag_sellequip_req")
function i3k_sbean.bag_sellequip_req:ctor()
	self._pname_ = "bag_sellequip_req"
	--self.id:		int32	
	--self.guid:		string	
end

function i3k_sbean.bag_sellequip_req:clone()
	return clone(self)
end

function i3k_sbean.bag_sellequip_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
end

function i3k_sbean.bag_sellequip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
end


-- 出售背包里的道具物品
i3k_sbean.bag_sellitem_req = i3k_class("bag_sellitem_req")
function i3k_sbean.bag_sellitem_req:ctor()
	self._pname_ = "bag_sellitem_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_sellitem_req:clone()
	return clone(self)
end

function i3k_sbean.bag_sellitem_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_sellitem_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 出售背包里的宝石
i3k_sbean.bag_sellgem_req = i3k_class("bag_sellgem_req")
function i3k_sbean.bag_sellgem_req:ctor()
	self._pname_ = "bag_sellgem_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_sellgem_req:clone()
	return clone(self)
end

function i3k_sbean.bag_sellgem_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_sellgem_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 出售背包里的心法书
i3k_sbean.bag_sellbook_req = i3k_class("bag_sellbook_req")
function i3k_sbean.bag_sellbook_req:ctor()
	self._pname_ = "bag_sellbook_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_sellbook_req:clone()
	return clone(self)
end

function i3k_sbean.bag_sellbook_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_sellbook_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 批量出售背包里的装备
i3k_sbean.bag_batchsellequips_req = i3k_class("bag_batchsellequips_req")
function i3k_sbean.bag_batchsellequips_req:ctor()
	self._pname_ = "bag_batchsellequips_req"
	--self.equips:		map[int32, KinEquips]	
end

function i3k_sbean.bag_batchsellequips_req:clone()
	return clone(self)
end

function i3k_sbean.bag_batchsellequips_req:decode(is)
	is:popString()
	self.equips = is:popNumberMap(i3k_sbean.KinEquips)
end

function i3k_sbean.bag_batchsellequips_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.equips)
end


-- 批量出售背包里的道具物品
i3k_sbean.bag_batchsellitems_req = i3k_class("bag_batchsellitems_req")
function i3k_sbean.bag_batchsellitems_req:ctor()
	self._pname_ = "bag_batchsellitems_req"
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.bag_batchsellitems_req:clone()
	return clone(self)
end

function i3k_sbean.bag_batchsellitems_req:decode(is)
	is:popString()
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.bag_batchsellitems_req:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.items)
end


-- 批量出售背包里的宝石物品
i3k_sbean.bag_batchsellgems_req = i3k_class("bag_batchsellgems_req")
function i3k_sbean.bag_batchsellgems_req:ctor()
	self._pname_ = "bag_batchsellgems_req"
	--self.gems:		vector[DummyGoods]	
end

function i3k_sbean.bag_batchsellgems_req:clone()
	return clone(self)
end

function i3k_sbean.bag_batchsellgems_req:decode(is)
	is:popString()
	self.gems = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.bag_batchsellgems_req:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.gems)
end


-- 批量出售背包里的心法书物品
i3k_sbean.bag_batchsellbooks_req = i3k_class("bag_batchsellbooks_req")
function i3k_sbean.bag_batchsellbooks_req:ctor()
	self._pname_ = "bag_batchsellbooks_req"
	--self.books:		vector[DummyGoods]	
end

function i3k_sbean.bag_batchsellbooks_req:clone()
	return clone(self)
end

function i3k_sbean.bag_batchsellbooks_req:decode(is)
	is:popString()
	self.books = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.bag_batchsellbooks_req:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.books)
end


-- 使用道具礼包
i3k_sbean.bag_useitemgift_req = i3k_class("bag_useitemgift_req")
function i3k_sbean.bag_useitemgift_req:ctor()
	self._pname_ = "bag_useitemgift_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemgift_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemgift_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemgift_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用N选N道具礼包
i3k_sbean.bag_useitemchosegift_req = i3k_class("bag_useitemchosegift_req")
function i3k_sbean.bag_useitemchosegift_req:ctor()
	self._pname_ = "bag_useitemchosegift_req"
	--self.id:		int32	
	--self.count:		int32	
	--self.choseIds:		vector[int32]	
end

function i3k_sbean.bag_useitemchosegift_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemchosegift_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
	self.choseIds = is:popNumberList()
end

function i3k_sbean.bag_useitemchosegift_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
	os:pushNumberList(self.choseIds)
end


-- 使用神装礼包
i3k_sbean.bag_useitemgiftnew_req = i3k_class("bag_useitemgiftnew_req")
function i3k_sbean.bag_useitemgiftnew_req:ctor()
	self._pname_ = "bag_useitemgiftnew_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemgiftnew_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemgiftnew_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemgiftnew_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用N选N神装礼包
i3k_sbean.bag_useitemchosegiftnew_req = i3k_class("bag_useitemchosegiftnew_req")
function i3k_sbean.bag_useitemchosegiftnew_req:ctor()
	self._pname_ = "bag_useitemchosegiftnew_req"
	--self.id:		int32	
	--self.count:		int32	
	--self.choseIds:		vector[int32]	
end

function i3k_sbean.bag_useitemchosegiftnew_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemchosegiftnew_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
	self.choseIds = is:popNumberList()
end

function i3k_sbean.bag_useitemchosegiftnew_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
	os:pushNumberList(self.choseIds)
end


-- 使用道具金币包
i3k_sbean.bag_useitemcoin_req = i3k_class("bag_useitemcoin_req")
function i3k_sbean.bag_useitemcoin_req:ctor()
	self._pname_ = "bag_useitemcoin_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemcoin_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemcoin_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemcoin_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用道具钻石包
i3k_sbean.bag_useitemdiamond_req = i3k_class("bag_useitemdiamond_req")
function i3k_sbean.bag_useitemdiamond_req:ctor()
	self._pname_ = "bag_useitemdiamond_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemdiamond_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemdiamond_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemdiamond_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用道具经验丹
i3k_sbean.bag_useitemexp_req = i3k_class("bag_useitemexp_req")
function i3k_sbean.bag_useitemexp_req:ctor()
	self._pname_ = "bag_useitemexp_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemexp_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemexp_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemexp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用道具普通回复hp
i3k_sbean.bag_useitemhp_req = i3k_class("bag_useitemhp_req")
function i3k_sbean.bag_useitemhp_req:ctor()
	self._pname_ = "bag_useitemhp_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemhp_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemhp_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemhp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用道具vip普通回复hp
i3k_sbean.bag_useitemhppool_req = i3k_class("bag_useitemhppool_req")
function i3k_sbean.bag_useitemhppool_req:ctor()
	self._pname_ = "bag_useitemhppool_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemhppool_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemhppool_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemhppool_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用道具宝箱
i3k_sbean.bag_useitemchest_req = i3k_class("bag_useitemchest_req")
function i3k_sbean.bag_useitemchest_req:ctor()
	self._pname_ = "bag_useitemchest_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemchest_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemchest_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemchest_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用道具装备能量丹
i3k_sbean.bag_useitemequipenergy_req = i3k_class("bag_useitemequipenergy_req")
function i3k_sbean.bag_useitemequipenergy_req:ctor()
	self._pname_ = "bag_useitemequipenergy_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemequipenergy_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemequipenergy_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemequipenergy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用道具宝石能量丹
i3k_sbean.bag_useitemgemenergy_req = i3k_class("bag_useitemgemenergy_req")
function i3k_sbean.bag_useitemgemenergy_req:ctor()
	self._pname_ = "bag_useitemgemenergy_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemgemenergy_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemgemenergy_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemgemenergy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用熔炼精华道具
i3k_sbean.bag_useitemforgeenergy_req = i3k_class("bag_useitemforgeenergy_req")
function i3k_sbean.bag_useitemforgeenergy_req:ctor()
	self._pname_ = "bag_useitemforgeenergy_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemforgeenergy_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemforgeenergy_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemforgeenergy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用道具心法悟性丹
i3k_sbean.bag_useiteminspiration_req = i3k_class("bag_useiteminspiration_req")
function i3k_sbean.bag_useiteminspiration_req:ctor()
	self._pname_ = "bag_useiteminspiration_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useiteminspiration_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useiteminspiration_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useiteminspiration_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用道具体力丹
i3k_sbean.bag_useitemvit_req = i3k_class("bag_useitemvit_req")
function i3k_sbean.bag_useitemvit_req:ctor()
	self._pname_ = "bag_useitemvit_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemvit_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemvit_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemvit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 批量使用道具体力丹
i3k_sbean.bag_batchuseitemvit_req = i3k_class("bag_batchuseitemvit_req")
function i3k_sbean.bag_batchuseitemvit_req:ctor()
	self._pname_ = "bag_batchuseitemvit_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.bag_batchuseitemvit_req:clone()
	return clone(self)
end

function i3k_sbean.bag_batchuseitemvit_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.bag_batchuseitemvit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 使用时装道具
i3k_sbean.bag_useitemfashion_req = i3k_class("bag_useitemfashion_req")
function i3k_sbean.bag_useitemfashion_req:ctor()
	self._pname_ = "bag_useitemfashion_req"
	--self.id:		int32	
end

function i3k_sbean.bag_useitemfashion_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemfashion_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.bag_useitemfashion_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 使用历练瓶(满)道具
i3k_sbean.bag_useitemexpcoinpool_req = i3k_class("bag_useitemexpcoinpool_req")
function i3k_sbean.bag_useitemexpcoinpool_req:ctor()
	self._pname_ = "bag_useitemexpcoinpool_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemexpcoinpool_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemexpcoinpool_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemexpcoinpool_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用月卡道具
i3k_sbean.bag_usemonthlycard_req = i3k_class("bag_usemonthlycard_req")
function i3k_sbean.bag_usemonthlycard_req:ctor()
	self._pname_ = "bag_usemonthlycard_req"
	--self.id:		int32	
end

function i3k_sbean.bag_usemonthlycard_req:clone()
	return clone(self)
end

function i3k_sbean.bag_usemonthlycard_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.bag_usemonthlycard_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 使用VIP体验卡道具
i3k_sbean.bag_usevipcard_req = i3k_class("bag_usevipcard_req")
function i3k_sbean.bag_usevipcard_req:ctor()
	self._pname_ = "bag_usevipcard_req"
	--self.id:		int32	
end

function i3k_sbean.bag_usevipcard_req:clone()
	return clone(self)
end

function i3k_sbean.bag_usevipcard_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.bag_usevipcard_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 使用增加武勋道具
i3k_sbean.bag_useitemfeat_req = i3k_class("bag_useitemfeat_req")
function i3k_sbean.bag_useitemfeat_req:ctor()
	self._pname_ = "bag_useitemfeat_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemfeat_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemfeat_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemfeat_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用技能道具
i3k_sbean.bag_useitemskill_req = i3k_class("bag_useitemskill_req")
function i3k_sbean.bag_useitemskill_req:ctor()
	self._pname_ = "bag_useitemskill_req"
	--self.itemId:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.bag_useitemskill_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemskill_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.bag_useitemskill_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:push(self.pos)
	os:push(self.rotation)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 使用信件道具
i3k_sbean.bag_useitemletter_req = i3k_class("bag_useitemletter_req")
function i3k_sbean.bag_useitemletter_req:ctor()
	self._pname_ = "bag_useitemletter_req"
	--self.itemId:		int32	
end

function i3k_sbean.bag_useitemletter_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemletter_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
end

function i3k_sbean.bag_useitemletter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
end


-- 使用善恶值道具
i3k_sbean.bag_useitemevil_req = i3k_class("bag_useitemevil_req")
function i3k_sbean.bag_useitemevil_req:ctor()
	self._pname_ = "bag_useitemevil_req"
	--self.itemId:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemevil_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemevil_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemevil_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.count)
end


-- 合成碎片
i3k_sbean.bag_piececompose_req = i3k_class("bag_piececompose_req")
function i3k_sbean.bag_piececompose_req:ctor()
	self._pname_ = "bag_piececompose_req"
	--self.composeId:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_piececompose_req:clone()
	return clone(self)
end

function i3k_sbean.bag_piececompose_req:decode(is)
	is:popString()
	self.composeId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_piececompose_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.composeId)
	os:pushNumber(self.count)
end


-- 使用能力强化道具
i3k_sbean.bag_useitempropstrength_req = i3k_class("bag_useitempropstrength_req")
function i3k_sbean.bag_useitempropstrength_req:ctor()
	self._pname_ = "bag_useitempropstrength_req"
	--self.itemId:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitempropstrength_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitempropstrength_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitempropstrength_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.count)
end


-- 使用离线精灵修炼点添加道具
i3k_sbean.bag_useitemofflinefuncpoint_req = i3k_class("bag_useitemofflinefuncpoint_req")
function i3k_sbean.bag_useitemofflinefuncpoint_req:ctor()
	self._pname_ = "bag_useitemofflinefuncpoint_req"
	--self.itemId:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemofflinefuncpoint_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemofflinefuncpoint_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemofflinefuncpoint_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.count)
end


-- 使用称号道具
i3k_sbean.bag_useitemtitle_req = i3k_class("bag_useitemtitle_req")
function i3k_sbean.bag_useitemtitle_req:ctor()
	self._pname_ = "bag_useitemtitle_req"
	--self.itemId:		int32	
end

function i3k_sbean.bag_useitemtitle_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemtitle_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
end

function i3k_sbean.bag_useitemtitle_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
end


-- 使用绝技道具
i3k_sbean.bag_useitemuskill_req = i3k_class("bag_useitemuskill_req")
function i3k_sbean.bag_useitemuskill_req:ctor()
	self._pname_ = "bag_useitemuskill_req"
	--self.itemId:		int32	
end

function i3k_sbean.bag_useitemuskill_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemuskill_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
end

function i3k_sbean.bag_useitemuskill_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
end


-- 使用头像激活道具
i3k_sbean.bag_useitemhead_req = i3k_class("bag_useitemhead_req")
function i3k_sbean.bag_useitemhead_req:ctor()
	self._pname_ = "bag_useitemhead_req"
	--self.itemId:		int32	
end

function i3k_sbean.bag_useitemhead_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemhead_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
end

function i3k_sbean.bag_useitemhead_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
end


-- 使用家园装备道具
i3k_sbean.bag_useitemhomelandequip_req = i3k_class("bag_useitemhomelandequip_req")
function i3k_sbean.bag_useitemhomelandequip_req:ctor()
	self._pname_ = "bag_useitemhomelandequip_req"
	--self.itemId:		int32	
end

function i3k_sbean.bag_useitemhomelandequip_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemhomelandequip_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
end

function i3k_sbean.bag_useitemhomelandequip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
end


-- 使用VIP经验增加道具
i3k_sbean.bag_useitemaddvipexp_req = i3k_class("bag_useitemaddvipexp_req")
function i3k_sbean.bag_useitemaddvipexp_req:ctor()
	self._pname_ = "bag_useitemaddvipexp_req"
	--self.itemId:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemaddvipexp_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemaddvipexp_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemaddvipexp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.count)
end


-- 使用增加生产能量道具
i3k_sbean.bag_useitemaddproducesplitsp_req = i3k_class("bag_useitemaddproducesplitsp_req")
function i3k_sbean.bag_useitemaddproducesplitsp_req:ctor()
	self._pname_ = "bag_useitemaddproducesplitsp_req"
	--self.itemId:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemaddproducesplitsp_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemaddproducesplitsp_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemaddproducesplitsp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.count)
end


-- 使用buff药
i3k_sbean.bag_useitembuffdrug_req = i3k_class("bag_useitembuffdrug_req")
function i3k_sbean.bag_useitembuffdrug_req:ctor()
	self._pname_ = "bag_useitembuffdrug_req"
	--self.itemID:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitembuffdrug_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitembuffdrug_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitembuffdrug_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.count)
end


-- 使用表情包
i3k_sbean.bag_useitemiconpackage_req = i3k_class("bag_useitemiconpackage_req")
function i3k_sbean.bag_useitemiconpackage_req:ctor()
	self._pname_ = "bag_useitemiconpackage_req"
	--self.itemID:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemiconpackage_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemiconpackage_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemiconpackage_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.count)
end


-- 使用加武运道具
i3k_sbean.bag_useweaponsoulcoinadder_req = i3k_class("bag_useweaponsoulcoinadder_req")
function i3k_sbean.bag_useweaponsoulcoinadder_req:ctor()
	self._pname_ = "bag_useweaponsoulcoinadder_req"
	--self.itemID:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useweaponsoulcoinadder_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useweaponsoulcoinadder_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useweaponsoulcoinadder_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.count)
end


-- 使用聊天框道具
i3k_sbean.bag_usechatboxitem_req = i3k_class("bag_usechatboxitem_req")
function i3k_sbean.bag_usechatboxitem_req:ctor()
	self._pname_ = "bag_usechatboxitem_req"
	--self.itemID:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_usechatboxitem_req:clone()
	return clone(self)
end

function i3k_sbean.bag_usechatboxitem_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_usechatboxitem_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.count)
end


-- 销毁道具请求
i3k_sbean.bag_destoryitems_req = i3k_class("bag_destoryitems_req")
function i3k_sbean.bag_destoryitems_req:ctor()
	self._pname_ = "bag_destoryitems_req"
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.bag_destoryitems_req:clone()
	return clone(self)
end

function i3k_sbean.bag_destoryitems_req:decode(is)
	is:popString()
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.bag_destoryitems_req:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.items)
end


-- 使用正义徽章道具
i3k_sbean.bag_useitemgbcoin_req = i3k_class("bag_useitemgbcoin_req")
function i3k_sbean.bag_useitemgbcoin_req:ctor()
	self._pname_ = "bag_useitemgbcoin_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemgbcoin_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemgbcoin_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemgbcoin_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用装备升级道具
i3k_sbean.bag_useitem_equip_up_to_level_req = i3k_class("bag_useitem_equip_up_to_level_req")
function i3k_sbean.bag_useitem_equip_up_to_level_req:ctor()
	self._pname_ = "bag_useitem_equip_up_to_level_req"
	--self.pos:		int32	
	--self.itemId:		int32	
end

function i3k_sbean.bag_useitem_equip_up_to_level_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitem_equip_up_to_level_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
	self.itemId = is:popNumber()
end

function i3k_sbean.bag_useitem_equip_up_to_level_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
	os:pushNumber(self.itemId)
end


-- 使用势力声望道具
i3k_sbean.bag_useitem_forcefame_req = i3k_class("bag_useitem_forcefame_req")
function i3k_sbean.bag_useitem_forcefame_req:ctor()
	self._pname_ = "bag_useitem_forcefame_req"
	--self.itemID:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitem_forcefame_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitem_forcefame_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitem_forcefame_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.count)
end


-- 使用试炼副本增加次数道具
i3k_sbean.bag_useitem_add_activity_map_cnt_req = i3k_class("bag_useitem_add_activity_map_cnt_req")
function i3k_sbean.bag_useitem_add_activity_map_cnt_req:ctor()
	self._pname_ = "bag_useitem_add_activity_map_cnt_req"
	--self.itemID:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitem_add_activity_map_cnt_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitem_add_activity_map_cnt_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitem_add_activity_map_cnt_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.count)
end


-- 同步驻地精灵祝福信息
i3k_sbean.sync_sect_zone_spirit_bless_req = i3k_class("sync_sect_zone_spirit_bless_req")
function i3k_sbean.sync_sect_zone_spirit_bless_req:ctor()
	self._pname_ = "sync_sect_zone_spirit_bless_req"
end

function i3k_sbean.sync_sect_zone_spirit_bless_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_sect_zone_spirit_bless_req:encode(os)
	os:pushString(self._pname_)
end


-- 驻地精灵是否进行
i3k_sbean.sect_zone_spirit_exist_req = i3k_class("sect_zone_spirit_exist_req")
function i3k_sbean.sect_zone_spirit_exist_req:ctor()
	self._pname_ = "sect_zone_spirit_exist_req"
end

function i3k_sbean.sect_zone_spirit_exist_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_zone_spirit_exist_req:encode(os)
	os:pushString(self._pname_)
end


-- 使用驻地精灵祝福（order：祝福档位）
i3k_sbean.use_sect_zone_spirit_bless_req = i3k_class("use_sect_zone_spirit_bless_req")
function i3k_sbean.use_sect_zone_spirit_bless_req:ctor()
	self._pname_ = "use_sect_zone_spirit_bless_req"
	--self.order:		int32	
end

function i3k_sbean.use_sect_zone_spirit_bless_req:clone()
	return clone(self)
end

function i3k_sbean.use_sect_zone_spirit_bless_req:decode(is)
	is:popString()
	self.order = is:popNumber()
end

function i3k_sbean.use_sect_zone_spirit_bless_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.order)
end


-- 穿装备
i3k_sbean.equip_upwear_req = i3k_class("equip_upwear_req")
function i3k_sbean.equip_upwear_req:ctor()
	self._pname_ = "equip_upwear_req"
	--self.id:		int32	
	--self.guid:		string	
	--self.pos:		int32	
end

function i3k_sbean.equip_upwear_req:clone()
	return clone(self)
end

function i3k_sbean.equip_upwear_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_upwear_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
end


-- 脱装备
i3k_sbean.equip_downwear_req = i3k_class("equip_downwear_req")
function i3k_sbean.equip_downwear_req:ctor()
	self._pname_ = "equip_downwear_req"
	--self.guid:		string	
	--self.pos:		int32	
end

function i3k_sbean.equip_downwear_req:clone()
	return clone(self)
end

function i3k_sbean.equip_downwear_req:decode(is)
	is:popString()
	self.guid = is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_downwear_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
end


-- 装备强化
i3k_sbean.equip_levelup_req = i3k_class("equip_levelup_req")
function i3k_sbean.equip_levelup_req:ctor()
	self._pname_ = "equip_levelup_req"
	--self.pos:		int32	
	--self.level:		int32	
end

function i3k_sbean.equip_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.equip_levelup_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.equip_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
	os:pushNumber(self.level)
end


-- 装备强化突破
i3k_sbean.equip_levelup_break_req = i3k_class("equip_levelup_break_req")
function i3k_sbean.equip_levelup_break_req:ctor()
	self._pname_ = "equip_levelup_break_req"
	--self.pos:		int32	
end

function i3k_sbean.equip_levelup_break_req:clone()
	return clone(self)
end

function i3k_sbean.equip_levelup_break_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_levelup_break_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
end


-- 批量装备强化
i3k_sbean.equip_batchlevelup_req = i3k_class("equip_batchlevelup_req")
function i3k_sbean.equip_batchlevelup_req:ctor()
	self._pname_ = "equip_batchlevelup_req"
	--self.posLevels:		map[int32, int32]	
end

function i3k_sbean.equip_batchlevelup_req:clone()
	return clone(self)
end

function i3k_sbean.equip_batchlevelup_req:decode(is)
	is:popString()
	self.posLevels = is:popNumberNumberMap()
end

function i3k_sbean.equip_batchlevelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.posLevels)
end


-- 装备升星
i3k_sbean.equip_starup_req = i3k_class("equip_starup_req")
function i3k_sbean.equip_starup_req:ctor()
	self._pname_ = "equip_starup_req"
	--self.pos:		int32	
	--self.level:		int32	
end

function i3k_sbean.equip_starup_req:clone()
	return clone(self)
end

function i3k_sbean.equip_starup_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.equip_starup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
	os:pushNumber(self.level)
end


-- 水晶装备修复
i3k_sbean.equip_repair_req = i3k_class("equip_repair_req")
function i3k_sbean.equip_repair_req:ctor()
	self._pname_ = "equip_repair_req"
	--self.pos:		int32	
end

function i3k_sbean.equip_repair_req:clone()
	return clone(self)
end

function i3k_sbean.equip_repair_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_repair_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
end


-- 自动穿装备
i3k_sbean.equip_autoupwear_req = i3k_class("equip_autoupwear_req")
function i3k_sbean.equip_autoupwear_req:ctor()
	self._pname_ = "equip_autoupwear_req"
	--self.equips:		map[int32, KinEquips]	
end

function i3k_sbean.equip_autoupwear_req:clone()
	return clone(self)
end

function i3k_sbean.equip_autoupwear_req:decode(is)
	is:popString()
	self.equips = is:popNumberMap(i3k_sbean.KinEquips)
end

function i3k_sbean.equip_autoupwear_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberMap(self.equips)
end


-- 切换装备特效显示等级
i3k_sbean.equippart_setshowlvl_req = i3k_class("equippart_setshowlvl_req")
function i3k_sbean.equippart_setshowlvl_req:ctor()
	self._pname_ = "equippart_setshowlvl_req"
	--self.partID:		int32	
	--self.evoLvl:		int32	
end

function i3k_sbean.equippart_setshowlvl_req:clone()
	return clone(self)
end

function i3k_sbean.equippart_setshowlvl_req:decode(is)
	is:popString()
	self.partID = is:popNumber()
	self.evoLvl = is:popNumber()
end

function i3k_sbean.equippart_setshowlvl_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.partID)
	os:pushNumber(self.evoLvl)
end


-- 装备部位宝石升级
i3k_sbean.gem_levelup_req = i3k_class("gem_levelup_req")
function i3k_sbean.gem_levelup_req:ctor()
	self._pname_ = "gem_levelup_req"
	--self.pos:		int32	
	--self.seq:		int32	
	--self.toId:		int32	
end

function i3k_sbean.gem_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.gem_levelup_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
	self.seq = is:popNumber()
	self.toId = is:popNumber()
end

function i3k_sbean.gem_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
	os:pushNumber(self.seq)
	os:pushNumber(self.toId)
end


-- 装备部位宝石镶嵌
i3k_sbean.gem_inlay_req = i3k_class("gem_inlay_req")
function i3k_sbean.gem_inlay_req:ctor()
	self._pname_ = "gem_inlay_req"
	--self.pos:		int32	
	--self.seq:		int32	
	--self.gemId:		int32	
end

function i3k_sbean.gem_inlay_req:clone()
	return clone(self)
end

function i3k_sbean.gem_inlay_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
	self.seq = is:popNumber()
	self.gemId = is:popNumber()
end

function i3k_sbean.gem_inlay_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
	os:pushNumber(self.seq)
	os:pushNumber(self.gemId)
end


-- 装备部位宝石升级
i3k_sbean.gem_unlay_req = i3k_class("gem_unlay_req")
function i3k_sbean.gem_unlay_req:ctor()
	self._pname_ = "gem_unlay_req"
	--self.pos:		int32	
	--self.seq:		int32	
	--self.gemId:		int32	
end

function i3k_sbean.gem_unlay_req:clone()
	return clone(self)
end

function i3k_sbean.gem_unlay_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
	self.seq = is:popNumber()
	self.gemId = is:popNumber()
end

function i3k_sbean.gem_unlay_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
	os:pushNumber(self.seq)
	os:pushNumber(self.gemId)
end


-- 背包宝石转化(toID: 转化后的宝石ID)
i3k_sbean.gem_trans_req = i3k_class("gem_trans_req")
function i3k_sbean.gem_trans_req:ctor()
	self._pname_ = "gem_trans_req"
	--self.gemID:		int32	
	--self.toID:		int32	
end

function i3k_sbean.gem_trans_req:clone()
	return clone(self)
end

function i3k_sbean.gem_trans_req:decode(is)
	is:popString()
	self.gemID = is:popNumber()
	self.toID = is:popNumber()
end

function i3k_sbean.gem_trans_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gemID)
	os:pushNumber(self.toID)
end


-- 装备精炼
i3k_sbean.equip_refine_req = i3k_class("equip_refine_req")
function i3k_sbean.equip_refine_req:ctor()
	self._pname_ = "equip_refine_req"
	--self.id:		int32	
	--self.guid:		string	
	--self.pos:		int32	
	--self.costItem:		int32	
end

function i3k_sbean.equip_refine_req:clone()
	return clone(self)
end

function i3k_sbean.equip_refine_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
	self.costItem = is:popNumber()
end

function i3k_sbean.equip_refine_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
	os:pushNumber(self.costItem)
end


-- 装备精炼保存
i3k_sbean.equip_refine_save_req = i3k_class("equip_refine_save_req")
function i3k_sbean.equip_refine_save_req:ctor()
	self._pname_ = "equip_refine_save_req"
	--self.id:		int32	
	--self.guid:		string	
	--self.pos:		int32	
end

function i3k_sbean.equip_refine_save_req:clone()
	return clone(self)
end

function i3k_sbean.equip_refine_save_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_refine_save_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
end


-- 装备淬炼
i3k_sbean.equip_quench_req = i3k_class("equip_quench_req")
function i3k_sbean.equip_quench_req:ctor()
	self._pname_ = "equip_quench_req"
	--self.id:		int32	
	--self.guid:		string	
	--self.pos:		int32	
	--self.lockedproppos:		vector[int32]	
end

function i3k_sbean.equip_quench_req:clone()
	return clone(self)
end

function i3k_sbean.equip_quench_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
	self.lockedproppos = is:popNumberList()
end

function i3k_sbean.equip_quench_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
	os:pushNumberList(self.lockedproppos)
end


-- 装备淬炼保存
i3k_sbean.equip_quench_save_req = i3k_class("equip_quench_save_req")
function i3k_sbean.equip_quench_save_req:ctor()
	self._pname_ = "equip_quench_save_req"
	--self.id:		int32	
	--self.guid:		string	
	--self.pos:		int32	
end

function i3k_sbean.equip_quench_save_req:clone()
	return clone(self)
end

function i3k_sbean.equip_quench_save_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_quench_save_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
end


-- 同步打造界面信息打造
i3k_sbean.legend_sync_req = i3k_class("legend_sync_req")
function i3k_sbean.legend_sync_req:ctor()
	self._pname_ = "legend_sync_req"
end

function i3k_sbean.legend_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.legend_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 打造传世装备
i3k_sbean.legend_make_req = i3k_class("legend_make_req")
function i3k_sbean.legend_make_req:ctor()
	self._pname_ = "legend_make_req"
	--self.id:		int32	
	--self.guid:		string	
	--self.costItem:		int32	
end

function i3k_sbean.legend_make_req:clone()
	return clone(self)
end

function i3k_sbean.legend_make_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
	self.costItem = is:popNumber()
end

function i3k_sbean.legend_make_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
	os:pushNumber(self.costItem)
end


-- 放弃传世装备属性
i3k_sbean.legend_quit_req = i3k_class("legend_quit_req")
function i3k_sbean.legend_quit_req:ctor()
	self._pname_ = "legend_quit_req"
end

function i3k_sbean.legend_quit_req:decode(is)
	is:popString()
end

function i3k_sbean.legend_quit_req:encode(os)
	os:pushString(self._pname_)
end


-- 保存传世装备属性
i3k_sbean.legend_save_req = i3k_class("legend_save_req")
function i3k_sbean.legend_save_req:ctor()
	self._pname_ = "legend_save_req"
end

function i3k_sbean.legend_save_req:decode(is)
	is:popString()
end

function i3k_sbean.legend_save_req:encode(os)
	os:pushString(self._pname_)
end


-- 宝石祝福开启
i3k_sbean.equip_gem_bless_req = i3k_class("equip_gem_bless_req")
function i3k_sbean.equip_gem_bless_req:ctor()
	self._pname_ = "equip_gem_bless_req"
	--self.pos:		int32	
	--self.seq:		int32	
	--self.level:		int32	
end

function i3k_sbean.equip_gem_bless_req:clone()
	return clone(self)
end

function i3k_sbean.equip_gem_bless_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
	self.seq = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.equip_gem_bless_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
	os:pushNumber(self.seq)
	os:pushNumber(self.level)
end


-- 装备转化
i3k_sbean.equip_trans_req = i3k_class("equip_trans_req")
function i3k_sbean.equip_trans_req:ctor()
	self._pname_ = "equip_trans_req"
	--self.groupID:		int32	
	--self.equipID:		int32	
	--self.guid:		string	
end

function i3k_sbean.equip_trans_req:clone()
	return clone(self)
end

function i3k_sbean.equip_trans_req:decode(is)
	is:popString()
	self.groupID = is:popNumber()
	self.equipID = is:popNumber()
	self.guid = is:popString()
end

function i3k_sbean.equip_trans_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupID)
	os:pushNumber(self.equipID)
	os:pushString(self.guid)
end


-- 选择技能上战
i3k_sbean.skill_select_req = i3k_class("skill_select_req")
function i3k_sbean.skill_select_req:ctor()
	self._pname_ = "skill_select_req"
	--self.slotId:		int32	
	--self.skillId:		int32	
end

function i3k_sbean.skill_select_req:clone()
	return clone(self)
end

function i3k_sbean.skill_select_req:decode(is)
	is:popString()
	self.slotId = is:popNumber()
	self.skillId = is:popNumber()
end

function i3k_sbean.skill_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.slotId)
	os:pushNumber(self.skillId)
end


-- 技能升级
i3k_sbean.skill_levelup_req = i3k_class("skill_levelup_req")
function i3k_sbean.skill_levelup_req:ctor()
	self._pname_ = "skill_levelup_req"
	--self.skillId:		int32	
	--self.level:		int32	
end

function i3k_sbean.skill_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.skill_levelup_req:decode(is)
	is:popString()
	self.skillId = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.skill_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillId)
	os:pushNumber(self.level)
end


-- 技能全部升级
i3k_sbean.skill_multi_levelup_req = i3k_class("skill_multi_levelup_req")
function i3k_sbean.skill_multi_levelup_req:ctor()
	self._pname_ = "skill_multi_levelup_req"
	--self.skills:		map[int32, int32]	
end

function i3k_sbean.skill_multi_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.skill_multi_levelup_req:decode(is)
	is:popString()
	self.skills = is:popNumberNumberMap()
end

function i3k_sbean.skill_multi_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.skills)
end


-- 技能升界
i3k_sbean.skill_enhance_req = i3k_class("skill_enhance_req")
function i3k_sbean.skill_enhance_req:ctor()
	self._pname_ = "skill_enhance_req"
	--self.skillId:		int32	
	--self.level:		int32	
end

function i3k_sbean.skill_enhance_req:clone()
	return clone(self)
end

function i3k_sbean.skill_enhance_req:decode(is)
	is:popString()
	self.skillId = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.skill_enhance_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillId)
	os:pushNumber(self.level)
end


-- 技能解锁
i3k_sbean.skill_unlock_req = i3k_class("skill_unlock_req")
function i3k_sbean.skill_unlock_req:ctor()
	self._pname_ = "skill_unlock_req"
	--self.skillId:		int32	
end

function i3k_sbean.skill_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.skill_unlock_req:decode(is)
	is:popString()
	self.skillId = is:popNumber()
end

function i3k_sbean.skill_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillId)
end


-- 装备绝技
i3k_sbean.uniqueskill_set_req = i3k_class("uniqueskill_set_req")
function i3k_sbean.uniqueskill_set_req:ctor()
	self._pname_ = "uniqueskill_set_req"
	--self.skillID:		int32	
end

function i3k_sbean.uniqueskill_set_req:clone()
	return clone(self)
end

function i3k_sbean.uniqueskill_set_req:decode(is)
	is:popString()
	self.skillID = is:popNumber()
end

function i3k_sbean.uniqueskill_set_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
end


-- 心法学习
i3k_sbean.spirit_learn_req = i3k_class("spirit_learn_req")
function i3k_sbean.spirit_learn_req:ctor()
	self._pname_ = "spirit_learn_req"
	--self.spiritId:		int32	
end

function i3k_sbean.spirit_learn_req:clone()
	return clone(self)
end

function i3k_sbean.spirit_learn_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
end

function i3k_sbean.spirit_learn_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
end


-- 心法研读
i3k_sbean.spirit_levelup_req = i3k_class("spirit_levelup_req")
function i3k_sbean.spirit_levelup_req:ctor()
	self._pname_ = "spirit_levelup_req"
	--self.spiritId:		int32	
	--self.level:		int32	
end

function i3k_sbean.spirit_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.spirit_levelup_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.spirit_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
	os:pushNumber(self.level)
end


-- 心法装备
i3k_sbean.spirit_install_req = i3k_class("spirit_install_req")
function i3k_sbean.spirit_install_req:ctor()
	self._pname_ = "spirit_install_req"
	--self.spiritId:		int32	
end

function i3k_sbean.spirit_install_req:clone()
	return clone(self)
end

function i3k_sbean.spirit_install_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
end

function i3k_sbean.spirit_install_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
end


-- 心法卸载
i3k_sbean.spirit_uninstall_req = i3k_class("spirit_uninstall_req")
function i3k_sbean.spirit_uninstall_req:ctor()
	self._pname_ = "spirit_uninstall_req"
	--self.spiritId:		int32	
end

function i3k_sbean.spirit_uninstall_req:clone()
	return clone(self)
end

function i3k_sbean.spirit_uninstall_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
end

function i3k_sbean.spirit_uninstall_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
end


-- 合成神兵
i3k_sbean.weapon_make_req = i3k_class("weapon_make_req")
function i3k_sbean.weapon_make_req:ctor()
	self._pname_ = "weapon_make_req"
	--self.weaponId:		int32	
end

function i3k_sbean.weapon_make_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_make_req:decode(is)
	is:popString()
	self.weaponId = is:popNumber()
end

function i3k_sbean.weapon_make_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponId)
end


-- 神兵升级
i3k_sbean.weapon_levelup_req = i3k_class("weapon_levelup_req")
function i3k_sbean.weapon_levelup_req:ctor()
	self._pname_ = "weapon_levelup_req"
	--self.weaponId:		int32	
	--self.items:		map[int32, int32]	
end

function i3k_sbean.weapon_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_levelup_req:decode(is)
	is:popString()
	self.weaponId = is:popNumber()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.weapon_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponId)
	os:pushNumberNumberMap(self.items)
end


-- 神兵买等级
i3k_sbean.weapon_buylevel_req = i3k_class("weapon_buylevel_req")
function i3k_sbean.weapon_buylevel_req:ctor()
	self._pname_ = "weapon_buylevel_req"
	--self.weaponId:		int32	
	--self.level:		int32	
end

function i3k_sbean.weapon_buylevel_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_buylevel_req:decode(is)
	is:popString()
	self.weaponId = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.weapon_buylevel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponId)
	os:pushNumber(self.level)
end


-- 神兵升星
i3k_sbean.weapon_starup_req = i3k_class("weapon_starup_req")
function i3k_sbean.weapon_starup_req:ctor()
	self._pname_ = "weapon_starup_req"
	--self.weaponId:		int32	
	--self.star:		int32	
	--self.itemCount:		int32	
	--self.altCount:		int32	
end

function i3k_sbean.weapon_starup_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_starup_req:decode(is)
	is:popString()
	self.weaponId = is:popNumber()
	self.star = is:popNumber()
	self.itemCount = is:popNumber()
	self.altCount = is:popNumber()
end

function i3k_sbean.weapon_starup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponId)
	os:pushNumber(self.star)
	os:pushNumber(self.itemCount)
	os:pushNumber(self.altCount)
end


-- 选择使用神兵
i3k_sbean.weapon_select_req = i3k_class("weapon_select_req")
function i3k_sbean.weapon_select_req:ctor()
	self._pname_ = "weapon_select_req"
	--self.weaponId:		int32	
end

function i3k_sbean.weapon_select_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_select_req:decode(is)
	is:popString()
	self.weaponId = is:popNumber()
end

function i3k_sbean.weapon_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponId)
end


-- 打开神兵界面同步信息
i3k_sbean.weapon_sync_req = i3k_class("weapon_sync_req")
function i3k_sbean.weapon_sync_req:ctor()
	self._pname_ = "weapon_sync_req"
end

function i3k_sbean.weapon_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.weapon_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 神兵特技激活
i3k_sbean.weapon_uskill_open_req = i3k_class("weapon_uskill_open_req")
function i3k_sbean.weapon_uskill_open_req:ctor()
	self._pname_ = "weapon_uskill_open_req"
	--self.weaponID:		int32	
end

function i3k_sbean.weapon_uskill_open_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_uskill_open_req:decode(is)
	is:popString()
	self.weaponID = is:popNumber()
end

function i3k_sbean.weapon_uskill_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponID)
end


-- 设置神兵形态 form 1:默认形态 2:进阶形态 3:觉醒形态
i3k_sbean.weapon_setform_req = i3k_class("weapon_setform_req")
function i3k_sbean.weapon_setform_req:ctor()
	self._pname_ = "weapon_setform_req"
	--self.weaponID:		int32	
	--self.form:		int32	
end

function i3k_sbean.weapon_setform_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_setform_req:decode(is)
	is:popString()
	self.weaponID = is:popNumber()
	self.form = is:popNumber()
end

function i3k_sbean.weapon_setform_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponID)
	os:pushNumber(self.form)
end


-- 进入神兵副本请求
i3k_sbean.weaponmap_start_req = i3k_class("weaponmap_start_req")
function i3k_sbean.weaponmap_start_req:ctor()
	self._pname_ = "weaponmap_start_req"
end

function i3k_sbean.weaponmap_start_req:decode(is)
	is:popString()
end

function i3k_sbean.weaponmap_start_req:encode(os)
	os:pushString(self._pname_)
end


-- 神兵觉醒
i3k_sbean.weapon_awake_req = i3k_class("weapon_awake_req")
function i3k_sbean.weapon_awake_req:ctor()
	self._pname_ = "weapon_awake_req"
	--self.weaponID:		int32	
end

function i3k_sbean.weapon_awake_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_awake_req:decode(is)
	is:popString()
	self.weaponID = is:popNumber()
end

function i3k_sbean.weapon_awake_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponID)
end


-- 神兵觉醒 兵魂技能升级
i3k_sbean.weapon_awake_skill_lvlup_req = i3k_class("weapon_awake_skill_lvlup_req")
function i3k_sbean.weapon_awake_skill_lvlup_req:ctor()
	self._pname_ = "weapon_awake_skill_lvlup_req"
	--self.weaponID:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.weapon_awake_skill_lvlup_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_awake_skill_lvlup_req:decode(is)
	is:popString()
	self.weaponID = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.weapon_awake_skill_lvlup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponID)
	os:pushNumber(self.skillID)
end


-- 打开佣兵界面,同步信息
i3k_sbean.pet_sync_req = i3k_class("pet_sync_req")
function i3k_sbean.pet_sync_req:ctor()
	self._pname_ = "pet_sync_req"
end

function i3k_sbean.pet_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.pet_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 生成佣兵
i3k_sbean.pet_make_req = i3k_class("pet_make_req")
function i3k_sbean.pet_make_req:ctor()
	self._pname_ = "pet_make_req"
	--self.petId:		int32	
end

function i3k_sbean.pet_make_req:clone()
	return clone(self)
end

function i3k_sbean.pet_make_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
end

function i3k_sbean.pet_make_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
end


-- 佣兵转职
i3k_sbean.pet_transform_req = i3k_class("pet_transform_req")
function i3k_sbean.pet_transform_req:ctor()
	self._pname_ = "pet_transform_req"
	--self.petId:		int32	
	--self.tlvl:		int32	
end

function i3k_sbean.pet_transform_req:clone()
	return clone(self)
end

function i3k_sbean.pet_transform_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.tlvl = is:popNumber()
end

function i3k_sbean.pet_transform_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.tlvl)
end


-- 佣兵升级
i3k_sbean.pet_levelup_req = i3k_class("pet_levelup_req")
function i3k_sbean.pet_levelup_req:ctor()
	self._pname_ = "pet_levelup_req"
	--self.petId:		int32	
	--self.items:		map[int32, int32]	
end

function i3k_sbean.pet_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.pet_levelup_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.pet_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumberNumberMap(self.items)
end


-- 佣兵买等级
i3k_sbean.pet_buylevel_req = i3k_class("pet_buylevel_req")
function i3k_sbean.pet_buylevel_req:ctor()
	self._pname_ = "pet_buylevel_req"
	--self.petId:		int32	
	--self.level:		int32	
end

function i3k_sbean.pet_buylevel_req:clone()
	return clone(self)
end

function i3k_sbean.pet_buylevel_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.pet_buylevel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.level)
end


-- 佣兵升星
i3k_sbean.pet_starup_req = i3k_class("pet_starup_req")
function i3k_sbean.pet_starup_req:ctor()
	self._pname_ = "pet_starup_req"
	--self.petId:		int32	
	--self.star:		int32	
	--self.itemCount:		int32	
	--self.altCount:		int32	
end

function i3k_sbean.pet_starup_req:clone()
	return clone(self)
end

function i3k_sbean.pet_starup_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.star = is:popNumber()
	self.itemCount = is:popNumber()
	self.altCount = is:popNumber()
end

function i3k_sbean.pet_starup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.star)
	os:pushNumber(self.itemCount)
	os:pushNumber(self.altCount)
end


-- 佣兵突破等级提升
i3k_sbean.pet_breakskillvlup_req = i3k_class("pet_breakskillvlup_req")
function i3k_sbean.pet_breakskillvlup_req:ctor()
	self._pname_ = "pet_breakskillvlup_req"
	--self.petId:		int32	
	--self.skillId:		int32	
	--self.level:		int32	
	--self.itemCount:		int32	
	--self.altCount:		int32	
end

function i3k_sbean.pet_breakskillvlup_req:clone()
	return clone(self)
end

function i3k_sbean.pet_breakskillvlup_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.skillId = is:popNumber()
	self.level = is:popNumber()
	self.itemCount = is:popNumber()
	self.altCount = is:popNumber()
end

function i3k_sbean.pet_breakskillvlup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.skillId)
	os:pushNumber(self.level)
	os:pushNumber(self.itemCount)
	os:pushNumber(self.altCount)
end


-- 世界地图佣兵设置,petId为0是不设置世界地图佣兵
i3k_sbean.pet_worldmapset_req = i3k_class("pet_worldmapset_req")
function i3k_sbean.pet_worldmapset_req:ctor()
	self._pname_ = "pet_worldmapset_req"
	--self.petId:		int32	
end

function i3k_sbean.pet_worldmapset_req:clone()
	return clone(self)
end

function i3k_sbean.pet_worldmapset_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
end

function i3k_sbean.pet_worldmapset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
end


-- 单人副本佣兵设置,petsId为空table是不设置地图佣兵
i3k_sbean.pet_privatemapset_req = i3k_class("pet_privatemapset_req")
function i3k_sbean.pet_privatemapset_req:ctor()
	self._pname_ = "pet_privatemapset_req"
	--self.petsId:		set[int32]	
end

function i3k_sbean.pet_privatemapset_req:clone()
	return clone(self)
end

function i3k_sbean.pet_privatemapset_req:decode(is)
	is:popString()
	self.petsId = is:popNumberSet()
end

function i3k_sbean.pet_privatemapset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.petsId)
end


-- 帮派副本佣兵设置,petsId为空table是不设置地图佣兵
i3k_sbean.pet_sectmapset_req = i3k_class("pet_sectmapset_req")
function i3k_sbean.pet_sectmapset_req:ctor()
	self._pname_ = "pet_sectmapset_req"
	--self.petsId:		set[int32]	
end

function i3k_sbean.pet_sectmapset_req:clone()
	return clone(self)
end

function i3k_sbean.pet_sectmapset_req:decode(is)
	is:popString()
	self.petsId = is:popNumberSet()
end

function i3k_sbean.pet_sectmapset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.petsId)
end


-- 活动副本佣兵设置,petsId为空table是不设置地图佣兵
i3k_sbean.pet_activitymapset_req = i3k_class("pet_activitymapset_req")
function i3k_sbean.pet_activitymapset_req:ctor()
	self._pname_ = "pet_activitymapset_req"
	--self.petsId:		set[int32]	
end

function i3k_sbean.pet_activitymapset_req:clone()
	return clone(self)
end

function i3k_sbean.pet_activitymapset_req:decode(is)
	is:popString()
	self.petsId = is:popNumberSet()
end

function i3k_sbean.pet_activitymapset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.petsId)
end


-- 进入身世副本协议
i3k_sbean.lifetaskmap_start_req = i3k_class("lifetaskmap_start_req")
function i3k_sbean.lifetaskmap_start_req:ctor()
	self._pname_ = "lifetaskmap_start_req"
	--self.mapId:		int32	
	--self.petId:		int32	
end

function i3k_sbean.lifetaskmap_start_req:clone()
	return clone(self)
end

function i3k_sbean.lifetaskmap_start_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.petId = is:popNumber()
end

function i3k_sbean.lifetaskmap_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.petId)
end


-- 武库心法升级(第一次相当于解锁心法)
i3k_sbean.petspirit_lvlup_req = i3k_class("petspirit_lvlup_req")
function i3k_sbean.petspirit_lvlup_req:ctor()
	self._pname_ = "petspirit_lvlup_req"
	--self.spiritID:		int32	
end

function i3k_sbean.petspirit_lvlup_req:clone()
	return clone(self)
end

function i3k_sbean.petspirit_lvlup_req:decode(is)
	is:popString()
	self.spiritID = is:popNumber()
end

function i3k_sbean.petspirit_lvlup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritID)
end


-- 随从心法修习(第一次默认保存)
i3k_sbean.petspirit_learn_req = i3k_class("petspirit_learn_req")
function i3k_sbean.petspirit_learn_req:ctor()
	self._pname_ = "petspirit_learn_req"
	--self.petID:		int32	
	--self.spiritID:		int32	
	--self.index:		int32	
	--self.cost2Items:		map[int32, int32]	
end

function i3k_sbean.petspirit_learn_req:clone()
	return clone(self)
end

function i3k_sbean.petspirit_learn_req:decode(is)
	is:popString()
	self.petID = is:popNumber()
	self.spiritID = is:popNumber()
	self.index = is:popNumber()
	self.cost2Items = is:popNumberNumberMap()
end

function i3k_sbean.petspirit_learn_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petID)
	os:pushNumber(self.spiritID)
	os:pushNumber(self.index)
	os:pushNumberNumberMap(self.cost2Items)
end


-- 随从心法替换
i3k_sbean.petspirit_replace_req = i3k_class("petspirit_replace_req")
function i3k_sbean.petspirit_replace_req:ctor()
	self._pname_ = "petspirit_replace_req"
	--self.petID:		int32	
	--self.index:		int32	
end

function i3k_sbean.petspirit_replace_req:clone()
	return clone(self)
end

function i3k_sbean.petspirit_replace_req:decode(is)
	is:popString()
	self.petID = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.petspirit_replace_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petID)
	os:pushNumber(self.index)
end


-- 宠物改名
i3k_sbean.pet_rename_req = i3k_class("pet_rename_req")
function i3k_sbean.pet_rename_req:ctor()
	self._pname_ = "pet_rename_req"
	--self.petID:		int32	
	--self.name:		string	
end

function i3k_sbean.pet_rename_req:clone()
	return clone(self)
end

function i3k_sbean.pet_rename_req:decode(is)
	is:popString()
	self.petID = is:popNumber()
	self.name = is:popString()
end

function i3k_sbean.pet_rename_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petID)
	os:pushString(self.name)
end


-- 日常任务同步任务列表协议
i3k_sbean.dtask_sync_req = i3k_class("dtask_sync_req")
function i3k_sbean.dtask_sync_req:ctor()
	self._pname_ = "dtask_sync_req"
end

function i3k_sbean.dtask_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.dtask_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 日常任务获取任务奖励协议
i3k_sbean.dtask_take_req = i3k_class("dtask_take_req")
function i3k_sbean.dtask_take_req:ctor()
	self._pname_ = "dtask_take_req"
	--self.id:		int32	
end

function i3k_sbean.dtask_take_req:clone()
	return clone(self)
end

function i3k_sbean.dtask_take_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.dtask_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 日常任务一键领取奖励协议
i3k_sbean.dtask_take_batch_req = i3k_class("dtask_take_batch_req")
function i3k_sbean.dtask_take_batch_req:ctor()
	self._pname_ = "dtask_take_batch_req"
	--self.taskIds:		set[int32]	
end

function i3k_sbean.dtask_take_batch_req:clone()
	return clone(self)
end

function i3k_sbean.dtask_take_batch_req:decode(is)
	is:popString()
	self.taskIds = is:popNumberSet()
end

function i3k_sbean.dtask_take_batch_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.taskIds)
end


-- 挑战任务sdk成就完成通知服务器sdk参数
i3k_sbean.role_chtask_sdkdel = i3k_class("role_chtask_sdkdel")
function i3k_sbean.role_chtask_sdkdel:ctor()
	self._pname_ = "role_chtask_sdkdel"
	--self.achSdkParam:		string	
end

function i3k_sbean.role_chtask_sdkdel:clone()
	return clone(self)
end

function i3k_sbean.role_chtask_sdkdel:decode(is)
	is:popString()
	self.achSdkParam = is:popString()
end

function i3k_sbean.role_chtask_sdkdel:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.achSdkParam)
end


-- 挑战任务同步任务列表协议
i3k_sbean.chtask_sync_req = i3k_class("chtask_sync_req")
function i3k_sbean.chtask_sync_req:ctor()
	self._pname_ = "chtask_sync_req"
end

function i3k_sbean.chtask_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.chtask_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 挑战任务获取任务奖励协议
i3k_sbean.chtask_take_req = i3k_class("chtask_take_req")
function i3k_sbean.chtask_take_req:ctor()
	self._pname_ = "chtask_take_req"
	--self.type:		int32	
	--self.seq:		int32	
end

function i3k_sbean.chtask_take_req:clone()
	return clone(self)
end

function i3k_sbean.chtask_take_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.chtask_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.seq)
end


-- 挑战任务获批量奖励协议
i3k_sbean.chtask_batchtake_req = i3k_class("chtask_batchtake_req")
function i3k_sbean.chtask_batchtake_req:ctor()
	self._pname_ = "chtask_batchtake_req"
	--self.tasks:		map[int32,int32]	
end

function i3k_sbean.chtask_batchtake_req:clone()
	return clone(self)
end

function i3k_sbean.chtask_batchtake_req:decode(is)
	is:popString()
	self.tasks = is:popNumberNumberMap()
end

function i3k_sbean.chtask_batchtake_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.tasks)
end


-- 挑战任务上交物品
i3k_sbean.chtask_give_items_req = i3k_class("chtask_give_items_req")
function i3k_sbean.chtask_give_items_req:ctor()
	self._pname_ = "chtask_give_items_req"
	--self.type:		int32	
	--self.seq:		int32	
end

function i3k_sbean.chtask_give_items_req:clone()
	return clone(self)
end

function i3k_sbean.chtask_give_items_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.chtask_give_items_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.seq)
end


-- 名望同步协议
i3k_sbean.fame_sync_req = i3k_class("fame_sync_req")
function i3k_sbean.fame_sync_req:ctor()
	self._pname_ = "fame_sync_req"
	--self.level:		int32	
end

function i3k_sbean.fame_sync_req:clone()
	return clone(self)
end

function i3k_sbean.fame_sync_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.fame_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 名望晋级协议
i3k_sbean.fame_upgrade_req = i3k_class("fame_upgrade_req")
function i3k_sbean.fame_upgrade_req:ctor()
	self._pname_ = "fame_upgrade_req"
	--self.level:		int32	
end

function i3k_sbean.fame_upgrade_req:clone()
	return clone(self)
end

function i3k_sbean.fame_upgrade_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.fame_upgrade_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 名望获取名望奖励协议
i3k_sbean.fame_take_req = i3k_class("fame_take_req")
function i3k_sbean.fame_take_req:ctor()
	self._pname_ = "fame_take_req"
	--self.level:		int32	
end

function i3k_sbean.fame_take_req:clone()
	return clone(self)
end

function i3k_sbean.fame_take_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.fame_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 每日在线奖励同步在线奖励协议
i3k_sbean.onlinegift_sync_req = i3k_class("onlinegift_sync_req")
function i3k_sbean.onlinegift_sync_req:ctor()
	self._pname_ = "onlinegift_sync_req"
end

function i3k_sbean.onlinegift_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.onlinegift_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 每日在线奖励获取奖励协议
i3k_sbean.onlinegift_take_req = i3k_class("onlinegift_take_req")
function i3k_sbean.onlinegift_take_req:ctor()
	self._pname_ = "onlinegift_take_req"
	--self.minute:		int32	
end

function i3k_sbean.onlinegift_take_req:clone()
	return clone(self)
end

function i3k_sbean.onlinegift_take_req:decode(is)
	is:popString()
	self.minute = is:popNumber()
end

function i3k_sbean.onlinegift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.minute)
end


-- 离线经验奖励领取协议
i3k_sbean.offlineexp_take_req = i3k_class("offlineexp_take_req")
function i3k_sbean.offlineexp_take_req:ctor()
	self._pname_ = "offlineexp_take_req"
	--self.accTime:		int32	
	--self.doubleExp:		int32	
end

function i3k_sbean.offlineexp_take_req:clone()
	return clone(self)
end

function i3k_sbean.offlineexp_take_req:decode(is)
	is:popString()
	self.accTime = is:popNumber()
	self.doubleExp = is:popNumber()
end

function i3k_sbean.offlineexp_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.accTime)
	os:pushNumber(self.doubleExp)
end


-- 购买挂机精灵经验
i3k_sbean.buy_offline_wizard_exp_req = i3k_class("buy_offline_wizard_exp_req")
function i3k_sbean.buy_offline_wizard_exp_req:ctor()
	self._pname_ = "buy_offline_wizard_exp_req"
	--self.buyCnt:		int32	
end

function i3k_sbean.buy_offline_wizard_exp_req:clone()
	return clone(self)
end

function i3k_sbean.buy_offline_wizard_exp_req:decode(is)
	is:popString()
	self.buyCnt = is:popNumber()
end

function i3k_sbean.buy_offline_wizard_exp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.buyCnt)
end


-- 隐藏离线经验显示设置(0 显示 1隐藏)
i3k_sbean.hide_offlineexp_display_req = i3k_class("hide_offlineexp_display_req")
function i3k_sbean.hide_offlineexp_display_req:ctor()
	self._pname_ = "hide_offlineexp_display_req"
	--self.hide:		int32	
end

function i3k_sbean.hide_offlineexp_display_req:clone()
	return clone(self)
end

function i3k_sbean.hide_offlineexp_display_req:decode(is)
	is:popString()
	self.hide = is:popNumber()
end

function i3k_sbean.hide_offlineexp_display_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hide)
end


-- 全服答题活动同步协议
i3k_sbean.quizgift_sync_req = i3k_class("quizgift_sync_req")
function i3k_sbean.quizgift_sync_req:ctor()
	self._pname_ = "quizgift_sync_req"
end

function i3k_sbean.quizgift_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.quizgift_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 全服答题活动查询排行榜
i3k_sbean.quizgift_qrank_req = i3k_class("quizgift_qrank_req")
function i3k_sbean.quizgift_qrank_req:ctor()
	self._pname_ = "quizgift_qrank_req"
	--self.startTime:		int32	
end

function i3k_sbean.quizgift_qrank_req:clone()
	return clone(self)
end

function i3k_sbean.quizgift_qrank_req:decode(is)
	is:popString()
	self.startTime = is:popNumber()
end

function i3k_sbean.quizgift_qrank_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.startTime)
end


-- 全服答题活动答题协议
i3k_sbean.quizgift_answer_req = i3k_class("quizgift_answer_req")
function i3k_sbean.quizgift_answer_req:ctor()
	self._pname_ = "quizgift_answer_req"
	--self.startTime:		int32	
	--self.seq:		int32	
	--self.answer:		int32	
	--self.useBoubleBonus:		int32	
end

function i3k_sbean.quizgift_answer_req:clone()
	return clone(self)
end

function i3k_sbean.quizgift_answer_req:decode(is)
	is:popString()
	self.startTime = is:popNumber()
	self.seq = is:popNumber()
	self.answer = is:popNumber()
	self.useBoubleBonus = is:popNumber()
end

function i3k_sbean.quizgift_answer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.startTime)
	os:pushNumber(self.seq)
	os:pushNumber(self.answer)
	os:pushNumber(self.useBoubleBonus)
end


-- 同步幸运转盘信息
i3k_sbean.sync_luckywheel_req = i3k_class("sync_luckywheel_req")
function i3k_sbean.sync_luckywheel_req:ctor()
	self._pname_ = "sync_luckywheel_req"
end

function i3k_sbean.sync_luckywheel_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_luckywheel_req:encode(os)
	os:pushString(self._pname_)
end


-- 幸运转盘抽奖
i3k_sbean.luckywheel_ondraw_req = i3k_class("luckywheel_ondraw_req")
function i3k_sbean.luckywheel_ondraw_req:ctor()
	self._pname_ = "luckywheel_ondraw_req"
end

function i3k_sbean.luckywheel_ondraw_req:decode(is)
	is:popString()
end

function i3k_sbean.luckywheel_ondraw_req:encode(os)
	os:pushString(self._pname_)
end


-- 购买幸运转盘抽奖次数
i3k_sbean.luckywheel_buydrawtimes_req = i3k_class("luckywheel_buydrawtimes_req")
function i3k_sbean.luckywheel_buydrawtimes_req:ctor()
	self._pname_ = "luckywheel_buydrawtimes_req"
	--self.times:		int32	
end

function i3k_sbean.luckywheel_buydrawtimes_req:clone()
	return clone(self)
end

function i3k_sbean.luckywheel_buydrawtimes_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.luckywheel_buydrawtimes_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 燃放烟花
i3k_sbean.play_firework_req = i3k_class("play_firework_req")
function i3k_sbean.play_firework_req:ctor()
	self._pname_ = "play_firework_req"
	--self.fireworkID:		int32	
end

function i3k_sbean.play_firework_req:clone()
	return clone(self)
end

function i3k_sbean.play_firework_req:decode(is)
	is:popString()
	self.fireworkID = is:popNumber()
end

function i3k_sbean.play_firework_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fireworkID)
end


-- 抢红包请求协议
i3k_sbean.redenvelope_snatch_req = i3k_class("redenvelope_snatch_req")
function i3k_sbean.redenvelope_snatch_req:ctor()
	self._pname_ = "redenvelope_snatch_req"
	--self.startTime:		int32	
	--self.id:		int32	
end

function i3k_sbean.redenvelope_snatch_req:clone()
	return clone(self)
end

function i3k_sbean.redenvelope_snatch_req:decode(is)
	is:popString()
	self.startTime = is:popNumber()
	self.id = is:popNumber()
end

function i3k_sbean.redenvelope_snatch_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.startTime)
	os:pushNumber(self.id)
end


-- 接取主线任务
i3k_sbean.mtask_take_req = i3k_class("mtask_take_req")
function i3k_sbean.mtask_take_req:ctor()
	self._pname_ = "mtask_take_req"
	--self.taskId:		int32	
end

function i3k_sbean.mtask_take_req:clone()
	return clone(self)
end

function i3k_sbean.mtask_take_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.mtask_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 放弃主线任务
i3k_sbean.mtask_quit_req = i3k_class("mtask_quit_req")
function i3k_sbean.mtask_quit_req:ctor()
	self._pname_ = "mtask_quit_req"
	--self.taskId:		int32	
end

function i3k_sbean.mtask_quit_req:clone()
	return clone(self)
end

function i3k_sbean.mtask_quit_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.mtask_quit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 客户端判断完成任务通知GS计数
i3k_sbean.task_complete_notice_gs_req = i3k_class("task_complete_notice_gs_req")
function i3k_sbean.task_complete_notice_gs_req:ctor()
	self._pname_ = "task_complete_notice_gs_req"
	--self.condType:		int32	
	--self.addParam1:		int32	
	--self.addParam2:		int32	
end

function i3k_sbean.task_complete_notice_gs_req:clone()
	return clone(self)
end

function i3k_sbean.task_complete_notice_gs_req:decode(is)
	is:popString()
	self.condType = is:popNumber()
	self.addParam1 = is:popNumber()
	self.addParam2 = is:popNumber()
end

function i3k_sbean.task_complete_notice_gs_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.condType)
	os:pushNumber(self.addParam1)
	os:pushNumber(self.addParam2)
end


-- 主线任务领取奖励
i3k_sbean.mtask_reward_req = i3k_class("mtask_reward_req")
function i3k_sbean.mtask_reward_req:ctor()
	self._pname_ = "mtask_reward_req"
	--self.taskId:		int32	
end

function i3k_sbean.mtask_reward_req:clone()
	return clone(self)
end

function i3k_sbean.mtask_reward_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.mtask_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 神兵任务领取奖励
i3k_sbean.wtask_reward_req = i3k_class("wtask_reward_req")
function i3k_sbean.wtask_reward_req:ctor()
	self._pname_ = "wtask_reward_req"
	--self.taskId:		int32	
end

function i3k_sbean.wtask_reward_req:clone()
	return clone(self)
end

function i3k_sbean.wtask_reward_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.wtask_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 神兵任务快速完成
i3k_sbean.wtask_quick_finish_req = i3k_class("wtask_quick_finish_req")
function i3k_sbean.wtask_quick_finish_req:ctor()
	self._pname_ = "wtask_quick_finish_req"
	--self.taskId:		int32	
end

function i3k_sbean.wtask_quick_finish_req:clone()
	return clone(self)
end

function i3k_sbean.wtask_quick_finish_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.wtask_quick_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 佣兵任务领取奖励
i3k_sbean.ptask_reward_req = i3k_class("ptask_reward_req")
function i3k_sbean.ptask_reward_req:ctor()
	self._pname_ = "ptask_reward_req"
	--self.petId:		int32	
	--self.taskId:		int32	
	--self.isdiamond:		int32	
end

function i3k_sbean.ptask_reward_req:clone()
	return clone(self)
end

function i3k_sbean.ptask_reward_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.taskId = is:popNumber()
	self.isdiamond = is:popNumber()
end

function i3k_sbean.ptask_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.taskId)
	os:pushNumber(self.isdiamond)
end


-- 接取佣兵身世任务
i3k_sbean.petlifetask_take_req = i3k_class("petlifetask_take_req")
function i3k_sbean.petlifetask_take_req:ctor()
	self._pname_ = "petlifetask_take_req"
	--self.petId:		int32	
	--self.taskId:		int32	
end

function i3k_sbean.petlifetask_take_req:clone()
	return clone(self)
end

function i3k_sbean.petlifetask_take_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.taskId = is:popNumber()
end

function i3k_sbean.petlifetask_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.taskId)
end


-- 佣兵身世任务领取奖励
i3k_sbean.petlifetask_reward_req = i3k_class("petlifetask_reward_req")
function i3k_sbean.petlifetask_reward_req:ctor()
	self._pname_ = "petlifetask_reward_req"
	--self.petId:		int32	
	--self.taskId:		int32	
end

function i3k_sbean.petlifetask_reward_req:clone()
	return clone(self)
end

function i3k_sbean.petlifetask_reward_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.taskId = is:popNumber()
end

function i3k_sbean.petlifetask_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.taskId)
end


-- 任务定点使用道具
i3k_sbean.task_useitem_req = i3k_class("task_useitem_req")
function i3k_sbean.task_useitem_req:ctor()
	self._pname_ = "task_useitem_req"
	--self.taskCat:		int32	
	--self.ItemId:		int32	
end

function i3k_sbean.task_useitem_req:clone()
	return clone(self)
end

function i3k_sbean.task_useitem_req:decode(is)
	is:popString()
	self.taskCat = is:popNumber()
	self.ItemId = is:popNumber()
end

function i3k_sbean.task_useitem_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskCat)
	os:pushNumber(self.ItemId)
end


-- 任务提交道具
i3k_sbean.task_submititem_req = i3k_class("task_submititem_req")
function i3k_sbean.task_submititem_req:ctor()
	self._pname_ = "task_submititem_req"
	--self.taskCat:		int32	
	--self.petId:		int32	
	--self.ItemId:		int32	
	--self.ItemCount:		int32	
end

function i3k_sbean.task_submititem_req:clone()
	return clone(self)
end

function i3k_sbean.task_submititem_req:decode(is)
	is:popString()
	self.taskCat = is:popNumber()
	self.petId = is:popNumber()
	self.ItemId = is:popNumber()
	self.ItemCount = is:popNumber()
end

function i3k_sbean.task_submititem_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskCat)
	os:pushNumber(self.petId)
	os:pushNumber(self.ItemId)
	os:pushNumber(self.ItemCount)
end


-- 随从任务提交道具
i3k_sbean.pettask_submititem_req = i3k_class("pettask_submititem_req")
function i3k_sbean.pettask_submititem_req:ctor()
	self._pname_ = "pettask_submititem_req"
	--self.petId:		int32	
	--self.ItemId:		int32	
	--self.ItemCount:		int32	
end

function i3k_sbean.pettask_submititem_req:clone()
	return clone(self)
end

function i3k_sbean.pettask_submititem_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.ItemId = is:popNumber()
	self.ItemCount = is:popNumber()
end

function i3k_sbean.pettask_submititem_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.ItemId)
	os:pushNumber(self.ItemCount)
end


-- 随从身世任务提交道具
i3k_sbean.petlifetask_submititem_req = i3k_class("petlifetask_submititem_req")
function i3k_sbean.petlifetask_submititem_req:ctor()
	self._pname_ = "petlifetask_submititem_req"
	--self.petId:		int32	
	--self.ItemId:		int32	
	--self.ItemCount:		int32	
end

function i3k_sbean.petlifetask_submititem_req:clone()
	return clone(self)
end

function i3k_sbean.petlifetask_submititem_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.ItemId = is:popNumber()
	self.ItemCount = is:popNumber()
end

function i3k_sbean.petlifetask_submititem_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.ItemId)
	os:pushNumber(self.ItemCount)
end


-- 任务npc对话
i3k_sbean.task_dialog_req = i3k_class("task_dialog_req")
function i3k_sbean.task_dialog_req:ctor()
	self._pname_ = "task_dialog_req"
	--self.npcId:		int32	
	--self.dialogId:		int32	
end

function i3k_sbean.task_dialog_req:clone()
	return clone(self)
end

function i3k_sbean.task_dialog_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
	self.dialogId = is:popNumber()
end

function i3k_sbean.task_dialog_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
	os:pushNumber(self.dialogId)
end


-- 任务护送NPC
i3k_sbean.task_conveynpc_req = i3k_class("task_conveynpc_req")
function i3k_sbean.task_conveynpc_req:ctor()
	self._pname_ = "task_conveynpc_req"
	--self.npcId:		int32	
end

function i3k_sbean.task_conveynpc_req:clone()
	return clone(self)
end

function i3k_sbean.task_conveynpc_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
end

function i3k_sbean.task_conveynpc_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
end


-- 任务护送物件
i3k_sbean.task_conveyitem_req = i3k_class("task_conveyitem_req")
function i3k_sbean.task_conveyitem_req:ctor()
	self._pname_ = "task_conveyitem_req"
end

function i3k_sbean.task_conveyitem_req:decode(is)
	is:popString()
end

function i3k_sbean.task_conveyitem_req:encode(os)
	os:pushString(self._pname_)
end


-- 任务文字答题
i3k_sbean.task_answer_req = i3k_class("task_answer_req")
function i3k_sbean.task_answer_req:ctor()
	self._pname_ = "task_answer_req"
	--self.questionId:		int32	
	--self.answer:		int32	
end

function i3k_sbean.task_answer_req:clone()
	return clone(self)
end

function i3k_sbean.task_answer_req:decode(is)
	is:popString()
	self.questionId = is:popNumber()
	self.answer = is:popNumber()
end

function i3k_sbean.task_answer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.questionId)
	os:pushNumber(self.answer)
end


-- 随机答题
i3k_sbean.task_randquestion_req = i3k_class("task_randquestion_req")
function i3k_sbean.task_randquestion_req:ctor()
	self._pname_ = "task_randquestion_req"
	--self.taskCat:		int32	
end

function i3k_sbean.task_randquestion_req:clone()
	return clone(self)
end

function i3k_sbean.task_randquestion_req:decode(is)
	is:popString()
	self.taskCat = is:popNumber()
end

function i3k_sbean.task_randquestion_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskCat)
end


-- 开启宠物觉醒任务
i3k_sbean.pawaketask_open_req = i3k_class("pawaketask_open_req")
function i3k_sbean.pawaketask_open_req:ctor()
	self._pname_ = "pawaketask_open_req"
	--self.pid:		int32	
end

function i3k_sbean.pawaketask_open_req:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_open_req:decode(is)
	is:popString()
	self.pid = is:popNumber()
end

function i3k_sbean.pawaketask_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
end


-- 完成宠物觉醒任务
i3k_sbean.pawaketask_finish_req = i3k_class("pawaketask_finish_req")
function i3k_sbean.pawaketask_finish_req:ctor()
	self._pname_ = "pawaketask_finish_req"
	--self.pid:		int32	
end

function i3k_sbean.pawaketask_finish_req:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_finish_req:decode(is)
	is:popString()
	self.pid = is:popNumber()
end

function i3k_sbean.pawaketask_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
end


-- 放弃宠物觉醒任务
i3k_sbean.pawaketask_quit_req = i3k_class("pawaketask_quit_req")
function i3k_sbean.pawaketask_quit_req:ctor()
	self._pname_ = "pawaketask_quit_req"
	--self.pid:		int32	
end

function i3k_sbean.pawaketask_quit_req:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_quit_req:decode(is)
	is:popString()
	self.pid = is:popNumber()
end

function i3k_sbean.pawaketask_quit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
end


-- 重置宠物觉醒任务
i3k_sbean.pawaketask_reset_req = i3k_class("pawaketask_reset_req")
function i3k_sbean.pawaketask_reset_req:ctor()
	self._pname_ = "pawaketask_reset_req"
	--self.pid:		int32	
end

function i3k_sbean.pawaketask_reset_req:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_reset_req:decode(is)
	is:popString()
	self.pid = is:popNumber()
end

function i3k_sbean.pawaketask_reset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
end


-- 宠物觉醒任务提交道具
i3k_sbean.pawaketask_submititem_req = i3k_class("pawaketask_submititem_req")
function i3k_sbean.pawaketask_submititem_req:ctor()
	self._pname_ = "pawaketask_submititem_req"
	--self.pid:		int32	
	--self.items1:		map[int32, int32]	
end

function i3k_sbean.pawaketask_submititem_req:clone()
	return clone(self)
end

function i3k_sbean.pawaketask_submititem_req:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.items1 = is:popNumberNumberMap()
end

function i3k_sbean.pawaketask_submititem_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumberNumberMap(self.items1)
end


-- 宠物觉醒设置
i3k_sbean.petawake_set_req = i3k_class("petawake_set_req")
function i3k_sbean.petawake_set_req:ctor()
	self._pname_ = "petawake_set_req"
	--self.pid:		int32	
	--self.use:		int32	
end

function i3k_sbean.petawake_set_req:clone()
	return clone(self)
end

function i3k_sbean.petawake_set_req:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.use = is:popNumber()
end

function i3k_sbean.petawake_set_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumber(self.use)
end


-- 开始宠物觉醒任务副本
i3k_sbean.start_pawakemap_req = i3k_class("start_pawakemap_req")
function i3k_sbean.start_pawakemap_req:ctor()
	self._pname_ = "start_pawakemap_req"
	--self.pid:		int32	
	--self.mapID:		int32	
	--self.pets:		vector[int32]	
end

function i3k_sbean.start_pawakemap_req:clone()
	return clone(self)
end

function i3k_sbean.start_pawakemap_req:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.mapID = is:popNumber()
	self.pets = is:popNumberList()
end

function i3k_sbean.start_pawakemap_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:pushNumber(self.mapID)
	os:pushNumberList(self.pets)
end


-- 重新激活限时任务
i3k_sbean.tmtask_reactive_req = i3k_class("tmtask_reactive_req")
function i3k_sbean.tmtask_reactive_req:ctor()
	self._pname_ = "tmtask_reactive_req"
end

function i3k_sbean.tmtask_reactive_req:decode(is)
	is:popString()
end

function i3k_sbean.tmtask_reactive_req:encode(os)
	os:pushString(self._pname_)
end


-- 接取势力声望任务
i3k_sbean.forcefame_take_req = i3k_class("forcefame_take_req")
function i3k_sbean.forcefame_take_req:ctor()
	self._pname_ = "forcefame_take_req"
	--self.npcId:		int32	
end

function i3k_sbean.forcefame_take_req:clone()
	return clone(self)
end

function i3k_sbean.forcefame_take_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
end

function i3k_sbean.forcefame_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
end


-- 放弃势力声望任务
i3k_sbean.forcefame_quit_req = i3k_class("forcefame_quit_req")
function i3k_sbean.forcefame_quit_req:ctor()
	self._pname_ = "forcefame_quit_req"
	--self.npcId:		int32	
end

function i3k_sbean.forcefame_quit_req:clone()
	return clone(self)
end

function i3k_sbean.forcefame_quit_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
end

function i3k_sbean.forcefame_quit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
end


-- 完成势力声望任务
i3k_sbean.forcefame_finish_req = i3k_class("forcefame_finish_req")
function i3k_sbean.forcefame_finish_req:ctor()
	self._pname_ = "forcefame_finish_req"
	--self.groupId:		int32	
end

function i3k_sbean.forcefame_finish_req:clone()
	return clone(self)
end

function i3k_sbean.forcefame_finish_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
end

function i3k_sbean.forcefame_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
end


-- 势力声望捐赠
i3k_sbean.forcefame_donate_req = i3k_class("forcefame_donate_req")
function i3k_sbean.forcefame_donate_req:ctor()
	self._pname_ = "forcefame_donate_req"
	--self.forceId:		int32	
	--self.order:		int32	
	--self.num:		int32	
end

function i3k_sbean.forcefame_donate_req:clone()
	return clone(self)
end

function i3k_sbean.forcefame_donate_req:decode(is)
	is:popString()
	self.forceId = is:popNumber()
	self.order = is:popNumber()
	self.num = is:popNumber()
end

function i3k_sbean.forcefame_donate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.forceId)
	os:pushNumber(self.order)
	os:pushNumber(self.num)
end


-- 佣兵复活请求协议
i3k_sbean.pet_revive_req = i3k_class("pet_revive_req")
function i3k_sbean.pet_revive_req:ctor()
	self._pname_ = "pet_revive_req"
	--self.petId:		int32	
	--self.useStone:		int32	
end

function i3k_sbean.pet_revive_req:clone()
	return clone(self)
end

function i3k_sbean.pet_revive_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.useStone = is:popNumber()
end

function i3k_sbean.pet_revive_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.useStone)
end


-- 请求挖矿的响应协议
i3k_sbean.role_mine_req = i3k_class("role_mine_req")
function i3k_sbean.role_mine_req:ctor()
	self._pname_ = "role_mine_req"
	--self.mineId:		int32	
	--self.mineInstance:		int32	
end

function i3k_sbean.role_mine_req:clone()
	return clone(self)
end

function i3k_sbean.role_mine_req:decode(is)
	is:popString()
	self.mineId = is:popNumber()
	self.mineInstance = is:popNumber()
end

function i3k_sbean.role_mine_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mineId)
	os:pushNumber(self.mineInstance)
end


-- 设置攻击模式请求
i3k_sbean.set_attackmode_req = i3k_class("set_attackmode_req")
function i3k_sbean.set_attackmode_req:ctor()
	self._pname_ = "set_attackmode_req"
	--self.mode:		int8	
end

function i3k_sbean.set_attackmode_req:clone()
	return clone(self)
end

function i3k_sbean.set_attackmode_req:decode(is)
	is:popString()
	self.mode = is:popNumber()
end

function i3k_sbean.set_attackmode_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mode)
end


-- 查询队伍成员信息,异步查询
i3k_sbean.team_query_member = i3k_class("team_query_member")
function i3k_sbean.team_query_member:ctor()
	self._pname_ = "team_query_member"
	--self.roleId:		int32	
end

function i3k_sbean.team_query_member:clone()
	return clone(self)
end

function i3k_sbean.team_query_member:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.team_query_member:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 邀请其他玩家组队协议
i3k_sbean.team_invite_req = i3k_class("team_invite_req")
function i3k_sbean.team_invite_req:ctor()
	self._pname_ = "team_invite_req"
	--self.roleId:		int32	
end

function i3k_sbean.team_invite_req:clone()
	return clone(self)
end

function i3k_sbean.team_invite_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.team_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 接收到其他玩家组队邀请后玩家选择是否同意操作(-2是在指引状态 -1是忙，0是拒绝，1是同意)
i3k_sbean.team_invitedby_req = i3k_class("team_invitedby_req")
function i3k_sbean.team_invitedby_req:ctor()
	self._pname_ = "team_invitedby_req"
	--self.roleId:		int32	
	--self.accept:		int32	
end

function i3k_sbean.team_invitedby_req:clone()
	return clone(self)
end

function i3k_sbean.team_invitedby_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.accept = is:popNumber()
end

function i3k_sbean.team_invitedby_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.accept)
end


-- 向其队长申请组队协议
i3k_sbean.team_apply_req = i3k_class("team_apply_req")
function i3k_sbean.team_apply_req:ctor()
	self._pname_ = "team_apply_req"
	--self.teamId:		int32	
end

function i3k_sbean.team_apply_req:clone()
	return clone(self)
end

function i3k_sbean.team_apply_req:decode(is)
	is:popString()
	self.teamId = is:popNumber()
end

function i3k_sbean.team_apply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.teamId)
end


-- 接收到其他玩家组队申请后队长是否同意操作(0是拒绝，1是同意)
i3k_sbean.team_appliedby_req = i3k_class("team_appliedby_req")
function i3k_sbean.team_appliedby_req:ctor()
	self._pname_ = "team_appliedby_req"
	--self.roleId:		int32	
	--self.accept:		int32	
end

function i3k_sbean.team_appliedby_req:clone()
	return clone(self)
end

function i3k_sbean.team_appliedby_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.accept = is:popNumber()
end

function i3k_sbean.team_appliedby_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.accept)
end


-- 离开队伍请求协议
i3k_sbean.team_leave_req = i3k_class("team_leave_req")
function i3k_sbean.team_leave_req:ctor()
	self._pname_ = "team_leave_req"
end

function i3k_sbean.team_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.team_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 踢出队伍成员请求协议
i3k_sbean.team_kick_req = i3k_class("team_kick_req")
function i3k_sbean.team_kick_req:ctor()
	self._pname_ = "team_kick_req"
	--self.roleId:		int32	
end

function i3k_sbean.team_kick_req:clone()
	return clone(self)
end

function i3k_sbean.team_kick_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.team_kick_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 解散队伍请求协议
i3k_sbean.team_dissolve_req = i3k_class("team_dissolve_req")
function i3k_sbean.team_dissolve_req:ctor()
	self._pname_ = "team_dissolve_req"
end

function i3k_sbean.team_dissolve_req:decode(is)
	is:popString()
end

function i3k_sbean.team_dissolve_req:encode(os)
	os:pushString(self._pname_)
end


-- 队伍切换队长请求协议
i3k_sbean.team_change_leader_req = i3k_class("team_change_leader_req")
function i3k_sbean.team_change_leader_req:ctor()
	self._pname_ = "team_change_leader_req"
	--self.roleId:		int32	
end

function i3k_sbean.team_change_leader_req:clone()
	return clone(self)
end

function i3k_sbean.team_change_leader_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.team_change_leader_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 查询玩家的队伍信息
i3k_sbean.team_role_query_req = i3k_class("team_role_query_req")
function i3k_sbean.team_role_query_req:ctor()
	self._pname_ = "team_role_query_req"
	--self.roleId:		int32	
end

function i3k_sbean.team_role_query_req:clone()
	return clone(self)
end

function i3k_sbean.team_role_query_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.team_role_query_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 本队伍信息查询
i3k_sbean.team_self_req = i3k_class("team_self_req")
function i3k_sbean.team_self_req:ctor()
	self._pname_ = "team_self_req"
end

function i3k_sbean.team_self_req:decode(is)
	is:popString()
end

function i3k_sbean.team_self_req:encode(os)
	os:pushString(self._pname_)
end


-- 附近的队伍请求协议
i3k_sbean.team_mapt_req = i3k_class("team_mapt_req")
function i3k_sbean.team_mapt_req:ctor()
	self._pname_ = "team_mapt_req"
end

function i3k_sbean.team_mapt_req:decode(is)
	is:popString()
end

function i3k_sbean.team_mapt_req:encode(os)
	os:pushString(self._pname_)
end


-- 附近的人请求协议
i3k_sbean.team_mapr_req = i3k_class("team_mapr_req")
function i3k_sbean.team_mapr_req:ctor()
	self._pname_ = "team_mapr_req"
end

function i3k_sbean.team_mapr_req:decode(is)
	is:popString()
end

function i3k_sbean.team_mapr_req:encode(os)
	os:pushString(self._pname_)
end


-- 师徒请求协议
i3k_sbean.team_master_req = i3k_class("team_master_req")
function i3k_sbean.team_master_req:ctor()
	self._pname_ = "team_master_req"
end

function i3k_sbean.team_master_req:decode(is)
	is:popString()
end

function i3k_sbean.team_master_req:encode(os)
	os:pushString(self._pname_)
end


-- 副本房间创建协议
i3k_sbean.mroom_create_req = i3k_class("mroom_create_req")
function i3k_sbean.mroom_create_req:ctor()
	self._pname_ = "mroom_create_req"
	--self.mapId:		int32	
	--self.type:		int32	
end

function i3k_sbean.mroom_create_req:clone()
	return clone(self)
end

function i3k_sbean.mroom_create_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.mroom_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.type)
end


-- 新成员点击加入副本房间协议
i3k_sbean.mroom_enter_req = i3k_class("mroom_enter_req")
function i3k_sbean.mroom_enter_req:ctor()
	self._pname_ = "mroom_enter_req"
	--self.mapId:		int32	
	--self.roomId:		int32	
	--self.roomType:		int32	
end

function i3k_sbean.mroom_enter_req:clone()
	return clone(self)
end

function i3k_sbean.mroom_enter_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.roomId = is:popNumber()
	self.roomType = is:popNumber()
end

function i3k_sbean.mroom_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.roomId)
	os:pushNumber(self.roomType)
end


-- 新成员快速加入副本房间协议
i3k_sbean.mroom_qenter_req = i3k_class("mroom_qenter_req")
function i3k_sbean.mroom_qenter_req:ctor()
	self._pname_ = "mroom_qenter_req"
	--self.mapId:		int32	
end

function i3k_sbean.mroom_qenter_req:clone()
	return clone(self)
end

function i3k_sbean.mroom_qenter_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.mroom_qenter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 队长邀请新人加入副本房间协议
i3k_sbean.mroom_invite_req = i3k_class("mroom_invite_req")
function i3k_sbean.mroom_invite_req:ctor()
	self._pname_ = "mroom_invite_req"
	--self.roleId:		int32	
end

function i3k_sbean.mroom_invite_req:clone()
	return clone(self)
end

function i3k_sbean.mroom_invite_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.mroom_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 接收到其他玩家邀请入房间后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
i3k_sbean.mroom_invitedby_req = i3k_class("mroom_invitedby_req")
function i3k_sbean.mroom_invitedby_req:ctor()
	self._pname_ = "mroom_invitedby_req"
	--self.roleId:		int32	
	--self.mapId:		int32	
	--self.roomId:		int32	
	--self.accept:		int32	
	--self.type:		int32	
end

function i3k_sbean.mroom_invitedby_req:clone()
	return clone(self)
end

function i3k_sbean.mroom_invitedby_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.mapId = is:popNumber()
	self.roomId = is:popNumber()
	self.accept = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.mroom_invitedby_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.mapId)
	os:pushNumber(self.roomId)
	os:pushNumber(self.accept)
	os:pushNumber(self.type)
end


-- 离开房间请求协议
i3k_sbean.mroom_leave_req = i3k_class("mroom_leave_req")
function i3k_sbean.mroom_leave_req:ctor()
	self._pname_ = "mroom_leave_req"
end

function i3k_sbean.mroom_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.mroom_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 踢出房间成员请求协议
i3k_sbean.mroom_kick_req = i3k_class("mroom_kick_req")
function i3k_sbean.mroom_kick_req:ctor()
	self._pname_ = "mroom_kick_req"
	--self.roleId:		int32	
end

function i3k_sbean.mroom_kick_req:clone()
	return clone(self)
end

function i3k_sbean.mroom_kick_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.mroom_kick_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 副本房间更换房主请求协议
i3k_sbean.mroom_change_leader_req = i3k_class("mroom_change_leader_req")
function i3k_sbean.mroom_change_leader_req:ctor()
	self._pname_ = "mroom_change_leader_req"
	--self.roleId:		int32	
end

function i3k_sbean.mroom_change_leader_req:clone()
	return clone(self)
end

function i3k_sbean.mroom_change_leader_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.mroom_change_leader_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 房间信息查询
i3k_sbean.mroom_self_req = i3k_class("mroom_self_req")
function i3k_sbean.mroom_self_req:ctor()
	self._pname_ = "mroom_self_req"
end

function i3k_sbean.mroom_self_req:decode(is)
	is:popString()
end

function i3k_sbean.mroom_self_req:encode(os)
	os:pushString(self._pname_)
end


-- 地图附近的人
i3k_sbean.mroom_mapr_req = i3k_class("mroom_mapr_req")
function i3k_sbean.mroom_mapr_req:ctor()
	self._pname_ = "mroom_mapr_req"
end

function i3k_sbean.mroom_mapr_req:decode(is)
	is:popString()
end

function i3k_sbean.mroom_mapr_req:encode(os)
	os:pushString(self._pname_)
end


-- 房间列表查询响应协议
i3k_sbean.mroom_query_req = i3k_class("mroom_query_req")
function i3k_sbean.mroom_query_req:ctor()
	self._pname_ = "mroom_query_req"
	--self.mapId:		int32	
end

function i3k_sbean.mroom_query_req:clone()
	return clone(self)
end

function i3k_sbean.mroom_query_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.mroom_query_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 打开帮派界面同步帮派信息请求协议
i3k_sbean.sect_sync_req = i3k_class("sect_sync_req")
function i3k_sbean.sect_sync_req:ctor()
	self._pname_ = "sect_sync_req"
end

function i3k_sbean.sect_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 创建帮派请求协议
i3k_sbean.sect_create_req = i3k_class("sect_create_req")
function i3k_sbean.sect_create_req:ctor()
	self._pname_ = "sect_create_req"
	--self.name:		string	
	--self.icon:		int16	
	--self.useStone:		int32	
end

function i3k_sbean.sect_create_req:clone()
	return clone(self)
end

function i3k_sbean.sect_create_req:decode(is)
	is:popString()
	self.name = is:popString()
	self.icon = is:popNumber()
	self.useStone = is:popNumber()
end

function i3k_sbean.sect_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.name)
	os:pushNumber(self.icon)
	os:pushNumber(self.useStone)
end


-- 批量查询帮派是否被申请协议
i3k_sbean.sect_queryapplied_req = i3k_class("sect_queryapplied_req")
function i3k_sbean.sect_queryapplied_req:ctor()
	self._pname_ = "sect_queryapplied_req"
	--self.sects:		vector[int32]	
end

function i3k_sbean.sect_queryapplied_req:clone()
	return clone(self)
end

function i3k_sbean.sect_queryapplied_req:decode(is)
	is:popString()
	self.sects = is:popNumberList()
end

function i3k_sbean.sect_queryapplied_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.sects)
end


-- 刷新帮派列表请求协议
i3k_sbean.sect_list_req = i3k_class("sect_list_req")
function i3k_sbean.sect_list_req:ctor()
	self._pname_ = "sect_list_req"
end

function i3k_sbean.sect_list_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_list_req:encode(os)
	os:pushString(self._pname_)
end


-- 批量查询帮派信息请求协议
i3k_sbean.sect_query_req = i3k_class("sect_query_req")
function i3k_sbean.sect_query_req:ctor()
	self._pname_ = "sect_query_req"
	--self.sects:		vector[int32]	
end

function i3k_sbean.sect_query_req:clone()
	return clone(self)
end

function i3k_sbean.sect_query_req:decode(is)
	is:popString()
	self.sects = is:popNumberList()
end

function i3k_sbean.sect_query_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.sects)
end


-- 搜索帮派信息请求协议
i3k_sbean.sect_searchbyid_req = i3k_class("sect_searchbyid_req")
function i3k_sbean.sect_searchbyid_req:ctor()
	self._pname_ = "sect_searchbyid_req"
	--self.sectId:		int32	
end

function i3k_sbean.sect_searchbyid_req:clone()
	return clone(self)
end

function i3k_sbean.sect_searchbyid_req:decode(is)
	is:popString()
	self.sectId = is:popNumber()
end

function i3k_sbean.sect_searchbyid_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectId)
end


-- 搜索帮派信息请求协议
i3k_sbean.sect_searchbyname_req = i3k_class("sect_searchbyname_req")
function i3k_sbean.sect_searchbyname_req:ctor()
	self._pname_ = "sect_searchbyname_req"
	--self.sectName:		string	
end

function i3k_sbean.sect_searchbyname_req:clone()
	return clone(self)
end

function i3k_sbean.sect_searchbyname_req:decode(is)
	is:popString()
	self.sectName = is:popString()
end

function i3k_sbean.sect_searchbyname_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.sectName)
end


-- 申请加入帮派协议
i3k_sbean.sect_apply_req = i3k_class("sect_apply_req")
function i3k_sbean.sect_apply_req:ctor()
	self._pname_ = "sect_apply_req"
	--self.sectId:		int32	
end

function i3k_sbean.sect_apply_req:clone()
	return clone(self)
end

function i3k_sbean.sect_apply_req:decode(is)
	is:popString()
	self.sectId = is:popNumber()
end

function i3k_sbean.sect_apply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectId)
end


-- 快速申请加入帮派请求协议
i3k_sbean.sect_qapply_req = i3k_class("sect_qapply_req")
function i3k_sbean.sect_qapply_req:ctor()
	self._pname_ = "sect_qapply_req"
end

function i3k_sbean.sect_qapply_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_qapply_req:encode(os)
	os:pushString(self._pname_)
end


-- 查询帮派成员请求协议
i3k_sbean.sect_members_req = i3k_class("sect_members_req")
function i3k_sbean.sect_members_req:ctor()
	self._pname_ = "sect_members_req"
end

function i3k_sbean.sect_members_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_members_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派申请列表协议
i3k_sbean.sect_applications_req = i3k_class("sect_applications_req")
function i3k_sbean.sect_applications_req:ctor()
	self._pname_ = "sect_applications_req"
end

function i3k_sbean.sect_applications_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_applications_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派历史事件请求协议
i3k_sbean.sect_history_req = i3k_class("sect_history_req")
function i3k_sbean.sect_history_req:ctor()
	self._pname_ = "sect_history_req"
end

function i3k_sbean.sect_history_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_history_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派管理同意或拒绝申请入帮请求协议  accept 1:同意， 2:拒绝
i3k_sbean.sect_appliedby_req = i3k_class("sect_appliedby_req")
function i3k_sbean.sect_appliedby_req:ctor()
	self._pname_ = "sect_appliedby_req"
	--self.roleId:		int32	
	--self.accept:		int32	
end

function i3k_sbean.sect_appliedby_req:clone()
	return clone(self)
end

function i3k_sbean.sect_appliedby_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.accept = is:popNumber()
end

function i3k_sbean.sect_appliedby_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.accept)
end


-- 帮派管理同意或拒绝全部申请入帮请求协议  accept 1:同意， 2:拒绝
i3k_sbean.sect_appliedbyall_req = i3k_class("sect_appliedbyall_req")
function i3k_sbean.sect_appliedbyall_req:ctor()
	self._pname_ = "sect_appliedbyall_req"
	--self.accept:		int32	
end

function i3k_sbean.sect_appliedbyall_req:clone()
	return clone(self)
end

function i3k_sbean.sect_appliedbyall_req:decode(is)
	is:popString()
	self.accept = is:popNumber()
end

function i3k_sbean.sect_appliedbyall_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.accept)
end


-- 帮派管理任命请求协议,position为 1为帮主，2位副帮主，3为长老, 4成员
i3k_sbean.sect_appoint_req = i3k_class("sect_appoint_req")
function i3k_sbean.sect_appoint_req:ctor()
	self._pname_ = "sect_appoint_req"
	--self.roleId:		int32	
	--self.position:		int32	
end

function i3k_sbean.sect_appoint_req:clone()
	return clone(self)
end

function i3k_sbean.sect_appoint_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.position = is:popNumber()
end

function i3k_sbean.sect_appoint_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.position)
end


-- 帮派管理踢出协议
i3k_sbean.sect_kick_req = i3k_class("sect_kick_req")
function i3k_sbean.sect_kick_req:ctor()
	self._pname_ = "sect_kick_req"
	--self.roleId:		int32	
end

function i3k_sbean.sect_kick_req:clone()
	return clone(self)
end

function i3k_sbean.sect_kick_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.sect_kick_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 离开帮派协议
i3k_sbean.sect_leave_req = i3k_class("sect_leave_req")
function i3k_sbean.sect_leave_req:ctor()
	self._pname_ = "sect_leave_req"
end

function i3k_sbean.sect_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 解散帮派协议
i3k_sbean.sect_disband_req = i3k_class("sect_disband_req")
function i3k_sbean.sect_disband_req:ctor()
	self._pname_ = "sect_disband_req"
end

function i3k_sbean.sect_disband_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_disband_req:encode(os)
	os:pushString(self._pname_)
end


-- 修改帮派宗旨协议
i3k_sbean.sect_changecreed_req = i3k_class("sect_changecreed_req")
function i3k_sbean.sect_changecreed_req:ctor()
	self._pname_ = "sect_changecreed_req"
	--self.creed:		string	
end

function i3k_sbean.sect_changecreed_req:clone()
	return clone(self)
end

function i3k_sbean.sect_changecreed_req:decode(is)
	is:popString()
	self.creed = is:popString()
end

function i3k_sbean.sect_changecreed_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.creed)
end


-- 修改帮派名字协议
i3k_sbean.sect_changename_req = i3k_class("sect_changename_req")
function i3k_sbean.sect_changename_req:ctor()
	self._pname_ = "sect_changename_req"
	--self.name:		string	
	--self.useItem:		int32	
end

function i3k_sbean.sect_changename_req:clone()
	return clone(self)
end

function i3k_sbean.sect_changename_req:decode(is)
	is:popString()
	self.name = is:popString()
	self.useItem = is:popNumber()
end

function i3k_sbean.sect_changename_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.name)
	os:pushNumber(self.useItem)
end


-- 修改帮派图标协议
i3k_sbean.sect_changeicon_req = i3k_class("sect_changeicon_req")
function i3k_sbean.sect_changeicon_req:ctor()
	self._pname_ = "sect_changeicon_req"
	--self.icon:		int16	
	--self.frame:		int16	
end

function i3k_sbean.sect_changeicon_req:clone()
	return clone(self)
end

function i3k_sbean.sect_changeicon_req:decode(is)
	is:popString()
	self.icon = is:popNumber()
	self.frame = is:popNumber()
end

function i3k_sbean.sect_changeicon_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.icon)
	os:pushNumber(self.frame)
end


-- 修改帮派申请加入等级需求协议
i3k_sbean.sect_joinlvl_req = i3k_class("sect_joinlvl_req")
function i3k_sbean.sect_joinlvl_req:ctor()
	self._pname_ = "sect_joinlvl_req"
	--self.level:		int32	
end

function i3k_sbean.sect_joinlvl_req:clone()
	return clone(self)
end

function i3k_sbean.sect_joinlvl_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.sect_joinlvl_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 帮派发送邮件协议
i3k_sbean.sect_sendemail_req = i3k_class("sect_sendemail_req")
function i3k_sbean.sect_sendemail_req:ctor()
	self._pname_ = "sect_sendemail_req"
	--self.content:		string	
end

function i3k_sbean.sect_sendemail_req:clone()
	return clone(self)
end

function i3k_sbean.sect_sendemail_req:decode(is)
	is:popString()
	self.content = is:popString()
end

function i3k_sbean.sect_sendemail_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.content)
end


-- 帮派升级协议
i3k_sbean.sect_upgrade_req = i3k_class("sect_upgrade_req")
function i3k_sbean.sect_upgrade_req:ctor()
	self._pname_ = "sect_upgrade_req"
end

function i3k_sbean.sect_upgrade_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_upgrade_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派加速升级冷却协议
i3k_sbean.sect_accelerate_req = i3k_class("sect_accelerate_req")
function i3k_sbean.sect_accelerate_req:ctor()
	self._pname_ = "sect_accelerate_req"
	--self.accTime:		int32	
end

function i3k_sbean.sect_accelerate_req:clone()
	return clone(self)
end

function i3k_sbean.sect_accelerate_req:decode(is)
	is:popString()
	self.accTime = is:popNumber()
end

function i3k_sbean.sect_accelerate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.accTime)
end


-- 帮派技能查询协议
i3k_sbean.sect_aurasync_req = i3k_class("sect_aurasync_req")
function i3k_sbean.sect_aurasync_req:ctor()
	self._pname_ = "sect_aurasync_req"
end

function i3k_sbean.sect_aurasync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_aurasync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派光环捐献道具增加经验点协议
i3k_sbean.sect_auraexpadd_req = i3k_class("sect_auraexpadd_req")
function i3k_sbean.sect_auraexpadd_req:ctor()
	self._pname_ = "sect_auraexpadd_req"
	--self.auraId:		int32	
	--self.itemId:		int32	
	--self.itemCount:		int32	
end

function i3k_sbean.sect_auraexpadd_req:clone()
	return clone(self)
end

function i3k_sbean.sect_auraexpadd_req:decode(is)
	is:popString()
	self.auraId = is:popNumber()
	self.itemId = is:popNumber()
	self.itemCount = is:popNumber()
end

function i3k_sbean.sect_auraexpadd_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.auraId)
	os:pushNumber(self.itemId)
	os:pushNumber(self.itemCount)
end


-- 帮派膜拜协议
i3k_sbean.sect_worship_req = i3k_class("sect_worship_req")
function i3k_sbean.sect_worship_req:ctor()
	self._pname_ = "sect_worship_req"
	--self.roleId:		int32	
	--self.type:		int32	
end

function i3k_sbean.sect_worship_req:clone()
	return clone(self)
end

function i3k_sbean.sect_worship_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.sect_worship_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.type)
end


-- 帮派同步膜拜奖励协议
i3k_sbean.sect_syncworshipreward_req = i3k_class("sect_syncworshipreward_req")
function i3k_sbean.sect_syncworshipreward_req:ctor()
	self._pname_ = "sect_syncworshipreward_req"
end

function i3k_sbean.sect_syncworshipreward_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_syncworshipreward_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派领取膜拜奖励协议
i3k_sbean.sect_takeworshipreward_req = i3k_class("sect_takeworshipreward_req")
function i3k_sbean.sect_takeworshipreward_req:ctor()
	self._pname_ = "sect_takeworshipreward_req"
end

function i3k_sbean.sect_takeworshipreward_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_takeworshipreward_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派开启宴席协议
i3k_sbean.sect_openbanquet_req = i3k_class("sect_openbanquet_req")
function i3k_sbean.sect_openbanquet_req:ctor()
	self._pname_ = "sect_openbanquet_req"
	--self.type:		int32	
end

function i3k_sbean.sect_openbanquet_req:clone()
	return clone(self)
end

function i3k_sbean.sect_openbanquet_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.sect_openbanquet_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 帮派宴席列表协议
i3k_sbean.sect_listbanquet_req = i3k_class("sect_listbanquet_req")
function i3k_sbean.sect_listbanquet_req:ctor()
	self._pname_ = "sect_listbanquet_req"
end

function i3k_sbean.sect_listbanquet_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_listbanquet_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派帮派宴席协议
i3k_sbean.sect_joinbanquet_req = i3k_class("sect_joinbanquet_req")
function i3k_sbean.sect_joinbanquet_req:ctor()
	self._pname_ = "sect_joinbanquet_req"
	--self.bid:		int32	
end

function i3k_sbean.sect_joinbanquet_req:clone()
	return clone(self)
end

function i3k_sbean.sect_joinbanquet_req:decode(is)
	is:popString()
	self.bid = is:popNumber()
end

function i3k_sbean.sect_joinbanquet_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bid)
end


-- 帮派商城同步协议
i3k_sbean.sect_shopsync_req = i3k_class("sect_shopsync_req")
function i3k_sbean.sect_shopsync_req:ctor()
	self._pname_ = "sect_shopsync_req"
end

function i3k_sbean.sect_shopsync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_shopsync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派商城刷新协议
i3k_sbean.sect_shoprefresh_req = i3k_class("sect_shoprefresh_req")
function i3k_sbean.sect_shoprefresh_req:ctor()
	self._pname_ = "sect_shoprefresh_req"
	--self.times:		int32	
	--self.isSecondType:		int32	
end

function i3k_sbean.sect_shoprefresh_req:clone()
	return clone(self)
end

function i3k_sbean.sect_shoprefresh_req:decode(is)
	is:popString()
	self.times = is:popNumber()
	self.isSecondType = is:popNumber()
end

function i3k_sbean.sect_shoprefresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
	os:pushNumber(self.isSecondType)
end


-- 帮派商城买商品协议
i3k_sbean.sect_shopbuy_req = i3k_class("sect_shopbuy_req")
function i3k_sbean.sect_shopbuy_req:ctor()
	self._pname_ = "sect_shopbuy_req"
	--self.seq:		int32	
	--self.discount:		int32	
end

function i3k_sbean.sect_shopbuy_req:clone()
	return clone(self)
end

function i3k_sbean.sect_shopbuy_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
	self.discount = is:popNumber()
end

function i3k_sbean.sect_shopbuy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
	os:pushNumber(self.discount)
end


-- 进入帮派副本挑战协议
i3k_sbean.sectmap_start_req = i3k_class("sectmap_start_req")
function i3k_sbean.sectmap_start_req:ctor()
	self._pname_ = "sectmap_start_req"
	--self.mapId:		int32	
end

function i3k_sbean.sectmap_start_req:clone()
	return clone(self)
end

function i3k_sbean.sectmap_start_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.sectmap_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 帮派副本完成过的状态协议
i3k_sbean.sectmap_status_req = i3k_class("sectmap_status_req")
function i3k_sbean.sectmap_status_req:ctor()
	self._pname_ = "sectmap_status_req"
end

function i3k_sbean.sectmap_status_req:decode(is)
	is:popString()
end

function i3k_sbean.sectmap_status_req:encode(os)
	os:pushString(self._pname_)
end


-- 查询帮派副本进度协议
i3k_sbean.sectmap_query_req = i3k_class("sectmap_query_req")
function i3k_sbean.sectmap_query_req:ctor()
	self._pname_ = "sectmap_query_req"
	--self.mapId:		int32	
end

function i3k_sbean.sectmap_query_req:clone()
	return clone(self)
end

function i3k_sbean.sectmap_query_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.sectmap_query_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 帮派开启或重置副本协议
i3k_sbean.sectmap_open_req = i3k_class("sectmap_open_req")
function i3k_sbean.sectmap_open_req:ctor()
	self._pname_ = "sectmap_open_req"
	--self.mapId:		int32	
end

function i3k_sbean.sectmap_open_req:clone()
	return clone(self)
end

function i3k_sbean.sectmap_open_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.sectmap_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 所有帮派副本奖励已分配日志记录
i3k_sbean.sectmap_rewards_req = i3k_class("sectmap_rewards_req")
function i3k_sbean.sectmap_rewards_req:ctor()
	self._pname_ = "sectmap_rewards_req"
end

function i3k_sbean.sectmap_rewards_req:decode(is)
	is:popString()
end

function i3k_sbean.sectmap_rewards_req:encode(os)
	os:pushString(self._pname_)
end


-- 当前帮派副本申请奖励协议
i3k_sbean.sectmap_apply_req = i3k_class("sectmap_apply_req")
function i3k_sbean.sectmap_apply_req:ctor()
	self._pname_ = "sectmap_apply_req"
	--self.mapId:		int32	
	--self.rewardId:		int32	
end

function i3k_sbean.sectmap_apply_req:clone()
	return clone(self)
end

function i3k_sbean.sectmap_apply_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.rewardId = is:popNumber()
end

function i3k_sbean.sectmap_apply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.rewardId)
end


-- 当前帮派副本自取奖励
i3k_sbean.sectmap_reward_self_take_req = i3k_class("sectmap_reward_self_take_req")
function i3k_sbean.sectmap_reward_self_take_req:ctor()
	self._pname_ = "sectmap_reward_self_take_req"
	--self.mapId:		int32	
	--self.rewardId:		int32	
end

function i3k_sbean.sectmap_reward_self_take_req:clone()
	return clone(self)
end

function i3k_sbean.sectmap_reward_self_take_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.rewardId = is:popNumber()
end

function i3k_sbean.sectmap_reward_self_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.rewardId)
end


-- 当前帮派副本奖励分配信息
i3k_sbean.sectmap_allocation_req = i3k_class("sectmap_allocation_req")
function i3k_sbean.sectmap_allocation_req:ctor()
	self._pname_ = "sectmap_allocation_req"
	--self.mapId:		int32	
end

function i3k_sbean.sectmap_allocation_req:clone()
	return clone(self)
end

function i3k_sbean.sectmap_allocation_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.sectmap_allocation_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 当前帮派副本伤害输出信息
i3k_sbean.sectmap_damage_req = i3k_class("sectmap_damage_req")
function i3k_sbean.sectmap_damage_req:ctor()
	self._pname_ = "sectmap_damage_req"
	--self.mapId:		int32	
end

function i3k_sbean.sectmap_damage_req:clone()
	return clone(self)
end

function i3k_sbean.sectmap_damage_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.sectmap_damage_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 当前帮派副本伤害输出信息异步
i3k_sbean.sectmap_damage_query = i3k_class("sectmap_damage_query")
function i3k_sbean.sectmap_damage_query:ctor()
	self._pname_ = "sectmap_damage_query"
	--self.mapId:		int32	
end

function i3k_sbean.sectmap_damage_query:clone()
	return clone(self)
end

function i3k_sbean.sectmap_damage_query:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.sectmap_damage_query:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 帮派副本同步进度协议
i3k_sbean.sectmap_sync_req = i3k_class("sectmap_sync_req")
function i3k_sbean.sectmap_sync_req:ctor()
	self._pname_ = "sectmap_sync_req"
	--self.mapId:		int32	
end

function i3k_sbean.sectmap_sync_req:clone()
	return clone(self)
end

function i3k_sbean.sectmap_sync_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.sectmap_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 帮派个人任务详细信息
i3k_sbean.sect_task_sync_req = i3k_class("sect_task_sync_req")
function i3k_sbean.sect_task_sync_req:ctor()
	self._pname_ = "sect_task_sync_req"
end

function i3k_sbean.sect_task_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_task_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派共享任务详细信息
i3k_sbean.sect_share_task_sync_req = i3k_class("sect_share_task_sync_req")
function i3k_sbean.sect_share_task_sync_req:ctor()
	self._pname_ = "sect_share_task_sync_req"
end

function i3k_sbean.sect_share_task_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_share_task_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派完成的个人任务详细信息
i3k_sbean.sect_finish_task_sync_req = i3k_class("sect_finish_task_sync_req")
function i3k_sbean.sect_finish_task_sync_req:ctor()
	self._pname_ = "sect_finish_task_sync_req"
end

function i3k_sbean.sect_finish_task_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_finish_task_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派任务接取
i3k_sbean.sect_task_receive_req = i3k_class("sect_task_receive_req")
function i3k_sbean.sect_task_receive_req:ctor()
	self._pname_ = "sect_task_receive_req"
	--self.ownerId:		int32	
	--self.sid:		int32	
end

function i3k_sbean.sect_task_receive_req:clone()
	return clone(self)
end

function i3k_sbean.sect_task_receive_req:decode(is)
	is:popString()
	self.ownerId = is:popNumber()
	self.sid = is:popNumber()
end

function i3k_sbean.sect_task_receive_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ownerId)
	os:pushNumber(self.sid)
end


-- 帮派任务取消
i3k_sbean.sect_task_cancel_req = i3k_class("sect_task_cancel_req")
function i3k_sbean.sect_task_cancel_req:ctor()
	self._pname_ = "sect_task_cancel_req"
	--self.ownerId:		int32	
	--self.sid:		int32	
end

function i3k_sbean.sect_task_cancel_req:clone()
	return clone(self)
end

function i3k_sbean.sect_task_cancel_req:decode(is)
	is:popString()
	self.ownerId = is:popNumber()
	self.sid = is:popNumber()
end

function i3k_sbean.sect_task_cancel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ownerId)
	os:pushNumber(self.sid)
end


-- 帮派任务完成
i3k_sbean.sect_task_finish_req = i3k_class("sect_task_finish_req")
function i3k_sbean.sect_task_finish_req:ctor()
	self._pname_ = "sect_task_finish_req"
	--self.ownerId:		int32	
	--self.sid:		int32	
end

function i3k_sbean.sect_task_finish_req:clone()
	return clone(self)
end

function i3k_sbean.sect_task_finish_req:decode(is)
	is:popString()
	self.ownerId = is:popNumber()
	self.sid = is:popNumber()
end

function i3k_sbean.sect_task_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ownerId)
	os:pushNumber(self.sid)
end


-- 帮派任务共享
i3k_sbean.sect_task_issuance_req = i3k_class("sect_task_issuance_req")
function i3k_sbean.sect_task_issuance_req:ctor()
	self._pname_ = "sect_task_issuance_req"
	--self.sid:		int32	
end

function i3k_sbean.sect_task_issuance_req:clone()
	return clone(self)
end

function i3k_sbean.sect_task_issuance_req:decode(is)
	is:popString()
	self.sid = is:popNumber()
end

function i3k_sbean.sect_task_issuance_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sid)
end


-- 帮派任务重置
i3k_sbean.sect_task_reset_req = i3k_class("sect_task_reset_req")
function i3k_sbean.sect_task_reset_req:ctor()
	self._pname_ = "sect_task_reset_req"
end

function i3k_sbean.sect_task_reset_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_task_reset_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派任务完成奖励
i3k_sbean.sect_task_done_rewards_req = i3k_class("sect_task_done_rewards_req")
function i3k_sbean.sect_task_done_rewards_req:ctor()
	self._pname_ = "sect_task_done_rewards_req"
end

function i3k_sbean.sect_task_done_rewards_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_task_done_rewards_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派快速完成任务
i3k_sbean.sect_quick_finish_task_req = i3k_class("sect_quick_finish_task_req")
function i3k_sbean.sect_quick_finish_task_req:ctor()
	self._pname_ = "sect_quick_finish_task_req"
	--self.ownerId:		int32	
	--self.sid:		int32	
end

function i3k_sbean.sect_quick_finish_task_req:clone()
	return clone(self)
end

function i3k_sbean.sect_quick_finish_task_req:decode(is)
	is:popString()
	self.ownerId = is:popNumber()
	self.sid = is:popNumber()
end

function i3k_sbean.sect_quick_finish_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ownerId)
	os:pushNumber(self.sid)
end


-- 荣耀商路详细信息
i3k_sbean.sect_trade_route_sync_req = i3k_class("sect_trade_route_sync_req")
function i3k_sbean.sect_trade_route_sync_req:ctor()
	self._pname_ = "sect_trade_route_sync_req"
end

function i3k_sbean.sect_trade_route_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_trade_route_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 荣耀商路任务接取
i3k_sbean.sect_trade_route_receive_req = i3k_class("sect_trade_route_receive_req")
function i3k_sbean.sect_trade_route_receive_req:ctor()
	self._pname_ = "sect_trade_route_receive_req"
	--self.taskID:		int32	
end

function i3k_sbean.sect_trade_route_receive_req:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_receive_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.sect_trade_route_receive_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 荣耀商路任务取消
i3k_sbean.sect_trade_route_cancel_req = i3k_class("sect_trade_route_cancel_req")
function i3k_sbean.sect_trade_route_cancel_req:ctor()
	self._pname_ = "sect_trade_route_cancel_req"
	--self.taskID:		int32	
end

function i3k_sbean.sect_trade_route_cancel_req:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_cancel_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.sect_trade_route_cancel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 荣耀商路任务完成
i3k_sbean.sect_trade_route_finish_req = i3k_class("sect_trade_route_finish_req")
function i3k_sbean.sect_trade_route_finish_req:ctor()
	self._pname_ = "sect_trade_route_finish_req"
	--self.taskID:		int32	
end

function i3k_sbean.sect_trade_route_finish_req:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_finish_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.sect_trade_route_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 荣耀商路买星
i3k_sbean.sect_trade_route_buy_star_req = i3k_class("sect_trade_route_buy_star_req")
function i3k_sbean.sect_trade_route_buy_star_req:ctor()
	self._pname_ = "sect_trade_route_buy_star_req"
	--self.buyCnt:		int32	
end

function i3k_sbean.sect_trade_route_buy_star_req:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_buy_star_req:decode(is)
	is:popString()
	self.buyCnt = is:popNumber()
end

function i3k_sbean.sect_trade_route_buy_star_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.buyCnt)
end


-- 荣耀商路快速完成任务
i3k_sbean.sect_trade_route_one_key_finish_req = i3k_class("sect_trade_route_one_key_finish_req")
function i3k_sbean.sect_trade_route_one_key_finish_req:ctor()
	self._pname_ = "sect_trade_route_one_key_finish_req"
	--self.taskID:		int32	
end

function i3k_sbean.sect_trade_route_one_key_finish_req:clone()
	return clone(self)
end

function i3k_sbean.sect_trade_route_one_key_finish_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.sect_trade_route_one_key_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 同步帮派助战信息
i3k_sbean.sect_assist_sync_req = i3k_class("sect_assist_sync_req")
function i3k_sbean.sect_assist_sync_req:ctor()
	self._pname_ = "sect_assist_sync_req"
end

function i3k_sbean.sect_assist_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_assist_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 登记帮派助战
i3k_sbean.sect_assist_join_req = i3k_class("sect_assist_join_req")
function i3k_sbean.sect_assist_join_req:ctor()
	self._pname_ = "sect_assist_join_req"
end

function i3k_sbean.sect_assist_join_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_assist_join_req:encode(os)
	os:pushString(self._pname_)
end


-- 解除帮派助战登记
i3k_sbean.sect_assist_quit_req = i3k_class("sect_assist_quit_req")
function i3k_sbean.sect_assist_quit_req:ctor()
	self._pname_ = "sect_assist_quit_req"
end

function i3k_sbean.sect_assist_quit_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_assist_quit_req:encode(os)
	os:pushString(self._pname_)
end


-- 邀请帮派助战
i3k_sbean.sect_assist_apply_req = i3k_class("sect_assist_apply_req")
function i3k_sbean.sect_assist_apply_req:ctor()
	self._pname_ = "sect_assist_apply_req"
	--self.roleID:		int32	
end

function i3k_sbean.sect_assist_apply_req:clone()
	return clone(self)
end

function i3k_sbean.sect_assist_apply_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.sect_assist_apply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 移除帮派助战
i3k_sbean.sect_assist_kick_req = i3k_class("sect_assist_kick_req")
function i3k_sbean.sect_assist_kick_req:ctor()
	self._pname_ = "sect_assist_kick_req"
	--self.roleID:		int32	
end

function i3k_sbean.sect_assist_kick_req:clone()
	return clone(self)
end

function i3k_sbean.sect_assist_kick_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.sect_assist_kick_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 自创武功信息
i3k_sbean.diyskill_sync_req = i3k_class("diyskill_sync_req")
function i3k_sbean.diyskill_sync_req:ctor()
	self._pname_ = "diyskill_sync_req"
end

function i3k_sbean.diyskill_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.diyskill_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 自创武功
i3k_sbean.diyskill_create_req = i3k_class("diyskill_create_req")
function i3k_sbean.diyskill_create_req:ctor()
	self._pname_ = "diyskill_create_req"
	--self.params:		map[int32,int32]	
	--self.trends:		set[int32]	
end

function i3k_sbean.diyskill_create_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_create_req:decode(is)
	is:popString()
	self.params = is:popNumberNumberMap()
	self.trends = is:popNumberSet()
end

function i3k_sbean.diyskill_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.params)
	os:pushNumberSet(self.trends)
end


-- 保存创建的自创武功
i3k_sbean.diyskill_save_req = i3k_class("diyskill_save_req")
function i3k_sbean.diyskill_save_req:ctor()
	self._pname_ = "diyskill_save_req"
	--self.iconId:		int32	
	--self.name:		string	
end

function i3k_sbean.diyskill_save_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_save_req:decode(is)
	is:popString()
	self.iconId = is:popNumber()
	self.name = is:popString()
end

function i3k_sbean.diyskill_save_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.iconId)
	os:pushString(self.name)
end


-- 遗忘
i3k_sbean.diyskill_discard_req = i3k_class("diyskill_discard_req")
function i3k_sbean.diyskill_discard_req:ctor()
	self._pname_ = "diyskill_discard_req"
	--self.skillPos:		int32	
end

function i3k_sbean.diyskill_discard_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_discard_req:decode(is)
	is:popString()
	self.skillPos = is:popNumber()
end

function i3k_sbean.diyskill_discard_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillPos)
end


-- 装备自创技能
i3k_sbean.diyskill_selectuse_req = i3k_class("diyskill_selectuse_req")
function i3k_sbean.diyskill_selectuse_req:ctor()
	self._pname_ = "diyskill_selectuse_req"
	--self.skillPos:		int32	
end

function i3k_sbean.diyskill_selectuse_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_selectuse_req:decode(is)
	is:popString()
	self.skillPos = is:popNumber()
end

function i3k_sbean.diyskill_selectuse_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillPos)
end


-- 卸下自创技能
i3k_sbean.diyskill_canceluse_req = i3k_class("diyskill_canceluse_req")
function i3k_sbean.diyskill_canceluse_req:ctor()
	self._pname_ = "diyskill_canceluse_req"
	--self.skillPos:		int32	
end

function i3k_sbean.diyskill_canceluse_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_canceluse_req:decode(is)
	is:popString()
	self.skillPos = is:popNumber()
end

function i3k_sbean.diyskill_canceluse_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillPos)
end


-- 解锁槽
i3k_sbean.diyskill_unlock_req = i3k_class("diyskill_unlock_req")
function i3k_sbean.diyskill_unlock_req:ctor()
	self._pname_ = "diyskill_unlock_req"
end

function i3k_sbean.diyskill_unlock_req:decode(is)
	is:popString()
end

function i3k_sbean.diyskill_unlock_req:encode(os)
	os:pushString(self._pname_)
end


-- 购买学习次数
i3k_sbean.diyskill_buytimes_req = i3k_class("diyskill_buytimes_req")
function i3k_sbean.diyskill_buytimes_req:ctor()
	self._pname_ = "diyskill_buytimes_req"
	--self.times:		int32	
end

function i3k_sbean.diyskill_buytimes_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_buytimes_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.diyskill_buytimes_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 自创武功分享
i3k_sbean.diyskill_share_req = i3k_class("diyskill_share_req")
function i3k_sbean.diyskill_share_req:ctor()
	self._pname_ = "diyskill_share_req"
	--self.skillPos:		int32	
end

function i3k_sbean.diyskill_share_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_share_req:decode(is)
	is:popString()
	self.skillPos = is:popNumber()
end

function i3k_sbean.diyskill_share_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillPos)
end


-- 自创武功取消分享
i3k_sbean.diyskill_cancelshare_req = i3k_class("diyskill_cancelshare_req")
function i3k_sbean.diyskill_cancelshare_req:ctor()
	self._pname_ = "diyskill_cancelshare_req"
	--self.skillPos:		int32	
end

function i3k_sbean.diyskill_cancelshare_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_cancelshare_req:decode(is)
	is:popString()
	self.skillPos = is:popNumber()
end

function i3k_sbean.diyskill_cancelshare_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillPos)
end


-- 自创武功借用
i3k_sbean.diyskill_borrow_req = i3k_class("diyskill_borrow_req")
function i3k_sbean.diyskill_borrow_req:ctor()
	self._pname_ = "diyskill_borrow_req"
	--self.roleId:		int32	
	--self.skillId:		int32	
end

function i3k_sbean.diyskill_borrow_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_borrow_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.skillId = is:popNumber()
end

function i3k_sbean.diyskill_borrow_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.skillId)
end


-- 自创武功炫耀
i3k_sbean.diyskill_flaunt_req = i3k_class("diyskill_flaunt_req")
function i3k_sbean.diyskill_flaunt_req:ctor()
	self._pname_ = "diyskill_flaunt_req"
	--self.channel:		int32	
	--self.skillPos:		int32	
	--self.icons:		vector[int32]	
end

function i3k_sbean.diyskill_flaunt_req:clone()
	return clone(self)
end

function i3k_sbean.diyskill_flaunt_req:decode(is)
	is:popString()
	self.channel = is:popNumber()
	self.skillPos = is:popNumber()
	self.icons = is:popNumberList()
end

function i3k_sbean.diyskill_flaunt_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.channel)
	os:pushNumber(self.skillPos)
	os:pushNumberList(self.icons)
end


-- 自创武功领取共享奖励
i3k_sbean.diyskill_shareaward_req = i3k_class("diyskill_shareaward_req")
function i3k_sbean.diyskill_shareaward_req:ctor()
	self._pname_ = "diyskill_shareaward_req"
end

function i3k_sbean.diyskill_shareaward_req:decode(is)
	is:popString()
end

function i3k_sbean.diyskill_shareaward_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步随从是否自动使用血池
i3k_sbean.sync_pet_can_use_pool = i3k_class("sync_pet_can_use_pool")
function i3k_sbean.sync_pet_can_use_pool:ctor()
	self._pname_ = "sync_pet_can_use_pool"
	--self.canUsePool:		int8	
end

function i3k_sbean.sync_pet_can_use_pool:clone()
	return clone(self)
end

function i3k_sbean.sync_pet_can_use_pool:decode(is)
	is:popString()
	self.canUsePool = is:popNumber()
end

function i3k_sbean.sync_pet_can_use_pool:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.canUsePool)
end


-- 同步是否自动卖出蓝绿装备
i3k_sbean.sync_auto_sale_equip = i3k_class("sync_auto_sale_equip")
function i3k_sbean.sync_auto_sale_equip:ctor()
	self._pname_ = "sync_auto_sale_equip"
	--self.autoSaleEquip:		int8	
end

function i3k_sbean.sync_auto_sale_equip:clone()
	return clone(self)
end

function i3k_sbean.sync_auto_sale_equip:decode(is)
	is:popString()
	self.autoSaleEquip = is:popNumber()
end

function i3k_sbean.sync_auto_sale_equip:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.autoSaleEquip)
end


-- 同步是否自动卖出蓝绿药品
i3k_sbean.sync_auto_sale_drug = i3k_class("sync_auto_sale_drug")
function i3k_sbean.sync_auto_sale_drug:ctor()
	self._pname_ = "sync_auto_sale_drug"
	--self.autoSaleDrug:		int8	
end

function i3k_sbean.sync_auto_sale_drug:clone()
	return clone(self)
end

function i3k_sbean.sync_auto_sale_drug:decode(is)
	is:popString()
	self.autoSaleDrug = is:popNumber()
end

function i3k_sbean.sync_auto_sale_drug:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.autoSaleDrug)
end


-- 同步是否推送帮派申请数量
i3k_sbean.sect_push_application_req = i3k_class("sect_push_application_req")
function i3k_sbean.sect_push_application_req:ctor()
	self._pname_ = "sect_push_application_req"
	--self.ok:		int8	
end

function i3k_sbean.sect_push_application_req:clone()
	return clone(self)
end

function i3k_sbean.sect_push_application_req:decode(is)
	is:popString()
	self.ok = is:popNumber()
end

function i3k_sbean.sect_push_application_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ok)
end


-- 套装购买
i3k_sbean.suite_buy_req = i3k_class("suite_buy_req")
function i3k_sbean.suite_buy_req:ctor()
	self._pname_ = "suite_buy_req"
	--self.suiteId:		int32	
end

function i3k_sbean.suite_buy_req:clone()
	return clone(self)
end

function i3k_sbean.suite_buy_req:decode(is)
	is:popString()
	self.suiteId = is:popNumber()
end

function i3k_sbean.suite_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.suiteId)
end


-- 买物品
i3k_sbean.store_buy_req = i3k_class("store_buy_req")
function i3k_sbean.store_buy_req:ctor()
	self._pname_ = "store_buy_req"
	--self.id:		int32	
	--self.gid:		int32	
	--self.count:		int32	
end

function i3k_sbean.store_buy_req:clone()
	return clone(self)
end

function i3k_sbean.store_buy_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.gid = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.store_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.gid)
	os:pushNumber(self.count)
end


i3k_sbean.teleport_npc_req = i3k_class("teleport_npc_req")
function i3k_sbean.teleport_npc_req:ctor()
	self._pname_ = "teleport_npc_req"
	--self.npcId:		int32	
	--self.mapId:		int32	
end

function i3k_sbean.teleport_npc_req:clone()
	return clone(self)
end

function i3k_sbean.teleport_npc_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
	self.mapId = is:popNumber()
end

function i3k_sbean.teleport_npc_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
	os:pushNumber(self.mapId)
end


i3k_sbean.teleport_monster_req = i3k_class("teleport_monster_req")
function i3k_sbean.teleport_monster_req:ctor()
	self._pname_ = "teleport_monster_req"
	--self.spawnPointId:		int32	
	--self.mapId:		int32	
end

function i3k_sbean.teleport_monster_req:clone()
	return clone(self)
end

function i3k_sbean.teleport_monster_req:decode(is)
	is:popString()
	self.spawnPointId = is:popNumber()
	self.mapId = is:popNumber()
end

function i3k_sbean.teleport_monster_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spawnPointId)
	os:pushNumber(self.mapId)
end


i3k_sbean.teleport_spawnmonster_req = i3k_class("teleport_spawnmonster_req")
function i3k_sbean.teleport_spawnmonster_req:ctor()
	self._pname_ = "teleport_spawnmonster_req"
	--self.pointID:		int32	
end

function i3k_sbean.teleport_spawnmonster_req:clone()
	return clone(self)
end

function i3k_sbean.teleport_spawnmonster_req:decode(is)
	is:popString()
	self.pointID = is:popNumber()
end

function i3k_sbean.teleport_spawnmonster_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pointID)
end


i3k_sbean.teleport_mineral_req = i3k_class("teleport_mineral_req")
function i3k_sbean.teleport_mineral_req:ctor()
	self._pname_ = "teleport_mineral_req"
	--self.mineralPointId:		int32	
	--self.mapId:		int32	
end

function i3k_sbean.teleport_mineral_req:clone()
	return clone(self)
end

function i3k_sbean.teleport_mineral_req:decode(is)
	is:popString()
	self.mineralPointId = is:popNumber()
	self.mapId = is:popNumber()
end

function i3k_sbean.teleport_mineral_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mineralPointId)
	os:pushNumber(self.mapId)
end


-- 竞技场同步信息
i3k_sbean.arena_sync_req = i3k_class("arena_sync_req")
function i3k_sbean.arena_sync_req:ctor()
	self._pname_ = "arena_sync_req"
end

function i3k_sbean.arena_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.arena_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 竞技场防守阵容
i3k_sbean.arena_setpets_req = i3k_class("arena_setpets_req")
function i3k_sbean.arena_setpets_req:ctor()
	self._pname_ = "arena_setpets_req"
	--self.pets:		vector[int32]	
end

function i3k_sbean.arena_setpets_req:clone()
	return clone(self)
end

function i3k_sbean.arena_setpets_req:decode(is)
	is:popString()
	self.pets = is:popNumberList()
end

function i3k_sbean.arena_setpets_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.pets)
end


-- 竞技场排行榜
i3k_sbean.arena_ranks_req = i3k_class("arena_ranks_req")
function i3k_sbean.arena_ranks_req:ctor()
	self._pname_ = "arena_ranks_req"
end

function i3k_sbean.arena_ranks_req:decode(is)
	is:popString()
end

function i3k_sbean.arena_ranks_req:encode(os)
	os:pushString(self._pname_)
end


-- 换一换
i3k_sbean.arena_refresh_req = i3k_class("arena_refresh_req")
function i3k_sbean.arena_refresh_req:ctor()
	self._pname_ = "arena_refresh_req"
end

function i3k_sbean.arena_refresh_req:decode(is)
	is:popString()
end

function i3k_sbean.arena_refresh_req:encode(os)
	os:pushString(self._pname_)
end


-- 获取竞技场防守阵容
i3k_sbean.arena_defencepets_req = i3k_class("arena_defencepets_req")
function i3k_sbean.arena_defencepets_req:ctor()
	self._pname_ = "arena_defencepets_req"
	--self.rid:		int32	
	--self.rank:		int32	
end

function i3k_sbean.arena_defencepets_req:clone()
	return clone(self)
end

function i3k_sbean.arena_defencepets_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.rank = is:popNumber()
end

function i3k_sbean.arena_defencepets_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.rank)
end


-- 重置
i3k_sbean.arena_resetcool_req = i3k_class("arena_resetcool_req")
function i3k_sbean.arena_resetcool_req:ctor()
	self._pname_ = "arena_resetcool_req"
end

function i3k_sbean.arena_resetcool_req:decode(is)
	is:popString()
end

function i3k_sbean.arena_resetcool_req:encode(os)
	os:pushString(self._pname_)
end


-- 购买次数
i3k_sbean.arena_buytimes_req = i3k_class("arena_buytimes_req")
function i3k_sbean.arena_buytimes_req:ctor()
	self._pname_ = "arena_buytimes_req"
	--self.times:		int32	
end

function i3k_sbean.arena_buytimes_req:clone()
	return clone(self)
end

function i3k_sbean.arena_buytimes_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.arena_buytimes_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 竞技场商城同步协议
i3k_sbean.arena_shopsync_req = i3k_class("arena_shopsync_req")
function i3k_sbean.arena_shopsync_req:ctor()
	self._pname_ = "arena_shopsync_req"
end

function i3k_sbean.arena_shopsync_req:decode(is)
	is:popString()
end

function i3k_sbean.arena_shopsync_req:encode(os)
	os:pushString(self._pname_)
end


-- 竞技场商城刷新协议
i3k_sbean.arena_shoprefresh_req = i3k_class("arena_shoprefresh_req")
function i3k_sbean.arena_shoprefresh_req:ctor()
	self._pname_ = "arena_shoprefresh_req"
	--self.times:		int32	
	--self.isSecondType:		int32	
end

function i3k_sbean.arena_shoprefresh_req:clone()
	return clone(self)
end

function i3k_sbean.arena_shoprefresh_req:decode(is)
	is:popString()
	self.times = is:popNumber()
	self.isSecondType = is:popNumber()
end

function i3k_sbean.arena_shoprefresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
	os:pushNumber(self.isSecondType)
end


-- 竞技场商城买商品协议
i3k_sbean.arena_shopbuy_req = i3k_class("arena_shopbuy_req")
function i3k_sbean.arena_shopbuy_req:ctor()
	self._pname_ = "arena_shopbuy_req"
	--self.seq:		int32	
	--self.discount:		int32	
end

function i3k_sbean.arena_shopbuy_req:clone()
	return clone(self)
end

function i3k_sbean.arena_shopbuy_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
	self.discount = is:popNumber()
end

function i3k_sbean.arena_shopbuy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
	os:pushNumber(self.discount)
end


-- 开始战斗
i3k_sbean.arena_startattack_req = i3k_class("arena_startattack_req")
function i3k_sbean.arena_startattack_req:ctor()
	self._pname_ = "arena_startattack_req"
	--self.selfRank:		int32	
	--self.selfPets:		vector[int32]	
	--self.targetRoleId:		int32	
	--self.targetRank:		int32	
end

function i3k_sbean.arena_startattack_req:clone()
	return clone(self)
end

function i3k_sbean.arena_startattack_req:decode(is)
	is:popString()
	self.selfRank = is:popNumber()
	self.selfPets = is:popNumberList()
	self.targetRoleId = is:popNumber()
	self.targetRank = is:popNumber()
end

function i3k_sbean.arena_startattack_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.selfRank)
	os:pushNumberList(self.selfPets)
	os:pushNumber(self.targetRoleId)
	os:pushNumber(self.targetRank)
end


-- 战报
i3k_sbean.arena_log_req = i3k_class("arena_log_req")
function i3k_sbean.arena_log_req:ctor()
	self._pname_ = "arena_log_req"
end

function i3k_sbean.arena_log_req:decode(is)
	is:popString()
end

function i3k_sbean.arena_log_req:encode(os)
	os:pushString(self._pname_)
end


-- 积分奖励
i3k_sbean.arena_scoresync_req = i3k_class("arena_scoresync_req")
function i3k_sbean.arena_scoresync_req:ctor()
	self._pname_ = "arena_scoresync_req"
end

function i3k_sbean.arena_scoresync_req:decode(is)
	is:popString()
end

function i3k_sbean.arena_scoresync_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取积分奖励
i3k_sbean.arena_takescore_req = i3k_class("arena_takescore_req")
function i3k_sbean.arena_takescore_req:ctor()
	self._pname_ = "arena_takescore_req"
	--self.score:		int32	
end

function i3k_sbean.arena_takescore_req:clone()
	return clone(self)
end

function i3k_sbean.arena_takescore_req:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.arena_takescore_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 防守阵容显隐
i3k_sbean.arena_hidedefence_req = i3k_class("arena_hidedefence_req")
function i3k_sbean.arena_hidedefence_req:ctor()
	self._pname_ = "arena_hidedefence_req"
	--self.hide:		int8	
end

function i3k_sbean.arena_hidedefence_req:clone()
	return clone(self)
end

function i3k_sbean.arena_hidedefence_req:decode(is)
	is:popString()
	self.hide = is:popNumber()
end

function i3k_sbean.arena_hidedefence_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hide)
end


-- 会武同步信息
i3k_sbean.superarena_sync_req = i3k_class("superarena_sync_req")
function i3k_sbean.superarena_sync_req:ctor()
	self._pname_ = "superarena_sync_req"
end

function i3k_sbean.superarena_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.superarena_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 会武设置出战佣兵
i3k_sbean.superarena_setpets_req = i3k_class("superarena_setpets_req")
function i3k_sbean.superarena_setpets_req:ctor()
	self._pname_ = "superarena_setpets_req"
	--self.pets:		set[int32]	
end

function i3k_sbean.superarena_setpets_req:clone()
	return clone(self)
end

function i3k_sbean.superarena_setpets_req:decode(is)
	is:popString()
	self.pets = is:popNumberSet()
end

function i3k_sbean.superarena_setpets_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.pets)
end


-- 单人匹配
i3k_sbean.superarena_singlejoin_req = i3k_class("superarena_singlejoin_req")
function i3k_sbean.superarena_singlejoin_req:ctor()
	self._pname_ = "superarena_singlejoin_req"
	--self.type:		int32	
end

function i3k_sbean.superarena_singlejoin_req:clone()
	return clone(self)
end

function i3k_sbean.superarena_singlejoin_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.superarena_singlejoin_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 组队匹配
i3k_sbean.superarena_teamjoin_req = i3k_class("superarena_teamjoin_req")
function i3k_sbean.superarena_teamjoin_req:ctor()
	self._pname_ = "superarena_teamjoin_req"
	--self.type:		int32	
end

function i3k_sbean.superarena_teamjoin_req:clone()
	return clone(self)
end

function i3k_sbean.superarena_teamjoin_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.superarena_teamjoin_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 取消匹配
i3k_sbean.superarena_quit_req = i3k_class("superarena_quit_req")
function i3k_sbean.superarena_quit_req:ctor()
	self._pname_ = "superarena_quit_req"
end

function i3k_sbean.superarena_quit_req:decode(is)
	is:popString()
end

function i3k_sbean.superarena_quit_req:encode(os)
	os:pushString(self._pname_)
end


-- 4v4竞技场商城同步协议
i3k_sbean.superarena_shopsync_req = i3k_class("superarena_shopsync_req")
function i3k_sbean.superarena_shopsync_req:ctor()
	self._pname_ = "superarena_shopsync_req"
end

function i3k_sbean.superarena_shopsync_req:decode(is)
	is:popString()
end

function i3k_sbean.superarena_shopsync_req:encode(os)
	os:pushString(self._pname_)
end


-- 4v4竞技场商城刷新协议
i3k_sbean.superarena_shoprefresh_req = i3k_class("superarena_shoprefresh_req")
function i3k_sbean.superarena_shoprefresh_req:ctor()
	self._pname_ = "superarena_shoprefresh_req"
	--self.times:		int32	
	--self.isSecondType:		int32	
end

function i3k_sbean.superarena_shoprefresh_req:clone()
	return clone(self)
end

function i3k_sbean.superarena_shoprefresh_req:decode(is)
	is:popString()
	self.times = is:popNumber()
	self.isSecondType = is:popNumber()
end

function i3k_sbean.superarena_shoprefresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
	os:pushNumber(self.isSecondType)
end


-- 4v4竞技场商城买商品协议
i3k_sbean.superarena_shopbuy_req = i3k_class("superarena_shopbuy_req")
function i3k_sbean.superarena_shopbuy_req:ctor()
	self._pname_ = "superarena_shopbuy_req"
	--self.seq:		int32	
	--self.discount:		int32	
end

function i3k_sbean.superarena_shopbuy_req:clone()
	return clone(self)
end

function i3k_sbean.superarena_shopbuy_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
	self.discount = is:popNumber()
end

function i3k_sbean.superarena_shopbuy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
	os:pushNumber(self.discount)
end


-- 神器乱斗神兵设置
i3k_sbean.superarena_weaponseq_req = i3k_class("superarena_weaponseq_req")
function i3k_sbean.superarena_weaponseq_req:ctor()
	self._pname_ = "superarena_weaponseq_req"
	--self.weaponSeq:		vector[int32]	
end

function i3k_sbean.superarena_weaponseq_req:clone()
	return clone(self)
end

function i3k_sbean.superarena_weaponseq_req:decode(is)
	is:popString()
	self.weaponSeq = is:popNumberList()
end

function i3k_sbean.superarena_weaponseq_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.weaponSeq)
end


-- 组队创建竞技场房间
i3k_sbean.aroom_create_req = i3k_class("aroom_create_req")
function i3k_sbean.aroom_create_req:ctor()
	self._pname_ = "aroom_create_req"
	--self.type:		int32	
end

function i3k_sbean.aroom_create_req:clone()
	return clone(self)
end

function i3k_sbean.aroom_create_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.aroom_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 邀请新人加入副本房间协议
i3k_sbean.aroom_invite_req = i3k_class("aroom_invite_req")
function i3k_sbean.aroom_invite_req:ctor()
	self._pname_ = "aroom_invite_req"
	--self.roleID:		int32	
end

function i3k_sbean.aroom_invite_req:clone()
	return clone(self)
end

function i3k_sbean.aroom_invite_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.aroom_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 接收到其他玩家邀请入房间后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
i3k_sbean.aroom_invitedby_req = i3k_class("aroom_invitedby_req")
function i3k_sbean.aroom_invitedby_req:ctor()
	self._pname_ = "aroom_invitedby_req"
	--self.roleID:		int32	
	--self.roomID:		int32	
	--self.accept:		int32	
end

function i3k_sbean.aroom_invitedby_req:clone()
	return clone(self)
end

function i3k_sbean.aroom_invitedby_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roomID = is:popNumber()
	self.accept = is:popNumber()
end

function i3k_sbean.aroom_invitedby_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.roomID)
	os:pushNumber(self.accept)
end


-- 离开房间请求协议
i3k_sbean.aroom_leave_req = i3k_class("aroom_leave_req")
function i3k_sbean.aroom_leave_req:ctor()
	self._pname_ = "aroom_leave_req"
end

function i3k_sbean.aroom_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.aroom_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 踢出房间成员请求协议
i3k_sbean.aroom_kick_req = i3k_class("aroom_kick_req")
function i3k_sbean.aroom_kick_req:ctor()
	self._pname_ = "aroom_kick_req"
	--self.roleID:		int32	
end

function i3k_sbean.aroom_kick_req:clone()
	return clone(self)
end

function i3k_sbean.aroom_kick_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.aroom_kick_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 会武房间更换房主请求协议
i3k_sbean.aroom_change_leader_req = i3k_class("aroom_change_leader_req")
function i3k_sbean.aroom_change_leader_req:ctor()
	self._pname_ = "aroom_change_leader_req"
	--self.roleId:		int32	
end

function i3k_sbean.aroom_change_leader_req:clone()
	return clone(self)
end

function i3k_sbean.aroom_change_leader_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.aroom_change_leader_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 房间信息查询
i3k_sbean.aroom_self_req = i3k_class("aroom_self_req")
function i3k_sbean.aroom_self_req:ctor()
	self._pname_ = "aroom_self_req"
end

function i3k_sbean.aroom_self_req:decode(is)
	is:popString()
end

function i3k_sbean.aroom_self_req:encode(os)
	os:pushString(self._pname_)
end


-- 查询会武房间成员信息,异步查询
i3k_sbean.aroom_query_member = i3k_class("aroom_query_member")
function i3k_sbean.aroom_query_member:ctor()
	self._pname_ = "aroom_query_member"
	--self.roleId:		int32	
end

function i3k_sbean.aroom_query_member:clone()
	return clone(self)
end

function i3k_sbean.aroom_query_member:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.aroom_query_member:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 地图附近没房间且等级段一致的人
i3k_sbean.aroom_mapr_req = i3k_class("aroom_mapr_req")
function i3k_sbean.aroom_mapr_req:ctor()
	self._pname_ = "aroom_mapr_req"
end

function i3k_sbean.aroom_mapr_req:decode(is)
	is:popString()
end

function i3k_sbean.aroom_mapr_req:encode(os)
	os:pushString(self._pname_)
end


-- 会武周排行榜
i3k_sbean.superarena_weekrank_req = i3k_class("superarena_weekrank_req")
function i3k_sbean.superarena_weekrank_req:ctor()
	self._pname_ = "superarena_weekrank_req"
end

function i3k_sbean.superarena_weekrank_req:decode(is)
	is:popString()
end

function i3k_sbean.superarena_weekrank_req:encode(os)
	os:pushString(self._pname_)
end


-- 会武日排行榜(type 1: 普通4v4)
i3k_sbean.superarena_dayrank_req = i3k_class("superarena_dayrank_req")
function i3k_sbean.superarena_dayrank_req:ctor()
	self._pname_ = "superarena_dayrank_req"
	--self.type:		int32	
end

function i3k_sbean.superarena_dayrank_req:clone()
	return clone(self)
end

function i3k_sbean.superarena_dayrank_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.superarena_dayrank_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 正邪道场同步信息
i3k_sbean.bwarena_sync_req = i3k_class("bwarena_sync_req")
function i3k_sbean.bwarena_sync_req:ctor()
	self._pname_ = "bwarena_sync_req"
end

function i3k_sbean.bwarena_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.bwarena_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 正邪道场设置参战随从
i3k_sbean.bwarena_setpet_req = i3k_class("bwarena_setpet_req")
function i3k_sbean.bwarena_setpet_req:ctor()
	self._pname_ = "bwarena_setpet_req"
	--self.pets:		set[int32]	
end

function i3k_sbean.bwarena_setpet_req:clone()
	return clone(self)
end

function i3k_sbean.bwarena_setpet_req:decode(is)
	is:popString()
	self.pets = is:popNumberSet()
end

function i3k_sbean.bwarena_setpet_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.pets)
end


-- 正邪道场刷新对手
i3k_sbean.bwarena_refresh_req = i3k_class("bwarena_refresh_req")
function i3k_sbean.bwarena_refresh_req:ctor()
	self._pname_ = "bwarena_refresh_req"
end

function i3k_sbean.bwarena_refresh_req:decode(is)
	is:popString()
end

function i3k_sbean.bwarena_refresh_req:encode(os)
	os:pushString(self._pname_)
end


-- 正邪道场购买次数
i3k_sbean.bwarena_buytimes_req = i3k_class("bwarena_buytimes_req")
function i3k_sbean.bwarena_buytimes_req:ctor()
	self._pname_ = "bwarena_buytimes_req"
	--self.times:		int32	
end

function i3k_sbean.bwarena_buytimes_req:clone()
	return clone(self)
end

function i3k_sbean.bwarena_buytimes_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.bwarena_buytimes_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 正邪道场开始战斗
i3k_sbean.bwarena_startattack_req = i3k_class("bwarena_startattack_req")
function i3k_sbean.bwarena_startattack_req:ctor()
	self._pname_ = "bwarena_startattack_req"
	--self.targetID:		int32	
end

function i3k_sbean.bwarena_startattack_req:clone()
	return clone(self)
end

function i3k_sbean.bwarena_startattack_req:decode(is)
	is:popString()
	self.targetID = is:popNumber()
end

function i3k_sbean.bwarena_startattack_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.targetID)
end


-- 正邪道场领取积分奖励
i3k_sbean.bwarena_takescore_req = i3k_class("bwarena_takescore_req")
function i3k_sbean.bwarena_takescore_req:ctor()
	self._pname_ = "bwarena_takescore_req"
end

function i3k_sbean.bwarena_takescore_req:decode(is)
	is:popString()
end

function i3k_sbean.bwarena_takescore_req:encode(os)
	os:pushString(self._pname_)
end


-- 正邪道场战报
i3k_sbean.bwarena_log_req = i3k_class("bwarena_log_req")
function i3k_sbean.bwarena_log_req:ctor()
	self._pname_ = "bwarena_log_req"
end

function i3k_sbean.bwarena_log_req:decode(is)
	is:popString()
end

function i3k_sbean.bwarena_log_req:encode(os)
	os:pushString(self._pname_)
end


-- 正邪道场排行榜
i3k_sbean.bwarena_ranks_req = i3k_class("bwarena_ranks_req")
function i3k_sbean.bwarena_ranks_req:ctor()
	self._pname_ = "bwarena_ranks_req"
	--self.bwtype:		int32	
	--self.index:		int32	
	--self.len:		int32	
end

function i3k_sbean.bwarena_ranks_req:clone()
	return clone(self)
end

function i3k_sbean.bwarena_ranks_req:decode(is)
	is:popString()
	self.bwtype = is:popNumber()
	self.index = is:popNumber()
	self.len = is:popNumber()
end

function i3k_sbean.bwarena_ranks_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bwtype)
	os:pushNumber(self.index)
	os:pushNumber(self.len)
end


-- 势力战抽奖
i3k_sbean.forcewar_lottery_req = i3k_class("forcewar_lottery_req")
function i3k_sbean.forcewar_lottery_req:ctor()
	self._pname_ = "forcewar_lottery_req"
end

function i3k_sbean.forcewar_lottery_req:decode(is)
	is:popString()
end

function i3k_sbean.forcewar_lottery_req:encode(os)
	os:pushString(self._pname_)
end


-- 势力战界面同步信息
i3k_sbean.forcewar_sync_req = i3k_class("forcewar_sync_req")
function i3k_sbean.forcewar_sync_req:ctor()
	self._pname_ = "forcewar_sync_req"
end

function i3k_sbean.forcewar_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.forcewar_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 势力战报名协议
i3k_sbean.forcewar_join_req = i3k_class("forcewar_join_req")
function i3k_sbean.forcewar_join_req:ctor()
	self._pname_ = "forcewar_join_req"
	--self.type:		int32	
end

function i3k_sbean.forcewar_join_req:clone()
	return clone(self)
end

function i3k_sbean.forcewar_join_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.forcewar_join_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 势力战取消报名协议
i3k_sbean.forcewar_quit_req = i3k_class("forcewar_quit_req")
function i3k_sbean.forcewar_quit_req:ctor()
	self._pname_ = "forcewar_quit_req"
end

function i3k_sbean.forcewar_quit_req:decode(is)
	is:popString()
end

function i3k_sbean.forcewar_quit_req:encode(os)
	os:pushString(self._pname_)
end


-- 创建势力战房间
i3k_sbean.froom_create_req = i3k_class("froom_create_req")
function i3k_sbean.froom_create_req:ctor()
	self._pname_ = "froom_create_req"
	--self.type:		int32	
end

function i3k_sbean.froom_create_req:clone()
	return clone(self)
end

function i3k_sbean.froom_create_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.froom_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 邀请新人加入势力战房间协议
i3k_sbean.froom_invite_req = i3k_class("froom_invite_req")
function i3k_sbean.froom_invite_req:ctor()
	self._pname_ = "froom_invite_req"
	--self.roleID:		int32	
end

function i3k_sbean.froom_invite_req:clone()
	return clone(self)
end

function i3k_sbean.froom_invite_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.froom_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 接收到其他玩家邀请入房间后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
i3k_sbean.froom_invitedby_req = i3k_class("froom_invitedby_req")
function i3k_sbean.froom_invitedby_req:ctor()
	self._pname_ = "froom_invitedby_req"
	--self.roleID:		int32	
	--self.roomID:		int32	
	--self.accept:		int32	
end

function i3k_sbean.froom_invitedby_req:clone()
	return clone(self)
end

function i3k_sbean.froom_invitedby_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.roomID = is:popNumber()
	self.accept = is:popNumber()
end

function i3k_sbean.froom_invitedby_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.roomID)
	os:pushNumber(self.accept)
end


-- 离开房间请求协议
i3k_sbean.froom_leave_req = i3k_class("froom_leave_req")
function i3k_sbean.froom_leave_req:ctor()
	self._pname_ = "froom_leave_req"
end

function i3k_sbean.froom_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.froom_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 踢出房间成员请求协议
i3k_sbean.froom_kick_req = i3k_class("froom_kick_req")
function i3k_sbean.froom_kick_req:ctor()
	self._pname_ = "froom_kick_req"
	--self.roleID:		int32	
end

function i3k_sbean.froom_kick_req:clone()
	return clone(self)
end

function i3k_sbean.froom_kick_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.froom_kick_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 势力战房间更换房主请求协议
i3k_sbean.froom_change_leader_req = i3k_class("froom_change_leader_req")
function i3k_sbean.froom_change_leader_req:ctor()
	self._pname_ = "froom_change_leader_req"
	--self.roleID:		int32	
end

function i3k_sbean.froom_change_leader_req:clone()
	return clone(self)
end

function i3k_sbean.froom_change_leader_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.froom_change_leader_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 查询势力战房间成员信息,异步查询
i3k_sbean.froom_query_member = i3k_class("froom_query_member")
function i3k_sbean.froom_query_member:ctor()
	self._pname_ = "froom_query_member"
	--self.roleID:		int32	
end

function i3k_sbean.froom_query_member:clone()
	return clone(self)
end

function i3k_sbean.froom_query_member:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.froom_query_member:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 查询势力战房间所有成员信息,异步查询
i3k_sbean.froom_query_members = i3k_class("froom_query_members")
function i3k_sbean.froom_query_members:ctor()
	self._pname_ = "froom_query_members"
end

function i3k_sbean.froom_query_members:decode(is)
	is:popString()
end

function i3k_sbean.froom_query_members:encode(os)
	os:pushString(self._pname_)
end


-- 同一地图地图附近没房间且符合条件的人
i3k_sbean.froom_mapr_req = i3k_class("froom_mapr_req")
function i3k_sbean.froom_mapr_req:ctor()
	self._pname_ = "froom_mapr_req"
	--self.type:		int32	
end

function i3k_sbean.froom_mapr_req:clone()
	return clone(self)
end

function i3k_sbean.froom_mapr_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.froom_mapr_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 同步对战列表
i3k_sbean.forcewar_mapbrief_req = i3k_class("forcewar_mapbrief_req")
function i3k_sbean.forcewar_mapbrief_req:ctor()
	self._pname_ = "forcewar_mapbrief_req"
	--self.forceType:		int32	
end

function i3k_sbean.forcewar_mapbrief_req:clone()
	return clone(self)
end

function i3k_sbean.forcewar_mapbrief_req:decode(is)
	is:popString()
	self.forceType = is:popNumber()
end

function i3k_sbean.forcewar_mapbrief_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.forceType)
end


-- 进入观战
i3k_sbean.forcewar_guard_req = i3k_class("forcewar_guard_req")
function i3k_sbean.forcewar_guard_req:ctor()
	self._pname_ = "forcewar_guard_req"
	--self.mapID:		int32	
	--self.mapInstance:		int32	
end

function i3k_sbean.forcewar_guard_req:clone()
	return clone(self)
end

function i3k_sbean.forcewar_guard_req:decode(is)
	is:popString()
	self.mapID = is:popNumber()
	self.mapInstance = is:popNumber()
end

function i3k_sbean.forcewar_guard_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapID)
	os:pushNumber(self.mapInstance)
end


-- boss信息同步请求
i3k_sbean.bosses_sync_req = i3k_class("bosses_sync_req")
function i3k_sbean.bosses_sync_req:ctor()
	self._pname_ = "bosses_sync_req"
end

function i3k_sbean.bosses_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.bosses_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 前往boss位置请求
i3k_sbean.walktoboss_req = i3k_class("walktoboss_req")
function i3k_sbean.walktoboss_req:ctor()
	self._pname_ = "walktoboss_req"
	--self.bossID:		int32	
end

function i3k_sbean.walktoboss_req:clone()
	return clone(self)
end

function i3k_sbean.walktoboss_req:decode(is)
	is:popString()
	self.bossID = is:popNumber()
end

function i3k_sbean.walktoboss_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
end


-- 直接传送到boss位置请求
i3k_sbean.transtoboss_req = i3k_class("transtoboss_req")
function i3k_sbean.transtoboss_req:ctor()
	self._pname_ = "transtoboss_req"
	--self.bossID:		int32	
	--self.seq:		int32	
end

function i3k_sbean.transtoboss_req:clone()
	return clone(self)
end

function i3k_sbean.transtoboss_req:decode(is)
	is:popString()
	self.bossID = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.transtoboss_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
	os:pushNumber(self.seq)
end


i3k_sbean.reset_transtime_req = i3k_class("reset_transtime_req")
function i3k_sbean.reset_transtime_req:ctor()
	self._pname_ = "reset_transtime_req"
end

function i3k_sbean.reset_transtime_req:decode(is)
	is:popString()
end

function i3k_sbean.reset_transtime_req:encode(os)
	os:pushString(self._pname_)
end


-- boss奖励分配记录请求(last 1:上次, 0:本次)
i3k_sbean.boss_reward_req = i3k_class("boss_reward_req")
function i3k_sbean.boss_reward_req:ctor()
	self._pname_ = "boss_reward_req"
	--self.bossID:		int32	
	--self.last:		int32	
end

function i3k_sbean.boss_reward_req:clone()
	return clone(self)
end

function i3k_sbean.boss_reward_req:decode(is)
	is:popString()
	self.bossID = is:popNumber()
	self.last = is:popNumber()
end

function i3k_sbean.boss_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
	os:pushNumber(self.last)
end


-- 好友界面信息同步请求
i3k_sbean.friend_sync_req = i3k_class("friend_sync_req")
function i3k_sbean.friend_sync_req:ctor()
	self._pname_ = "friend_sync_req"
end

function i3k_sbean.friend_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.friend_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 获取最新加我为好友的列表
i3k_sbean.friend_pluslist_req = i3k_class("friend_pluslist_req")
function i3k_sbean.friend_pluslist_req:ctor()
	self._pname_ = "friend_pluslist_req"
end

function i3k_sbean.friend_pluslist_req:decode(is)
	is:popString()
end

function i3k_sbean.friend_pluslist_req:encode(os)
	os:pushString(self._pname_)
end


-- 获取系统推荐的列表
i3k_sbean.friend_recommend_req = i3k_class("friend_recommend_req")
function i3k_sbean.friend_recommend_req:ctor()
	self._pname_ = "friend_recommend_req"
end

function i3k_sbean.friend_recommend_req:decode(is)
	is:popString()
end

function i3k_sbean.friend_recommend_req:encode(os)
	os:pushString(self._pname_)
end


-- 添加好友回应
i3k_sbean.friend_add_req = i3k_class("friend_add_req")
function i3k_sbean.friend_add_req:ctor()
	self._pname_ = "friend_add_req"
	--self.friendId:		int32	
end

function i3k_sbean.friend_add_req:clone()
	return clone(self)
end

function i3k_sbean.friend_add_req:decode(is)
	is:popString()
	self.friendId = is:popNumber()
end

function i3k_sbean.friend_add_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.friendId)
end


-- 好友搜索
i3k_sbean.friend_search_req = i3k_class("friend_search_req")
function i3k_sbean.friend_search_req:ctor()
	self._pname_ = "friend_search_req"
	--self.name:		string	
end

function i3k_sbean.friend_search_req:clone()
	return clone(self)
end

function i3k_sbean.friend_search_req:decode(is)
	is:popString()
	self.name = is:popString()
end

function i3k_sbean.friend_search_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.name)
end


-- 删除好友回应
i3k_sbean.friend_delete_req = i3k_class("friend_delete_req")
function i3k_sbean.friend_delete_req:ctor()
	self._pname_ = "friend_delete_req"
	--self.friendId:		int32	
end

function i3k_sbean.friend_delete_req:clone()
	return clone(self)
end

function i3k_sbean.friend_delete_req:decode(is)
	is:popString()
	self.friendId = is:popNumber()
end

function i3k_sbean.friend_delete_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.friendId)
end


-- 一键删除好友
i3k_sbean.friend_onekey_delete_req = i3k_class("friend_onekey_delete_req")
function i3k_sbean.friend_onekey_delete_req:ctor()
	self._pname_ = "friend_onekey_delete_req"
	--self.friendIds:		vector[int32]	
end

function i3k_sbean.friend_onekey_delete_req:clone()
	return clone(self)
end

function i3k_sbean.friend_onekey_delete_req:decode(is)
	is:popString()
	self.friendIds = is:popNumberList()
end

function i3k_sbean.friend_onekey_delete_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.friendIds)
end


-- 好友送体力
i3k_sbean.friend_givevit_req = i3k_class("friend_givevit_req")
function i3k_sbean.friend_givevit_req:ctor()
	self._pname_ = "friend_givevit_req"
	--self.friendId:		int32	
end

function i3k_sbean.friend_givevit_req:clone()
	return clone(self)
end

function i3k_sbean.friend_givevit_req:decode(is)
	is:popString()
	self.friendId = is:popNumber()
end

function i3k_sbean.friend_givevit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.friendId)
end


-- 好友一键送体力
i3k_sbean.friend_giveallvits_req = i3k_class("friend_giveallvits_req")
function i3k_sbean.friend_giveallvits_req:ctor()
	self._pname_ = "friend_giveallvits_req"
	--self.friends:		set[int32]	
end

function i3k_sbean.friend_giveallvits_req:clone()
	return clone(self)
end

function i3k_sbean.friend_giveallvits_req:decode(is)
	is:popString()
	self.friends = is:popNumberSet()
end

function i3k_sbean.friend_giveallvits_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.friends)
end


-- 好友接受体力
i3k_sbean.friend_receivevit_req = i3k_class("friend_receivevit_req")
function i3k_sbean.friend_receivevit_req:ctor()
	self._pname_ = "friend_receivevit_req"
	--self.fids:		set[int32]	
end

function i3k_sbean.friend_receivevit_req:clone()
	return clone(self)
end

function i3k_sbean.friend_receivevit_req:decode(is)
	is:popString()
	self.fids = is:popNumberSet()
end

function i3k_sbean.friend_receivevit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.fids)
end


-- 同意添加好友
i3k_sbean.friend_agreeadd_req = i3k_class("friend_agreeadd_req")
function i3k_sbean.friend_agreeadd_req:ctor()
	self._pname_ = "friend_agreeadd_req"
	--self.friendId:		int32	
	--self.isIgnoreFriendInvite:		int8	
end

function i3k_sbean.friend_agreeadd_req:clone()
	return clone(self)
end

function i3k_sbean.friend_agreeadd_req:decode(is)
	is:popString()
	self.friendId = is:popNumber()
	self.isIgnoreFriendInvite = is:popNumber()
end

function i3k_sbean.friend_agreeadd_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.friendId)
	os:pushNumber(self.isIgnoreFriendInvite)
end


-- 玩家更新心情
i3k_sbean.friend_changemsg_req = i3k_class("friend_changemsg_req")
function i3k_sbean.friend_changemsg_req:ctor()
	self._pname_ = "friend_changemsg_req"
	--self.msg:		string	
end

function i3k_sbean.friend_changemsg_req:clone()
	return clone(self)
end

function i3k_sbean.friend_changemsg_req:decode(is)
	is:popString()
	self.msg = is:popString()
end

function i3k_sbean.friend_changemsg_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.msg)
end


-- 玩家更改头像
i3k_sbean.friend_changehead_req = i3k_class("friend_changehead_req")
function i3k_sbean.friend_changehead_req:ctor()
	self._pname_ = "friend_changehead_req"
	--self.headId:		int16	
end

function i3k_sbean.friend_changehead_req:clone()
	return clone(self)
end

function i3k_sbean.friend_changehead_req:decode(is)
	is:popString()
	self.headId = is:popNumber()
end

function i3k_sbean.friend_changehead_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.headId)
end


-- 获取好友宿敌
i3k_sbean.friend_enemy_req = i3k_class("friend_enemy_req")
function i3k_sbean.friend_enemy_req:ctor()
	self._pname_ = "friend_enemy_req"
end

function i3k_sbean.friend_enemy_req:decode(is)
	is:popString()
end

function i3k_sbean.friend_enemy_req:encode(os)
	os:pushString(self._pname_)
end


-- 删除好友宿敌
i3k_sbean.friend_removeenemy_req = i3k_class("friend_removeenemy_req")
function i3k_sbean.friend_removeenemy_req:ctor()
	self._pname_ = "friend_removeenemy_req"
	--self.enemyId:		int32	
end

function i3k_sbean.friend_removeenemy_req:clone()
	return clone(self)
end

function i3k_sbean.friend_removeenemy_req:decode(is)
	is:popString()
	self.enemyId = is:popNumber()
end

function i3k_sbean.friend_removeenemy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.enemyId)
end


-- 设置好友关注度
i3k_sbean.friend_setfocus_req = i3k_class("friend_setfocus_req")
function i3k_sbean.friend_setfocus_req:ctor()
	self._pname_ = "friend_setfocus_req"
	--self.friendId:		int32	
	--self.value:		int32	
end

function i3k_sbean.friend_setfocus_req:clone()
	return clone(self)
end

function i3k_sbean.friend_setfocus_req:decode(is)
	is:popString()
	self.friendId = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.friend_setfocus_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.friendId)
	os:pushNumber(self.value)
end


-- 送花
i3k_sbean.give_flower_req = i3k_class("give_flower_req")
function i3k_sbean.give_flower_req:ctor()
	self._pname_ = "give_flower_req"
	--self.rid:		int32	
	--self.count:		int32	
end

function i3k_sbean.give_flower_req:clone()
	return clone(self)
end

function i3k_sbean.give_flower_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.give_flower_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.count)
end


-- 获取赠送记录
i3k_sbean.get_flowerlog_req = i3k_class("get_flowerlog_req")
function i3k_sbean.get_flowerlog_req:ctor()
	self._pname_ = "get_flowerlog_req"
end

function i3k_sbean.get_flowerlog_req:decode(is)
	is:popString()
end

function i3k_sbean.get_flowerlog_req:encode(os)
	os:pushString(self._pname_)
end


-- 获取接收列表
i3k_sbean.get_acceptlist_req = i3k_class("get_acceptlist_req")
function i3k_sbean.get_acceptlist_req:ctor()
	self._pname_ = "get_acceptlist_req"
	--self.rid:		int32	
end

function i3k_sbean.get_acceptlist_req:clone()
	return clone(self)
end

function i3k_sbean.get_acceptlist_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.get_acceptlist_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 拍卖行信息同步请求
i3k_sbean.auction_syncitems_req = i3k_class("auction_syncitems_req")
function i3k_sbean.auction_syncitems_req:ctor()
	self._pname_ = "auction_syncitems_req"
	--self.itemType:		int32	
	--self.classType:		int32	
	--self.rank:		int32	
	--self.level:		int32	
	--self.order:		int32	
	--self.page:		int32	
	--self.name:		string	
	--self.itemID:		int32	
end

function i3k_sbean.auction_syncitems_req:clone()
	return clone(self)
end

function i3k_sbean.auction_syncitems_req:decode(is)
	is:popString()
	self.itemType = is:popNumber()
	self.classType = is:popNumber()
	self.rank = is:popNumber()
	self.level = is:popNumber()
	self.order = is:popNumber()
	self.page = is:popNumber()
	self.name = is:popString()
	self.itemID = is:popNumber()
end

function i3k_sbean.auction_syncitems_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemType)
	os:pushNumber(self.classType)
	os:pushNumber(self.rank)
	os:pushNumber(self.level)
	os:pushNumber(self.order)
	os:pushNumber(self.page)
	os:pushString(self.name)
	os:pushNumber(self.itemID)
end


-- 拍卖行装备同步请求
i3k_sbean.auction_syncequips_req = i3k_class("auction_syncequips_req")
function i3k_sbean.auction_syncequips_req:ctor()
	self._pname_ = "auction_syncequips_req"
	--self.itemType:		int32	
	--self.classType:		int32	
	--self.rank:		int32	
	--self.level:		int32	
	--self.order:		int32	
	--self.page:		int32	
	--self.name:		string	
	--self.itemID:		int32	
end

function i3k_sbean.auction_syncequips_req:clone()
	return clone(self)
end

function i3k_sbean.auction_syncequips_req:decode(is)
	is:popString()
	self.itemType = is:popNumber()
	self.classType = is:popNumber()
	self.rank = is:popNumber()
	self.level = is:popNumber()
	self.order = is:popNumber()
	self.page = is:popNumber()
	self.name = is:popString()
	self.itemID = is:popNumber()
end

function i3k_sbean.auction_syncequips_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemType)
	os:pushNumber(self.classType)
	os:pushNumber(self.rank)
	os:pushNumber(self.level)
	os:pushNumber(self.order)
	os:pushNumber(self.page)
	os:pushString(self.name)
	os:pushNumber(self.itemID)
end


-- 同步自己寄售物品请求
i3k_sbean.auction_syncselfitems_req = i3k_class("auction_syncselfitems_req")
function i3k_sbean.auction_syncselfitems_req:ctor()
	self._pname_ = "auction_syncselfitems_req"
end

function i3k_sbean.auction_syncselfitems_req:decode(is)
	is:popString()
end

function i3k_sbean.auction_syncselfitems_req:encode(os)
	os:pushString(self._pname_)
end


-- 上架道具物品请求
i3k_sbean.auction_putonitems_req = i3k_class("auction_putonitems_req")
function i3k_sbean.auction_putonitems_req:ctor()
	self._pname_ = "auction_putonitems_req"
	--self.id:		int32	
	--self.count:		int32	
	--self.price:		int32	
end

function i3k_sbean.auction_putonitems_req:clone()
	return clone(self)
end

function i3k_sbean.auction_putonitems_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
	self.price = is:popNumber()
end

function i3k_sbean.auction_putonitems_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
	os:pushNumber(self.price)
end


-- 上架装备请求
i3k_sbean.auction_putonequip_req = i3k_class("auction_putonequip_req")
function i3k_sbean.auction_putonequip_req:ctor()
	self._pname_ = "auction_putonequip_req"
	--self.id:		int32	
	--self.guid:		string	
	--self.price:		int32	
end

function i3k_sbean.auction_putonequip_req:clone()
	return clone(self)
end

function i3k_sbean.auction_putonequip_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
	self.price = is:popNumber()
end

function i3k_sbean.auction_putonequip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
	os:pushNumber(self.price)
end


-- 物品下架请求
i3k_sbean.auction_putoffitems_req = i3k_class("auction_putoffitems_req")
function i3k_sbean.auction_putoffitems_req:ctor()
	self._pname_ = "auction_putoffitems_req"
	--self.cid:		int32	
	--self.itemID:		int32	
	--self.count:		int32	
end

function i3k_sbean.auction_putoffitems_req:clone()
	return clone(self)
end

function i3k_sbean.auction_putoffitems_req:decode(is)
	is:popString()
	self.cid = is:popNumber()
	self.itemID = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.auction_putoffitems_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cid)
	os:pushNumber(self.itemID)
	os:pushNumber(self.count)
end


-- 购买物品请求
i3k_sbean.auction_buyitems_req = i3k_class("auction_buyitems_req")
function i3k_sbean.auction_buyitems_req:ctor()
	self._pname_ = "auction_buyitems_req"
	--self.cid:		int32	
	--self.sellerID:		int32	
	--self.items:		DBConsignItems	
end

function i3k_sbean.auction_buyitems_req:clone()
	return clone(self)
end

function i3k_sbean.auction_buyitems_req:decode(is)
	is:popString()
	self.cid = is:popNumber()
	self.sellerID = is:popNumber()
	self.items = is:pop(i3k_sbean.DBConsignItems)
end

function i3k_sbean.auction_buyitems_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cid)
	os:pushNumber(self.sellerID)
	os:push(self.items)
end


-- 拍卖行摊位扩展
i3k_sbean.auction_expand_req = i3k_class("auction_expand_req")
function i3k_sbean.auction_expand_req:ctor()
	self._pname_ = "auction_expand_req"
	--self.times:		int32	
end

function i3k_sbean.auction_expand_req:clone()
	return clone(self)
end

function i3k_sbean.auction_expand_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.auction_expand_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 交易记录
i3k_sbean.auction_tradelog_req = i3k_class("auction_tradelog_req")
function i3k_sbean.auction_tradelog_req:ctor()
	self._pname_ = "auction_tradelog_req"
end

function i3k_sbean.auction_tradelog_req:decode(is)
	is:popString()
end

function i3k_sbean.auction_tradelog_req:encode(os)
	os:pushString(self._pname_)
end


-- 获取道具价格列表
i3k_sbean.auction_itemprices_req = i3k_class("auction_itemprices_req")
function i3k_sbean.auction_itemprices_req:ctor()
	self._pname_ = "auction_itemprices_req"
	--self.itemID:		int32	
end

function i3k_sbean.auction_itemprices_req:clone()
	return clone(self)
end

function i3k_sbean.auction_itemprices_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
end

function i3k_sbean.auction_itemprices_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
end


-- 同步江湖客栈信息
i3k_sbean.treasure_syncnpcs_req = i3k_class("treasure_syncnpcs_req")
function i3k_sbean.treasure_syncnpcs_req:ctor()
	self._pname_ = "treasure_syncnpcs_req"
end

function i3k_sbean.treasure_syncnpcs_req:decode(is)
	is:popString()
end

function i3k_sbean.treasure_syncnpcs_req:encode(os)
	os:pushString(self._pname_)
end


-- 刷新某一个NPC信息
i3k_sbean.treasure_refreshnpc_req = i3k_class("treasure_refreshnpc_req")
function i3k_sbean.treasure_refreshnpc_req:ctor()
	self._pname_ = "treasure_refreshnpc_req"
	--self.npcID:		int32	
	--self.times:		int32	
end

function i3k_sbean.treasure_refreshnpc_req:clone()
	return clone(self)
end

function i3k_sbean.treasure_refreshnpc_req:decode(is)
	is:popString()
	self.npcID = is:popNumber()
	self.times = is:popNumber()
end

function i3k_sbean.treasure_refreshnpc_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcID)
	os:pushNumber(self.times)
end


-- 购买藏宝图碎片
i3k_sbean.treasure_buypieces_req = i3k_class("treasure_buypieces_req")
function i3k_sbean.treasure_buypieces_req:ctor()
	self._pname_ = "treasure_buypieces_req"
	--self.npcID:		int32	
	--self.pieceID:		int32	
end

function i3k_sbean.treasure_buypieces_req:clone()
	return clone(self)
end

function i3k_sbean.treasure_buypieces_req:decode(is)
	is:popString()
	self.npcID = is:popNumber()
	self.pieceID = is:popNumber()
end

function i3k_sbean.treasure_buypieces_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcID)
	os:pushNumber(self.pieceID)
end


-- 领取NPC礼包
i3k_sbean.treasure_npcreward_req = i3k_class("treasure_npcreward_req")
function i3k_sbean.treasure_npcreward_req:ctor()
	self._pname_ = "treasure_npcreward_req"
	--self.npcID:		int32	
end

function i3k_sbean.treasure_npcreward_req:clone()
	return clone(self)
end

function i3k_sbean.treasure_npcreward_req:decode(is)
	is:popString()
	self.npcID = is:popNumber()
end

function i3k_sbean.treasure_npcreward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcID)
end


-- 同步藏宝图信息
i3k_sbean.treasure_syncmap_req = i3k_class("treasure_syncmap_req")
function i3k_sbean.treasure_syncmap_req:ctor()
	self._pname_ = "treasure_syncmap_req"
end

function i3k_sbean.treasure_syncmap_req:decode(is)
	is:popString()
end

function i3k_sbean.treasure_syncmap_req:encode(os)
	os:pushString(self._pname_)
end


-- 总体探索
i3k_sbean.treasure_totalsearch_req = i3k_class("treasure_totalsearch_req")
function i3k_sbean.treasure_totalsearch_req:ctor()
	self._pname_ = "treasure_totalsearch_req"
end

function i3k_sbean.treasure_totalsearch_req:decode(is)
	is:popString()
end

function i3k_sbean.treasure_totalsearch_req:encode(os)
	os:pushString(self._pname_)
end


-- 探索情报点
i3k_sbean.treasure_search_req = i3k_class("treasure_search_req")
function i3k_sbean.treasure_search_req:ctor()
	self._pname_ = "treasure_search_req"
	--self.pointIndex:		int32	
end

function i3k_sbean.treasure_search_req:clone()
	return clone(self)
end

function i3k_sbean.treasure_search_req:decode(is)
	is:popString()
	self.pointIndex = is:popNumber()
end

function i3k_sbean.treasure_search_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pointIndex)
end


-- 合成地图
i3k_sbean.treasure_makemap_req = i3k_class("treasure_makemap_req")
function i3k_sbean.treasure_makemap_req:ctor()
	self._pname_ = "treasure_makemap_req"
	--self.pieceID:		int32	
end

function i3k_sbean.treasure_makemap_req:clone()
	return clone(self)
end

function i3k_sbean.treasure_makemap_req:decode(is)
	is:popString()
	self.pieceID = is:popNumber()
end

function i3k_sbean.treasure_makemap_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pieceID)
end


-- 领取藏宝图奖励
i3k_sbean.treasure_mapreward_req = i3k_class("treasure_mapreward_req")
function i3k_sbean.treasure_mapreward_req:ctor()
	self._pname_ = "treasure_mapreward_req"
end

function i3k_sbean.treasure_mapreward_req:decode(is)
	is:popString()
end

function i3k_sbean.treasure_mapreward_req:encode(os)
	os:pushString(self._pname_)
end


-- 扫荡领取藏宝图奖励
i3k_sbean.treasure_map_one_key_reward_req = i3k_class("treasure_map_one_key_reward_req")
function i3k_sbean.treasure_map_one_key_reward_req:ctor()
	self._pname_ = "treasure_map_one_key_reward_req"
end

function i3k_sbean.treasure_map_one_key_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.treasure_map_one_key_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 放弃藏宝图
i3k_sbean.treasure_quitmap_req = i3k_class("treasure_quitmap_req")
function i3k_sbean.treasure_quitmap_req:ctor()
	self._pname_ = "treasure_quitmap_req"
end

function i3k_sbean.treasure_quitmap_req:decode(is)
	is:popString()
end

function i3k_sbean.treasure_quitmap_req:encode(os)
	os:pushString(self._pname_)
end


-- 藏品装裱
i3k_sbean.treasure_medalgrow_req = i3k_class("treasure_medalgrow_req")
function i3k_sbean.treasure_medalgrow_req:ctor()
	self._pname_ = "treasure_medalgrow_req"
	--self.medalID:		int32	
	--self.type:		int32	
end

function i3k_sbean.treasure_medalgrow_req:clone()
	return clone(self)
end

function i3k_sbean.treasure_medalgrow_req:decode(is)
	is:popString()
	self.medalID = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.treasure_medalgrow_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.medalID)
	os:pushNumber(self.type)
end


-- 藏品镶边
i3k_sbean.treasure_edge_req = i3k_class("treasure_edge_req")
function i3k_sbean.treasure_edge_req:ctor()
	self._pname_ = "treasure_edge_req"
	--self.medalID:		int32	
	--self.type:		int32	
end

function i3k_sbean.treasure_edge_req:clone()
	return clone(self)
end

function i3k_sbean.treasure_edge_req:decode(is)
	is:popString()
	self.medalID = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.treasure_edge_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.medalID)
	os:pushNumber(self.type)
end


-- 驯服坐骑
i3k_sbean.horse_tame_req = i3k_class("horse_tame_req")
function i3k_sbean.horse_tame_req:ctor()
	self._pname_ = "horse_tame_req"
	--self.hid:		int32	
end

function i3k_sbean.horse_tame_req:clone()
	return clone(self)
end

function i3k_sbean.horse_tame_req:decode(is)
	is:popString()
	self.hid = is:popNumber()
end

function i3k_sbean.horse_tame_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hid)
end


-- 坐骑出征
i3k_sbean.horse_use_req = i3k_class("horse_use_req")
function i3k_sbean.horse_use_req:ctor()
	self._pname_ = "horse_use_req"
	--self.hid:		int32	
end

function i3k_sbean.horse_use_req:clone()
	return clone(self)
end

function i3k_sbean.horse_use_req:decode(is)
	is:popString()
	self.hid = is:popNumber()
end

function i3k_sbean.horse_use_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hid)
end


-- 坐骑升星
i3k_sbean.horse_upstar_req = i3k_class("horse_upstar_req")
function i3k_sbean.horse_upstar_req:ctor()
	self._pname_ = "horse_upstar_req"
	--self.hid:		int32	
	--self.star:		int32	
end

function i3k_sbean.horse_upstar_req:clone()
	return clone(self)
end

function i3k_sbean.horse_upstar_req:decode(is)
	is:popString()
	self.hid = is:popNumber()
	self.star = is:popNumber()
end

function i3k_sbean.horse_upstar_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hid)
	os:pushNumber(self.star)
end


-- 坐骑洗练
i3k_sbean.horse_enhance_req = i3k_class("horse_enhance_req")
function i3k_sbean.horse_enhance_req:ctor()
	self._pname_ = "horse_enhance_req"
	--self.hid:		int32	
	--self.locks:		set[int32]	
	--self.isReplace:		int32	
end

function i3k_sbean.horse_enhance_req:clone()
	return clone(self)
end

function i3k_sbean.horse_enhance_req:decode(is)
	is:popString()
	self.hid = is:popNumber()
	self.locks = is:popNumberSet()
	self.isReplace = is:popNumber()
end

function i3k_sbean.horse_enhance_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hid)
	os:pushNumberSet(self.locks)
	os:pushNumber(self.isReplace)
end


-- 坐骑洗练替换属性
i3k_sbean.horse_enhancesave_req = i3k_class("horse_enhancesave_req")
function i3k_sbean.horse_enhancesave_req:ctor()
	self._pname_ = "horse_enhancesave_req"
end

function i3k_sbean.horse_enhancesave_req:decode(is)
	is:popString()
end

function i3k_sbean.horse_enhancesave_req:encode(os)
	os:pushString(self._pname_)
end


-- 更换幻化外形
i3k_sbean.horse_changeshow_req = i3k_class("horse_changeshow_req")
function i3k_sbean.horse_changeshow_req:ctor()
	self._pname_ = "horse_changeshow_req"
	--self.showID:		int32	
end

function i3k_sbean.horse_changeshow_req:clone()
	return clone(self)
end

function i3k_sbean.horse_changeshow_req:decode(is)
	is:popString()
	self.showID = is:popNumber()
end

function i3k_sbean.horse_changeshow_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
end


-- 激活幻化外形
i3k_sbean.horse_activateshow_req = i3k_class("horse_activateshow_req")
function i3k_sbean.horse_activateshow_req:ctor()
	self._pname_ = "horse_activateshow_req"
	--self.hid:		int32	
	--self.showID:		int32	
end

function i3k_sbean.horse_activateshow_req:clone()
	return clone(self)
end

function i3k_sbean.horse_activateshow_req:decode(is)
	is:popString()
	self.hid = is:popNumber()
	self.showID = is:popNumber()
end

function i3k_sbean.horse_activateshow_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hid)
	os:pushNumber(self.showID)
end


-- 激活骑术
i3k_sbean.horse_learnskill_req = i3k_class("horse_learnskill_req")
function i3k_sbean.horse_learnskill_req:ctor()
	self._pname_ = "horse_learnskill_req"
	--self.skillID:		int32	
end

function i3k_sbean.horse_learnskill_req:clone()
	return clone(self)
end

function i3k_sbean.horse_learnskill_req:decode(is)
	is:popString()
	self.skillID = is:popNumber()
end

function i3k_sbean.horse_learnskill_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
end


-- 同步骑术等级
i3k_sbean.sync_horse_skillLevel_req = i3k_class("sync_horse_skillLevel_req")
function i3k_sbean.sync_horse_skillLevel_req:ctor()
	self._pname_ = "sync_horse_skillLevel_req"
end

function i3k_sbean.sync_horse_skillLevel_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_horse_skillLevel_req:encode(os)
	os:pushString(self._pname_)
end


-- 升级骑术等级
i3k_sbean.horse_skill_up_level_req = i3k_class("horse_skill_up_level_req")
function i3k_sbean.horse_skill_up_level_req:ctor()
	self._pname_ = "horse_skill_up_level_req"
	--self.skillID:		int32	
end

function i3k_sbean.horse_skill_up_level_req:clone()
	return clone(self)
end

function i3k_sbean.horse_skill_up_level_req:decode(is)
	is:popString()
	self.skillID = is:popNumber()
end

function i3k_sbean.horse_skill_up_level_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
end


-- 设置骑术
i3k_sbean.horse_setskill_req = i3k_class("horse_setskill_req")
function i3k_sbean.horse_setskill_req:ctor()
	self._pname_ = "horse_setskill_req"
	--self.hid:		int32	
	--self.position:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.horse_setskill_req:clone()
	return clone(self)
end

function i3k_sbean.horse_setskill_req:decode(is)
	is:popString()
	self.hid = is:popNumber()
	self.position = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.horse_setskill_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hid)
	os:pushNumber(self.position)
	os:pushNumber(self.skillID)
end


-- 坐骑突破
i3k_sbean.horse_break_req = i3k_class("horse_break_req")
function i3k_sbean.horse_break_req:ctor()
	self._pname_ = "horse_break_req"
	--self.hid:		int32	
	--self.breakLvl:		int32	
end

function i3k_sbean.horse_break_req:clone()
	return clone(self)
end

function i3k_sbean.horse_break_req:decode(is)
	is:popString()
	self.hid = is:popNumber()
	self.breakLvl = is:popNumber()
end

function i3k_sbean.horse_break_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hid)
	os:pushNumber(self.breakLvl)
end


-- 皮肤激活骑战
i3k_sbean.horse_showfight_req = i3k_class("horse_showfight_req")
function i3k_sbean.horse_showfight_req:ctor()
	self._pname_ = "horse_showfight_req"
	--self.showID:		int32	
end

function i3k_sbean.horse_showfight_req:clone()
	return clone(self)
end

function i3k_sbean.horse_showfight_req:decode(is)
	is:popString()
	self.showID = is:popNumber()
end

function i3k_sbean.horse_showfight_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
end


-- 马术精通加经验
i3k_sbean.horse_master_addexp_req = i3k_class("horse_master_addexp_req")
function i3k_sbean.horse_master_addexp_req:ctor()
	self._pname_ = "horse_master_addexp_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.horse_master_addexp_req:clone()
	return clone(self)
end

function i3k_sbean.horse_master_addexp_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.horse_master_addexp_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 马术精通解锁条目
i3k_sbean.horse_master_unlock_req = i3k_class("horse_master_unlock_req")
function i3k_sbean.horse_master_unlock_req:ctor()
	self._pname_ = "horse_master_unlock_req"
	--self.level:		int32	
	--self.index:		int32	
end

function i3k_sbean.horse_master_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.horse_master_unlock_req:decode(is)
	is:popString()
	self.level = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.horse_master_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
	os:pushNumber(self.index)
end


-- 良驹之灵锤炼
i3k_sbean.horse_spirit_upstar_req = i3k_class("horse_spirit_upstar_req")
function i3k_sbean.horse_spirit_upstar_req:ctor()
	self._pname_ = "horse_spirit_upstar_req"
	--self.star:		int32	
end

function i3k_sbean.horse_spirit_upstar_req:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_upstar_req:decode(is)
	is:popString()
	self.star = is:popNumber()
end

function i3k_sbean.horse_spirit_upstar_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.star)
end


-- 良驹之灵技能升级(lvl 1:解锁技能)
i3k_sbean.horse_spirit_skill_lvlup_req = i3k_class("horse_spirit_skill_lvlup_req")
function i3k_sbean.horse_spirit_skill_lvlup_req:ctor()
	self._pname_ = "horse_spirit_skill_lvlup_req"
	--self.skillID:		int32	
	--self.lvl:		int32	
end

function i3k_sbean.horse_spirit_skill_lvlup_req:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_skill_lvlup_req:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.lvl = is:popNumber()
end

function i3k_sbean.horse_spirit_skill_lvlup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.lvl)
end


-- 良驹之灵更换形象
i3k_sbean.horse_spirit_setshow_req = i3k_class("horse_spirit_setshow_req")
function i3k_sbean.horse_spirit_setshow_req:ctor()
	self._pname_ = "horse_spirit_setshow_req"
	--self.showID:		int32	
end

function i3k_sbean.horse_spirit_setshow_req:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_setshow_req:decode(is)
	is:popString()
	self.showID = is:popNumber()
end

function i3k_sbean.horse_spirit_setshow_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
end


-- 良驹之灵升阶自动更换形象
i3k_sbean.horse_spirit_showauto_req = i3k_class("horse_spirit_showauto_req")
function i3k_sbean.horse_spirit_showauto_req:ctor()
	self._pname_ = "horse_spirit_showauto_req"
	--self.auto:		int32	
end

function i3k_sbean.horse_spirit_showauto_req:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_showauto_req:decode(is)
	is:popString()
	self.auto = is:popNumber()
end

function i3k_sbean.horse_spirit_showauto_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.auto)
end


-- 良驹之灵隐藏形象
i3k_sbean.horse_spirit_hide_req = i3k_class("horse_spirit_hide_req")
function i3k_sbean.horse_spirit_hide_req:ctor()
	self._pname_ = "horse_spirit_hide_req"
	--self.hide:		int32	
end

function i3k_sbean.horse_spirit_hide_req:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_hide_req:decode(is)
	is:popString()
	self.hide = is:popNumber()
end

function i3k_sbean.horse_spirit_hide_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hide)
end


-- 解锁良驹之灵追加形象
i3k_sbean.horse_spirit_unlock_req = i3k_class("horse_spirit_unlock_req")
function i3k_sbean.horse_spirit_unlock_req:ctor()
	self._pname_ = "horse_spirit_unlock_req"
	--self.showID:		int32	
end

function i3k_sbean.horse_spirit_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.horse_spirit_unlock_req:decode(is)
	is:popString()
	self.showID = is:popNumber()
end

function i3k_sbean.horse_spirit_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
end


-- 穿戴时装
i3k_sbean.fashion_upwear_req = i3k_class("fashion_upwear_req")
function i3k_sbean.fashion_upwear_req:ctor()
	self._pname_ = "fashion_upwear_req"
	--self.fashionID:		int32	
end

function i3k_sbean.fashion_upwear_req:clone()
	return clone(self)
end

function i3k_sbean.fashion_upwear_req:decode(is)
	is:popString()
	self.fashionID = is:popNumber()
end

function i3k_sbean.fashion_upwear_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fashionID)
end


-- 放入衣橱
i3k_sbean.fashion_putwardrobe_req = i3k_class("fashion_putwardrobe_req")
function i3k_sbean.fashion_putwardrobe_req:ctor()
	self._pname_ = "fashion_putwardrobe_req"
	--self.fashionID:		int32	
end

function i3k_sbean.fashion_putwardrobe_req:clone()
	return clone(self)
end

function i3k_sbean.fashion_putwardrobe_req:decode(is)
	is:popString()
	self.fashionID = is:popNumber()
end

function i3k_sbean.fashion_putwardrobe_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fashionID)
end


-- 从衣橱取出
i3k_sbean.fashion_getwardrobe_req = i3k_class("fashion_getwardrobe_req")
function i3k_sbean.fashion_getwardrobe_req:ctor()
	self._pname_ = "fashion_getwardrobe_req"
	--self.fashionID:		int32	
end

function i3k_sbean.fashion_getwardrobe_req:clone()
	return clone(self)
end

function i3k_sbean.fashion_getwardrobe_req:decode(is)
	is:popString()
	self.fashionID = is:popNumber()
end

function i3k_sbean.fashion_getwardrobe_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fashionID)
end


-- 精纺时装
i3k_sbean.fashion_worsted_req = i3k_class("fashion_worsted_req")
function i3k_sbean.fashion_worsted_req:ctor()
	self._pname_ = "fashion_worsted_req"
	--self.fashionID:		int32	
end

function i3k_sbean.fashion_worsted_req:clone()
	return clone(self)
end

function i3k_sbean.fashion_worsted_req:decode(is)
	is:popString()
	self.fashionID = is:popNumber()
end

function i3k_sbean.fashion_worsted_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fashionID)
end


-- 保存精纺时装属性
i3k_sbean.fashion_save_worsted_req = i3k_class("fashion_save_worsted_req")
function i3k_sbean.fashion_save_worsted_req:ctor()
	self._pname_ = "fashion_save_worsted_req"
	--self.fashionID:		int32	
	--self.propGroupId:		int32	
end

function i3k_sbean.fashion_save_worsted_req:clone()
	return clone(self)
end

function i3k_sbean.fashion_save_worsted_req:decode(is)
	is:popString()
	self.fashionID = is:popNumber()
	self.propGroupId = is:popNumber()
end

function i3k_sbean.fashion_save_worsted_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.fashionID)
	os:pushNumber(self.propGroupId)
end


-- 显示/隐藏
i3k_sbean.fashion_setshow_req = i3k_class("fashion_setshow_req")
function i3k_sbean.fashion_setshow_req:ctor()
	self._pname_ = "fashion_setshow_req"
	--self.type:		int32	
	--self.isShow:		int32	
end

function i3k_sbean.fashion_setshow_req:clone()
	return clone(self)
end

function i3k_sbean.fashion_setshow_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.isShow = is:popNumber()
end

function i3k_sbean.fashion_setshow_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.isShow)
end


-- 龙印合成
i3k_sbean.seal_make_req = i3k_class("seal_make_req")
function i3k_sbean.seal_make_req:ctor()
	self._pname_ = "seal_make_req"
	--self.makeType:		int32	
end

function i3k_sbean.seal_make_req:clone()
	return clone(self)
end

function i3k_sbean.seal_make_req:decode(is)
	is:popString()
	self.makeType = is:popNumber()
end

function i3k_sbean.seal_make_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.makeType)
end


-- 龙印升阶
i3k_sbean.seal_upgrade_req = i3k_class("seal_upgrade_req")
function i3k_sbean.seal_upgrade_req:ctor()
	self._pname_ = "seal_upgrade_req"
end

function i3k_sbean.seal_upgrade_req:decode(is)
	is:popString()
end

function i3k_sbean.seal_upgrade_req:encode(os)
	os:pushString(self._pname_)
end


-- 龙印洗练
i3k_sbean.seal_enhance_req = i3k_class("seal_enhance_req")
function i3k_sbean.seal_enhance_req:ctor()
	self._pname_ = "seal_enhance_req"
end

function i3k_sbean.seal_enhance_req:decode(is)
	is:popString()
end

function i3k_sbean.seal_enhance_req:encode(os)
	os:pushString(self._pname_)
end


-- 龙印储存
i3k_sbean.seal_save_enhance_req = i3k_class("seal_save_enhance_req")
function i3k_sbean.seal_save_enhance_req:ctor()
	self._pname_ = "seal_save_enhance_req"
	--self.isSave:		int32	
end

function i3k_sbean.seal_save_enhance_req:clone()
	return clone(self)
end

function i3k_sbean.seal_save_enhance_req:decode(is)
	is:popString()
	self.isSave = is:popNumber()
end

function i3k_sbean.seal_save_enhance_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isSave)
end


-- 同步历练页签信息
i3k_sbean.expcoin_sync_req = i3k_class("expcoin_sync_req")
function i3k_sbean.expcoin_sync_req:ctor()
	self._pname_ = "expcoin_sync_req"
end

function i3k_sbean.expcoin_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.expcoin_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 提取历练
i3k_sbean.expcoin_extract_req = i3k_class("expcoin_extract_req")
function i3k_sbean.expcoin_extract_req:ctor()
	self._pname_ = "expcoin_extract_req"
end

function i3k_sbean.expcoin_extract_req:decode(is)
	is:popString()
end

function i3k_sbean.expcoin_extract_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步藏书页签信息
i3k_sbean.rarebook_sync_req = i3k_class("rarebook_sync_req")
function i3k_sbean.rarebook_sync_req:ctor()
	self._pname_ = "rarebook_sync_req"
end

function i3k_sbean.rarebook_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.rarebook_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 藏书存入
i3k_sbean.rarebook_push_req = i3k_class("rarebook_push_req")
function i3k_sbean.rarebook_push_req:ctor()
	self._pname_ = "rarebook_push_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.rarebook_push_req:clone()
	return clone(self)
end

function i3k_sbean.rarebook_push_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.rarebook_push_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 藏书取出
i3k_sbean.rarebook_pop_req = i3k_class("rarebook_pop_req")
function i3k_sbean.rarebook_pop_req:ctor()
	self._pname_ = "rarebook_pop_req"
	--self.books:		map[int32, int32]	
end

function i3k_sbean.rarebook_pop_req:clone()
	return clone(self)
end

function i3k_sbean.rarebook_pop_req:decode(is)
	is:popString()
	self.books = is:popNumberNumberMap()
end

function i3k_sbean.rarebook_pop_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.books)
end


-- 藏书解锁
i3k_sbean.rarebook_unlock_req = i3k_class("rarebook_unlock_req")
function i3k_sbean.rarebook_unlock_req:ctor()
	self._pname_ = "rarebook_unlock_req"
	--self.bookID:		int32	
end

function i3k_sbean.rarebook_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.rarebook_unlock_req:decode(is)
	is:popString()
	self.bookID = is:popNumber()
end

function i3k_sbean.rarebook_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bookID)
end


-- 藏书升级
i3k_sbean.rarebook_lvlup_req = i3k_class("rarebook_lvlup_req")
function i3k_sbean.rarebook_lvlup_req:ctor()
	self._pname_ = "rarebook_lvlup_req"
	--self.bookID:		int32	
end

function i3k_sbean.rarebook_lvlup_req:clone()
	return clone(self)
end

function i3k_sbean.rarebook_lvlup_req:decode(is)
	is:popString()
	self.bookID = is:popNumber()
end

function i3k_sbean.rarebook_lvlup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bookID)
end


-- 同步参悟页签信息
i3k_sbean.grasp_sync_req = i3k_class("grasp_sync_req")
function i3k_sbean.grasp_sync_req:ctor()
	self._pname_ = "grasp_sync_req"
end

function i3k_sbean.grasp_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.grasp_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 参悟
i3k_sbean.grasp_impl_req = i3k_class("grasp_impl_req")
function i3k_sbean.grasp_impl_req:ctor()
	self._pname_ = "grasp_impl_req"
	--self.graspID:		int32	
end

function i3k_sbean.grasp_impl_req:clone()
	return clone(self)
end

function i3k_sbean.grasp_impl_req:decode(is)
	is:popString()
	self.graspID = is:popNumber()
end

function i3k_sbean.grasp_impl_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.graspID)
end


-- 参悟次数购买
i3k_sbean.grasp_time_buy_req = i3k_class("grasp_time_buy_req")
function i3k_sbean.grasp_time_buy_req:ctor()
	self._pname_ = "grasp_time_buy_req"
	--self.time:		int32	
end

function i3k_sbean.grasp_time_buy_req:clone()
	return clone(self)
end

function i3k_sbean.grasp_time_buy_req:decode(is)
	is:popString()
	self.time = is:popNumber()
end

function i3k_sbean.grasp_time_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.time)
end


-- 参悟CD时间重置
i3k_sbean.grasp_reset_req = i3k_class("grasp_reset_req")
function i3k_sbean.grasp_reset_req:ctor()
	self._pname_ = "grasp_reset_req"
end

function i3k_sbean.grasp_reset_req:decode(is)
	is:popString()
end

function i3k_sbean.grasp_reset_req:encode(os)
	os:pushString(self._pname_)
end


-- 购买乾坤点
i3k_sbean.dmgtransfer_buypoint_req = i3k_class("dmgtransfer_buypoint_req")
function i3k_sbean.dmgtransfer_buypoint_req:ctor()
	self._pname_ = "dmgtransfer_buypoint_req"
	--self.discount:		int8	
end

function i3k_sbean.dmgtransfer_buypoint_req:clone()
	return clone(self)
end

function i3k_sbean.dmgtransfer_buypoint_req:decode(is)
	is:popString()
	self.discount = is:popNumber()
end

function i3k_sbean.dmgtransfer_buypoint_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.discount)
end


-- 投入乾坤点
i3k_sbean.dmgtransfer_putpoint_req = i3k_class("dmgtransfer_putpoint_req")
function i3k_sbean.dmgtransfer_putpoint_req:ctor()
	self._pname_ = "dmgtransfer_putpoint_req"
	--self.id:		int32	
end

function i3k_sbean.dmgtransfer_putpoint_req:clone()
	return clone(self)
end

function i3k_sbean.dmgtransfer_putpoint_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.dmgtransfer_putpoint_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 乾坤升级
i3k_sbean.dmgtransfer_lvlup_req = i3k_class("dmgtransfer_lvlup_req")
function i3k_sbean.dmgtransfer_lvlup_req:ctor()
	self._pname_ = "dmgtransfer_lvlup_req"
	--self.id:		int32	
end

function i3k_sbean.dmgtransfer_lvlup_req:clone()
	return clone(self)
end

function i3k_sbean.dmgtransfer_lvlup_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.dmgtransfer_lvlup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 重置
i3k_sbean.dmgtransfer_reset_req = i3k_class("dmgtransfer_reset_req")
function i3k_sbean.dmgtransfer_reset_req:ctor()
	self._pname_ = "dmgtransfer_reset_req"
end

function i3k_sbean.dmgtransfer_reset_req:decode(is)
	is:popString()
end

function i3k_sbean.dmgtransfer_reset_req:encode(os)
	os:pushString(self._pname_)
end


-- 指引
i3k_sbean.lead_info_set = i3k_class("lead_info_set")
function i3k_sbean.lead_info_set:ctor()
	self._pname_ = "lead_info_set"
	--self.id:		int32	
end

function i3k_sbean.lead_info_set:clone()
	return clone(self)
end

function i3k_sbean.lead_info_set:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.lead_info_set:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 强制剧情
i3k_sbean.lead_plot_set = i3k_class("lead_plot_set")
function i3k_sbean.lead_plot_set:ctor()
	self._pname_ = "lead_plot_set"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.lead_plot_set:clone()
	return clone(self)
end

function i3k_sbean.lead_plot_set:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.lead_plot_set:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 同步用户调研信息
i3k_sbean.usersurvey_sync_req = i3k_class("usersurvey_sync_req")
function i3k_sbean.usersurvey_sync_req:ctor()
	self._pname_ = "usersurvey_sync_req"
end

function i3k_sbean.usersurvey_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.usersurvey_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 用户调研提交答案
i3k_sbean.usersurvey_submit_req = i3k_class("usersurvey_submit_req")
function i3k_sbean.usersurvey_submit_req:ctor()
	self._pname_ = "usersurvey_submit_req"
	--self.seq:		int32	
	--self.answer:		set[int32]	
end

function i3k_sbean.usersurvey_submit_req:clone()
	return clone(self)
end

function i3k_sbean.usersurvey_submit_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
	self.answer = is:popNumberSet()
end

function i3k_sbean.usersurvey_submit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
	os:pushNumberSet(self.answer)
end


-- 用户调研结束领取奖励
i3k_sbean.usersurvey_reward_req = i3k_class("usersurvey_reward_req")
function i3k_sbean.usersurvey_reward_req:ctor()
	self._pname_ = "usersurvey_reward_req"
end

function i3k_sbean.usersurvey_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.usersurvey_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步登陆有礼信息
i3k_sbean.cblogingift_sync_req = i3k_class("cblogingift_sync_req")
function i3k_sbean.cblogingift_sync_req:ctor()
	self._pname_ = "cblogingift_sync_req"
end

function i3k_sbean.cblogingift_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.cblogingift_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 登陆有礼领奖
i3k_sbean.cblogingift_take_req = i3k_class("cblogingift_take_req")
function i3k_sbean.cblogingift_take_req:ctor()
	self._pname_ = "cblogingift_take_req"
	--self.dayNum:		int32	
end

function i3k_sbean.cblogingift_take_req:clone()
	return clone(self)
end

function i3k_sbean.cblogingift_take_req:decode(is)
	is:popString()
	self.dayNum = is:popNumber()
end

function i3k_sbean.cblogingift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayNum)
end


-- 升级送VIP、钻石
i3k_sbean.cblvlupgift_sync_req = i3k_class("cblvlupgift_sync_req")
function i3k_sbean.cblvlupgift_sync_req:ctor()
	self._pname_ = "cblvlupgift_sync_req"
end

function i3k_sbean.cblvlupgift_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.cblvlupgift_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 升级送VIP、钻石(领奖)
i3k_sbean.cblvlupgift_take_req = i3k_class("cblvlupgift_take_req")
function i3k_sbean.cblvlupgift_take_req:ctor()
	self._pname_ = "cblvlupgift_take_req"
	--self.seq:		int32	
end

function i3k_sbean.cblvlupgift_take_req:clone()
	return clone(self)
end

function i3k_sbean.cblvlupgift_take_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
end

function i3k_sbean.cblvlupgift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
end


-- 同步完善资料拿大奖信息
i3k_sbean.userdata_sync_req = i3k_class("userdata_sync_req")
function i3k_sbean.userdata_sync_req:ctor()
	self._pname_ = "userdata_sync_req"
end

function i3k_sbean.userdata_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.userdata_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 资料修改
i3k_sbean.userdata_modify_req = i3k_class("userdata_modify_req")
function i3k_sbean.userdata_modify_req:ctor()
	self._pname_ = "userdata_modify_req"
	--self.qq:		string	
	--self.cellphone:		string	
	--self.isOldUser:		int8	
end

function i3k_sbean.userdata_modify_req:clone()
	return clone(self)
end

function i3k_sbean.userdata_modify_req:decode(is)
	is:popString()
	self.qq = is:popString()
	self.cellphone = is:popString()
	self.isOldUser = is:popNumber()
end

function i3k_sbean.userdata_modify_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.qq)
	os:pushString(self.cellphone)
	os:pushNumber(self.isOldUser)
end


-- 完善资料领奖
i3k_sbean.userdata_reward_req = i3k_class("userdata_reward_req")
function i3k_sbean.userdata_reward_req:ctor()
	self._pname_ = "userdata_reward_req"
end

function i3k_sbean.userdata_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.userdata_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步封测倒计时信息
i3k_sbean.cbcountdowngift_sync_req = i3k_class("cbcountdowngift_sync_req")
function i3k_sbean.cbcountdowngift_sync_req:ctor()
	self._pname_ = "cbcountdowngift_sync_req"
end

function i3k_sbean.cbcountdowngift_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.cbcountdowngift_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 封测倒计时领奖
i3k_sbean.cbcountdowngift_take_req = i3k_class("cbcountdowngift_take_req")
function i3k_sbean.cbcountdowngift_take_req:ctor()
	self._pname_ = "cbcountdowngift_take_req"
	--self.seq:		int32	
end

function i3k_sbean.cbcountdowngift_take_req:clone()
	return clone(self)
end

function i3k_sbean.cbcountdowngift_take_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
end

function i3k_sbean.cbcountdowngift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
end


-- 同步限时领奖信息
i3k_sbean.ontimegift_sync_req = i3k_class("ontimegift_sync_req")
function i3k_sbean.ontimegift_sync_req:ctor()
	self._pname_ = "ontimegift_sync_req"
end

function i3k_sbean.ontimegift_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.ontimegift_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 限时领奖领取奖励
i3k_sbean.ontimegift_take_req = i3k_class("ontimegift_take_req")
function i3k_sbean.ontimegift_take_req:ctor()
	self._pname_ = "ontimegift_take_req"
	--self.dayNum:		int32	
end

function i3k_sbean.ontimegift_take_req:clone()
	return clone(self)
end

function i3k_sbean.ontimegift_take_req:decode(is)
	is:popString()
	self.dayNum = is:popNumber()
end

function i3k_sbean.ontimegift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.dayNum)
end


-- 同步强化比拼信息
i3k_sbean.strengthengift_sync_req = i3k_class("strengthengift_sync_req")
function i3k_sbean.strengthengift_sync_req:ctor()
	self._pname_ = "strengthengift_sync_req"
end

function i3k_sbean.strengthengift_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.strengthengift_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 限时强化比拼奖励
i3k_sbean.strengthengift_take_req = i3k_class("strengthengift_take_req")
function i3k_sbean.strengthengift_take_req:ctor()
	self._pname_ = "strengthengift_take_req"
	--self.strengthenNum:		int32	
end

function i3k_sbean.strengthengift_take_req:clone()
	return clone(self)
end

function i3k_sbean.strengthengift_take_req:decode(is)
	is:popString()
	self.strengthenNum = is:popNumber()
end

function i3k_sbean.strengthengift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.strengthenNum)
end


-- 同步官网调研信息
i3k_sbean.official_research_sync_req = i3k_class("official_research_sync_req")
function i3k_sbean.official_research_sync_req:ctor()
	self._pname_ = "official_research_sync_req"
end

function i3k_sbean.official_research_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.official_research_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 限时官网调研奖励
i3k_sbean.official_research_take_req = i3k_class("official_research_take_req")
function i3k_sbean.official_research_take_req:ctor()
	self._pname_ = "official_research_take_req"
end

function i3k_sbean.official_research_take_req:decode(is)
	is:popString()
end

function i3k_sbean.official_research_take_req:encode(os)
	os:pushString(self._pname_)
end


-- 设置当前的永久称号
i3k_sbean.permanenttitle_set_req = i3k_class("permanenttitle_set_req")
function i3k_sbean.permanenttitle_set_req:ctor()
	self._pname_ = "permanenttitle_set_req"
	--self.id:		int32	
end

function i3k_sbean.permanenttitle_set_req:clone()
	return clone(self)
end

function i3k_sbean.permanenttitle_set_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.permanenttitle_set_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 设置当前的时效称号
i3k_sbean.timedtitle_set_req = i3k_class("timedtitle_set_req")
function i3k_sbean.timedtitle_set_req:ctor()
	self._pname_ = "timedtitle_set_req"
	--self.id:		int32	
	--self.state:		int32	
end

function i3k_sbean.timedtitle_set_req:clone()
	return clone(self)
end

function i3k_sbean.timedtitle_set_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.state = is:popNumber()
end

function i3k_sbean.timedtitle_set_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.state)
end


-- 解锁新的称号位
i3k_sbean.titleslot_unlock_req = i3k_class("titleslot_unlock_req")
function i3k_sbean.titleslot_unlock_req:ctor()
	self._pname_ = "titleslot_unlock_req"
	--self.slotnum:		int32	
end

function i3k_sbean.titleslot_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.titleslot_unlock_req:decode(is)
	is:popString()
	self.slotnum = is:popNumber()
end

function i3k_sbean.titleslot_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.slotnum)
end


-- 支线任务接取
i3k_sbean.branch_task_take_req = i3k_class("branch_task_take_req")
function i3k_sbean.branch_task_take_req:ctor()
	self._pname_ = "branch_task_take_req"
	--self.groupId:		int32	
end

function i3k_sbean.branch_task_take_req:clone()
	return clone(self)
end

function i3k_sbean.branch_task_take_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
end

function i3k_sbean.branch_task_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
end


-- 支线任务放弃
i3k_sbean.branch_task_quit_req = i3k_class("branch_task_quit_req")
function i3k_sbean.branch_task_quit_req:ctor()
	self._pname_ = "branch_task_quit_req"
	--self.groupId:		int32	
end

function i3k_sbean.branch_task_quit_req:clone()
	return clone(self)
end

function i3k_sbean.branch_task_quit_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
end

function i3k_sbean.branch_task_quit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
end


-- 支线任务交付
i3k_sbean.branch_task_finish_req = i3k_class("branch_task_finish_req")
function i3k_sbean.branch_task_finish_req:ctor()
	self._pname_ = "branch_task_finish_req"
	--self.groupId:		int32	
end

function i3k_sbean.branch_task_finish_req:clone()
	return clone(self)
end

function i3k_sbean.branch_task_finish_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
end

function i3k_sbean.branch_task_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
end


-- 史诗任务接取
i3k_sbean.epic_task_take_req = i3k_class("epic_task_take_req")
function i3k_sbean.epic_task_take_req:ctor()
	self._pname_ = "epic_task_take_req"
	--self.seriesID:		int32	
	--self.groupID:		int32	
end

function i3k_sbean.epic_task_take_req:clone()
	return clone(self)
end

function i3k_sbean.epic_task_take_req:decode(is)
	is:popString()
	self.seriesID = is:popNumber()
	self.groupID = is:popNumber()
end

function i3k_sbean.epic_task_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seriesID)
	os:pushNumber(self.groupID)
end


-- 史诗任务领奖
i3k_sbean.epic_task_reward_req = i3k_class("epic_task_reward_req")
function i3k_sbean.epic_task_reward_req:ctor()
	self._pname_ = "epic_task_reward_req"
	--self.seriesID:		int32	
	--self.groupID:		int32	
end

function i3k_sbean.epic_task_reward_req:clone()
	return clone(self)
end

function i3k_sbean.epic_task_reward_req:decode(is)
	is:popString()
	self.seriesID = is:popNumber()
	self.groupID = is:popNumber()
end

function i3k_sbean.epic_task_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seriesID)
	os:pushNumber(self.groupID)
end


-- 史诗任务放弃
i3k_sbean.epic_task_quit_req = i3k_class("epic_task_quit_req")
function i3k_sbean.epic_task_quit_req:ctor()
	self._pname_ = "epic_task_quit_req"
	--self.seriesID:		int32	
	--self.groupID:		int32	
end

function i3k_sbean.epic_task_quit_req:clone()
	return clone(self)
end

function i3k_sbean.epic_task_quit_req:decode(is)
	is:popString()
	self.seriesID = is:popNumber()
	self.groupID = is:popNumber()
end

function i3k_sbean.epic_task_quit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seriesID)
	os:pushNumber(self.groupID)
end


-- 同步爬塔数据
i3k_sbean.sync_tower_req = i3k_class("sync_tower_req")
function i3k_sbean.sync_tower_req:ctor()
	self._pname_ = "sync_tower_req"
end

function i3k_sbean.sync_tower_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_tower_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步战绩记录
i3k_sbean.tower_record_req = i3k_class("tower_record_req")
function i3k_sbean.tower_record_req:ctor()
	self._pname_ = "tower_record_req"
end

function i3k_sbean.tower_record_req:decode(is)
	is:popString()
end

function i3k_sbean.tower_record_req:encode(os)
	os:pushString(self._pname_)
end


-- 设置爬塔系统出战随从
i3k_sbean.tower_setpets_req = i3k_class("tower_setpets_req")
function i3k_sbean.tower_setpets_req:ctor()
	self._pname_ = "tower_setpets_req"
	--self.pets:		set[int32]	
end

function i3k_sbean.tower_setpets_req:clone()
	return clone(self)
end

function i3k_sbean.tower_setpets_req:decode(is)
	is:popString()
	self.pets = is:popNumberSet()
end

function i3k_sbean.tower_setpets_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.pets)
end


-- 开始战斗
i3k_sbean.tower_startfight_req = i3k_class("tower_startfight_req")
function i3k_sbean.tower_startfight_req:ctor()
	self._pname_ = "tower_startfight_req"
	--self.groupId:		int32	
	--self.floor:		int32	
end

function i3k_sbean.tower_startfight_req:clone()
	return clone(self)
end

function i3k_sbean.tower_startfight_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
	self.floor = is:popNumber()
end

function i3k_sbean.tower_startfight_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
	os:pushNumber(self.floor)
end


-- 购买挑战次数
i3k_sbean.tower_buytimes_req = i3k_class("tower_buytimes_req")
function i3k_sbean.tower_buytimes_req:ctor()
	self._pname_ = "tower_buytimes_req"
	--self.times:		int32	
end

function i3k_sbean.tower_buytimes_req:clone()
	return clone(self)
end

function i3k_sbean.tower_buytimes_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.tower_buytimes_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 爬塔副本扫荡
i3k_sbean.tower_sweep_req = i3k_class("tower_sweep_req")
function i3k_sbean.tower_sweep_req:ctor()
	self._pname_ = "tower_sweep_req"
	--self.groupId:		int32	
	--self.floor:		int32	
end

function i3k_sbean.tower_sweep_req:clone()
	return clone(self)
end

function i3k_sbean.tower_sweep_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
	self.floor = is:popNumber()
end

function i3k_sbean.tower_sweep_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
	os:pushNumber(self.floor)
end


-- 爬塔副本一键扫荡
i3k_sbean.tower_new_sweep_req = i3k_class("tower_new_sweep_req")
function i3k_sbean.tower_new_sweep_req:ctor()
	self._pname_ = "tower_new_sweep_req"
	--self.floors:		vector[TowerSweepReqInfo]	
end

function i3k_sbean.tower_new_sweep_req:clone()
	return clone(self)
end

function i3k_sbean.tower_new_sweep_req:decode(is)
	is:popString()
	self.floors = is:popList(i3k_sbean.TowerSweepReqInfo)
end

function i3k_sbean.tower_new_sweep_req:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.floors)
end


-- 同步声望数据
i3k_sbean.sync_towerfame_req = i3k_class("sync_towerfame_req")
function i3k_sbean.sync_towerfame_req:ctor()
	self._pname_ = "sync_towerfame_req"
end

function i3k_sbean.sync_towerfame_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_towerfame_req:encode(os)
	os:pushString(self._pname_)
end


-- 爬塔声望捐赠物品
i3k_sbean.tower_donate_req = i3k_class("tower_donate_req")
function i3k_sbean.tower_donate_req:ctor()
	self._pname_ = "tower_donate_req"
	--self.group:		int32	
	--self.itemId:		int32	
end

function i3k_sbean.tower_donate_req:clone()
	return clone(self)
end

function i3k_sbean.tower_donate_req:decode(is)
	is:popString()
	self.group = is:popNumber()
	self.itemId = is:popNumber()
end

function i3k_sbean.tower_donate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.group)
	os:pushNumber(self.itemId)
end


-- 爬塔声望一键捐赠物品 (donateType   1 捐赠前两种  2捐赠第三种)
i3k_sbean.tower_onekey_donate_req = i3k_class("tower_onekey_donate_req")
function i3k_sbean.tower_onekey_donate_req:ctor()
	self._pname_ = "tower_onekey_donate_req"
	--self.donateType:		int32	
	--self.group:		int32	
end

function i3k_sbean.tower_onekey_donate_req:clone()
	return clone(self)
end

function i3k_sbean.tower_onekey_donate_req:decode(is)
	is:popString()
	self.donateType = is:popNumber()
	self.group = is:popNumber()
end

function i3k_sbean.tower_onekey_donate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.donateType)
	os:pushNumber(self.group)
end


-- 爬塔领取声望奖励
i3k_sbean.take_towerfame_req = i3k_class("take_towerfame_req")
function i3k_sbean.take_towerfame_req:ctor()
	self._pname_ = "take_towerfame_req"
	--self.group:		int32	
	--self.seq:		int32	
end

function i3k_sbean.take_towerfame_req:clone()
	return clone(self)
end

function i3k_sbean.take_towerfame_req:decode(is)
	is:popString()
	self.group = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.take_towerfame_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.group)
	os:pushNumber(self.seq)
end


-- 进入秘境
i3k_sbean.enter_secretmap_req = i3k_class("enter_secretmap_req")
function i3k_sbean.enter_secretmap_req:ctor()
	self._pname_ = "enter_secretmap_req"
end

function i3k_sbean.enter_secretmap_req:decode(is)
	is:popString()
end

function i3k_sbean.enter_secretmap_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取秘境任务奖励
i3k_sbean.take_secretreward_req = i3k_class("take_secretreward_req")
function i3k_sbean.take_secretreward_req:ctor()
	self._pname_ = "take_secretreward_req"
	--self.id:		int32	
end

function i3k_sbean.take_secretreward_req:clone()
	return clone(self)
end

function i3k_sbean.take_secretreward_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.take_secretreward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 一键完成秘境任务
i3k_sbean.onekey_finish_secrettask_req = i3k_class("onekey_finish_secrettask_req")
function i3k_sbean.onekey_finish_secrettask_req:ctor()
	self._pname_ = "onekey_finish_secrettask_req"
	--self.id:		int32	
end

function i3k_sbean.onekey_finish_secrettask_req:clone()
	return clone(self)
end

function i3k_sbean.onekey_finish_secrettask_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.onekey_finish_secrettask_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 帮派运镖同步
i3k_sbean.sect_deliver_sync_req = i3k_class("sect_deliver_sync_req")
function i3k_sbean.sect_deliver_sync_req:ctor()
	self._pname_ = "sect_deliver_sync_req"
end

function i3k_sbean.sect_deliver_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派运镖刷新
i3k_sbean.sect_deliver_refresh_req = i3k_class("sect_deliver_refresh_req")
function i3k_sbean.sect_deliver_refresh_req:ctor()
	self._pname_ = "sect_deliver_refresh_req"
end

function i3k_sbean.sect_deliver_refresh_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_refresh_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派运镖投保
i3k_sbean.sect_deliver_protect_req = i3k_class("sect_deliver_protect_req")
function i3k_sbean.sect_deliver_protect_req:ctor()
	self._pname_ = "sect_deliver_protect_req"
end

function i3k_sbean.sect_deliver_protect_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_protect_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派运镖开始运镖
i3k_sbean.sect_deliver_begin_req = i3k_class("sect_deliver_begin_req")
function i3k_sbean.sect_deliver_begin_req:ctor()
	self._pname_ = "sect_deliver_begin_req"
	--self.routeId:		int32	
	--self.vehicleId:		int32	
end

function i3k_sbean.sect_deliver_begin_req:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_begin_req:decode(is)
	is:popString()
	self.routeId = is:popNumber()
	self.vehicleId = is:popNumber()
end

function i3k_sbean.sect_deliver_begin_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.routeId)
	os:pushNumber(self.vehicleId)
end


-- 帮派运镖快速运镖
i3k_sbean.sect_deliver_quick_finish_req = i3k_class("sect_deliver_quick_finish_req")
function i3k_sbean.sect_deliver_quick_finish_req:ctor()
	self._pname_ = "sect_deliver_quick_finish_req"
	--self.taskId:		int32	
	--self.routeId:		int32	
end

function i3k_sbean.sect_deliver_quick_finish_req:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_quick_finish_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
	self.routeId = is:popNumber()
end

function i3k_sbean.sect_deliver_quick_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
	os:pushNumber(self.routeId)
end


-- 帮派运镖求援
i3k_sbean.sect_deliver_search_help_req = i3k_class("sect_deliver_search_help_req")
function i3k_sbean.sect_deliver_search_help_req:ctor()
	self._pname_ = "sect_deliver_search_help_req"
end

function i3k_sbean.sect_deliver_search_help_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_search_help_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派运镖响应求援
i3k_sbean.sect_deliver_on_help_req = i3k_class("sect_deliver_on_help_req")
function i3k_sbean.sect_deliver_on_help_req:ctor()
	self._pname_ = "sect_deliver_on_help_req"
	--self.roleId:		int32	
	--self.targetLocation:		MapLocation	
	--self.line:		int32	
end

function i3k_sbean.sect_deliver_on_help_req:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_on_help_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.targetLocation = is:pop(i3k_sbean.MapLocation)
	self.line = is:popNumber()
end

function i3k_sbean.sect_deliver_on_help_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:push(self.targetLocation)
	os:pushNumber(self.line)
end


-- 帮派运镖取消运镖
i3k_sbean.sect_deliver_cancel_req = i3k_class("sect_deliver_cancel_req")
function i3k_sbean.sect_deliver_cancel_req:ctor()
	self._pname_ = "sect_deliver_cancel_req"
end

function i3k_sbean.sect_deliver_cancel_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_cancel_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派运镖完成
i3k_sbean.sect_deliver_finish_req = i3k_class("sect_deliver_finish_req")
function i3k_sbean.sect_deliver_finish_req:ctor()
	self._pname_ = "sect_deliver_finish_req"
end

function i3k_sbean.sect_deliver_finish_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_finish_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派祝福同步
i3k_sbean.sect_deliver_sync_wish_req = i3k_class("sect_deliver_sync_wish_req")
function i3k_sbean.sect_deliver_sync_wish_req:ctor()
	self._pname_ = "sect_deliver_sync_wish_req"
end

function i3k_sbean.sect_deliver_sync_wish_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_sync_wish_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派祝福祝福
i3k_sbean.sect_deliver_add_wish_req = i3k_class("sect_deliver_add_wish_req")
function i3k_sbean.sect_deliver_add_wish_req:ctor()
	self._pname_ = "sect_deliver_add_wish_req"
end

function i3k_sbean.sect_deliver_add_wish_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_add_wish_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派祝福保存
i3k_sbean.sect_deliver_save_wish_req = i3k_class("sect_deliver_save_wish_req")
function i3k_sbean.sect_deliver_save_wish_req:ctor()
	self._pname_ = "sect_deliver_save_wish_req"
end

function i3k_sbean.sect_deliver_save_wish_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_save_wish_req:encode(os)
	os:pushString(self._pname_)
end


-- 劫镖任务接取
i3k_sbean.sect_rob_task_take_req = i3k_class("sect_rob_task_take_req")
function i3k_sbean.sect_rob_task_take_req:ctor()
	self._pname_ = "sect_rob_task_take_req"
end

function i3k_sbean.sect_rob_task_take_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_rob_task_take_req:encode(os)
	os:pushString(self._pname_)
end


-- 劫镖任务放弃
i3k_sbean.sect_rob_task_cancel_req = i3k_class("sect_rob_task_cancel_req")
function i3k_sbean.sect_rob_task_cancel_req:ctor()
	self._pname_ = "sect_rob_task_cancel_req"
end

function i3k_sbean.sect_rob_task_cancel_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_rob_task_cancel_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派运镖商城同步协议
i3k_sbean.sect_deliver_shopsync_req = i3k_class("sect_deliver_shopsync_req")
function i3k_sbean.sect_deliver_shopsync_req:ctor()
	self._pname_ = "sect_deliver_shopsync_req"
end

function i3k_sbean.sect_deliver_shopsync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_deliver_shopsync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派运镖商城刷新协议
i3k_sbean.sect_deliver_shoprefresh_req = i3k_class("sect_deliver_shoprefresh_req")
function i3k_sbean.sect_deliver_shoprefresh_req:ctor()
	self._pname_ = "sect_deliver_shoprefresh_req"
	--self.times:		int32	
	--self.isSecondType:		int32	
end

function i3k_sbean.sect_deliver_shoprefresh_req:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_shoprefresh_req:decode(is)
	is:popString()
	self.times = is:popNumber()
	self.isSecondType = is:popNumber()
end

function i3k_sbean.sect_deliver_shoprefresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
	os:pushNumber(self.isSecondType)
end


-- 帮派运镖商城买商品协议
i3k_sbean.sect_deliver_shopbuy_req = i3k_class("sect_deliver_shopbuy_req")
function i3k_sbean.sect_deliver_shopbuy_req:ctor()
	self._pname_ = "sect_deliver_shopbuy_req"
	--self.seq:		int32	
	--self.discount:		int32	
end

function i3k_sbean.sect_deliver_shopbuy_req:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_shopbuy_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
	self.discount = is:popNumber()
end

function i3k_sbean.sect_deliver_shopbuy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
	os:pushNumber(self.discount)
end


-- 帮派运镖抽奖协议
i3k_sbean.sect_deliver_lottery_req = i3k_class("sect_deliver_lottery_req")
function i3k_sbean.sect_deliver_lottery_req:ctor()
	self._pname_ = "sect_deliver_lottery_req"
	--self.lotteryID:		int32	
	--self.times:		int32	
end

function i3k_sbean.sect_deliver_lottery_req:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_lottery_req:decode(is)
	is:popString()
	self.lotteryID = is:popNumber()
	self.times = is:popNumber()
end

function i3k_sbean.sect_deliver_lottery_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.lotteryID)
	os:pushNumber(self.times)
end


-- 同步工坊
i3k_sbean.produce_workshopsync_req = i3k_class("produce_workshopsync_req")
function i3k_sbean.produce_workshopsync_req:ctor()
	self._pname_ = "produce_workshopsync_req"
end

function i3k_sbean.produce_workshopsync_req:decode(is)
	is:popString()
end

function i3k_sbean.produce_workshopsync_req:encode(os)
	os:pushString(self._pname_)
end


-- 使用卷轴获得新配方请求
i3k_sbean.produce_createnewrecipe_req = i3k_class("produce_createnewrecipe_req")
function i3k_sbean.produce_createnewrecipe_req:ctor()
	self._pname_ = "produce_createnewrecipe_req"
	--self.reelID:		int32	
end

function i3k_sbean.produce_createnewrecipe_req:clone()
	return clone(self)
end

function i3k_sbean.produce_createnewrecipe_req:decode(is)
	is:popString()
	self.reelID = is:popNumber()
end

function i3k_sbean.produce_createnewrecipe_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.reelID)
end


-- 制造请求
i3k_sbean.produce_produce_req = i3k_class("produce_produce_req")
function i3k_sbean.produce_produce_req:ctor()
	self._pname_ = "produce_produce_req"
	--self.recipeID:		int32	
end

function i3k_sbean.produce_produce_req:clone()
	return clone(self)
end

function i3k_sbean.produce_produce_req:decode(is)
	is:popString()
	self.recipeID = is:popNumber()
end

function i3k_sbean.produce_produce_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.recipeID)
end


-- 分解装备请求
i3k_sbean.produce_split_req = i3k_class("produce_split_req")
function i3k_sbean.produce_split_req:ctor()
	self._pname_ = "produce_split_req"
	--self.equipid:		int32	
	--self.equipGuid:		string	
end

function i3k_sbean.produce_split_req:clone()
	return clone(self)
end

function i3k_sbean.produce_split_req:decode(is)
	is:popString()
	self.equipid = is:popNumber()
	self.equipGuid = is:popString()
end

function i3k_sbean.produce_split_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.equipid)
	os:pushString(self.equipGuid)
end


-- 炼化炉激活请求
i3k_sbean.produce_fusion_open_req = i3k_class("produce_fusion_open_req")
function i3k_sbean.produce_fusion_open_req:ctor()
	self._pname_ = "produce_fusion_open_req"
	--self.type:		int32	
end

function i3k_sbean.produce_fusion_open_req:clone()
	return clone(self)
end

function i3k_sbean.produce_fusion_open_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.produce_fusion_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 炼化请求
i3k_sbean.produce_fusion_req = i3k_class("produce_fusion_req")
function i3k_sbean.produce_fusion_req:ctor()
	self._pname_ = "produce_fusion_req"
	--self.consumeItems:		vector[DummyGoods]	
end

function i3k_sbean.produce_fusion_req:clone()
	return clone(self)
end

function i3k_sbean.produce_fusion_req:decode(is)
	is:popString()
	self.consumeItems = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.produce_fusion_req:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.consumeItems)
end


-- 分解能量购买请求
i3k_sbean.produce_splitspbuy_req = i3k_class("produce_splitspbuy_req")
function i3k_sbean.produce_splitspbuy_req:ctor()
	self._pname_ = "produce_splitspbuy_req"
	--self.times:		int32	
end

function i3k_sbean.produce_splitspbuy_req:clone()
	return clone(self)
end

function i3k_sbean.produce_splitspbuy_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.produce_splitspbuy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 背包道具合并
i3k_sbean.bag_merge_req = i3k_class("bag_merge_req")
function i3k_sbean.bag_merge_req:ctor()
	self._pname_ = "bag_merge_req"
	--self.itemId:		int32	
end

function i3k_sbean.bag_merge_req:clone()
	return clone(self)
end

function i3k_sbean.bag_merge_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
end

function i3k_sbean.bag_merge_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
end


-- 背包道具合并
i3k_sbean.bag_merge_all_req = i3k_class("bag_merge_all_req")
function i3k_sbean.bag_merge_all_req:ctor()
	self._pname_ = "bag_merge_all_req"
	--self.itemIds:		vector[int32]	
end

function i3k_sbean.bag_merge_all_req:clone()
	return clone(self)
end

function i3k_sbean.bag_merge_all_req:decode(is)
	is:popString()
	self.itemIds = is:popNumberList()
end

function i3k_sbean.bag_merge_all_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.itemIds)
end


-- 七日留存活动领取奖励
i3k_sbean.rmactivity_takereward_req = i3k_class("rmactivity_takereward_req")
function i3k_sbean.rmactivity_takereward_req:ctor()
	self._pname_ = "rmactivity_takereward_req"
	--self.id:		int32	
end

function i3k_sbean.rmactivity_takereward_req:clone()
	return clone(self)
end

function i3k_sbean.rmactivity_takereward_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.rmactivity_takereward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 玩家改名(type 1:消耗非绑元宝 2：使用道具)
i3k_sbean.role_rename_req = i3k_class("role_rename_req")
function i3k_sbean.role_rename_req:ctor()
	self._pname_ = "role_rename_req"
	--self.newName:		string	
	--self.type:		int32	
end

function i3k_sbean.role_rename_req:clone()
	return clone(self)
end

function i3k_sbean.role_rename_req:decode(is)
	is:popString()
	self.newName = is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.role_rename_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.newName)
	os:pushNumber(self.type)
end


-- 上马请求
i3k_sbean.horse_ride_req = i3k_class("horse_ride_req")
function i3k_sbean.horse_ride_req:ctor()
	self._pname_ = "horse_ride_req"
end

function i3k_sbean.horse_ride_req:decode(is)
	is:popString()
end

function i3k_sbean.horse_ride_req:encode(os)
	os:pushString(self._pname_)
end


-- 下马请求
i3k_sbean.horse_unride_req = i3k_class("horse_unride_req")
function i3k_sbean.horse_unride_req:ctor()
	self._pname_ = "horse_unride_req"
end

function i3k_sbean.horse_unride_req:decode(is)
	is:popString()
end

function i3k_sbean.horse_unride_req:encode(os)
	os:pushString(self._pname_)
end


-- 邀请骑乘协议
i3k_sbean.mulhorse_invite_req = i3k_class("mulhorse_invite_req")
function i3k_sbean.mulhorse_invite_req:ctor()
	self._pname_ = "mulhorse_invite_req"
	--self.roleID:		int32	
end

function i3k_sbean.mulhorse_invite_req:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_invite_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.mulhorse_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 接收到骑乘邀请后选择是否同意操作：(-10:离得太远， -11:战斗状态，-20:指引状态，-21:忙，0:拒绝， 1:同意)
i3k_sbean.mulhorse_invitehandle_req = i3k_class("mulhorse_invitehandle_req")
function i3k_sbean.mulhorse_invitehandle_req:ctor()
	self._pname_ = "mulhorse_invitehandle_req"
	--self.inviter:		int32	
	--self.accept:		int32	
end

function i3k_sbean.mulhorse_invitehandle_req:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_invitehandle_req:decode(is)
	is:popString()
	self.inviter = is:popNumber()
	self.accept = is:popNumber()
end

function i3k_sbean.mulhorse_invitehandle_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.inviter)
	os:pushNumber(self.accept)
end


-- 申请多人骑乘
i3k_sbean.mulhorse_apply_req = i3k_class("mulhorse_apply_req")
function i3k_sbean.mulhorse_apply_req:ctor()
	self._pname_ = "mulhorse_apply_req"
	--self.roleID:		int32	
end

function i3k_sbean.mulhorse_apply_req:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_apply_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.mulhorse_apply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 接收到其他玩家骑乘申请后是否同意操作(-10:离得太远， -11:战斗状态，-20:指引状态，-21:忙，0:拒绝， 1:同意)
i3k_sbean.mulhorse_applyhandle_req = i3k_class("mulhorse_applyhandle_req")
function i3k_sbean.mulhorse_applyhandle_req:ctor()
	self._pname_ = "mulhorse_applyhandle_req"
	--self.roleID:		int32	
	--self.accept:		int32	
end

function i3k_sbean.mulhorse_applyhandle_req:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_applyhandle_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.accept = is:popNumber()
end

function i3k_sbean.mulhorse_applyhandle_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.accept)
end


-- 离开多人骑乘请求协议
i3k_sbean.mulhorse_leave_req = i3k_class("mulhorse_leave_req")
function i3k_sbean.mulhorse_leave_req:ctor()
	self._pname_ = "mulhorse_leave_req"
end

function i3k_sbean.mulhorse_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.mulhorse_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 剔除骑乘成员
i3k_sbean.mulhorse_kick_req = i3k_class("mulhorse_kick_req")
function i3k_sbean.mulhorse_kick_req:ctor()
	self._pname_ = "mulhorse_kick_req"
	--self.roleID:		int32	
end

function i3k_sbean.mulhorse_kick_req:clone()
	return clone(self)
end

function i3k_sbean.mulhorse_kick_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.mulhorse_kick_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 相依相偎邀请
i3k_sbean.staywith_invite_req = i3k_class("staywith_invite_req")
function i3k_sbean.staywith_invite_req:ctor()
	self._pname_ = "staywith_invite_req"
	--self.roleID:		int32	
end

function i3k_sbean.staywith_invite_req:clone()
	return clone(self)
end

function i3k_sbean.staywith_invite_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.staywith_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 接收到相依相偎邀请后选择是否同意操作：(-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙，0:拒绝， 1:同意)
i3k_sbean.staywith_invitehandle_req = i3k_class("staywith_invitehandle_req")
function i3k_sbean.staywith_invitehandle_req:ctor()
	self._pname_ = "staywith_invitehandle_req"
	--self.inviter:		int32	
	--self.accept:		int32	
end

function i3k_sbean.staywith_invitehandle_req:clone()
	return clone(self)
end

function i3k_sbean.staywith_invitehandle_req:decode(is)
	is:popString()
	self.inviter = is:popNumber()
	self.accept = is:popNumber()
end

function i3k_sbean.staywith_invitehandle_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.inviter)
	os:pushNumber(self.accept)
end


-- 取消相依相偎请求
i3k_sbean.staywith_leave_req = i3k_class("staywith_leave_req")
function i3k_sbean.staywith_leave_req:ctor()
	self._pname_ = "staywith_leave_req"
end

function i3k_sbean.staywith_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.staywith_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 么么哒
i3k_sbean.staywith_memeda_req = i3k_class("staywith_memeda_req")
function i3k_sbean.staywith_memeda_req:ctor()
	self._pname_ = "staywith_memeda_req"
end

function i3k_sbean.staywith_memeda_req:decode(is)
	is:popString()
end

function i3k_sbean.staywith_memeda_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步留言板请求
i3k_sbean.sync_message_board_req = i3k_class("sync_message_board_req")
function i3k_sbean.sync_message_board_req:ctor()
	self._pname_ = "sync_message_board_req"
end

function i3k_sbean.sync_message_board_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_message_board_req:encode(os)
	os:pushString(self._pname_)
end


-- 添加留言请求
i3k_sbean.add_message_board_req = i3k_class("add_message_board_req")
function i3k_sbean.add_message_board_req:ctor()
	self._pname_ = "add_message_board_req"
	--self.side:		int32	
	--self.msgId:		int32	
	--self.content:		string	
	--self.time:		int32	
	--self.anonymous:		int8	
	--self.isrewrite:		int32	
end

function i3k_sbean.add_message_board_req:clone()
	return clone(self)
end

function i3k_sbean.add_message_board_req:decode(is)
	is:popString()
	self.side = is:popNumber()
	self.msgId = is:popNumber()
	self.content = is:popString()
	self.time = is:popNumber()
	self.anonymous = is:popNumber()
	self.isrewrite = is:popNumber()
end

function i3k_sbean.add_message_board_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.side)
	os:pushNumber(self.msgId)
	os:pushString(self.content)
	os:pushNumber(self.time)
	os:pushNumber(self.anonymous)
	os:pushNumber(self.isrewrite)
end


-- 评论留言请求
i3k_sbean.comment_message_board_req = i3k_class("comment_message_board_req")
function i3k_sbean.comment_message_board_req:ctor()
	self._pname_ = "comment_message_board_req"
	--self.side:		int32	
	--self.msgId:		int32	
	--self.comment:		int32	
	--self.sendtime:		int32	
end

function i3k_sbean.comment_message_board_req:clone()
	return clone(self)
end

function i3k_sbean.comment_message_board_req:decode(is)
	is:popString()
	self.side = is:popNumber()
	self.msgId = is:popNumber()
	self.comment = is:popNumber()
	self.sendtime = is:popNumber()
end

function i3k_sbean.comment_message_board_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.side)
	os:pushNumber(self.msgId)
	os:pushNumber(self.comment)
	os:pushNumber(self.sendtime)
end


-- 修改文本请求
i3k_sbean.change_message_board_content_req = i3k_class("change_message_board_content_req")
function i3k_sbean.change_message_board_content_req:ctor()
	self._pname_ = "change_message_board_content_req"
	--self.side:		int32	
	--self.msgId:		int32	
	--self.content:		string	
	--self.sendtime:		int32	
end

function i3k_sbean.change_message_board_content_req:clone()
	return clone(self)
end

function i3k_sbean.change_message_board_content_req:decode(is)
	is:popString()
	self.side = is:popNumber()
	self.msgId = is:popNumber()
	self.content = is:popString()
	self.sendtime = is:popNumber()
end

function i3k_sbean.change_message_board_content_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.side)
	os:pushNumber(self.msgId)
	os:pushString(self.content)
	os:pushNumber(self.sendtime)
end


-- 同步日程表请求
i3k_sbean.schedule_sync_req = i3k_class("schedule_sync_req")
function i3k_sbean.schedule_sync_req:ctor()
	self._pname_ = "schedule_sync_req"
end

function i3k_sbean.schedule_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.schedule_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 日程表奖励请求
i3k_sbean.schedule_mapreward_req = i3k_class("schedule_mapreward_req")
function i3k_sbean.schedule_mapreward_req:ctor()
	self._pname_ = "schedule_mapreward_req"
	--self.sid:		int32	
end

function i3k_sbean.schedule_mapreward_req:clone()
	return clone(self)
end

function i3k_sbean.schedule_mapreward_req:decode(is)
	is:popString()
	self.sid = is:popNumber()
end

function i3k_sbean.schedule_mapreward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sid)
end


-- 保存引导关进度请求
i3k_sbean.save_guide_mapcopy_req = i3k_class("save_guide_mapcopy_req")
function i3k_sbean.save_guide_mapcopy_req:ctor()
	self._pname_ = "save_guide_mapcopy_req"
	--self.step:		int32	
end

function i3k_sbean.save_guide_mapcopy_req:clone()
	return clone(self)
end

function i3k_sbean.save_guide_mapcopy_req:decode(is)
	is:popString()
	self.step = is:popNumber()
end

function i3k_sbean.save_guide_mapcopy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.step)
end


-- 帮派邀请请求
i3k_sbean.sect_invite_req = i3k_class("sect_invite_req")
function i3k_sbean.sect_invite_req:ctor()
	self._pname_ = "sect_invite_req"
	--self.roleId:		int32	
end

function i3k_sbean.sect_invite_req:clone()
	return clone(self)
end

function i3k_sbean.sect_invite_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.sect_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 帮派邀请响应请求
i3k_sbean.sect_invite_response_req = i3k_class("sect_invite_response_req")
function i3k_sbean.sect_invite_response_req:ctor()
	self._pname_ = "sect_invite_response_req"
	--self.inviteId:		int32	
	--self.response:		int8	
end

function i3k_sbean.sect_invite_response_req:clone()
	return clone(self)
end

function i3k_sbean.sect_invite_response_req:decode(is)
	is:popString()
	self.inviteId = is:popNumber()
	self.response = is:popNumber()
end

function i3k_sbean.sect_invite_response_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.inviteId)
	os:pushNumber(self.response)
end


-- 解锁内甲请求
i3k_sbean.unlock_armor_type_req = i3k_class("unlock_armor_type_req")
function i3k_sbean.unlock_armor_type_req:ctor()
	self._pname_ = "unlock_armor_type_req"
	--self.type:		int32	
end

function i3k_sbean.unlock_armor_type_req:clone()
	return clone(self)
end

function i3k_sbean.unlock_armor_type_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.unlock_armor_type_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 内甲升阶请求
i3k_sbean.armor_uprank_req = i3k_class("armor_uprank_req")
function i3k_sbean.armor_uprank_req:ctor()
	self._pname_ = "armor_uprank_req"
	--self.type:		int32	
	--self.nextRank:		int32	
end

function i3k_sbean.armor_uprank_req:clone()
	return clone(self)
end

function i3k_sbean.armor_uprank_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.nextRank = is:popNumber()
end

function i3k_sbean.armor_uprank_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.nextRank)
end


-- 内甲升级天赋请求
i3k_sbean.armor_add_talent_req = i3k_class("armor_add_talent_req")
function i3k_sbean.armor_add_talent_req:ctor()
	self._pname_ = "armor_add_talent_req"
	--self.type:		int32	
	--self.talentId:		int32	
end

function i3k_sbean.armor_add_talent_req:clone()
	return clone(self)
end

function i3k_sbean.armor_add_talent_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.talentId = is:popNumber()
end

function i3k_sbean.armor_add_talent_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.talentId)
end


-- 内甲选择请求
i3k_sbean.armor_change_req = i3k_class("armor_change_req")
function i3k_sbean.armor_change_req:ctor()
	self._pname_ = "armor_change_req"
	--self.type:		int32	
end

function i3k_sbean.armor_change_req:clone()
	return clone(self)
end

function i3k_sbean.armor_change_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.armor_change_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 内甲升级请求
i3k_sbean.armor_up_level_req = i3k_class("armor_up_level_req")
function i3k_sbean.armor_up_level_req:ctor()
	self._pname_ = "armor_up_level_req"
	--self.type:		int32	
	--self.items:		map[int32, int32]	
end

function i3k_sbean.armor_up_level_req:clone()
	return clone(self)
end

function i3k_sbean.armor_up_level_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.armor_up_level_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumberNumberMap(self.items)
end


-- 设置内甲隐藏
i3k_sbean.armor_effecthide_req = i3k_class("armor_effecthide_req")
function i3k_sbean.armor_effecthide_req:ctor()
	self._pname_ = "armor_effecthide_req"
	--self.hide:		int32	
end

function i3k_sbean.armor_effecthide_req:clone()
	return clone(self)
end

function i3k_sbean.armor_effecthide_req:decode(is)
	is:popString()
	self.hide = is:popNumber()
end

function i3k_sbean.armor_effecthide_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hide)
end


-- 符文存入请求
i3k_sbean.rune_push_req = i3k_class("rune_push_req")
function i3k_sbean.rune_push_req:ctor()
	self._pname_ = "rune_push_req"
	--self.runes:		map[int32, int32]	
end

function i3k_sbean.rune_push_req:clone()
	return clone(self)
end

function i3k_sbean.rune_push_req:decode(is)
	is:popString()
	self.runes = is:popNumberNumberMap()
end

function i3k_sbean.rune_push_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.runes)
end


-- 符文提取请求
i3k_sbean.rune_pop_req = i3k_class("rune_pop_req")
function i3k_sbean.rune_pop_req:ctor()
	self._pname_ = "rune_pop_req"
	--self.runes:		map[int32, int32]	
end

function i3k_sbean.rune_pop_req:clone()
	return clone(self)
end

function i3k_sbean.rune_pop_req:decode(is)
	is:popString()
	self.runes = is:popNumberNumberMap()
end

function i3k_sbean.rune_pop_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.runes)
end


-- 重置天赋点请求
i3k_sbean.reset_talent_point_req = i3k_class("reset_talent_point_req")
function i3k_sbean.reset_talent_point_req:ctor()
	self._pname_ = "reset_talent_point_req"
	--self.type:		int32	
end

function i3k_sbean.reset_talent_point_req:clone()
	return clone(self)
end

function i3k_sbean.reset_talent_point_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.reset_talent_point_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 重置天赋点请求
i3k_sbean.solt_group_unlock_req = i3k_class("solt_group_unlock_req")
function i3k_sbean.solt_group_unlock_req:ctor()
	self._pname_ = "solt_group_unlock_req"
	--self.type:		int32	
	--self.soltGroupIndex:		int32	
end

function i3k_sbean.solt_group_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.solt_group_unlock_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.soltGroupIndex = is:popNumber()
end

function i3k_sbean.solt_group_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.soltGroupIndex)
end


-- 符文镶嵌请求
i3k_sbean.solt_push_rune_req = i3k_class("solt_push_rune_req")
function i3k_sbean.solt_push_rune_req:ctor()
	self._pname_ = "solt_push_rune_req"
	--self.type:		int32	
	--self.soltGroupIndex:		int32	
	--self.soltIndex:		int32	
	--self.runeId:		int32	
end

function i3k_sbean.solt_push_rune_req:clone()
	return clone(self)
end

function i3k_sbean.solt_push_rune_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.soltGroupIndex = is:popNumber()
	self.soltIndex = is:popNumber()
	self.runeId = is:popNumber()
end

function i3k_sbean.solt_push_rune_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.soltGroupIndex)
	os:pushNumber(self.soltIndex)
	os:pushNumber(self.runeId)
end


-- 符文之语镶嵌请求
i3k_sbean.lang_push_rune_req = i3k_class("lang_push_rune_req")
function i3k_sbean.lang_push_rune_req:ctor()
	self._pname_ = "lang_push_rune_req"
	--self.type:		int32	
	--self.soltGroupIndex:		int32	
	--self.langId:		int32	
end

function i3k_sbean.lang_push_rune_req:clone()
	return clone(self)
end

function i3k_sbean.lang_push_rune_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.soltGroupIndex = is:popNumber()
	self.langId = is:popNumber()
end

function i3k_sbean.lang_push_rune_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.soltGroupIndex)
	os:pushNumber(self.langId)
end


-- 符文许愿请求
i3k_sbean.rune_wish_req = i3k_class("rune_wish_req")
function i3k_sbean.rune_wish_req:ctor()
	self._pname_ = "rune_wish_req"
	--self.runes:		map[int32, int32]	
end

function i3k_sbean.rune_wish_req:clone()
	return clone(self)
end

function i3k_sbean.rune_wish_req:decode(is)
	is:popString()
	self.runes = is:popNumberNumberMap()
end

function i3k_sbean.rune_wish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.runes)
end


-- 符文之语升级请求
i3k_sbean.rune_upgrade_req = i3k_class("rune_upgrade_req")
function i3k_sbean.rune_upgrade_req:ctor()
	self._pname_ = "rune_upgrade_req"
	--self.runeID:		int32	
	--self.nextLvl:		int32	
end

function i3k_sbean.rune_upgrade_req:clone()
	return clone(self)
end

function i3k_sbean.rune_upgrade_req:decode(is)
	is:popString()
	self.runeID = is:popNumber()
	self.nextLvl = is:popNumber()
end

function i3k_sbean.rune_upgrade_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.runeID)
	os:pushNumber(self.nextLvl)
end


-- 存入仓库请求
i3k_sbean.put_in_warehouse_req = i3k_class("put_in_warehouse_req")
function i3k_sbean.put_in_warehouse_req:ctor()
	self._pname_ = "put_in_warehouse_req"
	--self.itemId:		int32	
	--self.itemCount:		int32	
	--self.warehouseType:		int32	
	--self.guid:		string	
end

function i3k_sbean.put_in_warehouse_req:clone()
	return clone(self)
end

function i3k_sbean.put_in_warehouse_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.itemCount = is:popNumber()
	self.warehouseType = is:popNumber()
	self.guid = is:popString()
end

function i3k_sbean.put_in_warehouse_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.itemCount)
	os:pushNumber(self.warehouseType)
	os:pushString(self.guid)
end


-- 取出物品请求
i3k_sbean.take_out_warehouse_req = i3k_class("take_out_warehouse_req")
function i3k_sbean.take_out_warehouse_req:ctor()
	self._pname_ = "take_out_warehouse_req"
	--self.itemId:		int32	
	--self.itemCount:		int32	
	--self.warehouseType:		int32	
	--self.guid:		string	
end

function i3k_sbean.take_out_warehouse_req:clone()
	return clone(self)
end

function i3k_sbean.take_out_warehouse_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.itemCount = is:popNumber()
	self.warehouseType = is:popNumber()
	self.guid = is:popString()
end

function i3k_sbean.take_out_warehouse_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.itemCount)
	os:pushNumber(self.warehouseType)
	os:pushString(self.guid)
end


-- 取出碎片请求
i3k_sbean.take_out_warehouse_piece_req = i3k_class("take_out_warehouse_piece_req")
function i3k_sbean.take_out_warehouse_piece_req:ctor()
	self._pname_ = "take_out_warehouse_piece_req"
	--self.items:		map[int32, int32]	
	--self.warehouseType:		int32	
end

function i3k_sbean.take_out_warehouse_piece_req:clone()
	return clone(self)
end

function i3k_sbean.take_out_warehouse_piece_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
	self.warehouseType = is:popNumber()
end

function i3k_sbean.take_out_warehouse_piece_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
	os:pushNumber(self.warehouseType)
end


-- 扩展仓库请求
i3k_sbean.expand_warehouse_req = i3k_class("expand_warehouse_req")
function i3k_sbean.expand_warehouse_req:ctor()
	self._pname_ = "expand_warehouse_req"
	--self.times:		int32	
	--self.warehouseType:		int32	
	--self.useItem:		int32	
end

function i3k_sbean.expand_warehouse_req:clone()
	return clone(self)
end

function i3k_sbean.expand_warehouse_req:decode(is)
	is:popString()
	self.times = is:popNumber()
	self.warehouseType = is:popNumber()
	self.useItem = is:popNumber()
end

function i3k_sbean.expand_warehouse_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
	os:pushNumber(self.warehouseType)
	os:pushNumber(self.useItem)
end


-- 同步角色私人仓库信息
i3k_sbean.sync_private_warehouse_req = i3k_class("sync_private_warehouse_req")
function i3k_sbean.sync_private_warehouse_req:ctor()
	self._pname_ = "sync_private_warehouse_req"
end

function i3k_sbean.sync_private_warehouse_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_private_warehouse_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步角色公共仓库信息
i3k_sbean.sync_public_warehouse_req = i3k_class("sync_public_warehouse_req")
function i3k_sbean.sync_public_warehouse_req:ctor()
	self._pname_ = "sync_public_warehouse_req"
end

function i3k_sbean.sync_public_warehouse_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_public_warehouse_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步角色家园仓库信息
i3k_sbean.sync_homeland_warehouse_req = i3k_class("sync_homeland_warehouse_req")
function i3k_sbean.sync_homeland_warehouse_req:ctor()
	self._pname_ = "sync_homeland_warehouse_req"
end

function i3k_sbean.sync_homeland_warehouse_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_homeland_warehouse_req:encode(os)
	os:pushString(self._pname_)
end


-- 求婚请求
i3k_sbean.propose_req = i3k_class("propose_req")
function i3k_sbean.propose_req:ctor()
	self._pname_ = "propose_req"
	--self.grade:		int32	
end

function i3k_sbean.propose_req:clone()
	return clone(self)
end

function i3k_sbean.propose_req:decode(is)
	is:popString()
	self.grade = is:popNumber()
end

function i3k_sbean.propose_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.grade)
end


-- 求婚响应请求
i3k_sbean.propose_response_req = i3k_class("propose_response_req")
function i3k_sbean.propose_response_req:ctor()
	self._pname_ = "propose_response_req"
	--self.grade:		int32	
	--self.response:		int8	
end

function i3k_sbean.propose_response_req:clone()
	return clone(self)
end

function i3k_sbean.propose_response_req:decode(is)
	is:popString()
	self.grade = is:popNumber()
	self.response = is:popNumber()
end

function i3k_sbean.propose_response_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.grade)
	os:pushNumber(self.response)
end


-- 同步婚姻信息
i3k_sbean.marriage_sync_req = i3k_class("marriage_sync_req")
function i3k_sbean.marriage_sync_req:ctor()
	self._pname_ = "marriage_sync_req"
end

function i3k_sbean.marriage_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.marriage_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 离婚请求
i3k_sbean.divorce_req = i3k_class("divorce_req")
function i3k_sbean.divorce_req:ctor()
	self._pname_ = "divorce_req"
end

function i3k_sbean.divorce_req:decode(is)
	is:popString()
end

function i3k_sbean.divorce_req:encode(os)
	os:pushString(self._pname_)
end


-- 姻缘技能升级
i3k_sbean.marriage_skill_levelup_req = i3k_class("marriage_skill_levelup_req")
function i3k_sbean.marriage_skill_levelup_req:ctor()
	self._pname_ = "marriage_skill_levelup_req"
	--self.skillId:		int32	
	--self.levelupTimes:		int32	
end

function i3k_sbean.marriage_skill_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.marriage_skill_levelup_req:decode(is)
	is:popString()
	self.skillId = is:popNumber()
	self.levelupTimes = is:popNumber()
end

function i3k_sbean.marriage_skill_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillId)
	os:pushNumber(self.levelupTimes)
end


-- 传送至配偶请求
i3k_sbean.transform_to_partner_req = i3k_class("transform_to_partner_req")
function i3k_sbean.transform_to_partner_req:ctor()
	self._pname_ = "transform_to_partner_req"
end

function i3k_sbean.transform_to_partner_req:decode(is)
	is:popString()
end

function i3k_sbean.transform_to_partner_req:encode(os)
	os:pushString(self._pname_)
end


-- 开始游街请求
i3k_sbean.marriage_start_parade_req = i3k_class("marriage_start_parade_req")
function i3k_sbean.marriage_start_parade_req:ctor()
	self._pname_ = "marriage_start_parade_req"
end

function i3k_sbean.marriage_start_parade_req:decode(is)
	is:popString()
end

function i3k_sbean.marriage_start_parade_req:encode(os)
	os:pushString(self._pname_)
end


-- 开始宴席请求
i3k_sbean.marriage_start_banquet_req = i3k_class("marriage_start_banquet_req")
function i3k_sbean.marriage_start_banquet_req:ctor()
	self._pname_ = "marriage_start_banquet_req"
end

function i3k_sbean.marriage_start_banquet_req:decode(is)
	is:popString()
end

function i3k_sbean.marriage_start_banquet_req:encode(os)
	os:pushString(self._pname_)
end


-- 物品交换请求
i3k_sbean.exchange_item_req = i3k_class("exchange_item_req")
function i3k_sbean.exchange_item_req:ctor()
	self._pname_ = "exchange_item_req"
	--self.npcId:		int32	
	--self.exchangeId:		int32	
end

function i3k_sbean.exchange_item_req:clone()
	return clone(self)
end

function i3k_sbean.exchange_item_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
	self.exchangeId = is:popNumber()
end

function i3k_sbean.exchange_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
	os:pushNumber(self.exchangeId)
end


-- 批量兑换物品
i3k_sbean.batch_exchange_item_req = i3k_class("batch_exchange_item_req")
function i3k_sbean.batch_exchange_item_req:ctor()
	self._pname_ = "batch_exchange_item_req"
	--self.npcId:		int32	
	--self.exchangeId:		int32	
	--self.exchangeCnt:		int32	
end

function i3k_sbean.batch_exchange_item_req:clone()
	return clone(self)
end

function i3k_sbean.batch_exchange_item_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
	self.exchangeId = is:popNumber()
	self.exchangeCnt = is:popNumber()
end

function i3k_sbean.batch_exchange_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
	os:pushNumber(self.exchangeId)
	os:pushNumber(self.exchangeCnt)
end


-- 收藏兑换物品
i3k_sbean.collect_exchange_item_req = i3k_class("collect_exchange_item_req")
function i3k_sbean.collect_exchange_item_req:ctor()
	self._pname_ = "collect_exchange_item_req"
	--self.npcId:		int32	
	--self.exchangeId:		int32	
end

function i3k_sbean.collect_exchange_item_req:clone()
	return clone(self)
end

function i3k_sbean.collect_exchange_item_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
	self.exchangeId = is:popNumber()
end

function i3k_sbean.collect_exchange_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
	os:pushNumber(self.exchangeId)
end


-- 取消收藏兑换物品
i3k_sbean.cancel_collect_exchange_item_req = i3k_class("cancel_collect_exchange_item_req")
function i3k_sbean.cancel_collect_exchange_item_req:ctor()
	self._pname_ = "cancel_collect_exchange_item_req"
	--self.npcId:		int32	
	--self.exchangeId:		int32	
end

function i3k_sbean.cancel_collect_exchange_item_req:clone()
	return clone(self)
end

function i3k_sbean.cancel_collect_exchange_item_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
	self.exchangeId = is:popNumber()
end

function i3k_sbean.cancel_collect_exchange_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
	os:pushNumber(self.exchangeId)
end


-- 姻缘系列任务开启
i3k_sbean.mrgseriestask_open_req = i3k_class("mrgseriestask_open_req")
function i3k_sbean.mrgseriestask_open_req:ctor()
	self._pname_ = "mrgseriestask_open_req"
end

function i3k_sbean.mrgseriestask_open_req:decode(is)
	is:popString()
end

function i3k_sbean.mrgseriestask_open_req:encode(os)
	os:pushString(self._pname_)
end


-- 姻缘系列任务接取
i3k_sbean.mrgseriestask_take_req = i3k_class("mrgseriestask_take_req")
function i3k_sbean.mrgseriestask_take_req:ctor()
	self._pname_ = "mrgseriestask_take_req"
	--self.taskID:		int32	
end

function i3k_sbean.mrgseriestask_take_req:clone()
	return clone(self)
end

function i3k_sbean.mrgseriestask_take_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.mrgseriestask_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 姻缘系列任务领奖
i3k_sbean.mrgseriestask_reward_req = i3k_class("mrgseriestask_reward_req")
function i3k_sbean.mrgseriestask_reward_req:ctor()
	self._pname_ = "mrgseriestask_reward_req"
	--self.taskID:		int32	
end

function i3k_sbean.mrgseriestask_reward_req:clone()
	return clone(self)
end

function i3k_sbean.mrgseriestask_reward_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.mrgseriestask_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 姻缘环任务开启
i3k_sbean.mrglooptask_open_req = i3k_class("mrglooptask_open_req")
function i3k_sbean.mrglooptask_open_req:ctor()
	self._pname_ = "mrglooptask_open_req"
end

function i3k_sbean.mrglooptask_open_req:decode(is)
	is:popString()
end

function i3k_sbean.mrglooptask_open_req:encode(os)
	os:pushString(self._pname_)
end


-- 姻缘环任务接取
i3k_sbean.mrglooptask_take_req = i3k_class("mrglooptask_take_req")
function i3k_sbean.mrglooptask_take_req:ctor()
	self._pname_ = "mrglooptask_take_req"
	--self.taskID:		int32	
end

function i3k_sbean.mrglooptask_take_req:clone()
	return clone(self)
end

function i3k_sbean.mrglooptask_take_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.mrglooptask_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 姻缘环任务领奖
i3k_sbean.mrglooptask_reward_req = i3k_class("mrglooptask_reward_req")
function i3k_sbean.mrglooptask_reward_req:ctor()
	self._pname_ = "mrglooptask_reward_req"
	--self.taskID:		int32	
end

function i3k_sbean.mrglooptask_reward_req:clone()
	return clone(self)
end

function i3k_sbean.mrglooptask_reward_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.mrglooptask_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 姻缘档次提升
i3k_sbean.marriage_upgrade_req = i3k_class("marriage_upgrade_req")
function i3k_sbean.marriage_upgrade_req:ctor()
	self._pname_ = "marriage_upgrade_req"
	--self.grade:		int32	
end

function i3k_sbean.marriage_upgrade_req:clone()
	return clone(self)
end

function i3k_sbean.marriage_upgrade_req:decode(is)
	is:popString()
	self.grade = is:popNumber()
end

function i3k_sbean.marriage_upgrade_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.grade)
end


-- 保存技能预设请求
i3k_sbean.save_skill_preset_req = i3k_class("save_skill_preset_req")
function i3k_sbean.save_skill_preset_req:ctor()
	self._pname_ = "save_skill_preset_req"
	--self.index:		int32	
	--self.name:		string	
	--self.skills:		vector[int32]	
	--self.diyskill:		int32	
	--self.uniqueSkill:		int32	
end

function i3k_sbean.save_skill_preset_req:clone()
	return clone(self)
end

function i3k_sbean.save_skill_preset_req:decode(is)
	is:popString()
	self.index = is:popNumber()
	self.name = is:popString()
	self.skills = is:popNumberList()
	self.diyskill = is:popNumber()
	self.uniqueSkill = is:popNumber()
end

function i3k_sbean.save_skill_preset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
	os:pushString(self.name)
	os:pushNumberList(self.skills)
	os:pushNumber(self.diyskill)
	os:pushNumber(self.uniqueSkill)
end


-- 保存技能预设请求
i3k_sbean.save_all_skill_preset_req = i3k_class("save_all_skill_preset_req")
function i3k_sbean.save_all_skill_preset_req:ctor()
	self._pname_ = "save_all_skill_preset_req"
	--self.skills:		vector[DBSkillPreset]	
end

function i3k_sbean.save_all_skill_preset_req:clone()
	return clone(self)
end

function i3k_sbean.save_all_skill_preset_req:decode(is)
	is:popString()
	self.skills = is:popList(i3k_sbean.DBSkillPreset)
end

function i3k_sbean.save_all_skill_preset_req:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.skills)
end


-- 保存气功预设请求
i3k_sbean.save_spirits_preset_req = i3k_class("save_spirits_preset_req")
function i3k_sbean.save_spirits_preset_req:ctor()
	self._pname_ = "save_spirits_preset_req"
	--self.index:		int32	
	--self.name:		string	
	--self.spirits:		vector[int32]	
end

function i3k_sbean.save_spirits_preset_req:clone()
	return clone(self)
end

function i3k_sbean.save_spirits_preset_req:decode(is)
	is:popString()
	self.index = is:popNumber()
	self.name = is:popString()
	self.spirits = is:popNumberList()
end

function i3k_sbean.save_spirits_preset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
	os:pushString(self.name)
	os:pushNumberList(self.spirits)
end


-- 删除气功预设请求
i3k_sbean.delete_skill_preset_req = i3k_class("delete_skill_preset_req")
function i3k_sbean.delete_skill_preset_req:ctor()
	self._pname_ = "delete_skill_preset_req"
	--self.index:		int32	
end

function i3k_sbean.delete_skill_preset_req:clone()
	return clone(self)
end

function i3k_sbean.delete_skill_preset_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.delete_skill_preset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 删除气功预设请求
i3k_sbean.delete_spirits_preset_req = i3k_class("delete_spirits_preset_req")
function i3k_sbean.delete_spirits_preset_req:ctor()
	self._pname_ = "delete_spirits_preset_req"
	--self.index:		int32	
end

function i3k_sbean.delete_spirits_preset_req:clone()
	return clone(self)
end

function i3k_sbean.delete_spirits_preset_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.delete_spirits_preset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 使用技能预设请求
i3k_sbean.change_skill_preset_req = i3k_class("change_skill_preset_req")
function i3k_sbean.change_skill_preset_req:ctor()
	self._pname_ = "change_skill_preset_req"
	--self.index:		int32	
end

function i3k_sbean.change_skill_preset_req:clone()
	return clone(self)
end

function i3k_sbean.change_skill_preset_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.change_skill_preset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 使用气功预设请求
i3k_sbean.change_spirits_preset_req = i3k_class("change_spirits_preset_req")
function i3k_sbean.change_spirits_preset_req:ctor()
	self._pname_ = "change_spirits_preset_req"
	--self.index:		int32	
end

function i3k_sbean.change_spirits_preset_req:clone()
	return clone(self)
end

function i3k_sbean.change_spirits_preset_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.change_spirits_preset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 帮派团队本开启请求
i3k_sbean.sect_group_map_open_req = i3k_class("sect_group_map_open_req")
function i3k_sbean.sect_group_map_open_req:ctor()
	self._pname_ = "sect_group_map_open_req"
	--self.mapId:		int32	
end

function i3k_sbean.sect_group_map_open_req:clone()
	return clone(self)
end

function i3k_sbean.sect_group_map_open_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.sect_group_map_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 帮派团队本进入请求
i3k_sbean.sect_group_map_enter_req = i3k_class("sect_group_map_enter_req")
function i3k_sbean.sect_group_map_enter_req:ctor()
	self._pname_ = "sect_group_map_enter_req"
	--self.mapId:		int32	
end

function i3k_sbean.sect_group_map_enter_req:clone()
	return clone(self)
end

function i3k_sbean.sect_group_map_enter_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.sect_group_map_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 帮派团队本信息同步请求
i3k_sbean.sect_group_map_sync_req = i3k_class("sect_group_map_sync_req")
function i3k_sbean.sect_group_map_sync_req:ctor()
	self._pname_ = "sect_group_map_sync_req"
end

function i3k_sbean.sect_group_map_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_group_map_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 神兵技能升级请求
i3k_sbean.weapon_skill_level_up_req = i3k_class("weapon_skill_level_up_req")
function i3k_sbean.weapon_skill_level_up_req:ctor()
	self._pname_ = "weapon_skill_level_up_req"
	--self.weaponId:		int32	
	--self.skillIndex:		int32	
	--self.level:		int32	
end

function i3k_sbean.weapon_skill_level_up_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_skill_level_up_req:decode(is)
	is:popString()
	self.weaponId = is:popNumber()
	self.skillIndex = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.weapon_skill_level_up_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponId)
	os:pushNumber(self.skillIndex)
	os:pushNumber(self.level)
end


-- 神兵天赋升级请求
i3k_sbean.weapon_talent_level_up_req = i3k_class("weapon_talent_level_up_req")
function i3k_sbean.weapon_talent_level_up_req:ctor()
	self._pname_ = "weapon_talent_level_up_req"
	--self.weaponId:		int32	
	--self.talentIndex:		int32	
end

function i3k_sbean.weapon_talent_level_up_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_talent_level_up_req:decode(is)
	is:popString()
	self.weaponId = is:popNumber()
	self.talentIndex = is:popNumber()
end

function i3k_sbean.weapon_talent_level_up_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponId)
	os:pushNumber(self.talentIndex)
end


-- 神兵天赋点购买请求
i3k_sbean.weapon_talent_point_buy_req = i3k_class("weapon_talent_point_buy_req")
function i3k_sbean.weapon_talent_point_buy_req:ctor()
	self._pname_ = "weapon_talent_point_buy_req"
	--self.weaponId:		int32	
end

function i3k_sbean.weapon_talent_point_buy_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_talent_point_buy_req:decode(is)
	is:popString()
	self.weaponId = is:popNumber()
end

function i3k_sbean.weapon_talent_point_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponId)
end


-- 神兵天赋点重置请求
i3k_sbean.weapon_talent_point_reset_req = i3k_class("weapon_talent_point_reset_req")
function i3k_sbean.weapon_talent_point_reset_req:ctor()
	self._pname_ = "weapon_talent_point_reset_req"
	--self.weaponId:		int32	
end

function i3k_sbean.weapon_talent_point_reset_req:clone()
	return clone(self)
end

function i3k_sbean.weapon_talent_point_reset_req:decode(is)
	is:popString()
	self.weaponId = is:popNumber()
end

function i3k_sbean.weapon_talent_point_reset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponId)
end


-- 发送礼物请求
i3k_sbean.send_gift_req = i3k_class("send_gift_req")
function i3k_sbean.send_gift_req:ctor()
	self._pname_ = "send_gift_req"
	--self.itemId:		int32	
	--self.itemNum:		int32	
	--self.roleId:		int32	
end

function i3k_sbean.send_gift_req:clone()
	return clone(self)
end

function i3k_sbean.send_gift_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.itemNum = is:popNumber()
	self.roleId = is:popNumber()
end

function i3k_sbean.send_gift_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.itemNum)
	os:pushNumber(self.roleId)
end


-- 打开地图同步旗帜信息
i3k_sbean.sync_big_map_flag_info_req = i3k_class("sync_big_map_flag_info_req")
function i3k_sbean.sync_big_map_flag_info_req:ctor()
	self._pname_ = "sync_big_map_flag_info_req"
end

function i3k_sbean.sync_big_map_flag_info_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_big_map_flag_info_req:encode(os)
	os:pushString(self._pname_)
end


-- 随从技能升级请求
i3k_sbean.pet_skill_level_up_req = i3k_class("pet_skill_level_up_req")
function i3k_sbean.pet_skill_level_up_req:ctor()
	self._pname_ = "pet_skill_level_up_req"
	--self.petId:		int32	
	--self.skillIndex:		int32	
	--self.level:		int32	
end

function i3k_sbean.pet_skill_level_up_req:clone()
	return clone(self)
end

function i3k_sbean.pet_skill_level_up_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.skillIndex = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.pet_skill_level_up_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.skillIndex)
	os:pushNumber(self.level)
end


-- 同步特权卡配置请求
i3k_sbean.sync_special_card_req = i3k_class("sync_special_card_req")
function i3k_sbean.sync_special_card_req:ctor()
	self._pname_ = "sync_special_card_req"
	--self.cardType:		int32	
end

function i3k_sbean.sync_special_card_req:clone()
	return clone(self)
end

function i3k_sbean.sync_special_card_req:decode(is)
	is:popString()
	self.cardType = is:popNumber()
end

function i3k_sbean.sync_special_card_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cardType)
end


-- 领取特权卡奖励请求
i3k_sbean.take_special_card_reward_req = i3k_class("take_special_card_reward_req")
function i3k_sbean.take_special_card_reward_req:ctor()
	self._pname_ = "take_special_card_reward_req"
	--self.cardType:		int32	
end

function i3k_sbean.take_special_card_reward_req:clone()
	return clone(self)
end

function i3k_sbean.take_special_card_reward_req:decode(is)
	is:popString()
	self.cardType = is:popNumber()
end

function i3k_sbean.take_special_card_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cardType)
end


-- 通过类型同步充值商品
i3k_sbean.paygoods_sync_req = i3k_class("paygoods_sync_req")
function i3k_sbean.paygoods_sync_req:ctor()
	self._pname_ = "paygoods_sync_req"
	--self.type:		int32	
end

function i3k_sbean.paygoods_sync_req:clone()
	return clone(self)
end

function i3k_sbean.paygoods_sync_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.paygoods_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 领取每日体力奖励请求
i3k_sbean.sync_daily_vit_reward_req = i3k_class("sync_daily_vit_reward_req")
function i3k_sbean.sync_daily_vit_reward_req:ctor()
	self._pname_ = "sync_daily_vit_reward_req"
end

function i3k_sbean.sync_daily_vit_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_daily_vit_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取每日体力奖励请求
i3k_sbean.take_daily_vit_reward_req = i3k_class("take_daily_vit_reward_req")
function i3k_sbean.take_daily_vit_reward_req:ctor()
	self._pname_ = "take_daily_vit_reward_req"
	--self.vitId:		int32	
end

function i3k_sbean.take_daily_vit_reward_req:clone()
	return clone(self)
end

function i3k_sbean.take_daily_vit_reward_req:decode(is)
	is:popString()
	self.vitId = is:popNumber()
end

function i3k_sbean.take_daily_vit_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.vitId)
end


-- 开启洞察请求
i3k_sbean.try_open_insight_req = i3k_class("try_open_insight_req")
function i3k_sbean.try_open_insight_req:ctor()
	self._pname_ = "try_open_insight_req"
end

function i3k_sbean.try_open_insight_req:decode(is)
	is:popString()
end

function i3k_sbean.try_open_insight_req:encode(os)
	os:pushString(self._pname_)
end


-- 开启寻仇请求
i3k_sbean.try_open_revenge_req = i3k_class("try_open_revenge_req")
function i3k_sbean.try_open_revenge_req:ctor()
	self._pname_ = "try_open_revenge_req"
end

function i3k_sbean.try_open_revenge_req:decode(is)
	is:popString()
end

function i3k_sbean.try_open_revenge_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步洞察请求
i3k_sbean.try_sync_insight_req = i3k_class("try_sync_insight_req")
function i3k_sbean.try_sync_insight_req:ctor()
	self._pname_ = "try_sync_insight_req"
end

function i3k_sbean.try_sync_insight_req:decode(is)
	is:popString()
end

function i3k_sbean.try_sync_insight_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步寻仇请求
i3k_sbean.try_sync_revenge_req = i3k_class("try_sync_revenge_req")
function i3k_sbean.try_sync_revenge_req:ctor()
	self._pname_ = "try_sync_revenge_req"
end

function i3k_sbean.try_sync_revenge_req:decode(is)
	is:popString()
end

function i3k_sbean.try_sync_revenge_req:encode(os)
	os:pushString(self._pname_)
end


-- 传送至洞察目标请求
i3k_sbean.try_transform_insight_req = i3k_class("try_transform_insight_req")
function i3k_sbean.try_transform_insight_req:ctor()
	self._pname_ = "try_transform_insight_req"
	--self.index:		int32	
end

function i3k_sbean.try_transform_insight_req:clone()
	return clone(self)
end

function i3k_sbean.try_transform_insight_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.try_transform_insight_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 传送至寻仇目标请求
i3k_sbean.try_transform_revenge_req = i3k_class("try_transform_revenge_req")
function i3k_sbean.try_transform_revenge_req:ctor()
	self._pname_ = "try_transform_revenge_req"
	--self.index:		int32	
end

function i3k_sbean.try_transform_revenge_req:clone()
	return clone(self)
end

function i3k_sbean.try_transform_revenge_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.try_transform_revenge_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 传家宝擦拭请求
i3k_sbean.heirloom_wipe_req = i3k_class("heirloom_wipe_req")
function i3k_sbean.heirloom_wipe_req:ctor()
	self._pname_ = "heirloom_wipe_req"
	--self.colorSeq:		int32	
end

function i3k_sbean.heirloom_wipe_req:clone()
	return clone(self)
end

function i3k_sbean.heirloom_wipe_req:decode(is)
	is:popString()
	self.colorSeq = is:popNumber()
end

function i3k_sbean.heirloom_wipe_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.colorSeq)
end


-- 传家宝取出请求
i3k_sbean.heirloom_takeout_req = i3k_class("heirloom_takeout_req")
function i3k_sbean.heirloom_takeout_req:ctor()
	self._pname_ = "heirloom_takeout_req"
end

function i3k_sbean.heirloom_takeout_req:decode(is)
	is:popString()
end

function i3k_sbean.heirloom_takeout_req:encode(os)
	os:pushString(self._pname_)
end


-- 购买离线精灵修炼点请求
i3k_sbean.buy_offline_func_point_req = i3k_class("buy_offline_func_point_req")
function i3k_sbean.buy_offline_func_point_req:ctor()
	self._pname_ = "buy_offline_func_point_req"
	--self.seq:		int32	
end

function i3k_sbean.buy_offline_func_point_req:clone()
	return clone(self)
end

function i3k_sbean.buy_offline_func_point_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
end

function i3k_sbean.buy_offline_func_point_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
end


-- 精灵旅行开始
i3k_sbean.role_wizard_trip_start_req = i3k_class("role_wizard_trip_start_req")
function i3k_sbean.role_wizard_trip_start_req:ctor()
	self._pname_ = "role_wizard_trip_start_req"
	--self.wizardID:		int32	
end

function i3k_sbean.role_wizard_trip_start_req:clone()
	return clone(self)
end

function i3k_sbean.role_wizard_trip_start_req:decode(is)
	is:popString()
	self.wizardID = is:popNumber()
end

function i3k_sbean.role_wizard_trip_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wizardID)
end


-- 精灵旅行设置新照片已读
i3k_sbean.role_wizard_trip_read_new_photo = i3k_class("role_wizard_trip_read_new_photo")
function i3k_sbean.role_wizard_trip_read_new_photo:ctor()
	self._pname_ = "role_wizard_trip_read_new_photo"
end

function i3k_sbean.role_wizard_trip_read_new_photo:decode(is)
	is:popString()
end

function i3k_sbean.role_wizard_trip_read_new_photo:encode(os)
	os:pushString(self._pname_)
end


-- 精灵旅行分享照片
i3k_sbean.role_wizard_trip_share_photo_req = i3k_class("role_wizard_trip_share_photo_req")
function i3k_sbean.role_wizard_trip_share_photo_req:ctor()
	self._pname_ = "role_wizard_trip_share_photo_req"
	--self.msgType:		int32	
	--self.wizardID:		int32	
	--self.serverName:		string	
	--self.photoID:		vector[int32]	
end

function i3k_sbean.role_wizard_trip_share_photo_req:clone()
	return clone(self)
end

function i3k_sbean.role_wizard_trip_share_photo_req:decode(is)
	is:popString()
	self.msgType = is:popNumber()
	self.wizardID = is:popNumber()
	self.serverName = is:popString()
	self.photoID = is:popNumberList()
end

function i3k_sbean.role_wizard_trip_share_photo_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.msgType)
	os:pushNumber(self.wizardID)
	os:pushString(self.serverName)
	os:pushNumberList(self.photoID)
end


-- 设置帮派QQ群请求
i3k_sbean.set_sect_qqgroup_req = i3k_class("set_sect_qqgroup_req")
function i3k_sbean.set_sect_qqgroup_req:ctor()
	self._pname_ = "set_sect_qqgroup_req"
	--self.qqgroup:		string	
end

function i3k_sbean.set_sect_qqgroup_req:clone()
	return clone(self)
end

function i3k_sbean.set_sect_qqgroup_req:decode(is)
	is:popString()
	self.qqgroup = is:popString()
end

function i3k_sbean.set_sect_qqgroup_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.qqgroup)
end


-- 设置传家宝外观显示请求
i3k_sbean.set_heirloom_display_req = i3k_class("set_heirloom_display_req")
function i3k_sbean.set_heirloom_display_req:ctor()
	self._pname_ = "set_heirloom_display_req"
	--self.display:		int32	
end

function i3k_sbean.set_heirloom_display_req:clone()
	return clone(self)
end

function i3k_sbean.set_heirloom_display_req:decode(is)
	is:popString()
	self.display = is:popNumber()
end

function i3k_sbean.set_heirloom_display_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.display)
end


-- 武勋商城同步协议
i3k_sbean.feat_gambleshopsync_req = i3k_class("feat_gambleshopsync_req")
function i3k_sbean.feat_gambleshopsync_req:ctor()
	self._pname_ = "feat_gambleshopsync_req"
	--self.shopId:		int32	
end

function i3k_sbean.feat_gambleshopsync_req:clone()
	return clone(self)
end

function i3k_sbean.feat_gambleshopsync_req:decode(is)
	is:popString()
	self.shopId = is:popNumber()
end

function i3k_sbean.feat_gambleshopsync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.shopId)
end


-- 武勋商城刷新协议
i3k_sbean.feat_gambleshoprefresh_req = i3k_class("feat_gambleshoprefresh_req")
function i3k_sbean.feat_gambleshoprefresh_req:ctor()
	self._pname_ = "feat_gambleshoprefresh_req"
	--self.shopId:		int32	
	--self.times:		int32	
end

function i3k_sbean.feat_gambleshoprefresh_req:clone()
	return clone(self)
end

function i3k_sbean.feat_gambleshoprefresh_req:decode(is)
	is:popString()
	self.shopId = is:popNumber()
	self.times = is:popNumber()
end

function i3k_sbean.feat_gambleshoprefresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.shopId)
	os:pushNumber(self.times)
end


-- 武勋商城买商品协议
i3k_sbean.feat_gambleshopbuy_req = i3k_class("feat_gambleshopbuy_req")
function i3k_sbean.feat_gambleshopbuy_req:ctor()
	self._pname_ = "feat_gambleshopbuy_req"
	--self.shopId:		int32	
	--self.seq:		int32	
end

function i3k_sbean.feat_gambleshopbuy_req:clone()
	return clone(self)
end

function i3k_sbean.feat_gambleshopbuy_req:decode(is)
	is:popString()
	self.shopId = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.feat_gambleshopbuy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.shopId)
	os:pushNumber(self.seq)
end


-- 添加结婚预约协议
i3k_sbean.add_marriage_bespeak_req = i3k_class("add_marriage_bespeak_req")
function i3k_sbean.add_marriage_bespeak_req:ctor()
	self._pname_ = "add_marriage_bespeak_req"
	--self.line:		int32	
	--self.timeIndex:		int32	
end

function i3k_sbean.add_marriage_bespeak_req:clone()
	return clone(self)
end

function i3k_sbean.add_marriage_bespeak_req:decode(is)
	is:popString()
	self.line = is:popNumber()
	self.timeIndex = is:popNumber()
end

function i3k_sbean.add_marriage_bespeak_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.line)
	os:pushNumber(self.timeIndex)
end


-- 同步结婚预约协议
i3k_sbean.sync_marriage_bespeak_req = i3k_class("sync_marriage_bespeak_req")
function i3k_sbean.sync_marriage_bespeak_req:ctor()
	self._pname_ = "sync_marriage_bespeak_req"
end

function i3k_sbean.sync_marriage_bespeak_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_marriage_bespeak_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取结婚称号
i3k_sbean.take_marriage_title_req = i3k_class("take_marriage_title_req")
function i3k_sbean.take_marriage_title_req:ctor()
	self._pname_ = "take_marriage_title_req"
	--self.title:		int32	
end

function i3k_sbean.take_marriage_title_req:clone()
	return clone(self)
end

function i3k_sbean.take_marriage_title_req:decode(is)
	is:popString()
	self.title = is:popNumber()
end

function i3k_sbean.take_marriage_title_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.title)
end


-- 基础物品快速购买协议
i3k_sbean.base_dummygoods_quick_buy_req = i3k_class("base_dummygoods_quick_buy_req")
function i3k_sbean.base_dummygoods_quick_buy_req:ctor()
	self._pname_ = "base_dummygoods_quick_buy_req"
	--self.buyItemId:		int32	
	--self.times:		int32	
end

function i3k_sbean.base_dummygoods_quick_buy_req:clone()
	return clone(self)
end

function i3k_sbean.base_dummygoods_quick_buy_req:decode(is)
	is:popString()
	self.buyItemId = is:popNumber()
	self.times = is:popNumber()
end

function i3k_sbean.base_dummygoods_quick_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.buyItemId)
	os:pushNumber(self.times)
end


-- 活动补做协议
i3k_sbean.activity_last_quick_done_req = i3k_class("activity_last_quick_done_req")
function i3k_sbean.activity_last_quick_done_req:ctor()
	self._pname_ = "activity_last_quick_done_req"
	--self.mapId:		int32	
	--self.seq:		int32	
end

function i3k_sbean.activity_last_quick_done_req:clone()
	return clone(self)
end

function i3k_sbean.activity_last_quick_done_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.activity_last_quick_done_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.seq)
end


-- 打开太玄碑文同步信息
i3k_sbean.stele_sync_req = i3k_class("stele_sync_req")
function i3k_sbean.stele_sync_req:ctor()
	self._pname_ = "stele_sync_req"
end

function i3k_sbean.stele_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.stele_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 参加活动
i3k_sbean.stele_join_req = i3k_class("stele_join_req")
function i3k_sbean.stele_join_req:ctor()
	self._pname_ = "stele_join_req"
end

function i3k_sbean.stele_join_req:decode(is)
	is:popString()
end

function i3k_sbean.stele_join_req:encode(os)
	os:pushString(self._pname_)
end


-- 排行榜同步
i3k_sbean.stele_rank_req = i3k_class("stele_rank_req")
function i3k_sbean.stele_rank_req:ctor()
	self._pname_ = "stele_rank_req"
end

function i3k_sbean.stele_rank_req:decode(is)
	is:popString()
end

function i3k_sbean.stele_rank_req:encode(os)
	os:pushString(self._pname_)
end


-- 传送到太玄碑文
i3k_sbean.stele_teleport_req = i3k_class("stele_teleport_req")
function i3k_sbean.stele_teleport_req:ctor()
	self._pname_ = "stele_teleport_req"
	--self.type:		int32	
	--self.index:		int32	
end

function i3k_sbean.stele_teleport_req:clone()
	return clone(self)
end

function i3k_sbean.stele_teleport_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.stele_teleport_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
end


-- 添加黑名单
i3k_sbean.blacklist_add_req = i3k_class("blacklist_add_req")
function i3k_sbean.blacklist_add_req:ctor()
	self._pname_ = "blacklist_add_req"
	--self.rid:		int32	
end

function i3k_sbean.blacklist_add_req:clone()
	return clone(self)
end

function i3k_sbean.blacklist_add_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.blacklist_add_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 删除黑名单
i3k_sbean.blacklist_del_req = i3k_class("blacklist_del_req")
function i3k_sbean.blacklist_del_req:ctor()
	self._pname_ = "blacklist_del_req"
	--self.rid:		int32	
end

function i3k_sbean.blacklist_del_req:clone()
	return clone(self)
end

function i3k_sbean.blacklist_del_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.blacklist_del_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 同步黑名单
i3k_sbean.blacklist_sync_req = i3k_class("blacklist_sync_req")
function i3k_sbean.blacklist_sync_req:ctor()
	self._pname_ = "blacklist_sync_req"
end

function i3k_sbean.blacklist_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.blacklist_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 设置清除长时间未上线的好友
i3k_sbean.set_clear_friend_req = i3k_class("set_clear_friend_req")
function i3k_sbean.set_clear_friend_req:ctor()
	self._pname_ = "set_clear_friend_req"
	--self.type:		int32	
	--self.clear:		int32	
end

function i3k_sbean.set_clear_friend_req:clone()
	return clone(self)
end

function i3k_sbean.set_clear_friend_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.clear = is:popNumber()
end

function i3k_sbean.set_clear_friend_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.clear)
end


-- 黑名单禁止互动
i3k_sbean.blacklist_ban_req = i3k_class("blacklist_ban_req")
function i3k_sbean.blacklist_ban_req:ctor()
	self._pname_ = "blacklist_ban_req"
	--self.rid:		int32	
end

function i3k_sbean.blacklist_ban_req:clone()
	return clone(self)
end

function i3k_sbean.blacklist_ban_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.blacklist_ban_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 同步伏魔洞信息
i3k_sbean.demonhole_sync_req = i3k_class("demonhole_sync_req")
function i3k_sbean.demonhole_sync_req:ctor()
	self._pname_ = "demonhole_sync_req"
end

function i3k_sbean.demonhole_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.demonhole_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 参加伏魔洞
i3k_sbean.demonhole_join_req = i3k_class("demonhole_join_req")
function i3k_sbean.demonhole_join_req:ctor()
	self._pname_ = "demonhole_join_req"
end

function i3k_sbean.demonhole_join_req:decode(is)
	is:popString()
end

function i3k_sbean.demonhole_join_req:encode(os)
	os:pushString(self._pname_)
end


-- 进入下一层或上一层
i3k_sbean.demonhole_changefloor_req = i3k_class("demonhole_changefloor_req")
function i3k_sbean.demonhole_changefloor_req:ctor()
	self._pname_ = "demonhole_changefloor_req"
	--self.floor:		int32	
end

function i3k_sbean.demonhole_changefloor_req:clone()
	return clone(self)
end

function i3k_sbean.demonhole_changefloor_req:decode(is)
	is:popString()
	self.floor = is:popNumber()
end

function i3k_sbean.demonhole_changefloor_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.floor)
end


i3k_sbean.demonhole_battle_req = i3k_class("demonhole_battle_req")
function i3k_sbean.demonhole_battle_req:ctor()
	self._pname_ = "demonhole_battle_req"
end

function i3k_sbean.demonhole_battle_req:decode(is)
	is:popString()
end

function i3k_sbean.demonhole_battle_req:encode(os)
	os:pushString(self._pname_)
end


-- 开始进入正义之心副本请求
i3k_sbean.justicemap_start_req = i3k_class("justicemap_start_req")
function i3k_sbean.justicemap_start_req:ctor()
	self._pname_ = "justicemap_start_req"
end

function i3k_sbean.justicemap_start_req:decode(is)
	is:popString()
end

function i3k_sbean.justicemap_start_req:encode(os)
	os:pushString(self._pname_)
end


-- 打开江湖告急同步信息
i3k_sbean.emergency_sync_req = i3k_class("emergency_sync_req")
function i3k_sbean.emergency_sync_req:ctor()
	self._pname_ = "emergency_sync_req"
end

function i3k_sbean.emergency_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.emergency_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 进入江湖告急副本
i3k_sbean.emergency_enter_req = i3k_class("emergency_enter_req")
function i3k_sbean.emergency_enter_req:ctor()
	self._pname_ = "emergency_enter_req"
	--self.activityId:		int32	
end

function i3k_sbean.emergency_enter_req:clone()
	return clone(self)
end

function i3k_sbean.emergency_enter_req:decode(is)
	is:popString()
	self.activityId = is:popNumber()
end

function i3k_sbean.emergency_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.activityId)
end


-- 排行榜同步
i3k_sbean.emergency_rank_req = i3k_class("emergency_rank_req")
function i3k_sbean.emergency_rank_req:ctor()
	self._pname_ = "emergency_rank_req"
end

function i3k_sbean.emergency_rank_req:decode(is)
	is:popString()
end

function i3k_sbean.emergency_rank_req:encode(os)
	os:pushString(self._pname_)
end


-- 幸运星同步
i3k_sbean.lucklystar_sync_req = i3k_class("lucklystar_sync_req")
function i3k_sbean.lucklystar_sync_req:ctor()
	self._pname_ = "lucklystar_sync_req"
end

function i3k_sbean.lucklystar_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.lucklystar_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 幸运星赠送
i3k_sbean.lucklystar_gift_req = i3k_class("lucklystar_gift_req")
function i3k_sbean.lucklystar_gift_req:ctor()
	self._pname_ = "lucklystar_gift_req"
	--self.roleId:		int32	
end

function i3k_sbean.lucklystar_gift_req:clone()
	return clone(self)
end

function i3k_sbean.lucklystar_gift_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.lucklystar_gift_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 开始挑战
i3k_sbean.fightnpc_start_req = i3k_class("fightnpc_start_req")
function i3k_sbean.fightnpc_start_req:ctor()
	self._pname_ = "fightnpc_start_req"
end

function i3k_sbean.fightnpc_start_req:decode(is)
	is:popString()
end

function i3k_sbean.fightnpc_start_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取奖励
i3k_sbean.fightnpc_reward_req = i3k_class("fightnpc_reward_req")
function i3k_sbean.fightnpc_reward_req:ctor()
	self._pname_ = "fightnpc_reward_req"
end

function i3k_sbean.fightnpc_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.fightnpc_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 分包奖励领取同步协议
i3k_sbean.packetreward_sync_req = i3k_class("packetreward_sync_req")
function i3k_sbean.packetreward_sync_req:ctor()
	self._pname_ = "packetreward_sync_req"
end

function i3k_sbean.packetreward_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.packetreward_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 分包奖励领取协议
i3k_sbean.packetreward_take_req = i3k_class("packetreward_take_req")
function i3k_sbean.packetreward_take_req:ctor()
	self._pname_ = "packetreward_take_req"
	--self.packetIndex:		int32	
end

function i3k_sbean.packetreward_take_req:clone()
	return clone(self)
end

function i3k_sbean.packetreward_take_req:decode(is)
	is:popString()
	self.packetIndex = is:popNumber()
end

function i3k_sbean.packetreward_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.packetIndex)
end


-- 坐骑解锁洗练属性
i3k_sbean.horse_enhance_prop_unlock_req = i3k_class("horse_enhance_prop_unlock_req")
function i3k_sbean.horse_enhance_prop_unlock_req:ctor()
	self._pname_ = "horse_enhance_prop_unlock_req"
	--self.hid:		int32	
	--self.index:		int32	
end

function i3k_sbean.horse_enhance_prop_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.horse_enhance_prop_unlock_req:decode(is)
	is:popString()
	self.hid = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.horse_enhance_prop_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hid)
	os:pushNumber(self.index)
end


-- 购买休闲宠物时间
i3k_sbean.buy_wizard_pet_time_req = i3k_class("buy_wizard_pet_time_req")
function i3k_sbean.buy_wizard_pet_time_req:ctor()
	self._pname_ = "buy_wizard_pet_time_req"
	--self.petId:		int32	
	--self.replace:		int32	
end

function i3k_sbean.buy_wizard_pet_time_req:clone()
	return clone(self)
end

function i3k_sbean.buy_wizard_pet_time_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.replace = is:popNumber()
end

function i3k_sbean.buy_wizard_pet_time_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.replace)
end


-- 设置当前休闲宠物
i3k_sbean.set_cur_wizard_pet_req = i3k_class("set_cur_wizard_pet_req")
function i3k_sbean.set_cur_wizard_pet_req:ctor()
	self._pname_ = "set_cur_wizard_pet_req"
	--self.petId:		int32	
end

function i3k_sbean.set_cur_wizard_pet_req:clone()
	return clone(self)
end

function i3k_sbean.set_cur_wizard_pet_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
end

function i3k_sbean.set_cur_wizard_pet_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
end


-- 同步当前已解锁头像
i3k_sbean.sync_item_unlock_head_req = i3k_class("sync_item_unlock_head_req")
function i3k_sbean.sync_item_unlock_head_req:ctor()
	self._pname_ = "sync_item_unlock_head_req"
end

function i3k_sbean.sync_item_unlock_head_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_item_unlock_head_req:encode(os)
	os:pushString(self._pname_)
end


-- 宠物，神兵评价(themeType 1:佣兵 2:神兵)
i3k_sbean.socialmsg_send_req = i3k_class("socialmsg_send_req")
function i3k_sbean.socialmsg_send_req:ctor()
	self._pname_ = "socialmsg_send_req"
	--self.serverId:		int32	
	--self.serverName:		string	
	--self.themeType:		int32	
	--self.themeId:		int32	
	--self.comment:		string	
end

function i3k_sbean.socialmsg_send_req:clone()
	return clone(self)
end

function i3k_sbean.socialmsg_send_req:decode(is)
	is:popString()
	self.serverId = is:popNumber()
	self.serverName = is:popString()
	self.themeType = is:popNumber()
	self.themeId = is:popNumber()
	self.comment = is:popString()
end

function i3k_sbean.socialmsg_send_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.serverId)
	os:pushString(self.serverName)
	os:pushNumber(self.themeType)
	os:pushNumber(self.themeId)
	os:pushString(self.comment)
end


-- 点赞(themeType 1:佣兵 2:神兵)
i3k_sbean.socialmsg_like_req = i3k_class("socialmsg_like_req")
function i3k_sbean.socialmsg_like_req:ctor()
	self._pname_ = "socialmsg_like_req"
	--self.serverId:		int32	
	--self.serverName:		string	
	--self.themeType:		int32	
	--self.themeId:		int32	
	--self.commentId:		int32	
end

function i3k_sbean.socialmsg_like_req:clone()
	return clone(self)
end

function i3k_sbean.socialmsg_like_req:decode(is)
	is:popString()
	self.serverId = is:popNumber()
	self.serverName = is:popString()
	self.themeType = is:popNumber()
	self.themeId = is:popNumber()
	self.commentId = is:popNumber()
end

function i3k_sbean.socialmsg_like_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.serverId)
	os:pushString(self.serverName)
	os:pushNumber(self.themeType)
	os:pushNumber(self.themeId)
	os:pushNumber(self.commentId)
end


-- 鄙视(themeType 1:佣兵 2:神兵)
i3k_sbean.socialmsg_dislike_req = i3k_class("socialmsg_dislike_req")
function i3k_sbean.socialmsg_dislike_req:ctor()
	self._pname_ = "socialmsg_dislike_req"
	--self.serverId:		int32	
	--self.serverName:		string	
	--self.themeType:		int32	
	--self.themeId:		int32	
	--self.commentId:		int32	
end

function i3k_sbean.socialmsg_dislike_req:clone()
	return clone(self)
end

function i3k_sbean.socialmsg_dislike_req:decode(is)
	is:popString()
	self.serverId = is:popNumber()
	self.serverName = is:popString()
	self.themeType = is:popNumber()
	self.themeId = is:popNumber()
	self.commentId = is:popNumber()
end

function i3k_sbean.socialmsg_dislike_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.serverId)
	os:pushString(self.serverName)
	os:pushNumber(self.themeType)
	os:pushNumber(self.themeId)
	os:pushNumber(self.commentId)
end


-- (tag 1:最新评论 2:点赞最多 3:鄙视最多      themeType 1:佣兵 2:神兵)
i3k_sbean.socialmsg_pageinfo_req = i3k_class("socialmsg_pageinfo_req")
function i3k_sbean.socialmsg_pageinfo_req:ctor()
	self._pname_ = "socialmsg_pageinfo_req"
	--self.themeType:		int32	
	--self.themeId:		int32	
	--self.tag:		int32	
	--self.pageNo:		int32	
	--self.len:		int32	
end

function i3k_sbean.socialmsg_pageinfo_req:clone()
	return clone(self)
end

function i3k_sbean.socialmsg_pageinfo_req:decode(is)
	is:popString()
	self.themeType = is:popNumber()
	self.themeId = is:popNumber()
	self.tag = is:popNumber()
	self.pageNo = is:popNumber()
	self.len = is:popNumber()
end

function i3k_sbean.socialmsg_pageinfo_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.themeType)
	os:pushNumber(self.themeId)
	os:pushNumber(self.tag)
	os:pushNumber(self.pageNo)
	os:pushNumber(self.len)
end


-- npc传送功能
i3k_sbean.npc_transfrom_req = i3k_class("npc_transfrom_req")
function i3k_sbean.npc_transfrom_req:ctor()
	self._pname_ = "npc_transfrom_req"
	--self.transfromId:		int32	
end

function i3k_sbean.npc_transfrom_req:clone()
	return clone(self)
end

function i3k_sbean.npc_transfrom_req:decode(is)
	is:popString()
	self.transfromId = is:popNumber()
end

function i3k_sbean.npc_transfrom_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.transfromId)
end


-- 分享成功通知
i3k_sbean.share_success = i3k_class("share_success")
function i3k_sbean.share_success:ctor()
	self._pname_ = "share_success"
end

function i3k_sbean.share_success:decode(is)
	is:popString()
end

function i3k_sbean.share_success:encode(os)
	os:pushString(self._pname_)
end


-- 物品解锁头像
i3k_sbean.unlock_head_req = i3k_class("unlock_head_req")
function i3k_sbean.unlock_head_req:ctor()
	self._pname_ = "unlock_head_req"
	--self.headId:		int32	
end

function i3k_sbean.unlock_head_req:clone()
	return clone(self)
end

function i3k_sbean.unlock_head_req:decode(is)
	is:popString()
	self.headId = is:popNumber()
end

function i3k_sbean.unlock_head_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.headId)
end


-- 解锁头像边框
i3k_sbean.unlock_headborder_req = i3k_class("unlock_headborder_req")
function i3k_sbean.unlock_headborder_req:ctor()
	self._pname_ = "unlock_headborder_req"
	--self.borderId:		int32	
end

function i3k_sbean.unlock_headborder_req:clone()
	return clone(self)
end

function i3k_sbean.unlock_headborder_req:decode(is)
	is:popString()
	self.borderId = is:popNumber()
end

function i3k_sbean.unlock_headborder_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.borderId)
end


-- 同步已经解锁的头像边框
i3k_sbean.sync_headborder_req = i3k_class("sync_headborder_req")
function i3k_sbean.sync_headborder_req:ctor()
	self._pname_ = "sync_headborder_req"
end

function i3k_sbean.sync_headborder_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_headborder_req:encode(os)
	os:pushString(self._pname_)
end


-- 更改装备的头像边框
i3k_sbean.change_headborder_req = i3k_class("change_headborder_req")
function i3k_sbean.change_headborder_req:ctor()
	self._pname_ = "change_headborder_req"
	--self.borderId:		int32	
end

function i3k_sbean.change_headborder_req:clone()
	return clone(self)
end

function i3k_sbean.change_headborder_req:decode(is)
	is:popString()
	self.borderId = is:popNumber()
end

function i3k_sbean.change_headborder_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.borderId)
end


-- 开始NPC副本
i3k_sbean.start_npc_map_req = i3k_class("start_npc_map_req")
function i3k_sbean.start_npc_map_req:ctor()
	self._pname_ = "start_npc_map_req"
	--self.mapId:		int32	
end

function i3k_sbean.start_npc_map_req:clone()
	return clone(self)
end

function i3k_sbean.start_npc_map_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.start_npc_map_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 参与NPC祈福
i3k_sbean.join_npc_pray_req = i3k_class("join_npc_pray_req")
function i3k_sbean.join_npc_pray_req:ctor()
	self._pname_ = "join_npc_pray_req"
	--self.prayId:		int32	
	--self.dropId:		int32	
end

function i3k_sbean.join_npc_pray_req:clone()
	return clone(self)
end

function i3k_sbean.join_npc_pray_req:decode(is)
	is:popString()
	self.prayId = is:popNumber()
	self.dropId = is:popNumber()
end

function i3k_sbean.join_npc_pray_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.prayId)
	os:pushNumber(self.dropId)
end


-- 解锁私人仓库
i3k_sbean.unlock_private_warehouse_req = i3k_class("unlock_private_warehouse_req")
function i3k_sbean.unlock_private_warehouse_req:ctor()
	self._pname_ = "unlock_private_warehouse_req"
end

function i3k_sbean.unlock_private_warehouse_req:decode(is)
	is:popString()
end

function i3k_sbean.unlock_private_warehouse_req:encode(os)
	os:pushString(self._pname_)
end


-- 解锁家园仓库
i3k_sbean.unlock_homeland_warehouse_req = i3k_class("unlock_homeland_warehouse_req")
function i3k_sbean.unlock_homeland_warehouse_req:ctor()
	self._pname_ = "unlock_homeland_warehouse_req"
end

function i3k_sbean.unlock_homeland_warehouse_req:decode(is)
	is:popString()
end

function i3k_sbean.unlock_homeland_warehouse_req:encode(os)
	os:pushString(self._pname_)
end


-- 开始挑战
i3k_sbean.towerdefence_start_req = i3k_class("towerdefence_start_req")
function i3k_sbean.towerdefence_start_req:ctor()
	self._pname_ = "towerdefence_start_req"
	--self.mapID:		int32	
end

function i3k_sbean.towerdefence_start_req:clone()
	return clone(self)
end

function i3k_sbean.towerdefence_start_req:decode(is)
	is:popString()
	self.mapID = is:popNumber()
end

function i3k_sbean.towerdefence_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapID)
end


-- 翻牌抽奖
i3k_sbean.towerdefence_selectcard_req = i3k_class("towerdefence_selectcard_req")
function i3k_sbean.towerdefence_selectcard_req:ctor()
	self._pname_ = "towerdefence_selectcard_req"
	--self.cardNo:		int32	
end

function i3k_sbean.towerdefence_selectcard_req:clone()
	return clone(self)
end

function i3k_sbean.towerdefence_selectcard_req:decode(is)
	is:popString()
	self.cardNo = is:popNumber()
end

function i3k_sbean.towerdefence_selectcard_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cardNo)
end


-- 锁定强化序号
i3k_sbean.look_strength_heirloom_req = i3k_class("look_strength_heirloom_req")
function i3k_sbean.look_strength_heirloom_req:ctor()
	self._pname_ = "look_strength_heirloom_req"
	--self.index:		int32	
end

function i3k_sbean.look_strength_heirloom_req:clone()
	return clone(self)
end

function i3k_sbean.look_strength_heirloom_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.look_strength_heirloom_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 强化传家宝
i3k_sbean.strength_heirloom_req = i3k_class("strength_heirloom_req")
function i3k_sbean.strength_heirloom_req:ctor()
	self._pname_ = "strength_heirloom_req"
	--self.doubleCost:		int32	
end

function i3k_sbean.strength_heirloom_req:clone()
	return clone(self)
end

function i3k_sbean.strength_heirloom_req:decode(is)
	is:popString()
	self.doubleCost = is:popNumber()
end

function i3k_sbean.strength_heirloom_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.doubleCost)
end


-- 摇一摇
i3k_sbean.exp_tree_get_drop_req = i3k_class("exp_tree_get_drop_req")
function i3k_sbean.exp_tree_get_drop_req:ctor()
	self._pname_ = "exp_tree_get_drop_req"
end

function i3k_sbean.exp_tree_get_drop_req:decode(is)
	is:popString()
end

function i3k_sbean.exp_tree_get_drop_req:encode(os)
	os:pushString(self._pname_)
end


-- 浇水
i3k_sbean.exp_tree_watering_req = i3k_class("exp_tree_watering_req")
function i3k_sbean.exp_tree_watering_req:ctor()
	self._pname_ = "exp_tree_watering_req"
end

function i3k_sbean.exp_tree_watering_req:decode(is)
	is:popString()
end

function i3k_sbean.exp_tree_watering_req:encode(os)
	os:pushString(self._pname_)
end


-- 获取成熟奖励
i3k_sbean.exp_tree_mature_reward_req = i3k_class("exp_tree_mature_reward_req")
function i3k_sbean.exp_tree_mature_reward_req:ctor()
	self._pname_ = "exp_tree_mature_reward_req"
end

function i3k_sbean.exp_tree_mature_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.exp_tree_mature_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步经验果树信息
i3k_sbean.exp_tree_sync_req = i3k_class("exp_tree_sync_req")
function i3k_sbean.exp_tree_sync_req:ctor()
	self._pname_ = "exp_tree_sync_req"
end

function i3k_sbean.exp_tree_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.exp_tree_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 魂玉解封
i3k_sbean.seal_dispelling_req = i3k_class("seal_dispelling_req")
function i3k_sbean.seal_dispelling_req:ctor()
	self._pname_ = "seal_dispelling_req"
	--self.index:		int32	
end

function i3k_sbean.seal_dispelling_req:clone()
	return clone(self)
end

function i3k_sbean.seal_dispelling_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.seal_dispelling_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 魂玉解封晋级加速
i3k_sbean.seal_awaken_accelerate_req = i3k_class("seal_awaken_accelerate_req")
function i3k_sbean.seal_awaken_accelerate_req:ctor()
	self._pname_ = "seal_awaken_accelerate_req"
	--self.itemNum:		int32	
end

function i3k_sbean.seal_awaken_accelerate_req:clone()
	return clone(self)
end

function i3k_sbean.seal_awaken_accelerate_req:decode(is)
	is:popString()
	self.itemNum = is:popNumber()
end

function i3k_sbean.seal_awaken_accelerate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemNum)
end


-- 魂玉解封晋级
i3k_sbean.seal_awaken_req = i3k_class("seal_awaken_req")
function i3k_sbean.seal_awaken_req:ctor()
	self._pname_ = "seal_awaken_req"
end

function i3k_sbean.seal_awaken_req:decode(is)
	is:popString()
end

function i3k_sbean.seal_awaken_req:encode(os)
	os:pushString(self._pname_)
end


-- 进入城战成员同步
i3k_sbean.city_war_sect_roles_sync_req = i3k_class("city_war_sect_roles_sync_req")
function i3k_sbean.city_war_sect_roles_sync_req:ctor()
	self._pname_ = "city_war_sect_roles_sync_req"
end

function i3k_sbean.city_war_sect_roles_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.city_war_sect_roles_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 城战信息同步
i3k_sbean.city_war_info_sync_req = i3k_class("city_war_info_sync_req")
function i3k_sbean.city_war_info_sync_req:ctor()
	self._pname_ = "city_war_info_sync_req"
end

function i3k_sbean.city_war_info_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.city_war_info_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 获取城池报名信息
i3k_sbean.city_war_sign_info_req = i3k_class("city_war_sign_info_req")
function i3k_sbean.city_war_sign_info_req:ctor()
	self._pname_ = "city_war_sign_info_req"
end

function i3k_sbean.city_war_sign_info_req:decode(is)
	is:popString()
end

function i3k_sbean.city_war_sign_info_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派报名（id表示城的序号）
i3k_sbean.city_war_sect_sign_req = i3k_class("city_war_sect_sign_req")
function i3k_sbean.city_war_sect_sign_req:ctor()
	self._pname_ = "city_war_sect_sign_req"
	--self.id:		int32	
end

function i3k_sbean.city_war_sect_sign_req:clone()
	return clone(self)
end

function i3k_sbean.city_war_sect_sign_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.city_war_sect_sign_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 获取帮派竞标信息
i3k_sbean.city_war_bid_info_req = i3k_class("city_war_bid_info_req")
function i3k_sbean.city_war_bid_info_req:ctor()
	self._pname_ = "city_war_bid_info_req"
end

function i3k_sbean.city_war_bid_info_req:decode(is)
	is:popString()
end

function i3k_sbean.city_war_bid_info_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派竞标
i3k_sbean.city_war_sect_bid_req = i3k_class("city_war_sect_bid_req")
function i3k_sbean.city_war_sect_bid_req:ctor()
	self._pname_ = "city_war_sect_bid_req"
	--self.cityID:		int32	
	--self.price:		int32	
end

function i3k_sbean.city_war_sect_bid_req:clone()
	return clone(self)
end

function i3k_sbean.city_war_sect_bid_req:decode(is)
	is:popString()
	self.cityID = is:popNumber()
	self.price = is:popNumber()
end

function i3k_sbean.city_war_sect_bid_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cityID)
	os:pushNumber(self.price)
end


-- 竞标结果
i3k_sbean.city_war_bid_result_req = i3k_class("city_war_bid_result_req")
function i3k_sbean.city_war_bid_result_req:ctor()
	self._pname_ = "city_war_bid_result_req"
end

function i3k_sbean.city_war_bid_result_req:decode(is)
	is:popString()
end

function i3k_sbean.city_war_bid_result_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步城池归属者
i3k_sbean.city_war_current_kings_req = i3k_class("city_war_current_kings_req")
function i3k_sbean.city_war_current_kings_req:ctor()
	self._pname_ = "city_war_current_kings_req"
end

function i3k_sbean.city_war_current_kings_req:decode(is)
	is:popString()
end

function i3k_sbean.city_war_current_kings_req:encode(os)
	os:pushString(self._pname_)
end


-- 进入城战
i3k_sbean.city_war_enter_req = i3k_class("city_war_enter_req")
function i3k_sbean.city_war_enter_req:ctor()
	self._pname_ = "city_war_enter_req"
	--self.cityId:		int32	
end

function i3k_sbean.city_war_enter_req:clone()
	return clone(self)
end

function i3k_sbean.city_war_enter_req:decode(is)
	is:popString()
	self.cityId = is:popNumber()
end

function i3k_sbean.city_war_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cityId)
end


-- 开启城市之光
i3k_sbean.city_light_open_req = i3k_class("city_light_open_req")
function i3k_sbean.city_light_open_req:ctor()
	self._pname_ = "city_light_open_req"
	--self.cityId:		int32	
end

function i3k_sbean.city_light_open_req:clone()
	return clone(self)
end

function i3k_sbean.city_light_open_req:decode(is)
	is:popString()
	self.cityId = is:popNumber()
end

function i3k_sbean.city_light_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cityId)
end


-- 城市之光同步
i3k_sbean.city_light_sync_req = i3k_class("city_light_sync_req")
function i3k_sbean.city_light_sync_req:ctor()
	self._pname_ = "city_light_sync_req"
end

function i3k_sbean.city_light_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.city_light_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 攻城车取消变身
i3k_sbean.city_war_cancel_car_req = i3k_class("city_war_cancel_car_req")
function i3k_sbean.city_war_cancel_car_req:ctor()
	self._pname_ = "city_war_cancel_car_req"
end

function i3k_sbean.city_war_cancel_car_req:decode(is)
	is:popString()
end

function i3k_sbean.city_war_cancel_car_req:encode(os)
	os:pushString(self._pname_)
end


-- 攻城车变身
i3k_sbean.city_war_use_car_req = i3k_class("city_war_use_car_req")
function i3k_sbean.city_war_use_car_req:ctor()
	self._pname_ = "city_war_use_car_req"
end

function i3k_sbean.city_war_use_car_req:decode(is)
	is:popString()
end

function i3k_sbean.city_war_use_car_req:encode(os)
	os:pushString(self._pname_)
end


-- 箭塔修复(towerId:npc实例ID)
i3k_sbean.city_war_tower_fix_req = i3k_class("city_war_tower_fix_req")
function i3k_sbean.city_war_tower_fix_req:ctor()
	self._pname_ = "city_war_tower_fix_req"
	--self.towerId:		int32	
end

function i3k_sbean.city_war_tower_fix_req:clone()
	return clone(self)
end

function i3k_sbean.city_war_tower_fix_req:decode(is)
	is:popString()
	self.towerId = is:popNumber()
end

function i3k_sbean.city_war_tower_fix_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.towerId)
end


-- 城战传送
i3k_sbean.city_war_transform_req = i3k_class("city_war_transform_req")
function i3k_sbean.city_war_transform_req:ctor()
	self._pname_ = "city_war_transform_req"
	--self.transformId:		int32	
end

function i3k_sbean.city_war_transform_req:clone()
	return clone(self)
end

function i3k_sbean.city_war_transform_req:decode(is)
	is:popString()
	self.transformId = is:popNumber()
end

function i3k_sbean.city_war_transform_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.transformId)
end


-- 帮派分堂信息同步
i3k_sbean.sect_fight_group_sync_req = i3k_class("sect_fight_group_sync_req")
function i3k_sbean.sect_fight_group_sync_req:ctor()
	self._pname_ = "sect_fight_group_sync_req"
end

function i3k_sbean.sect_fight_group_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_fight_group_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 创建帮派分堂
i3k_sbean.sect_fight_group_create_req = i3k_class("sect_fight_group_create_req")
function i3k_sbean.sect_fight_group_create_req:ctor()
	self._pname_ = "sect_fight_group_create_req"
	--self.name:		string	
	--self.index:		int32	
end

function i3k_sbean.sect_fight_group_create_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_create_req:decode(is)
	is:popString()
	self.name = is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.sect_fight_group_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.name)
	os:pushNumber(self.index)
end


-- 解散帮派分堂
i3k_sbean.sect_fight_group_dismiss_req = i3k_class("sect_fight_group_dismiss_req")
function i3k_sbean.sect_fight_group_dismiss_req:ctor()
	self._pname_ = "sect_fight_group_dismiss_req"
	--self.id:		int32	
end

function i3k_sbean.sect_fight_group_dismiss_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_dismiss_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_fight_group_dismiss_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 退出帮派分堂
i3k_sbean.sect_fight_group_exit_req = i3k_class("sect_fight_group_exit_req")
function i3k_sbean.sect_fight_group_exit_req:ctor()
	self._pname_ = "sect_fight_group_exit_req"
	--self.id:		int32	
end

function i3k_sbean.sect_fight_group_exit_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_exit_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_fight_group_exit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 申请加入帮派分堂
i3k_sbean.sect_fight_group_apply_req = i3k_class("sect_fight_group_apply_req")
function i3k_sbean.sect_fight_group_apply_req:ctor()
	self._pname_ = "sect_fight_group_apply_req"
	--self.id:		int32	
end

function i3k_sbean.sect_fight_group_apply_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_apply_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_fight_group_apply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 同意加入帮派分堂
i3k_sbean.sect_fight_group_accept_req = i3k_class("sect_fight_group_accept_req")
function i3k_sbean.sect_fight_group_accept_req:ctor()
	self._pname_ = "sect_fight_group_accept_req"
	--self.id:		int32	
	--self.roleId:		int32	
end

function i3k_sbean.sect_fight_group_accept_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_accept_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.roleId = is:popNumber()
end

function i3k_sbean.sect_fight_group_accept_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.roleId)
end


-- 拒绝加入帮派分堂
i3k_sbean.sect_fight_group_refuse_req = i3k_class("sect_fight_group_refuse_req")
function i3k_sbean.sect_fight_group_refuse_req:ctor()
	self._pname_ = "sect_fight_group_refuse_req"
	--self.id:		int32	
	--self.roleIds:		set[int32]	
end

function i3k_sbean.sect_fight_group_refuse_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_refuse_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.roleIds = is:popNumberSet()
end

function i3k_sbean.sect_fight_group_refuse_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumberSet(self.roleIds)
end


-- 修改分堂堂主
i3k_sbean.sect_fight_group_change_leader_req = i3k_class("sect_fight_group_change_leader_req")
function i3k_sbean.sect_fight_group_change_leader_req:ctor()
	self._pname_ = "sect_fight_group_change_leader_req"
	--self.id:		int32	
	--self.roleId:		int32	
end

function i3k_sbean.sect_fight_group_change_leader_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_change_leader_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.roleId = is:popNumber()
end

function i3k_sbean.sect_fight_group_change_leader_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.roleId)
end


-- 踢出帮派分堂
i3k_sbean.sect_fight_group_kick_req = i3k_class("sect_fight_group_kick_req")
function i3k_sbean.sect_fight_group_kick_req:ctor()
	self._pname_ = "sect_fight_group_kick_req"
	--self.id:		int32	
	--self.roleId:		int32	
end

function i3k_sbean.sect_fight_group_kick_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_kick_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.roleId = is:popNumber()
end

function i3k_sbean.sect_fight_group_kick_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.roleId)
end


-- 帮派分堂改名
i3k_sbean.sect_fight_group_change_name_req = i3k_class("sect_fight_group_change_name_req")
function i3k_sbean.sect_fight_group_change_name_req:ctor()
	self._pname_ = "sect_fight_group_change_name_req"
	--self.id:		int32	
	--self.name:		string	
end

function i3k_sbean.sect_fight_group_change_name_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_change_name_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.name = is:popString()
end

function i3k_sbean.sect_fight_group_change_name_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.name)
end


-- 邀请其他玩家进入分堂协议
i3k_sbean.sect_fight_group_invite_req = i3k_class("sect_fight_group_invite_req")
function i3k_sbean.sect_fight_group_invite_req:ctor()
	self._pname_ = "sect_fight_group_invite_req"
	--self.id:		int32	
	--self.roleId:		int32	
end

function i3k_sbean.sect_fight_group_invite_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_invite_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.roleId = is:popNumber()
end

function i3k_sbean.sect_fight_group_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.roleId)
end


-- 接收到其他玩家分堂邀请后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
i3k_sbean.sect_fight_group_invitedby_req = i3k_class("sect_fight_group_invitedby_req")
function i3k_sbean.sect_fight_group_invitedby_req:ctor()
	self._pname_ = "sect_fight_group_invitedby_req"
	--self.id:		int32	
	--self.roleId:		int32	
	--self.accept:		int32	
end

function i3k_sbean.sect_fight_group_invitedby_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_invitedby_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.roleId = is:popNumber()
	self.accept = is:popNumber()
end

function i3k_sbean.sect_fight_group_invitedby_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.roleId)
	os:pushNumber(self.accept)
end


-- 分堂申请列表同步
i3k_sbean.sect_fight_group_apply_sync_req = i3k_class("sect_fight_group_apply_sync_req")
function i3k_sbean.sect_fight_group_apply_sync_req:ctor()
	self._pname_ = "sect_fight_group_apply_sync_req"
	--self.id:		int32	
end

function i3k_sbean.sect_fight_group_apply_sync_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_apply_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_fight_group_apply_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 分堂报名帮派战
i3k_sbean.sect_war_sign_req = i3k_class("sect_war_sign_req")
function i3k_sbean.sect_war_sign_req:ctor()
	self._pname_ = "sect_war_sign_req"
	--self.id:		int32	
end

function i3k_sbean.sect_war_sign_req:clone()
	return clone(self)
end

function i3k_sbean.sect_war_sign_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_war_sign_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 分堂取消报名
i3k_sbean.sect_war_quit_req = i3k_class("sect_war_quit_req")
function i3k_sbean.sect_war_quit_req:ctor()
	self._pname_ = "sect_war_quit_req"
	--self.id:		int32	
end

function i3k_sbean.sect_war_quit_req:clone()
	return clone(self)
end

function i3k_sbean.sect_war_quit_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_war_quit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 分堂当前帮派战状态同步
i3k_sbean.sect_fight_group_cur_status_req = i3k_class("sect_fight_group_cur_status_req")
function i3k_sbean.sect_fight_group_cur_status_req:ctor()
	self._pname_ = "sect_fight_group_cur_status_req"
	--self.id:		int32	
end

function i3k_sbean.sect_fight_group_cur_status_req:clone()
	return clone(self)
end

function i3k_sbean.sect_fight_group_cur_status_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_fight_group_cur_status_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 进入帮战地图
i3k_sbean.enter_sectwar_req = i3k_class("enter_sectwar_req")
function i3k_sbean.enter_sectwar_req:ctor()
	self._pname_ = "enter_sectwar_req"
	--self.groupId:		int32	
end

function i3k_sbean.enter_sectwar_req:clone()
	return clone(self)
end

function i3k_sbean.enter_sectwar_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
end

function i3k_sbean.enter_sectwar_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
end


-- 变性请求
i3k_sbean.role_change_gender_req = i3k_class("role_change_gender_req")
function i3k_sbean.role_change_gender_req:ctor()
	self._pname_ = "role_change_gender_req"
	--self.gender:		int32	
	--self.face:		int32	
	--self.hair:		int32	
end

function i3k_sbean.role_change_gender_req:clone()
	return clone(self)
end

function i3k_sbean.role_change_gender_req:decode(is)
	is:popString()
	self.gender = is:popNumber()
	self.face = is:popNumber()
	self.hair = is:popNumber()
end

function i3k_sbean.role_change_gender_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gender)
	os:pushNumber(self.face)
	os:pushNumber(self.hair)
end


-- 发起切磋邀请
i3k_sbean.role_single_invite_req = i3k_class("role_single_invite_req")
function i3k_sbean.role_single_invite_req:ctor()
	self._pname_ = "role_single_invite_req"
	--self.roleID:		int32	
end

function i3k_sbean.role_single_invite_req:clone()
	return clone(self)
end

function i3k_sbean.role_single_invite_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.role_single_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 切磋回应(-1: 拒绝 -2:正忙 -3:短时间不再接收玩家邀请)
i3k_sbean.role_single_response_req = i3k_class("role_single_response_req")
function i3k_sbean.role_single_response_req:ctor()
	self._pname_ = "role_single_response_req"
	--self.accept:		int32	
	--self.inviterID:		int32	
end

function i3k_sbean.role_single_response_req:clone()
	return clone(self)
end

function i3k_sbean.role_single_response_req:decode(is)
	is:popString()
	self.accept = is:popNumber()
	self.inviterID = is:popNumber()
end

function i3k_sbean.role_single_response_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.accept)
	os:pushNumber(self.inviterID)
end


-- 五绝秘藏同步
i3k_sbean.five_goals_sync_req = i3k_class("five_goals_sync_req")
function i3k_sbean.five_goals_sync_req:ctor()
	self._pname_ = "five_goals_sync_req"
end

function i3k_sbean.five_goals_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.five_goals_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 五绝秘藏领取奖励(type 1领取总得奖励  2领取小目标奖励)
i3k_sbean.five_goals_take_reward_req = i3k_class("five_goals_take_reward_req")
function i3k_sbean.five_goals_take_reward_req:ctor()
	self._pname_ = "five_goals_take_reward_req"
	--self.type:		int32	
	--self.goalid:		int32	
end

function i3k_sbean.five_goals_take_reward_req:clone()
	return clone(self)
end

function i3k_sbean.five_goals_take_reward_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.goalid = is:popNumber()
end

function i3k_sbean.five_goals_take_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.goalid)
end


-- 使用召回码
i3k_sbean.use_regression_code_req = i3k_class("use_regression_code_req")
function i3k_sbean.use_regression_code_req:ctor()
	self._pname_ = "use_regression_code_req"
	--self.code:		string	
end

function i3k_sbean.use_regression_code_req:clone()
	return clone(self)
end

function i3k_sbean.use_regression_code_req:decode(is)
	is:popString()
	self.code = is:popString()
end

function i3k_sbean.use_regression_code_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.code)
end


-- 领取积分奖励
i3k_sbean.get_score_reward_req = i3k_class("get_score_reward_req")
function i3k_sbean.get_score_reward_req:ctor()
	self._pname_ = "get_score_reward_req"
	--self.id:		int32	
end

function i3k_sbean.get_score_reward_req:clone()
	return clone(self)
end

function i3k_sbean.get_score_reward_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.get_score_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 同步召回信息
i3k_sbean.sync_regression_req = i3k_class("sync_regression_req")
function i3k_sbean.sync_regression_req:ctor()
	self._pname_ = "sync_regression_req"
end

function i3k_sbean.sync_regression_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_regression_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取登陆奖励
i3k_sbean.take_regression_login_gift_req = i3k_class("take_regression_login_gift_req")
function i3k_sbean.take_regression_login_gift_req:ctor()
	self._pname_ = "take_regression_login_gift_req"
	--self.day:		int32	
end

function i3k_sbean.take_regression_login_gift_req:clone()
	return clone(self)
end

function i3k_sbean.take_regression_login_gift_req:decode(is)
	is:popString()
	self.day = is:popNumber()
end

function i3k_sbean.take_regression_login_gift_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.day)
end


-- 购买每日折扣
i3k_sbean.buy_regression_daily_discount_req = i3k_class("buy_regression_daily_discount_req")
function i3k_sbean.buy_regression_daily_discount_req:ctor()
	self._pname_ = "buy_regression_daily_discount_req"
	--self.day:		int32	
end

function i3k_sbean.buy_regression_daily_discount_req:clone()
	return clone(self)
end

function i3k_sbean.buy_regression_daily_discount_req:decode(is)
	is:popString()
	self.day = is:popNumber()
end

function i3k_sbean.buy_regression_daily_discount_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.day)
end


-- 职业转换请求
i3k_sbean.change_role_profession_req = i3k_class("change_role_profession_req")
function i3k_sbean.change_role_profession_req:ctor()
	self._pname_ = "change_role_profession_req"
	--self.classType:		int8	
	--self.tlvl:		int8	
	--self.bwType:		int8	
	--self.hair:		int8	
	--self.face:		int8	
end

function i3k_sbean.change_role_profession_req:clone()
	return clone(self)
end

function i3k_sbean.change_role_profession_req:decode(is)
	is:popString()
	self.classType = is:popNumber()
	self.tlvl = is:popNumber()
	self.bwType = is:popNumber()
	self.hair = is:popNumber()
	self.face = is:popNumber()
end

function i3k_sbean.change_role_profession_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.classType)
	os:pushNumber(self.tlvl)
	os:pushNumber(self.bwType)
	os:pushNumber(self.hair)
	os:pushNumber(self.face)
end


-- 同步上次转职时间
i3k_sbean.sync_last_change_pro_time_req = i3k_class("sync_last_change_pro_time_req")
function i3k_sbean.sync_last_change_pro_time_req:ctor()
	self._pname_ = "sync_last_change_pro_time_req"
end

function i3k_sbean.sync_last_change_pro_time_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_last_change_pro_time_req:encode(os)
	os:pushString(self._pname_)
end


-- 开心对对碰祈福
i3k_sbean.happy_mstching_take_word_req = i3k_class("happy_mstching_take_word_req")
function i3k_sbean.happy_mstching_take_word_req:ctor()
	self._pname_ = "happy_mstching_take_word_req"
end

function i3k_sbean.happy_mstching_take_word_req:decode(is)
	is:popString()
end

function i3k_sbean.happy_mstching_take_word_req:encode(os)
	os:pushString(self._pname_)
end


-- 开心对对碰打开兑换界面
i3k_sbean.happy_mstching_open_exchange_req = i3k_class("happy_mstching_open_exchange_req")
function i3k_sbean.happy_mstching_open_exchange_req:ctor()
	self._pname_ = "happy_mstching_open_exchange_req"
end

function i3k_sbean.happy_mstching_open_exchange_req:decode(is)
	is:popString()
end

function i3k_sbean.happy_mstching_open_exchange_req:encode(os)
	os:pushString(self._pname_)
end


-- 开心对对碰兑换
i3k_sbean.happy_mstching_take_reward_req = i3k_class("happy_mstching_take_reward_req")
function i3k_sbean.happy_mstching_take_reward_req:ctor()
	self._pname_ = "happy_mstching_take_reward_req"
	--self.rewardId:		int32	
end

function i3k_sbean.happy_mstching_take_reward_req:clone()
	return clone(self)
end

function i3k_sbean.happy_mstching_take_reward_req:decode(is)
	is:popString()
	self.rewardId = is:popNumber()
end

function i3k_sbean.happy_mstching_take_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rewardId)
end


-- 宠物赛跑投票
i3k_sbean.pet_run_ticket_req = i3k_class("pet_run_ticket_req")
function i3k_sbean.pet_run_ticket_req:ctor()
	self._pname_ = "pet_run_ticket_req"
	--self.petId:		int32	
	--self.useDiamond:		int32	
	--self.ticketNum:		int32	
end

function i3k_sbean.pet_run_ticket_req:clone()
	return clone(self)
end

function i3k_sbean.pet_run_ticket_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.useDiamond = is:popNumber()
	self.ticketNum = is:popNumber()
end

function i3k_sbean.pet_run_ticket_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.useDiamond)
	os:pushNumber(self.ticketNum)
end


-- 宠物赛跑同步
i3k_sbean.pet_run_sync_req = i3k_class("pet_run_sync_req")
function i3k_sbean.pet_run_sync_req:ctor()
	self._pname_ = "pet_run_sync_req"
end

function i3k_sbean.pet_run_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.pet_run_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 宠物赛跑扔道具
i3k_sbean.pet_run_throw_item_req = i3k_class("pet_run_throw_item_req")
function i3k_sbean.pet_run_throw_item_req:ctor()
	self._pname_ = "pet_run_throw_item_req"
	--self.itemId:		int32	
	--self.petId:		int32	
end

function i3k_sbean.pet_run_throw_item_req:clone()
	return clone(self)
end

function i3k_sbean.pet_run_throw_item_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.petId = is:popNumber()
end

function i3k_sbean.pet_run_throw_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.petId)
end


-- 宠物赛跑商城同步协议
i3k_sbean.pet_run_shopsync_req = i3k_class("pet_run_shopsync_req")
function i3k_sbean.pet_run_shopsync_req:ctor()
	self._pname_ = "pet_run_shopsync_req"
end

function i3k_sbean.pet_run_shopsync_req:decode(is)
	is:popString()
end

function i3k_sbean.pet_run_shopsync_req:encode(os)
	os:pushString(self._pname_)
end


-- 宠物赛跑商城刷新协议
i3k_sbean.pet_run_shoprefresh_req = i3k_class("pet_run_shoprefresh_req")
function i3k_sbean.pet_run_shoprefresh_req:ctor()
	self._pname_ = "pet_run_shoprefresh_req"
	--self.times:		int32	
	--self.isSecondType:		int32	
end

function i3k_sbean.pet_run_shoprefresh_req:clone()
	return clone(self)
end

function i3k_sbean.pet_run_shoprefresh_req:decode(is)
	is:popString()
	self.times = is:popNumber()
	self.isSecondType = is:popNumber()
end

function i3k_sbean.pet_run_shoprefresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
	os:pushNumber(self.isSecondType)
end


-- 宠物赛跑商城买商品协议
i3k_sbean.pet_run_shopbuy_req = i3k_class("pet_run_shopbuy_req")
function i3k_sbean.pet_run_shopbuy_req:ctor()
	self._pname_ = "pet_run_shopbuy_req"
	--self.seq:		int32	
	--self.discount:		int32	
end

function i3k_sbean.pet_run_shopbuy_req:clone()
	return clone(self)
end

function i3k_sbean.pet_run_shopbuy_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
	self.discount = is:popNumber()
end

function i3k_sbean.pet_run_shopbuy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
	os:pushNumber(self.discount)
end


i3k_sbean.bottle_exchange_sync_req = i3k_class("bottle_exchange_sync_req")
function i3k_sbean.bottle_exchange_sync_req:ctor()
	self._pname_ = "bottle_exchange_sync_req"
end

function i3k_sbean.bottle_exchange_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.bottle_exchange_sync_req:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.bottle_exchange_req = i3k_class("bottle_exchange_req")
function i3k_sbean.bottle_exchange_req:ctor()
	self._pname_ = "bottle_exchange_req"
	--self.item:		int32	
	--self.cnt:		int32	
	--self.msg:		string	
end

function i3k_sbean.bottle_exchange_req:clone()
	return clone(self)
end

function i3k_sbean.bottle_exchange_req:decode(is)
	is:popString()
	self.item = is:popNumber()
	self.cnt = is:popNumber()
	self.msg = is:popString()
end

function i3k_sbean.bottle_exchange_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.item)
	os:pushNumber(self.cnt)
	os:pushString(self.msg)
end


-- 同步祝福排行榜
i3k_sbean.hot_spring_buff_rank_req = i3k_class("hot_spring_buff_rank_req")
function i3k_sbean.hot_spring_buff_rank_req:ctor()
	self._pname_ = "hot_spring_buff_rank_req"
	--self.rankType:		int32	
end

function i3k_sbean.hot_spring_buff_rank_req:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_buff_rank_req:decode(is)
	is:popString()
	self.rankType = is:popNumber()
end

function i3k_sbean.hot_spring_buff_rank_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rankType)
end


-- 泡温泉使用单人动作 (actType   1=调戏   2=肥皂  3=搓澡)
i3k_sbean.hot_spring_use_single_act_req = i3k_class("hot_spring_use_single_act_req")
function i3k_sbean.hot_spring_use_single_act_req:ctor()
	self._pname_ = "hot_spring_use_single_act_req"
	--self.actType:		int32	
	--self.beUseRid:		int32	
end

function i3k_sbean.hot_spring_use_single_act_req:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_use_single_act_req:decode(is)
	is:popString()
	self.actType = is:popNumber()
	self.beUseRid = is:popNumber()
end

function i3k_sbean.hot_spring_use_single_act_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.actType)
	os:pushNumber(self.beUseRid)
end


-- 泡温泉使用双人动作 (actType  1=船  2=伞)
i3k_sbean.hot_spring_use_double_act_req = i3k_class("hot_spring_use_double_act_req")
function i3k_sbean.hot_spring_use_double_act_req:ctor()
	self._pname_ = "hot_spring_use_double_act_req"
	--self.actType:		int32	
	--self.beUsedRid:		int32	
end

function i3k_sbean.hot_spring_use_double_act_req:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_use_double_act_req:decode(is)
	is:popString()
	self.actType = is:popNumber()
	self.beUsedRid = is:popNumber()
end

function i3k_sbean.hot_spring_use_double_act_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.actType)
	os:pushNumber(self.beUsedRid)
end


-- 泡温泉使用双人动作应答 (answer 1=同意   -8=拒绝)
i3k_sbean.hot_spring_double_act_answer_req = i3k_class("hot_spring_double_act_answer_req")
function i3k_sbean.hot_spring_double_act_answer_req:ctor()
	self._pname_ = "hot_spring_double_act_answer_req"
	--self.answer:		int32	
	--self.useRid:		int32	
	--self.useRname:		string	
	--self.actType:		int32	
end

function i3k_sbean.hot_spring_double_act_answer_req:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_double_act_answer_req:decode(is)
	is:popString()
	self.answer = is:popNumber()
	self.useRid = is:popNumber()
	self.useRname = is:popString()
	self.actType = is:popNumber()
end

function i3k_sbean.hot_spring_double_act_answer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.answer)
	os:pushNumber(self.useRid)
	os:pushString(self.useRname)
	os:pushNumber(self.actType)
end


-- 泡温泉使用buff(buffType  1=全服buff   2=帮派buff)
i3k_sbean.hot_spring_use_buff_req = i3k_class("hot_spring_use_buff_req")
function i3k_sbean.hot_spring_use_buff_req:ctor()
	self._pname_ = "hot_spring_use_buff_req"
	--self.buffType:		int32	
end

function i3k_sbean.hot_spring_use_buff_req:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_use_buff_req:decode(is)
	is:popString()
	self.buffType = is:popNumber()
end

function i3k_sbean.hot_spring_use_buff_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.buffType)
end


-- 泡温泉取消双人互动
i3k_sbean.hot_spring_cancel_double_act_req = i3k_class("hot_spring_cancel_double_act_req")
function i3k_sbean.hot_spring_cancel_double_act_req:ctor()
	self._pname_ = "hot_spring_cancel_double_act_req"
end

function i3k_sbean.hot_spring_cancel_double_act_req:decode(is)
	is:popString()
end

function i3k_sbean.hot_spring_cancel_double_act_req:encode(os)
	os:pushString(self._pname_)
end


-- 泡温泉取消双人互动邀请
i3k_sbean.hot_spring_cancel_invite = i3k_class("hot_spring_cancel_invite")
function i3k_sbean.hot_spring_cancel_invite:ctor()
	self._pname_ = "hot_spring_cancel_invite"
	--self.beUseRid:		int32	
end

function i3k_sbean.hot_spring_cancel_invite:clone()
	return clone(self)
end

function i3k_sbean.hot_spring_cancel_invite:decode(is)
	is:popString()
	self.beUseRid = is:popNumber()
end

function i3k_sbean.hot_spring_cancel_invite:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.beUseRid)
end


-- 清除buff药
i3k_sbean.buffdrug_clear_req = i3k_class("buffdrug_clear_req")
function i3k_sbean.buffdrug_clear_req:ctor()
	self._pname_ = "buffdrug_clear_req"
	--self.type:		int32	
	--self.buffID:		int32	
end

function i3k_sbean.buffdrug_clear_req:clone()
	return clone(self)
end

function i3k_sbean.buffdrug_clear_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.buffID = is:popNumber()
end

function i3k_sbean.buffdrug_clear_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.buffID)
end


-- 碎片回收同步请求
i3k_sbean.fragment_recycle_sync_req = i3k_class("fragment_recycle_sync_req")
function i3k_sbean.fragment_recycle_sync_req:ctor()
	self._pname_ = "fragment_recycle_sync_req"
end

function i3k_sbean.fragment_recycle_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.fragment_recycle_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 碎片回收协议
i3k_sbean.fragment_recycle_req = i3k_class("fragment_recycle_req")
function i3k_sbean.fragment_recycle_req:ctor()
	self._pname_ = "fragment_recycle_req"
	--self.id:		int32	
	--self.wantReward:		int32	
end

function i3k_sbean.fragment_recycle_req:clone()
	return clone(self)
end

function i3k_sbean.fragment_recycle_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.wantReward = is:popNumber()
end

function i3k_sbean.fragment_recycle_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.wantReward)
end


-- 武魂方位升级
i3k_sbean.weaponsoul_lvlup_req = i3k_class("weaponsoul_lvlup_req")
function i3k_sbean.weaponsoul_lvlup_req:ctor()
	self._pname_ = "weaponsoul_lvlup_req"
	--self.partID:		int32	
	--self.toLvl:		int32	
end

function i3k_sbean.weaponsoul_lvlup_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_lvlup_req:decode(is)
	is:popString()
	self.partID = is:popNumber()
	self.toLvl = is:popNumber()
end

function i3k_sbean.weaponsoul_lvlup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.partID)
	os:pushNumber(self.toLvl)
end


-- 武魂升阶
i3k_sbean.weaponsoul_gradeup_req = i3k_class("weaponsoul_gradeup_req")
function i3k_sbean.weaponsoul_gradeup_req:ctor()
	self._pname_ = "weaponsoul_gradeup_req"
	--self.toGrade:		int32	
end

function i3k_sbean.weaponsoul_gradeup_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_gradeup_req:decode(is)
	is:popString()
	self.toGrade = is:popNumber()
end

function i3k_sbean.weaponsoul_gradeup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.toGrade)
end


-- 设置升阶自动变更形象
i3k_sbean.weaponsoul_showauto_req = i3k_class("weaponsoul_showauto_req")
function i3k_sbean.weaponsoul_showauto_req:ctor()
	self._pname_ = "weaponsoul_showauto_req"
	--self.auto:		int32	
end

function i3k_sbean.weaponsoul_showauto_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_showauto_req:decode(is)
	is:popString()
	self.auto = is:popNumber()
end

function i3k_sbean.weaponsoul_showauto_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.auto)
end


-- 变更形象
i3k_sbean.weaponsoul_showset_req = i3k_class("weaponsoul_showset_req")
function i3k_sbean.weaponsoul_showset_req:ctor()
	self._pname_ = "weaponsoul_showset_req"
	--self.showID:		int32	
end

function i3k_sbean.weaponsoul_showset_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_showset_req:decode(is)
	is:popString()
	self.showID = is:popNumber()
end

function i3k_sbean.weaponsoul_showset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
end


-- 解锁追加形象
i3k_sbean.weaponsoul_unlockshow_req = i3k_class("weaponsoul_unlockshow_req")
function i3k_sbean.weaponsoul_unlockshow_req:ctor()
	self._pname_ = "weaponsoul_unlockshow_req"
	--self.showID:		int32	
end

function i3k_sbean.weaponsoul_unlockshow_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_unlockshow_req:decode(is)
	is:popString()
	self.showID = is:popNumber()
end

function i3k_sbean.weaponsoul_unlockshow_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.showID)
end


-- 隐藏形象
i3k_sbean.weaponsoul_hide_req = i3k_class("weaponsoul_hide_req")
function i3k_sbean.weaponsoul_hide_req:ctor()
	self._pname_ = "weaponsoul_hide_req"
	--self.hide:		int32	
end

function i3k_sbean.weaponsoul_hide_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_hide_req:decode(is)
	is:popString()
	self.hide = is:popNumber()
end

function i3k_sbean.weaponsoul_hide_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hide)
end


-- 方位重置
i3k_sbean.weaponsoul_partreset_req = i3k_class("weaponsoul_partreset_req")
function i3k_sbean.weaponsoul_partreset_req:ctor()
	self._pname_ = "weaponsoul_partreset_req"
	--self.partID:		int32	
	--self.shapeLock:		int32	
	--self.colorLock:		int32	
end

function i3k_sbean.weaponsoul_partreset_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_partreset_req:decode(is)
	is:popString()
	self.partID = is:popNumber()
	self.shapeLock = is:popNumber()
	self.colorLock = is:popNumber()
end

function i3k_sbean.weaponsoul_partreset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.partID)
	os:pushNumber(self.shapeLock)
	os:pushNumber(self.colorLock)
end


-- 保存方位重置
i3k_sbean.weaponsoul_savereset_req = i3k_class("weaponsoul_savereset_req")
function i3k_sbean.weaponsoul_savereset_req:ctor()
	self._pname_ = "weaponsoul_savereset_req"
	--self.partID:		int32	
end

function i3k_sbean.weaponsoul_savereset_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_savereset_req:decode(is)
	is:popString()
	self.partID = is:popNumber()
end

function i3k_sbean.weaponsoul_savereset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.partID)
end


-- 放弃方位重置
i3k_sbean.weaponsoul_quitreset_req = i3k_class("weaponsoul_quitreset_req")
function i3k_sbean.weaponsoul_quitreset_req:ctor()
	self._pname_ = "weaponsoul_quitreset_req"
	--self.partID:		int32	
end

function i3k_sbean.weaponsoul_quitreset_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_quitreset_req:decode(is)
	is:popString()
	self.partID = is:popNumber()
end

function i3k_sbean.weaponsoul_quitreset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.partID)
end


-- 激活星耀
i3k_sbean.weaponsoul_staractivate_req = i3k_class("weaponsoul_staractivate_req")
function i3k_sbean.weaponsoul_staractivate_req:ctor()
	self._pname_ = "weaponsoul_staractivate_req"
	--self.pos:		map[int32, int32]	
end

function i3k_sbean.weaponsoul_staractivate_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_staractivate_req:decode(is)
	is:popString()
	self.pos = is:popNumberNumberMap()
end

function i3k_sbean.weaponsoul_staractivate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.pos)
end


-- 快速激活星耀
i3k_sbean.weaponsoul_quickactivate_req = i3k_class("weaponsoul_quickactivate_req")
function i3k_sbean.weaponsoul_quickactivate_req:ctor()
	self._pname_ = "weaponsoul_quickactivate_req"
	--self.starID:		int32	
end

function i3k_sbean.weaponsoul_quickactivate_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_quickactivate_req:decode(is)
	is:popString()
	self.starID = is:popNumber()
end

function i3k_sbean.weaponsoul_quickactivate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.starID)
end


-- 设置当前星耀
i3k_sbean.weaponsoul_curstar_req = i3k_class("weaponsoul_curstar_req")
function i3k_sbean.weaponsoul_curstar_req:ctor()
	self._pname_ = "weaponsoul_curstar_req"
	--self.starID:		int32	
end

function i3k_sbean.weaponsoul_curstar_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_curstar_req:decode(is)
	is:popString()
	self.starID = is:popNumber()
end

function i3k_sbean.weaponsoul_curstar_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.starID)
end


-- 神木鼎同步
i3k_sbean.tripod_times_sync_req = i3k_class("tripod_times_sync_req")
function i3k_sbean.tripod_times_sync_req:ctor()
	self._pname_ = "tripod_times_sync_req"
end

function i3k_sbean.tripod_times_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.tripod_times_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 神木鼎融合
i3k_sbean.tripod_merge_req = i3k_class("tripod_merge_req")
function i3k_sbean.tripod_merge_req:ctor()
	self._pname_ = "tripod_merge_req"
	--self.itemId:		int32	
	--self.count:		int32	
end

function i3k_sbean.tripod_merge_req:clone()
	return clone(self)
end

function i3k_sbean.tripod_merge_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.tripod_merge_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.count)
end


-- 神木鼎购买次数
i3k_sbean.tripod_buy_times_req = i3k_class("tripod_buy_times_req")
function i3k_sbean.tripod_buy_times_req:ctor()
	self._pname_ = "tripod_buy_times_req"
	--self.count:		int32	
end

function i3k_sbean.tripod_buy_times_req:clone()
	return clone(self)
end

function i3k_sbean.tripod_buy_times_req:decode(is)
	is:popString()
	self.count = is:popNumber()
end

function i3k_sbean.tripod_buy_times_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.count)
end


-- 激活器灵
i3k_sbean.weaponspirit_activite_req = i3k_class("weaponspirit_activite_req")
function i3k_sbean.weaponspirit_activite_req:ctor()
	self._pname_ = "weaponspirit_activite_req"
end

function i3k_sbean.weaponspirit_activite_req:decode(is)
	is:popString()
end

function i3k_sbean.weaponspirit_activite_req:encode(os)
	os:pushString(self._pname_)
end


-- 激活器灵节点
i3k_sbean.weaponspirit_activite_point_req = i3k_class("weaponspirit_activite_point_req")
function i3k_sbean.weaponspirit_activite_point_req:ctor()
	self._pname_ = "weaponspirit_activite_point_req"
	--self.spiritId:		int32	
	--self.pointId:		int32	
end

function i3k_sbean.weaponspirit_activite_point_req:clone()
	return clone(self)
end

function i3k_sbean.weaponspirit_activite_point_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
	self.pointId = is:popNumber()
end

function i3k_sbean.weaponspirit_activite_point_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
	os:pushNumber(self.pointId)
end


-- 装备器灵
i3k_sbean.weaponspirit_equip_req = i3k_class("weaponspirit_equip_req")
function i3k_sbean.weaponspirit_equip_req:ctor()
	self._pname_ = "weaponspirit_equip_req"
	--self.spiritId:		int32	
	--self.weaponId:		int32	
end

function i3k_sbean.weaponspirit_equip_req:clone()
	return clone(self)
end

function i3k_sbean.weaponspirit_equip_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
	self.weaponId = is:popNumber()
end

function i3k_sbean.weaponspirit_equip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
	os:pushNumber(self.weaponId)
end


-- 器灵升阶
i3k_sbean.weaponspirit_uprank_req = i3k_class("weaponspirit_uprank_req")
function i3k_sbean.weaponspirit_uprank_req:ctor()
	self._pname_ = "weaponspirit_uprank_req"
	--self.spiritId:		int32	
	--self.rank:		int32	
end

function i3k_sbean.weaponspirit_uprank_req:clone()
	return clone(self)
end

function i3k_sbean.weaponspirit_uprank_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
	self.rank = is:popNumber()
end

function i3k_sbean.weaponspirit_uprank_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
	os:pushNumber(self.rank)
end


-- 器灵技能升级
i3k_sbean.weaponspirit_skill_level_up_req = i3k_class("weaponspirit_skill_level_up_req")
function i3k_sbean.weaponspirit_skill_level_up_req:ctor()
	self._pname_ = "weaponspirit_skill_level_up_req"
	--self.spiritId:		int32	
	--self.level:		int32	
end

function i3k_sbean.weaponspirit_skill_level_up_req:clone()
	return clone(self)
end

function i3k_sbean.weaponspirit_skill_level_up_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.weaponspirit_skill_level_up_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
	os:pushNumber(self.level)
end


-- 共享好礼同步
i3k_sbean.shared_pay_sync_req = i3k_class("shared_pay_sync_req")
function i3k_sbean.shared_pay_sync_req:ctor()
	self._pname_ = "shared_pay_sync_req"
	--self.id:		int32	
end

function i3k_sbean.shared_pay_sync_req:clone()
	return clone(self)
end

function i3k_sbean.shared_pay_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.shared_pay_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 共享好礼领奖
i3k_sbean.shared_pay_take_reward_req = i3k_class("shared_pay_take_reward_req")
function i3k_sbean.shared_pay_take_reward_req:ctor()
	self._pname_ = "shared_pay_take_reward_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.payReq:		int32	
	--self.payRoles:		int32	
end

function i3k_sbean.shared_pay_take_reward_req:clone()
	return clone(self)
end

function i3k_sbean.shared_pay_take_reward_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.payReq = is:popNumber()
	self.payRoles = is:popNumber()
end

function i3k_sbean.shared_pay_take_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.payReq)
	os:pushNumber(self.payRoles)
end


-- 连续使用道具活动同步
i3k_sbean.use_item_act_sync_req = i3k_class("use_item_act_sync_req")
function i3k_sbean.use_item_act_sync_req:ctor()
	self._pname_ = "use_item_act_sync_req"
	--self.id:		int32	
end

function i3k_sbean.use_item_act_sync_req:clone()
	return clone(self)
end

function i3k_sbean.use_item_act_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.use_item_act_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 连续使用道具活动领奖
i3k_sbean.use_item_act_take_reward_req = i3k_class("use_item_act_take_reward_req")
function i3k_sbean.use_item_act_take_reward_req:ctor()
	self._pname_ = "use_item_act_take_reward_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.levelid:		int32	
end

function i3k_sbean.use_item_act_take_reward_req:clone()
	return clone(self)
end

function i3k_sbean.use_item_act_take_reward_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.levelid = is:popNumber()
end

function i3k_sbean.use_item_act_take_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.levelid)
end


-- 找你妹活动开始
i3k_sbean.finding_your_sister_start_req = i3k_class("finding_your_sister_start_req")
function i3k_sbean.finding_your_sister_start_req:ctor()
	self._pname_ = "finding_your_sister_start_req"
	--self.id:		int32	
end

function i3k_sbean.finding_your_sister_start_req:clone()
	return clone(self)
end

function i3k_sbean.finding_your_sister_start_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.finding_your_sister_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 找你妹点击 (result 1=点击正确  0=点击错误) type顺序1-3
i3k_sbean.finding_your_sister_click_req = i3k_class("finding_your_sister_click_req")
function i3k_sbean.finding_your_sister_click_req:ctor()
	self._pname_ = "finding_your_sister_click_req"
	--self.id:		int32	
	--self.itemId:		int32	
	--self.result:		int32	
end

function i3k_sbean.finding_your_sister_click_req:clone()
	return clone(self)
end

function i3k_sbean.finding_your_sister_click_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.itemId = is:popNumber()
	self.result = is:popNumber()
end

function i3k_sbean.finding_your_sister_click_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.itemId)
	os:pushNumber(self.result)
end


-- 找你妹请求奖励
i3k_sbean.finding_your_sister_get_rewards_req = i3k_class("finding_your_sister_get_rewards_req")
function i3k_sbean.finding_your_sister_get_rewards_req:ctor()
	self._pname_ = "finding_your_sister_get_rewards_req"
	--self.id:		int32	
end

function i3k_sbean.finding_your_sister_get_rewards_req:clone()
	return clone(self)
end

function i3k_sbean.finding_your_sister_get_rewards_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.finding_your_sister_get_rewards_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 角色加油
i3k_sbean.role_oil_req = i3k_class("role_oil_req")
function i3k_sbean.role_oil_req:ctor()
	self._pname_ = "role_oil_req"
	--self.times:		int32	
end

function i3k_sbean.role_oil_req:clone()
	return clone(self)
end

function i3k_sbean.role_oil_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.role_oil_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 同步加油信息
i3k_sbean.sync_oil_req = i3k_class("sync_oil_req")
function i3k_sbean.sync_oil_req:ctor()
	self._pname_ = "sync_oil_req"
end

function i3k_sbean.sync_oil_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_oil_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取加油奖励
i3k_sbean.take_oil_reward_req = i3k_class("take_oil_reward_req")
function i3k_sbean.take_oil_reward_req:ctor()
	self._pname_ = "take_oil_reward_req"
	--self.score:		int32	
end

function i3k_sbean.take_oil_reward_req:clone()
	return clone(self)
end

function i3k_sbean.take_oil_reward_req:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.take_oil_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 排行榜同步
i3k_sbean.oil_rank_req = i3k_class("oil_rank_req")
function i3k_sbean.oil_rank_req:ctor()
	self._pname_ = "oil_rank_req"
end

function i3k_sbean.oil_rank_req:decode(is)
	is:popString()
end

function i3k_sbean.oil_rank_req:encode(os)
	os:pushString(self._pname_)
end


-- 大富翁同步
i3k_sbean.rich_sync_req = i3k_class("rich_sync_req")
function i3k_sbean.rich_sync_req:ctor()
	self._pname_ = "rich_sync_req"
	--self.groupId:		int32	
end

function i3k_sbean.rich_sync_req:clone()
	return clone(self)
end

function i3k_sbean.rich_sync_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
end

function i3k_sbean.rich_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
end


-- 大富翁扔色子
i3k_sbean.rich_go_req = i3k_class("rich_go_req")
function i3k_sbean.rich_go_req:ctor()
	self._pname_ = "rich_go_req"
	--self.groupId:		int32	
end

function i3k_sbean.rich_go_req:clone()
	return clone(self)
end

function i3k_sbean.rich_go_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
end

function i3k_sbean.rich_go_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
end


-- 大富翁完成事件
i3k_sbean.rich_get_event_req = i3k_class("rich_get_event_req")
function i3k_sbean.rich_get_event_req:ctor()
	self._pname_ = "rich_get_event_req"
	--self.groupId:		int32	
	--self.arg:		int32	
	--self.arg1:		int32	
end

function i3k_sbean.rich_get_event_req:clone()
	return clone(self)
end

function i3k_sbean.rich_get_event_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
	self.arg = is:popNumber()
	self.arg1 = is:popNumber()
end

function i3k_sbean.rich_get_event_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
	os:pushNumber(self.arg)
	os:pushNumber(self.arg1)
end


-- 大富翁放弃事件
i3k_sbean.rich_give_up_req = i3k_class("rich_give_up_req")
function i3k_sbean.rich_give_up_req:ctor()
	self._pname_ = "rich_give_up_req"
	--self.groupId:		int32	
end

function i3k_sbean.rich_give_up_req:clone()
	return clone(self)
end

function i3k_sbean.rich_give_up_req:decode(is)
	is:popString()
	self.groupId = is:popNumber()
end

function i3k_sbean.rich_give_up_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupId)
end


-- 帮派驻地建造同步
i3k_sbean.sect_zone_sync_build_req = i3k_class("sect_zone_sync_build_req")
function i3k_sbean.sect_zone_sync_build_req:ctor()
	self._pname_ = "sect_zone_sync_build_req"
end

function i3k_sbean.sect_zone_sync_build_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_zone_sync_build_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派驻地建造
i3k_sbean.sect_zone_build_req = i3k_class("sect_zone_build_req")
function i3k_sbean.sect_zone_build_req:ctor()
	self._pname_ = "sect_zone_build_req"
	--self.times:		int32	
end

function i3k_sbean.sect_zone_build_req:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_build_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.sect_zone_build_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 帮派驻地开启
i3k_sbean.sect_zone_open_req = i3k_class("sect_zone_open_req")
function i3k_sbean.sect_zone_open_req:ctor()
	self._pname_ = "sect_zone_open_req"
end

function i3k_sbean.sect_zone_open_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_zone_open_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派驻地建造排行同步
i3k_sbean.sect_zone_build_rank_req = i3k_class("sect_zone_build_rank_req")
function i3k_sbean.sect_zone_build_rank_req:ctor()
	self._pname_ = "sect_zone_build_rank_req"
end

function i3k_sbean.sect_zone_build_rank_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_zone_build_rank_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派驻地BOSS捐献道具
i3k_sbean.sect_zone_boss_item_req = i3k_class("sect_zone_boss_item_req")
function i3k_sbean.sect_zone_boss_item_req:ctor()
	self._pname_ = "sect_zone_boss_item_req"
	--self.bossId:		int32	
	--self.itemId:		int32	
	--self.itemNum:		int32	
end

function i3k_sbean.sect_zone_boss_item_req:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_boss_item_req:decode(is)
	is:popString()
	self.bossId = is:popNumber()
	self.itemId = is:popNumber()
	self.itemNum = is:popNumber()
end

function i3k_sbean.sect_zone_boss_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossId)
	os:pushNumber(self.itemId)
	os:pushNumber(self.itemNum)
end


-- 帮派驻地BOSS召唤
i3k_sbean.sect_zone_boss_open_req = i3k_class("sect_zone_boss_open_req")
function i3k_sbean.sect_zone_boss_open_req:ctor()
	self._pname_ = "sect_zone_boss_open_req"
	--self.bossId:		int32	
	--self.useDiamond:		int32	
end

function i3k_sbean.sect_zone_boss_open_req:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_boss_open_req:decode(is)
	is:popString()
	self.bossId = is:popNumber()
	self.useDiamond = is:popNumber()
end

function i3k_sbean.sect_zone_boss_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossId)
	os:pushNumber(self.useDiamond)
end


-- 帮派驻地进入
i3k_sbean.sect_zone_enter_req = i3k_class("sect_zone_enter_req")
function i3k_sbean.sect_zone_enter_req:ctor()
	self._pname_ = "sect_zone_enter_req"
	--self.sectId:		int32	
end

function i3k_sbean.sect_zone_enter_req:clone()
	return clone(self)
end

function i3k_sbean.sect_zone_enter_req:decode(is)
	is:popString()
	self.sectId = is:popNumber()
end

function i3k_sbean.sect_zone_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectId)
end


-- 可进入帮派驻地同步
i3k_sbean.sect_zone_list_req = i3k_class("sect_zone_list_req")
function i3k_sbean.sect_zone_list_req:ctor()
	self._pname_ = "sect_zone_list_req"
end

function i3k_sbean.sect_zone_list_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_zone_list_req:encode(os)
	os:pushString(self._pname_)
end


-- 发送气运礼包
i3k_sbean.send_destiny_reward_req = i3k_class("send_destiny_reward_req")
function i3k_sbean.send_destiny_reward_req:ctor()
	self._pname_ = "send_destiny_reward_req"
	--self.isHigh:		int32	
end

function i3k_sbean.send_destiny_reward_req:clone()
	return clone(self)
end

function i3k_sbean.send_destiny_reward_req:decode(is)
	is:popString()
	self.isHigh = is:popNumber()
end

function i3k_sbean.send_destiny_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isHigh)
end


-- 帮派驻地BOSS信息同步
i3k_sbean.sect_zone_sync_boss_req = i3k_class("sect_zone_sync_boss_req")
function i3k_sbean.sect_zone_sync_boss_req:ctor()
	self._pname_ = "sect_zone_sync_boss_req"
end

function i3k_sbean.sect_zone_sync_boss_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_zone_sync_boss_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派红包信息同步
i3k_sbean.sect_red_pack_sync_req = i3k_class("sect_red_pack_sync_req")
function i3k_sbean.sect_red_pack_sync_req:ctor()
	self._pname_ = "sect_red_pack_sync_req"
end

function i3k_sbean.sect_red_pack_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_red_pack_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派红包发送
i3k_sbean.sect_red_pack_send_req = i3k_class("sect_red_pack_send_req")
function i3k_sbean.sect_red_pack_send_req:ctor()
	self._pname_ = "sect_red_pack_send_req"
	--self.diamond:		int32	
	--self.num:		int32	
	--self.msg:		string	
end

function i3k_sbean.sect_red_pack_send_req:clone()
	return clone(self)
end

function i3k_sbean.sect_red_pack_send_req:decode(is)
	is:popString()
	self.diamond = is:popNumber()
	self.num = is:popNumber()
	self.msg = is:popString()
end

function i3k_sbean.sect_red_pack_send_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.diamond)
	os:pushNumber(self.num)
	os:pushString(self.msg)
end


-- 帮派红包领取
i3k_sbean.sect_red_pack_take_req = i3k_class("sect_red_pack_take_req")
function i3k_sbean.sect_red_pack_take_req:ctor()
	self._pname_ = "sect_red_pack_take_req"
	--self.id:		int32	
end

function i3k_sbean.sect_red_pack_take_req:clone()
	return clone(self)
end

function i3k_sbean.sect_red_pack_take_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_red_pack_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 帮派龙运同步
i3k_sbean.sect_destiny_sync_req = i3k_class("sect_destiny_sync_req")
function i3k_sbean.sect_destiny_sync_req:ctor()
	self._pname_ = "sect_destiny_sync_req"
	--self.sectId:		int32	
end

function i3k_sbean.sect_destiny_sync_req:clone()
	return clone(self)
end

function i3k_sbean.sect_destiny_sync_req:decode(is)
	is:popString()
	self.sectId = is:popNumber()
end

function i3k_sbean.sect_destiny_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectId)
end


-- 帮派龙运礼包同步
i3k_sbean.sect_destiny_reward_sync_req = i3k_class("sect_destiny_reward_sync_req")
function i3k_sbean.sect_destiny_reward_sync_req:ctor()
	self._pname_ = "sect_destiny_reward_sync_req"
end

function i3k_sbean.sect_destiny_reward_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_destiny_reward_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派红包历史查询
i3k_sbean.sect_red_pack_history_req = i3k_class("sect_red_pack_history_req")
function i3k_sbean.sect_red_pack_history_req:ctor()
	self._pname_ = "sect_red_pack_history_req"
	--self.packId:		int32	
end

function i3k_sbean.sect_red_pack_history_req:clone()
	return clone(self)
end

function i3k_sbean.sect_red_pack_history_req:decode(is)
	is:popString()
	self.packId = is:popNumber()
end

function i3k_sbean.sect_red_pack_history_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.packId)
end


-- 额外奖励查询
i3k_sbean.extra_gift_sync_req = i3k_class("extra_gift_sync_req")
function i3k_sbean.extra_gift_sync_req:ctor()
	self._pname_ = "extra_gift_sync_req"
end

function i3k_sbean.extra_gift_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.extra_gift_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 单个坐骑排行
i3k_sbean.single_horse_rank_req = i3k_class("single_horse_rank_req")
function i3k_sbean.single_horse_rank_req:ctor()
	self._pname_ = "single_horse_rank_req"
	--self.horseId:		int32	
end

function i3k_sbean.single_horse_rank_req:clone()
	return clone(self)
end

function i3k_sbean.single_horse_rank_req:decode(is)
	is:popString()
	self.horseId = is:popNumber()
end

function i3k_sbean.single_horse_rank_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.horseId)
end


-- 玩家回归信息同步
i3k_sbean.role_back_sync_req = i3k_class("role_back_sync_req")
function i3k_sbean.role_back_sync_req:ctor()
	self._pname_ = "role_back_sync_req"
end

function i3k_sbean.role_back_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.role_back_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 玩家充值奖励领取
i3k_sbean.role_back_pay_gift_take_req = i3k_class("role_back_pay_gift_take_req")
function i3k_sbean.role_back_pay_gift_take_req:ctor()
	self._pname_ = "role_back_pay_gift_take_req"
end

function i3k_sbean.role_back_pay_gift_take_req:decode(is)
	is:popString()
end

function i3k_sbean.role_back_pay_gift_take_req:encode(os)
	os:pushString(self._pname_)
end


-- 玩家活跃奖励领取
i3k_sbean.role_back_schdule_gift_take_req = i3k_class("role_back_schdule_gift_take_req")
function i3k_sbean.role_back_schdule_gift_take_req:ctor()
	self._pname_ = "role_back_schdule_gift_take_req"
end

function i3k_sbean.role_back_schdule_gift_take_req:decode(is)
	is:popString()
end

function i3k_sbean.role_back_schdule_gift_take_req:encode(os)
	os:pushString(self._pname_)
end


-- 玩家每日奖励领取
i3k_sbean.role_back_day_gift_take_req = i3k_class("role_back_day_gift_take_req")
function i3k_sbean.role_back_day_gift_take_req:ctor()
	self._pname_ = "role_back_day_gift_take_req"
end

function i3k_sbean.role_back_day_gift_take_req:decode(is)
	is:popString()
end

function i3k_sbean.role_back_day_gift_take_req:encode(os)
	os:pushString(self._pname_)
end


-- 玩家回归人数奖励领取
i3k_sbean.role_back_back_num_gift_take_req = i3k_class("role_back_back_num_gift_take_req")
function i3k_sbean.role_back_back_num_gift_take_req:ctor()
	self._pname_ = "role_back_back_num_gift_take_req"
	--self.roleNum:		int32	
end

function i3k_sbean.role_back_back_num_gift_take_req:clone()
	return clone(self)
end

function i3k_sbean.role_back_back_num_gift_take_req:decode(is)
	is:popString()
	self.roleNum = is:popNumber()
end

function i3k_sbean.role_back_back_num_gift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleNum)
end


-- 玩家每日任务数量奖励领取
i3k_sbean.role_back_task_num_gift_take_req = i3k_class("role_back_task_num_gift_take_req")
function i3k_sbean.role_back_task_num_gift_take_req:ctor()
	self._pname_ = "role_back_task_num_gift_take_req"
	--self.taskNum:		int32	
end

function i3k_sbean.role_back_task_num_gift_take_req:clone()
	return clone(self)
end

function i3k_sbean.role_back_task_num_gift_take_req:decode(is)
	is:popString()
	self.taskNum = is:popNumber()
end

function i3k_sbean.role_back_task_num_gift_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskNum)
end


-- 玩家世界数量同步
i3k_sbean.role_back_world_num_sync_req = i3k_class("role_back_world_num_sync_req")
function i3k_sbean.role_back_world_num_sync_req:ctor()
	self._pname_ = "role_back_world_num_sync_req"
end

function i3k_sbean.role_back_world_num_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.role_back_world_num_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 玩家回归充值信息同步
i3k_sbean.role_back_pay_sync_req = i3k_class("role_back_pay_sync_req")
function i3k_sbean.role_back_pay_sync_req:ctor()
	self._pname_ = "role_back_pay_sync_req"
end

function i3k_sbean.role_back_pay_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.role_back_pay_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 玩家回归充值领取积分奖励
i3k_sbean.role_back_pay_take_reward_req = i3k_class("role_back_pay_take_reward_req")
function i3k_sbean.role_back_pay_take_reward_req:ctor()
	self._pname_ = "role_back_pay_take_reward_req"
	--self.id:		int32	
end

function i3k_sbean.role_back_pay_take_reward_req:clone()
	return clone(self)
end

function i3k_sbean.role_back_pay_take_reward_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.role_back_pay_take_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 聊天框列表同步
i3k_sbean.role_chat_box_sync_req = i3k_class("role_chat_box_sync_req")
function i3k_sbean.role_chat_box_sync_req:ctor()
	self._pname_ = "role_chat_box_sync_req"
end

function i3k_sbean.role_chat_box_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.role_chat_box_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 聊天框更换使用的聊天框
i3k_sbean.role_chat_box_change_req = i3k_class("role_chat_box_change_req")
function i3k_sbean.role_chat_box_change_req:ctor()
	self._pname_ = "role_chat_box_change_req"
	--self.chatBoxId:		int32	
end

function i3k_sbean.role_chat_box_change_req:clone()
	return clone(self)
end

function i3k_sbean.role_chat_box_change_req:decode(is)
	is:popString()
	self.chatBoxId = is:popNumber()
end

function i3k_sbean.role_chat_box_change_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.chatBoxId)
end


-- 江洋大盗信息同步
i3k_sbean.robbermonster_sync_req = i3k_class("robbermonster_sync_req")
function i3k_sbean.robbermonster_sync_req:ctor()
	self._pname_ = "robbermonster_sync_req"
end

function i3k_sbean.robbermonster_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.robbermonster_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 江洋大盗信息同步(times 第几次刷新)
i3k_sbean.robbermonster_refresh_req = i3k_class("robbermonster_refresh_req")
function i3k_sbean.robbermonster_refresh_req:ctor()
	self._pname_ = "robbermonster_refresh_req"
	--self.times:		int32	
end

function i3k_sbean.robbermonster_refresh_req:clone()
	return clone(self)
end

function i3k_sbean.robbermonster_refresh_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.robbermonster_refresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 传送到大盗
i3k_sbean.robbermonster_tele_req = i3k_class("robbermonster_tele_req")
function i3k_sbean.robbermonster_tele_req:ctor()
	self._pname_ = "robbermonster_tele_req"
	--self.id:		int32	
end

function i3k_sbean.robbermonster_tele_req:clone()
	return clone(self)
end

function i3k_sbean.robbermonster_tele_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.robbermonster_tele_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 黑市信息同步
i3k_sbean.black_market_sync_req = i3k_class("black_market_sync_req")
function i3k_sbean.black_market_sync_req:ctor()
	self._pname_ = "black_market_sync_req"
end

function i3k_sbean.black_market_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.black_market_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 黑市出价
i3k_sbean.black_market_price_req = i3k_class("black_market_price_req")
function i3k_sbean.black_market_price_req:ctor()
	self._pname_ = "black_market_price_req"
	--self.gid:		int32	
	--self.price:		int32	
	--self.isQuickBuy:		int32	
	--self.displayName:		int32	
end

function i3k_sbean.black_market_price_req:clone()
	return clone(self)
end

function i3k_sbean.black_market_price_req:decode(is)
	is:popString()
	self.gid = is:popNumber()
	self.price = is:popNumber()
	self.isQuickBuy = is:popNumber()
	self.displayName = is:popNumber()
end

function i3k_sbean.black_market_price_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gid)
	os:pushNumber(self.price)
	os:pushNumber(self.isQuickBuy)
	os:pushNumber(self.displayName)
end


-- 同步帮派工资信息
i3k_sbean.sect_salary_sync_req = i3k_class("sect_salary_sync_req")
function i3k_sbean.sect_salary_sync_req:ctor()
	self._pname_ = "sect_salary_sync_req"
end

function i3k_sbean.sect_salary_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_salary_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取基础工资
i3k_sbean.sect_base_salary_take_req = i3k_class("sect_base_salary_take_req")
function i3k_sbean.sect_base_salary_take_req:ctor()
	self._pname_ = "sect_base_salary_take_req"
end

function i3k_sbean.sect_base_salary_take_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_base_salary_take_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取活跃工资
i3k_sbean.sect_activity_salary_take_req = i3k_class("sect_activity_salary_take_req")
function i3k_sbean.sect_activity_salary_take_req:ctor()
	self._pname_ = "sect_activity_salary_take_req"
end

function i3k_sbean.sect_activity_salary_take_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_activity_salary_take_req:encode(os)
	os:pushString(self._pname_)
end


-- 打破封印捐赠
i3k_sbean.breaklevel_donate_req = i3k_class("breaklevel_donate_req")
function i3k_sbean.breaklevel_donate_req:ctor()
	self._pname_ = "breaklevel_donate_req"
	--self.itemID:		int32	
	--self.count:		int32	
end

function i3k_sbean.breaklevel_donate_req:clone()
	return clone(self)
end

function i3k_sbean.breaklevel_donate_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.breaklevel_donate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.count)
end


-- 同步打破封印信息
i3k_sbean.breaklevel_sync_req = i3k_class("breaklevel_sync_req")
function i3k_sbean.breaklevel_sync_req:ctor()
	self._pname_ = "breaklevel_sync_req"
end

function i3k_sbean.breaklevel_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.breaklevel_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 声望商城同步协议
i3k_sbean.fame_shopsync_req = i3k_class("fame_shopsync_req")
function i3k_sbean.fame_shopsync_req:ctor()
	self._pname_ = "fame_shopsync_req"
end

function i3k_sbean.fame_shopsync_req:decode(is)
	is:popString()
end

function i3k_sbean.fame_shopsync_req:encode(os)
	os:pushString(self._pname_)
end


-- 声望商城刷新协议
i3k_sbean.fame_shoprefresh_req = i3k_class("fame_shoprefresh_req")
function i3k_sbean.fame_shoprefresh_req:ctor()
	self._pname_ = "fame_shoprefresh_req"
	--self.times:		int32	
	--self.isSecondType:		int32	
end

function i3k_sbean.fame_shoprefresh_req:clone()
	return clone(self)
end

function i3k_sbean.fame_shoprefresh_req:decode(is)
	is:popString()
	self.times = is:popNumber()
	self.isSecondType = is:popNumber()
end

function i3k_sbean.fame_shoprefresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
	os:pushNumber(self.isSecondType)
end


-- 声望商城买商品协议
i3k_sbean.fame_shopbuy_req = i3k_class("fame_shopbuy_req")
function i3k_sbean.fame_shopbuy_req:ctor()
	self._pname_ = "fame_shopbuy_req"
	--self.seq:		int32	
	--self.discount:		int32	
end

function i3k_sbean.fame_shopbuy_req:clone()
	return clone(self)
end

function i3k_sbean.fame_shopbuy_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
	self.discount = is:popNumber()
end

function i3k_sbean.fame_shopbuy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
	os:pushNumber(self.discount)
end


-- 战队信息同步
i3k_sbean.fightteam_sync_req = i3k_class("fightteam_sync_req")
function i3k_sbean.fightteam_sync_req:ctor()
	self._pname_ = "fightteam_sync_req"
end

function i3k_sbean.fightteam_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.fightteam_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 创建战队
i3k_sbean.fightteam_create_req = i3k_class("fightteam_create_req")
function i3k_sbean.fightteam_create_req:ctor()
	self._pname_ = "fightteam_create_req"
	--self.name:		string	
end

function i3k_sbean.fightteam_create_req:clone()
	return clone(self)
end

function i3k_sbean.fightteam_create_req:decode(is)
	is:popString()
	self.name = is:popString()
end

function i3k_sbean.fightteam_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.name)
end


-- 解散战队
i3k_sbean.fightteam_dismiss_req = i3k_class("fightteam_dismiss_req")
function i3k_sbean.fightteam_dismiss_req:ctor()
	self._pname_ = "fightteam_dismiss_req"
end

function i3k_sbean.fightteam_dismiss_req:decode(is)
	is:popString()
end

function i3k_sbean.fightteam_dismiss_req:encode(os)
	os:pushString(self._pname_)
end


-- 队长踢人
i3k_sbean.fightteam_kick_req = i3k_class("fightteam_kick_req")
function i3k_sbean.fightteam_kick_req:ctor()
	self._pname_ = "fightteam_kick_req"
	--self.memberID:		int32	
end

function i3k_sbean.fightteam_kick_req:clone()
	return clone(self)
end

function i3k_sbean.fightteam_kick_req:decode(is)
	is:popString()
	self.memberID = is:popNumber()
end

function i3k_sbean.fightteam_kick_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.memberID)
end


-- 邀请加入战队
i3k_sbean.fightteam_invite_req = i3k_class("fightteam_invite_req")
function i3k_sbean.fightteam_invite_req:ctor()
	self._pname_ = "fightteam_invite_req"
	--self.roleID:		int32	
end

function i3k_sbean.fightteam_invite_req:clone()
	return clone(self)
end

function i3k_sbean.fightteam_invite_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.fightteam_invite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 战队邀请响应
i3k_sbean.fightteam_invite_response_req = i3k_class("fightteam_invite_response_req")
function i3k_sbean.fightteam_invite_response_req:ctor()
	self._pname_ = "fightteam_invite_response_req"
	--self.roleID:		int32	
	--self.response:		int32	
end

function i3k_sbean.fightteam_invite_response_req:clone()
	return clone(self)
end

function i3k_sbean.fightteam_invite_response_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
	self.response = is:popNumber()
end

function i3k_sbean.fightteam_invite_response_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
	os:pushNumber(self.response)
end


i3k_sbean.fightteam_queryf_req = i3k_class("fightteam_queryf_req")
function i3k_sbean.fightteam_queryf_req:ctor()
	self._pname_ = "fightteam_queryf_req"
end

function i3k_sbean.fightteam_queryf_req:decode(is)
	is:popString()
end

function i3k_sbean.fightteam_queryf_req:encode(os)
	os:pushString(self._pname_)
end


-- 队长报名海选赛
i3k_sbean.fightteam_joinqualifying_req = i3k_class("fightteam_joinqualifying_req")
function i3k_sbean.fightteam_joinqualifying_req:ctor()
	self._pname_ = "fightteam_joinqualifying_req"
end

function i3k_sbean.fightteam_joinqualifying_req:decode(is)
	is:popString()
end

function i3k_sbean.fightteam_joinqualifying_req:encode(os)
	os:pushString(self._pname_)
end


-- 队长取消报名海选赛
i3k_sbean.fightteam_quitqualifying_req = i3k_class("fightteam_quitqualifying_req")
function i3k_sbean.fightteam_quitqualifying_req:ctor()
	self._pname_ = "fightteam_quitqualifying_req"
end

function i3k_sbean.fightteam_quitqualifying_req:decode(is)
	is:popString()
end

function i3k_sbean.fightteam_quitqualifying_req:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.tournament_teamgroup_sync_req = i3k_class("tournament_teamgroup_sync_req")
function i3k_sbean.tournament_teamgroup_sync_req:ctor()
	self._pname_ = "tournament_teamgroup_sync_req"
	--self.type:		int32	
end

function i3k_sbean.tournament_teamgroup_sync_req:clone()
	return clone(self)
end

function i3k_sbean.tournament_teamgroup_sync_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.tournament_teamgroup_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 队员锦标赛签到
i3k_sbean.fightteam_joinknockout_req = i3k_class("fightteam_joinknockout_req")
function i3k_sbean.fightteam_joinknockout_req:ctor()
	self._pname_ = "fightteam_joinknockout_req"
end

function i3k_sbean.fightteam_joinknockout_req:decode(is)
	is:popString()
end

function i3k_sbean.fightteam_joinknockout_req:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.fightteam_querym_req = i3k_class("fightteam_querym_req")
function i3k_sbean.fightteam_querym_req:ctor()
	self._pname_ = "fightteam_querym_req"
	--self.teamId:		int32	
end

function i3k_sbean.fightteam_querym_req:clone()
	return clone(self)
end

function i3k_sbean.fightteam_querym_req:decode(is)
	is:popString()
	self.teamId = is:popNumber()
end

function i3k_sbean.fightteam_querym_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.teamId)
end


-- 同步战队排行榜
i3k_sbean.fightteamrank_sync_req = i3k_class("fightteamrank_sync_req")
function i3k_sbean.fightteamrank_sync_req:ctor()
	self._pname_ = "fightteamrank_sync_req"
end

function i3k_sbean.fightteamrank_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.fightteamrank_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 获取战队排行榜列表
i3k_sbean.fightteamrank_get_req = i3k_class("fightteamrank_get_req")
function i3k_sbean.fightteamrank_get_req:ctor()
	self._pname_ = "fightteamrank_get_req"
	--self.id:		int32	
	--self.createTime:		int32	
	--self.index:		int32	
	--self.length:		int32	
end

function i3k_sbean.fightteamrank_get_req:clone()
	return clone(self)
end

function i3k_sbean.fightteamrank_get_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.createTime = is:popNumber()
	self.index = is:popNumber()
	self.length = is:popNumber()
end

function i3k_sbean.fightteamrank_get_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.createTime)
	os:pushNumber(self.index)
	os:pushNumber(self.length)
end


-- 个人荣誉奖励
i3k_sbean.tournament_take_rolereward_req = i3k_class("tournament_take_rolereward_req")
function i3k_sbean.tournament_take_rolereward_req:ctor()
	self._pname_ = "tournament_take_rolereward_req"
end

function i3k_sbean.tournament_take_rolereward_req:decode(is)
	is:popString()
end

function i3k_sbean.tournament_take_rolereward_req:encode(os)
	os:pushString(self._pname_)
end


-- 锦标赛奖励
i3k_sbean.tournament_take_teamreward_req = i3k_class("tournament_take_teamreward_req")
function i3k_sbean.tournament_take_teamreward_req:ctor()
	self._pname_ = "tournament_take_teamreward_req"
end

function i3k_sbean.tournament_take_teamreward_req:decode(is)
	is:popString()
end

function i3k_sbean.tournament_take_teamreward_req:encode(os)
	os:pushString(self._pname_)
end


-- 锦标赛对手查询
i3k_sbean.fightteam_selfgroup_req = i3k_class("fightteam_selfgroup_req")
function i3k_sbean.fightteam_selfgroup_req:ctor()
	self._pname_ = "fightteam_selfgroup_req"
end

function i3k_sbean.fightteam_selfgroup_req:decode(is)
	is:popString()
end

function i3k_sbean.fightteam_selfgroup_req:encode(os)
	os:pushString(self._pname_)
end


-- 进入观战
i3k_sbean.tournament_guard_req = i3k_class("tournament_guard_req")
function i3k_sbean.tournament_guard_req:ctor()
	self._pname_ = "tournament_guard_req"
	--self.teamID:		int32	
end

function i3k_sbean.tournament_guard_req:clone()
	return clone(self)
end

function i3k_sbean.tournament_guard_req:decode(is)
	is:popString()
	self.teamID = is:popNumber()
end

function i3k_sbean.tournament_guard_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.teamID)
end


-- 刷新脉象
i3k_sbean.meridian_refresh_holebuff_req = i3k_class("meridian_refresh_holebuff_req")
function i3k_sbean.meridian_refresh_holebuff_req:ctor()
	self._pname_ = "meridian_refresh_holebuff_req"
	--self.meridianId:		int32	
end

function i3k_sbean.meridian_refresh_holebuff_req:clone()
	return clone(self)
end

function i3k_sbean.meridian_refresh_holebuff_req:decode(is)
	is:popString()
	self.meridianId = is:popNumber()
end

function i3k_sbean.meridian_refresh_holebuff_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.meridianId)
end


-- 冲穴
i3k_sbean.meridian_break_hole_req = i3k_class("meridian_break_hole_req")
function i3k_sbean.meridian_break_hole_req:ctor()
	self._pname_ = "meridian_break_hole_req"
	--self.meridianId:		int32	
	--self.isMuti:		int32	
end

function i3k_sbean.meridian_break_hole_req:clone()
	return clone(self)
end

function i3k_sbean.meridian_break_hole_req:decode(is)
	is:popString()
	self.meridianId = is:popNumber()
	self.isMuti = is:popNumber()
end

function i3k_sbean.meridian_break_hole_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.meridianId)
	os:pushNumber(self.isMuti)
end


-- 潜能升级
i3k_sbean.meridian_potential_uplevel_req = i3k_class("meridian_potential_uplevel_req")
function i3k_sbean.meridian_potential_uplevel_req:ctor()
	self._pname_ = "meridian_potential_uplevel_req"
	--self.meridianId:		int32	
	--self.potentialId:		int32	
	--self.level:		int32	
end

function i3k_sbean.meridian_potential_uplevel_req:clone()
	return clone(self)
end

function i3k_sbean.meridian_potential_uplevel_req:decode(is)
	is:popString()
	self.meridianId = is:popNumber()
	self.potentialId = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.meridian_potential_uplevel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.meridianId)
	os:pushNumber(self.potentialId)
	os:pushNumber(self.level)
end


-- 帮派招募令信息
i3k_sbean.sect_msg_info_req = i3k_class("sect_msg_info_req")
function i3k_sbean.sect_msg_info_req:ctor()
	self._pname_ = "sect_msg_info_req"
	--self.sectId:		int32	
end

function i3k_sbean.sect_msg_info_req:clone()
	return clone(self)
end

function i3k_sbean.sect_msg_info_req:decode(is)
	is:popString()
	self.sectId = is:popNumber()
end

function i3k_sbean.sect_msg_info_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sectId)
end


-- 骑术书存入
i3k_sbean.horsebook_push_req = i3k_class("horsebook_push_req")
function i3k_sbean.horsebook_push_req:ctor()
	self._pname_ = "horsebook_push_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.horsebook_push_req:clone()
	return clone(self)
end

function i3k_sbean.horsebook_push_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.horsebook_push_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 骑术书取出
i3k_sbean.horsebook_pop_req = i3k_class("horsebook_pop_req")
function i3k_sbean.horsebook_pop_req:ctor()
	self._pname_ = "horsebook_pop_req"
	--self.books:		map[int32, int32]	
end

function i3k_sbean.horsebook_pop_req:clone()
	return clone(self)
end

function i3k_sbean.horsebook_pop_req:decode(is)
	is:popString()
	self.books = is:popNumberNumberMap()
end

function i3k_sbean.horsebook_pop_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.books)
end


-- 兽决存入
i3k_sbean.petbook_push_req = i3k_class("petbook_push_req")
function i3k_sbean.petbook_push_req:ctor()
	self._pname_ = "petbook_push_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.petbook_push_req:clone()
	return clone(self)
end

function i3k_sbean.petbook_push_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.petbook_push_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 兽决取出
i3k_sbean.petbook_pop_req = i3k_class("petbook_pop_req")
function i3k_sbean.petbook_pop_req:ctor()
	self._pname_ = "petbook_pop_req"
	--self.books:		map[int32, int32]	
end

function i3k_sbean.petbook_pop_req:clone()
	return clone(self)
end

function i3k_sbean.petbook_pop_req:decode(is)
	is:popString()
	self.books = is:popNumberNumberMap()
end

function i3k_sbean.petbook_pop_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.books)
end


-- 结婚证点赞
i3k_sbean.marriage_card_sign_req = i3k_class("marriage_card_sign_req")
function i3k_sbean.marriage_card_sign_req:ctor()
	self._pname_ = "marriage_card_sign_req"
	--self.marriageId:		int32	
end

function i3k_sbean.marriage_card_sign_req:clone()
	return clone(self)
end

function i3k_sbean.marriage_card_sign_req:decode(is)
	is:popString()
	self.marriageId = is:popNumber()
end

function i3k_sbean.marriage_card_sign_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.marriageId)
end


-- 结婚证同步
i3k_sbean.marriage_card_sync_req = i3k_class("marriage_card_sync_req")
function i3k_sbean.marriage_card_sync_req:ctor()
	self._pname_ = "marriage_card_sync_req"
	--self.marriageId:		int32	
end

function i3k_sbean.marriage_card_sync_req:clone()
	return clone(self)
end

function i3k_sbean.marriage_card_sync_req:decode(is)
	is:popString()
	self.marriageId = is:popNumber()
end

function i3k_sbean.marriage_card_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.marriageId)
end


-- 愿望卡片同步
i3k_sbean.christmas_cards_sync_req = i3k_class("christmas_cards_sync_req")
function i3k_sbean.christmas_cards_sync_req:ctor()
	self._pname_ = "christmas_cards_sync_req"
end

function i3k_sbean.christmas_cards_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.christmas_cards_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 请求愿望列表
i3k_sbean.christmas_cards_get_list_req = i3k_class("christmas_cards_get_list_req")
function i3k_sbean.christmas_cards_get_list_req:ctor()
	self._pname_ = "christmas_cards_get_list_req"
end

function i3k_sbean.christmas_cards_get_list_req:decode(is)
	is:popString()
end

function i3k_sbean.christmas_cards_get_list_req:encode(os)
	os:pushString(self._pname_)
end


-- 许愿
i3k_sbean.christmas_cards_wish_req = i3k_class("christmas_cards_wish_req")
function i3k_sbean.christmas_cards_wish_req:ctor()
	self._pname_ = "christmas_cards_wish_req"
	--self.background:		int32	
	--self.text:		string	
end

function i3k_sbean.christmas_cards_wish_req:clone()
	return clone(self)
end

function i3k_sbean.christmas_cards_wish_req:decode(is)
	is:popString()
	self.background = is:popNumber()
	self.text = is:popString()
end

function i3k_sbean.christmas_cards_wish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.background)
	os:pushString(self.text)
end


-- 送花
i3k_sbean.christmas_cards_comment_req = i3k_class("christmas_cards_comment_req")
function i3k_sbean.christmas_cards_comment_req:ctor()
	self._pname_ = "christmas_cards_comment_req"
	--self.sendRid:		int32	
	--self.sendType:		int32	
end

function i3k_sbean.christmas_cards_comment_req:clone()
	return clone(self)
end

function i3k_sbean.christmas_cards_comment_req:decode(is)
	is:popString()
	self.sendRid = is:popNumber()
	self.sendType = is:popNumber()
end

function i3k_sbean.christmas_cards_comment_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.sendRid)
	os:pushNumber(self.sendType)
end


-- 解锁镖车皮肤
i3k_sbean.sect_deliver_skin_unlock_req = i3k_class("sect_deliver_skin_unlock_req")
function i3k_sbean.sect_deliver_skin_unlock_req:ctor()
	self._pname_ = "sect_deliver_skin_unlock_req"
	--self.skinId:		int32	
end

function i3k_sbean.sect_deliver_skin_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_skin_unlock_req:decode(is)
	is:popString()
	self.skinId = is:popNumber()
end

function i3k_sbean.sect_deliver_skin_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skinId)
end


-- 选择镖车皮肤
i3k_sbean.sect_deliver_skin_select_req = i3k_class("sect_deliver_skin_select_req")
function i3k_sbean.sect_deliver_skin_select_req:ctor()
	self._pname_ = "sect_deliver_skin_select_req"
	--self.skinId:		int32	
end

function i3k_sbean.sect_deliver_skin_select_req:clone()
	return clone(self)
end

function i3k_sbean.sect_deliver_skin_select_req:decode(is)
	is:popString()
	self.skinId = is:popNumber()
end

function i3k_sbean.sect_deliver_skin_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skinId)
end


-- 周常任务信息同步
i3k_sbean.week_task_sync_req = i3k_class("week_task_sync_req")
function i3k_sbean.week_task_sync_req:ctor()
	self._pname_ = "week_task_sync_req"
end

function i3k_sbean.week_task_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.week_task_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 完成周常任务
i3k_sbean.week_task_finish_req = i3k_class("week_task_finish_req")
function i3k_sbean.week_task_finish_req:ctor()
	self._pname_ = "week_task_finish_req"
	--self.id:		int32	
end

function i3k_sbean.week_task_finish_req:clone()
	return clone(self)
end

function i3k_sbean.week_task_finish_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.week_task_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取周常任务积分奖励
i3k_sbean.week_task_score_reward_take_req = i3k_class("week_task_score_reward_take_req")
function i3k_sbean.week_task_score_reward_take_req:ctor()
	self._pname_ = "week_task_score_reward_take_req"
	--self.score:		int32	
end

function i3k_sbean.week_task_score_reward_take_req:clone()
	return clone(self)
end

function i3k_sbean.week_task_score_reward_take_req:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.week_task_score_reward_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 使用示爱道具
i3k_sbean.show_love_item_use_req = i3k_class("show_love_item_use_req")
function i3k_sbean.show_love_item_use_req:ctor()
	self._pname_ = "show_love_item_use_req"
	--self.itemId:		int32	
	--self.beUsedRid:		int32	
end

function i3k_sbean.show_love_item_use_req:clone()
	return clone(self)
end

function i3k_sbean.show_love_item_use_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
	self.beUsedRid = is:popNumber()
end

function i3k_sbean.show_love_item_use_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
	os:pushNumber(self.beUsedRid)
end


-- 送宝童子信息同步
i3k_sbean.wizard_wish_sync_req = i3k_class("wizard_wish_sync_req")
function i3k_sbean.wizard_wish_sync_req:ctor()
	self._pname_ = "wizard_wish_sync_req"
end

function i3k_sbean.wizard_wish_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.wizard_wish_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 送宝童子求取
i3k_sbean.wizard_wish_operate_req = i3k_class("wizard_wish_operate_req")
function i3k_sbean.wizard_wish_operate_req:ctor()
	self._pname_ = "wizard_wish_operate_req"
	--self.petId:		int32	
end

function i3k_sbean.wizard_wish_operate_req:clone()
	return clone(self)
end

function i3k_sbean.wizard_wish_operate_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
end

function i3k_sbean.wizard_wish_operate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
end


-- 送宝童子领奖
i3k_sbean.wizard_wish_take_req = i3k_class("wizard_wish_take_req")
function i3k_sbean.wizard_wish_take_req:ctor()
	self._pname_ = "wizard_wish_take_req"
	--self.petId:		int32	
	--self.itemId:		int32	
end

function i3k_sbean.wizard_wish_take_req:clone()
	return clone(self)
end

function i3k_sbean.wizard_wish_take_req:decode(is)
	is:popString()
	self.petId = is:popNumber()
	self.itemId = is:popNumber()
end

function i3k_sbean.wizard_wish_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petId)
	os:pushNumber(self.itemId)
end


-- 星魂引星
i3k_sbean.star_spirit_operate_req = i3k_class("star_spirit_operate_req")
function i3k_sbean.star_spirit_operate_req:ctor()
	self._pname_ = "star_spirit_operate_req"
	--self.muti:		int32	
end

function i3k_sbean.star_spirit_operate_req:clone()
	return clone(self)
end

function i3k_sbean.star_spirit_operate_req:decode(is)
	is:popString()
	self.muti = is:popNumber()
end

function i3k_sbean.star_spirit_operate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.muti)
end


-- 星魂升阶
i3k_sbean.star_spirit_uprank_req = i3k_class("star_spirit_uprank_req")
function i3k_sbean.star_spirit_uprank_req:ctor()
	self._pname_ = "star_spirit_uprank_req"
	--self.rank:		int32	
end

function i3k_sbean.star_spirit_uprank_req:clone()
	return clone(self)
end

function i3k_sbean.star_spirit_uprank_req:decode(is)
	is:popString()
	self.rank = is:popNumber()
end

function i3k_sbean.star_spirit_uprank_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rank)
end


-- 星魂属性洗练
i3k_sbean.main_star_refresh_req = i3k_class("main_star_refresh_req")
function i3k_sbean.main_star_refresh_req:ctor()
	self._pname_ = "main_star_refresh_req"
end

function i3k_sbean.main_star_refresh_req:decode(is)
	is:popString()
end

function i3k_sbean.main_star_refresh_req:encode(os)
	os:pushString(self._pname_)
end


-- 星魂属性保存
i3k_sbean.main_star_save_req = i3k_class("main_star_save_req")
function i3k_sbean.main_star_save_req:ctor()
	self._pname_ = "main_star_save_req"
end

function i3k_sbean.main_star_save_req:decode(is)
	is:popString()
end

function i3k_sbean.main_star_save_req:encode(os)
	os:pushString(self._pname_)
end


-- 奇遇与NPC兑话
i3k_sbean.adventure_npc_chat = i3k_class("adventure_npc_chat")
function i3k_sbean.adventure_npc_chat:ctor()
	self._pname_ = "adventure_npc_chat"
	--self.npcID:		int32	
end

function i3k_sbean.adventure_npc_chat:clone()
	return clone(self)
end

function i3k_sbean.adventure_npc_chat:decode(is)
	is:popString()
	self.npcID = is:popNumber()
end

function i3k_sbean.adventure_npc_chat:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcID)
end


-- 接取奇遇任务
i3k_sbean.adtask_take_req = i3k_class("adtask_take_req")
function i3k_sbean.adtask_take_req:ctor()
	self._pname_ = "adtask_take_req"
	--self.taskId:		int32	
end

function i3k_sbean.adtask_take_req:clone()
	return clone(self)
end

function i3k_sbean.adtask_take_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.adtask_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 放弃奇遇任务
i3k_sbean.adtask_quit_req = i3k_class("adtask_quit_req")
function i3k_sbean.adtask_quit_req:ctor()
	self._pname_ = "adtask_quit_req"
	--self.taskId:		int32	
end

function i3k_sbean.adtask_quit_req:clone()
	return clone(self)
end

function i3k_sbean.adtask_quit_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.adtask_quit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 奇遇任务领取奖励
i3k_sbean.adtask_reward_req = i3k_class("adtask_reward_req")
function i3k_sbean.adtask_reward_req:ctor()
	self._pname_ = "adtask_reward_req"
	--self.taskId:		int32	
end

function i3k_sbean.adtask_reward_req:clone()
	return clone(self)
end

function i3k_sbean.adtask_reward_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.adtask_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 接受奇遇任务(第一次触发, taskId: 0 表示拒绝)
i3k_sbean.adtask_accept_req = i3k_class("adtask_accept_req")
function i3k_sbean.adtask_accept_req:ctor()
	self._pname_ = "adtask_accept_req"
	--self.taskId:		int32	
end

function i3k_sbean.adtask_accept_req:clone()
	return clone(self)
end

function i3k_sbean.adtask_accept_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.adtask_accept_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 选择奇遇任务
i3k_sbean.adtask_select_req = i3k_class("adtask_select_req")
function i3k_sbean.adtask_select_req:ctor()
	self._pname_ = "adtask_select_req"
	--self.taskId:		int32	
end

function i3k_sbean.adtask_select_req:clone()
	return clone(self)
end

function i3k_sbean.adtask_select_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.adtask_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 领取奇遇任务累计奖励
i3k_sbean.adtask_total_reward_req = i3k_class("adtask_total_reward_req")
function i3k_sbean.adtask_total_reward_req:ctor()
	self._pname_ = "adtask_total_reward_req"
	--self.trigID:		int32	
end

function i3k_sbean.adtask_total_reward_req:clone()
	return clone(self)
end

function i3k_sbean.adtask_total_reward_req:decode(is)
	is:popString()
	self.trigID = is:popNumber()
end

function i3k_sbean.adtask_total_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.trigID)
end


-- 弹幕添加
i3k_sbean.sect_popmsg_add_req = i3k_class("sect_popmsg_add_req")
function i3k_sbean.sect_popmsg_add_req:ctor()
	self._pname_ = "sect_popmsg_add_req"
	--self.msg:		string	
end

function i3k_sbean.sect_popmsg_add_req:clone()
	return clone(self)
end

function i3k_sbean.sect_popmsg_add_req:decode(is)
	is:popString()
	self.msg = is:popString()
end

function i3k_sbean.sect_popmsg_add_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.msg)
end


-- 弹幕同步
i3k_sbean.sect_popmsg_sync_req = i3k_class("sect_popmsg_sync_req")
function i3k_sbean.sect_popmsg_sync_req:ctor()
	self._pname_ = "sect_popmsg_sync_req"
end

function i3k_sbean.sect_popmsg_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_popmsg_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 刷新任务库
i3k_sbean.dragon_hole_task_refresh_req = i3k_class("dragon_hole_task_refresh_req")
function i3k_sbean.dragon_hole_task_refresh_req:ctor()
	self._pname_ = "dragon_hole_task_refresh_req"
	--self.time:		int32	
end

function i3k_sbean.dragon_hole_task_refresh_req:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_task_refresh_req:decode(is)
	is:popString()
	self.time = is:popNumber()
end

function i3k_sbean.dragon_hole_task_refresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.time)
end


-- 接取任务
i3k_sbean.dragon_hole_task_take_req = i3k_class("dragon_hole_task_take_req")
function i3k_sbean.dragon_hole_task_take_req:ctor()
	self._pname_ = "dragon_hole_task_take_req"
	--self.taskId:		int32	
end

function i3k_sbean.dragon_hole_task_take_req:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_task_take_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.dragon_hole_task_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 领取任务奖励
i3k_sbean.dragon_hole_task_reward_req = i3k_class("dragon_hole_task_reward_req")
function i3k_sbean.dragon_hole_task_reward_req:ctor()
	self._pname_ = "dragon_hole_task_reward_req"
	--self.taskId:		int32	
end

function i3k_sbean.dragon_hole_task_reward_req:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_task_reward_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.dragon_hole_task_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 放弃任务
i3k_sbean.dragon_hole_task_giveup_req = i3k_class("dragon_hole_task_giveup_req")
function i3k_sbean.dragon_hole_task_giveup_req:ctor()
	self._pname_ = "dragon_hole_task_giveup_req"
	--self.taskId:		int32	
end

function i3k_sbean.dragon_hole_task_giveup_req:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_task_giveup_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.dragon_hole_task_giveup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 同步龙穴任务信息
i3k_sbean.dragon_hole_task_sync_req = i3k_class("dragon_hole_task_sync_req")
function i3k_sbean.dragon_hole_task_sync_req:ctor()
	self._pname_ = "dragon_hole_task_sync_req"
end

function i3k_sbean.dragon_hole_task_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.dragon_hole_task_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 快速完成龙穴任务
i3k_sbean.dragon_hole_quick_finish_task_req = i3k_class("dragon_hole_quick_finish_task_req")
function i3k_sbean.dragon_hole_quick_finish_task_req:ctor()
	self._pname_ = "dragon_hole_quick_finish_task_req"
	--self.taskId:		int32	
end

function i3k_sbean.dragon_hole_quick_finish_task_req:clone()
	return clone(self)
end

function i3k_sbean.dragon_hole_quick_finish_task_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.dragon_hole_quick_finish_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 擦拭雕像
i3k_sbean.honnor_statue_interation_req = i3k_class("honnor_statue_interation_req")
function i3k_sbean.honnor_statue_interation_req:ctor()
	self._pname_ = "honnor_statue_interation_req"
	--self.statueType:		int32	
	--self.rid:		int32	
end

function i3k_sbean.honnor_statue_interation_req:clone()
	return clone(self)
end

function i3k_sbean.honnor_statue_interation_req:decode(is)
	is:popString()
	self.statueType = is:popNumber()
	self.rid = is:popNumber()
end

function i3k_sbean.honnor_statue_interation_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.statueType)
	os:pushNumber(self.rid)
end


-- 获取武道会雕像详细信息
i3k_sbean.honnor_statue_get_fightteam_statue_req = i3k_class("honnor_statue_get_fightteam_statue_req")
function i3k_sbean.honnor_statue_get_fightteam_statue_req:ctor()
	self._pname_ = "honnor_statue_get_fightteam_statue_req"
	--self.statueType:		int32	
	--self.rid:		int32	
end

function i3k_sbean.honnor_statue_get_fightteam_statue_req:clone()
	return clone(self)
end

function i3k_sbean.honnor_statue_get_fightteam_statue_req:decode(is)
	is:popString()
	self.statueType = is:popNumber()
	self.rid = is:popNumber()
end

function i3k_sbean.honnor_statue_get_fightteam_statue_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.statueType)
	os:pushNumber(self.rid)
end


-- 同步春节福袋
i3k_sbean.new_year_pack_sync_req = i3k_class("new_year_pack_sync_req")
function i3k_sbean.new_year_pack_sync_req:ctor()
	self._pname_ = "new_year_pack_sync_req"
end

function i3k_sbean.new_year_pack_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.new_year_pack_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 春节福袋打开
i3k_sbean.new_year_pack_take_req = i3k_class("new_year_pack_take_req")
function i3k_sbean.new_year_pack_take_req:ctor()
	self._pname_ = "new_year_pack_take_req"
	--self.id:		int32	
end

function i3k_sbean.new_year_pack_take_req:clone()
	return clone(self)
end

function i3k_sbean.new_year_pack_take_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.new_year_pack_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取新年红包
i3k_sbean.new_year_red_packet_get_req = i3k_class("new_year_red_packet_get_req")
function i3k_sbean.new_year_red_packet_get_req:ctor()
	self._pname_ = "new_year_red_packet_get_req"
	--self.npcID:		int32	
end

function i3k_sbean.new_year_red_packet_get_req:clone()
	return clone(self)
end

function i3k_sbean.new_year_red_packet_get_req:decode(is)
	is:popString()
	self.npcID = is:popNumber()
end

function i3k_sbean.new_year_red_packet_get_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcID)
end


-- 同步灯谜
i3k_sbean.light_secret_sync_req = i3k_class("light_secret_sync_req")
function i3k_sbean.light_secret_sync_req:ctor()
	self._pname_ = "light_secret_sync_req"
end

function i3k_sbean.light_secret_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.light_secret_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 回答灯谜
i3k_sbean.light_secret_answer_req = i3k_class("light_secret_answer_req")
function i3k_sbean.light_secret_answer_req:ctor()
	self._pname_ = "light_secret_answer_req"
	--self.id:		int32	
	--self.answer:		int32	
end

function i3k_sbean.light_secret_answer_req:clone()
	return clone(self)
end

function i3k_sbean.light_secret_answer_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.answer = is:popNumber()
end

function i3k_sbean.light_secret_answer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.answer)
end


-- 领取角色奖励
i3k_sbean.light_secret_role_take_req = i3k_class("light_secret_role_take_req")
function i3k_sbean.light_secret_role_take_req:ctor()
	self._pname_ = "light_secret_role_take_req"
	--self.score:		int32	
end

function i3k_sbean.light_secret_role_take_req:clone()
	return clone(self)
end

function i3k_sbean.light_secret_role_take_req:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.light_secret_role_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 领取世界奖励
i3k_sbean.light_secret_world_take_req = i3k_class("light_secret_world_take_req")
function i3k_sbean.light_secret_world_take_req:ctor()
	self._pname_ = "light_secret_world_take_req"
	--self.score:		int32	
end

function i3k_sbean.light_secret_world_take_req:clone()
	return clone(self)
end

function i3k_sbean.light_secret_world_take_req:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.light_secret_world_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 快速匹配跨服副本
i3k_sbean.globalmap_join_req = i3k_class("globalmap_join_req")
function i3k_sbean.globalmap_join_req:ctor()
	self._pname_ = "globalmap_join_req"
	--self.info:		GlobalMap	
end

function i3k_sbean.globalmap_join_req:clone()
	return clone(self)
end

function i3k_sbean.globalmap_join_req:decode(is)
	is:popString()
	self.info = is:pop(i3k_sbean.GlobalMap)
end

function i3k_sbean.globalmap_join_req:encode(os)
	os:pushString(self._pname_)
	os:push(self.info)
end


-- 取消匹配跨服副本
i3k_sbean.globalmap_quit_req = i3k_class("globalmap_quit_req")
function i3k_sbean.globalmap_quit_req:ctor()
	self._pname_ = "globalmap_quit_req"
end

function i3k_sbean.globalmap_quit_req:decode(is)
	is:popString()
end

function i3k_sbean.globalmap_quit_req:encode(os)
	os:pushString(self._pname_)
end


-- 八卦锻造同步
i3k_sbean.eightdiagram_sync_req = i3k_class("eightdiagram_sync_req")
function i3k_sbean.eightdiagram_sync_req:ctor()
	self._pname_ = "eightdiagram_sync_req"
end

function i3k_sbean.eightdiagram_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.eightdiagram_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 八卦强化
i3k_sbean.eightdiagram_strength_req = i3k_class("eightdiagram_strength_req")
function i3k_sbean.eightdiagram_strength_req:ctor()
	self._pname_ = "eightdiagram_strength_req"
	--self.partId:		int32	
end

function i3k_sbean.eightdiagram_strength_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_strength_req:decode(is)
	is:popString()
	self.partId = is:popNumber()
end

function i3k_sbean.eightdiagram_strength_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.partId)
end


-- 八卦分解
i3k_sbean.eightdiagram_splite_req = i3k_class("eightdiagram_splite_req")
function i3k_sbean.eightdiagram_splite_req:ctor()
	self._pname_ = "eightdiagram_splite_req"
	--self.id:		set[int32]	
end

function i3k_sbean.eightdiagram_splite_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_splite_req:decode(is)
	is:popString()
	self.id = is:popNumberSet()
end

function i3k_sbean.eightdiagram_splite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.id)
end


-- 八卦萃取
i3k_sbean.eightdiagram_extraction_req = i3k_class("eightdiagram_extraction_req")
function i3k_sbean.eightdiagram_extraction_req:ctor()
	self._pname_ = "eightdiagram_extraction_req"
	--self.id:		int32	
end

function i3k_sbean.eightdiagram_extraction_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_extraction_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.eightdiagram_extraction_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 八卦制造
i3k_sbean.eightdiagram_create_req = i3k_class("eightdiagram_create_req")
function i3k_sbean.eightdiagram_create_req:ctor()
	self._pname_ = "eightdiagram_create_req"
	--self.part:		int32	
	--self.useStone:		vector[UseStones]	
	--self.sacrifice:		int32	
end

function i3k_sbean.eightdiagram_create_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_create_req:decode(is)
	is:popString()
	self.part = is:popNumber()
	self.useStone = is:popList(i3k_sbean.UseStones)
	self.sacrifice = is:popNumber()
end

function i3k_sbean.eightdiagram_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.part)
	os:pushList(self.useStone)
	os:pushNumber(self.sacrifice)
end


-- 八卦装备
i3k_sbean.eightdiagram_equip_req = i3k_class("eightdiagram_equip_req")
function i3k_sbean.eightdiagram_equip_req:ctor()
	self._pname_ = "eightdiagram_equip_req"
	--self.id:		int32	
end

function i3k_sbean.eightdiagram_equip_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_equip_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.eightdiagram_equip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 八卦取消装备
i3k_sbean.eightdiagram_unequip_req = i3k_class("eightdiagram_unequip_req")
function i3k_sbean.eightdiagram_unequip_req:ctor()
	self._pname_ = "eightdiagram_unequip_req"
	--self.partId:		int32	
end

function i3k_sbean.eightdiagram_unequip_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_unequip_req:decode(is)
	is:popString()
	self.partId = is:popNumber()
end

function i3k_sbean.eightdiagram_unequip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.partId)
end


-- 使用八卦原石
i3k_sbean.eightdiagram_use_stonebag_req = i3k_class("eightdiagram_use_stonebag_req")
function i3k_sbean.eightdiagram_use_stonebag_req:ctor()
	self._pname_ = "eightdiagram_use_stonebag_req"
	--self.poolId:		int32	
	--self.itemId:		int32	
end

function i3k_sbean.eightdiagram_use_stonebag_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_use_stonebag_req:decode(is)
	is:popString()
	self.poolId = is:popNumber()
	self.itemId = is:popNumber()
end

function i3k_sbean.eightdiagram_use_stonebag_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.poolId)
	os:pushNumber(self.itemId)
end


-- 分解属性原石
i3k_sbean.eightdiagram_del_stonepool_req = i3k_class("eightdiagram_del_stonepool_req")
function i3k_sbean.eightdiagram_del_stonepool_req:ctor()
	self._pname_ = "eightdiagram_del_stonepool_req"
	--self.poolId:		int32	
end

function i3k_sbean.eightdiagram_del_stonepool_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_del_stonepool_req:decode(is)
	is:popString()
	self.poolId = is:popNumber()
end

function i3k_sbean.eightdiagram_del_stonepool_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.poolId)
end


-- 合成祭品
i3k_sbean.item_compose_req = i3k_class("item_compose_req")
function i3k_sbean.item_compose_req:ctor()
	self._pname_ = "item_compose_req"
	--self.suit:		int32	
	--self.parts:		set[int32]	
end

function i3k_sbean.item_compose_req:clone()
	return clone(self)
end

function i3k_sbean.item_compose_req:decode(is)
	is:popString()
	self.suit = is:popNumber()
	self.parts = is:popNumberSet()
end

function i3k_sbean.item_compose_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.suit)
	os:pushNumberSet(self.parts)
end


-- 分解祭品
i3k_sbean.item_splite_req = i3k_class("item_splite_req")
function i3k_sbean.item_splite_req:ctor()
	self._pname_ = "item_splite_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.item_splite_req:clone()
	return clone(self)
end

function i3k_sbean.item_splite_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.item_splite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 开启八卦易数玩法
i3k_sbean.eightdiagram_change_open_req = i3k_class("eightdiagram_change_open_req")
function i3k_sbean.eightdiagram_change_open_req:ctor()
	self._pname_ = "eightdiagram_change_open_req"
end

function i3k_sbean.eightdiagram_change_open_req:decode(is)
	is:popString()
end

function i3k_sbean.eightdiagram_change_open_req:encode(os)
	os:pushString(self._pname_)
end


-- 购买易数分配点数
i3k_sbean.eightdiagram_change_buy_point_req = i3k_class("eightdiagram_change_buy_point_req")
function i3k_sbean.eightdiagram_change_buy_point_req:ctor()
	self._pname_ = "eightdiagram_change_buy_point_req"
	--self.buyNum:		int32	
end

function i3k_sbean.eightdiagram_change_buy_point_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_buy_point_req:decode(is)
	is:popString()
	self.buyNum = is:popNumber()
end

function i3k_sbean.eightdiagram_change_buy_point_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.buyNum)
end


-- 重置易数分配点数
i3k_sbean.eightdiagram_change_reset_point_req = i3k_class("eightdiagram_change_reset_point_req")
function i3k_sbean.eightdiagram_change_reset_point_req:ctor()
	self._pname_ = "eightdiagram_change_reset_point_req"
	--self.part:		int32	
end

function i3k_sbean.eightdiagram_change_reset_point_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_reset_point_req:decode(is)
	is:popString()
	self.part = is:popNumber()
end

function i3k_sbean.eightdiagram_change_reset_point_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.part)
end


-- 更新易数分配点数
i3k_sbean.eightdiagram_change_update_point_req = i3k_class("eightdiagram_change_update_point_req")
function i3k_sbean.eightdiagram_change_update_point_req:ctor()
	self._pname_ = "eightdiagram_change_update_point_req"
	--self.part:		int32	
	--self.props:		map[int32, int32]	
end

function i3k_sbean.eightdiagram_change_update_point_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_update_point_req:decode(is)
	is:popString()
	self.part = is:popNumber()
	self.props = is:popNumberNumberMap()
end

function i3k_sbean.eightdiagram_change_update_point_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.part)
	os:pushNumberNumberMap(self.props)
end


-- 技能升级
i3k_sbean.eightdiagram_change_uplevel_req = i3k_class("eightdiagram_change_uplevel_req")
function i3k_sbean.eightdiagram_change_uplevel_req:ctor()
	self._pname_ = "eightdiagram_change_uplevel_req"
	--self.skillID:		int32	
end

function i3k_sbean.eightdiagram_change_uplevel_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_uplevel_req:decode(is)
	is:popString()
	self.skillID = is:popNumber()
end

function i3k_sbean.eightdiagram_change_uplevel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
end


-- 装备技能
i3k_sbean.eightdiagram_change_equip_skill_req = i3k_class("eightdiagram_change_equip_skill_req")
function i3k_sbean.eightdiagram_change_equip_skill_req:ctor()
	self._pname_ = "eightdiagram_change_equip_skill_req"
	--self.part:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.eightdiagram_change_equip_skill_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_equip_skill_req:decode(is)
	is:popString()
	self.part = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.eightdiagram_change_equip_skill_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.part)
	os:pushNumber(self.skillID)
end


-- 卸载技能
i3k_sbean.eightdiagram_change_unequip_skill_req = i3k_class("eightdiagram_change_unequip_skill_req")
function i3k_sbean.eightdiagram_change_unequip_skill_req:ctor()
	self._pname_ = "eightdiagram_change_unequip_skill_req"
	--self.part:		int32	
end

function i3k_sbean.eightdiagram_change_unequip_skill_req:clone()
	return clone(self)
end

function i3k_sbean.eightdiagram_change_unequip_skill_req:decode(is)
	is:popString()
	self.part = is:popNumber()
end

function i3k_sbean.eightdiagram_change_unequip_skill_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.part)
end


i3k_sbean.globalpve_sync_req = i3k_class("globalpve_sync_req")
function i3k_sbean.globalpve_sync_req:ctor()
	self._pname_ = "globalpve_sync_req"
end

function i3k_sbean.globalpve_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.globalpve_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 参加跨服PVE
i3k_sbean.globalpve_join_req = i3k_class("globalpve_join_req")
function i3k_sbean.globalpve_join_req:ctor()
	self._pname_ = "globalpve_join_req"
end

function i3k_sbean.globalpve_join_req:decode(is)
	is:popString()
end

function i3k_sbean.globalpve_join_req:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.globalpve_teleboss_req = i3k_class("globalpve_teleboss_req")
function i3k_sbean.globalpve_teleboss_req:ctor()
	self._pname_ = "globalpve_teleboss_req"
	--self.mapID:		int32	
	--self.bossID:		int32	
end

function i3k_sbean.globalpve_teleboss_req:clone()
	return clone(self)
end

function i3k_sbean.globalpve_teleboss_req:decode(is)
	is:popString()
	self.mapID = is:popNumber()
	self.bossID = is:popNumber()
end

function i3k_sbean.globalpve_teleboss_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapID)
	os:pushNumber(self.bossID)
end


-- 进入对战区
i3k_sbean.globalpve_enterwar_req = i3k_class("globalpve_enterwar_req")
function i3k_sbean.globalpve_enterwar_req:ctor()
	self._pname_ = "globalpve_enterwar_req"
	--self.line:		int32	
end

function i3k_sbean.globalpve_enterwar_req:clone()
	return clone(self)
end

function i3k_sbean.globalpve_enterwar_req:decode(is)
	is:popString()
	self.line = is:popNumber()
end

function i3k_sbean.globalpve_enterwar_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.line)
end


-- 同步对战区列表
i3k_sbean.globalpve_syncwararea_req = i3k_class("globalpve_syncwararea_req")
function i3k_sbean.globalpve_syncwararea_req:ctor()
	self._pname_ = "globalpve_syncwararea_req"
end

function i3k_sbean.globalpve_syncwararea_req:decode(is)
	is:popString()
end

function i3k_sbean.globalpve_syncwararea_req:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.sectshare_sync_req = i3k_class("sectshare_sync_req")
function i3k_sbean.sectshare_sync_req:ctor()
	self._pname_ = "sectshare_sync_req"
end

function i3k_sbean.sectshare_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sectshare_sync_req:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.sectshare_event_sync_req = i3k_class("sectshare_event_sync_req")
function i3k_sbean.sectshare_event_sync_req:ctor()
	self._pname_ = "sectshare_event_sync_req"
end

function i3k_sbean.sectshare_event_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sectshare_event_sync_req:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.sectshare_apply_sync_req = i3k_class("sectshare_apply_sync_req")
function i3k_sbean.sectshare_apply_sync_req:ctor()
	self._pname_ = "sectshare_apply_sync_req"
end

function i3k_sbean.sectshare_apply_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sectshare_apply_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 共享道具申请
i3k_sbean.sectshare_apply_req = i3k_class("sectshare_apply_req")
function i3k_sbean.sectshare_apply_req:ctor()
	self._pname_ = "sectshare_apply_req"
	--self.itemID:		int32	
	--self.price:		int32	
end

function i3k_sbean.sectshare_apply_req:clone()
	return clone(self)
end

function i3k_sbean.sectshare_apply_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.price = is:popNumber()
end

function i3k_sbean.sectshare_apply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.price)
end


-- 设置兑换所需共享积分
i3k_sbean.sectshare_setprice_req = i3k_class("sectshare_setprice_req")
function i3k_sbean.sectshare_setprice_req:ctor()
	self._pname_ = "sectshare_setprice_req"
	--self.itemID:		int32	
	--self.price:		int32	
end

function i3k_sbean.sectshare_setprice_req:clone()
	return clone(self)
end

function i3k_sbean.sectshare_setprice_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.price = is:popNumber()
end

function i3k_sbean.sectshare_setprice_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.price)
end


-- 百万答题同步
i3k_sbean.million_answer_sync_req = i3k_class("million_answer_sync_req")
function i3k_sbean.million_answer_sync_req:ctor()
	self._pname_ = "million_answer_sync_req"
end

function i3k_sbean.million_answer_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.million_answer_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 百万答题预约
i3k_sbean.million_answer_reserve_req = i3k_class("million_answer_reserve_req")
function i3k_sbean.million_answer_reserve_req:ctor()
	self._pname_ = "million_answer_reserve_req"
end

function i3k_sbean.million_answer_reserve_req:decode(is)
	is:popString()
end

function i3k_sbean.million_answer_reserve_req:encode(os)
	os:pushString(self._pname_)
end


-- 百万答题点击
i3k_sbean.million_answer_click_req = i3k_class("million_answer_click_req")
function i3k_sbean.million_answer_click_req:ctor()
	self._pname_ = "million_answer_click_req"
	--self.questionID:		int32	
	--self.answer:		int32	
end

function i3k_sbean.million_answer_click_req:clone()
	return clone(self)
end

function i3k_sbean.million_answer_click_req:decode(is)
	is:popString()
	self.questionID = is:popNumber()
	self.answer = is:popNumber()
end

function i3k_sbean.million_answer_click_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.questionID)
	os:pushNumber(self.answer)
end


-- 百万答题获取获胜玩家姓名
i3k_sbean.million_answer_name_req = i3k_class("million_answer_name_req")
function i3k_sbean.million_answer_name_req:ctor()
	self._pname_ = "million_answer_name_req"
end

function i3k_sbean.million_answer_name_req:decode(is)
	is:popString()
end

function i3k_sbean.million_answer_name_req:encode(os)
	os:pushString(self._pname_)
end


-- 发送验证码
i3k_sbean.send_phone_msg_req = i3k_class("send_phone_msg_req")
function i3k_sbean.send_phone_msg_req:ctor()
	self._pname_ = "send_phone_msg_req"
	--self.phoneNumber:		string	
end

function i3k_sbean.send_phone_msg_req:clone()
	return clone(self)
end

function i3k_sbean.send_phone_msg_req:decode(is)
	is:popString()
	self.phoneNumber = is:popString()
end

function i3k_sbean.send_phone_msg_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.phoneNumber)
end


-- 领取绑定手机奖励
i3k_sbean.take_bind_phone_reward_req = i3k_class("take_bind_phone_reward_req")
function i3k_sbean.take_bind_phone_reward_req:ctor()
	self._pname_ = "take_bind_phone_reward_req"
	--self.code:		int32	
end

function i3k_sbean.take_bind_phone_reward_req:clone()
	return clone(self)
end

function i3k_sbean.take_bind_phone_reward_req:decode(is)
	is:popString()
	self.code = is:popNumber()
end

function i3k_sbean.take_bind_phone_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.code)
end


-- 同步绑定手机奖励
i3k_sbean.phone_reward_sync_req = i3k_class("phone_reward_sync_req")
function i3k_sbean.phone_reward_sync_req:ctor()
	self._pname_ = "phone_reward_sync_req"
end

function i3k_sbean.phone_reward_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.phone_reward_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步卜卦信息
i3k_sbean.divination_state_sync_req = i3k_class("divination_state_sync_req")
function i3k_sbean.divination_state_sync_req:ctor()
	self._pname_ = "divination_state_sync_req"
end

function i3k_sbean.divination_state_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.divination_state_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 进行占卜
i3k_sbean.conduct_divination_req = i3k_class("conduct_divination_req")
function i3k_sbean.conduct_divination_req:ctor()
	self._pname_ = "conduct_divination_req"
	--self.divinationCount:		int32	
end

function i3k_sbean.conduct_divination_req:clone()
	return clone(self)
end

function i3k_sbean.conduct_divination_req:decode(is)
	is:popString()
	self.divinationCount = is:popNumber()
end

function i3k_sbean.conduct_divination_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.divinationCount)
end


-- 领取奖励
i3k_sbean.receive_divination_reward_req = i3k_class("receive_divination_reward_req")
function i3k_sbean.receive_divination_reward_req:ctor()
	self._pname_ = "receive_divination_reward_req"
end

function i3k_sbean.receive_divination_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.receive_divination_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 升级五转之路
i3k_sbean.transform_road_uplevel_req = i3k_class("transform_road_uplevel_req")
function i3k_sbean.transform_road_uplevel_req:ctor()
	self._pname_ = "transform_road_uplevel_req"
	--self.level:		int32	
end

function i3k_sbean.transform_road_uplevel_req:clone()
	return clone(self)
end

function i3k_sbean.transform_road_uplevel_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.transform_road_uplevel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 选择命轮
i3k_sbean.transform_road_use_lifewheel_req = i3k_class("transform_road_use_lifewheel_req")
function i3k_sbean.transform_road_use_lifewheel_req:ctor()
	self._pname_ = "transform_road_use_lifewheel_req"
	--self.id:		int32	
end

function i3k_sbean.transform_road_use_lifewheel_req:clone()
	return clone(self)
end

function i3k_sbean.transform_road_use_lifewheel_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.transform_road_use_lifewheel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 重置命轮
i3k_sbean.transform_road_reset_lifewheel_req = i3k_class("transform_road_reset_lifewheel_req")
function i3k_sbean.transform_road_reset_lifewheel_req:ctor()
	self._pname_ = "transform_road_reset_lifewheel_req"
end

function i3k_sbean.transform_road_reset_lifewheel_req:decode(is)
	is:popString()
end

function i3k_sbean.transform_road_reset_lifewheel_req:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.send_kite_req = i3k_class("send_kite_req")
function i3k_sbean.send_kite_req:ctor()
	self._pname_ = "send_kite_req"
	--self.kiteId:		int32	
	--self.msg:		string	
	--self.gsName:		string	
end

function i3k_sbean.send_kite_req:clone()
	return clone(self)
end

function i3k_sbean.send_kite_req:decode(is)
	is:popString()
	self.kiteId = is:popNumber()
	self.msg = is:popString()
	self.gsName = is:popString()
end

function i3k_sbean.send_kite_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.kiteId)
	os:pushString(self.msg)
	os:pushString(self.gsName)
end


-- 同步单人闯关
i3k_sbean.single_explore_sync_req = i3k_class("single_explore_sync_req")
function i3k_sbean.single_explore_sync_req:ctor()
	self._pname_ = "single_explore_sync_req"
	--self.id:		int32	
end

function i3k_sbean.single_explore_sync_req:clone()
	return clone(self)
end

function i3k_sbean.single_explore_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.single_explore_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 进入单人闯关
i3k_sbean.single_explore_start_req = i3k_class("single_explore_start_req")
function i3k_sbean.single_explore_start_req:ctor()
	self._pname_ = "single_explore_start_req"
	--self.exploreId:		int32	
	--self.enterGroup:		int32	
end

function i3k_sbean.single_explore_start_req:clone()
	return clone(self)
end

function i3k_sbean.single_explore_start_req:decode(is)
	is:popString()
	self.exploreId = is:popNumber()
	self.enterGroup = is:popNumber()
end

function i3k_sbean.single_explore_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.exploreId)
	os:pushNumber(self.enterGroup)
end


-- 选择单人闯关宠物
i3k_sbean.single_explore_set_pet_req = i3k_class("single_explore_set_pet_req")
function i3k_sbean.single_explore_set_pet_req:ctor()
	self._pname_ = "single_explore_set_pet_req"
	--self.exploreId:		int32	
	--self.pets:		set[int32]	
end

function i3k_sbean.single_explore_set_pet_req:clone()
	return clone(self)
end

function i3k_sbean.single_explore_set_pet_req:decode(is)
	is:popString()
	self.exploreId = is:popNumber()
	self.pets = is:popNumberSet()
end

function i3k_sbean.single_explore_set_pet_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.exploreId)
	os:pushNumberSet(self.pets)
end


-- 同步世界杯相关信息
i3k_sbean.world_cup_sync_req = i3k_class("world_cup_sync_req")
function i3k_sbean.world_cup_sync_req:ctor()
	self._pname_ = "world_cup_sync_req"
end

function i3k_sbean.world_cup_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.world_cup_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 进行世界杯压注
i3k_sbean.world_cup_conduct_bet_req = i3k_class("world_cup_conduct_bet_req")
function i3k_sbean.world_cup_conduct_bet_req:ctor()
	self._pname_ = "world_cup_conduct_bet_req"
	--self.countryId:		int32	
	--self.recordId:		int32	
end

function i3k_sbean.world_cup_conduct_bet_req:clone()
	return clone(self)
end

function i3k_sbean.world_cup_conduct_bet_req:decode(is)
	is:popString()
	self.countryId = is:popNumber()
	self.recordId = is:popNumber()
end

function i3k_sbean.world_cup_conduct_bet_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.countryId)
	os:pushNumber(self.recordId)
end


-- 家园创建
i3k_sbean.homeland_create_req = i3k_class("homeland_create_req")
function i3k_sbean.homeland_create_req:ctor()
	self._pname_ = "homeland_create_req"
	--self.name:		string	
end

function i3k_sbean.homeland_create_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_create_req:decode(is)
	is:popString()
	self.name = is:popString()
end

function i3k_sbean.homeland_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.name)
end


-- 家园改名
i3k_sbean.homeland_rename_req = i3k_class("homeland_rename_req")
function i3k_sbean.homeland_rename_req:ctor()
	self._pname_ = "homeland_rename_req"
	--self.name:		string	
end

function i3k_sbean.homeland_rename_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_rename_req:decode(is)
	is:popString()
	self.name = is:popString()
end

function i3k_sbean.homeland_rename_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.name)
end


-- 家园升级
i3k_sbean.homeland_uplevel_req = i3k_class("homeland_uplevel_req")
function i3k_sbean.homeland_uplevel_req:ctor()
	self._pname_ = "homeland_uplevel_req"
	--self.level:		int32	
end

function i3k_sbean.homeland_uplevel_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_uplevel_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.homeland_uplevel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 家园土地升级
i3k_sbean.homeland_ground_uplevel_req = i3k_class("homeland_ground_uplevel_req")
function i3k_sbean.homeland_ground_uplevel_req:ctor()
	self._pname_ = "homeland_ground_uplevel_req"
	--self.type:		int32	
	--self.index:		int32	
	--self.level:		int32	
end

function i3k_sbean.homeland_ground_uplevel_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_ground_uplevel_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.homeland_ground_uplevel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
	os:pushNumber(self.level)
end


-- 家园池塘升级
i3k_sbean.homeland_pool_uplevel_req = i3k_class("homeland_pool_uplevel_req")
function i3k_sbean.homeland_pool_uplevel_req:ctor()
	self._pname_ = "homeland_pool_uplevel_req"
	--self.level:		int32	
end

function i3k_sbean.homeland_pool_uplevel_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_pool_uplevel_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.homeland_pool_uplevel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 种植作物
i3k_sbean.homeland_plant_req = i3k_class("homeland_plant_req")
function i3k_sbean.homeland_plant_req:ctor()
	self._pname_ = "homeland_plant_req"
	--self.type:		int32	
	--self.index:		int32	
	--self.plantId:		int32	
end

function i3k_sbean.homeland_plant_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_plant_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
	self.plantId = is:popNumber()
end

function i3k_sbean.homeland_plant_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
	os:pushNumber(self.plantId)
end


-- 铲除作物
i3k_sbean.homeland_remove_req = i3k_class("homeland_remove_req")
function i3k_sbean.homeland_remove_req:ctor()
	self._pname_ = "homeland_remove_req"
	--self.type:		int32	
	--self.index:		int32	
end

function i3k_sbean.homeland_remove_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_remove_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.homeland_remove_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
end


-- 偷窃作物
i3k_sbean.homeland_steal_req = i3k_class("homeland_steal_req")
function i3k_sbean.homeland_steal_req:ctor()
	self._pname_ = "homeland_steal_req"
	--self.type:		int32	
	--self.index:		int32	
end

function i3k_sbean.homeland_steal_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_steal_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.homeland_steal_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
end


-- 收获作物
i3k_sbean.homeland_harvest_req = i3k_class("homeland_harvest_req")
function i3k_sbean.homeland_harvest_req:ctor()
	self._pname_ = "homeland_harvest_req"
	--self.type:		int32	
	--self.index:		int32	
	--self.petId:		int32	
end

function i3k_sbean.homeland_harvest_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_harvest_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
	self.petId = is:popNumber()
end

function i3k_sbean.homeland_harvest_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
	os:pushNumber(self.petId)
end


-- 进入家园
i3k_sbean.homeland_enter_req = i3k_class("homeland_enter_req")
function i3k_sbean.homeland_enter_req:ctor()
	self._pname_ = "homeland_enter_req"
	--self.roleId:		int32	
end

function i3k_sbean.homeland_enter_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_enter_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.homeland_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 同步家园信息
i3k_sbean.homeland_sync_req = i3k_class("homeland_sync_req")
function i3k_sbean.homeland_sync_req:ctor()
	self._pname_ = "homeland_sync_req"
end

function i3k_sbean.homeland_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.homeland_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步家园装备信息
i3k_sbean.homeland_equip_sync_req = i3k_class("homeland_equip_sync_req")
function i3k_sbean.homeland_equip_sync_req:ctor()
	self._pname_ = "homeland_equip_sync_req"
end

function i3k_sbean.homeland_equip_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.homeland_equip_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 作物浇水
i3k_sbean.homeland_water_req = i3k_class("homeland_water_req")
function i3k_sbean.homeland_water_req:ctor()
	self._pname_ = "homeland_water_req"
	--self.type:		int32	
	--self.index:		int32	
end

function i3k_sbean.homeland_water_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_water_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.homeland_water_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
end


-- 作物护理
i3k_sbean.homeland_nurse_req = i3k_class("homeland_nurse_req")
function i3k_sbean.homeland_nurse_req:ctor()
	self._pname_ = "homeland_nurse_req"
	--self.type:		int32	
	--self.index:		int32	
end

function i3k_sbean.homeland_nurse_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_nurse_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.homeland_nurse_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.index)
end


-- 开始钓鱼
i3k_sbean.homeland_start_fish_req = i3k_class("homeland_start_fish_req")
function i3k_sbean.homeland_start_fish_req:ctor()
	self._pname_ = "homeland_start_fish_req"
	--self.rotation:		Vector3F	
end

function i3k_sbean.homeland_start_fish_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_start_fish_req:decode(is)
	is:popString()
	self.rotation = is:pop(i3k_sbean.Vector3F)
end

function i3k_sbean.homeland_start_fish_req:encode(os)
	os:pushString(self._pname_)
	os:push(self.rotation)
end


-- 中断钓鱼
i3k_sbean.homeland_stop_fish_req = i3k_class("homeland_stop_fish_req")
function i3k_sbean.homeland_stop_fish_req:ctor()
	self._pname_ = "homeland_stop_fish_req"
end

function i3k_sbean.homeland_stop_fish_req:decode(is)
	is:popString()
end

function i3k_sbean.homeland_stop_fish_req:encode(os)
	os:pushString(self._pname_)
end


-- 结束钓鱼
i3k_sbean.homeland_finish_fish_req = i3k_class("homeland_finish_fish_req")
function i3k_sbean.homeland_finish_fish_req:ctor()
	self._pname_ = "homeland_finish_fish_req"
	--self.index:		int32	
end

function i3k_sbean.homeland_finish_fish_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_finish_fish_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.homeland_finish_fish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 穿戴装备
i3k_sbean.homeland_equip_wear_req = i3k_class("homeland_equip_wear_req")
function i3k_sbean.homeland_equip_wear_req:ctor()
	self._pname_ = "homeland_equip_wear_req"
	--self.id:		int32	
end

function i3k_sbean.homeland_equip_wear_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_equip_wear_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.homeland_equip_wear_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 脱下装备
i3k_sbean.homeland_equip_unwaer_req = i3k_class("homeland_equip_unwaer_req")
function i3k_sbean.homeland_equip_unwaer_req:ctor()
	self._pname_ = "homeland_equip_unwaer_req"
	--self.type:		int32	
end

function i3k_sbean.homeland_equip_unwaer_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_equip_unwaer_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.homeland_equip_unwaer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 销毁装备
i3k_sbean.homeland_equip_remove_req = i3k_class("homeland_equip_remove_req")
function i3k_sbean.homeland_equip_remove_req:ctor()
	self._pname_ = "homeland_equip_remove_req"
	--self.id:		int32	
end

function i3k_sbean.homeland_equip_remove_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_equip_remove_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.homeland_equip_remove_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 踢出角色
i3k_sbean.homeland_kick_role_req = i3k_class("homeland_kick_role_req")
function i3k_sbean.homeland_kick_role_req:ctor()
	self._pname_ = "homeland_kick_role_req"
	--self.id:		int32	
end

function i3k_sbean.homeland_kick_role_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_kick_role_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.homeland_kick_role_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 查询家园内角色
i3k_sbean.homeland_query_roles_req = i3k_class("homeland_query_roles_req")
function i3k_sbean.homeland_query_roles_req:ctor()
	self._pname_ = "homeland_query_roles_req"
	--self.id:		int32	
end

function i3k_sbean.homeland_query_roles_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_query_roles_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.homeland_query_roles_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 同步家园历史信息
i3k_sbean.homeland_history_sync_req = i3k_class("homeland_history_sync_req")
function i3k_sbean.homeland_history_sync_req:ctor()
	self._pname_ = "homeland_history_sync_req"
end

function i3k_sbean.homeland_history_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.homeland_history_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 修改钓鱼状态
i3k_sbean.homeland_fish_status_change_req = i3k_class("homeland_fish_status_change_req")
function i3k_sbean.homeland_fish_status_change_req:ctor()
	self._pname_ = "homeland_fish_status_change_req"
	--self.isFishing:		int32	
end

function i3k_sbean.homeland_fish_status_change_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_fish_status_change_req:decode(is)
	is:popString()
	self.isFishing = is:popNumber()
end

function i3k_sbean.homeland_fish_status_change_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isFishing)
end


-- 家园生产
i3k_sbean.homeland_produce_req = i3k_class("homeland_produce_req")
function i3k_sbean.homeland_produce_req:ctor()
	self._pname_ = "homeland_produce_req"
	--self.produceId:		int32	
end

function i3k_sbean.homeland_produce_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_produce_req:decode(is)
	is:popString()
	self.produceId = is:popNumber()
end

function i3k_sbean.homeland_produce_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.produceId)
end


-- 家园房屋升级
i3k_sbean.homeland_house_uplevel_req = i3k_class("homeland_house_uplevel_req")
function i3k_sbean.homeland_house_uplevel_req:ctor()
	self._pname_ = "homeland_house_uplevel_req"
	--self.level:		int32	
end

function i3k_sbean.homeland_house_uplevel_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_house_uplevel_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.homeland_house_uplevel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 家具背包存入
i3k_sbean.furniture_bag_put_req = i3k_class("furniture_bag_put_req")
function i3k_sbean.furniture_bag_put_req:ctor()
	self._pname_ = "furniture_bag_put_req"
	--self.id:		int32	
	--self.num:		int32	
	--self.type:		int32	
end

function i3k_sbean.furniture_bag_put_req:clone()
	return clone(self)
end

function i3k_sbean.furniture_bag_put_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.num = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.furniture_bag_put_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.num)
	os:pushNumber(self.type)
end


-- 家具背包取出
i3k_sbean.furniture_bag_get_req = i3k_class("furniture_bag_get_req")
function i3k_sbean.furniture_bag_get_req:ctor()
	self._pname_ = "furniture_bag_get_req"
	--self.id:		int32	
	--self.num:		int32	
	--self.type:		int32	
end

function i3k_sbean.furniture_bag_get_req:clone()
	return clone(self)
end

function i3k_sbean.furniture_bag_get_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.num = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.furniture_bag_get_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.num)
	os:pushNumber(self.type)
end


-- 地面家具放置
i3k_sbean.land_furniture_put_req = i3k_class("land_furniture_put_req")
function i3k_sbean.land_furniture_put_req:ctor()
	self._pname_ = "land_furniture_put_req"
	--self.id:		int32	
	--self.positionX:		int32	
	--self.positionY:		int32	
	--self.direction:		int32	
end

function i3k_sbean.land_furniture_put_req:clone()
	return clone(self)
end

function i3k_sbean.land_furniture_put_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.positionX = is:popNumber()
	self.positionY = is:popNumber()
	self.direction = is:popNumber()
end

function i3k_sbean.land_furniture_put_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.positionX)
	os:pushNumber(self.positionY)
	os:pushNumber(self.direction)
end


-- 地面家具移动
i3k_sbean.land_furniture_move_req = i3k_class("land_furniture_move_req")
function i3k_sbean.land_furniture_move_req:ctor()
	self._pname_ = "land_furniture_move_req"
	--self.index:		int32	
	--self.positionX:		int32	
	--self.positionY:		int32	
	--self.direction:		int32	
end

function i3k_sbean.land_furniture_move_req:clone()
	return clone(self)
end

function i3k_sbean.land_furniture_move_req:decode(is)
	is:popString()
	self.index = is:popNumber()
	self.positionX = is:popNumber()
	self.positionY = is:popNumber()
	self.direction = is:popNumber()
end

function i3k_sbean.land_furniture_move_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
	os:pushNumber(self.positionX)
	os:pushNumber(self.positionY)
	os:pushNumber(self.direction)
end


-- 地面家具取回
i3k_sbean.land_furniture_remove_req = i3k_class("land_furniture_remove_req")
function i3k_sbean.land_furniture_remove_req:ctor()
	self._pname_ = "land_furniture_remove_req"
	--self.index:		int32	
end

function i3k_sbean.land_furniture_remove_req:clone()
	return clone(self)
end

function i3k_sbean.land_furniture_remove_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.land_furniture_remove_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 地毯家具放置
i3k_sbean.floor_furniture_put_req = i3k_class("floor_furniture_put_req")
function i3k_sbean.floor_furniture_put_req:ctor()
	self._pname_ = "floor_furniture_put_req"
	--self.id:		int32	
	--self.positionX:		int32	
	--self.positionY:		int32	
	--self.direction:		int32	
end

function i3k_sbean.floor_furniture_put_req:clone()
	return clone(self)
end

function i3k_sbean.floor_furniture_put_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.positionX = is:popNumber()
	self.positionY = is:popNumber()
	self.direction = is:popNumber()
end

function i3k_sbean.floor_furniture_put_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.positionX)
	os:pushNumber(self.positionY)
	os:pushNumber(self.direction)
end


-- 地毯家具移动
i3k_sbean.floor_furniture_move_req = i3k_class("floor_furniture_move_req")
function i3k_sbean.floor_furniture_move_req:ctor()
	self._pname_ = "floor_furniture_move_req"
	--self.index:		int32	
	--self.positionX:		int32	
	--self.positionY:		int32	
	--self.direction:		int32	
end

function i3k_sbean.floor_furniture_move_req:clone()
	return clone(self)
end

function i3k_sbean.floor_furniture_move_req:decode(is)
	is:popString()
	self.index = is:popNumber()
	self.positionX = is:popNumber()
	self.positionY = is:popNumber()
	self.direction = is:popNumber()
end

function i3k_sbean.floor_furniture_move_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
	os:pushNumber(self.positionX)
	os:pushNumber(self.positionY)
	os:pushNumber(self.direction)
end


-- 地毯家具取回
i3k_sbean.floor_furniture_remove_req = i3k_class("floor_furniture_remove_req")
function i3k_sbean.floor_furniture_remove_req:ctor()
	self._pname_ = "floor_furniture_remove_req"
	--self.index:		int32	
end

function i3k_sbean.floor_furniture_remove_req:clone()
	return clone(self)
end

function i3k_sbean.floor_furniture_remove_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.floor_furniture_remove_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 墙面家具放置
i3k_sbean.wall_furniture_put_req = i3k_class("wall_furniture_put_req")
function i3k_sbean.wall_furniture_put_req:ctor()
	self._pname_ = "wall_furniture_put_req"
	--self.id:		int32	
	--self.wallIndex:		int32	
	--self.position:		double	
end

function i3k_sbean.wall_furniture_put_req:clone()
	return clone(self)
end

function i3k_sbean.wall_furniture_put_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.wallIndex = is:popNumber()
	self.position = is:popNumber()
end

function i3k_sbean.wall_furniture_put_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.wallIndex)
	os:pushNumber(self.position)
end


-- 墙面家具取回
i3k_sbean.wall_furniture_remove_req = i3k_class("wall_furniture_remove_req")
function i3k_sbean.wall_furniture_remove_req:ctor()
	self._pname_ = "wall_furniture_remove_req"
	--self.index:		int32	
end

function i3k_sbean.wall_furniture_remove_req:clone()
	return clone(self)
end

function i3k_sbean.wall_furniture_remove_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.wall_furniture_remove_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 附加家具放置
i3k_sbean.addition_furniture_put_req = i3k_class("addition_furniture_put_req")
function i3k_sbean.addition_furniture_put_req:ctor()
	self._pname_ = "addition_furniture_put_req"
	--self.id:		int32	
	--self.index:		int32	
end

function i3k_sbean.addition_furniture_put_req:clone()
	return clone(self)
end

function i3k_sbean.addition_furniture_put_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.addition_furniture_put_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.index)
end


-- 附加家具取回
i3k_sbean.addition_furniture_remove_req = i3k_class("addition_furniture_remove_req")
function i3k_sbean.addition_furniture_remove_req:ctor()
	self._pname_ = "addition_furniture_remove_req"
	--self.index:		int32	
end

function i3k_sbean.addition_furniture_remove_req:clone()
	return clone(self)
end

function i3k_sbean.addition_furniture_remove_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.addition_furniture_remove_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 进入房间
i3k_sbean.house_enter_req = i3k_class("house_enter_req")
function i3k_sbean.house_enter_req:ctor()
	self._pname_ = "house_enter_req"
end

function i3k_sbean.house_enter_req:decode(is)
	is:popString()
end

function i3k_sbean.house_enter_req:encode(os)
	os:pushString(self._pname_)
end


-- 标记脚本角色
i3k_sbean.script_role_mark_req = i3k_class("script_role_mark_req")
function i3k_sbean.script_role_mark_req:ctor()
	self._pname_ = "script_role_mark_req"
	--self.time:		int32	
end

function i3k_sbean.script_role_mark_req:clone()
	return clone(self)
end

function i3k_sbean.script_role_mark_req:decode(is)
	is:popString()
	self.time = is:popNumber()
end

function i3k_sbean.script_role_mark_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.time)
end


-- 家具背包同步
i3k_sbean.house_bag_furniture_sync_req = i3k_class("house_bag_furniture_sync_req")
function i3k_sbean.house_bag_furniture_sync_req:ctor()
	self._pname_ = "house_bag_furniture_sync_req"
end

function i3k_sbean.house_bag_furniture_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.house_bag_furniture_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 房屋皮肤切换
i3k_sbean.house_skin_select_req = i3k_class("house_skin_select_req")
function i3k_sbean.house_skin_select_req:ctor()
	self._pname_ = "house_skin_select_req"
	--self.index:		int32	
end

function i3k_sbean.house_skin_select_req:clone()
	return clone(self)
end

function i3k_sbean.house_skin_select_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.house_skin_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 使用房屋皮肤解锁道具
i3k_sbean.bag_use_house_skin_item_req = i3k_class("bag_use_house_skin_item_req")
function i3k_sbean.bag_use_house_skin_item_req:ctor()
	self._pname_ = "bag_use_house_skin_item_req"
	--self.itemId:		int32	
end

function i3k_sbean.bag_use_house_skin_item_req:clone()
	return clone(self)
end

function i3k_sbean.bag_use_house_skin_item_req:decode(is)
	is:popString()
	self.itemId = is:popNumber()
end

function i3k_sbean.bag_use_house_skin_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemId)
end


-- 房屋已解锁皮肤同步
i3k_sbean.house_unlock_skin_sync_req = i3k_class("house_unlock_skin_sync_req")
function i3k_sbean.house_unlock_skin_sync_req:ctor()
	self._pname_ = "house_unlock_skin_sync_req"
end

function i3k_sbean.house_unlock_skin_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.house_unlock_skin_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 传世大酬宾活动同步
i3k_sbean.legendmake_sync_req = i3k_class("legendmake_sync_req")
function i3k_sbean.legendmake_sync_req:ctor()
	self._pname_ = "legendmake_sync_req"
	--self.id:		int32	
end

function i3k_sbean.legendmake_sync_req:clone()
	return clone(self)
end

function i3k_sbean.legendmake_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.legendmake_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 节日活动礼盒领取
i3k_sbean.festival_takegift_req = i3k_class("festival_takegift_req")
function i3k_sbean.festival_takegift_req:ctor()
	self._pname_ = "festival_takegift_req"
	--self.id:		int32	
end

function i3k_sbean.festival_takegift_req:clone()
	return clone(self)
end

function i3k_sbean.festival_takegift_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.festival_takegift_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 节日活动世界祝福
i3k_sbean.festival_bless_req = i3k_class("festival_bless_req")
function i3k_sbean.festival_bless_req:ctor()
	self._pname_ = "festival_bless_req"
	--self.id:		int32	
	--self.guid:		string	
end

function i3k_sbean.festival_bless_req:clone()
	return clone(self)
end

function i3k_sbean.festival_bless_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.guid = is:popString()
end

function i3k_sbean.festival_bless_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.guid)
end


-- 同步活动信息请求
i3k_sbean.donate_sync_info_req = i3k_class("donate_sync_info_req")
function i3k_sbean.donate_sync_info_req:ctor()
	self._pname_ = "donate_sync_info_req"
end

function i3k_sbean.donate_sync_info_req:decode(is)
	is:popString()
end

function i3k_sbean.donate_sync_info_req:encode(os)
	os:pushString(self._pname_)
end


-- 进行捐助
i3k_sbean.donate_conduct_req = i3k_class("donate_conduct_req")
function i3k_sbean.donate_conduct_req:ctor()
	self._pname_ = "donate_conduct_req"
end

function i3k_sbean.donate_conduct_req:decode(is)
	is:popString()
end

function i3k_sbean.donate_conduct_req:encode(os)
	os:pushString(self._pname_)
end


-- 领奖
i3k_sbean.donate_reward_req = i3k_class("donate_reward_req")
function i3k_sbean.donate_reward_req:ctor()
	self._pname_ = "donate_reward_req"
	--self.grade:		int32	
end

function i3k_sbean.donate_reward_req:clone()
	return clone(self)
end

function i3k_sbean.donate_reward_req:decode(is)
	is:popString()
	self.grade = is:popNumber()
end

function i3k_sbean.donate_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.grade)
end


-- 同步图钉信息
i3k_sbean.thumbtack_sync_req = i3k_class("thumbtack_sync_req")
function i3k_sbean.thumbtack_sync_req:ctor()
	self._pname_ = "thumbtack_sync_req"
end

function i3k_sbean.thumbtack_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.thumbtack_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 添加图钉
i3k_sbean.thumbtack_add_req = i3k_class("thumbtack_add_req")
function i3k_sbean.thumbtack_add_req:ctor()
	self._pname_ = "thumbtack_add_req"
	--self.remarks:		string	
end

function i3k_sbean.thumbtack_add_req:clone()
	return clone(self)
end

function i3k_sbean.thumbtack_add_req:decode(is)
	is:popString()
	self.remarks = is:popString()
end

function i3k_sbean.thumbtack_add_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.remarks)
end


-- 修改备注
i3k_sbean.thumbtack_revise_remarks_req = i3k_class("thumbtack_revise_remarks_req")
function i3k_sbean.thumbtack_revise_remarks_req:ctor()
	self._pname_ = "thumbtack_revise_remarks_req"
	--self.mapId:		int32	
	--self.thumbtackId:		int32	
	--self.remarks:		string	
end

function i3k_sbean.thumbtack_revise_remarks_req:clone()
	return clone(self)
end

function i3k_sbean.thumbtack_revise_remarks_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.thumbtackId = is:popNumber()
	self.remarks = is:popString()
end

function i3k_sbean.thumbtack_revise_remarks_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.thumbtackId)
	os:pushString(self.remarks)
end


-- 删除图钉
i3k_sbean.thumbtack_delete_req = i3k_class("thumbtack_delete_req")
function i3k_sbean.thumbtack_delete_req:ctor()
	self._pname_ = "thumbtack_delete_req"
	--self.mapId:		int32	
	--self.thumbtackId:		int32	
end

function i3k_sbean.thumbtack_delete_req:clone()
	return clone(self)
end

function i3k_sbean.thumbtack_delete_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.thumbtackId = is:popNumber()
end

function i3k_sbean.thumbtack_delete_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.thumbtackId)
end


-- 使用图钉
i3k_sbean.thumbtack_use_req = i3k_class("thumbtack_use_req")
function i3k_sbean.thumbtack_use_req:ctor()
	self._pname_ = "thumbtack_use_req"
	--self.mapId:		int32	
	--self.thumbtackId:		int32	
end

function i3k_sbean.thumbtack_use_req:clone()
	return clone(self)
end

function i3k_sbean.thumbtack_use_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
	self.thumbtackId = is:popNumber()
end

function i3k_sbean.thumbtack_use_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
	os:pushNumber(self.thumbtackId)
end


-- 帮派捐赠
i3k_sbean.sect_donation_req = i3k_class("sect_donation_req")
function i3k_sbean.sect_donation_req:ctor()
	self._pname_ = "sect_donation_req"
	--self.id:		int32	
end

function i3k_sbean.sect_donation_req:clone()
	return clone(self)
end

function i3k_sbean.sect_donation_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_donation_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 帮派捐赠同步
i3k_sbean.sect_donation_sync_req = i3k_class("sect_donation_sync_req")
function i3k_sbean.sect_donation_sync_req:ctor()
	self._pname_ = "sect_donation_sync_req"
end

function i3k_sbean.sect_donation_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sect_donation_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 帮派捐赠同步捐赠角色
i3k_sbean.sect_donation_roles_req = i3k_class("sect_donation_roles_req")
function i3k_sbean.sect_donation_roles_req:ctor()
	self._pname_ = "sect_donation_roles_req"
	--self.id:		int32	
end

function i3k_sbean.sect_donation_roles_req:clone()
	return clone(self)
end

function i3k_sbean.sect_donation_roles_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sect_donation_roles_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 同步伙伴系统信息
i3k_sbean.sync_partner_info_req = i3k_class("sync_partner_info_req")
function i3k_sbean.sync_partner_info_req:ctor()
	self._pname_ = "sync_partner_info_req"
end

function i3k_sbean.sync_partner_info_req:decode(is)
	is:popString()
end

function i3k_sbean.sync_partner_info_req:encode(os)
	os:pushString(self._pname_)
end


-- 填写伙伴码
i3k_sbean.add_partner_code_req = i3k_class("add_partner_code_req")
function i3k_sbean.add_partner_code_req:ctor()
	self._pname_ = "add_partner_code_req"
	--self.code:		string	
end

function i3k_sbean.add_partner_code_req:clone()
	return clone(self)
end

function i3k_sbean.add_partner_code_req:decode(is)
	is:popString()
	self.code = is:popString()
end

function i3k_sbean.add_partner_code_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.code)
end


-- 领取奖励
i3k_sbean.receive_partner_reward_req = i3k_class("receive_partner_reward_req")
function i3k_sbean.receive_partner_reward_req:ctor()
	self._pname_ = "receive_partner_reward_req"
	--self.type:		int32	
	--self.actId:		int32	
end

function i3k_sbean.receive_partner_reward_req:clone()
	return clone(self)
end

function i3k_sbean.receive_partner_reward_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.actId = is:popNumber()
end

function i3k_sbean.receive_partner_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.actId)
end


-- 领取荣耀归来奖励
i3k_sbean.receive_partner_honour_reward_req = i3k_class("receive_partner_honour_reward_req")
function i3k_sbean.receive_partner_honour_reward_req:ctor()
	self._pname_ = "receive_partner_honour_reward_req"
end

function i3k_sbean.receive_partner_honour_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.receive_partner_honour_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 单人开启NPC副本
i3k_sbean.single_npc_map_start_req = i3k_class("single_npc_map_start_req")
function i3k_sbean.single_npc_map_start_req:ctor()
	self._pname_ = "single_npc_map_start_req"
	--self.mapId:		int32	
end

function i3k_sbean.single_npc_map_start_req:clone()
	return clone(self)
end

function i3k_sbean.single_npc_map_start_req:decode(is)
	is:popString()
	self.mapId = is:popNumber()
end

function i3k_sbean.single_npc_map_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapId)
end


-- 伙伴解绑下线
i3k_sbean.unbind_partner_req = i3k_class("unbind_partner_req")
function i3k_sbean.unbind_partner_req:ctor()
	self._pname_ = "unbind_partner_req"
	--self.roleId:		int32	
end

function i3k_sbean.unbind_partner_req:clone()
	return clone(self)
end

function i3k_sbean.unbind_partner_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
end

function i3k_sbean.unbind_partner_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
end


-- 伙伴解绑上线
i3k_sbean.unbind_upper_partner_req = i3k_class("unbind_upper_partner_req")
function i3k_sbean.unbind_upper_partner_req:ctor()
	self._pname_ = "unbind_upper_partner_req"
end

function i3k_sbean.unbind_upper_partner_req:decode(is)
	is:popString()
end

function i3k_sbean.unbind_upper_partner_req:encode(os)
	os:pushString(self._pname_)
end


-- 进行放生
i3k_sbean.conduct_release_item_req = i3k_class("conduct_release_item_req")
function i3k_sbean.conduct_release_item_req:ctor()
	self._pname_ = "conduct_release_item_req"
	--self.item:		map[int32, int32]	
end

function i3k_sbean.conduct_release_item_req:clone()
	return clone(self)
end

function i3k_sbean.conduct_release_item_req:decode(is)
	is:popString()
	self.item = is:popNumberNumberMap()
end

function i3k_sbean.conduct_release_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.item)
end


-- 同步登科有礼信息
i3k_sbean.admission_sync_info_req = i3k_class("admission_sync_info_req")
function i3k_sbean.admission_sync_info_req:ctor()
	self._pname_ = "admission_sync_info_req"
end

function i3k_sbean.admission_sync_info_req:decode(is)
	is:popString()
end

function i3k_sbean.admission_sync_info_req:encode(os)
	os:pushString(self._pname_)
end


-- 进行卜算
i3k_sbean.admission_conduct_req = i3k_class("admission_conduct_req")
function i3k_sbean.admission_conduct_req:ctor()
	self._pname_ = "admission_conduct_req"
end

function i3k_sbean.admission_conduct_req:decode(is)
	is:popString()
end

function i3k_sbean.admission_conduct_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取姻缘成就奖励
i3k_sbean.marriage_achieve_receive_reward_req = i3k_class("marriage_achieve_receive_reward_req")
function i3k_sbean.marriage_achieve_receive_reward_req:ctor()
	self._pname_ = "marriage_achieve_receive_reward_req"
	--self.type:		int32	
	--self.seq:		int32	
end

function i3k_sbean.marriage_achieve_receive_reward_req:clone()
	return clone(self)
end

function i3k_sbean.marriage_achieve_receive_reward_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.seq = is:popNumber()
end

function i3k_sbean.marriage_achieve_receive_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.seq)
end


-- 领取姻缘成就累计成就奖励
i3k_sbean.marriage_achieve_accumulative_reward_req = i3k_class("marriage_achieve_accumulative_reward_req")
function i3k_sbean.marriage_achieve_accumulative_reward_req:ctor()
	self._pname_ = "marriage_achieve_accumulative_reward_req"
	--self.index:		int32	
end

function i3k_sbean.marriage_achieve_accumulative_reward_req:clone()
	return clone(self)
end

function i3k_sbean.marriage_achieve_accumulative_reward_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.marriage_achieve_accumulative_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 进入宠物试炼副本
i3k_sbean.pettrain_enter_req = i3k_class("pettrain_enter_req")
function i3k_sbean.pettrain_enter_req:ctor()
	self._pname_ = "pettrain_enter_req"
	--self.activityId:		int32	
	--self.petId:		int32	
end

function i3k_sbean.pettrain_enter_req:clone()
	return clone(self)
end

function i3k_sbean.pettrain_enter_req:decode(is)
	is:popString()
	self.activityId = is:popNumber()
	self.petId = is:popNumber()
end

function i3k_sbean.pettrain_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.activityId)
	os:pushNumber(self.petId)
end


-- 领取宠物试炼任务
i3k_sbean.pettrain_task_take_req = i3k_class("pettrain_task_take_req")
function i3k_sbean.pettrain_task_take_req:ctor()
	self._pname_ = "pettrain_task_take_req"
	--self.taskId:		int32	
end

function i3k_sbean.pettrain_task_take_req:clone()
	return clone(self)
end

function i3k_sbean.pettrain_task_take_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.pettrain_task_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 完成宠物试炼任务
i3k_sbean.pettrain_task_finish_req = i3k_class("pettrain_task_finish_req")
function i3k_sbean.pettrain_task_finish_req:ctor()
	self._pname_ = "pettrain_task_finish_req"
	--self.taskId:		int32	
end

function i3k_sbean.pettrain_task_finish_req:clone()
	return clone(self)
end

function i3k_sbean.pettrain_task_finish_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.pettrain_task_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 采集宠物试炼矿物
i3k_sbean.pettrain_mineral_take_req = i3k_class("pettrain_mineral_take_req")
function i3k_sbean.pettrain_mineral_take_req:ctor()
	self._pname_ = "pettrain_mineral_take_req"
	--self.mineralId:		int32	
	--self.time:		int32	
	--self.mapId:		int32	
	--self.mineralPosition:		int32	
	--self.ignoreCondition:		int32	
end

function i3k_sbean.pettrain_mineral_take_req:clone()
	return clone(self)
end

function i3k_sbean.pettrain_mineral_take_req:decode(is)
	is:popString()
	self.mineralId = is:popNumber()
	self.time = is:popNumber()
	self.mapId = is:popNumber()
	self.mineralPosition = is:popNumber()
	self.ignoreCondition = is:popNumber()
end

function i3k_sbean.pettrain_mineral_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mineralId)
	os:pushNumber(self.time)
	os:pushNumber(self.mapId)
	os:pushNumber(self.mineralPosition)
	os:pushNumber(self.ignoreCondition)
end


-- 五绝争霸信息同步
i3k_sbean.five_hegemony_sync_info_req = i3k_class("five_hegemony_sync_info_req")
function i3k_sbean.five_hegemony_sync_info_req:ctor()
	self._pname_ = "five_hegemony_sync_info_req"
end

function i3k_sbean.five_hegemony_sync_info_req:decode(is)
	is:popString()
end

function i3k_sbean.five_hegemony_sync_info_req:encode(os)
	os:pushString(self._pname_)
end


-- 选择npc
i3k_sbean.five_hegemony_choose_npc_req = i3k_class("five_hegemony_choose_npc_req")
function i3k_sbean.five_hegemony_choose_npc_req:ctor()
	self._pname_ = "five_hegemony_choose_npc_req"
	--self.npcID:		int32	
end

function i3k_sbean.five_hegemony_choose_npc_req:clone()
	return clone(self)
end

function i3k_sbean.five_hegemony_choose_npc_req:decode(is)
	is:popString()
	self.npcID = is:popNumber()
end

function i3k_sbean.five_hegemony_choose_npc_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcID)
end


-- 选择npc技能
i3k_sbean.five_hegemony_choose_skill_req = i3k_class("five_hegemony_choose_skill_req")
function i3k_sbean.five_hegemony_choose_skill_req:ctor()
	self._pname_ = "five_hegemony_choose_skill_req"
	--self.npcID:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.five_hegemony_choose_skill_req:clone()
	return clone(self)
end

function i3k_sbean.five_hegemony_choose_skill_req:decode(is)
	is:popString()
	self.npcID = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.five_hegemony_choose_skill_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcID)
	os:pushNumber(self.skillID)
end


-- 请求回合争斗结果
i3k_sbean.five_hegemony_round_result_req = i3k_class("five_hegemony_round_result_req")
function i3k_sbean.five_hegemony_round_result_req:ctor()
	self._pname_ = "five_hegemony_round_result_req"
	--self.round:		int32	
end

function i3k_sbean.five_hegemony_round_result_req:clone()
	return clone(self)
end

function i3k_sbean.five_hegemony_round_result_req:decode(is)
	is:popString()
	self.round = is:popNumber()
end

function i3k_sbean.five_hegemony_round_result_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.round)
end


-- 请求弹幕
i3k_sbean.sync_five_hegemony_barrages = i3k_class("sync_five_hegemony_barrages")
function i3k_sbean.sync_five_hegemony_barrages:ctor()
	self._pname_ = "sync_five_hegemony_barrages"
	--self.barrageID:		int32	
end

function i3k_sbean.sync_five_hegemony_barrages:clone()
	return clone(self)
end

function i3k_sbean.sync_five_hegemony_barrages:decode(is)
	is:popString()
	self.barrageID = is:popNumber()
end

function i3k_sbean.sync_five_hegemony_barrages:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.barrageID)
end


-- 发送弹幕
i3k_sbean.five_hegemony_send_barrage_req = i3k_class("five_hegemony_send_barrage_req")
function i3k_sbean.five_hegemony_send_barrage_req:ctor()
	self._pname_ = "five_hegemony_send_barrage_req"
	--self.npcID:		int32	
	--self.msg:		string	
end

function i3k_sbean.five_hegemony_send_barrage_req:clone()
	return clone(self)
end

function i3k_sbean.five_hegemony_send_barrage_req:decode(is)
	is:popString()
	self.npcID = is:popNumber()
	self.msg = is:popString()
end

function i3k_sbean.five_hegemony_send_barrage_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcID)
	os:pushString(self.msg)
end


-- 最近获得同步
i3k_sbean.item_history_sync_req = i3k_class("item_history_sync_req")
function i3k_sbean.item_history_sync_req:ctor()
	self._pname_ = "item_history_sync_req"
end

function i3k_sbean.item_history_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.item_history_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 会武周奖励同步
i3k_sbean.super_arena_week_reward_sync_req = i3k_class("super_arena_week_reward_sync_req")
function i3k_sbean.super_arena_week_reward_sync_req:ctor()
	self._pname_ = "super_arena_week_reward_sync_req"
end

function i3k_sbean.super_arena_week_reward_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.super_arena_week_reward_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 会武周奖励领取
i3k_sbean.super_arena_week_reward_take_req = i3k_class("super_arena_week_reward_take_req")
function i3k_sbean.super_arena_week_reward_take_req:ctor()
	self._pname_ = "super_arena_week_reward_take_req"
	--self.times:		set[int32]	
end

function i3k_sbean.super_arena_week_reward_take_req:clone()
	return clone(self)
end

function i3k_sbean.super_arena_week_reward_take_req:decode(is)
	is:popString()
	self.times = is:popNumberSet()
end

function i3k_sbean.super_arena_week_reward_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.times)
end


-- 同步今日兽灵地图组
i3k_sbean.day_hunter_map_group_sync_req = i3k_class("day_hunter_map_group_sync_req")
function i3k_sbean.day_hunter_map_group_sync_req:ctor()
	self._pname_ = "day_hunter_map_group_sync_req"
end

function i3k_sbean.day_hunter_map_group_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.day_hunter_map_group_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步帮派合照角色信息
i3k_sbean.sect_photo_roles_sync_req = i3k_class("sect_photo_roles_sync_req")
function i3k_sbean.sect_photo_roles_sync_req:ctor()
	self._pname_ = "sect_photo_roles_sync_req"
	--self.roles:		set[int32]	
end

function i3k_sbean.sect_photo_roles_sync_req:clone()
	return clone(self)
end

function i3k_sbean.sect_photo_roles_sync_req:decode(is)
	is:popString()
	self.roles = is:popNumberSet()
end

function i3k_sbean.sect_photo_roles_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.roles)
end


-- 邀请设置
i3k_sbean.invitation_relevant_settings_req = i3k_class("invitation_relevant_settings_req")
function i3k_sbean.invitation_relevant_settings_req:ctor()
	self._pname_ = "invitation_relevant_settings_req"
	--self.inviteType:		int32	
	--self.hide:		bool	
end

function i3k_sbean.invitation_relevant_settings_req:clone()
	return clone(self)
end

function i3k_sbean.invitation_relevant_settings_req:decode(is)
	is:popString()
	self.inviteType = is:popNumber()
	self.hide = is:popBool()
end

function i3k_sbean.invitation_relevant_settings_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.inviteType)
	os:pushBool(self.hide)
end


-- 日程记录同步
i3k_sbean.schdule_log_sync_req = i3k_class("schdule_log_sync_req")
function i3k_sbean.schdule_log_sync_req:ctor()
	self._pname_ = "schdule_log_sync_req"
end

function i3k_sbean.schdule_log_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.schdule_log_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- æå¸ç³è¯·
i3k_sbean.master_apply_req = i3k_class("master_apply_req")
function i3k_sbean.master_apply_req:ctor()
	self._pname_ = "master_apply_req"
	--self.targetRoleID:		int32	
end

function i3k_sbean.master_apply_req:clone()
	return clone(self)
end

function i3k_sbean.master_apply_req:decode(is)
	is:popString()
	self.targetRoleID = is:popNumber()
end

function i3k_sbean.master_apply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.targetRoleID)
end


-- å½é¢æ¶å¾ç³è¯·
i3k_sbean.master_offer_req = i3k_class("master_offer_req")
function i3k_sbean.master_offer_req:ctor()
	self._pname_ = "master_offer_req"
	--self.targetRoleID:		int32	
end

function i3k_sbean.master_offer_req:clone()
	return clone(self)
end

function i3k_sbean.master_offer_req:decode(is)
	is:popString()
	self.targetRoleID = is:popNumber()
end

function i3k_sbean.master_offer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.targetRoleID)
end


-- æ¥åå½é¢æ¶å¾ç³è¯·
i3k_sbean.master_accept_offer_req = i3k_class("master_accept_offer_req")
function i3k_sbean.master_accept_offer_req:ctor()
	self._pname_ = "master_accept_offer_req"
	--self.targetRoleID:		int32	
end

function i3k_sbean.master_accept_offer_req:clone()
	return clone(self)
end

function i3k_sbean.master_accept_offer_req:decode(is)
	is:popString()
	self.targetRoleID = is:popNumber()
end

function i3k_sbean.master_accept_offer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.targetRoleID)
end


-- æ¥åæå¸ç³è¯·
i3k_sbean.master_accept_apply_req = i3k_class("master_accept_apply_req")
function i3k_sbean.master_accept_apply_req:ctor()
	self._pname_ = "master_accept_apply_req"
	--self.targetRoleID:		int32	
	--self.accept:		bool	
end

function i3k_sbean.master_accept_apply_req:clone()
	return clone(self)
end

function i3k_sbean.master_accept_apply_req:decode(is)
	is:popString()
	self.targetRoleID = is:popNumber()
	self.accept = is:popBool()
end

function i3k_sbean.master_accept_apply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.targetRoleID)
	os:pushBool(self.accept)
end


-- åå¸
i3k_sbean.master_betray_req = i3k_class("master_betray_req")
function i3k_sbean.master_betray_req:ctor()
	self._pname_ = "master_betray_req"
end

function i3k_sbean.master_betray_req:decode(is)
	is:popString()
end

function i3k_sbean.master_betray_req:encode(os)
	os:pushString(self._pname_)
end


-- åºå¸
i3k_sbean.master_graduate_req = i3k_class("master_graduate_req")
function i3k_sbean.master_graduate_req:ctor()
	self._pname_ = "master_graduate_req"
end

function i3k_sbean.master_graduate_req:decode(is)
	is:popString()
end

function i3k_sbean.master_graduate_req:encode(os)
	os:pushString(self._pname_)
end


-- åæåºå¸ç³è¯·
i3k_sbean.master_agree_graduate_req = i3k_class("master_agree_graduate_req")
function i3k_sbean.master_agree_graduate_req:ctor()
	self._pname_ = "master_agree_graduate_req"
	--self.targetRoleID:		int32	
	--self.agree:		bool	
end

function i3k_sbean.master_agree_graduate_req:clone()
	return clone(self)
end

function i3k_sbean.master_agree_graduate_req:decode(is)
	is:popString()
	self.targetRoleID = is:popNumber()
	self.agree = is:popBool()
end

function i3k_sbean.master_agree_graduate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.targetRoleID)
	os:pushBool(self.agree)
end


-- å¼é¤
i3k_sbean.master_dismiss_req = i3k_class("master_dismiss_req")
function i3k_sbean.master_dismiss_req:ctor()
	self._pname_ = "master_dismiss_req"
	--self.targetRoleID:		int32	
end

function i3k_sbean.master_dismiss_req:clone()
	return clone(self)
end

function i3k_sbean.master_dismiss_req:decode(is)
	is:popString()
	self.targetRoleID = is:popNumber()
end

function i3k_sbean.master_dismiss_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.targetRoleID)
end


-- æ¥è¯¢èªå·±çæ¶å¾å®£è¨
i3k_sbean.master_get_announce_req = i3k_class("master_get_announce_req")
function i3k_sbean.master_get_announce_req:ctor()
	self._pname_ = "master_get_announce_req"
end

function i3k_sbean.master_get_announce_req:decode(is)
	is:popString()
end

function i3k_sbean.master_get_announce_req:encode(os)
	os:pushString(self._pname_)
end


-- è®¾ç½®èªå·±çæ¶å¾å®£è¨
i3k_sbean.master_set_announce_req = i3k_class("master_set_announce_req")
function i3k_sbean.master_set_announce_req:ctor()
	self._pname_ = "master_set_announce_req"
	--self.content:		string	
end

function i3k_sbean.master_set_announce_req:clone()
	return clone(self)
end

function i3k_sbean.master_set_announce_req:decode(is)
	is:popString()
	self.content = is:popString()
end

function i3k_sbean.master_set_announce_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.content)
end


-- å é¤èªå·±çæ¶å¾å®£è¨
i3k_sbean.master_del_announce_req = i3k_class("master_del_announce_req")
function i3k_sbean.master_del_announce_req:ctor()
	self._pname_ = "master_del_announce_req"
end

function i3k_sbean.master_del_announce_req:decode(is)
	is:popString()
end

function i3k_sbean.master_del_announce_req:encode(os)
	os:pushString(self._pname_)
end


-- è¯·æ±åºæ¬ä¿¡æ¯
i3k_sbean.master_info_req = i3k_class("master_info_req")
function i3k_sbean.master_info_req:ctor()
	self._pname_ = "master_info_req"
end

function i3k_sbean.master_info_req:decode(is)
	is:popString()
end

function i3k_sbean.master_info_req:encode(os)
	os:pushString(self._pname_)
end


-- æ¥çä¸ªäººæ¶æ¯
i3k_sbean.master_msg_list_req = i3k_class("master_msg_list_req")
function i3k_sbean.master_msg_list_req:ctor()
	self._pname_ = "master_msg_list_req"
end

function i3k_sbean.master_msg_list_req:decode(is)
	is:popString()
end

function i3k_sbean.master_msg_list_req:encode(os)
	os:pushString(self._pname_)
end


-- å é¤åå¸æ¶æ¯
i3k_sbean.master_remove_betray_msg_req = i3k_class("master_remove_betray_msg_req")
function i3k_sbean.master_remove_betray_msg_req:ctor()
	self._pname_ = "master_remove_betray_msg_req"
	--self.roleID:		int32	
end

function i3k_sbean.master_remove_betray_msg_req:clone()
	return clone(self)
end

function i3k_sbean.master_remove_betray_msg_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.master_remove_betray_msg_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- è¯·æ±å¸ç¶åè¡¨
i3k_sbean.master_list_req = i3k_class("master_list_req")
function i3k_sbean.master_list_req:ctor()
	self._pname_ = "master_list_req"
	--self.lastStartIndex:		int32	
end

function i3k_sbean.master_list_req:clone()
	return clone(self)
end

function i3k_sbean.master_list_req:decode(is)
	is:popString()
	self.lastStartIndex = is:popNumber()
end

function i3k_sbean.master_list_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.lastStartIndex)
end


-- æ¥çæ´»è·
i3k_sbean.master_list_apprentice_req = i3k_class("master_list_apprentice_req")
function i3k_sbean.master_list_apprentice_req:ctor()
	self._pname_ = "master_list_apprentice_req"
end

function i3k_sbean.master_list_apprentice_req:decode(is)
	is:popString()
end

function i3k_sbean.master_list_apprentice_req:encode(os)
	os:pushString(self._pname_)
end


-- è¯·æ±ä»»å¡è¿åº¦
i3k_sbean.master_tasks_req = i3k_class("master_tasks_req")
function i3k_sbean.master_tasks_req:ctor()
	self._pname_ = "master_tasks_req"
end

function i3k_sbean.master_tasks_req:decode(is)
	is:popString()
end

function i3k_sbean.master_tasks_req:encode(os)
	os:pushString(self._pname_)
end


-- å¸å¾åååæ­¥åè®®
i3k_sbean.master_shopsync_req = i3k_class("master_shopsync_req")
function i3k_sbean.master_shopsync_req:ctor()
	self._pname_ = "master_shopsync_req"
end

function i3k_sbean.master_shopsync_req:decode(is)
	is:popString()
end

function i3k_sbean.master_shopsync_req:encode(os)
	os:pushString(self._pname_)
end


-- å¸å¾ååå·æ°åè®®
i3k_sbean.master_shoprefresh_req = i3k_class("master_shoprefresh_req")
function i3k_sbean.master_shoprefresh_req:ctor()
	self._pname_ = "master_shoprefresh_req"
	--self.times:		int32	
	--self.isSecondType:		int32	
end

function i3k_sbean.master_shoprefresh_req:clone()
	return clone(self)
end

function i3k_sbean.master_shoprefresh_req:decode(is)
	is:popString()
	self.times = is:popNumber()
	self.isSecondType = is:popNumber()
end

function i3k_sbean.master_shoprefresh_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
	os:pushNumber(self.isSecondType)
end


-- å¸å¾ååä¹°åååè®®
i3k_sbean.master_shopbuy_req = i3k_class("master_shopbuy_req")
function i3k_sbean.master_shopbuy_req:ctor()
	self._pname_ = "master_shopbuy_req"
	--self.seq:		int32	
	--self.discount:		int32	
end

function i3k_sbean.master_shopbuy_req:clone()
	return clone(self)
end

function i3k_sbean.master_shopbuy_req:decode(is)
	is:popString()
	self.seq = is:popNumber()
	self.discount = is:popNumber()
end

function i3k_sbean.master_shopbuy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.seq)
	os:pushNumber(self.discount)
end


-- æ¡æè¯ä¿®æ¹å®£è¨
i3k_sbean.master_card_change_declaration_req = i3k_class("master_card_change_declaration_req")
function i3k_sbean.master_card_change_declaration_req:ctor()
	self._pname_ = "master_card_change_declaration_req"
	--self.declaration:		string	
end

function i3k_sbean.master_card_change_declaration_req:clone()
	return clone(self)
end

function i3k_sbean.master_card_change_declaration_req:decode(is)
	is:popString()
	self.declaration = is:popString()
end

function i3k_sbean.master_card_change_declaration_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.declaration)
end


-- æ¡æè¯ç¹èµ
i3k_sbean.master_card_sign_req = i3k_class("master_card_sign_req")
function i3k_sbean.master_card_sign_req:ctor()
	self._pname_ = "master_card_sign_req"
	--self.masterId:		int32	
end

function i3k_sbean.master_card_sign_req:clone()
	return clone(self)
end

function i3k_sbean.master_card_sign_req:decode(is)
	is:popString()
	self.masterId = is:popNumber()
end

function i3k_sbean.master_card_sign_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.masterId)
end


-- æ¡æè¯åæ­¥
i3k_sbean.master_card_sync_req = i3k_class("master_card_sync_req")
function i3k_sbean.master_card_sync_req:ctor()
	self._pname_ = "master_card_sync_req"
	--self.masterId:		int32	
end

function i3k_sbean.master_card_sync_req:clone()
	return clone(self)
end

function i3k_sbean.master_card_sync_req:decode(is)
	is:popString()
	self.masterId = is:popNumber()
end

function i3k_sbean.master_card_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.masterId)
end


-- 打开心情日记主页(type=1自己 type=2他人)
i3k_sbean.mood_diary_open_main_page_req = i3k_class("mood_diary_open_main_page_req")
function i3k_sbean.mood_diary_open_main_page_req:ctor()
	self._pname_ = "mood_diary_open_main_page_req"
	--self.type:		int32	
	--self.rid:		int32	
end

function i3k_sbean.mood_diary_open_main_page_req:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_open_main_page_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.rid = is:popNumber()
end

function i3k_sbean.mood_diary_open_main_page_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.rid)
end


-- 请求心情日记内容
i3k_sbean.mood_diary_get_diaries_req = i3k_class("mood_diary_get_diaries_req")
function i3k_sbean.mood_diary_get_diaries_req:ctor()
	self._pname_ = "mood_diary_get_diaries_req"
	--self.type:		int32	
	--self.rid:		int32	
	--self.startNum:		int32	
end

function i3k_sbean.mood_diary_get_diaries_req:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_get_diaries_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.rid = is:popNumber()
	self.startNum = is:popNumber()
end

function i3k_sbean.mood_diary_get_diaries_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.rid)
	os:pushNumber(self.startNum)
end


-- 删除日记
i3k_sbean.mood_diary_delete_req = i3k_class("mood_diary_delete_req")
function i3k_sbean.mood_diary_delete_req:ctor()
	self._pname_ = "mood_diary_delete_req"
	--self.time:		int32	
end

function i3k_sbean.mood_diary_delete_req:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_delete_req:decode(is)
	is:popString()
	self.time = is:popNumber()
end

function i3k_sbean.mood_diary_delete_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.time)
end


-- 赠送人气值道具
i3k_sbean.mood_diary_send_popularity_item_req = i3k_class("mood_diary_send_popularity_item_req")
function i3k_sbean.mood_diary_send_popularity_item_req:ctor()
	self._pname_ = "mood_diary_send_popularity_item_req"
	--self.rid:		int32	
	--self.itemID:		int32	
	--self.itemCnt:		int32	
end

function i3k_sbean.mood_diary_send_popularity_item_req:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_send_popularity_item_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
	self.itemID = is:popNumber()
	self.itemCnt = is:popNumber()
end

function i3k_sbean.mood_diary_send_popularity_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
	os:pushNumber(self.itemID)
	os:pushNumber(self.itemCnt)
end


-- 改变装饰
i3k_sbean.mood_diary_change_decorate_req = i3k_class("mood_diary_change_decorate_req")
function i3k_sbean.mood_diary_change_decorate_req:ctor()
	self._pname_ = "mood_diary_change_decorate_req"
	--self.decorateID:		int32	
end

function i3k_sbean.mood_diary_change_decorate_req:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_change_decorate_req:decode(is)
	is:popString()
	self.decorateID = is:popNumber()
end

function i3k_sbean.mood_diary_change_decorate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.decorateID)
end


-- 激活装饰
i3k_sbean.mood_diary_activite_decorate_req = i3k_class("mood_diary_activite_decorate_req")
function i3k_sbean.mood_diary_activite_decorate_req:ctor()
	self._pname_ = "mood_diary_activite_decorate_req"
	--self.decorateID:		int32	
end

function i3k_sbean.mood_diary_activite_decorate_req:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_activite_decorate_req:decode(is)
	is:popString()
	self.decorateID = is:popNumber()
end

function i3k_sbean.mood_diary_activite_decorate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.decorateID)
end


-- 聊天分享type=1分享本服 type=2分享全服
i3k_sbean.mood_diary_share_req = i3k_class("mood_diary_share_req")
function i3k_sbean.mood_diary_share_req:ctor()
	self._pname_ = "mood_diary_share_req"
	--self.shareType:		int32	
	--self.serverName:		string	
end

function i3k_sbean.mood_diary_share_req:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_share_req:decode(is)
	is:popString()
	self.shareType = is:popNumber()
	self.serverName = is:popString()
end

function i3k_sbean.mood_diary_share_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.shareType)
	os:pushString(self.serverName)
end


-- 写日记
i3k_sbean.mood_diary_wirte_diary_req = i3k_class("mood_diary_wirte_diary_req")
function i3k_sbean.mood_diary_wirte_diary_req:ctor()
	self._pname_ = "mood_diary_wirte_diary_req"
	--self.msg:		string	
end

function i3k_sbean.mood_diary_wirte_diary_req:clone()
	return clone(self)
end

function i3k_sbean.mood_diary_wirte_diary_req:decode(is)
	is:popString()
	self.msg = is:popString()
end

function i3k_sbean.mood_diary_wirte_diary_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.msg)
end


-- 获取自己人气值
i3k_sbean.mood_diary_get_self_popularity_req = i3k_class("mood_diary_get_self_popularity_req")
function i3k_sbean.mood_diary_get_self_popularity_req:ctor()
	self._pname_ = "mood_diary_get_self_popularity_req"
end

function i3k_sbean.mood_diary_get_self_popularity_req:decode(is)
	is:popString()
end

function i3k_sbean.mood_diary_get_self_popularity_req:encode(os)
	os:pushString(self._pname_)
end


-- 星座设置
i3k_sbean.personal_info_constellation_req = i3k_class("personal_info_constellation_req")
function i3k_sbean.personal_info_constellation_req:ctor()
	self._pname_ = "personal_info_constellation_req"
	--self.constellation:		int8	
end

function i3k_sbean.personal_info_constellation_req:clone()
	return clone(self)
end

function i3k_sbean.personal_info_constellation_req:decode(is)
	is:popString()
	self.constellation = is:popNumber()
end

function i3k_sbean.personal_info_constellation_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.constellation)
end


-- 性别设置
i3k_sbean.personal_info_gender_req = i3k_class("personal_info_gender_req")
function i3k_sbean.personal_info_gender_req:ctor()
	self._pname_ = "personal_info_gender_req"
	--self.gender:		int8	
end

function i3k_sbean.personal_info_gender_req:clone()
	return clone(self)
end

function i3k_sbean.personal_info_gender_req:decode(is)
	is:popString()
	self.gender = is:popNumber()
end

function i3k_sbean.personal_info_gender_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.gender)
end


-- 爱好设置, diyHobbies自定义爱好
i3k_sbean.personal_info_hobbies_req = i3k_class("personal_info_hobbies_req")
function i3k_sbean.personal_info_hobbies_req:ctor()
	self._pname_ = "personal_info_hobbies_req"
	--self.hobbies:		set[int32]	
	--self.diyHobbies:		vector[string]	
end

function i3k_sbean.personal_info_hobbies_req:clone()
	return clone(self)
end

function i3k_sbean.personal_info_hobbies_req:decode(is)
	is:popString()
	self.hobbies = is:popNumberSet()
	self.diyHobbies = is:popStringList()
end

function i3k_sbean.personal_info_hobbies_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.hobbies)
	os:pushStringList(self.diyHobbies)
end


-- 星愿测试
i3k_sbean.personal_info_answer_req = i3k_class("personal_info_answer_req")
function i3k_sbean.personal_info_answer_req:ctor()
	self._pname_ = "personal_info_answer_req"
	--self.groupID:		int32	
	--self.anwsers:		vector[int32]	
end

function i3k_sbean.personal_info_answer_req:clone()
	return clone(self)
end

function i3k_sbean.personal_info_answer_req:decode(is)
	is:popString()
	self.groupID = is:popNumber()
	self.anwsers = is:popNumberList()
end

function i3k_sbean.personal_info_answer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.groupID)
	os:pushNumberList(self.anwsers)
end


-- 分享星愿测试
i3k_sbean.personal_info_share_req = i3k_class("personal_info_share_req")
function i3k_sbean.personal_info_share_req:ctor()
	self._pname_ = "personal_info_share_req"
	--self.type:		int32	
	--self.groupID:		int32	
	--self.serverName:		string	
end

function i3k_sbean.personal_info_share_req:clone()
	return clone(self)
end

function i3k_sbean.personal_info_share_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.groupID = is:popNumber()
	self.serverName = is:popString()
end

function i3k_sbean.personal_info_share_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.groupID)
	os:pushString(self.serverName)
end


-- 交友宣言设置
i3k_sbean.personal_info_signature_req = i3k_class("personal_info_signature_req")
function i3k_sbean.personal_info_signature_req:ctor()
	self._pname_ = "personal_info_signature_req"
	--self.signature:		string	
end

function i3k_sbean.personal_info_signature_req:clone()
	return clone(self)
end

function i3k_sbean.personal_info_signature_req:decode(is)
	is:popString()
	self.signature = is:popString()
end

function i3k_sbean.personal_info_signature_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.signature)
end


-- 跨服好友 同步信息
i3k_sbean.cross_friend_sync_req = i3k_class("cross_friend_sync_req")
function i3k_sbean.cross_friend_sync_req:ctor()
	self._pname_ = "cross_friend_sync_req"
end

function i3k_sbean.cross_friend_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.cross_friend_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 跨服好友 立即匹配
i3k_sbean.cross_friend_match_req = i3k_class("cross_friend_match_req")
function i3k_sbean.cross_friend_match_req:ctor()
	self._pname_ = "cross_friend_match_req"
end

function i3k_sbean.cross_friend_match_req:decode(is)
	is:popString()
end

function i3k_sbean.cross_friend_match_req:encode(os)
	os:pushString(self._pname_)
end


-- 跨服好友 换一批
i3k_sbean.cross_friend_refresh_req = i3k_class("cross_friend_refresh_req")
function i3k_sbean.cross_friend_refresh_req:ctor()
	self._pname_ = "cross_friend_refresh_req"
end

function i3k_sbean.cross_friend_refresh_req:decode(is)
	is:popString()
end

function i3k_sbean.cross_friend_refresh_req:encode(os)
	os:pushString(self._pname_)
end


-- 跨服好友 爱心(添加好友)
i3k_sbean.cross_friend_like_req = i3k_class("cross_friend_like_req")
function i3k_sbean.cross_friend_like_req:ctor()
	self._pname_ = "cross_friend_like_req"
	--self.roleID:		int32	
end

function i3k_sbean.cross_friend_like_req:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_like_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.cross_friend_like_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 跨服好友 裂心(忽略)
i3k_sbean.cross_friend_dislike_req = i3k_class("cross_friend_dislike_req")
function i3k_sbean.cross_friend_dislike_req:ctor()
	self._pname_ = "cross_friend_dislike_req"
	--self.roleID:		int32	
end

function i3k_sbean.cross_friend_dislike_req:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_dislike_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.cross_friend_dislike_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 跨服好友 好友申请 处理(accept 0拒绝 1接受)
i3k_sbean.cross_friend_reply_req = i3k_class("cross_friend_reply_req")
function i3k_sbean.cross_friend_reply_req:ctor()
	self._pname_ = "cross_friend_reply_req"
	--self.accept:		int32	
	--self.roleID:		int32	
end

function i3k_sbean.cross_friend_reply_req:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_reply_req:decode(is)
	is:popString()
	self.accept = is:popNumber()
	self.roleID = is:popNumber()
end

function i3k_sbean.cross_friend_reply_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.accept)
	os:pushNumber(self.roleID)
end


-- 跨服好友 删除好友
i3k_sbean.cross_friend_delete_req = i3k_class("cross_friend_delete_req")
function i3k_sbean.cross_friend_delete_req:ctor()
	self._pname_ = "cross_friend_delete_req"
	--self.roleID:		int32	
end

function i3k_sbean.cross_friend_delete_req:clone()
	return clone(self)
end

function i3k_sbean.cross_friend_delete_req:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.cross_friend_delete_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 附灵升阶
i3k_sbean.seal_given_spirit_uplvl_req = i3k_class("seal_given_spirit_uplvl_req")
function i3k_sbean.seal_given_spirit_uplvl_req:ctor()
	self._pname_ = "seal_given_spirit_uplvl_req"
	--self.nextLvl:		int32	
end

function i3k_sbean.seal_given_spirit_uplvl_req:clone()
	return clone(self)
end

function i3k_sbean.seal_given_spirit_uplvl_req:decode(is)
	is:popString()
	self.nextLvl = is:popNumber()
end

function i3k_sbean.seal_given_spirit_uplvl_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.nextLvl)
end


-- 附灵加点
i3k_sbean.seal_given_spirit_addpoint_req = i3k_class("seal_given_spirit_addpoint_req")
function i3k_sbean.seal_given_spirit_addpoint_req:ctor()
	self._pname_ = "seal_given_spirit_addpoint_req"
	--self.group:		int32	
	--self.value:		int32	
end

function i3k_sbean.seal_given_spirit_addpoint_req:clone()
	return clone(self)
end

function i3k_sbean.seal_given_spirit_addpoint_req:decode(is)
	is:popString()
	self.group = is:popNumber()
	self.value = is:popNumber()
end

function i3k_sbean.seal_given_spirit_addpoint_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.group)
	os:pushNumber(self.value)
end


-- 附灵五行相升升级
i3k_sbean.seal_given_spirit_upeachotheruplvl_req = i3k_class("seal_given_spirit_upeachotheruplvl_req")
function i3k_sbean.seal_given_spirit_upeachotheruplvl_req:ctor()
	self._pname_ = "seal_given_spirit_upeachotheruplvl_req"
	--self.group:		int32	
	--self.lvl:		int32	
end

function i3k_sbean.seal_given_spirit_upeachotheruplvl_req:clone()
	return clone(self)
end

function i3k_sbean.seal_given_spirit_upeachotheruplvl_req:decode(is)
	is:popString()
	self.group = is:popNumber()
	self.lvl = is:popNumber()
end

function i3k_sbean.seal_given_spirit_upeachotheruplvl_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.group)
	os:pushNumber(self.lvl)
end


-- 附灵重置加点
i3k_sbean.seal_given_spirit_resetPoint_req = i3k_class("seal_given_spirit_resetPoint_req")
function i3k_sbean.seal_given_spirit_resetPoint_req:ctor()
	self._pname_ = "seal_given_spirit_resetPoint_req"
end

function i3k_sbean.seal_given_spirit_resetPoint_req:decode(is)
	is:popString()
end

function i3k_sbean.seal_given_spirit_resetPoint_req:encode(os)
	os:pushString(self._pname_)
end


-- 购买附灵加点
i3k_sbean.seal_given_spirit_buy_point_req = i3k_class("seal_given_spirit_buy_point_req")
function i3k_sbean.seal_given_spirit_buy_point_req:ctor()
	self._pname_ = "seal_given_spirit_buy_point_req"
end

function i3k_sbean.seal_given_spirit_buy_point_req:decode(is)
	is:popString()
end

function i3k_sbean.seal_given_spirit_buy_point_req:encode(os)
	os:pushString(self._pname_)
end


-- 珍珑棋局任务接取
i3k_sbean.chess_game_receive_req = i3k_class("chess_game_receive_req")
function i3k_sbean.chess_game_receive_req:ctor()
	self._pname_ = "chess_game_receive_req"
	--self.taskID:		int32	
end

function i3k_sbean.chess_game_receive_req:clone()
	return clone(self)
end

function i3k_sbean.chess_game_receive_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.chess_game_receive_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 珍珑棋局任务取消
i3k_sbean.chess_game_cancel_req = i3k_class("chess_game_cancel_req")
function i3k_sbean.chess_game_cancel_req:ctor()
	self._pname_ = "chess_game_cancel_req"
	--self.taskID:		int32	
end

function i3k_sbean.chess_game_cancel_req:clone()
	return clone(self)
end

function i3k_sbean.chess_game_cancel_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.chess_game_cancel_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 珍珑棋局任务完成
i3k_sbean.chess_game_finish_req = i3k_class("chess_game_finish_req")
function i3k_sbean.chess_game_finish_req:ctor()
	self._pname_ = "chess_game_finish_req"
	--self.taskID:		int32	
end

function i3k_sbean.chess_game_finish_req:clone()
	return clone(self)
end

function i3k_sbean.chess_game_finish_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.chess_game_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 珍珑棋局解困
i3k_sbean.chess_game_uplooplvl_req = i3k_class("chess_game_uplooplvl_req")
function i3k_sbean.chess_game_uplooplvl_req:ctor()
	self._pname_ = "chess_game_uplooplvl_req"
	--self.costPer:		int32	
end

function i3k_sbean.chess_game_uplooplvl_req:clone()
	return clone(self)
end

function i3k_sbean.chess_game_uplooplvl_req:decode(is)
	is:popString()
	self.costPer = is:popNumber()
end

function i3k_sbean.chess_game_uplooplvl_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.costPer)
end


-- 珍珑棋局客户端通知服务器任务完成
i3k_sbean.chess_game_notice_task_finish = i3k_class("chess_game_notice_task_finish")
function i3k_sbean.chess_game_notice_task_finish:ctor()
	self._pname_ = "chess_game_notice_task_finish"
	--self.isExtraReward:		int32	
end

function i3k_sbean.chess_game_notice_task_finish:clone()
	return clone(self)
end

function i3k_sbean.chess_game_notice_task_finish:decode(is)
	is:popString()
	self.isExtraReward = is:popNumber()
end

function i3k_sbean.chess_game_notice_task_finish:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isExtraReward)
end


-- 珍珑棋局传送
i3k_sbean.chess_game_trans = i3k_class("chess_game_trans")
function i3k_sbean.chess_game_trans:ctor()
	self._pname_ = "chess_game_trans"
end

function i3k_sbean.chess_game_trans:decode(is)
	is:popString()
end

function i3k_sbean.chess_game_trans:encode(os)
	os:pushString(self._pname_)
end


-- 珍珑棋局获取排行榜列表
i3k_sbean.chess_game_rank_get_req = i3k_class("chess_game_rank_get_req")
function i3k_sbean.chess_game_rank_get_req:ctor()
	self._pname_ = "chess_game_rank_get_req"
end

function i3k_sbean.chess_game_rank_get_req:decode(is)
	is:popString()
end

function i3k_sbean.chess_game_rank_get_req:encode(os)
	os:pushString(self._pname_)
end


-- 心决解锁
i3k_sbean.soulspell_unlock_req = i3k_class("soulspell_unlock_req")
function i3k_sbean.soulspell_unlock_req:ctor()
	self._pname_ = "soulspell_unlock_req"
end

function i3k_sbean.soulspell_unlock_req:decode(is)
	is:popString()
end

function i3k_sbean.soulspell_unlock_req:encode(os)
	os:pushString(self._pname_)
end


-- 心决修心
i3k_sbean.soulspell_props_req = i3k_class("soulspell_props_req")
function i3k_sbean.soulspell_props_req:ctor()
	self._pname_ = "soulspell_props_req"
end

function i3k_sbean.soulspell_props_req:decode(is)
	is:popString()
end

function i3k_sbean.soulspell_props_req:encode(os)
	os:pushString(self._pname_)
end


-- 心决突破
i3k_sbean.soulspell_break_req = i3k_class("soulspell_break_req")
function i3k_sbean.soulspell_break_req:ctor()
	self._pname_ = "soulspell_break_req"
end

function i3k_sbean.soulspell_break_req:decode(is)
	is:popString()
end

function i3k_sbean.soulspell_break_req:encode(os)
	os:pushString(self._pname_)
end


-- 暗器激活
i3k_sbean.hideweapon_make_req = i3k_class("hideweapon_make_req")
function i3k_sbean.hideweapon_make_req:ctor()
	self._pname_ = "hideweapon_make_req"
	--self.wid:		int32	
end

function i3k_sbean.hideweapon_make_req:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_make_req:decode(is)
	is:popString()
	self.wid = is:popNumber()
end

function i3k_sbean.hideweapon_make_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
end


-- 更换暗器
i3k_sbean.hideweapon_change_req = i3k_class("hideweapon_change_req")
function i3k_sbean.hideweapon_change_req:ctor()
	self._pname_ = "hideweapon_change_req"
	--self.wid:		int32	
end

function i3k_sbean.hideweapon_change_req:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_change_req:decode(is)
	is:popString()
	self.wid = is:popNumber()
end

function i3k_sbean.hideweapon_change_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
end


-- 暗器升品
i3k_sbean.hideweapon_rankup_req = i3k_class("hideweapon_rankup_req")
function i3k_sbean.hideweapon_rankup_req:ctor()
	self._pname_ = "hideweapon_rankup_req"
	--self.wid:		int32	
	--self.items:		map[int32, int32]	
end

function i3k_sbean.hideweapon_rankup_req:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_rankup_req:decode(is)
	is:popString()
	self.wid = is:popNumber()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.hideweapon_rankup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
	os:pushNumberNumberMap(self.items)
end


-- 暗器升级
i3k_sbean.hideweapon_levelup_req = i3k_class("hideweapon_levelup_req")
function i3k_sbean.hideweapon_levelup_req:ctor()
	self._pname_ = "hideweapon_levelup_req"
	--self.wid:		int32	
	--self.items:		map[int32, int32]	
end

function i3k_sbean.hideweapon_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_levelup_req:decode(is)
	is:popString()
	self.wid = is:popNumber()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.hideweapon_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
	os:pushNumberNumberMap(self.items)
end


-- 暗器被动技能升级
i3k_sbean.hideweapon_pskill_levelup_req = i3k_class("hideweapon_pskill_levelup_req")
function i3k_sbean.hideweapon_pskill_levelup_req:ctor()
	self._pname_ = "hideweapon_pskill_levelup_req"
	--self.wid:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.hideweapon_pskill_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_pskill_levelup_req:decode(is)
	is:popString()
	self.wid = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.hideweapon_pskill_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
	os:pushNumber(self.skillID)
end


-- 暗器更换被动技能
i3k_sbean.hideweapon_pskill_select_req = i3k_class("hideweapon_pskill_select_req")
function i3k_sbean.hideweapon_pskill_select_req:ctor()
	self._pname_ = "hideweapon_pskill_select_req"
	--self.wid:		int32	
	--self.index:		int32	
	--self.skillID:		int32	
end

function i3k_sbean.hideweapon_pskill_select_req:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_pskill_select_req:decode(is)
	is:popString()
	self.wid = is:popNumber()
	self.index = is:popNumber()
	self.skillID = is:popNumber()
end

function i3k_sbean.hideweapon_pskill_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
	os:pushNumber(self.index)
	os:pushNumber(self.skillID)
end


-- 暗器主动技能升级
i3k_sbean.hideweapon_askill_levelup_req = i3k_class("hideweapon_askill_levelup_req")
function i3k_sbean.hideweapon_askill_levelup_req:ctor()
	self._pname_ = "hideweapon_askill_levelup_req"
	--self.wid:		int32	
end

function i3k_sbean.hideweapon_askill_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_askill_levelup_req:decode(is)
	is:popString()
	self.wid = is:popNumber()
end

function i3k_sbean.hideweapon_askill_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
end


-- 暗器皮肤解锁
i3k_sbean.hideweapon_skin_unLock_req = i3k_class("hideweapon_skin_unLock_req")
function i3k_sbean.hideweapon_skin_unLock_req:ctor()
	self._pname_ = "hideweapon_skin_unLock_req"
	--self.weaponID:		int32	
	--self.skinID:		int32	
end

function i3k_sbean.hideweapon_skin_unLock_req:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_skin_unLock_req:decode(is)
	is:popString()
	self.weaponID = is:popNumber()
	self.skinID = is:popNumber()
end

function i3k_sbean.hideweapon_skin_unLock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponID)
	os:pushNumber(self.skinID)
end


-- 暗器更换皮肤
i3k_sbean.hideweapon_change_skin_req = i3k_class("hideweapon_change_skin_req")
function i3k_sbean.hideweapon_change_skin_req:ctor()
	self._pname_ = "hideweapon_change_skin_req"
	--self.weaponID:		int32	
	--self.skinID:		int32	
end

function i3k_sbean.hideweapon_change_skin_req:clone()
	return clone(self)
end

function i3k_sbean.hideweapon_change_skin_req:decode(is)
	is:popString()
	self.weaponID = is:popNumber()
	self.skinID = is:popNumber()
end

function i3k_sbean.hideweapon_change_skin_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.weaponID)
	os:pushNumber(self.skinID)
end


-- 巨灵信息同步
i3k_sbean.gaintboss_sync_req = i3k_class("gaintboss_sync_req")
function i3k_sbean.gaintboss_sync_req:ctor()
	self._pname_ = "gaintboss_sync_req"
end

function i3k_sbean.gaintboss_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.gaintboss_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 参加巨灵攻城
i3k_sbean.gaintboss_join_req = i3k_class("gaintboss_join_req")
function i3k_sbean.gaintboss_join_req:ctor()
	self._pname_ = "gaintboss_join_req"
end

function i3k_sbean.gaintboss_join_req:decode(is)
	is:popString()
end

function i3k_sbean.gaintboss_join_req:encode(os)
	os:pushString(self._pname_)
end


-- 抽奖
i3k_sbean.gaintboss_reward_req = i3k_class("gaintboss_reward_req")
function i3k_sbean.gaintboss_reward_req:ctor()
	self._pname_ = "gaintboss_reward_req"
	--self.index:		int32	
	--self.bossID:		int32	
end

function i3k_sbean.gaintboss_reward_req:clone()
	return clone(self)
end

function i3k_sbean.gaintboss_reward_req:decode(is)
	is:popString()
	self.index = is:popNumber()
	self.bossID = is:popNumber()
end

function i3k_sbean.gaintboss_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
	os:pushNumber(self.bossID)
end


-- 神秘buff
i3k_sbean.gaintboss_takebuff_req = i3k_class("gaintboss_takebuff_req")
function i3k_sbean.gaintboss_takebuff_req:ctor()
	self._pname_ = "gaintboss_takebuff_req"
end

function i3k_sbean.gaintboss_takebuff_req:decode(is)
	is:popString()
end

function i3k_sbean.gaintboss_takebuff_req:encode(os)
	os:pushString(self._pname_)
end


-- 外传副本解锁外传
i3k_sbean.biography_unlock_req = i3k_class("biography_unlock_req")
function i3k_sbean.biography_unlock_req:ctor()
	self._pname_ = "biography_unlock_req"
	--self.biographyID:		int32	
end

function i3k_sbean.biography_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.biography_unlock_req:decode(is)
	is:popString()
	self.biographyID = is:popNumber()
end

function i3k_sbean.biography_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.biographyID)
end


-- 外传副本同步条件
i3k_sbean.biography_sync_conditions_req = i3k_class("biography_sync_conditions_req")
function i3k_sbean.biography_sync_conditions_req:ctor()
	self._pname_ = "biography_sync_conditions_req"
	--self.level:		int32	
end

function i3k_sbean.biography_sync_conditions_req:clone()
	return clone(self)
end

function i3k_sbean.biography_sync_conditions_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.biography_sync_conditions_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 外传副本开始副本
i3k_sbean.biography_start_mapcopy_req = i3k_class("biography_start_mapcopy_req")
function i3k_sbean.biography_start_mapcopy_req:ctor()
	self._pname_ = "biography_start_mapcopy_req"
	--self.mapID:		int32	
end

function i3k_sbean.biography_start_mapcopy_req:clone()
	return clone(self)
end

function i3k_sbean.biography_start_mapcopy_req:decode(is)
	is:popString()
	self.mapID = is:popNumber()
end

function i3k_sbean.biography_start_mapcopy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapID)
end


-- 外传副本接任务
i3k_sbean.biography_take_task_req = i3k_class("biography_take_task_req")
function i3k_sbean.biography_take_task_req:ctor()
	self._pname_ = "biography_take_task_req"
	--self.taskID:		int32	
end

function i3k_sbean.biography_take_task_req:clone()
	return clone(self)
end

function i3k_sbean.biography_take_task_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.biography_take_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 外传副本任务提交物品
i3k_sbean.biography_submit_item_req = i3k_class("biography_submit_item_req")
function i3k_sbean.biography_submit_item_req:ctor()
	self._pname_ = "biography_submit_item_req"
	--self.itemID:		int32	
	--self.itemCnt:		int32	
end

function i3k_sbean.biography_submit_item_req:clone()
	return clone(self)
end

function i3k_sbean.biography_submit_item_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
	self.itemCnt = is:popNumber()
end

function i3k_sbean.biography_submit_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
	os:pushNumber(self.itemCnt)
end


-- 外传副本完成任务
i3k_sbean.biography_finish_task_req = i3k_class("biography_finish_task_req")
function i3k_sbean.biography_finish_task_req:ctor()
	self._pname_ = "biography_finish_task_req"
	--self.taskID:		int32	
end

function i3k_sbean.biography_finish_task_req:clone()
	return clone(self)
end

function i3k_sbean.biography_finish_task_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.biography_finish_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 外传副本领取完成奖励
i3k_sbean.biography_take_reward_req = i3k_class("biography_take_reward_req")
function i3k_sbean.biography_take_reward_req:ctor()
	self._pname_ = "biography_take_reward_req"
	--self.bID:		int32	
end

function i3k_sbean.biography_take_reward_req:clone()
	return clone(self)
end

function i3k_sbean.biography_take_reward_req:decode(is)
	is:popString()
	self.bID = is:popNumber()
end

function i3k_sbean.biography_take_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bID)
end


-- 装备锤炼解锁属性
i3k_sbean.equip_smelting_unlock_req = i3k_class("equip_smelting_unlock_req")
function i3k_sbean.equip_smelting_unlock_req:ctor()
	self._pname_ = "equip_smelting_unlock_req"
	--self.eid:		int32	
	--self.guid:		string	
	--self.pos:		int32	
end

function i3k_sbean.equip_smelting_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.equip_smelting_unlock_req:decode(is)
	is:popString()
	self.eid = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_smelting_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eid)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
end


-- 装备锤炼百炼
i3k_sbean.equip_smelting_req = i3k_class("equip_smelting_req")
function i3k_sbean.equip_smelting_req:ctor()
	self._pname_ = "equip_smelting_req"
	--self.eid:		int32	
	--self.guid:		string	
	--self.pos:		int32	
	--self.lockProps:		vector[int32]	
end

function i3k_sbean.equip_smelting_req:clone()
	return clone(self)
end

function i3k_sbean.equip_smelting_req:decode(is)
	is:popString()
	self.eid = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
	self.lockProps = is:popNumberList()
end

function i3k_sbean.equip_smelting_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eid)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
	os:pushNumberList(self.lockProps)
end


-- 装备锤炼百炼保存
i3k_sbean.equip_smelting_save_req = i3k_class("equip_smelting_save_req")
function i3k_sbean.equip_smelting_save_req:ctor()
	self._pname_ = "equip_smelting_save_req"
	--self.eid:		int32	
	--self.guid:		string	
	--self.pos:		int32	
end

function i3k_sbean.equip_smelting_save_req:clone()
	return clone(self)
end

function i3k_sbean.equip_smelting_save_req:decode(is)
	is:popString()
	self.eid = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_smelting_save_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eid)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
end


-- 装备锤炼千锤
i3k_sbean.equip_hammer_req = i3k_class("equip_hammer_req")
function i3k_sbean.equip_hammer_req:ctor()
	self._pname_ = "equip_hammer_req"
	--self.eid:		int32	
	--self.guid:		string	
	--self.pos:		int32	
end

function i3k_sbean.equip_hammer_req:clone()
	return clone(self)
end

function i3k_sbean.equip_hammer_req:decode(is)
	is:popString()
	self.eid = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_hammer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eid)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
end


-- 装备锤炼千锤保存
i3k_sbean.equip_hammer_save_req = i3k_class("equip_hammer_save_req")
function i3k_sbean.equip_hammer_save_req:ctor()
	self._pname_ = "equip_hammer_save_req"
	--self.eid:		int32	
	--self.guid:		string	
	--self.pos:		int32	
end

function i3k_sbean.equip_hammer_save_req:clone()
	return clone(self)
end

function i3k_sbean.equip_hammer_save_req:decode(is)
	is:popString()
	self.eid = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.equip_hammer_save_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eid)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
end


-- 装备锤炼技能解锁
i3k_sbean.equip_hammer_skill_unlock_req = i3k_class("equip_hammer_skill_unlock_req")
function i3k_sbean.equip_hammer_skill_unlock_req:ctor()
	self._pname_ = "equip_hammer_skill_unlock_req"
	--self.eid:		int32	
	--self.guid:		string	
	--self.pos:		int32	
	--self.skillPos:		int32	
	--self.skillID:		int32	
	--self.lvl:		int32	
end

function i3k_sbean.equip_hammer_skill_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.equip_hammer_skill_unlock_req:decode(is)
	is:popString()
	self.eid = is:popNumber()
	self.guid = is:popString()
	self.pos = is:popNumber()
	self.skillPos = is:popNumber()
	self.skillID = is:popNumber()
	self.lvl = is:popNumber()
end

function i3k_sbean.equip_hammer_skill_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.eid)
	os:pushString(self.guid)
	os:pushNumber(self.pos)
	os:pushNumber(self.skillPos)
	os:pushNumber(self.skillID)
	os:pushNumber(self.lvl)
end


-- 打开活动界面
i3k_sbean.regular_task_open_req = i3k_class("regular_task_open_req")
function i3k_sbean.regular_task_open_req:ctor()
	self._pname_ = "regular_task_open_req"
end

function i3k_sbean.regular_task_open_req:decode(is)
	is:popString()
end

function i3k_sbean.regular_task_open_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取定期活动积分奖励
i3k_sbean.regular_task_score_reward_take_req = i3k_class("regular_task_score_reward_take_req")
function i3k_sbean.regular_task_score_reward_take_req:ctor()
	self._pname_ = "regular_task_score_reward_take_req"
	--self.id:		int32	
end

function i3k_sbean.regular_task_score_reward_take_req:clone()
	return clone(self)
end

function i3k_sbean.regular_task_score_reward_take_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.regular_task_score_reward_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 定期活动兑换
i3k_sbean.regular_task_exchange_req = i3k_class("regular_task_exchange_req")
function i3k_sbean.regular_task_exchange_req:ctor()
	self._pname_ = "regular_task_exchange_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.regular_task_exchange_req:clone()
	return clone(self)
end

function i3k_sbean.regular_task_exchange_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.regular_task_exchange_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 使用定期活动道具
i3k_sbean.bag_use_regular_item_req = i3k_class("bag_use_regular_item_req")
function i3k_sbean.bag_use_regular_item_req:ctor()
	self._pname_ = "bag_use_regular_item_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_use_regular_item_req:clone()
	return clone(self)
end

function i3k_sbean.bag_use_regular_item_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_use_regular_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 定期活动客户端通知服务器任务完成计数
i3k_sbean.regular_task_notice = i3k_class("regular_task_notice")
function i3k_sbean.regular_task_notice:ctor()
	self._pname_ = "regular_task_notice"
	--self.taskType:		int32	
	--self.cnt:		int32	
end

function i3k_sbean.regular_task_notice:clone()
	return clone(self)
end

function i3k_sbean.regular_task_notice:decode(is)
	is:popString()
	self.taskType = is:popNumber()
	self.cnt = is:popNumber()
end

function i3k_sbean.regular_task_notice:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskType)
	os:pushNumber(self.cnt)
end


-- 打开活动祈愿界面
i3k_sbean.regular_pray_open_req = i3k_class("regular_pray_open_req")
function i3k_sbean.regular_pray_open_req:ctor()
	self._pname_ = "regular_pray_open_req"
end

function i3k_sbean.regular_pray_open_req:decode(is)
	is:popString()
end

function i3k_sbean.regular_pray_open_req:encode(os)
	os:pushString(self._pname_)
end


-- 祈愿
i3k_sbean.regular_pray_req = i3k_class("regular_pray_req")
function i3k_sbean.regular_pray_req:ctor()
	self._pname_ = "regular_pray_req"
	--self.content:		string	
end

function i3k_sbean.regular_pray_req:clone()
	return clone(self)
end

function i3k_sbean.regular_pray_req:decode(is)
	is:popString()
	self.content = is:popString()
end

function i3k_sbean.regular_pray_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.content)
end


-- 祈愿领奖
i3k_sbean.regular_pray_take_reward_req = i3k_class("regular_pray_take_reward_req")
function i3k_sbean.regular_pray_take_reward_req:ctor()
	self._pname_ = "regular_pray_take_reward_req"
end

function i3k_sbean.regular_pray_take_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.regular_pray_take_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 宠物穿上装备
i3k_sbean.pet_domestication_equip_wear_req = i3k_class("pet_domestication_equip_wear_req")
function i3k_sbean.pet_domestication_equip_wear_req:ctor()
	self._pname_ = "pet_domestication_equip_wear_req"
	--self.petGroupID:		int32	
	--self.equips:		map[int32, int32]	
end

function i3k_sbean.pet_domestication_equip_wear_req:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_equip_wear_req:decode(is)
	is:popString()
	self.petGroupID = is:popNumber()
	self.equips = is:popNumberNumberMap()
end

function i3k_sbean.pet_domestication_equip_wear_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petGroupID)
	os:pushNumberNumberMap(self.equips)
end


-- 宠物脱下装备
i3k_sbean.pet_domestication_equip_unwear_req = i3k_class("pet_domestication_equip_unwear_req")
function i3k_sbean.pet_domestication_equip_unwear_req:ctor()
	self._pname_ = "pet_domestication_equip_unwear_req"
	--self.petGroupID:		int32	
	--self.partID:		int32	
end

function i3k_sbean.pet_domestication_equip_unwear_req:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_equip_unwear_req:decode(is)
	is:popString()
	self.petGroupID = is:popNumber()
	self.partID = is:popNumber()
end

function i3k_sbean.pet_domestication_equip_unwear_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petGroupID)
	os:pushNumber(self.partID)
end


-- 宠物装备部位升级
i3k_sbean.pet_domestication_part_lvlup_req = i3k_class("pet_domestication_part_lvlup_req")
function i3k_sbean.pet_domestication_part_lvlup_req:ctor()
	self._pname_ = "pet_domestication_part_lvlup_req"
	--self.petGroupID:		int32	
	--self.equipPart:		int32	
	--self.nextLvl:		int32	
end

function i3k_sbean.pet_domestication_part_lvlup_req:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_part_lvlup_req:decode(is)
	is:popString()
	self.petGroupID = is:popNumber()
	self.equipPart = is:popNumber()
	self.nextLvl = is:popNumber()
end

function i3k_sbean.pet_domestication_part_lvlup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petGroupID)
	os:pushNumber(self.equipPart)
	os:pushNumber(self.nextLvl)
end


-- 宠物驯养技能升级
i3k_sbean.pet_domestication_skill_lvlup_req = i3k_class("pet_domestication_skill_lvlup_req")
function i3k_sbean.pet_domestication_skill_lvlup_req:ctor()
	self._pname_ = "pet_domestication_skill_lvlup_req"
	--self.petID:		int32	
	--self.skillID:		int32	
	--self.nextLvl:		int32	
end

function i3k_sbean.pet_domestication_skill_lvlup_req:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_skill_lvlup_req:decode(is)
	is:popString()
	self.petID = is:popNumber()
	self.skillID = is:popNumber()
	self.nextLvl = is:popNumber()
end

function i3k_sbean.pet_domestication_skill_lvlup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petID)
	os:pushNumber(self.skillID)
	os:pushNumber(self.nextLvl)
end


-- 宠物装备分解
i3k_sbean.pet_domestication_equip_split_req = i3k_class("pet_domestication_equip_split_req")
function i3k_sbean.pet_domestication_equip_split_req:ctor()
	self._pname_ = "pet_domestication_equip_split_req"
	--self.equips:		map[int32, int32]	
end

function i3k_sbean.pet_domestication_equip_split_req:clone()
	return clone(self)
end

function i3k_sbean.pet_domestication_equip_split_req:decode(is)
	is:popString()
	self.equips = is:popNumberNumberMap()
end

function i3k_sbean.pet_domestication_equip_split_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.equips)
end


-- 打开页签同步信息
i3k_sbean.survive_sync_req = i3k_class("survive_sync_req")
function i3k_sbean.survive_sync_req:ctor()
	self._pname_ = "survive_sync_req"
end

function i3k_sbean.survive_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.survive_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 设置当前英雄
i3k_sbean.survive_sethero_req = i3k_class("survive_sethero_req")
function i3k_sbean.survive_sethero_req:ctor()
	self._pname_ = "survive_sethero_req"
	--self.hero:		int32	
end

function i3k_sbean.survive_sethero_req:clone()
	return clone(self)
end

function i3k_sbean.survive_sethero_req:decode(is)
	is:popString()
	self.hero = is:popNumber()
end

function i3k_sbean.survive_sethero_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hero)
end


-- 穿装备
i3k_sbean.survive_equip_upwear_req = i3k_class("survive_equip_upwear_req")
function i3k_sbean.survive_equip_upwear_req:ctor()
	self._pname_ = "survive_equip_upwear_req"
	--self.equips:		map[int32, int32]	
end

function i3k_sbean.survive_equip_upwear_req:clone()
	return clone(self)
end

function i3k_sbean.survive_equip_upwear_req:decode(is)
	is:popString()
	self.equips = is:popNumberNumberMap()
end

function i3k_sbean.survive_equip_upwear_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.equips)
end


-- 脱装备
i3k_sbean.survive_equip_downwear_req = i3k_class("survive_equip_downwear_req")
function i3k_sbean.survive_equip_downwear_req:ctor()
	self._pname_ = "survive_equip_downwear_req"
	--self.pos:		int32	
end

function i3k_sbean.survive_equip_downwear_req:clone()
	return clone(self)
end

function i3k_sbean.survive_equip_downwear_req:decode(is)
	is:popString()
	self.pos = is:popNumber()
end

function i3k_sbean.survive_equip_downwear_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pos)
end


-- 销毁道具请求
i3k_sbean.survive_destoryitems_req = i3k_class("survive_destoryitems_req")
function i3k_sbean.survive_destoryitems_req:ctor()
	self._pname_ = "survive_destoryitems_req"
	--self.items:		vector[DummyGoods]	
end

function i3k_sbean.survive_destoryitems_req:clone()
	return clone(self)
end

function i3k_sbean.survive_destoryitems_req:decode(is)
	is:popString()
	self.items = is:popList(i3k_sbean.DummyGoods)
end

function i3k_sbean.survive_destoryitems_req:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.items)
end


-- 使用药品
i3k_sbean.survive_usedrug_req = i3k_class("survive_usedrug_req")
function i3k_sbean.survive_usedrug_req:ctor()
	self._pname_ = "survive_usedrug_req"
	--self.itemID:		int32	
end

function i3k_sbean.survive_usedrug_req:clone()
	return clone(self)
end

function i3k_sbean.survive_usedrug_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
end

function i3k_sbean.survive_usedrug_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
end


-- 个人积分最终结果
i3k_sbean.survive_final_score_result_req = i3k_class("survive_final_score_result_req")
function i3k_sbean.survive_final_score_result_req:ctor()
	self._pname_ = "survive_final_score_result_req"
end

function i3k_sbean.survive_final_score_result_req:decode(is)
	is:popString()
end

function i3k_sbean.survive_final_score_result_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取宝箱
i3k_sbean.week_treasure_box_take_req = i3k_class("week_treasure_box_take_req")
function i3k_sbean.week_treasure_box_take_req:ctor()
	self._pname_ = "week_treasure_box_take_req"
	--self.taskID:		int32	
end

function i3k_sbean.week_treasure_box_take_req:clone()
	return clone(self)
end

function i3k_sbean.week_treasure_box_take_req:decode(is)
	is:popString()
	self.taskID = is:popNumber()
end

function i3k_sbean.week_treasure_box_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskID)
end


-- 开始创建结拜
i3k_sbean.create_sworn_start_req = i3k_class("create_sworn_start_req")
function i3k_sbean.create_sworn_start_req:ctor()
	self._pname_ = "create_sworn_start_req"
end

function i3k_sbean.create_sworn_start_req:decode(is)
	is:popString()
end

function i3k_sbean.create_sworn_start_req:encode(os)
	os:pushString(self._pname_)
end


-- 登记结拜生日
i3k_sbean.sworn_sign_birthday_req = i3k_class("sworn_sign_birthday_req")
function i3k_sbean.sworn_sign_birthday_req:ctor()
	self._pname_ = "sworn_sign_birthday_req"
	--self.isJoin:		int32	
	--self.birthday:		int32	
end

function i3k_sbean.sworn_sign_birthday_req:clone()
	return clone(self)
end

function i3k_sbean.sworn_sign_birthday_req:decode(is)
	is:popString()
	self.isJoin = is:popNumber()
	self.birthday = is:popNumber()
end

function i3k_sbean.sworn_sign_birthday_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isJoin)
	os:pushNumber(self.birthday)
end


-- 修改结拜生日
i3k_sbean.sworn_change_birthday_req = i3k_class("sworn_change_birthday_req")
function i3k_sbean.sworn_change_birthday_req:ctor()
	self._pname_ = "sworn_change_birthday_req"
	--self.birthday:		int32	
end

function i3k_sbean.sworn_change_birthday_req:clone()
	return clone(self)
end

function i3k_sbean.sworn_change_birthday_req:decode(is)
	is:popString()
	self.birthday = is:popNumber()
end

function i3k_sbean.sworn_change_birthday_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.birthday)
end


-- 结束创建结拜
i3k_sbean.create_sworn_end_req = i3k_class("create_sworn_end_req")
function i3k_sbean.create_sworn_end_req:ctor()
	self._pname_ = "create_sworn_end_req"
	--self.prefix:		string	
end

function i3k_sbean.create_sworn_end_req:clone()
	return clone(self)
end

function i3k_sbean.create_sworn_end_req:decode(is)
	is:popString()
	self.prefix = is:popString()
end

function i3k_sbean.create_sworn_end_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.prefix)
end


-- 结拜添加角色
i3k_sbean.sworn_add_role_req = i3k_class("sworn_add_role_req")
function i3k_sbean.sworn_add_role_req:ctor()
	self._pname_ = "sworn_add_role_req"
end

function i3k_sbean.sworn_add_role_req:decode(is)
	is:popString()
end

function i3k_sbean.sworn_add_role_req:encode(os)
	os:pushString(self._pname_)
end


-- 结拜踢出角色
i3k_sbean.sworn_kick_role_req = i3k_class("sworn_kick_role_req")
function i3k_sbean.sworn_kick_role_req:ctor()
	self._pname_ = "sworn_kick_role_req"
	--self.roleId:		int32	
	--self.reason:		int32	
end

function i3k_sbean.sworn_kick_role_req:clone()
	return clone(self)
end

function i3k_sbean.sworn_kick_role_req:decode(is)
	is:popString()
	self.roleId = is:popNumber()
	self.reason = is:popNumber()
end

function i3k_sbean.sworn_kick_role_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleId)
	os:pushNumber(self.reason)
end


-- 结拜同步
i3k_sbean.sworn_sync_req = i3k_class("sworn_sync_req")
function i3k_sbean.sworn_sync_req:ctor()
	self._pname_ = "sworn_sync_req"
end

function i3k_sbean.sworn_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.sworn_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 修改结拜前缀
i3k_sbean.sworn_change_prefix_req = i3k_class("sworn_change_prefix_req")
function i3k_sbean.sworn_change_prefix_req:ctor()
	self._pname_ = "sworn_change_prefix_req"
	--self.prefix:		string	
end

function i3k_sbean.sworn_change_prefix_req:clone()
	return clone(self)
end

function i3k_sbean.sworn_change_prefix_req:decode(is)
	is:popString()
	self.prefix = is:popString()
end

function i3k_sbean.sworn_change_prefix_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.prefix)
end


-- 修改结拜后缀
i3k_sbean.sworn_change_suffix_req = i3k_class("sworn_change_suffix_req")
function i3k_sbean.sworn_change_suffix_req:ctor()
	self._pname_ = "sworn_change_suffix_req"
	--self.suffix:		string	
end

function i3k_sbean.sworn_change_suffix_req:clone()
	return clone(self)
end

function i3k_sbean.sworn_change_suffix_req:decode(is)
	is:popString()
	self.suffix = is:popString()
end

function i3k_sbean.sworn_change_suffix_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.suffix)
end


-- 领取结拜活跃奖励
i3k_sbean.sworn_activity_reward_take_req = i3k_class("sworn_activity_reward_take_req")
function i3k_sbean.sworn_activity_reward_take_req:ctor()
	self._pname_ = "sworn_activity_reward_take_req"
	--self.activity:		int32	
end

function i3k_sbean.sworn_activity_reward_take_req:clone()
	return clone(self)
end

function i3k_sbean.sworn_activity_reward_take_req:decode(is)
	is:popString()
	self.activity = is:popNumber()
end

function i3k_sbean.sworn_activity_reward_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.activity)
end


-- 使用结拜金兰值道具
i3k_sbean.use_sworn_gift_item_req = i3k_class("use_sworn_gift_item_req")
function i3k_sbean.use_sworn_gift_item_req:ctor()
	self._pname_ = "use_sworn_gift_item_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.use_sworn_gift_item_req:clone()
	return clone(self)
end

function i3k_sbean.use_sworn_gift_item_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.use_sworn_gift_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 召唤结拜成员
i3k_sbean.one_key_summond_sworn_member = i3k_class("one_key_summond_sworn_member")
function i3k_sbean.one_key_summond_sworn_member:ctor()
	self._pname_ = "one_key_summond_sworn_member"
end

function i3k_sbean.one_key_summond_sworn_member:decode(is)
	is:popString()
end

function i3k_sbean.one_key_summond_sworn_member:encode(os)
	os:pushString(self._pname_)
end


-- 结拜助战奖励领取
i3k_sbean.sworn_help_map_reward_take_req = i3k_class("sworn_help_map_reward_take_req")
function i3k_sbean.sworn_help_map_reward_take_req:ctor()
	self._pname_ = "sworn_help_map_reward_take_req"
	--self.times:		int32	
end

function i3k_sbean.sworn_help_map_reward_take_req:clone()
	return clone(self)
end

function i3k_sbean.sworn_help_map_reward_take_req:decode(is)
	is:popString()
	self.times = is:popNumber()
end

function i3k_sbean.sworn_help_map_reward_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.times)
end


-- 退出结拜
i3k_sbean.sworn_leave_req = i3k_class("sworn_leave_req")
function i3k_sbean.sworn_leave_req:ctor()
	self._pname_ = "sworn_leave_req"
end

function i3k_sbean.sworn_leave_req:decode(is)
	is:popString()
end

function i3k_sbean.sworn_leave_req:encode(os)
	os:pushString(self._pname_)
end


-- 退出结拜操作通知
i3k_sbean.sworn_step_end = i3k_class("sworn_step_end")
function i3k_sbean.sworn_step_end:ctor()
	self._pname_ = "sworn_step_end"
	--self.errorCode:		int32	
end

function i3k_sbean.sworn_step_end:clone()
	return clone(self)
end

function i3k_sbean.sworn_step_end:decode(is)
	is:popString()
	self.errorCode = is:popNumber()
end

function i3k_sbean.sworn_step_end:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.errorCode)
end


-- 修改寄语
i3k_sbean.set_gift_string_req = i3k_class("set_gift_string_req")
function i3k_sbean.set_gift_string_req:ctor()
	self._pname_ = "set_gift_string_req"
	--self.giftString:		string	
end

function i3k_sbean.set_gift_string_req:clone()
	return clone(self)
end

function i3k_sbean.set_gift_string_req:decode(is)
	is:popString()
	self.giftString = is:popString()
end

function i3k_sbean.set_gift_string_req:encode(os)
	os:pushString(self._pname_)
	os:pushString(self.giftString)
end


-- 同步金兰证
i3k_sbean.sworn_card_sync_req = i3k_class("sworn_card_sync_req")
function i3k_sbean.sworn_card_sync_req:ctor()
	self._pname_ = "sworn_card_sync_req"
	--self.id:		int32	
end

function i3k_sbean.sworn_card_sync_req:clone()
	return clone(self)
end

function i3k_sbean.sworn_card_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sworn_card_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 点赞金兰证
i3k_sbean.sworn_card_sign_req = i3k_class("sworn_card_sign_req")
function i3k_sbean.sworn_card_sign_req:ctor()
	self._pname_ = "sworn_card_sign_req"
	--self.id:		int32	
end

function i3k_sbean.sworn_card_sign_req:clone()
	return clone(self)
end

function i3k_sbean.sworn_card_sign_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.sworn_card_sign_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 完成成就任务
i3k_sbean.finish_achievement_task_req = i3k_class("finish_achievement_task_req")
function i3k_sbean.finish_achievement_task_req:ctor()
	self._pname_ = "finish_achievement_task_req"
	--self.id:		int32	
end

function i3k_sbean.finish_achievement_task_req:clone()
	return clone(self)
end

function i3k_sbean.finish_achievement_task_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.finish_achievement_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取成就点奖励
i3k_sbean.take_achievement_point_reward_req = i3k_class("take_achievement_point_reward_req")
function i3k_sbean.take_achievement_point_reward_req:ctor()
	self._pname_ = "take_achievement_point_reward_req"
	--self.point:		int32	
end

function i3k_sbean.take_achievement_point_reward_req:clone()
	return clone(self)
end

function i3k_sbean.take_achievement_point_reward_req:decode(is)
	is:popString()
	self.point = is:popNumber()
end

function i3k_sbean.take_achievement_point_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.point)
end


-- 使用武诀经验道具
i3k_sbean.use_skill_formula_exp_item_req = i3k_class("use_skill_formula_exp_item_req")
function i3k_sbean.use_skill_formula_exp_item_req:ctor()
	self._pname_ = "use_skill_formula_exp_item_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.use_skill_formula_exp_item_req:clone()
	return clone(self)
end

function i3k_sbean.use_skill_formula_exp_item_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.use_skill_formula_exp_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 武诀升阶
i3k_sbean.skill_formula_up_rank_req = i3k_class("skill_formula_up_rank_req")
function i3k_sbean.skill_formula_up_rank_req:ctor()
	self._pname_ = "skill_formula_up_rank_req"
	--self.rank:		int32	
end

function i3k_sbean.skill_formula_up_rank_req:clone()
	return clone(self)
end

function i3k_sbean.skill_formula_up_rank_req:decode(is)
	is:popString()
	self.rank = is:popNumber()
end

function i3k_sbean.skill_formula_up_rank_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rank)
end


-- 武诀技能升级
i3k_sbean.skill_formula_skill_level_up_req = i3k_class("skill_formula_skill_level_up_req")
function i3k_sbean.skill_formula_skill_level_up_req:ctor()
	self._pname_ = "skill_formula_skill_level_up_req"
	--self.skillId:		int32	
	--self.level:		int32	
end

function i3k_sbean.skill_formula_skill_level_up_req:clone()
	return clone(self)
end

function i3k_sbean.skill_formula_skill_level_up_req:decode(is)
	is:popString()
	self.skillId = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.skill_formula_skill_level_up_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillId)
	os:pushNumber(self.level)
end


-- 武诀开启
i3k_sbean.skill_formula_open_req = i3k_class("skill_formula_open_req")
function i3k_sbean.skill_formula_open_req:ctor()
	self._pname_ = "skill_formula_open_req"
end

function i3k_sbean.skill_formula_open_req:decode(is)
	is:popString()
end

function i3k_sbean.skill_formula_open_req:encode(os)
	os:pushString(self._pname_)
end


-- 武诀信息同步
i3k_sbean.skill_formula_sync_req = i3k_class("skill_formula_sync_req")
function i3k_sbean.skill_formula_sync_req:ctor()
	self._pname_ = "skill_formula_sync_req"
	--self.rid:		int32	
end

function i3k_sbean.skill_formula_sync_req:clone()
	return clone(self)
end

function i3k_sbean.skill_formula_sync_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.skill_formula_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 武诀潜魂升级
i3k_sbean.skill_formula_hidden_soul_uplvl_req = i3k_class("skill_formula_hidden_soul_uplvl_req")
function i3k_sbean.skill_formula_hidden_soul_uplvl_req:ctor()
	self._pname_ = "skill_formula_hidden_soul_uplvl_req"
	--self.type:		int32	
end

function i3k_sbean.skill_formula_hidden_soul_uplvl_req:clone()
	return clone(self)
end

function i3k_sbean.skill_formula_hidden_soul_uplvl_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.skill_formula_hidden_soul_uplvl_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 激活幻形
i3k_sbean.transform_active_req = i3k_class("transform_active_req")
function i3k_sbean.transform_active_req:ctor()
	self._pname_ = "transform_active_req"
	--self.itemID:		int32	
end

function i3k_sbean.transform_active_req:clone()
	return clone(self)
end

function i3k_sbean.transform_active_req:decode(is)
	is:popString()
	self.itemID = is:popNumber()
end

function i3k_sbean.transform_active_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.itemID)
end


-- 设置当前幻形
i3k_sbean.transform_set_req = i3k_class("transform_set_req")
function i3k_sbean.transform_set_req:ctor()
	self._pname_ = "transform_set_req"
	--self.transformID:		int32	
end

function i3k_sbean.transform_set_req:clone()
	return clone(self)
end

function i3k_sbean.transform_set_req:decode(is)
	is:popString()
	self.transformID = is:popNumber()
end

function i3k_sbean.transform_set_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.transformID)
end


-- 使用当前幻形(use 1:使用  0:取消使用)
i3k_sbean.transform_use_req = i3k_class("transform_use_req")
function i3k_sbean.transform_use_req:ctor()
	self._pname_ = "transform_use_req"
	--self.use:		int32	
end

function i3k_sbean.transform_use_req:clone()
	return clone(self)
end

function i3k_sbean.transform_use_req:decode(is)
	is:popString()
	self.use = is:popNumber()
end

function i3k_sbean.transform_use_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.use)
end


-- 打开界面同步信息
i3k_sbean.maze_sync_req = i3k_class("maze_sync_req")
function i3k_sbean.maze_sync_req:ctor()
	self._pname_ = "maze_sync_req"
end

function i3k_sbean.maze_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.maze_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 参加天魔迷宫
i3k_sbean.maze_join_req = i3k_class("maze_join_req")
function i3k_sbean.maze_join_req:ctor()
	self._pname_ = "maze_join_req"
end

function i3k_sbean.maze_join_req:decode(is)
	is:popString()
end

function i3k_sbean.maze_join_req:encode(os)
	os:pushString(self._pname_)
end


-- 进入传送阵
i3k_sbean.maze_transfer_req = i3k_class("maze_transfer_req")
function i3k_sbean.maze_transfer_req:ctor()
	self._pname_ = "maze_transfer_req"
	--self.transferID:		int32	
end

function i3k_sbean.maze_transfer_req:clone()
	return clone(self)
end

function i3k_sbean.maze_transfer_req:decode(is)
	is:popString()
	self.transferID = is:popNumber()
end

function i3k_sbean.maze_transfer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.transferID)
end


-- 同步当前收益
i3k_sbean.maze_commongain_req = i3k_class("maze_commongain_req")
function i3k_sbean.maze_commongain_req:ctor()
	self._pname_ = "maze_commongain_req"
end

function i3k_sbean.maze_commongain_req:decode(is)
	is:popString()
end

function i3k_sbean.maze_commongain_req:encode(os)
	os:pushString(self._pname_)
end


-- 同步额外收益
i3k_sbean.maze_extragain_req = i3k_class("maze_extragain_req")
function i3k_sbean.maze_extragain_req:ctor()
	self._pname_ = "maze_extragain_req"
end

function i3k_sbean.maze_extragain_req:decode(is)
	is:popString()
end

function i3k_sbean.maze_extragain_req:encode(os)
	os:pushString(self._pname_)
end


-- 开始节日任务
i3k_sbean.festival_task_enter_req = i3k_class("festival_task_enter_req")
function i3k_sbean.festival_task_enter_req:ctor()
	self._pname_ = "festival_task_enter_req"
	--self.festivalId:		int32	
	--self.index:		int32	
end

function i3k_sbean.festival_task_enter_req:clone()
	return clone(self)
end

function i3k_sbean.festival_task_enter_req:decode(is)
	is:popString()
	self.festivalId = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.festival_task_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.festivalId)
	os:pushNumber(self.index)
end


-- 领取节日任务
i3k_sbean.festival_task_accept_req = i3k_class("festival_task_accept_req")
function i3k_sbean.festival_task_accept_req:ctor()
	self._pname_ = "festival_task_accept_req"
	--self.festivalId:		int32	
	--self.groupId:		int32	
	--self.taskId:		int32	
end

function i3k_sbean.festival_task_accept_req:clone()
	return clone(self)
end

function i3k_sbean.festival_task_accept_req:decode(is)
	is:popString()
	self.festivalId = is:popNumber()
	self.groupId = is:popNumber()
	self.taskId = is:popNumber()
end

function i3k_sbean.festival_task_accept_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.festivalId)
	os:pushNumber(self.groupId)
	os:pushNumber(self.taskId)
end


-- 完成节日任务
i3k_sbean.festival_task_finish_req = i3k_class("festival_task_finish_req")
function i3k_sbean.festival_task_finish_req:ctor()
	self._pname_ = "festival_task_finish_req"
	--self.festivalId:		int32	
	--self.groupId:		int32	
	--self.taskId:		int32	
end

function i3k_sbean.festival_task_finish_req:clone()
	return clone(self)
end

function i3k_sbean.festival_task_finish_req:decode(is)
	is:popString()
	self.festivalId = is:popNumber()
	self.groupId = is:popNumber()
	self.taskId = is:popNumber()
end

function i3k_sbean.festival_task_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.festivalId)
	os:pushNumber(self.groupId)
	os:pushNumber(self.taskId)
end


-- 记录任务访问点
i3k_sbean.task_log_point_req = i3k_class("task_log_point_req")
function i3k_sbean.task_log_point_req:ctor()
	self._pname_ = "task_log_point_req"
	--self.taskPointId:		int32	
	--self.index:		int32	
end

function i3k_sbean.task_log_point_req:clone()
	return clone(self)
end

function i3k_sbean.task_log_point_req:decode(is)
	is:popString()
	self.taskPointId = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.task_log_point_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskPointId)
	os:pushNumber(self.index)
end


-- 客户端计算任务请求
i3k_sbean.client_log_task_req = i3k_class("client_log_task_req")
function i3k_sbean.client_log_task_req:ctor()
	self._pname_ = "client_log_task_req"
	--self.taskType:		int32	
	--self.param1:		int32	
	--self.param2:		int32	
	--self.addValue:		int32	
end

function i3k_sbean.client_log_task_req:clone()
	return clone(self)
end

function i3k_sbean.client_log_task_req:decode(is)
	is:popString()
	self.taskType = is:popNumber()
	self.param1 = is:popNumber()
	self.param2 = is:popNumber()
	self.addValue = is:popNumber()
end

function i3k_sbean.client_log_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskType)
	os:pushNumber(self.param1)
	os:pushNumber(self.param2)
	os:pushNumber(self.addValue)
end


-- 穿骑战装备（部位--装备id）
i3k_sbean.dress_steed_equip_req = i3k_class("dress_steed_equip_req")
function i3k_sbean.dress_steed_equip_req:ctor()
	self._pname_ = "dress_steed_equip_req"
	--self.equips:		map[int32, int32]	
end

function i3k_sbean.dress_steed_equip_req:clone()
	return clone(self)
end

function i3k_sbean.dress_steed_equip_req:decode(is)
	is:popString()
	self.equips = is:popNumberNumberMap()
end

function i3k_sbean.dress_steed_equip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.equips)
end


-- 脱骑战装备（部位--装备id）
i3k_sbean.takeoff_steed_equip_req = i3k_class("takeoff_steed_equip_req")
function i3k_sbean.takeoff_steed_equip_req:ctor()
	self._pname_ = "takeoff_steed_equip_req"
	--self.parts:		set[int32]	
end

function i3k_sbean.takeoff_steed_equip_req:clone()
	return clone(self)
end

function i3k_sbean.takeoff_steed_equip_req:decode(is)
	is:popString()
	self.parts = is:popNumberSet()
end

function i3k_sbean.takeoff_steed_equip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.parts)
end


-- 激活骑战套装
i3k_sbean.unlock_steed_equip_suit_req = i3k_class("unlock_steed_equip_suit_req")
function i3k_sbean.unlock_steed_equip_suit_req:ctor()
	self._pname_ = "unlock_steed_equip_suit_req"
	--self.suitID:		int32	
end

function i3k_sbean.unlock_steed_equip_suit_req:clone()
	return clone(self)
end

function i3k_sbean.unlock_steed_equip_suit_req:decode(is)
	is:popString()
	self.suitID = is:popNumber()
end

function i3k_sbean.unlock_steed_equip_suit_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.suitID)
end


-- 制作骑战装备
i3k_sbean.steed_equip_create_req = i3k_class("steed_equip_create_req")
function i3k_sbean.steed_equip_create_req:ctor()
	self._pname_ = "steed_equip_create_req"
	--self.lvl:		int32	
	--self.rank:		int32	
	--self.part:		int32	
	--self.times:		int32	
end

function i3k_sbean.steed_equip_create_req:clone()
	return clone(self)
end

function i3k_sbean.steed_equip_create_req:decode(is)
	is:popString()
	self.lvl = is:popNumber()
	self.rank = is:popNumber()
	self.part = is:popNumber()
	self.times = is:popNumber()
end

function i3k_sbean.steed_equip_create_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.lvl)
	os:pushNumber(self.rank)
	os:pushNumber(self.part)
	os:pushNumber(self.times)
end


-- 熔炼骑战装备
i3k_sbean.steed_equip_destory_req = i3k_class("steed_equip_destory_req")
function i3k_sbean.steed_equip_destory_req:ctor()
	self._pname_ = "steed_equip_destory_req"
	--self.equips:		map[int32, int32]	
end

function i3k_sbean.steed_equip_destory_req:clone()
	return clone(self)
end

function i3k_sbean.steed_equip_destory_req:decode(is)
	is:popString()
	self.equips = is:popNumberNumberMap()
end

function i3k_sbean.steed_equip_destory_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.equips)
end


-- 灵签抽签
i3k_sbean.lingqian_get_req = i3k_class("lingqian_get_req")
function i3k_sbean.lingqian_get_req:ctor()
	self._pname_ = "lingqian_get_req"
	--self.id:		int32	
end

function i3k_sbean.lingqian_get_req:clone()
	return clone(self)
end

function i3k_sbean.lingqian_get_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.lingqian_get_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 打开界面同步消息
i3k_sbean.money_tree_open_req = i3k_class("money_tree_open_req")
function i3k_sbean.money_tree_open_req:ctor()
	self._pname_ = "money_tree_open_req"
	--self.moneyTreeId:		int32	
end

function i3k_sbean.money_tree_open_req:clone()
	return clone(self)
end

function i3k_sbean.money_tree_open_req:decode(is)
	is:popString()
	self.moneyTreeId = is:popNumber()
end

function i3k_sbean.money_tree_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.moneyTreeId)
end


-- 每日摇一摇
i3k_sbean.money_tree_shake_req = i3k_class("money_tree_shake_req")
function i3k_sbean.money_tree_shake_req:ctor()
	self._pname_ = "money_tree_shake_req"
	--self.moneyTreeId:		int32	
end

function i3k_sbean.money_tree_shake_req:clone()
	return clone(self)
end

function i3k_sbean.money_tree_shake_req:decode(is)
	is:popString()
	self.moneyTreeId = is:popNumber()
end

function i3k_sbean.money_tree_shake_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.moneyTreeId)
end


-- 领取累计奖励
i3k_sbean.money_tree_get_add_up_req = i3k_class("money_tree_get_add_up_req")
function i3k_sbean.money_tree_get_add_up_req:ctor()
	self._pname_ = "money_tree_get_add_up_req"
	--self.moneyTreeId:		int32	
	--self.addUpCnt:		int32	
end

function i3k_sbean.money_tree_get_add_up_req:clone()
	return clone(self)
end

function i3k_sbean.money_tree_get_add_up_req:decode(is)
	is:popString()
	self.moneyTreeId = is:popNumber()
	self.addUpCnt = is:popNumber()
end

function i3k_sbean.money_tree_get_add_up_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.moneyTreeId)
	os:pushNumber(self.addUpCnt)
end


-- 开启家园宠物位置
i3k_sbean.homeland_pet_position_open_req = i3k_class("homeland_pet_position_open_req")
function i3k_sbean.homeland_pet_position_open_req:ctor()
	self._pname_ = "homeland_pet_position_open_req"
	--self.id:		int32	
end

function i3k_sbean.homeland_pet_position_open_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_open_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.homeland_pet_position_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 设置家园宠物
i3k_sbean.homeland_pet_position_set_req = i3k_class("homeland_pet_position_set_req")
function i3k_sbean.homeland_pet_position_set_req:ctor()
	self._pname_ = "homeland_pet_position_set_req"
	--self.id:		int32	
	--self.petId:		int32	
end

function i3k_sbean.homeland_pet_position_set_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_set_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.petId = is:popNumber()
end

function i3k_sbean.homeland_pet_position_set_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.petId)
end


-- 家园宠物互动
i3k_sbean.homeland_pet_position_action_req = i3k_class("homeland_pet_position_action_req")
function i3k_sbean.homeland_pet_position_action_req:ctor()
	self._pname_ = "homeland_pet_position_action_req"
	--self.id:		int32	
	--self.actionId:		int32	
	--self.petId:		int32	
	--self.petName:		string	
end

function i3k_sbean.homeland_pet_position_action_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_action_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.actionId = is:popNumber()
	self.petId = is:popNumber()
	self.petName = is:popString()
end

function i3k_sbean.homeland_pet_position_action_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.actionId)
	os:pushNumber(self.petId)
	os:pushString(self.petName)
end


-- 家园宠物一键互动
i3k_sbean.homeland_pet_position_onekey_action_req = i3k_class("homeland_pet_position_onekey_action_req")
function i3k_sbean.homeland_pet_position_onekey_action_req:ctor()
	self._pname_ = "homeland_pet_position_onekey_action_req"
end

function i3k_sbean.homeland_pet_position_onekey_action_req:decode(is)
	is:popString()
end

function i3k_sbean.homeland_pet_position_onekey_action_req:encode(os)
	os:pushString(self._pname_)
end


-- 家园宠物领奖
i3k_sbean.homeland_pet_position_reward_req = i3k_class("homeland_pet_position_reward_req")
function i3k_sbean.homeland_pet_position_reward_req:ctor()
	self._pname_ = "homeland_pet_position_reward_req"
	--self.id:		int32	
	--self.petName:		string	
end

function i3k_sbean.homeland_pet_position_reward_req:clone()
	return clone(self)
end

function i3k_sbean.homeland_pet_position_reward_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.petName = is:popString()
end

function i3k_sbean.homeland_pet_position_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushString(self.petName)
end


-- 进入随时随地副本
i3k_sbean.anywhere_map_enter_req = i3k_class("anywhere_map_enter_req")
function i3k_sbean.anywhere_map_enter_req:ctor()
	self._pname_ = "anywhere_map_enter_req"
	--self.taskType:		int32	
	--self.groupId:		int32	
	--self.taskId:		int32	
end

function i3k_sbean.anywhere_map_enter_req:clone()
	return clone(self)
end

function i3k_sbean.anywhere_map_enter_req:decode(is)
	is:popString()
	self.taskType = is:popNumber()
	self.groupId = is:popNumber()
	self.taskId = is:popNumber()
end

function i3k_sbean.anywhere_map_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskType)
	os:pushNumber(self.groupId)
	os:pushNumber(self.taskId)
end


-- 传送至随时随地副本
i3k_sbean.anywhere_map_point_transfer_req = i3k_class("anywhere_map_point_transfer_req")
function i3k_sbean.anywhere_map_point_transfer_req:ctor()
	self._pname_ = "anywhere_map_point_transfer_req"
	--self.anywhereMapId:		int32	
end

function i3k_sbean.anywhere_map_point_transfer_req:clone()
	return clone(self)
end

function i3k_sbean.anywhere_map_point_transfer_req:decode(is)
	is:popString()
	self.anywhereMapId = is:popNumber()
end

function i3k_sbean.anywhere_map_point_transfer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.anywhereMapId)
end


-- 开启灵墟寻路
i3k_sbean.soaring_position_open_req = i3k_class("soaring_position_open_req")
function i3k_sbean.soaring_position_open_req:ctor()
	self._pname_ = "soaring_position_open_req"
	--self.id:		int32	
	--self.mapId:		int32	
end

function i3k_sbean.soaring_position_open_req:clone()
	return clone(self)
end

function i3k_sbean.soaring_position_open_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.mapId = is:popNumber()
end

function i3k_sbean.soaring_position_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.mapId)
end


-- 进入灵墟
i3k_sbean.soaring_map_enter_req = i3k_class("soaring_map_enter_req")
function i3k_sbean.soaring_map_enter_req:ctor()
	self._pname_ = "soaring_map_enter_req"
	--self.id:		int32	
	--self.mapId:		int32	
end

function i3k_sbean.soaring_map_enter_req:clone()
	return clone(self)
end

function i3k_sbean.soaring_map_enter_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.mapId = is:popNumber()
end

function i3k_sbean.soaring_map_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.mapId)
end


-- 开启飞升
i3k_sbean.soaring_task_open_req = i3k_class("soaring_task_open_req")
function i3k_sbean.soaring_task_open_req:ctor()
	self._pname_ = "soaring_task_open_req"
	--self.id:		int32	
end

function i3k_sbean.soaring_task_open_req:clone()
	return clone(self)
end

function i3k_sbean.soaring_task_open_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.soaring_task_open_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 完成飞升
i3k_sbean.soaring_task_finish_req = i3k_class("soaring_task_finish_req")
function i3k_sbean.soaring_task_finish_req:ctor()
	self._pname_ = "soaring_task_finish_req"
	--self.id:		int32	
end

function i3k_sbean.soaring_task_finish_req:clone()
	return clone(self)
end

function i3k_sbean.soaring_task_finish_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.soaring_task_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 解锁脚底特效
i3k_sbean.footeffect_unlock_req = i3k_class("footeffect_unlock_req")
function i3k_sbean.footeffect_unlock_req:ctor()
	self._pname_ = "footeffect_unlock_req"
	--self.id:		int32	
end

function i3k_sbean.footeffect_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.footeffect_unlock_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.footeffect_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 选择脚底特效
i3k_sbean.footeffect_select_req = i3k_class("footeffect_select_req")
function i3k_sbean.footeffect_select_req:ctor()
	self._pname_ = "footeffect_select_req"
	--self.id:		int32	
end

function i3k_sbean.footeffect_select_req:clone()
	return clone(self)
end

function i3k_sbean.footeffect_select_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.footeffect_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 脚底特效同步
i3k_sbean.footeffect_sync_req = i3k_class("footeffect_sync_req")
function i3k_sbean.footeffect_sync_req:ctor()
	self._pname_ = "footeffect_sync_req"
end

function i3k_sbean.footeffect_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.footeffect_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 选择外显
i3k_sbean.weapondisplay_select_req = i3k_class("weapondisplay_select_req")
function i3k_sbean.weapondisplay_select_req:ctor()
	self._pname_ = "weapondisplay_select_req"
	--self.partType:		int32	
	--self.type:		int32	
end

function i3k_sbean.weapondisplay_select_req:clone()
	return clone(self)
end

function i3k_sbean.weapondisplay_select_req:decode(is)
	is:popString()
	self.partType = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.weapondisplay_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.partType)
	os:pushNumber(self.type)
end


-- 接取飞升任务
i3k_sbean.soaring_day_task_take_req = i3k_class("soaring_day_task_take_req")
function i3k_sbean.soaring_day_task_take_req:ctor()
	self._pname_ = "soaring_day_task_take_req"
	--self.id:		int32	
end

function i3k_sbean.soaring_day_task_take_req:clone()
	return clone(self)
end

function i3k_sbean.soaring_day_task_take_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.soaring_day_task_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 完成飞升任务
i3k_sbean.soaring_day_task_finish_req = i3k_class("soaring_day_task_finish_req")
function i3k_sbean.soaring_day_task_finish_req:ctor()
	self._pname_ = "soaring_day_task_finish_req"
end

function i3k_sbean.soaring_day_task_finish_req:decode(is)
	is:popString()
end

function i3k_sbean.soaring_day_task_finish_req:encode(os)
	os:pushString(self._pname_)
end


-- 快速完成飞升任务
i3k_sbean.soaring_day_task_quick_finish_req = i3k_class("soaring_day_task_quick_finish_req")
function i3k_sbean.soaring_day_task_quick_finish_req:ctor()
	self._pname_ = "soaring_day_task_quick_finish_req"
end

function i3k_sbean.soaring_day_task_quick_finish_req:decode(is)
	is:popString()
end

function i3k_sbean.soaring_day_task_quick_finish_req:encode(os)
	os:pushString(self._pname_)
end


-- 使用提升飞升经验道具
i3k_sbean.soaring_use_exp_item_req = i3k_class("soaring_use_exp_item_req")
function i3k_sbean.soaring_use_exp_item_req:ctor()
	self._pname_ = "soaring_use_exp_item_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.soaring_use_exp_item_req:clone()
	return clone(self)
end

function i3k_sbean.soaring_use_exp_item_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.soaring_use_exp_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 守护灵兽激活
i3k_sbean.pet_guard_active_req = i3k_class("pet_guard_active_req")
function i3k_sbean.pet_guard_active_req:ctor()
	self._pname_ = "pet_guard_active_req"
	--self.petGuardId:		int32	
end

function i3k_sbean.pet_guard_active_req:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_active_req:decode(is)
	is:popString()
	self.petGuardId = is:popNumber()
end

function i3k_sbean.pet_guard_active_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petGuardId)
end


-- 守护灵兽升级
i3k_sbean.pet_guard_lvl_up_req = i3k_class("pet_guard_lvl_up_req")
function i3k_sbean.pet_guard_lvl_up_req:ctor()
	self._pname_ = "pet_guard_lvl_up_req"
	--self.petGuardId:		int32	
	--self.items:		map[int32, int32]	
end

function i3k_sbean.pet_guard_lvl_up_req:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_lvl_up_req:decode(is)
	is:popString()
	self.petGuardId = is:popNumber()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.pet_guard_lvl_up_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petGuardId)
	os:pushNumberNumberMap(self.items)
end


-- 守护灵兽解锁潜能
i3k_sbean.pet_guard_unlock_latent_req = i3k_class("pet_guard_unlock_latent_req")
function i3k_sbean.pet_guard_unlock_latent_req:ctor()
	self._pname_ = "pet_guard_unlock_latent_req"
	--self.petGuardId:		int32	
	--self.latentId:		int32	
	--self.itemCnt:		int32	
	--self.alternativeCount:		int32	
end

function i3k_sbean.pet_guard_unlock_latent_req:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_unlock_latent_req:decode(is)
	is:popString()
	self.petGuardId = is:popNumber()
	self.latentId = is:popNumber()
	self.itemCnt = is:popNumber()
	self.alternativeCount = is:popNumber()
end

function i3k_sbean.pet_guard_unlock_latent_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petGuardId)
	os:pushNumber(self.latentId)
	os:pushNumber(self.itemCnt)
	os:pushNumber(self.alternativeCount)
end


-- 守护灵兽出战
i3k_sbean.pet_guard_change_req = i3k_class("pet_guard_change_req")
function i3k_sbean.pet_guard_change_req:ctor()
	self._pname_ = "pet_guard_change_req"
	--self.petGuardId:		int32	
end

function i3k_sbean.pet_guard_change_req:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_change_req:decode(is)
	is:popString()
	self.petGuardId = is:popNumber()
end

function i3k_sbean.pet_guard_change_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.petGuardId)
end


-- 守护灵兽隐藏显示
i3k_sbean.pet_guard_show_req = i3k_class("pet_guard_show_req")
function i3k_sbean.pet_guard_show_req:ctor()
	self._pname_ = "pet_guard_show_req"
	--self.isShow:		int32	
end

function i3k_sbean.pet_guard_show_req:clone()
	return clone(self)
end

function i3k_sbean.pet_guard_show_req:decode(is)
	is:popString()
	self.isShow = is:popNumber()
end

function i3k_sbean.pet_guard_show_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.isShow)
end


-- 周年活动步骤一奖励
i3k_sbean.jubilee_activity_step1_reward_req = i3k_class("jubilee_activity_step1_reward_req")
function i3k_sbean.jubilee_activity_step1_reward_req:ctor()
	self._pname_ = "jubilee_activity_step1_reward_req"
end

function i3k_sbean.jubilee_activity_step1_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.jubilee_activity_step1_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 周年活动步骤二奖励
i3k_sbean.jubilee_activity_step2_reward_req = i3k_class("jubilee_activity_step2_reward_req")
function i3k_sbean.jubilee_activity_step2_reward_req:ctor()
	self._pname_ = "jubilee_activity_step2_reward_req"
	--self.type:		int32	
end

function i3k_sbean.jubilee_activity_step2_reward_req:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step2_reward_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.jubilee_activity_step2_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 周年活动步骤二任务组选择
i3k_sbean.jubilee_activity_step2_group_choose_req = i3k_class("jubilee_activity_step2_group_choose_req")
function i3k_sbean.jubilee_activity_step2_group_choose_req:ctor()
	self._pname_ = "jubilee_activity_step2_group_choose_req"
	--self.group:		int32	
end

function i3k_sbean.jubilee_activity_step2_group_choose_req:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step2_group_choose_req:decode(is)
	is:popString()
	self.group = is:popNumber()
end

function i3k_sbean.jubilee_activity_step2_group_choose_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.group)
end


-- 周年活动步骤二任务接取
i3k_sbean.jubilee_activity_step2_task_take_req = i3k_class("jubilee_activity_step2_task_take_req")
function i3k_sbean.jubilee_activity_step2_task_take_req:ctor()
	self._pname_ = "jubilee_activity_step2_task_take_req"
	--self.id:		int32	
end

function i3k_sbean.jubilee_activity_step2_task_take_req:clone()
	return clone(self)
end

function i3k_sbean.jubilee_activity_step2_task_take_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.jubilee_activity_step2_task_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 周年活动步骤二任务完成
i3k_sbean.jubilee_activity_step2_task_finish_req = i3k_class("jubilee_activity_step2_task_finish_req")
function i3k_sbean.jubilee_activity_step2_task_finish_req:ctor()
	self._pname_ = "jubilee_activity_step2_task_finish_req"
end

function i3k_sbean.jubilee_activity_step2_task_finish_req:decode(is)
	is:popString()
end

function i3k_sbean.jubilee_activity_step2_task_finish_req:encode(os)
	os:pushString(self._pname_)
end


-- 周年活动进度同步
i3k_sbean.jubilee_activity_process_sync_req = i3k_class("jubilee_activity_process_sync_req")
function i3k_sbean.jubilee_activity_process_sync_req:ctor()
	self._pname_ = "jubilee_activity_process_sync_req"
end

function i3k_sbean.jubilee_activity_process_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.jubilee_activity_process_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 周年活动步骤三矿物传送
i3k_sbean.jubilee_activity_step3_teleport_req = i3k_class("jubilee_activity_step3_teleport_req")
function i3k_sbean.jubilee_activity_step3_teleport_req:ctor()
	self._pname_ = "jubilee_activity_step3_teleport_req"
end

function i3k_sbean.jubilee_activity_step3_teleport_req:decode(is)
	is:popString()
end

function i3k_sbean.jubilee_activity_step3_teleport_req:encode(os)
	os:pushString(self._pname_)
end


-- 周年活动步骤三矿物采集
i3k_sbean.jubilee_activity_step3_take_req = i3k_class("jubilee_activity_step3_take_req")
function i3k_sbean.jubilee_activity_step3_take_req:ctor()
	self._pname_ = "jubilee_activity_step3_take_req"
end

function i3k_sbean.jubilee_activity_step3_take_req:decode(is)
	is:popString()
end

function i3k_sbean.jubilee_activity_step3_take_req:encode(os)
	os:pushString(self._pname_)
end


-- 公主出嫁报名
i3k_sbean.princess_marry_sign_req = i3k_class("princess_marry_sign_req")
function i3k_sbean.princess_marry_sign_req:ctor()
	self._pname_ = "princess_marry_sign_req"
end

function i3k_sbean.princess_marry_sign_req:decode(is)
	is:popString()
end

function i3k_sbean.princess_marry_sign_req:encode(os)
	os:pushString(self._pname_)
end


-- 公主出嫁取消报名
i3k_sbean.princess_marry_quit_req = i3k_class("princess_marry_quit_req")
function i3k_sbean.princess_marry_quit_req:ctor()
	self._pname_ = "princess_marry_quit_req"
end

function i3k_sbean.princess_marry_quit_req:decode(is)
	is:popString()
end

function i3k_sbean.princess_marry_quit_req:encode(os)
	os:pushString(self._pname_)
end


-- 回归玩家双倍掉落活动同步
i3k_sbean.back_role_double_drop_sync_req = i3k_class("back_role_double_drop_sync_req")
function i3k_sbean.back_role_double_drop_sync_req:ctor()
	self._pname_ = "back_role_double_drop_sync_req"
	--self.id:		int32	
end

function i3k_sbean.back_role_double_drop_sync_req:clone()
	return clone(self)
end

function i3k_sbean.back_role_double_drop_sync_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.back_role_double_drop_sync_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 神斗升级
i3k_sbean.god_star_levelup_req = i3k_class("god_star_levelup_req")
function i3k_sbean.god_star_levelup_req:ctor()
	self._pname_ = "god_star_levelup_req"
	--self.level:		int32	
end

function i3k_sbean.god_star_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.god_star_levelup_req:decode(is)
	is:popString()
	self.level = is:popNumber()
end

function i3k_sbean.god_star_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.level)
end


-- 神斗技能升级
i3k_sbean.god_star_skill_levelup_req = i3k_class("god_star_skill_levelup_req")
function i3k_sbean.god_star_skill_levelup_req:ctor()
	self._pname_ = "god_star_skill_levelup_req"
	--self.skillId:		int32	
	--self.level:		int32	
end

function i3k_sbean.god_star_skill_levelup_req:clone()
	return clone(self)
end

function i3k_sbean.god_star_skill_levelup_req:decode(is)
	is:popString()
	self.skillId = is:popNumber()
	self.level = is:popNumber()
end

function i3k_sbean.god_star_skill_levelup_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillId)
	os:pushNumber(self.level)
end


-- 方位强制重置
i3k_sbean.weaponsoul_partmustreset_req = i3k_class("weaponsoul_partmustreset_req")
function i3k_sbean.weaponsoul_partmustreset_req:ctor()
	self._pname_ = "weaponsoul_partmustreset_req"
	--self.partID:		int32	
	--self.target:		int32	
end

function i3k_sbean.weaponsoul_partmustreset_req:clone()
	return clone(self)
end

function i3k_sbean.weaponsoul_partmustreset_req:decode(is)
	is:popString()
	self.partID = is:popNumber()
	self.target = is:popNumber()
end

function i3k_sbean.weaponsoul_partmustreset_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.partID)
	os:pushNumber(self.target)
end


-- 神机藏海报名
i3k_sbean.hidden_sea_marry_sign_req = i3k_class("hidden_sea_marry_sign_req")
function i3k_sbean.hidden_sea_marry_sign_req:ctor()
	self._pname_ = "hidden_sea_marry_sign_req"
end

function i3k_sbean.hidden_sea_marry_sign_req:decode(is)
	is:popString()
end

function i3k_sbean.hidden_sea_marry_sign_req:encode(os)
	os:pushString(self._pname_)
end


-- 神机藏海取消报名
i3k_sbean.hidden_sea_quit_req = i3k_class("hidden_sea_quit_req")
function i3k_sbean.hidden_sea_quit_req:ctor()
	self._pname_ = "hidden_sea_quit_req"
end

function i3k_sbean.hidden_sea_quit_req:decode(is)
	is:popString()
end

function i3k_sbean.hidden_sea_quit_req:encode(os)
	os:pushString(self._pname_)
end


-- 神机藏海同步幸运团队
i3k_sbean.hidden_sea_lucky_team_req = i3k_class("hidden_sea_lucky_team_req")
function i3k_sbean.hidden_sea_lucky_team_req:ctor()
	self._pname_ = "hidden_sea_lucky_team_req"
end

function i3k_sbean.hidden_sea_lucky_team_req:decode(is)
	is:popString()
end

function i3k_sbean.hidden_sea_lucky_team_req:encode(os)
	os:pushString(self._pname_)
end


-- 使用卡牌道具
i3k_sbean.card_item_use_req = i3k_class("card_item_use_req")
function i3k_sbean.card_item_use_req:ctor()
	self._pname_ = "card_item_use_req"
	--self.id:		int32	
end

function i3k_sbean.card_item_use_req:clone()
	return clone(self)
end

function i3k_sbean.card_item_use_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.card_item_use_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 解锁卡背
i3k_sbean.card_back_unlock_req = i3k_class("card_back_unlock_req")
function i3k_sbean.card_back_unlock_req:ctor()
	self._pname_ = "card_back_unlock_req"
	--self.id:		int32	
end

function i3k_sbean.card_back_unlock_req:clone()
	return clone(self)
end

function i3k_sbean.card_back_unlock_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.card_back_unlock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 选择卡背
i3k_sbean.card_back_select_req = i3k_class("card_back_select_req")
function i3k_sbean.card_back_select_req:ctor()
	self._pname_ = "card_back_select_req"
	--self.id:		int32	
end

function i3k_sbean.card_back_select_req:clone()
	return clone(self)
end

function i3k_sbean.card_back_select_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.card_back_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 选择初始关卡
i3k_sbean.fiveelement_org_req = i3k_class("fiveelement_org_req")
function i3k_sbean.fiveelement_org_req:ctor()
	self._pname_ = "fiveelement_org_req"
	--self.index:		int8	
end

function i3k_sbean.fiveelement_org_req:clone()
	return clone(self)
end

function i3k_sbean.fiveelement_org_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.fiveelement_org_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 开始五行副本
i3k_sbean.fiveelement_start_req = i3k_class("fiveelement_start_req")
function i3k_sbean.fiveelement_start_req:ctor()
	self._pname_ = "fiveelement_start_req"
	--self.pets:		set[int32]	
end

function i3k_sbean.fiveelement_start_req:clone()
	return clone(self)
end

function i3k_sbean.fiveelement_start_req:decode(is)
	is:popString()
	self.pets = is:popNumberSet()
end

function i3k_sbean.fiveelement_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.pets)
end


-- 江湖侠探开启活动
i3k_sbean.spy_open_req = i3k_class("spy_open_req")
function i3k_sbean.spy_open_req:ctor()
	self._pname_ = "spy_open_req"
end

function i3k_sbean.spy_open_req:decode(is)
	is:popString()
end

function i3k_sbean.spy_open_req:encode(os)
	os:pushString(self._pname_)
end


-- 江湖侠探调查
i3k_sbean.spy_survey_req = i3k_class("spy_survey_req")
function i3k_sbean.spy_survey_req:ctor()
	self._pname_ = "spy_survey_req"
	--self.memberId:		int32	
end

function i3k_sbean.spy_survey_req:clone()
	return clone(self)
end

function i3k_sbean.spy_survey_req:decode(is)
	is:popString()
	self.memberId = is:popNumber()
end

function i3k_sbean.spy_survey_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.memberId)
end


-- 江湖侠探追击
i3k_sbean.spy_chasing_req = i3k_class("spy_chasing_req")
function i3k_sbean.spy_chasing_req:ctor()
	self._pname_ = "spy_chasing_req"
	--self.memberId:		int32	
end

function i3k_sbean.spy_chasing_req:clone()
	return clone(self)
end

function i3k_sbean.spy_chasing_req:decode(is)
	is:popString()
	self.memberId = is:popNumber()
end

function i3k_sbean.spy_chasing_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.memberId)
end


-- 江湖侠探揭露BOSS
i3k_sbean.spy_finding_boss_req = i3k_class("spy_finding_boss_req")
function i3k_sbean.spy_finding_boss_req:ctor()
	self._pname_ = "spy_finding_boss_req"
end

function i3k_sbean.spy_finding_boss_req:decode(is)
	is:popString()
end

function i3k_sbean.spy_finding_boss_req:encode(os)
	os:pushString(self._pname_)
end


-- 江湖侠探追击boss
i3k_sbean.spy_chasing_boss_req = i3k_class("spy_chasing_boss_req")
function i3k_sbean.spy_chasing_boss_req:ctor()
	self._pname_ = "spy_chasing_boss_req"
	--self.bossID:		int32	
end

function i3k_sbean.spy_chasing_boss_req:clone()
	return clone(self)
end

function i3k_sbean.spy_chasing_boss_req:decode(is)
	is:popString()
	self.bossID = is:popNumber()
end

function i3k_sbean.spy_chasing_boss_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
end


-- 打开界面
i3k_sbean.friend_circle_open_req = i3k_class("friend_circle_open_req")
function i3k_sbean.friend_circle_open_req:ctor()
	self._pname_ = "friend_circle_open_req"
end

function i3k_sbean.friend_circle_open_req:decode(is)
	is:popString()
end

function i3k_sbean.friend_circle_open_req:encode(os)
	os:pushString(self._pname_)
end


-- 接取任务 (status 0=是界面点接取, 1是在NPC对话点接取)
i3k_sbean.friend_circle_take_task_req = i3k_class("friend_circle_take_task_req")
function i3k_sbean.friend_circle_take_task_req:ctor()
	self._pname_ = "friend_circle_take_task_req"
	--self.taskId:		int32	
	--self.status:		int32	
end

function i3k_sbean.friend_circle_take_task_req:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_take_task_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
	self.status = is:popNumber()
end

function i3k_sbean.friend_circle_take_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
	os:pushNumber(self.status)
end


-- 完成任务
i3k_sbean.friend_circle_finish_task_req = i3k_class("friend_circle_finish_task_req")
function i3k_sbean.friend_circle_finish_task_req:ctor()
	self._pname_ = "friend_circle_finish_task_req"
	--self.taskId:		int32	
end

function i3k_sbean.friend_circle_finish_task_req:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_finish_task_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.friend_circle_finish_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 放弃任务
i3k_sbean.friend_circle_cancel_task_req = i3k_class("friend_circle_cancel_task_req")
function i3k_sbean.friend_circle_cancel_task_req:ctor()
	self._pname_ = "friend_circle_cancel_task_req"
	--self.taskId:		int32	
end

function i3k_sbean.friend_circle_cancel_task_req:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_cancel_task_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
end

function i3k_sbean.friend_circle_cancel_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
end


-- 购买任务次数
i3k_sbean.friend_circle_buy_task_cnt_req = i3k_class("friend_circle_buy_task_cnt_req")
function i3k_sbean.friend_circle_buy_task_cnt_req:ctor()
	self._pname_ = "friend_circle_buy_task_cnt_req"
	--self.cost:		int32	
end

function i3k_sbean.friend_circle_buy_task_cnt_req:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_buy_task_cnt_req:decode(is)
	is:popString()
	self.cost = is:popNumber()
end

function i3k_sbean.friend_circle_buy_task_cnt_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cost)
end


-- 领取每日奖励
i3k_sbean.friend_circle_take_day_reward_req = i3k_class("friend_circle_take_day_reward_req")
function i3k_sbean.friend_circle_take_day_reward_req:ctor()
	self._pname_ = "friend_circle_take_day_reward_req"
end

function i3k_sbean.friend_circle_take_day_reward_req:decode(is)
	is:popString()
end

function i3k_sbean.friend_circle_take_day_reward_req:encode(os)
	os:pushString(self._pname_)
end


-- 领取情义值奖励
i3k_sbean.friend_circle_take_friendship_reward_req = i3k_class("friend_circle_take_friendship_reward_req")
function i3k_sbean.friend_circle_take_friendship_reward_req:ctor()
	self._pname_ = "friend_circle_take_friendship_reward_req"
	--self.friendshipLvl:		int32	
end

function i3k_sbean.friend_circle_take_friendship_reward_req:clone()
	return clone(self)
end

function i3k_sbean.friend_circle_take_friendship_reward_req:decode(is)
	is:popString()
	self.friendshipLvl = is:popNumber()
end

function i3k_sbean.friend_circle_take_friendship_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.friendshipLvl)
end


-- 任务跟多个NPC对话 送信
i3k_sbean.task_talk_mul_npc_req = i3k_class("task_talk_mul_npc_req")
function i3k_sbean.task_talk_mul_npc_req:ctor()
	self._pname_ = "task_talk_mul_npc_req"
	--self.specialId:		int32	
	--self.index:		int32	
end

function i3k_sbean.task_talk_mul_npc_req:clone()
	return clone(self)
end

function i3k_sbean.task_talk_mul_npc_req:decode(is)
	is:popString()
	self.specialId = is:popNumber()
	self.index = is:popNumber()
end

function i3k_sbean.task_talk_mul_npc_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.specialId)
	os:pushNumber(self.index)
end


-- 任务交换物品
i3k_sbean.task_exchange_item_req = i3k_class("task_exchange_item_req")
function i3k_sbean.task_exchange_item_req:ctor()
	self._pname_ = "task_exchange_item_req"
	--self.taskCategory:		int32	
	--self.specialId:		int32	
	--self.itemId:		int32	
end

function i3k_sbean.task_exchange_item_req:clone()
	return clone(self)
end

function i3k_sbean.task_exchange_item_req:decode(is)
	is:popString()
	self.taskCategory = is:popNumber()
	self.specialId = is:popNumber()
	self.itemId = is:popNumber()
end

function i3k_sbean.task_exchange_item_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskCategory)
	os:pushNumber(self.specialId)
	os:pushNumber(self.itemId)
end


-- 消耗符文提升铸锭经验
i3k_sbean.cast_ingot_use_rune_req = i3k_class("cast_ingot_use_rune_req")
function i3k_sbean.cast_ingot_use_rune_req:ctor()
	self._pname_ = "cast_ingot_use_rune_req"
	--self.langId:		int32	
	--self.runeId:		int32	
	--self.num:		int32	
end

function i3k_sbean.cast_ingot_use_rune_req:clone()
	return clone(self)
end

function i3k_sbean.cast_ingot_use_rune_req:decode(is)
	is:popString()
	self.langId = is:popNumber()
	self.runeId = is:popNumber()
	self.num = is:popNumber()
end

function i3k_sbean.cast_ingot_use_rune_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.langId)
	os:pushNumber(self.runeId)
	os:pushNumber(self.num)
end


-- 祈言
i3k_sbean.array_stone_prayer_req = i3k_class("array_stone_prayer_req")
function i3k_sbean.array_stone_prayer_req:ctor()
	self._pname_ = "array_stone_prayer_req"
	--self.freeTimes:		int32	
end

function i3k_sbean.array_stone_prayer_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_prayer_req:decode(is)
	is:popString()
	self.freeTimes = is:popNumber()
end

function i3k_sbean.array_stone_prayer_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.freeTimes)
end


-- 设置直接转换能量
i3k_sbean.array_stone_set_conversion_req = i3k_class("array_stone_set_conversion_req")
function i3k_sbean.array_stone_set_conversion_req:ctor()
	self._pname_ = "array_stone_set_conversion_req"
	--self.conversion:		int32	
end

function i3k_sbean.array_stone_set_conversion_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_set_conversion_req:decode(is)
	is:popString()
	self.conversion = is:popNumber()
end

function i3k_sbean.array_stone_set_conversion_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.conversion)
end


-- 解锁祈言孔位
i3k_sbean.array_stone_unlock_hole_req = i3k_class("array_stone_unlock_hole_req")
function i3k_sbean.array_stone_unlock_hole_req:ctor()
	self._pname_ = "array_stone_unlock_hole_req"
	--self.holeId:		int32	
end

function i3k_sbean.array_stone_unlock_hole_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_unlock_hole_req:decode(is)
	is:popString()
	self.holeId = is:popNumber()
end

function i3k_sbean.array_stone_unlock_hole_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.holeId)
end


-- 密文回收
i3k_sbean.array_stone_ciphertext_destroy_req = i3k_class("array_stone_ciphertext_destroy_req")
function i3k_sbean.array_stone_ciphertext_destroy_req:ctor()
	self._pname_ = "array_stone_ciphertext_destroy_req"
	--self.ciphertexts:		map[int32, int32]	
end

function i3k_sbean.array_stone_ciphertext_destroy_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_destroy_req:decode(is)
	is:popString()
	self.ciphertexts = is:popNumberNumberMap()
end

function i3k_sbean.array_stone_ciphertext_destroy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.ciphertexts)
end


-- 密文上阵
i3k_sbean.array_stone_ciphertext_equip_req = i3k_class("array_stone_ciphertext_equip_req")
function i3k_sbean.array_stone_ciphertext_equip_req:ctor()
	self._pname_ = "array_stone_ciphertext_equip_req"
	--self.ciphertextID:		int32	
end

function i3k_sbean.array_stone_ciphertext_equip_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_equip_req:decode(is)
	is:popString()
	self.ciphertextID = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_equip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ciphertextID)
end


-- 密文下阵
i3k_sbean.array_stone_ciphertext_unequip_req = i3k_class("array_stone_ciphertext_unequip_req")
function i3k_sbean.array_stone_ciphertext_unequip_req:ctor()
	self._pname_ = "array_stone_ciphertext_unequip_req"
	--self.ciphertextID:		int32	
end

function i3k_sbean.array_stone_ciphertext_unequip_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_unequip_req:decode(is)
	is:popString()
	self.ciphertextID = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_unequip_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ciphertextID)
end


-- 密文合成
i3k_sbean.array_stone_ciphertext_uplvl_req = i3k_class("array_stone_ciphertext_uplvl_req")
function i3k_sbean.array_stone_ciphertext_uplvl_req:ctor()
	self._pname_ = "array_stone_ciphertext_uplvl_req"
	--self.ciphertextID:		int32	
	--self.equip:		int32	
end

function i3k_sbean.array_stone_ciphertext_uplvl_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_uplvl_req:decode(is)
	is:popString()
	self.ciphertextID = is:popNumber()
	self.equip = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_uplvl_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ciphertextID)
	os:pushNumber(self.equip)
end


-- 密文置换
i3k_sbean.array_stone_ciphertext_change_req = i3k_class("array_stone_ciphertext_change_req")
function i3k_sbean.array_stone_ciphertext_change_req:ctor()
	self._pname_ = "array_stone_ciphertext_change_req"
	--self.ciphertextID:		int32	
	--self.targetID:		int32	
end

function i3k_sbean.array_stone_ciphertext_change_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_change_req:decode(is)
	is:popString()
	self.ciphertextID = is:popNumber()
	self.targetID = is:popNumber()
end

function i3k_sbean.array_stone_ciphertext_change_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ciphertextID)
	os:pushNumber(self.targetID)
end


-- 密文锁定
i3k_sbean.array_stone_ciphertext_lock_req = i3k_class("array_stone_ciphertext_lock_req")
function i3k_sbean.array_stone_ciphertext_lock_req:ctor()
	self._pname_ = "array_stone_ciphertext_lock_req"
	--self.ciphertexts:		set[int32]	
end

function i3k_sbean.array_stone_ciphertext_lock_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_ciphertext_lock_req:decode(is)
	is:popString()
	self.ciphertexts = is:popNumberSet()
end

function i3k_sbean.array_stone_ciphertext_lock_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.ciphertexts)
end


-- 添加真言等级熟练度
i3k_sbean.array_stone_mantra_uplvl_req = i3k_class("array_stone_mantra_uplvl_req")
function i3k_sbean.array_stone_mantra_uplvl_req:ctor()
	self._pname_ = "array_stone_mantra_uplvl_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.array_stone_mantra_uplvl_req:clone()
	return clone(self)
end

function i3k_sbean.array_stone_mantra_uplvl_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.array_stone_mantra_uplvl_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 使用密文能量道具
i3k_sbean.bag_useitemciphertextenergy_req = i3k_class("bag_useitemciphertextenergy_req")
function i3k_sbean.bag_useitemciphertextenergy_req:ctor()
	self._pname_ = "bag_useitemciphertextenergy_req"
	--self.id:		int32	
	--self.count:		int32	
end

function i3k_sbean.bag_useitemciphertextenergy_req:clone()
	return clone(self)
end

function i3k_sbean.bag_useitemciphertextenergy_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.count = is:popNumber()
end

function i3k_sbean.bag_useitemciphertextenergy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.count)
end


-- 获取玩家秘祝信息
i3k_sbean.query_arraystoneoverviews_req = i3k_class("query_arraystoneoverviews_req")
function i3k_sbean.query_arraystoneoverviews_req:ctor()
	self._pname_ = "query_arraystoneoverviews_req"
	--self.rid:		int32	
end

function i3k_sbean.query_arraystoneoverviews_req:clone()
	return clone(self)
end

function i3k_sbean.query_arraystoneoverviews_req:decode(is)
	is:popString()
	self.rid = is:popNumber()
end

function i3k_sbean.query_arraystoneoverviews_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.rid)
end


-- 进入黄金海岸
i3k_sbean.global_world_enter_req = i3k_class("global_world_enter_req")
function i3k_sbean.global_world_enter_req:ctor()
	self._pname_ = "global_world_enter_req"
	--self.mapID:		int32	
end

function i3k_sbean.global_world_enter_req:clone()
	return clone(self)
end

function i3k_sbean.global_world_enter_req:decode(is)
	is:popString()
	self.mapID = is:popNumber()
end

function i3k_sbean.global_world_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapID)
end


-- 同步地图信息
i3k_sbean.global_world_sync_req = i3k_class("global_world_sync_req")
function i3k_sbean.global_world_sync_req:ctor()
	self._pname_ = "global_world_sync_req"
end

function i3k_sbean.global_world_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.global_world_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 切换分线
i3k_sbean.global_world_change_req = i3k_class("global_world_change_req")
function i3k_sbean.global_world_change_req:ctor()
	self._pname_ = "global_world_change_req"
	--self.mapID:		int32	
	--self.line:		int32	
end

function i3k_sbean.global_world_change_req:clone()
	return clone(self)
end

function i3k_sbean.global_world_change_req:decode(is)
	is:popString()
	self.mapID = is:popNumber()
	self.line = is:popNumber()
end

function i3k_sbean.global_world_change_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapID)
	os:pushNumber(self.line)
end


-- 卡片操作，类型1.激活 2.放弃
i3k_sbean.global_world_card_operation_req = i3k_class("global_world_card_operation_req")
function i3k_sbean.global_world_card_operation_req:ctor()
	self._pname_ = "global_world_card_operation_req"
	--self.type:		int8	
	--self.cardID:		int32	
end

function i3k_sbean.global_world_card_operation_req:clone()
	return clone(self)
end

function i3k_sbean.global_world_card_operation_req:decode(is)
	is:popString()
	self.type = is:popNumber()
	self.cardID = is:popNumber()
end

function i3k_sbean.global_world_card_operation_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
	os:pushNumber(self.cardID)
end


-- 帮派卡片捐赠
i3k_sbean.global_world_card_sect_donate_req = i3k_class("global_world_card_sect_donate_req")
function i3k_sbean.global_world_card_sect_donate_req:ctor()
	self._pname_ = "global_world_card_sect_donate_req"
	--self.cardID:		int32	
end

function i3k_sbean.global_world_card_sect_donate_req:clone()
	return clone(self)
end

function i3k_sbean.global_world_card_sect_donate_req:decode(is)
	is:popString()
	self.cardID = is:popNumber()
end

function i3k_sbean.global_world_card_sect_donate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cardID)
end


-- 请求卡片日志，类型1.个人 2.战区
i3k_sbean.global_world_log_req = i3k_class("global_world_log_req")
function i3k_sbean.global_world_log_req:ctor()
	self._pname_ = "global_world_log_req"
	--self.type:		int8	
end

function i3k_sbean.global_world_log_req:clone()
	return clone(self)
end

function i3k_sbean.global_world_log_req:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.global_world_log_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 请求帮派卡池的面板
i3k_sbean.global_world_sect_panel_req = i3k_class("global_world_sect_panel_req")
function i3k_sbean.global_world_sect_panel_req:ctor()
	self._pname_ = "global_world_sect_panel_req"
end

function i3k_sbean.global_world_sect_panel_req:decode(is)
	is:popString()
end

function i3k_sbean.global_world_sect_panel_req:encode(os)
	os:pushString(self._pname_)
end


-- 请求领取帮派的卡片
i3k_sbean.global_world_sect_drawcard_req = i3k_class("global_world_sect_drawcard_req")
function i3k_sbean.global_world_sect_drawcard_req:ctor()
	self._pname_ = "global_world_sect_drawcard_req"
	--self.cardID:		int32	
end

function i3k_sbean.global_world_sect_drawcard_req:clone()
	return clone(self)
end

function i3k_sbean.global_world_sect_drawcard_req:decode(is)
	is:popString()
	self.cardID = is:popNumber()
end

function i3k_sbean.global_world_sect_drawcard_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cardID)
end


-- 领取任务奖励
i3k_sbean.global_world_task_take_reward_req = i3k_class("global_world_task_take_reward_req")
function i3k_sbean.global_world_task_take_reward_req:ctor()
	self._pname_ = "global_world_task_take_reward_req"
	--self.taskId:		int32	
	--self.isSpecial:		int32	
end

function i3k_sbean.global_world_task_take_reward_req:clone()
	return clone(self)
end

function i3k_sbean.global_world_task_take_reward_req:decode(is)
	is:popString()
	self.taskId = is:popNumber()
	self.isSpecial = is:popNumber()
end

function i3k_sbean.global_world_task_take_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.taskId)
	os:pushNumber(self.isSpecial)
end


-- 使用卡片包道具
i3k_sbean.global_world_use_card_box_req = i3k_class("global_world_use_card_box_req")
function i3k_sbean.global_world_use_card_box_req:ctor()
	self._pname_ = "global_world_use_card_box_req"
	--self.id:		int32	
end

function i3k_sbean.global_world_use_card_box_req:clone()
	return clone(self)
end

function i3k_sbean.global_world_use_card_box_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.global_world_use_card_box_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 转盘同步请求
i3k_sbean.newluckyroll_sync_req = i3k_class("newluckyroll_sync_req")
function i3k_sbean.newluckyroll_sync_req:ctor()
	self._pname_ = "newluckyroll_sync_req"
end

function i3k_sbean.newluckyroll_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.newluckyroll_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 转盘同步请求
i3k_sbean.newluckyroll_play_req = i3k_class("newluckyroll_play_req")
function i3k_sbean.newluckyroll_play_req:ctor()
	self._pname_ = "newluckyroll_play_req"
	--self.effectiveTime:		int32	
	--self.id:		int32	
	--self.mutiplay:		int32	
end

function i3k_sbean.newluckyroll_play_req:clone()
	return clone(self)
end

function i3k_sbean.newluckyroll_play_req:decode(is)
	is:popString()
	self.effectiveTime = is:popNumber()
	self.id = is:popNumber()
	self.mutiplay = is:popNumber()
end

function i3k_sbean.newluckyroll_play_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.effectiveTime)
	os:pushNumber(self.id)
	os:pushNumber(self.mutiplay)
end


-- 万寿阁报名
i3k_sbean.longevity_loft_sign_req = i3k_class("longevity_loft_sign_req")
function i3k_sbean.longevity_loft_sign_req:ctor()
	self._pname_ = "longevity_loft_sign_req"
end

function i3k_sbean.longevity_loft_sign_req:decode(is)
	is:popString()
end

function i3k_sbean.longevity_loft_sign_req:encode(os)
	os:pushString(self._pname_)
end


-- 万寿阁取消报名
i3k_sbean.longevity_loft_quit_req = i3k_class("longevity_loft_quit_req")
function i3k_sbean.longevity_loft_quit_req:ctor()
	self._pname_ = "longevity_loft_quit_req"
end

function i3k_sbean.longevity_loft_quit_req:decode(is)
	is:popString()
end

function i3k_sbean.longevity_loft_quit_req:encode(os)
	os:pushString(self._pname_)
end


-- 进入御灵鬼岛请求
i3k_sbean.ghost_island_enter_req = i3k_class("ghost_island_enter_req")
function i3k_sbean.ghost_island_enter_req:ctor()
	self._pname_ = "ghost_island_enter_req"
end

function i3k_sbean.ghost_island_enter_req:decode(is)
	is:popString()
end

function i3k_sbean.ghost_island_enter_req:encode(os)
	os:pushString(self._pname_)
end


-- 碎片交换请求
i3k_sbean.ghost_island_exchange_req = i3k_class("ghost_island_exchange_req")
function i3k_sbean.ghost_island_exchange_req:ctor()
	self._pname_ = "ghost_island_exchange_req"
	--self.costId:		int32	
	--self.targetId:		int32	
end

function i3k_sbean.ghost_island_exchange_req:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_exchange_req:decode(is)
	is:popString()
	self.costId = is:popNumber()
	self.targetId = is:popNumber()
end

function i3k_sbean.ghost_island_exchange_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.costId)
	os:pushNumber(self.targetId)
end


-- 取消碎片交换请求
i3k_sbean.ghost_island_exchange_cancle_req = i3k_class("ghost_island_exchange_cancle_req")
function i3k_sbean.ghost_island_exchange_cancle_req:ctor()
	self._pname_ = "ghost_island_exchange_cancle_req"
end

function i3k_sbean.ghost_island_exchange_cancle_req:decode(is)
	is:popString()
end

function i3k_sbean.ghost_island_exchange_cancle_req:encode(os)
	os:pushString(self._pname_)
end


-- 炼化请求 debrisId为普通碎片Id
i3k_sbean.ghost_island_artifice_req = i3k_class("ghost_island_artifice_req")
function i3k_sbean.ghost_island_artifice_req:ctor()
	self._pname_ = "ghost_island_artifice_req"
	--self.debrisId:		int32	
end

function i3k_sbean.ghost_island_artifice_req:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_artifice_req:decode(is)
	is:popString()
	self.debrisId = is:popNumber()
end

function i3k_sbean.ghost_island_artifice_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.debrisId)
end


-- 打开界面同步信息
i3k_sbean.ghost_island_info_req = i3k_class("ghost_island_info_req")
function i3k_sbean.ghost_island_info_req:ctor()
	self._pname_ = "ghost_island_info_req"
end

function i3k_sbean.ghost_island_info_req:decode(is)
	is:popString()
end

function i3k_sbean.ghost_island_info_req:encode(os)
	os:pushString(self._pname_)
end


-- 学习驭灵和天眼技能 1 御灵2天眼
i3k_sbean.ghost_island_learn_skill_req = i3k_class("ghost_island_learn_skill_req")
function i3k_sbean.ghost_island_learn_skill_req:ctor()
	self._pname_ = "ghost_island_learn_skill_req"
	--self.id:		int32	
end

function i3k_sbean.ghost_island_learn_skill_req:clone()
	return clone(self)
end

function i3k_sbean.ghost_island_learn_skill_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.ghost_island_learn_skill_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 密探风云每日奖励
i3k_sbean.spy_world_day_reward_req = i3k_class("spy_world_day_reward_req")
function i3k_sbean.spy_world_day_reward_req:ctor()
	self._pname_ = "spy_world_day_reward_req"
	--self.score:		int32	
end

function i3k_sbean.spy_world_day_reward_req:clone()
	return clone(self)
end

function i3k_sbean.spy_world_day_reward_req:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.spy_world_day_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 密探风云活动奖励
i3k_sbean.spy_world_activity_reward_req = i3k_class("spy_world_activity_reward_req")
function i3k_sbean.spy_world_activity_reward_req:ctor()
	self._pname_ = "spy_world_activity_reward_req"
	--self.finishCnt:		int32	
end

function i3k_sbean.spy_world_activity_reward_req:clone()
	return clone(self)
end

function i3k_sbean.spy_world_activity_reward_req:decode(is)
	is:popString()
	self.finishCnt = is:popNumber()
end

function i3k_sbean.spy_world_activity_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.finishCnt)
end


-- 密探风云变箱子
i3k_sbean.spy_world_alter_req = i3k_class("spy_world_alter_req")
function i3k_sbean.spy_world_alter_req:ctor()
	self._pname_ = "spy_world_alter_req"
end

function i3k_sbean.spy_world_alter_req:decode(is)
	is:popString()
end

function i3k_sbean.spy_world_alter_req:encode(os)
	os:pushString(self._pname_)
end


-- 密探风云取消变箱子
i3k_sbean.spy_world_alter_quit_req = i3k_class("spy_world_alter_quit_req")
function i3k_sbean.spy_world_alter_quit_req:ctor()
	self._pname_ = "spy_world_alter_quit_req"
end

function i3k_sbean.spy_world_alter_quit_req:decode(is)
	is:popString()
end

function i3k_sbean.spy_world_alter_quit_req:encode(os)
	os:pushString(self._pname_)
end


-- 开始外传职业副本
i3k_sbean.biography_class_map_start_req = i3k_class("biography_class_map_start_req")
function i3k_sbean.biography_class_map_start_req:ctor()
	self._pname_ = "biography_class_map_start_req"
	--self.classType:		int32	
end

function i3k_sbean.biography_class_map_start_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_map_start_req:decode(is)
	is:popString()
	self.classType = is:popNumber()
end

function i3k_sbean.biography_class_map_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.classType)
end


-- 外传职业副本装备技能
i3k_sbean.biography_class_skill_select_req = i3k_class("biography_class_skill_select_req")
function i3k_sbean.biography_class_skill_select_req:ctor()
	self._pname_ = "biography_class_skill_select_req"
	--self.skills:		map[int32, int32]	
end

function i3k_sbean.biography_class_skill_select_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_skill_select_req:decode(is)
	is:popString()
	self.skills = is:popNumberNumberMap()
end

function i3k_sbean.biography_class_skill_select_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.skills)
end


-- 外传职业副本卸载技能
i3k_sbean.biography_class_skill_unselect_req = i3k_class("biography_class_skill_unselect_req")
function i3k_sbean.biography_class_skill_unselect_req:ctor()
	self._pname_ = "biography_class_skill_unselect_req"
	--self.slotId:		int32	
end

function i3k_sbean.biography_class_skill_unselect_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_skill_unselect_req:decode(is)
	is:popString()
	self.slotId = is:popNumber()
end

function i3k_sbean.biography_class_skill_unselect_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.slotId)
end


-- 外传职业副本装备心法
i3k_sbean.biography_class_spirit_install_req = i3k_class("biography_class_spirit_install_req")
function i3k_sbean.biography_class_spirit_install_req:ctor()
	self._pname_ = "biography_class_spirit_install_req"
	--self.spiritId:		int32	
end

function i3k_sbean.biography_class_spirit_install_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_spirit_install_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
end

function i3k_sbean.biography_class_spirit_install_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
end


-- 外传职业副本卸载心法
i3k_sbean.biography_class_spirit_uninstall_req = i3k_class("biography_class_spirit_uninstall_req")
function i3k_sbean.biography_class_spirit_uninstall_req:ctor()
	self._pname_ = "biography_class_spirit_uninstall_req"
	--self.spiritId:		int32	
end

function i3k_sbean.biography_class_spirit_uninstall_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_spirit_uninstall_req:decode(is)
	is:popString()
	self.spiritId = is:popNumber()
end

function i3k_sbean.biography_class_spirit_uninstall_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spiritId)
end


-- 接取外传职业副本任务
i3k_sbean.biography_class_take_task_req = i3k_class("biography_class_take_task_req")
function i3k_sbean.biography_class_take_task_req:ctor()
	self._pname_ = "biography_class_take_task_req"
	--self.classType:		int32	
	--self.taskId:		int32	
end

function i3k_sbean.biography_class_take_task_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_take_task_req:decode(is)
	is:popString()
	self.classType = is:popNumber()
	self.taskId = is:popNumber()
end

function i3k_sbean.biography_class_take_task_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.classType)
	os:pushNumber(self.taskId)
end


-- 领取外传职业副本任务奖励
i3k_sbean.biography_class_task_reward_req = i3k_class("biography_class_task_reward_req")
function i3k_sbean.biography_class_task_reward_req:ctor()
	self._pname_ = "biography_class_task_reward_req"
	--self.classType:		int32	
	--self.taskId:		int32	
end

function i3k_sbean.biography_class_task_reward_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_task_reward_req:decode(is)
	is:popString()
	self.classType = is:popNumber()
	self.taskId = is:popNumber()
end

function i3k_sbean.biography_class_task_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.classType)
	os:pushNumber(self.taskId)
end


-- 变更外传职业
i3k_sbean.biography_class_change_profession_req = i3k_class("biography_class_change_profession_req")
function i3k_sbean.biography_class_change_profession_req:ctor()
	self._pname_ = "biography_class_change_profession_req"
	--self.classType:		int8	
	--self.tlvl:		int8	
	--self.bwType:		int8	
	--self.hair:		int8	
	--self.face:		int8	
end

function i3k_sbean.biography_class_change_profession_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_change_profession_req:decode(is)
	is:popString()
	self.classType = is:popNumber()
	self.tlvl = is:popNumber()
	self.bwType = is:popNumber()
	self.hair = is:popNumber()
	self.face = is:popNumber()
end

function i3k_sbean.biography_class_change_profession_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.classType)
	os:pushNumber(self.tlvl)
	os:pushNumber(self.bwType)
	os:pushNumber(self.hair)
	os:pushNumber(self.face)
end


-- 变更外传职业反悔
i3k_sbean.biography_class_regret_profession_req = i3k_class("biography_class_regret_profession_req")
function i3k_sbean.biography_class_regret_profession_req:ctor()
	self._pname_ = "biography_class_regret_profession_req"
	--self.classType:		int8	
	--self.tlvl:		int8	
	--self.bwType:		int8	
	--self.hair:		int8	
	--self.face:		int8	
end

function i3k_sbean.biography_class_regret_profession_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_regret_profession_req:decode(is)
	is:popString()
	self.classType = is:popNumber()
	self.tlvl = is:popNumber()
	self.bwType = is:popNumber()
	self.hair = is:popNumber()
	self.face = is:popNumber()
end

function i3k_sbean.biography_class_regret_profession_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.classType)
	os:pushNumber(self.tlvl)
	os:pushNumber(self.bwType)
	os:pushNumber(self.hair)
	os:pushNumber(self.face)
end


-- 领取宝箱奖励
i3k_sbean.biography_class_receive_box_reward_req = i3k_class("biography_class_receive_box_reward_req")
function i3k_sbean.biography_class_receive_box_reward_req:ctor()
	self._pname_ = "biography_class_receive_box_reward_req"
	--self.classType:		int32	
end

function i3k_sbean.biography_class_receive_box_reward_req:clone()
	return clone(self)
end

function i3k_sbean.biography_class_receive_box_reward_req:decode(is)
	is:popString()
	self.classType = is:popNumber()
end

function i3k_sbean.biography_class_receive_box_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.classType)
end


-- 领取奖励
i3k_sbean.first_access_take_reward_req = i3k_class("first_access_take_reward_req")
function i3k_sbean.first_access_take_reward_req:ctor()
	self._pname_ = "first_access_take_reward_req"
	--self.id:		int32	
end

function i3k_sbean.first_access_take_reward_req:clone()
	return clone(self)
end

function i3k_sbean.first_access_take_reward_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.first_access_take_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 领取限时任务
i3k_sbean.time_limit_task_take_req = i3k_class("time_limit_task_take_req")
function i3k_sbean.time_limit_task_take_req:ctor()
	self._pname_ = "time_limit_task_take_req"
	--self.id:		int32	
end

function i3k_sbean.time_limit_task_take_req:clone()
	return clone(self)
end

function i3k_sbean.time_limit_task_take_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.time_limit_task_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 开始限时任务
i3k_sbean.time_limit_task_start_req = i3k_class("time_limit_task_start_req")
function i3k_sbean.time_limit_task_start_req:ctor()
	self._pname_ = "time_limit_task_start_req"
	--self.id:		int32	
end

function i3k_sbean.time_limit_task_start_req:clone()
	return clone(self)
end

function i3k_sbean.time_limit_task_start_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.time_limit_task_start_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 完成限时任务
i3k_sbean.time_limit_task_finish_req = i3k_class("time_limit_task_finish_req")
function i3k_sbean.time_limit_task_finish_req:ctor()
	self._pname_ = "time_limit_task_finish_req"
	--self.id:		int32	
end

function i3k_sbean.time_limit_task_finish_req:clone()
	return clone(self)
end

function i3k_sbean.time_limit_task_finish_req:decode(is)
	is:popString()
	self.id = is:popNumber()
end

function i3k_sbean.time_limit_task_finish_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
end


-- 节日活动同步
i3k_sbean.festival_activity_sync_req = i3k_class("festival_activity_sync_req")
function i3k_sbean.festival_activity_sync_req:ctor()
	self._pname_ = "festival_activity_sync_req"
end

function i3k_sbean.festival_activity_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.festival_activity_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 节日活动捐赠
i3k_sbean.festival_activity_donate_req = i3k_class("festival_activity_donate_req")
function i3k_sbean.festival_activity_donate_req:ctor()
	self._pname_ = "festival_activity_donate_req"
	--self.items:		map[int32, int32]	
end

function i3k_sbean.festival_activity_donate_req:clone()
	return clone(self)
end

function i3k_sbean.festival_activity_donate_req:decode(is)
	is:popString()
	self.items = is:popNumberNumberMap()
end

function i3k_sbean.festival_activity_donate_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumberNumberMap(self.items)
end


-- 节日活动角色积分奖励
i3k_sbean.festival_activity_role_reward_req = i3k_class("festival_activity_role_reward_req")
function i3k_sbean.festival_activity_role_reward_req:ctor()
	self._pname_ = "festival_activity_role_reward_req"
	--self.score:		int32	
end

function i3k_sbean.festival_activity_role_reward_req:clone()
	return clone(self)
end

function i3k_sbean.festival_activity_role_reward_req:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.festival_activity_role_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 节日活动世界积分奖励
i3k_sbean.festival_activity_world_reward_req = i3k_class("festival_activity_world_reward_req")
function i3k_sbean.festival_activity_world_reward_req:ctor()
	self._pname_ = "festival_activity_world_reward_req"
	--self.score:		int32	
end

function i3k_sbean.festival_activity_world_reward_req:clone()
	return clone(self)
end

function i3k_sbean.festival_activity_world_reward_req:decode(is)
	is:popString()
	self.score = is:popNumber()
end

function i3k_sbean.festival_activity_world_reward_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.score)
end


-- 同步新春灯卷
i3k_sbean.spring_lantern_sync_req = i3k_class("spring_lantern_sync_req")
function i3k_sbean.spring_lantern_sync_req:ctor()
	self._pname_ = "spring_lantern_sync_req"
end

function i3k_sbean.spring_lantern_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.spring_lantern_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 进入新春灯卷地图
i3k_sbean.spring_lantern_map_enter_req = i3k_class("spring_lantern_map_enter_req")
function i3k_sbean.spring_lantern_map_enter_req:ctor()
	self._pname_ = "spring_lantern_map_enter_req"
	--self.npcId:		int32	
end

function i3k_sbean.spring_lantern_map_enter_req:clone()
	return clone(self)
end

function i3k_sbean.spring_lantern_map_enter_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
end

function i3k_sbean.spring_lantern_map_enter_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
end


-- 完成新春灯卷NPC活动
i3k_sbean.spring_lantern_join_req = i3k_class("spring_lantern_join_req")
function i3k_sbean.spring_lantern_join_req:ctor()
	self._pname_ = "spring_lantern_join_req"
	--self.npcId:		int32	
end

function i3k_sbean.spring_lantern_join_req:clone()
	return clone(self)
end

function i3k_sbean.spring_lantern_join_req:decode(is)
	is:popString()
	self.npcId = is:popNumber()
end

function i3k_sbean.spring_lantern_join_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.npcId)
end


-- 使用灯笼
i3k_sbean.spring_lantern_use_req = i3k_class("spring_lantern_use_req")
function i3k_sbean.spring_lantern_use_req:ctor()
	self._pname_ = "spring_lantern_use_req"
	--self.index:		int32	
end

function i3k_sbean.spring_lantern_use_req:clone()
	return clone(self)
end

function i3k_sbean.spring_lantern_use_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.spring_lantern_use_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 纪念币同步
i3k_sbean.souvenir_coin_sync_req = i3k_class("souvenir_coin_sync_req")
function i3k_sbean.souvenir_coin_sync_req:ctor()
	self._pname_ = "souvenir_coin_sync_req"
end

function i3k_sbean.souvenir_coin_sync_req:decode(is)
	is:popString()
end

function i3k_sbean.souvenir_coin_sync_req:encode(os)
	os:pushString(self._pname_)
end


-- 购买纪念币
i3k_sbean.souvenir_coin_buy_req = i3k_class("souvenir_coin_buy_req")
function i3k_sbean.souvenir_coin_buy_req:ctor()
	self._pname_ = "souvenir_coin_buy_req"
	--self.num:		int32	
end

function i3k_sbean.souvenir_coin_buy_req:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_buy_req:decode(is)
	is:popString()
	self.num = is:popNumber()
end

function i3k_sbean.souvenir_coin_buy_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.num)
end


-- 兑现纪念币
i3k_sbean.souvenir_coin_cash_req = i3k_class("souvenir_coin_cash_req")
function i3k_sbean.souvenir_coin_cash_req:ctor()
	self._pname_ = "souvenir_coin_cash_req"
	--self.index:		int32	
	--self.num:		int32	
end

function i3k_sbean.souvenir_coin_cash_req:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_cash_req:decode(is)
	is:popString()
	self.index = is:popNumber()
	self.num = is:popNumber()
end

function i3k_sbean.souvenir_coin_cash_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
	os:pushNumber(self.num)
end


-- 代币兑换
i3k_sbean.souvenir_coin_exchange_req = i3k_class("souvenir_coin_exchange_req")
function i3k_sbean.souvenir_coin_exchange_req:ctor()
	self._pname_ = "souvenir_coin_exchange_req"
	--self.id:		int32	
	--self.time:		int32	
end

function i3k_sbean.souvenir_coin_exchange_req:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_exchange_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.time = is:popNumber()
end

function i3k_sbean.souvenir_coin_exchange_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.time)
end


-- 强制兑现纪念币
i3k_sbean.souvenir_coin_force_cash_req = i3k_class("souvenir_coin_force_cash_req")
function i3k_sbean.souvenir_coin_force_cash_req:ctor()
	self._pname_ = "souvenir_coin_force_cash_req"
	--self.id:		int32	
	--self.time:		int32	
end

function i3k_sbean.souvenir_coin_force_cash_req:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_force_cash_req:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.time = is:popNumber()
end

function i3k_sbean.souvenir_coin_force_cash_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.time)
end


-- 保持奖励领取
i3k_sbean.souvenir_coin_hold_reward_take_req = i3k_class("souvenir_coin_hold_reward_take_req")
function i3k_sbean.souvenir_coin_hold_reward_take_req:ctor()
	self._pname_ = "souvenir_coin_hold_reward_take_req"
	--self.index:		int32	
end

function i3k_sbean.souvenir_coin_hold_reward_take_req:clone()
	return clone(self)
end

function i3k_sbean.souvenir_coin_hold_reward_take_req:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.souvenir_coin_hold_reward_take_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 计算延迟(客户端发起)
i3k_sbean.client_ping_start = i3k_class("client_ping_start")
function i3k_sbean.client_ping_start:ctor()
	self._pname_ = "client_ping_start"
	--self.timeTick:		TimeTick	
	--self.ping:		int32	
	--self.taskID:		int32	
end

function i3k_sbean.client_ping_start:clone()
	return clone(self)
end

function i3k_sbean.client_ping_start:decode(is)
	is:popString()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
	self.ping = is:popNumber()
	self.taskID = is:popNumber()
end

function i3k_sbean.client_ping_start:encode(os)
	os:pushString(self._pname_)
	os:push(self.timeTick)
	os:pushNumber(self.ping)
	os:pushNumber(self.taskID)
end


-- 客户端给服务器同步ping值
i3k_sbean.sync_server_ping = i3k_class("sync_server_ping")
function i3k_sbean.sync_server_ping:ctor()
	self._pname_ = "sync_server_ping"
	--self.ping:		int32	
end

function i3k_sbean.sync_server_ping:clone()
	return clone(self)
end

function i3k_sbean.sync_server_ping:decode(is)
	is:popString()
	self.ping = is:popNumber()
end

function i3k_sbean.sync_server_ping:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.ping)
end


-- 怪物回到出生点
i3k_sbean.set_monster_birthpos = i3k_class("set_monster_birthpos")
function i3k_sbean.set_monster_birthpos:ctor()
	self._pname_ = "set_monster_birthpos"
	--self.mid:		int32	
end

function i3k_sbean.set_monster_birthpos:clone()
	return clone(self)
end

function i3k_sbean.set_monster_birthpos:decode(is)
	is:popString()
	self.mid = is:popNumber()
end

function i3k_sbean.set_monster_birthpos:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
end


-- 玩家上马
i3k_sbean.role_ride_horse = i3k_class("role_ride_horse")
function i3k_sbean.role_ride_horse:ctor()
	self._pname_ = "role_ride_horse"
end

function i3k_sbean.role_ride_horse:decode(is)
	is:popString()
end

function i3k_sbean.role_ride_horse:encode(os)
	os:pushString(self._pname_)
end


-- 玩家下马
i3k_sbean.role_unride_horse = i3k_class("role_unride_horse")
function i3k_sbean.role_unride_horse:ctor()
	self._pname_ = "role_unride_horse"
end

function i3k_sbean.role_unride_horse:decode(is)
	is:popString()
end

function i3k_sbean.role_unride_horse:encode(os)
	os:pushString(self._pname_)
end


-- 客户端矫正服务器位置（玩家）
i3k_sbean.role_adjust_serverpos = i3k_class("role_adjust_serverpos")
function i3k_sbean.role_adjust_serverpos:ctor()
	self._pname_ = "role_adjust_serverpos"
	--self.pos:		Vector3	
end

function i3k_sbean.role_adjust_serverpos:clone()
	return clone(self)
end

function i3k_sbean.role_adjust_serverpos:decode(is)
	is:popString()
	self.pos = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.role_adjust_serverpos:encode(os)
	os:pushString(self._pname_)
	os:push(self.pos)
end


-- 客户端矫正服务器位置（佣兵）
i3k_sbean.pet_adjust_serverpos = i3k_class("pet_adjust_serverpos")
function i3k_sbean.pet_adjust_serverpos:ctor()
	self._pname_ = "pet_adjust_serverpos"
	--self.pid:		int32	
	--self.pos:		Vector3	
end

function i3k_sbean.pet_adjust_serverpos:clone()
	return clone(self)
end

function i3k_sbean.pet_adjust_serverpos:decode(is)
	is:popString()
	self.pid = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
end

function i3k_sbean.pet_adjust_serverpos:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pid)
	os:push(self.pos)
end


-- 玩家移动
i3k_sbean.role_move = i3k_class("role_move")
function i3k_sbean.role_move:ctor()
	self._pname_ = "role_move"
	--self.pos:		Vector3	
	--self.target:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_move:clone()
	return clone(self)
end

function i3k_sbean.role_move:decode(is)
	is:popString()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.target = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_move:encode(os)
	os:pushString(self._pname_)
	os:push(self.pos)
	os:push(self.target)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 佣兵移动
i3k_sbean.pet_move = i3k_class("pet_move")
function i3k_sbean.pet_move:ctor()
	self._pname_ = "pet_move"
	--self.cfgid:		int32	
	--self.pos:		Vector3	
	--self.target:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.pet_move:clone()
	return clone(self)
end

function i3k_sbean.pet_move:decode(is)
	is:popString()
	self.cfgid = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.target = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.pet_move:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cfgid)
	os:push(self.pos)
	os:push(self.target)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 镖车移动
i3k_sbean.escortcar_move = i3k_class("escortcar_move")
function i3k_sbean.escortcar_move:ctor()
	self._pname_ = "escortcar_move"
	--self.pos:		Vector3	
	--self.target:		Vector3	
	--self.speed:		int32	
	--self.rotation:		Vector3F	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.escortcar_move:clone()
	return clone(self)
end

function i3k_sbean.escortcar_move:decode(is)
	is:popString()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.target = is:pop(i3k_sbean.Vector3)
	self.speed = is:popNumber()
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.escortcar_move:encode(os)
	os:pushString(self._pname_)
	os:push(self.pos)
	os:push(self.target)
	os:pushNumber(self.speed)
	os:push(self.rotation)
	os:push(self.timeTick)
end


-- 玩家停止移动
i3k_sbean.role_stopmove = i3k_class("role_stopmove")
function i3k_sbean.role_stopmove:ctor()
	self._pname_ = "role_stopmove"
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_stopmove:clone()
	return clone(self)
end

function i3k_sbean.role_stopmove:decode(is)
	is:popString()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_stopmove:encode(os)
	os:pushString(self._pname_)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 佣兵停止移动
i3k_sbean.pet_stopmove = i3k_class("pet_stopmove")
function i3k_sbean.pet_stopmove:ctor()
	self._pname_ = "pet_stopmove"
	--self.cfgid:		int32	
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.pet_stopmove:clone()
	return clone(self)
end

function i3k_sbean.pet_stopmove:decode(is)
	is:popString()
	self.cfgid = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.pet_stopmove:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cfgid)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 镖车停止移动
i3k_sbean.escortcar_stopmove = i3k_class("escortcar_stopmove")
function i3k_sbean.escortcar_stopmove:ctor()
	self._pname_ = "escortcar_stopmove"
	--self.pos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.escortcar_stopmove:clone()
	return clone(self)
end

function i3k_sbean.escortcar_stopmove:decode(is)
	is:popString()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.escortcar_stopmove:encode(os)
	os:pushString(self._pname_)
	os:push(self.pos)
	os:push(self.timeTick)
end


-- 查询周围玩家信息协议
i3k_sbean.query_roles_detail = i3k_class("query_roles_detail")
function i3k_sbean.query_roles_detail:ctor()
	self._pname_ = "query_roles_detail"
	--self.roles:		vector[int32]	
end

function i3k_sbean.query_roles_detail:clone()
	return clone(self)
end

function i3k_sbean.query_roles_detail:decode(is)
	is:popString()
	self.roles = is:popNumberList()
end

function i3k_sbean.query_roles_detail:encode(os)
	os:pushString(self._pname_)
	os:pushNumberList(self.roles)
end


-- 查询周围佣兵信息
i3k_sbean.query_pets_detail = i3k_class("query_pets_detail")
function i3k_sbean.query_pets_detail:ctor()
	self._pname_ = "query_pets_detail"
	--self.pets:		vector[PetBase]	
end

function i3k_sbean.query_pets_detail:clone()
	return clone(self)
end

function i3k_sbean.query_pets_detail:decode(is)
	is:popString()
	self.pets = is:popList(i3k_sbean.PetBase)
end

function i3k_sbean.query_pets_detail:encode(os)
	os:pushString(self._pname_)
	os:pushList(self.pets)
end


-- 查询势力战队友位置信息
i3k_sbean.query_homeland_members_pos = i3k_class("query_homeland_members_pos")
function i3k_sbean.query_homeland_members_pos:ctor()
	self._pname_ = "query_homeland_members_pos"
end

function i3k_sbean.query_homeland_members_pos:decode(is)
	is:popString()
end

function i3k_sbean.query_homeland_members_pos:encode(os)
	os:pushString(self._pname_)
end


-- 查询势力战战报
i3k_sbean.query_forcewar_result = i3k_class("query_forcewar_result")
function i3k_sbean.query_forcewar_result:ctor()
	self._pname_ = "query_forcewar_result"
end

function i3k_sbean.query_forcewar_result:decode(is)
	is:popString()
end

function i3k_sbean.query_forcewar_result:encode(os)
	os:pushString(self._pname_)
end


-- 查询势力战队友位置信息
i3k_sbean.query_forcewar_members_pos = i3k_class("query_forcewar_members_pos")
function i3k_sbean.query_forcewar_members_pos:ctor()
	self._pname_ = "query_forcewar_members_pos"
end

function i3k_sbean.query_forcewar_members_pos:decode(is)
	is:popString()
end

function i3k_sbean.query_forcewar_members_pos:encode(os)
	os:pushString(self._pname_)
end


-- 查询帮战战报
i3k_sbean.query_sectwar_result = i3k_class("query_sectwar_result")
function i3k_sbean.query_sectwar_result:ctor()
	self._pname_ = "query_sectwar_result"
end

function i3k_sbean.query_sectwar_result:decode(is)
	is:popString()
end

function i3k_sbean.query_sectwar_result:encode(os)
	os:pushString(self._pname_)
end


-- 查询帮战队友位置信息
i3k_sbean.query_sectwar_members_pos = i3k_class("query_sectwar_members_pos")
function i3k_sbean.query_sectwar_members_pos:ctor()
	self._pname_ = "query_sectwar_members_pos"
end

function i3k_sbean.query_sectwar_members_pos:decode(is)
	is:popString()
end

function i3k_sbean.query_sectwar_members_pos:encode(os)
	os:pushString(self._pname_)
end


-- 玩家使用后续技能
i3k_sbean.role_usefollowskill = i3k_class("role_usefollowskill")
function i3k_sbean.role_usefollowskill:ctor()
	self._pname_ = "role_usefollowskill"
	--self.skillID:		int32	
	--self.seq:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_usefollowskill:clone()
	return clone(self)
end

function i3k_sbean.role_usefollowskill:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.seq = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_usefollowskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.seq)
	os:push(self.timeTick)
end


-- 玩家使用社交动作
i3k_sbean.role_socialaction = i3k_class("role_socialaction")
function i3k_sbean.role_socialaction:ctor()
	self._pname_ = "role_socialaction"
	--self.actionID:		int32	
	--self.useRname:		string	
	--self.beusedRname:		string	
end

function i3k_sbean.role_socialaction:clone()
	return clone(self)
end

function i3k_sbean.role_socialaction:decode(is)
	is:popString()
	self.actionID = is:popNumber()
	self.useRname = is:popString()
	self.beusedRname = is:popString()
end

function i3k_sbean.role_socialaction:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.actionID)
	os:pushString(self.useRname)
	os:pushString(self.beusedRname)
end


-- 玩家打断技能
i3k_sbean.role_breakskill = i3k_class("role_breakskill")
function i3k_sbean.role_breakskill:ctor()
	self._pname_ = "role_breakskill"
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_breakskill:clone()
	return clone(self)
end

function i3k_sbean.role_breakskill:decode(is)
	is:popString()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_breakskill:encode(os)
	os:pushString(self._pname_)
	os:push(self.timeTick)
end


-- 闪烁突刺
i3k_sbean.role_blinkskill = i3k_class("role_blinkskill")
function i3k_sbean.role_blinkskill:ctor()
	self._pname_ = "role_blinkskill"
	--self.skillID:		int32	
	--self.pos:		Vector3	
	--self.endPos:		Vector3	
	--self.rotation:		Vector3F	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_blinkskill:clone()
	return clone(self)
end

function i3k_sbean.role_blinkskill:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_blinkskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:push(self.pos)
	os:push(self.endPos)
	os:push(self.rotation)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 玩家使用技能
i3k_sbean.role_useskill = i3k_class("role_useskill")
function i3k_sbean.role_useskill:ctor()
	self._pname_ = "role_useskill"
	--self.skillID:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_useskill:clone()
	return clone(self)
end

function i3k_sbean.role_useskill:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_useskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:push(self.pos)
	os:push(self.rotation)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 玩家使用技能
i3k_sbean.role_usemapskill = i3k_class("role_usemapskill")
function i3k_sbean.role_usemapskill:ctor()
	self._pname_ = "role_usemapskill"
	--self.skillID:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_usemapskill:clone()
	return clone(self)
end

function i3k_sbean.role_usemapskill:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_usemapskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:push(self.pos)
	os:push(self.rotation)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


i3k_sbean.pet_useskill = i3k_class("pet_useskill")
function i3k_sbean.pet_useskill:ctor()
	self._pname_ = "pet_useskill"
	--self.cfgid:		int32	
	--self.skillID:		int32	
	--self.pos:		Vector3	
	--self.rotation:		Vector3F	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.pet_useskill:clone()
	return clone(self)
end

function i3k_sbean.pet_useskill:decode(is)
	is:popString()
	self.cfgid = is:popNumber()
	self.skillID = is:popNumber()
	self.pos = is:pop(i3k_sbean.Vector3)
	self.rotation = is:pop(i3k_sbean.Vector3F)
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.pet_useskill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.skillID)
	os:push(self.pos)
	os:push(self.rotation)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.timeTick)
end


-- 玩家开始冲锋
i3k_sbean.role_rushstart = i3k_class("role_rushstart")
function i3k_sbean.role_rushstart:ctor()
	self._pname_ = "role_rushstart"
	--self.skillID:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_rushstart:clone()
	return clone(self)
end

function i3k_sbean.role_rushstart:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_rushstart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 佣兵开始冲锋
i3k_sbean.pet_rushstart = i3k_class("pet_rushstart")
function i3k_sbean.pet_rushstart:ctor()
	self._pname_ = "pet_rushstart"
	--self.cfgid:		int32	
	--self.skillID:		int32	
	--self.endPos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.pet_rushstart:clone()
	return clone(self)
end

function i3k_sbean.pet_rushstart:decode(is)
	is:popString()
	self.cfgid = is:popNumber()
	self.skillID = is:popNumber()
	self.endPos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.pet_rushstart:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cfgid)
	os:pushNumber(self.skillID)
	os:push(self.endPos)
	os:push(self.timeTick)
end


-- 取消采矿
i3k_sbean.mineral_quit = i3k_class("mineral_quit")
function i3k_sbean.mineral_quit:ctor()
	self._pname_ = "mineral_quit"
end

function i3k_sbean.mineral_quit:decode(is)
	is:popString()
end

function i3k_sbean.mineral_quit:encode(os)
	os:pushString(self._pname_)
end


-- 陷阱点击
i3k_sbean.trap_click = i3k_class("trap_click")
function i3k_sbean.trap_click:ctor()
	self._pname_ = "trap_click"
	--self.trapID:		int32	
end

function i3k_sbean.trap_click:clone()
	return clone(self)
end

function i3k_sbean.trap_click:decode(is)
	is:popString()
	self.trapID = is:popNumber()
end

function i3k_sbean.trap_click:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.trapID)
end


i3k_sbean.role_shift_start = i3k_class("role_shift_start")
function i3k_sbean.role_shift_start:ctor()
	self._pname_ = "role_shift_start"
	--self.skillID:		int32	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.endpos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.role_shift_start:clone()
	return clone(self)
end

function i3k_sbean.role_shift_start:decode(is)
	is:popString()
	self.skillID = is:popNumber()
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.endpos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.role_shift_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.skillID)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.endpos)
	os:push(self.timeTick)
end


i3k_sbean.pet_shift_start = i3k_class("pet_shift_start")
function i3k_sbean.pet_shift_start:ctor()
	self._pname_ = "pet_shift_start"
	--self.attackpid:		int32	
	--self.skillID:		int32	
	--self.targetID:		int32	
	--self.targetType:		int32	
	--self.ownerID:		int32	
	--self.endpos:		Vector3	
	--self.timeTick:		TimeTick	
end

function i3k_sbean.pet_shift_start:clone()
	return clone(self)
end

function i3k_sbean.pet_shift_start:decode(is)
	is:popString()
	self.attackpid = is:popNumber()
	self.skillID = is:popNumber()
	self.targetID = is:popNumber()
	self.targetType = is:popNumber()
	self.ownerID = is:popNumber()
	self.endpos = is:pop(i3k_sbean.Vector3)
	self.timeTick = is:pop(i3k_sbean.TimeTick)
end

function i3k_sbean.pet_shift_start:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.attackpid)
	os:pushNumber(self.skillID)
	os:pushNumber(self.targetID)
	os:pushNumber(self.targetType)
	os:pushNumber(self.ownerID)
	os:push(self.endpos)
	os:push(self.timeTick)
end


-- 拾取掉落请求
i3k_sbean.role_pickup_drops = i3k_class("role_pickup_drops")
function i3k_sbean.role_pickup_drops:ctor()
	self._pname_ = "role_pickup_drops"
	--self.drops:		set[int32]	
end

function i3k_sbean.role_pickup_drops:clone()
	return clone(self)
end

function i3k_sbean.role_pickup_drops:decode(is)
	is:popString()
	self.drops = is:popNumberSet()
end

function i3k_sbean.role_pickup_drops:encode(os)
	os:pushString(self._pname_)
	os:pushNumberSet(self.drops)
end


-- 拾取场景BUFF请求
i3k_sbean.role_pickup_mapbuff = i3k_class("role_pickup_mapbuff")
function i3k_sbean.role_pickup_mapbuff:ctor()
	self._pname_ = "role_pickup_mapbuff"
	--self.mapBuffID:		int32	
end

function i3k_sbean.role_pickup_mapbuff:clone()
	return clone(self)
end

function i3k_sbean.role_pickup_mapbuff:decode(is)
	is:popString()
	self.mapBuffID = is:popNumber()
end

function i3k_sbean.role_pickup_mapbuff:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mapBuffID)
end


-- 激活神兵请求
i3k_sbean.role_motivate_weapon = i3k_class("role_motivate_weapon")
function i3k_sbean.role_motivate_weapon:ctor()
	self._pname_ = "role_motivate_weapon"
	--self.timeTick:		TimeTick	
	--self.isSPFree:		int32	
end

function i3k_sbean.role_motivate_weapon:clone()
	return clone(self)
end

function i3k_sbean.role_motivate_weapon:decode(is)
	is:popString()
	self.timeTick = is:pop(i3k_sbean.TimeTick)
	self.isSPFree = is:popNumber()
end

function i3k_sbean.role_motivate_weapon:encode(os)
	os:pushString(self._pname_)
	os:push(self.timeTick)
	os:pushNumber(self.isSPFree)
end


-- 神兵绝技触发技能
i3k_sbean.weapon_uskill_trigskill = i3k_class("weapon_uskill_trigskill")
function i3k_sbean.weapon_uskill_trigskill:ctor()
	self._pname_ = "weapon_uskill_trigskill"
end

function i3k_sbean.weapon_uskill_trigskill:decode(is)
	is:popString()
end

function i3k_sbean.weapon_uskill_trigskill:encode(os)
	os:pushString(self._pname_)
end


-- 激活武器祝福
i3k_sbean.role_active_weapon_bless = i3k_class("role_active_weapon_bless")
function i3k_sbean.role_active_weapon_bless:ctor()
	self._pname_ = "role_active_weapon_bless"
end

function i3k_sbean.role_active_weapon_bless:decode(is)
	is:popString()
end

function i3k_sbean.role_active_weapon_bless:encode(os)
	os:pushString(self._pname_)
end


-- 同步单机副本杀怪进度
i3k_sbean.privatemap_kill = i3k_class("privatemap_kill")
function i3k_sbean.privatemap_kill:ctor()
	self._pname_ = "privatemap_kill"
	--self.spawnPointID:		int32	
	--self.position:		Vector3	
	--self.weaponID:		int32	
	--self.damageRank:		map[int32, AttackDamageDetail]	
end

function i3k_sbean.privatemap_kill:clone()
	return clone(self)
end

function i3k_sbean.privatemap_kill:decode(is)
	is:popString()
	self.spawnPointID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.weaponID = is:popNumber()
	self.damageRank = is:popNumberMap(i3k_sbean.AttackDamageDetail)
end

function i3k_sbean.privatemap_kill:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spawnPointID)
	os:push(self.position)
	os:pushNumber(self.weaponID)
	os:pushNumberMap(self.damageRank)
end


-- 单机副本持续掉落
i3k_sbean.privatemap_damage_reward = i3k_class("privatemap_damage_reward")
function i3k_sbean.privatemap_damage_reward:ctor()
	self._pname_ = "privatemap_damage_reward"
	--self.spawnPointID:		int32	
	--self.position:		Vector3	
	--self.index:		vector[int32]	
end

function i3k_sbean.privatemap_damage_reward:clone()
	return clone(self)
end

function i3k_sbean.privatemap_damage_reward:decode(is)
	is:popString()
	self.spawnPointID = is:popNumber()
	self.position = is:pop(i3k_sbean.Vector3)
	self.index = is:popNumberList()
end

function i3k_sbean.privatemap_damage_reward:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.spawnPointID)
	os:push(self.position)
	os:pushNumberList(self.index)
end


-- 同步单机副本陷阱状态
i3k_sbean.privatemap_trap = i3k_class("privatemap_trap")
function i3k_sbean.privatemap_trap:ctor()
	self._pname_ = "privatemap_trap"
	--self.trapID:		int32	
	--self.trapState:		int32	
end

function i3k_sbean.privatemap_trap:clone()
	return clone(self)
end

function i3k_sbean.privatemap_trap:decode(is)
	is:popString()
	self.trapID = is:popNumber()
	self.trapState = is:popNumber()
end

function i3k_sbean.privatemap_trap:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.trapID)
	os:pushNumber(self.trapState)
end


-- 单机本增加神兵熟练度
i3k_sbean.privatemap_weapon_master = i3k_class("privatemap_weapon_master")
function i3k_sbean.privatemap_weapon_master:ctor()
	self._pname_ = "privatemap_weapon_master"
end

function i3k_sbean.privatemap_weapon_master:decode(is)
	is:popString()
end

function i3k_sbean.privatemap_weapon_master:encode(os)
	os:pushString(self._pname_)
end


-- 同步玩家单机副本血量
i3k_sbean.privatemap_role_updatehp = i3k_class("privatemap_role_updatehp")
function i3k_sbean.privatemap_role_updatehp:ctor()
	self._pname_ = "privatemap_role_updatehp"
	--self.hp:		int32	
end

function i3k_sbean.privatemap_role_updatehp:clone()
	return clone(self)
end

function i3k_sbean.privatemap_role_updatehp:decode(is)
	is:popString()
	self.hp = is:popNumber()
end

function i3k_sbean.privatemap_role_updatehp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.hp)
end


-- 同步佣兵单机副本血量
i3k_sbean.privatemap_pet_updatehp = i3k_class("privatemap_pet_updatehp")
function i3k_sbean.privatemap_pet_updatehp:ctor()
	self._pname_ = "privatemap_pet_updatehp"
	--self.cfgID:		int32	
	--self.hp:		int32	
end

function i3k_sbean.privatemap_pet_updatehp:clone()
	return clone(self)
end

function i3k_sbean.privatemap_pet_updatehp:decode(is)
	is:popString()
	self.cfgID = is:popNumber()
	self.hp = is:popNumber()
end

function i3k_sbean.privatemap_pet_updatehp:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.cfgID)
	os:pushNumber(self.hp)
end


-- 同步玩家单机副本装备耐久
i3k_sbean.privatemap_durability = i3k_class("privatemap_durability")
function i3k_sbean.privatemap_durability:ctor()
	self._pname_ = "privatemap_durability"
	--self.wid:		int32	
end

function i3k_sbean.privatemap_durability:clone()
	return clone(self)
end

function i3k_sbean.privatemap_durability:decode(is)
	is:popString()
	self.wid = is:popNumber()
end

function i3k_sbean.privatemap_durability:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.wid)
end


i3k_sbean.query_entity_nearby = i3k_class("query_entity_nearby")
function i3k_sbean.query_entity_nearby:ctor()
	self._pname_ = "query_entity_nearby"
	--self.id:		int32	
	--self.type:		int32	
end

function i3k_sbean.query_entity_nearby:clone()
	return clone(self)
end

function i3k_sbean.query_entity_nearby:decode(is)
	is:popString()
	self.id = is:popNumber()
	self.type = is:popNumber()
end

function i3k_sbean.query_entity_nearby:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.id)
	os:pushNumber(self.type)
end


i3k_sbean.send_towerdefence_alarm = i3k_class("send_towerdefence_alarm")
function i3k_sbean.send_towerdefence_alarm:ctor()
	self._pname_ = "send_towerdefence_alarm"
	--self.type:		int32	
end

function i3k_sbean.send_towerdefence_alarm:clone()
	return clone(self)
end

function i3k_sbean.send_towerdefence_alarm:decode(is)
	is:popString()
	self.type = is:popNumber()
end

function i3k_sbean.send_towerdefence_alarm:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.type)
end


-- 同步地图伤害排行
i3k_sbean.query_map_damage_rank = i3k_class("query_map_damage_rank")
function i3k_sbean.query_map_damage_rank:ctor()
	self._pname_ = "query_map_damage_rank"
end

function i3k_sbean.query_map_damage_rank:decode(is)
	is:popString()
end

function i3k_sbean.query_map_damage_rank:encode(os)
	os:pushString(self._pname_)
end


-- 同步帮派团队本战况
i3k_sbean.query_sect_map_cur_info = i3k_class("query_sect_map_cur_info")
function i3k_sbean.query_sect_map_cur_info:ctor()
	self._pname_ = "query_sect_map_cur_info"
end

function i3k_sbean.query_sect_map_cur_info:decode(is)
	is:popString()
end

function i3k_sbean.query_sect_map_cur_info:encode(os)
	os:pushString(self._pname_)
end


-- 同步地图怪物数量
i3k_sbean.query_map_monster_num = i3k_class("query_map_monster_num")
function i3k_sbean.query_map_monster_num:ctor()
	self._pname_ = "query_map_monster_num"
end

function i3k_sbean.query_map_monster_num:decode(is)
	is:popString()
end

function i3k_sbean.query_map_monster_num:encode(os)
	os:pushString(self._pname_)
end


-- 同步帮派战旗帜状态
i3k_sbean.query_sect_war_flag_status = i3k_class("query_sect_war_flag_status")
function i3k_sbean.query_sect_war_flag_status:ctor()
	self._pname_ = "query_sect_war_flag_status"
end

function i3k_sbean.query_sect_war_flag_status:decode(is)
	is:popString()
end

function i3k_sbean.query_sect_war_flag_status:encode(os)
	os:pushString(self._pname_)
end


-- 查询队友位置信息
i3k_sbean.query_mapcopy_members_pos = i3k_class("query_mapcopy_members_pos")
function i3k_sbean.query_mapcopy_members_pos:ctor()
	self._pname_ = "query_mapcopy_members_pos"
end

function i3k_sbean.query_mapcopy_members_pos:decode(is)
	is:popString()
end

function i3k_sbean.query_mapcopy_members_pos:encode(os)
	os:pushString(self._pname_)
end


i3k_sbean.query_globalpve_boss_rank = i3k_class("query_globalpve_boss_rank")
function i3k_sbean.query_globalpve_boss_rank:ctor()
	self._pname_ = "query_globalpve_boss_rank"
	--self.bossID:		int32	
end

function i3k_sbean.query_globalpve_boss_rank:clone()
	return clone(self)
end

function i3k_sbean.query_globalpve_boss_rank:decode(is)
	is:popString()
	self.bossID = is:popNumber()
end

function i3k_sbean.query_globalpve_boss_rank:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.bossID)
end


-- 神器乱战切换神兵
i3k_sbean.superarena_changeweapon = i3k_class("superarena_changeweapon")
function i3k_sbean.superarena_changeweapon:ctor()
	self._pname_ = "superarena_changeweapon"
	--self.index:		int32	
end

function i3k_sbean.superarena_changeweapon:clone()
	return clone(self)
end

function i3k_sbean.superarena_changeweapon:decode(is)
	is:popString()
	self.index = is:popNumber()
end

function i3k_sbean.superarena_changeweapon:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.index)
end


-- 城战小地图信息
i3k_sbean.citywar_entities_query = i3k_class("citywar_entities_query")
function i3k_sbean.citywar_entities_query:ctor()
	self._pname_ = "citywar_entities_query"
end

function i3k_sbean.citywar_entities_query:decode(is)
	is:popString()
end

function i3k_sbean.citywar_entities_query:encode(os)
	os:pushString(self._pname_)
end


-- 驱赶马匹
i3k_sbean.drive_out_horses_req = i3k_class("drive_out_horses_req")
function i3k_sbean.drive_out_horses_req:ctor()
	self._pname_ = "drive_out_horses_req"
	--self.mid:		int32	
end

function i3k_sbean.drive_out_horses_req:clone()
	return clone(self)
end

function i3k_sbean.drive_out_horses_req:decode(is)
	is:popString()
	self.mid = is:popNumber()
end

function i3k_sbean.drive_out_horses_req:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.mid)
end


-- 修改战斗姿态请求  平衡姿态传0, 攻击姿态1,防御姿态2
i3k_sbean.modify_combat_type = i3k_class("modify_combat_type")
function i3k_sbean.modify_combat_type:ctor()
	self._pname_ = "modify_combat_type"
	--self.combatType:		int32	
end

function i3k_sbean.modify_combat_type:clone()
	return clone(self)
end

function i3k_sbean.modify_combat_type:decode(is)
	is:popString()
	self.combatType = is:popNumber()
end

function i3k_sbean.modify_combat_type:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.combatType)
end


-- 同步伤害排行榜
i3k_sbean.gaintboss_rank_query = i3k_class("gaintboss_rank_query")
function i3k_sbean.gaintboss_rank_query:ctor()
	self._pname_ = "gaintboss_rank_query"
end

function i3k_sbean.gaintboss_rank_query:decode(is)
	is:popString()
end

function i3k_sbean.gaintboss_rank_query:encode(os)
	os:pushString(self._pname_)
end


-- 同步个人积分排行榜
i3k_sbean.survive_score_rank_query = i3k_class("survive_score_rank_query")
function i3k_sbean.survive_score_rank_query:ctor()
	self._pname_ = "survive_score_rank_query"
end

function i3k_sbean.survive_score_rank_query:decode(is)
	is:popString()
end

function i3k_sbean.survive_score_rank_query:encode(os)
	os:pushString(self._pname_)
end


-- 玩家切换视角
i3k_sbean.role_set_view = i3k_class("role_set_view")
function i3k_sbean.role_set_view:ctor()
	self._pname_ = "role_set_view"
	--self.roleID:		int32	
end

function i3k_sbean.role_set_view:clone()
	return clone(self)
end

function i3k_sbean.role_set_view:decode(is)
	is:popString()
	self.roleID = is:popNumber()
end

function i3k_sbean.role_set_view:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.roleID)
end


-- 玩家取消复活变身
i3k_sbean.survive_quit_alter = i3k_class("survive_quit_alter")
function i3k_sbean.survive_quit_alter:ctor()
	self._pname_ = "survive_quit_alter"
end

function i3k_sbean.survive_quit_alter:decode(is)
	is:popString()
end

function i3k_sbean.survive_quit_alter:encode(os)
	os:pushString(self._pname_)
end


-- 家园宠物查询
i3k_sbean.homeland_pet_position_query = i3k_class("homeland_pet_position_query")
function i3k_sbean.homeland_pet_position_query:ctor()
	self._pname_ = "homeland_pet_position_query"
end

function i3k_sbean.homeland_pet_position_query:decode(is)
	is:popString()
end

function i3k_sbean.homeland_pet_position_query:encode(os)
	os:pushString(self._pname_)
end


-- 同步马车位置
i3k_sbean.princess_marry_get_pos = i3k_class("princess_marry_get_pos")
function i3k_sbean.princess_marry_get_pos:ctor()
	self._pname_ = "princess_marry_get_pos"
end

function i3k_sbean.princess_marry_get_pos:decode(is)
	is:popString()
end

function i3k_sbean.princess_marry_get_pos:encode(os)
	os:pushString(self._pname_)
end


-- 同步排行榜
i3k_sbean.princess_marry_get_rank = i3k_class("princess_marry_get_rank")
function i3k_sbean.princess_marry_get_rank:ctor()
	self._pname_ = "princess_marry_get_rank"
end

function i3k_sbean.princess_marry_get_rank:decode(is)
	is:popString()
end

function i3k_sbean.princess_marry_get_rank:encode(os)
	os:pushString(self._pname_)
end


-- 神机藏海复位
i3k_sbean.hidden_sea_reset_position = i3k_class("hidden_sea_reset_position")
function i3k_sbean.hidden_sea_reset_position:ctor()
	self._pname_ = "hidden_sea_reset_position"
end

function i3k_sbean.hidden_sea_reset_position:decode(is)
	is:popString()
end

function i3k_sbean.hidden_sea_reset_position:encode(os)
	os:pushString(self._pname_)
end


-- 脱离卡死
i3k_sbean.longevity_loft_reset_pos = i3k_class("longevity_loft_reset_pos")
function i3k_sbean.longevity_loft_reset_pos:ctor()
	self._pname_ = "longevity_loft_reset_pos"
end

function i3k_sbean.longevity_loft_reset_pos:decode(is)
	is:popString()
end

function i3k_sbean.longevity_loft_reset_pos:encode(os)
	os:pushString(self._pname_)
end


-- 传送到boss房间
i3k_sbean.longevity_loft_boss_teleport = i3k_class("longevity_loft_boss_teleport")
function i3k_sbean.longevity_loft_boss_teleport:ctor()
	self._pname_ = "longevity_loft_boss_teleport"
end

function i3k_sbean.longevity_loft_boss_teleport:decode(is)
	is:popString()
end

function i3k_sbean.longevity_loft_boss_teleport:encode(os)
	os:pushString(self._pname_)
end


-- 同步排行榜
i3k_sbean.longevity_loft_get_rank = i3k_class("longevity_loft_get_rank")
function i3k_sbean.longevity_loft_get_rank:ctor()
	self._pname_ = "longevity_loft_get_rank"
end

function i3k_sbean.longevity_loft_get_rank:decode(is)
	is:popString()
end

function i3k_sbean.longevity_loft_get_rank:encode(os)
	os:pushString(self._pname_)
end


-- 御灵鬼岛召唤
i3k_sbean.ghost_spirit_summoned = i3k_class("ghost_spirit_summoned")
function i3k_sbean.ghost_spirit_summoned:ctor()
	self._pname_ = "ghost_spirit_summoned"
	--self.pointId:		int32	
end

function i3k_sbean.ghost_spirit_summoned:clone()
	return clone(self)
end

function i3k_sbean.ghost_spirit_summoned:decode(is)
	is:popString()
	self.pointId = is:popNumber()
end

function i3k_sbean.ghost_spirit_summoned:encode(os)
	os:pushString(self._pname_)
	os:pushNumber(self.pointId)
end


--Channel: S2C	server to client

	-- echo client stamp + 1
	--Packet:server_echo

	-- sync server info
	--Packet:server_info

	-- 强制用户退出
	--Packet:user_force_close

	-- 用户登录后返回角色列表
	--Packet:user_role_list

	-- 客户端登录响应
	--Packet:user_login_res

	-- 客户端通知服务器要退出到选人界面
	--Packet:role_logout_res

	-- 客户端查询排队位置
	--Packet:role_loginqueue_pos

	-- sync role refresh day
	--Packet:game_sync

	-- sync client assert ignore list
	--Packet:assert_ignore_list

	-- 同步角色基本信息
	--Packet:role_base

	-- 玩家角色名非法信息
	--Packet:role_name_invalid

	-- 特权卡更新信息
	--Packet:role_specialcards

	-- 同步角色背包信息
	--Packet:role_bag

	-- 同步角色穿戴信息
	--Packet:role_wear

	-- 同步角色套装收集信息
	--Packet:role_suite

	-- 同步角色龙印信息
	--Packet:role_sealinfo

	-- 同步角色技能信息
	--Packet:role_skill

	-- 同步角色心法信息
	--Packet:role_spirit

	-- 同步角色神兵信息(nextUSkillCanTrigTime 下次神兵绝技能使用触发技能时间戳)
	--Packet:role_weapon

	-- 同步角色佣兵信息
	--Packet:role_pet

	-- 同步角色当前主线任务信息
	--Packet:role_task

	-- 同步坐骑信息（登录时同步）
	--Packet:role_horseinfo

	-- 同步当前藏宝图、收藏品(登录时同步)
	--Packet:role_treasure_info

	-- 登录后同步的普通副本地图进度信息
	--Packet:role_normal_mapcopy_log

	-- 登录后同步的活动副本地图组进度信息
	--Packet:role_activity_mapgroup_log

	-- 登录后同步守护副本进度信息
	--Packet:role_towerdefence_log

	-- 登录后同步竞技场参与次数
	--Packet:role_arena_entertimes

	-- 同步角色当前自创武功信息
	--Packet:role_diyskill

	-- 同步角色帮派名字和职位
	--Packet:role_sectinfo

	-- 同步角色帮派光环信息
	--Packet:role_sectaura

	-- 同步角色帮派任务信息
	--Packet:role_secttask

	-- 同步角色组队信息
	--Packet:role_team

	-- 同步副本房间信息
	--Packet:role_mroom

	-- 同步好友信息
	--Packet:role_friends

	-- 同步最近聊天信息
	--Packet:role_msg

	-- 同步4v4竞技场信息
	--Packet:role_superarena

	-- 同步势力战信息(登录时同步)
	--Packet:role_forcewar

	-- 指引信息同步
	--Packet:role_leadinfo

	-- 强制剧情同步
	--Packet:role_leadplot

	-- 即将开启预览
	--Packet:role_func_preview

	-- 江湖客栈引导
	--Packet:role_treasureguide

	-- 离线经验
	--Packet:role_offlineexp

	-- 登录时同步历练系统(历练、藏书、参悟)
	--Packet:role_expcoin

	-- 登录时同步称号信息
	--Packet:role_titles

	-- 登录时同步复活相关信息
	--Packet:role_revive_info

	-- 登录时同步支线任务信息
	--Packet:role_branch_task

	-- 登录时同步史诗任务信息
	--Packet:role_epic_task

	--Packet:role_climb_tower

	-- 登录时同步运镖信息
	--Packet:role_sect_deliver

	-- 同步添加赏金币
	--Packet:role_add_robmoney

	-- 登录时同步劫镖标志
	--Packet:role_rob_flag

	-- 登录时同步镖车位置
	--Packet:role_escortcar_location

	-- 登录时同步七日留存信息
	--Packet:role_rmactivity

	-- 同步服务器冲关等级
	--Packet:speedup_level

	-- 同步姻缘等级
	--Packet:role_marriage_level

	-- 同步离婚时间
	--Packet:role_divorce_time

	-- 登录时同步角色势力声望信息
	--Packet:role_forcefame_info

	-- 通知客户端切换地图
	--Packet:role_change_map

	-- 通知客户端当前地图神兵天隙NPC
	--Packet:role_weapon_npc

	-- 通知新聊天信息到达
	--Packet:role_new_msg

	-- 通知客户点飞鸽传书信息
	--Packet:role_kite_new_msg

	-- 通知客户端队友击杀
	--Packet:role_team_kill

	-- 通知客户端角色钻石增加
	--Packet:role_add_diamond

	-- 通知客户端角色金币增加
	--Packet:role_add_coin

	-- 通知客户端角色帮贡增加
	--Packet:role_add_sectcontribution

	-- 通知客户端角色竞技场点数增加
	--Packet:role_add_arenapoint

	-- 通知客户端角色4v4竞技场点数增加
	--Packet:role_add_superarenahonor

	-- 通知客户端角色商誉值增加
	--Packet:role_add_credit

	-- 通知客户端角色装备能量增加
	--Packet:role_add_equipenergy

	-- 通知客户端角色红利
	--Packet:role_add_bonus

	-- 通知客户端角色宝石能量增加
	--Packet:role_add_gemenergy

	-- 通知客户端角色心法悟性增加
	--Packet:role_add_bookinspiration

	-- 通知客户端角色武运增加
	--Packet:role_add_weaponsoulcoin

	-- 通知客户端角色经验增长
	--Packet:role_add_exp

	-- 通知客户端角色历练币增长
	--Packet:role_add_expcoin

	-- 通知客户端角色离线精灵修炼点增长
	--Packet:role_add_offline_func_point

	-- 通知客户端角色宠物赛跑货币增长
	--Packet:role_add_petrun_coin

	-- 通知客户端角色体力增长
	--Packet:role_add_vit

	-- 通知客户端角色分解能量增长
	--Packet:role_add_splitsp

	-- 通知客户端角色魅力值增长
	--Packet:role_add_charm

	-- 通知客户端角色武勋(累计的武勋)增加
	--Packet:role_add_feat

	-- 通知客户端增加道具
	--Packet:role_add_item

	-- 通知客户端增加道具
	--Packet:role_add_items

	-- 通知客户端删除道具
	--Packet:role_del_item

	-- 通知客户端删除道具
	--Packet:role_del_items

	-- 通知客户端增加随从战绩
	--Packet:pet_add_exploit

	-- 通知客户端增加龙币
	--Packet:role_add_dragoncoin

	-- 通知客户端增加声望
	--Packet:role_add_fame

	-- 通知客户端增加工资币
	--Packet:role_add_sectsalarycoin

	-- 通知客户端增加八卦能量
	--Packet:role_add_eightdiagramenergy

	-- 通知客户端增加奇遇值
	--Packet:role_add_adventure

	-- 通知客户端更新称号(endTime 0：删除称号， -1：增加永久称号， >0：增加时效称号)
	--Packet:role_title_update

	-- 血池自动使用协议
	--Packet:role_hppool_used

	-- 通知客户端进行当天计数刷新（需要刷新 loginDays，每日计数清零如每日进入副本次数等）
	--Packet:role_day_refresh

	-- 帮派光环更新协议
	--Packet:sect_aura_update

	-- 通知客户端角色宗门矿增加
	--Packet:role_add_ore

	-- 通知客户端显示服务器角色战力值，用于调试
	--Packet:role_show_power

	-- 通知客户端显示服务器偏移时间，用于调试
	--Packet:role_show_timeoffset

	--[[
				打开二级功能界面测试红点通知
				第0位为是否有新邮件
				第1位为是否有新完成的日常任务
				第2位为是否有新完成的挑战任务
				第3位为福利小红点（不包括特权卡）
				第4位为是否有新的运营活动奖可以领取
				第5位为是否有竞技场积分奖励可以领取
				第6位为是否有首充奖励可以领取
				第7位为是否有在线奖励可以参与
				第8位为是否有在线奖励可以领取
				第9位为是否有团购活动（是否显示团购图标）
				第10位为是否有团购商品能购买（是否显示团购小红点）
				第11位为是否有限时商品能购买（是否显示限时特卖小红点）
				第12位为
				第13位为是否有约战NPC通知（是否显示约战NPC图标）
				第14位为
				第15位为是否有充值活动相关小红点
				第16位为是否有师徒相关小红点
				第17位为五绝秘藏相关小红点
				第19位为是否有连续使用道具活动小红点
				第20位为是否有周常任务红点
				第21位为是否有宠物求取红点
				第22位为是否占卜或是否领奖
				第23位为是否显示世界杯图标
				第24位为是否显示伙伴红点
				//
				第26位为姻缘成就红点
				第27位
				第28位为新转盘红点
	 ]]
	--Packet:role_notice

	-- 每日首次登陆：福利同步
	--Packet:day_first_login

	--[[
				第0位为是否有新的调研奖励
				第1位为是否有新的封测巨献奖励
				第2位为是否有新的等级奖励
				第3位为是否有新的资料完善奖励
				第4位为是否有新的最后冲刺奖励
				第5位为是否有新的限时领奖奖励
				第6位为是否有新的强化比拼奖励
				第7位为是否有新的官方调研奖励
				isFirstLogin返回是否为本日第一次登陆，是则返回1，否则返回0
	 ]]
	--Packet:role_betaactivity_notice

	--Packet:role_firstpay

	-- 通知客户端同步随从合修任务
	--Packet:role_new_pet_task

	-- 通知秘境任务
	--Packet:role_secret_task

	-- 同步帮派申请人数
	--Packet:sect_applications_number

	-- 同步每日评论次数
	--Packet:messageboard_day_comment_time

	-- 登录时同步buff药
	--Packet:role_buffdrugs

	-- 登录时同步表情包结束时间
	--Packet:role_iconpackages

	-- 登录时同步武魂信息
	--Packet:role_weaponsoul

	-- 发送聊天消息响应
	--Packet:msg_send_res

	-- 通知玩家被禁言
	--Packet:role_chat_banned

	-- 同步玩家聊天房间
	--Packet:role_chat_room

	-- 进入大地图传送点响应
	--Packet:waypoint_enter_res

	-- 脱离卡死点
	--Packet:wrongpos_leave_res

	-- 同步世界地图分线状态(curLine: 从1开始)
	--Packet:worldline_sync_res

	-- 切换当前地图分线
	--Packet:worldline_change_res

	-- 查询机器人信息响应
	--Packet:query_robot_res

	-- 查询玩家信息响应
	--Packet:query_rolebrief_res

	-- 获取玩家的特性信息
	--Packet:query_rolefeature_res

	-- 获取玩家所有已获得的佣兵信息
	--Packet:query_petoverviews_res

	-- 获取玩家所有已获得的神兵信息
	--Packet:query_weaponoverviews_res

	-- 获取玩家所有已获得的暗器信息
	--Packet:query_hideWeaponoverviews_res

	-- 获取玩家所有坐骑信息
	--Packet:query_horseoverviews_res

	-- 获取玩家单个坐骑信息
	--Packet:query_single_horseoverview_res

	-- 获取玩家内甲信息
	--Packet:query_armoroverviews_res

	-- 获取玩家武魂信息
	--Packet:query_weaponsouloverview_res

	-- 原地复活响应
	--Packet:role_revive_insitu_res

	-- cpr复活响应
	--Packet:role_revive_cpr_res

	-- 其他方式复活响应
	--Packet:role_revive_other_res

	-- 安全点复活
	--Packet:role_revive_safe_res

	-- 帮派驻地安全点复活
	--Packet:role_sect_zone_revive_safe_res

	-- 转职
	--Packet:role_transform_res

	-- 签到同步
	--Packet:checkin_sync_res

	-- 签到领奖
	--Packet:checkin_take_res

	-- 签到领取累计额外奖励
	--Packet:checkin_take_additional_res

	-- 商城同步
	--Packet:mall_sync_res

	-- 商城购买
	--Packet:mall_buy_res

	-- 福利同步
	--Packet:benefit_sync_res

	-- 充值相关活动同步
	--Packet:payactivity_sync_res

	-- 同步首次充值送礼活动信息
	--Packet:firstpaygift_sync_res

	-- 领取首次充值送礼活动奖励
	--Packet:firstpaygift_take_res

	-- 同步每日充值送礼活动信息
	--Packet:dailypaygift_sync_res

	-- 领取每日充值送礼活动奖励
	--Packet:dailypaygift_take_res

	-- 同步持续充值送礼活动信息
	--Packet:lastpaygift_sync_res

	-- 领取持续充值送礼活动奖励
	--Packet:lastpaygift_take_res

	-- 同步活动挑战活动信息
	--Packet:activitychallengegift_sync_res

	-- 领取活动挑战活动奖励
	--Packet:activitychallengegift_take_res

	-- 同步升级特惠活动信息
	--Packet:upgradepurchase_sync_res

	-- 购买升级特惠活动奖励
	--Packet:upgradepurchase_buy_res

	-- 同步活跃领奖活动信息
	--Packet:schdulegift_sync_res

	-- 领取活跃领奖活动奖励
	--Packet:schdulegift_take_res

	-- 同步充值送礼活动信息
	--Packet:paygift_sync_res

	-- 领取充值送礼活动奖励
	--Packet:paygift_take_res

	-- 同步充值折扣礼包活动信息
	--Packet:paydiscountgift_sync_res

	-- 领取充值折扣礼包活动奖励
	--Packet:paydiscountgift_take_res

	-- 同步消费送礼活动信息
	--Packet:consumegift_sync_res

	-- 领取消费送礼活动奖励
	--Packet:consumegift_take_res

	-- 同步冲级送礼活动信息
	--Packet:upgradegift_sync_res

	-- 领取冲级送礼活动奖励
	--Packet:upgradegift_take_res

	-- 红包拿来活动信息
	--Packet:redpack_sync_res

	-- 红包拿来活动奖励
	--Packet:redpack_take_res

	-- 充值返还活动信息
	--Packet:payrebate_sync_res

	-- 充值返还活动奖励
	--Packet:payrebate_take_res

	-- 同步投资基金活动信息
	--Packet:investmentfund_sync_res

	-- 买投资基金
	--Packet:investmentfund_buy_res

	-- 领取投资基金活动奖励
	--Packet:investmentfund_take_res

	-- 同步成长基金活动信息
	--Packet:growthfund_sync_res

	-- 买成长基金
	--Packet:growthfund_buy_res

	-- 领取成长基金活动奖励
	--Packet:growthfund_take_res

	-- 同步双倍掉落副本活动信息
	--Packet:doubledrop_sync_res

	-- 同步额外掉落副本活动信息
	--Packet:extradrop_sync_res

	-- 同步兑换礼品活动信息
	--Packet:exchangegift_sync_res

	-- 领取兑换礼品
	--Packet:exchangegift_take_res

	-- 同步累积登录送礼活动信息
	--Packet:logingift_sync_res

	-- 领取累积登录送礼活动奖励
	--Packet:logingift_take_res

	-- 同步礼包兑换活动信息
	--Packet:giftpackage_sync_res

	-- 兑换礼包
	--Packet:giftpackage_take_res

	-- 公测返现兑换查询结果
	--Packet:pbtcashback_sync_res

	-- 公测返现兑换
	--Packet:pbtcashback_take_res

	-- 充值排行活动同步
	--Packet:payrank_sync_res

	-- 消费排行活动同步
	--Packet:consumerank_sync_res

	-- 新登陆活动同步
	--Packet:luckygift_sync_res

	-- 新登陆活动领奖
	--Packet:luckygift_take_res

	-- 团购活动同步
	--Packet:groupbuy_sync_res

	-- 购买团购商品
	--Packet:groupbuy_buy_res

	-- 拼多多活动同步
	--Packet:morerolediscount_sync_res

	-- 参与拼多多商品团购
	--Packet:morerolediscount_join_res

	-- 购买拼多多商品
	--Packet:morerolediscount_buy_res

	-- 团购活动同步
	--Packet:flashsale_sync_res

	-- 购买团购商品
	--Packet:flashsale_buy_res

	-- 打开宝箱
	--Packet:falshsale_open_box_res

	-- 转盘同步
	--Packet:luckyroll_sync_res

	-- 转转盘回应
	--Packet:luckyroll_play_res

	-- 连续转转盘回应
	--Packet:luckyroll_multiplay_res

	-- 直购礼包活动信息
	--Packet:directpurchase_sync_res

	-- 领取直购礼包活动奖励
	--Packet:directpurchase_take_res

	-- 老虎机活动信息
	--Packet:onearmbandit_sync_res

	-- 领取老虎机活动奖励的元宝数
	--Packet:onearmbandit_take_res

	-- 金蛋活动信息
	--Packet:goldenegg_sync_res

	-- 砸金蛋奖励的道具
	--Packet:goldenegg_play_res

	-- 砸金蛋刷新奖励列表
	--Packet:goldenegg_refresh_res

	-- 广告同步协议回应
	--Packet:adver_sync_res

	-- 同步循环基金活动信息
	--Packet:cyclefund_sync_res

	-- 买循环基金
	--Packet:cyclefund_buy_res

	-- 领取循环基金活动奖励
	--Packet:cyclefund_take_res

	-- 主动离开副本响应
	--Packet:mapcopy_leave_res

	-- 首次进入副本后或断线重登录后通知客户端副本的时间信息
	--Packet:role_mapcopy_timesync

	-- 首次进入副本后或断线重登录后通知客户端当前副本是否可以拾取
	--Packet:role_mapcopy_cantake_drop

	-- 开始进入标准副本响应
	--Packet:normalmap_start_res

	-- 开始进入活动副本响应
	--Packet:activitymap_start_res

	-- 通知客户端普通副本开始（不包括副本扫荡）
	--Packet:role_commonmap_start

	-- 通知客户端普通副本结束（不包括副本扫荡，可能是boss死亡结束，可能是玩家死亡结束，可能是完成副本，也可能是未完成副本）socre 小于等于 0未完成
	--Packet:role_commonmap_end

	-- 势力战奖励副本开始
	--Packet:role_forcewar_rewardmap_start

	-- 活动副本杀怪计数同步
	--Packet:role_activitymap_sync

	-- 通知客户端开始副本翻盘奖励（不包括副本扫荡）
	--Packet:role_commonmap_result

	-- 自动翻牌抽奖
	--Packet:role_commonmap_autocard

	-- 手动翻牌抽奖回应
	--Packet:commonmap_selectcard_res

	-- 购买进入标准副本次数的响应
	--Packet:normalmap_buytimes_res

	-- 购买进入活动副本次数的响应
	--Packet:activitymap_buytimes_res

	-- 副本扫荡请求响应（返回是否成功以及成功时的奖励）
	--Packet:privatemap_sweep_res

	-- 活动副本扫荡请求响应（返回是否成功以及成功时的奖励）
	--Packet:activity_sweep_res

	-- 特殊活动记录
	--Packet:activity_instance_logs_sync_res

	-- 活动副本一键扫荡
	--Packet:activity_multi_sweep_res

	-- 同步试炼周常宝箱
	--Packet:activitymap_week_sync_res

	-- 领取周常宝箱奖励
	--Packet:activitymap_week_rewards_res

	-- 同步系统邮件
	--Packet:mail_syncsys_res

	-- 同步临时邮件
	--Packet:mail_synctmp_res

	-- 读邮件
	--Packet:mail_read_res

	-- 读系统邮件
	--Packet:mail_readsys_res

	-- 读临时邮件
	--Packet:mail_readtmp_res

	-- 取邮件附件
	--Packet:mail_take_res

	-- 取系统邮件附件
	--Packet:mail_takesys_res

	-- 取临时邮件附件
	--Packet:mail_taketmp_res

	-- 邮件删除
	--Packet:mail_del_res

	-- 系统邮件删除
	--Packet:mail_delsys_res

	-- 临时邮件删除
	--Packet:mail_deltmp_res

	-- 取全部系统邮件附件
	--Packet:mail_takeallsys_res

	-- 取全部临时邮件附件
	--Packet:mail_takealltmp_res

	--Packet:role_tempmail_full

	-- 同步帮派邮件
	--Packet:mail_syncsect_res

	-- 读帮派邮件
	--Packet:mail_readsect_res

	-- 帮派邮件删除
	--Packet:mail_delsect_res

	-- 系统同步滚动通知消息
	--Packet:rollnotice_sync

	-- rollnotice_query的异步响应
	--Packet:rollnotice_detail

	-- 同步排行榜
	--Packet:rank_sync_res

	-- 同步帮派排行榜
	--Packet:sectrank_sync_res

	-- 获取排行榜列表
	--Packet:rank_get_res

	-- 获取排行榜列表
	--Packet:sectrank_get_res

	-- 获取排行榜列表
	--Packet:fightgrouprank_get_res

	-- 获取自己排名(不在榜上返回0)
	--Packet:rank_self_res

	-- 获取自己帮派排名(不在榜上返回0)
	--Packet:sectrank_self_res

	-- 买金币
	--Packet:buy_coin_res

	-- 买体力
	--Packet:buy_vit_res

	-- 充值结果通知信息
	--Packet:role_pay_notice

	-- vip更新信息
	--Packet:user_vip_sync

	-- 同步充值信息
	--Packet:pay_sync_res

	-- 神模式充值
	--Packet:pay_asgod_res

	-- 领取vip礼包的响应信息
	--Packet:vip_take_res

	-- 背包扩展
	--Packet:bag_expand_res

	-- 出售背包里的装备
	--Packet:bag_sellequip_res

	-- 出售背包里的道具物品
	--Packet:bag_sellitem_res

	-- 出售背包里的宝石
	--Packet:bag_sellgem_res

	-- 出售背包里的心法书
	--Packet:bag_sellbook_res

	-- 批量出售背包里的装备
	--Packet:bag_batchsellequips_res

	-- 出售背包里的道具物品
	--Packet:bag_batchsellitems_res

	-- 出售背包里的宝石物品
	--Packet:bag_batchsellgems_res

	-- 出售背包里的心法书物品
	--Packet:bag_batchsellbooks_res

	-- 使用道具礼包
	--Packet:bag_useitemgift_res

	-- 使用道具n选n礼包
	--Packet:bag_useitemchosegift_res

	-- 使用神装礼包
	--Packet:bag_useitemgiftnew_res

	-- 使用神装n选n礼包
	--Packet:bag_useitemchosegiftnew_res

	-- 使用道具金币包
	--Packet:bag_useitemcoin_res

	-- 使用道具钻石包
	--Packet:bag_useitemdiamond_res

	-- 使用道具经验丹
	--Packet:bag_useitemexp_res

	-- 使用道具普通回复hp
	--Packet:bag_useitemhp_res

	-- 使用道具vip普通回复hp
	--Packet:bag_useitemhppool_res

	-- 使用道具宝箱,返回值-1表示背包空间不足，不足以打开宝箱
	--Packet:bag_useitemchest_res

	-- 使用道具装备能量丹
	--Packet:bag_useitemequipenergy_res

	-- 使用道具宝石能量丹
	--Packet:bag_useitemgemenergy_res

	-- 使用熔炼精华道具
	--Packet:bag_useitemforgeenergy_res

	-- 使用道具心法悟性丹
	--Packet:bag_useiteminspiration_res

	-- 使用道具体力丹
	--Packet:bag_useitemvit_res

	-- 批量使用道具体力丹
	--Packet:bag_batchuseitemvit_res

	-- 使用时装道具
	--Packet:bag_useitemfashion_res

	-- 使用历练瓶(满)道具
	--Packet:bag_useitemexpcoinpool_res

	-- 使用月卡道具
	--Packet:bag_usemonthlycard_res

	-- 使用VIP体验卡道具
	--Packet:bag_usevipcard_res

	-- 使用增加武勋道具
	--Packet:bag_useitemfeat_res

	-- 使用技能道具
	--Packet:bag_useitemskill_res

	-- 使用信件道具
	--Packet:bag_useitemletter_res

	-- 使用善恶值道具
	--Packet:bag_useitemevil_res

	-- 合成碎片
	--Packet:bag_piececompose_res

	-- 使用能力强化道具
	--Packet:bag_useitempropstrength_res

	-- 使用离线精灵修炼点添加道具
	--Packet:bag_useitemofflinefuncpoint_res

	-- 使用称号道具
	--Packet:bag_useitemtitle_res

	-- 使用绝技道具
	--Packet:bag_useitemuskill_res

	-- 使用头像激活道具
	--Packet:bag_useitemhead_res

	-- 使用家园装备道具
	--Packet:bag_useitemhomelandequip_res

	-- 使用vip经验增加道具
	--Packet:bag_useitemaddvipexp_res

	-- 使用生产能量增加道具
	--Packet:bag_useitemaddproducesplitsp_res

	-- 使用buff药
	--Packet:bag_useitembuffdrug_res

	-- 使用加武运道具
	--Packet:bag_useweaponsoulcoinadder_res

	-- 使用表情包
	--Packet:bag_useitemiconpackage_res

	-- 使用聊天框
	--Packet:bag_usechatboxitem_res

	-- 销毁道具回应
	--Packet:bag_destoryitems_res

	-- 使用正义徽章道具
	--Packet:bag_useitemgbcoin_res

	-- 使用装备升级道具
	--Packet:bag_useitem_equip_up_to_level_res

	-- 使用势力声望道具
	--Packet:bag_useitem_forcefame_res

	-- 使用试炼副本增加次数道具
	--Packet:bag_useitem_add_activity_map_cnt_res

	-- 穿装备
	--Packet:equip_upwear_res

	-- 脱装备
	--Packet:equip_downwear_res

	-- 装备强化
	--Packet:equip_levelup_res

	-- 装备强化突破
	--Packet:equip_levelup_break_res

	-- 批量装备强化
	--Packet:equip_batchlevelup_res

	-- 装备升星
	--Packet:equip_starup_res

	-- 水晶装备修复
	--Packet:equip_repair_res

	-- 自动穿装备
	--Packet:equip_autoupwear_res

	-- 切换装备特效显示等级
	--Packet:equippart_setshowlvl_res

	-- 装备部位宝石升级
	--Packet:gem_levelup_res

	-- 装备部位宝石镶嵌
	--Packet:gem_inlay_res

	-- 装备部位宝石升级
	--Packet:gem_unlay_res

	-- 背包宝石转化
	--Packet:gem_trans_res

	-- 装备精炼
	--Packet:equip_refine_res

	-- 装备精炼保存
	--Packet:equip_refine_save_res

	-- 装备淬炼
	--Packet:equip_quench_res

	-- 装备淬炼保存
	--Packet:equip_quench_save_res

	-- 同步打造界面信息打造(equip:当前正在打造的装备, legends:当前打造出来的属性)
	--Packet:legend_sync_res

	-- 打造传世装备
	--Packet:legend_make_res

	-- 放弃传世装备属性
	--Packet:legend_quit_res

	-- 保存传世装备属性
	--Packet:legend_save_res

	-- 宝石祝福开启
	--Packet:equip_gem_bless_res

	-- 装备转化
	--Packet:equip_trans_res

	-- 同步驻地精灵祝福信息(key是档位，value是剩余次数)
	--Packet:sync_sect_zone_spirit_bless_res

	--Packet:use_sect_zone_spirit_bless_res

	-- 驻地精灵是否进行
	--Packet:sect_zone_spirit_exist_res

	--Packet:sync_sect_zone_spirit_last_bless

	-- 选择技能上战
	--Packet:skill_select_res

	-- 技能升级
	--Packet:skill_levelup_res

	-- 技能全部升级
	--Packet:skill_multi_levelup_res

	-- 技能升界
	--Packet:skill_enhance_res

	-- 技能解锁
	--Packet:skill_unlock_res

	-- 装备绝技
	--Packet:uniqueskill_set_res

	-- 心法学习
	--Packet:spirit_learn_res

	-- 心法研读
	--Packet:spirit_levelup_res

	-- 心法装备
	--Packet:spirit_install_res

	-- 心法卸载
	--Packet:spirit_uninstall_res

	-- 合成神兵
	--Packet:weapon_make_res

	-- 神兵升级
	--Packet:weapon_levelup_res

	-- 神兵买等级
	--Packet:weapon_buylevel_res

	-- 神兵升星
	--Packet:weapon_starup_res

	-- 选择使用神兵
	--Packet:weapon_select_res

	-- 打开神兵界面同步信息
	--Packet:weapon_sync_res

	-- 神兵特技激活
	--Packet:weapon_uskill_open_res

	-- 设置神兵形态
	--Packet:weapon_setform_res

	-- 进入神兵副本请求
	--Packet:weaponmap_start_res

	-- 神兵觉醒
	--Packet:weapon_awake_res

	-- 神兵觉醒 兵魂技能升级
	--Packet:weapon_awake_skill_lvlup_res

	-- 登录同步神兵觉醒添加的经验
	--Packet:weapon_awake_exp_sync

	-- 神兵觉醒添加经验通知
	--Packet:weapon_awake_exp_add

	-- 打开佣兵界面,同步信息
	--Packet:pet_sync_res

	-- 生成佣兵
	--Packet:pet_make_res

	-- 佣兵转职
	--Packet:pet_transform_res

	-- 佣兵升级
	--Packet:pet_levelup_res

	-- 佣兵买等级
	--Packet:pet_buylevel_res

	-- 佣兵升星
	--Packet:pet_starup_res

	-- 佣兵突破等级提升
	--Packet:pet_breakskillvlup_res

	-- 世界地图佣兵设置
	--Packet:pet_worldmapset_res

	-- 单人副本佣兵设置
	--Packet:pet_privatemapset_res

	-- 帮派副本佣兵设置
	--Packet:pet_sectmapset_res

	-- 活动副本佣兵设置
	--Packet:pet_activitymapset_res

	-- 进入身世副本协议
	--Packet:lifetaskmap_start_res

	-- 武库心法升级(第一次相当于解锁心法)
	--Packet:petspirit_lvlup_res

	-- 随从心法修习(第一次默认保存)
	--Packet:petspirit_learn_res

	-- 随从心法替换
	--Packet:petspirit_replace_res

	-- 宠物改名
	--Packet:pet_rename_res

	-- 日常任务同步任务列表协议
	--Packet:dtask_sync_res

	-- 日常任务获取任务奖励协议
	--Packet:dtask_take_res

	-- 日常任务一键领取奖励协议
	--Packet:dtask_take_batch_res

	-- 同步的挑战任务sdk参数
	--Packet:role_chtask_sdkparams

	-- 挑战任务同步任务列表协议
	--Packet:chtask_sync_res

	-- 挑战任务获取任务奖励协议
	--Packet:chtask_take_res

	-- 挑战任务批量获取任务奖励协议
	--Packet:chtask_batchtake_res

	-- 挑战任务上交物品
	--Packet:chtask_give_items_res

	-- 名望同步协议
	--Packet:fame_sync_res

	-- 名望晋级协议
	--Packet:fame_upgrade_res

	-- 名望获取名望奖励协议
	--Packet:fame_take_res

	-- 每日在线奖励同步在线奖励协议
	--Packet:onlinegift_sync_res

	-- 每日在线奖励获取奖励协议
	--Packet:onlinegift_take_res

	-- 离线经验奖励领取协议
	--Packet:offlineexp_take_res

	-- 购买挂机精灵经验
	--Packet:buy_offline_wizard_exp_res

	-- 隐藏离线经验显示设置
	--Packet:hide_offlineexp_display_res

	-- 全服答题活动同步协议
	--Packet:quizgift_sync_res

	-- 全服答题活动查询排行榜
	--Packet:quizgift_qrank_res

	-- 全服答题活动答题协议
	--Packet:quizgift_answer_res

	-- 同步幸运转盘信息
	--Packet:sync_luckywheel_res

	-- 幸运转盘抽奖
	--Packet:luckywheel_ondraw_res

	-- 购买幸运转盘抽奖次数
	--Packet:luckywheel_buydrawtimes_res

	-- 燃放烟花
	--Packet:play_firework_res

	-- 通知客户端播放烟花的广播协议
	--Packet:notify_play_firework

	-- 抢红包响应协议
	--Packet:redenvelope_snatch_res

	-- 红包通知协议
	--Packet:redenvelope_notice

	-- 接取主线任务
	--Packet:mtask_take_res

	-- 放弃主线任务
	--Packet:mtask_quit_res

	-- 客户端判断完成任务通知GS计数
	--Packet:task_complete_notice_gs_res

	-- 主线任务领取奖励
	--Packet:mtask_reward_res

	-- 神兵任务领取奖励
	--Packet:wtask_reward_res

	-- 神兵任务快速完成
	--Packet:wtask_quick_finish_res

	-- 佣兵任务领取奖励
	--Packet:ptask_reward_res

	-- 接取佣兵身世任务
	--Packet:petlifetask_take_res

	-- 佣兵身世任务领取奖励
	--Packet:petlifetask_reward_res

	-- 任务定点使用道具
	--Packet:task_useitem_res

	-- 任务提交道具
	--Packet:task_submititem_res

	-- 随从任务提交道具
	--Packet:pettask_submititem_res

	-- 随从身世任务提交道具
	--Packet:petlifetask_submititem_res

	-- 任务npc对话
	--Packet:task_dialog_res

	-- 任务护送NPC
	--Packet:task_conveynpc_res

	-- 任务护送物件
	--Packet:task_conveyitem_res

	-- 任务文字答题
	--Packet:task_answer_res

	-- 随机答题
	--Packet:task_randquestion_res

	-- 开启宠物觉醒任务
	--Packet:pawaketask_open_res

	-- 完成宠物觉醒任务
	--Packet:pawaketask_finish_res

	-- 放弃宠物觉醒任务
	--Packet:pawaketask_quit_res

	-- 重置宠物觉醒任务
	--Packet:pawaketask_reset_res

	-- 宠物觉醒任务提交道具
	--Packet:pawaketask_submititem_res

	-- 宠物觉醒设置
	--Packet:petawake_set_res

	-- 开始宠物觉醒任务副本
	--Packet:start_pawakemap_res

	-- 宠物觉醒任务副本开始
	--Packet:pawake_map_start

	-- 宠物觉醒任务副本结束
	--Packet:pawake_map_end

	-- 获得限时任务
	--Packet:tmtask_get

	-- 完成限时任务
	--Packet:tmtask_finish

	-- 重新激活限时任务
	--Packet:tmtask_reactive_res

	-- 接取势力声望任务
	--Packet:forcefame_take_res

	-- 放弃势力声望任务
	--Packet:forcefame_quit_res

	-- 完成势力声望任务
	--Packet:forcefame_finish_res

	-- 势力声望捐赠
	--Packet:forcefame_donate_res

	-- 请求挖矿的响应协议
	--Packet:role_mine_res

	-- 设置攻击模式回应
	--Packet:set_attackmode_res

	-- 通知新队员加入队伍
	--Packet:team_sync

	-- 通知其他队员新队员加入队伍
	--Packet:team_join

	-- 通知其他队员有成员离开队伍
	--Packet:team_leave

	-- 通知其他队员有成员被踢出队伍
	--Packet:team_kick

	-- 通知队伍队伍解散
	--Packet:team_dissolve

	-- 通知队伍换队长
	--Packet:team_change_leader

	-- 通知客户端队伍成员信息的变化后的更新值或客户端主动查询值
	--Packet:team_member_profile

	-- 通知客户端队伍成员的hp变化更新后的新值
	--Packet:team_member_hp

	-- 通知客户端队伍成员的位置变化更新后的新值
	--Packet:team_member_position

	-- 通知客户端队伍成员的连接状态变化,state大于1是连接状态，为0是断线
	--Packet:team_member_connection

	-- 查询玩家的队伍信息的响应
	--Packet:team_role_query_res

	-- 邀请其他玩家组队响应(返回邀请操作是否成功，大于0成功并向对方发送邀请消息，对方已经下线-1，队伍已满-2，对方已经在队伍中-3, 对方正在副本中-5)
	--Packet:team_invite_res

	-- 转发其他玩家的组队邀请
	--Packet:team_invite_forward

	-- 玩家是否同意接收组队邀请操作响应(返回对邀请响应的操作是否成功，大于0操作成功(拒绝或接受成功)，如果接受失败：对方已经下线-1，队伍已满-2，邀请人已经加入其它队伍-3)
	--Packet:team_invitedby_res

	-- 通知邀请者前面的邀请被拒绝
	--Packet:team_invite_refuse

	-- 通知邀请者前面的邀请正忙
	--Packet:team_invite_busy

	-- 通知邀请者前面的邀请在指引状态
	--Packet:team_invite_lead

	-- 其他玩家申请组队响应(返回申请操作是否成功，大于0成功并向队长或申请人发送申请消息，队长或申请人已经下线-1，队伍已满-2，本人已经在其他队伍-3(此项客户端预处理，服务器做保证，正常逻辑不会返回-3))
	--Packet:team_apply_res

	-- 转发其他玩家的组队申请
	--Packet:team_apply_forward

	-- 队长是否同意接受组队申请操作响应(返回对申请响应的操作是否成功，大于0操作成功(拒绝或接受成功)，如果接受失败：对方已经下线-1，队伍已满-2，申请人已经加入其它队伍-3)
	--Packet:team_appliedby_res

	-- 通知申请者前面的申请被队长拒绝
	--Packet:team_apply_refuse

	-- 离开队伍响应(返回离开队伍是否成功)
	--Packet:team_leave_res

	-- 踢出队伍成员协议(返回踢出队伍成员是否成功)
	--Packet:team_kick_res

	-- 解散队伍响应(返回解散队伍是否成功)
	--Packet:team_dissolve_res

	-- 队伍切换队长响应(返回换队长是否成功)
	--Packet:team_change_leader_res

	-- 本队伍信息查询响应协议
	--Packet:team_self_res

	-- 附近的队伍响应协议
	--Packet:team_mapt_res

	-- 附近的人响应协议
	--Packet:team_mapr_res

	-- 师徒请求协议
	--Packet:team_master_res

	-- 通知新成员加入房间同步当前房间信息
	--Packet:mroom_sync

	-- 通知其他成员员新成员加入房间
	--Packet:mroom_join

	-- 通知其他成员有成员离开房间
	--Packet:mroom_leave

	-- 通知其他成员有成员被踢出房间
	--Packet:mroom_kick

	-- 通知成员换队长
	--Packet:mroom_change_leader

	-- 通知房间其他成员的连接状态变化,state大于1是连接状态，为0是断线
	--Packet:mroom_member_connection

	-- 创建新副本房间响应协议
	--Packet:mroom_create_res

	-- 新成员点击加入副本房间协议
	--Packet:mroom_enter_res

	-- 新成员快速加入副本房间协议
	--Packet:mroom_qenter_res

	-- 房间队长邀请新人加入副本房间协议
	--Packet:mroom_invite_res

	-- 转发其他玩家进入房间的邀请
	--Packet:mroom_invite_forward

	-- 玩家是否同意加入副本房间的协议
	--Packet:mroom_invitedby_res

	-- 通知邀请者前面的邀请被拒绝
	--Packet:mroom_invite_refuse

	-- 通知邀请者被邀请的人正忙
	--Packet:mroom_invite_busy

	-- 通知邀请者被邀请的人条件不满足
	--Packet:mroom_invite_fail

	-- 离开房间的响应(返回离开房间是否成功)
	--Packet:mroom_leave_res

	-- 踢出队伍成员协议(返回踢出队伍成员是否成功)
	--Packet:mroom_kick_res

	-- 副本房间更换房主响应(返回换房主是否成功)
	--Packet:mroom_change_leader_res

	-- 本房间信息查询响应协议
	--Packet:mroom_self_res

	-- 房间附近的人响应协议
	--Packet:mroom_mapr_res

	-- 房间列表查询响应协议
	--Packet:mroom_query_res

	-- 有新申请加入帮派的通知协议
	--Packet:sect_notice_application

	-- 帮派中被人膜拜的通知协议
	--Packet:sect_notice_worship

	-- 帮派中有宴席开放并且自己没有参加过的通知协议
	--Packet:sect_notice_banquet

	-- 帮派中可以继续接取任务的通知协议
	--Packet:sect_notice_tasks

	-- 帮派中有共享出去的任务呗完成后有奖励可以领取
	--Packet:sect_notice_sharedtaskreward

	-- 打开帮派界面同步帮派信息请求的响应协议
	--Packet:sect_sync_res

	-- 创建帮派响应协议
	--Packet:sect_create_res

	-- 批量查询帮派是否被申请响应协议
	--Packet:sect_queryapplied_res

	-- 刷新帮派列表响应协议
	--Packet:sect_list_res

	-- 批量查询帮派信息响应协议
	--Packet:sect_query_res

	-- 搜索帮派信息响应协议
	--Packet:sect_searchbyid_res

	-- 搜索帮派信息响应协议
	--Packet:sect_searchbyname_res

	-- 申请加入帮派响应协议
	--Packet:sect_apply_res

	-- 快速申请加入帮派响应协议，返回新申请加入的帮派ID
	--Packet:sect_qapply_res

	-- 查询帮派成员响应协议(返回的帮派成员最后上线时间0为当前在线，-1为批准加入后一直未上线，大于0为最后上线时间)
	--Packet:sect_members_res

	-- 帮派申请列表响应协议
	--Packet:sect_applications_res

	-- 帮派历史事件列表响应协议
	--Packet:sect_history_res

	-- 帮派管理同意或拒绝申请入帮响应协议
	--Packet:sect_appliedby_res

	-- 帮派管理同意或拒绝全部申请入帮响应协议
	--Packet:sect_appliedbyall_res

	-- 帮派管理踢出协议
	--Packet:sect_kick_res

	-- 离开帮派协议
	--Packet:sect_leave_res

	-- 解散帮派协议
	--Packet:sect_disband_res

	-- 帮派管理任命响应协议
	--Packet:sect_appoint_res

	-- 帮派宗旨协议
	--Packet:sect_changecreed_res

	-- 修改帮派名字协议
	--Packet:sect_changename_res

	-- 修改帮派图标协议
	--Packet:sect_changeicon_res

	-- 修改帮派申请加入等级需求协议
	--Packet:sect_joinlvl_res

	-- 帮派发送邮件协议(返回1 是成功但没有扣元宝，2 是成功扣了元宝，0是失败，-1是失败且元宝不够)
	--Packet:sect_sendemail_res

	-- 帮派升级协议
	--Packet:sect_upgrade_res

	-- 帮派加速升级冷却协议
	--Packet:sect_accelerate_res

	-- 帮派光环捐献道具增加经验点协议
	--Packet:sect_auraexpadd_res

	-- 帮派技能查询协议
	--Packet:sect_aurasync_res

	-- 帮派膜拜协议
	--Packet:sect_worship_res

	-- 帮派同步膜拜奖励协议
	--Packet:sect_syncworshipreward_res

	-- 帮派领取膜拜奖励协议
	--Packet:sect_takeworshipreward_res

	-- 帮派开启宴席协议
	--Packet:sect_openbanquet_res

	-- 帮派宴席列表协议
	--Packet:sect_listbanquet_res

	-- 帮派帮派宴席协议
	--Packet:sect_joinbanquet_res

	-- 帮派商城同步协议
	--Packet:sect_shopsync_res

	-- 帮派商城刷新协议
	--Packet:sect_shoprefresh_res

	-- 帮派商城买商品协议
	--Packet:sect_shopbuy_res

	-- 通知客户端帮派副本开始
	--Packet:role_sectmap_start

	-- 通知客户端帮派副本结束
	--Packet:role_sectmap_end

	-- 通知客户端帮派副本结束 extraReward 额外奖励帮贡值
	--Packet:role_sectmap_result

	-- 进入帮派副本挑战协议
	--Packet:sectmap_start_res

	-- 帮派副本完成过的状态协议, map的key是当前所有已经开启过的副本Id，value按照位表示为：第0位为是否通关过，第1位为当前是否正在开启
	--Packet:sectmap_status_res

	-- 查询帮派副本进度协议 hp-1为未开启，hp为10000为已完成，hp大于等于0为正在进行中,hp值不超过10000是万分比数值
	--Packet:sectmap_query_res

	-- 帮派开启或重置副本协议
	--Packet:sectmap_open_res

	-- 所有帮派副本奖励已分配日志记录
	--Packet:sectmap_rewards_res

	-- 当前帮派副本申请奖励协议
	--Packet:sectmap_apply_res

	-- 当前帮派副本自取奖励
	--Packet:sectmap_reward_self_take_res

	-- 当前帮派副本奖励分配信息
	--Packet:sectmap_allocation_res

	-- 当前帮派副本伤害输出信息
	--Packet:sectmap_damage_res

	-- 当前帮派副本伤害输出信息
	--Packet:sectmap_damage_query_sync

	-- 帮派副本同步进度协议
	--Packet:sectmap_sync_res

	-- 帮派个人任务详细信息结果
	--Packet:sect_task_sync_res

	-- 帮派共享任务详细信息结果分包开始
	--Packet:sect_share_task_sync_start

	-- 帮派共享任务详细信息结果分包信息
	--Packet:sect_share_task_sync_info

	-- 帮派共享任务详细信息结果分包结束
	--Packet:sect_share_task_sync_end

	-- 帮派共享任务详细信息结果
	--Packet:sect_share_task_sync_res

	-- 帮派完成的个人任务详细信息结果
	--Packet:sect_finish_task_sync_res

	-- 帮派任务接取结果
	--Packet:sect_task_receive_res

	-- 帮派任务取消结果
	--Packet:sect_task_cancel_res

	-- 帮派任务完成结果
	--Packet:sect_task_finish_res

	-- 帮派任务共享结果
	--Packet:sect_task_issuance_res

	-- 帮派任务重置
	--Packet:sect_task_reset_res

	-- 帮派任务完成奖励
	--Packet:sect_task_done_rewards_res

	-- 快速完成帮派任务响应
	--Packet:sect_quick_finish_task_res

	-- 荣耀商路当前任务
	--Packet:sect_trade_route_curtask

	-- 荣耀商路同步
	--Packet:sect_trade_route_sync_res

	-- 荣耀商路任务接取结果
	--Packet:sect_trade_route_receive_res

	-- 荣耀商路任务取消结果
	--Packet:sect_trade_route_cancel_res

	-- 荣耀商路任务完成结果
	--Packet:sect_trade_route_finish_res

	-- 荣耀商路买星结果
	--Packet:sect_trade_route_buy_star_res

	-- 荣耀商路快速完成任务
	--Packet:sect_trade_route_one_key_finish_res

	-- 同步帮派助战信息(members 没有帮派时为null)
	--Packet:sect_assist_sync_res

	-- 登记帮派助战
	--Packet:sect_assist_join_res

	-- 解除帮派助战登记
	--Packet:sect_assist_quit_res

	-- 邀请帮派助战登记
	--Packet:sect_assist_apply_res

	-- 移除帮派助战
	--Packet:sect_assist_kick_res

	-- 自创武功信息
	--Packet:diyskill_sync_res

	-- 自创武功完成
	--Packet:diyskill_create_res

	-- 保存创建的自创武功
	--Packet:diyskill_save_res

	-- 遗忘
	--Packet:diyskill_discard_res

	-- 装备自创技能
	--Packet:diyskill_selectuse_res

	-- 卸下自创技能
	--Packet:diyskill_canceluse_res

	-- 解锁槽
	--Packet:diyskill_unlock_res

	-- 购买学习次数
	--Packet:diyskill_buytimes_res

	-- 自创武功分享
	--Packet:diyskill_share_res

	-- 自创武功取消分享
	--Packet:diyskill_cancelshare_res

	-- 自创武功借用
	--Packet:diyskill_borrow_res

	-- 自创武功炫耀
	--Packet:diyskill_flaunt_res

	-- 自创武功领取共享奖励
	--Packet:diyskill_shareaward_res

	-- 同步是否推送帮派申请数量
	--Packet:sect_push_application_res

	-- 套装购买
	--Packet:suite_buy_res

	-- 买物品
	--Packet:store_buy_res

	--Packet:teleport_npc_res

	--Packet:teleport_monster_res

	--Packet:teleport_spawnmonster_res

	--Packet:teleport_mineral_res

	--Packet:arena_attacked

	-- 同步竞技场主界面信息
	--Packet:arena_sync_res

	-- 设置方式阵容
	--Packet:arena_setpets_res

	-- 排行榜
	--Packet:arena_ranks_res

	-- 换一换
	--Packet:arena_refresh_res

	-- 获取竞技场防守阵容
	--Packet:arena_defencepets_res

	-- 重置挑战时间回应
	--Packet:arena_resetcool_res

	-- 购买次数回应
	--Packet:arena_buytimes_res

	-- 竞技场商城同步协议
	--Packet:arena_shopsync_res

	-- 竞技场商城刷新协议
	--Packet:arena_shoprefresh_res

	-- 竞技场商城买商品协议
	--Packet:arena_shopbuy_res

	-- 通知客户端竞技场副本开始
	--Packet:role_arenamap_start

	-- 通知客户端竞技场副本结束
	--Packet:role_arenamap_end

	-- 同步战斗结果
	--Packet:role_arena_result

	-- 开始战斗回应
	--Packet:arena_startattack_res

	-- 战报回应
	--Packet:arena_log_res

	-- 同步积分奖励回应
	--Packet:arena_scoresync_res

	-- 领取竞技场积分奖励回应
	--Packet:arena_takescore_res

	-- 防守阵容显隐
	--Packet:arena_hidedefence_res

	-- 会武同步信息
	--Packet:superarena_sync_res

	-- 会武设置出战佣兵
	--Packet:superarena_setpets_res

	-- 单人匹配
	--Packet:superarena_singlejoin_res

	-- 组队匹配
	--Packet:superarena_teamjoin_res

	-- 通知其他成员开始匹配
	--Packet:superarena_startmatch

	-- 匹配结果
	--Packet:superarena_join

	-- 取消匹配
	--Packet:superarena_quit_res

	-- 4v4竞技场商城同步协议
	--Packet:superarena_shopsync_res

	-- 4v4竞技场商城刷新协议
	--Packet:superarena_shoprefresh_res

	-- 4v4竞技场商城买商品协议
	--Packet:superarena_shopbuy_res

	-- 神器乱斗神兵设置
	--Packet:superarena_weaponseq_res

	-- 通知客户端4v4竞技场副本开始
	--Packet:role_superarenamap_start

	-- 通知客户端4v4竞技场副本结束
	--Packet:role_superarenamap_end

	-- 同步战斗结果
	--Packet:role_superarena_result

	-- 组队创建竞技场房间
	--Packet:aroom_create_res

	-- 房主邀请新人加入副本房间协议
	--Packet:aroom_invite_res

	-- 转发其他玩家进入房间的邀请
	--Packet:aroom_invite_forward

	-- 接收到其他玩家邀请入房间后玩家选择是否同意操作
	--Packet:aroom_invitedby_res

	-- 离开房间的响应(返回离开房间是否成功)
	--Packet:aroom_leave_res

	-- 通知邀请者前面的邀请被拒绝
	--Packet:aroom_invite_refuse

	-- 通知邀请者被邀请的人正忙
	--Packet:aroom_invite_busy

	-- 踢出房间成员请求协议
	--Packet:aroom_kick_res

	-- 会武房间更换房主响应(返回换房主是否成功)
	--Packet:aroom_change_leader_res

	-- 本房间信息查询响应协议
	--Packet:aroom_self_res

	-- 房间附近的人响应协议
	--Packet:aroom_mapr_res

	-- 通知新成员加入房间同步当前房间信息
	--Packet:aroom_sync

	-- 通知其他成员员新成员加入房间
	--Packet:aroom_join

	-- 通知其他成员有成员离开房间
	--Packet:aroom_leave

	-- 通知其他成员有成员被踢出房间
	--Packet:aroom_kick

	-- 通知成员换房主
	--Packet:aroom_change_leader

	-- 通知客户端队伍成员信息的变化后的更新值或客户端主动查询值
	--Packet:aroom_member_overview

	-- 通知客户端房间成员的连接状态变化,state大于1是连接状态，为0是断线
	--Packet:aroom_member_connection

	-- 会武周排行榜
	--Packet:superarena_weekrank_res

	-- 会武日排行榜(type 1: 普通4v4)
	--Packet:superarena_dayrank_res

	-- 正邪道场同步信息
	--Packet:bwarena_sync_res

	-- 正邪道场设置参战随从
	--Packet:bwarena_setpet_res

	-- 正邪道场刷新对手
	--Packet:bwarena_refresh_res

	-- 正邪道场购买次数
	--Packet:bwarena_buytimes_res

	-- 正邪道场开始战斗
	--Packet:bwarena_startattack_res

	-- 正邪道场领取积分奖励
	--Packet:bwarena_takescore_res

	-- 正邪道场战报
	--Packet:bwarena_log_res

	-- 正邪道场排行榜
	--Packet:bwarena_ranks_res

	-- 通知客户端正邪道场副本开始
	--Packet:role_bwarenamap_start

	-- 通知客户端正邪道场副本结束
	--Packet:role_bwarenamap_end

	-- 同步正邪道场战斗结果
	--Packet:role_bwarena_result

	-- 势力战抽奖
	--Packet:forcewar_lottery_res

	-- 势力战界面同步信息
	--Packet:forcewar_sync_res

	-- 势力战报名协议
	--Packet:forcewar_join_res

	-- 势力战取消报名协议
	--Packet:forcewar_quit_res

	-- 势力战开始匹配
	--Packet:forcewar_startmatch

	-- 势力战匹配结果
	--Packet:forcewar_match

	-- 势力战其他成员取消匹配
	--Packet:forcewar_other_quit

	-- 通知客户端势力战开始
	--Packet:role_forcewarmap_start

	-- 通知客户端势力战结束
	--Packet:role_forcewarmap_end

	--Packet:role_forcewar_result

	-- 创建势力战房间
	--Packet:froom_create_res

	-- 邀请新人加入势力战房间协议
	--Packet:froom_invite_res

	-- 转发其他玩家进入房间的邀请
	--Packet:froom_invite_forward

	-- 接收到其他玩家邀请入房间后玩家选择是否同意操作
	--Packet:froom_invitedby_res

	-- 离开房间的响应(返回离开房间是否成功)
	--Packet:froom_leave_res

	-- 通知邀请者前面的邀请被拒绝
	--Packet:froom_invite_refuse

	-- 通知邀请者被邀请的人正忙
	--Packet:froom_invite_busy

	-- 踢出房间成员请求协议
	--Packet:froom_kick_res

	-- 房间更换房主响应
	--Packet:froom_change_leader_res

	-- 同一地图地图附近没房间且符合条件的人
	--Packet:froom_mapr_res

	-- 同步对战列表
	--Packet:forcewar_mapbrief_res

	-- 进入观战
	--Packet:forcewar_guard_res

	-- 通知新成员加入房间同步房间信息
	--Packet:froom_sync

	-- 通知其他成员员新成员加入房间
	--Packet:froom_join

	-- 通知其他成员有成员离开房间
	--Packet:froom_leave

	-- 通知其他成员有成员被踢出房间
	--Packet:froom_kick

	-- 通知成员换房主
	--Packet:froom_change_leader

	-- 查询势力战房间成员信息(froom_query_member的异步回应)
	--Packet:froom_member_overview

	-- 查询势力战房间所有成员信息(froom_query_members的异步回应)
	--Packet:froom_members_overview

	-- 通知客户端房间成员的连接状态变化,state大于1是连接状态，为0是断线
	--Packet:froom_member_connection

	-- 通知客户端战队成员的连接状态变化
	--Packet:fteam_member_connection

	-- boss信息同步回应
	--Packet:bosses_sync_res

	--Packet:walktoboss_res

	-- 直接传送到boss位置回应
	--Packet:transtoboss_res

	-- 重置传送冷却时间
	--Packet:reset_transtime_res

	-- boss奖励分配记录请求
	--Packet:boss_reward_res

	-- 好友界面信息同步回应
	--Packet:friend_sync_res

	-- 获取最新加我为好友的列表
	--Packet:friend_pluslist_res

	-- 获取系统推荐的列表
	--Packet:friend_recommend_res

	-- 添加好友回应
	--Packet:friend_add_res

	-- 好友搜索
	--Packet:friend_search_res

	-- 删除好友回应
	--Packet:friend_delete_res

	-- 一键删除好友
	--Packet:friend_onekey_delete_res

	-- 好友送体力
	--Packet:friend_givevit_res

	-- 好友一键送体力
	--Packet:friend_giveallvits_res

	-- 一键好友接受体力
	--Packet:friend_receivevit_res

	-- 同意添加好友
	--Packet:friend_agreeadd_res

	-- 通知被加为好友的人
	--Packet:friend_add_push

	-- 玩家更新心情
	--Packet:friend_changemsg_res

	-- 玩家更改头像
	--Packet:friend_changehead_res

	-- 获取好友宿敌
	--Packet:friend_enemy_res

	-- 删除好友宿敌
	--Packet:friend_removeenemy_res

	-- 设置好友关注度
	--Packet:friend_setfocus_res

	-- 送花
	--Packet:give_flower_res

	-- 获取赠送记录
	--Packet:get_flowerlog_res

	-- 获取接收列表
	--Packet:get_acceptlist_res

	-- 拍卖行信息同步回应
	--Packet:auction_syncitems_res

	-- 同步自己寄售物品回应
	--Packet:auction_syncselfitems_res

	-- 上架道具物品回应
	--Packet:auction_putonitems_res

	-- 上架装备回应
	--Packet:auction_putonequip_res

	-- 物品下架回应
	--Packet:auction_putoffitems_res

	-- 购买物品回应
	--Packet:auction_buyitems_res

	-- 拍卖行摊位扩展
	--Packet:auction_expand_res

	-- 交易记录
	--Packet:auction_tradelog_res

	-- 获取道具价格列表
	--Packet:auction_itemprices_res

	-- 通知寄售行疑似违规次数
	--Packet:auction_invalid_times

	-- 同步江湖客栈界面信息
	--Packet:treasure_syncnpcs_res

	-- 刷新某一个NPC信息
	--Packet:treasure_refreshnpc_res

	-- 购买藏宝图碎片
	--Packet:treasure_buypieces_res

	-- 领取NPC礼包
	--Packet:treasure_npcreward_res

	-- 同步藏宝图界面信息
	--Packet:treasure_syncmap_res

	-- 合成地图
	--Packet:treasure_makemap_res

	-- 总体探索
	--Packet:treasure_totalsearch_res

	-- 探索情报点
	--Packet:treasure_search_res

	-- 领取藏宝图奖励
	--Packet:treasure_mapreward_res

	-- 扫荡领取藏宝图奖励
	--Packet:treasure_map_one_key_reward_res

	-- 放弃藏宝图
	--Packet:treasure_quitmap_res

	-- 藏品装裱
	--Packet:treasure_medalgrow_res

	-- 藏品镶边
	--Packet:treasure_edge_res

	-- 驯服坐骑
	--Packet:horse_tame_res

	-- 坐骑出征
	--Packet:horse_use_res

	-- 坐骑升星
	--Packet:horse_upstar_res

	-- 坐骑洗练
	--Packet:horse_enhance_res

	-- 坐骑洗练替换属性
	--Packet:horse_enhancesave_res

	-- 更换幻化外形
	--Packet:horse_changeshow_res

	-- 激活幻化外形
	--Packet:horse_activateshow_res

	-- 激活骑术
	--Packet:horse_learnskill_res

	-- 同步骑术等级
	--Packet:sync_horse_skillLevel_res

	-- 升级骑术等级
	--Packet:horse_skill_up_level_res

	-- 设置骑术
	--Packet:horse_setskill_res

	-- 更新坐骑皮肤时间
	--Packet:horse_show_update

	-- 同步当前使用皮肤
	--Packet:horse_curshow

	-- 坐骑突破
	--Packet:horse_break_res

	-- 皮肤激活骑战
	--Packet:horse_showfight_res

	-- 马术精通加经验
	--Packet:horse_master_addexp_res

	-- 马术精通解锁条目
	--Packet:horse_master_unlock_res

	-- 良驹之灵锤炼(ok:协议是否成功, success:概率是否成功)
	--Packet:horse_spirit_upstar_res

	-- 良驹之灵技能升级(lvl 1:解锁技能)
	--Packet:horse_spirit_skill_lvlup_res

	-- 良驹之灵更换形象
	--Packet:horse_spirit_setshow_res

	-- 良驹之灵升阶自动更换形象
	--Packet:horse_spirit_showauto_res

	-- 良驹之灵隐藏形象
	--Packet:horse_spirit_hide_res

	-- 新增良驹之灵形象
	--Packet:horse_spirit_show_add

	-- 解锁良驹之灵形象
	--Packet:horse_spirit_unlock_res

	-- 穿戴时装
	--Packet:fashion_upwear_res

	-- 放入衣橱
	--Packet:fashion_putwardrobe_res

	-- 从衣橱取出
	--Packet:fashion_getwardrobe_res

	-- 精纺时装
	--Packet:fashion_worsted_res

	-- 保存精纺时装属性
	--Packet:fashion_save_worsted_res

	-- 显示/隐藏
	--Packet:fashion_setshow_res

	-- 装备的时装（登录时同步）
	--Packet:role_curfashions

	-- 龙印合成
	--Packet:seal_make_res

	-- 龙印升阶
	--Packet:seal_upgrade_res

	-- 龙印洗练
	--Packet:seal_enhance_res

	-- 龙印储存
	--Packet:seal_save_enhance_res

	-- 同步历练页签信息
	--Packet:expcoin_sync_res

	-- 提取历练
	--Packet:expcoin_extract_res

	-- 同步藏书页签信息
	--Packet:rarebook_sync_res

	-- 藏书存入
	--Packet:rarebook_push_res

	-- 藏书取出
	--Packet:rarebook_pop_res

	-- 藏书解锁
	--Packet:rarebook_unlock_res

	-- 藏书升级
	--Packet:rarebook_lvlup_res

	--Packet:grasp_info_onlogin

	-- 同步参悟页签信息
	--Packet:grasp_sync_res

	--Packet:grasp_dayforture_refresh

	-- 参悟
	--Packet:grasp_impl_res

	-- 参悟次数购买
	--Packet:grasp_time_buy_res

	-- 参悟CD时间重置
	--Packet:grasp_reset_res

	-- 购买乾坤点
	--Packet:dmgtransfer_buypoint_res

	-- 投入乾坤点
	--Packet:dmgtransfer_putpoint_res

	-- 乾坤升级
	--Packet:dmgtransfer_lvlup_res

	-- 重置
	--Packet:dmgtransfer_reset_res

	-- 同步用户调研信息
	--Packet:usersurvey_sync_res

	-- 用户调研提交答案
	--Packet:usersurvey_submit_res

	-- 用户调研结束领取奖励
	--Packet:usersurvey_reward_res

	-- 同步登陆有礼信息
	--Packet:cblogingift_sync_res

	-- 登陆有礼领奖
	--Packet:cblogingift_take_res

	-- 升级送VIP、钻石
	--Packet:cblvlupgift_sync_res

	-- 升级送VIP、钻石(领奖)
	--Packet:cblvlupgift_take_res

	-- 同步完善资料拿大奖信息
	--Packet:userdata_sync_res

	-- 资料修改
	--Packet:userdata_modify_res

	-- 完善资料领奖
	--Packet:userdata_reward_res

	-- 同步封测倒计时信息
	--Packet:cbcountdowngift_sync_res

	-- 封测倒计时领奖
	--Packet:cbcountdowngift_take_res

	-- 同步限时领奖信息
	--Packet:ontimegift_sync_res

	-- 限时领奖领取奖励
	--Packet:ontimegift_take_res

	-- 同步强化比拼信息
	--Packet:strengthengift_sync_res

	-- 限时强化比拼奖励
	--Packet:strengthengift_take_res

	-- 同步官网调研信息
	--Packet:official_research_sync_res

	-- 限时官网调研奖励
	--Packet:official_research_take_res

	-- 同步角色信息临时vip
	--Packet:role_tempvip

	-- 设置当前的永久称号
	--Packet:permanenttitle_set_res

	-- 设置当前的时效称号
	--Packet:timedtitle_set_res

	-- 解锁新的称号位回应
	--Packet:titleslot_unlock_res

	-- 接取支线任务
	--Packet:branch_task_take_res

	-- 支线任务放弃
	--Packet:branch_task_quit_res

	-- 支线任务交付
	--Packet:branch_task_finish_res

	-- 史诗任务接取
	--Packet:epic_task_take_res

	-- 史诗任务领奖
	--Packet:epic_task_reward_res

	-- 史诗任务放弃
	--Packet:epic_task_quit_res

	-- 同步爬塔数据
	--Packet:sync_tower_res

	-- 同步战绩记录
	--Packet:tower_record_res

	-- 设置爬塔系统出战随从
	--Packet:tower_setpets_res

	-- 开始战斗
	--Packet:tower_startfight_res

	-- 进入爬塔场景同步
	--Packet:role_towermap_sync

	-- 购买挑战次数
	--Packet:tower_buytimes_res

	-- 爬塔副本扫荡
	--Packet:tower_sweep_res

	-- 爬塔副本一键扫荡
	--Packet:tower_new_sweep_res

	-- 同步声望数据
	--Packet:sync_towerfame_res

	-- 爬塔声望捐赠物品
	--Packet:tower_donate_res

	-- 爬塔声望一键捐赠物品
	--Packet:tower_onekey_donate_res

	-- 爬塔领取声望奖励
	--Packet:take_towerfame_res

	-- 进入秘境
	--Packet:enter_secretmap_res

	-- 领取秘境任务奖励
	--Packet:take_secretreward_res

	-- 一键完成秘境任务
	--Packet:onekey_finish_secrettask_res

	-- 帮派运镖同步
	--Packet:sect_deliver_sync_res

	-- 帮派运镖刷新
	--Packet:sect_deliver_refresh_res

	-- 帮派运镖投保
	--Packet:sect_deliver_protect_res

	-- 帮派运镖开始运镖
	--Packet:sect_deliver_begin_res

	-- 帮派运镖求援
	--Packet:sect_deliver_search_help_res

	-- 帮派运镖响应求援
	--Packet:sect_deliver_on_help_res

	-- 帮派运镖取消运镖
	--Packet:sect_deliver_cancel_res

	-- 帮派运镖完成
	--Packet:sect_deliver_finish_res

	-- 帮派运镖快速完成
	--Packet:sect_deliver_quick_finish_res

	-- 帮派祝福同步
	--Packet:sect_deliver_sync_wish_res

	-- 帮派祝福祝福
	--Packet:sect_deliver_add_wish_res

	-- 帮派祝福保存
	--Packet:sect_deliver_save_wish_res

	-- 帮派运镖求援推送消息
	--Packet:sect_deliver_help_push

	-- 劫镖任务接取
	--Packet:sect_rob_task_take_res

	-- 劫镖任务放弃
	--Packet:sect_rob_task_cancel_res

	-- 同步劫镖标记
	--Packet:sect_rob_flag

	-- 完成劫镖发送奖励信息
	--Packet:sect_rob_finish

	-- 销毁自己的镖车
	--Packet:destory_own_car

	-- 帮派商城同步协议
	--Packet:sect_deliver_shopsync_res

	-- 帮派商城刷新协议
	--Packet:sect_deliver_shoprefresh_res

	-- 帮派商城买商品协议
	--Packet:sect_deliver_shopbuy_res

	-- 帮派运镖抽奖数据同步
	--Packet:sect_deliver_lottery_sync

	-- 帮派运镖抽奖协议
	--Packet:sect_deliver_lottery_res

	-- 同步工坊回应
	--Packet:produce_workshopsync_res

	-- 使用卷轴获得新配方回应
	--Packet:produce_createnewrecipe_res

	-- 制造请求回应
	--Packet:produce_produce_res

	-- 分解装备请求回应
	--Packet:produce_split_res

	-- 炼化炉激活请求回应
	--Packet:produce_fusion_open_res

	-- 炼化请求回应
	--Packet:produce_fusion_res

	-- 分解能量购买回应
	--Packet:produce_splitspbuy_res

	-- 背包道具合并
	--Packet:bag_merge_res

	-- 背包道具合并
	--Packet:bag_merge_all_res

	-- 七日留存活动领取奖励
	--Packet:rmactivity_takereward_res

	-- 玩家改名(ok -1:名字已存在)
	--Packet:role_rename_res

	-- 上马请求回应
	--Packet:horse_ride_res

	-- 下马请求回应
	--Packet:horse_unride_res

	-- 邀请骑乘响应协议
	--Packet:mulhorse_invite_res

	-- 转发其他玩家的骑乘邀请
	--Packet:mulhorse_invite_forward

	-- 接收到骑乘邀请后选择是否同意操作
	--Packet:mulhorse_invitehandle_res

	-- 通知邀请者前面的邀请结果(result 0:拒绝，-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙，| -6:对方已在多人坐骑上，-9:超时)
	--Packet:mulhorse_invite_result

	-- 申请多人骑乘
	--Packet:mulhorse_apply_res

	-- 转发其他玩家的骑乘申请
	--Packet:mulhorse_apply_forward

	-- 接收到其他玩家骑乘申请后是否同意操作
	--Packet:mulhorse_applyhandle_res

	-- 通知邀请者前面的邀请结果(result 0:拒绝，-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙|-4:对方坐骑已满，-8:对方已下马，-9:超时)
	--Packet:mulhorse_apply_result

	-- 离开多人骑乘协议
	--Packet:mulhorse_leave_res

	-- 剔除骑乘成员
	--Packet:mulhorse_kick_res

	-- 通知新成员加入多人骑乘
	--Packet:mulhorse_join

	-- 通知有成员离开多人骑乘
	--Packet:mulhorse_leave

	-- 通知有成员被踢出多人骑乘
	--Packet:mulhorse_kick

	-- 相依相偎邀请
	--Packet:staywith_invite_res

	-- 转发其他玩家的相依相偎邀请
	--Packet:staywith_invite_forward

	-- 接收到相依相偎邀请后选择是否同意操作
	--Packet:staywith_invitehandle_res

	-- 通知邀请者前面的邀请结果(result 0:拒绝，-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙，-7:超时)
	--Packet:staywith_invite_result

	-- 通知新成员加入相依相偎
	--Packet:staywith_join

	-- 通知相依相偎解散
	--Packet:staywith_dissolve

	-- 取消相依相偎请求
	--Packet:staywith_leave_res

	-- 么么哒
	--Packet:staywith_memeda_res

	-- 同步留言板请求
	--Packet:sync_message_board_res

	-- 添加留言请求
	--Packet:add_message_board_res

	-- 评论留言请求
	--Packet:comment_message_board_res

	-- 修改文本请求
	--Packet:change_message_board_content_res

	-- 同步日程表请求
	--Packet:schedule_sync_res

	-- 领取日程表奖励
	--Packet:schedule_mapreward_res

	-- 同步日程表请求
	--Packet:role_schedule_info

	-- 角色接触BOSS通知
	--Packet:role_touch_boss

	-- 保存引导关进度请求
	--Packet:save_guide_mapcopy_res

	-- 同步引导关步骤
	--Packet:sync_guide_mapcopy_step

	-- 帮派邀请请求
	--Packet:sect_invite_res

	-- 帮派邀请接受请求
	--Packet:sect_invite_response_res

	-- 帮派邀请推送
	--Packet:role_sect_invite

	-- 帮派邀请拒绝推送
	--Packet:role_refuse_sect_invite

	-- 帮派邀请繁忙推送
	--Packet:sect_invite_busy

	-- 同步内甲信息
	--Packet:role_armor_info

	-- 解锁内甲请求
	--Packet:unlock_armor_type_res

	-- 内甲升阶请求
	--Packet:armor_uprank_res

	-- 内甲升级天赋请求
	--Packet:armor_add_talent_res

	-- 内甲选择请求
	--Packet:armor_change_res

	-- 内甲升级请求
	--Packet:armor_up_level_res

	-- 设置内甲隐藏
	--Packet:armor_effecthide_res

	-- 符文存入请求
	--Packet:rune_push_res

	-- 符文提取请求
	--Packet:rune_pop_res

	-- 重置天赋点请求
	--Packet:reset_talent_point_res

	-- 重置天赋点请求
	--Packet:solt_group_unlock_res

	-- 符文镶嵌请求
	--Packet:solt_push_rune_res

	-- 符文之语镶嵌请求
	--Packet:lang_push_rune_res

	-- 符文许愿请求
	--Packet:rune_wish_res

	-- 符文之语升级请求
	--Packet:rune_upgrade_res

	-- 存入仓库请求
	--Packet:put_in_warehouse_res

	-- 取出物品请求
	--Packet:take_out_warehouse_res

	-- 取出碎片请求
	--Packet:take_out_warehouse_piece_res

	-- 扩展仓库请求
	--Packet:expand_warehouse_res

	-- 同步角色私人仓库信息
	--Packet:sync_private_warehouse_res

	-- 同步角色公共仓库信息
	--Packet:sync_public_warehouse_res

	-- 同步角色家园仓库信息
	--Packet:sync_homeland_warehouse_res

	-- 求婚推送
	--Packet:propose_push

	-- 求婚请求
	--Packet:propose_res

	-- 求婚响应请求
	--Packet:propose_response_res

	-- 求婚响应推送
	--Packet:role_propose_response

	-- 同步婚姻信息
	--Packet:marriage_sync_res

	-- 登陆所需婚姻信息
	--Packet:login_marriage_info

	-- 离婚请求
	--Packet:divorce_res

	-- 结婚技能升级请求
	--Packet:marriage_skill_levelup_res

	-- 传送至配偶请求
	--Packet:transform_to_partner_res

	-- 开始游街请求
	--Packet:marriage_start_parade_res

	-- 开始宴席请求
	--Packet:marriage_start_banquet_res

	-- 物品交换请求
	--Packet:exchange_item_res

	-- 批量兑换物品
	--Packet:batch_exchange_item_res

	-- 收藏兑换物品
	--Packet:collect_exchange_item_res

	-- 取消收藏兑换物品
	--Packet:cancel_collect_exchange_item_res

	-- 物品交换请求
	--Packet:exchange_item_times

	-- 姻缘系列任务开启
	--Packet:mrgseriestask_open_res

	-- 姻缘系列任务接取
	--Packet:mrgseriestask_take_res

	-- 姻缘系列任务领奖
	--Packet:mrgseriestask_reward_res

	-- 同步姻缘系列任务开启状态
	--Packet:role_mrgseriestask_open

	-- 通知任务接取
	--Packet:role_mrgseriestask_take

	-- 通知任务领奖
	--Packet:role_mrgseriestask_reward

	-- 通知任务计数变化
	--Packet:role_mrgseriestask_update

	-- 姻缘环任务开启
	--Packet:mrglooptask_open_res

	-- 姻缘环任务接取
	--Packet:mrglooptask_take_res

	-- 姻缘环任务领奖
	--Packet:mrglooptask_reward_res

	-- 同步姻缘环任务开启状态
	--Packet:role_mrglooptask_open

	-- 通知任务接取
	--Packet:role_mrglooptask_take

	-- 通知任务领奖
	--Packet:role_mrglooptask_reward

	-- 通知任务计数变化
	--Packet:role_mrglooptask_update

	-- 同步姻缘任务
	--Packet:role_mrgtask

	-- 姻缘档次提升
	--Packet:marriage_upgrade_res

	-- 姻缘档次变化
	--Packet:marriage_grade_sync

	-- 保存技能预设请求
	--Packet:save_skill_preset_res

	-- 保存技能预设请求
	--Packet:save_all_skill_preset_res

	-- 保存气功预设请求
	--Packet:save_spirits_preset_res

	-- 删除气功预设请求
	--Packet:delete_skill_preset_res

	-- 删除气功预设请求
	--Packet:delete_spirits_preset_res

	-- 使用技能预设请求
	--Packet:change_skill_preset_res

	-- 使用气功预设请求
	--Packet:change_spirits_preset_res

	-- 同步技能预设请求
	--Packet:role_skill_preset

	-- 帮派团队本开启请求
	--Packet:sect_group_map_open_res

	-- 帮派团队本进入请求
	--Packet:sect_group_map_enter_res

	-- 帮派团队本信息同步请求
	--Packet:sect_group_map_sync_res

	-- 帮派团队本结束推送
	--Packet:sect_group_map_end

	-- 神兵技能升级请求
	--Packet:weapon_skill_level_up_res

	-- 神兵天赋升级请求
	--Packet:weapon_talent_level_up_res

	-- 神兵天赋点购买请求
	--Packet:weapon_talent_point_buy_res

	-- 神兵天赋点重置请求
	--Packet:weapon_talent_point_reset_res

	-- 发送礼物请求
	--Packet:send_gift_res

	-- 打开地图同步旗帜信息
	--Packet:sync_big_map_flag_info_res

	-- 同步地图旗帜信息
	--Packet:map_flag_info

	-- 地图旗帜信息变更
	--Packet:map_flag_sect_change

	-- 同步角色道具添加属性
	--Packet:role_item_props

	-- 同步角色限制使用物品历史使用次数
	--Packet:role_life_use

	-- 随从技能升级请求
	--Packet:pet_skill_level_up_res

	-- 同步特权卡配置请求
	--Packet:sync_special_card_res

	-- 领取特权卡奖励请求
	--Packet:take_special_card_reward_res

	-- 通过类型同步充值商品
	--Packet:paygoods_sync_res

	-- 同步每日体力奖励请求
	--Packet:sync_daily_vit_reward_res

	-- 领取每日体力奖励请求
	--Packet:take_daily_vit_reward_res

	-- 神兵熟练度冒字使用
	--Packet:role_weapon_master

	-- 同步角色活动本当前进度
	--Packet:role_activity_map_cur_process

	-- 同步角色名望等级
	--Packet:role_fame_level

	-- 开启洞察请求
	--Packet:try_open_insight_res

	-- 开启寻仇请求
	--Packet:try_open_revenge_res

	-- 同步洞察请求
	--Packet:try_sync_insight_res

	-- 同步寻仇请求
	--Packet:try_sync_revenge_res

	-- 传送至洞察目标请求
	--Packet:try_transform_insight_res

	-- 传送至寻仇目标请求
	--Packet:try_transform_revenge_res

	-- 传家宝擦拭请求
	--Packet:heirloom_wipe_res

	-- 传家宝取出请求
	--Packet:heirloom_takeout_res

	-- 同步传家宝信息
	--Packet:role_heirloom_info

	-- 购买离线精灵修炼点请求
	--Packet:buy_offline_func_point_res

	-- 离线精灵同步协议
	--Packet:role_offline_wizard

	-- 精灵旅行同步
	--Packet:role_wizard_trip_sync

	-- 精灵旅行开始
	--Packet:role_wizard_trip_start_res

	-- 精灵旅行分享照片
	--Packet:role_wizard_trip_share_photo_res

	-- 旅行精灵结束提示
	--Packet:role_wizard_trip_tips

	-- 设置帮派QQ群请求
	--Packet:set_sect_qqgroup_res

	-- 设置角色等级经验
	--Packet:role_level_exp

	-- 设置传家宝外观显示请求
	--Packet:set_heirloom_display_res

	-- 武勋商城同步协议
	--Packet:feat_gambleshopsync_res

	-- 武勋商城刷新协议
	--Packet:feat_gambleshoprefresh_res

	-- 武勋商城买商品协议
	--Packet:feat_gambleshopbuy_res

	-- 添加结婚预约协议
	--Packet:add_marriage_bespeak_res

	-- 同步结婚预约协议
	--Packet:sync_marriage_bespeak_res

	-- 领取结婚称号
	--Packet:take_marriage_title_res

	-- 登陆同步自己的结婚预定时间
	--Packet:role_marriage_bespeak_time

	-- 有角色在当前地图结婚
	--Packet:role_marriage_here

	-- 同步角色结婚对象名称
	--Packet:role_marriage_partner_name

	-- 角色调研红点
	--Packet:role_survey_notice

	-- 基础物品快速购买协议
	--Packet:base_dummygoods_quick_buy_res

	-- 结婚步骤同步
	--Packet:role_marriage_step

	-- 结婚步骤同步
	--Packet:sect_history_broadcast

	-- 活动补做协议
	--Packet:activity_last_quick_done_res

	-- 登陆同步补做信息
	--Packet:role_activity_last

	-- 打开太玄碑文同步信息(index: 当前第几个碑文)
	--Packet:stele_sync_res

	-- 参加活动
	--Packet:stele_join_res

	-- 排行榜同步
	--Packet:stele_rank_res

	-- 传送到太玄碑文
	--Packet:stele_teleport_res

	-- 登录时同步太玄碑文
	--Packet:role_stele

	-- 更新太玄碑文拓片数量
	--Packet:role_stele_card

	-- 添加黑名单
	--Packet:blacklist_add_res

	-- 删除黑名单
	--Packet:blacklist_del_res

	-- 同步黑名单
	--Packet:blacklist_sync_res

	-- 设置清除长时间未上线的好友
	--Packet:set_clear_friend_res

	-- 登陆同步黑名单
	--Packet:role_blacklist

	-- 黑名单禁止互动
	--Packet:blacklist_ban_res

	-- 同步伏魔洞信息
	--Packet:demonhole_sync_res

	-- 参加伏魔洞
	--Packet:demonhole_join_res

	-- 进入下一层或上一层
	--Packet:demonhole_changefloor_res

	-- 战况界面
	--Packet:demonhole_battle_res

	-- 通知客户端伏魔洞开始
	--Packet:role_demonhole_start

	-- 通知客户端伏魔洞结束
	--Packet:role_demonhole_end

	--Packet:role_demonholemap_sync

	-- 伏魔洞战报界面
	--Packet:role_demonhole_result

	-- 开始进入正义之心副本请求
	--Packet:justicemap_start_res

	-- 登陆同步正义之心副本进入次数
	--Packet:justicemap_day_enter_time

	-- 打开江湖告急同步信息
	--Packet:emergency_sync_res

	-- 进入江湖告急副本
	--Packet:emergency_enter_res

	-- 排行榜同步
	--Packet:emergency_rank_res

	-- 同步当前声望
	--Packet:sync_prestige_num

	-- 江湖告急副本关闭推送
	--Packet:role_emergency_map_end

	-- 幸运星同步
	--Packet:lucklystar_sync_res

	-- 幸运星赠送
	--Packet:lucklystar_gift_res

	-- 幸运星推送
	--Packet:lucklystar_push

	-- 收到幸运星推送
	--Packet:recv_lucnlystar_by_role

	-- 开始挑战
	--Packet:fightnpc_start_res

	-- 领取奖励
	--Packet:fightnpc_reward_res

	-- 登录时同步约战NPC信息
	--Packet:role_fightnpc

	-- 副本开始
	--Packet:role_fightnpcmap_start

	-- 副本结束
	--Packet:role_fightnpcmap_end

	-- 副本结果
	--Packet:role_fightnpcmap_result

	-- 分包奖励领取同步协议
	--Packet:packetreward_sync_res

	-- 分包奖励领取协议
	--Packet:packetreward_take_res

	-- 坐骑解锁洗练属性
	--Packet:horse_enhance_prop_unlock_res

	-- 同步当前休闲宠物
	--Packet:role_cur_wizard_pet

	-- 购买休闲宠物时间
	--Packet:buy_wizard_pet_time_res

	-- 设置当前休闲宠物
	--Packet:set_cur_wizard_pet_res

	-- 同步当前已解锁头像
	--Packet:sync_item_unlock_head_res

	-- 宠物，神兵评价
	--Packet:socialmsg_send_res

	-- 点赞
	--Packet:socialmsg_like_res

	-- 鄙视
	--Packet:socialmsg_dislike_res

	--Packet:socialmsg_pageinfo_res

	-- npc传送功能
	--Packet:npc_transfrom_res

	-- 物品解锁头像
	--Packet:unlock_head_res

	-- 解锁头像边框回应
	--Packet:unlock_headborder_res

	-- 同步已经解锁的边框回应
	--Packet:sync_headborder_res

	-- 更改装备的头像边框回应
	--Packet:change_headborder_res

	-- 自动解锁头像边框的通知
	--Packet:auto_unlock_headborder

	-- 开始挑战
	--Packet:towerdefence_start_res

	-- 手动翻牌抽奖回应
	--Packet:towerdefence_selectcard_res

	-- 自动翻牌抽奖
	--Packet:role_towerdefence_autocard

	-- 副本开始
	--Packet:role_towerdefence_start

	-- 副本结束
	--Packet:role_towerdefence_end

	-- 副本结果
	--Packet:role_towerdefence_result

	-- 同步守护副本信息
	--Packet:role_towerdefence_info

	-- 开始NPC副本
	--Packet:start_npc_map_res

	-- 同步NPC副本次数
	--Packet:role_day_npc_map_times

	-- 参与NPC祈福
	--Packet:join_npc_pray_res

	-- 同步NPC祈福次数
	--Packet:role_day_npc_pray_times

	-- 解锁私人仓库
	--Packet:unlock_private_warehouse_res

	-- 解锁家园仓库
	--Packet:unlock_homeland_warehouse_res

	-- 锁定强化序号
	--Packet:look_strength_heirloom_res

	-- 强化传家宝
	--Packet:strength_heirloom_res

	-- 摇一摇
	--Packet:exp_tree_get_drop_res

	-- 浇水
	--Packet:exp_tree_watering_res

	-- 获取成熟奖励
	--Packet:exp_tree_mature_reward_res

	-- 同步经验果树信息
	--Packet:exp_tree_sync_res

	-- 登录同步经验果树参与次数
	--Packet:role_exp_tree_times

	-- 魂玉解封
	--Packet:seal_dispelling_res

	-- 魂玉解封晋级加速
	--Packet:seal_awaken_accelerate_res

	-- 魂玉解封晋级
	--Packet:seal_awaken_res

	-- 登陆同步魂玉解封信息
	--Packet:role_seal_awaken

	-- 进入城战成员同步
	--Packet:city_war_sect_roles_sync_res

	--Packet:city_war_info_sync_res

	-- 获取城池报名信息（citySign：表示每个城是否有帮派报名，0没有，1有，2本帮已报, delayInfo:每个城的延迟时间）
	--Packet:city_war_sign_info_res

	-- 帮派报名
	--Packet:city_war_sect_sign_res

	-- 获取帮派竞标信息（cityBid：0无主城池，1没有帮派竞标，2有帮派竞标， 3本帮派已竞标； price：上次竞标出价； bidTimes：已出价次数）
	--Packet:city_war_bid_info_res

	-- 帮派竞标
	--Packet:city_war_sect_bid_res

	-- 竞标结果(ok：-1表示结果正在计算，-100超时；result:每个城帮派竞标展示； cityInfo：0无主城池，1没有帮派竞标，2有帮派竞标，3本帮派已中标 )
	--Packet:city_war_bid_result_res

	-- 同步城池归属者
	--Packet:city_war_current_kings_res

	-- 城战开始
	--Packet:city_war_start

	-- 城战结束
	--Packet:city_war_end

	-- 城战结果
	--Packet:city_war_result

	-- 进入城战
	--Packet:city_war_enter_res

	-- 开启城市之光
	--Packet:city_light_open_res

	-- 城市之光同步
	--Packet:city_light_login_sync

	-- 城市之光同步
	--Packet:city_light_sync_res

	-- 攻城车变身
	--Packet:city_war_use_car_res

	-- 攻城车取消变身
	--Packet:city_war_cancel_car_res

	-- 箭塔修复
	--Packet:city_war_tower_fix_res

	-- 城战传送
	--Packet:city_war_transform_res

	-- 帮派分堂信息同步
	--Packet:sect_fight_group_sync_res

	-- 创建帮派分堂
	--Packet:sect_fight_group_create_res

	-- 解散帮派分堂
	--Packet:sect_fight_group_dismiss_res

	-- 退出帮派分堂
	--Packet:sect_fight_group_exit_res

	-- 申请加入帮派分堂
	--Packet:sect_fight_group_apply_res

	-- 同意加入帮派分堂
	--Packet:sect_fight_group_accept_res

	-- 拒绝加入帮派分堂
	--Packet:sect_fight_group_refuse_res

	-- 修改分堂堂主
	--Packet:sect_fight_group_change_leader_res

	-- 踢出帮派分堂
	--Packet:sect_fight_group_kick_res

	-- 帮派分堂改名
	--Packet:sect_fight_group_change_name_res

	-- 邀请其他玩家进入分堂协议
	--Packet:sect_fight_group_invite_res

	-- 接收到其他玩家分堂邀请后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
	--Packet:sect_fight_group_invitedby_res

	-- 接收到其他玩家分堂邀请后推送
	--Packet:sect_fight_group_invited_forward

	-- 分堂邀请回应正忙
	--Packet:sect_fight_group_invite_busy

	-- 分堂邀请回应拒绝
	--Packet:sect_fight_group_invite_refuse

	-- 分堂申请列表同步
	--Packet:sect_fight_group_apply_sync_res

	-- 分堂申请推送
	--Packet:sect_fight_group_apply_push

	-- 分堂报名帮派战
	--Packet:sect_war_sign_res

	-- 分堂取消报名
	--Packet:sect_war_quit_res

	-- 分堂当前帮派战状态同步
	--Packet:sect_fight_group_cur_status_res

	-- 帮派战开始推送
	--Packet:sect_war_start_push

	-- 进入帮战地图
	--Packet:enter_sectwar_res

	-- 通知客户端帮派战开始
	--Packet:role_sectwar_start

	-- 通知客户端帮派战结束
	--Packet:role_sectwar_end

	-- 帮派战结束弹窗
	--Packet:role_sectwar_result

	-- 变性请求
	--Packet:role_change_gender_res

	-- 发起切磋邀请
	--Packet:role_single_invite_res

	-- 收到切磋邀请
	--Packet:role_single_invite_forward

	-- 切磋回应
	--Packet:role_single_response_res

	-- 切磋邀请结果(-1: 拒绝 -2:正忙 )
	--Packet:role_single_invite_result

	-- 切磋结果
	--Packet:single_map_result

	-- 切磋开始
	--Packet:single_map_start

	-- 切磋结束
	--Packet:single_map_end

	-- 五绝秘藏是否开启同步
	--Packet:five_goals_isopen

	-- 五绝秘藏同步
	--Packet:five_goals_sync_res

	-- 五绝秘藏领取奖励
	--Packet:five_goals_take_reward_res

	-- 使用召回码
	--Packet:use_regression_code_res

	-- 领取积分奖励
	--Packet:get_score_reward_res

	-- 同步召回信息
	--Packet:sync_regression_res

	-- 领取登陆奖励
	--Packet:take_regression_login_gift_res

	-- 购买每日折扣
	--Packet:buy_regression_daily_discount_res

	-- 登陆同步是否为老玩家
	--Packet:role_is_regression

	-- 职业转换请求
	--Packet:change_role_profession_res

	-- 同步上次转职时间
	--Packet:sync_last_change_pro_time_res

	-- 开心对对碰祈福
	--Packet:happy_mstching_take_word_res

	-- 开心对对碰打开兑换界面
	--Packet:happy_mstching_open_exchange_res

	-- 开心对对碰兑换
	--Packet:happy_mstching_take_reward_res

	-- 开心对对碰提示
	--Packet:happy_mstching_tip

	-- 宠物赛跑投票
	--Packet:pet_run_ticket_res

	-- 宠物赛跑同步
	--Packet:pet_run_sync_res

	-- 宠物赛跑扔道具
	--Packet:pet_run_throw_item_res

	-- 宠物赛跑同步协议
	--Packet:pet_run_shopsync_res

	-- 宠物赛跑刷新协议
	--Packet:pet_run_shoprefresh_res

	-- 宠物赛跑买商品协议
	--Packet:pet_run_shopbuy_res

	--Packet:bottle_exchange_sync_res

	-- 交换漂流瓶响应
	--Packet:bottle_exchange_res

	-- 同步泡温泉的次数
	--Packet:hot_spring_sync_cnt

	-- 同步祝福排行榜
	--Packet:hot_spring_buff_rank_res

	-- 泡温泉使用单人动作 (actType   1=molest   2=soap  3=rub)
	--Packet:hot_spring_use_single_act_res

	-- 泡温泉周围玩家开始单人动作
	--Packet:hot_spring_nearby_start_single_act

	-- 泡温泉使用双人动作
	--Packet:hot_spring_use_double_act_res

	-- 泡温泉双人动作请求
	--Packet:hot_spring_double_act_forward

	-- 泡温泉双人动作应答
	--Packet:hot_spring_double_act_answer_res

	-- 泡温泉双人动作应答推送
	--Packet:hot_spring_double_act_answer_forward

	-- 泡温泉使用buff
	--Packet:hot_spring_use_buff_res

	-- 泡温泉同步buff
	--Packet:hot_spring_buff_sync

	-- 泡温泉使用buff提示 (buffType 1 serverbuff 2sectbuff)
	--Packet:hot_spring_use_buff_tip

	-- 泡温泉取消双人互动
	--Packet:hot_spring_cancel_double_act_res

	-- 泡温泉 取消双人邀请推送
	--Packet:hot_spring_cancel_invite_forward

	-- 泡温泉周进入次数
	--Packet:hot_spring_week_enter_cnt

	-- 宠物赛跑开始
	--Packet:pet_run_start

	-- 宠物赛跑结束
	--Packet:pet_run_end

	-- 清除buff药
	--Packet:buffdrug_clear_res

	-- buff药更新
	--Packet:buff_drug_update

	-- 碎片请求回应
	--Packet:fragment_recycle_sync_res

	--Packet:fragment_recycle_res

	--Packet:weapon_wolf_damage_reduction

	-- 武魂方位升级
	--Packet:weaponsoul_lvlup_res

	-- 武魂升阶
	--Packet:weaponsoul_gradeup_res

	-- 设置升阶自动变更形象
	--Packet:weaponsoul_showauto_res

	-- 变更形象
	--Packet:weaponsoul_showset_res

	-- 解锁追加形象
	--Packet:weaponsoul_unlockshow_res

	-- 隐藏形象
	--Packet:weaponsoul_hide_res

	-- 新增武魂形象
	--Packet:weaponsoul_show_add

	-- 方位重置
	--Packet:weaponsoul_partreset_res

	-- 保存方位重置
	--Packet:weaponsoul_savereset_res

	-- 放弃方位重置
	--Packet:weaponsoul_quitreset_res

	-- 激活星耀
	--Packet:weaponsoul_staractivate_res

	-- 快速激活星耀
	--Packet:weaponsoul_quickactivate_res

	-- 设置当前星耀
	--Packet:weaponsoul_curstar_res

	-- 神木鼎同步次数
	--Packet:tripod_times_sync_res

	-- 神木鼎购买次数
	--Packet:tripod_buy_times_res

	-- 神木鼎融合 ok = 1 表示可以融合但是融合失败了  ok = 2 表示融合成功
	--Packet:tripod_merge_res

	-- 激活器灵
	--Packet:weaponspirit_activite_res

	-- 激活器灵节点
	--Packet:weaponspirit_activite_point_res

	-- 装备器灵
	--Packet:weaponspirit_equip_res

	-- 器灵升阶
	--Packet:weaponspirit_uprank_res

	-- 登陆同步器灵属性
	--Packet:role_weaponspirit

	-- 器灵技能升级
	--Packet:weaponspirit_skill_level_up_res

	-- 共享好礼活动同步
	--Packet:shared_pay_sync_res

	-- 共享好礼领奖
	--Packet:shared_pay_take_reward_res

	-- 连续使用道具活动同步
	--Packet:use_item_act_sync_res

	-- 连续使用道具活动领奖
	--Packet:use_item_act_take_reward_res

	-- 找你妹活动开始
	--Packet:finding_your_sister_start_res

	-- 找你妹点击图片
	--Packet:finding_your_sister_click_res

	-- 找你妹请求奖励
	--Packet:finding_your_sister_get_rewards_res

	-- 找你妹登陆同步
	--Packet:finding_your_sister_reconnect

	-- 角色加油
	--Packet:role_oil_res

	-- 同步加油信息
	--Packet:sync_oil_res

	-- 领取加油奖励
	--Packet:take_oil_reward_res

	-- 排行榜同步
	--Packet:oil_rank_res

	-- 大富翁同步
	--Packet:rich_sync_res

	-- 大富翁扔色子
	--Packet:rich_go_res

	-- 大富翁完成事件
	--Packet:rich_get_event_res

	-- 大富翁放弃事件
	--Packet:rich_give_up_res

	--[[
	'
	            大富翁同步事件计数
	 ]]
	--Packet:rich_sync_event_counts

	-- 帮派驻地建造同步
	--Packet:sect_zone_sync_build_res

	-- 帮派驻地建造
	--Packet:sect_zone_build_res

	-- 帮派驻地开启
	--Packet:sect_zone_open_res

	-- 帮派驻地建造排行同步
	--Packet:sect_zone_build_rank_res

	-- 帮派驻地BOSS捐献道具
	--Packet:sect_zone_boss_item_res

	-- 帮派驻地BOSS召唤
	--Packet:sect_zone_boss_open_res

	-- 帮派驻地进入
	--Packet:sect_zone_enter_res

	-- 可进入帮派驻地同步
	--Packet:sect_zone_list_res

	-- 发送气运礼包
	--Packet:send_destiny_reward_res

	-- 帮派驻地BOSS信息同步
	--Packet:sect_zone_sync_boss_res

	-- 帮派驻地开始
	--Packet:sect_zone_map_sync

	-- 帮派消息推送
	--Packet:sect_msg_push

	-- 帮派红包信息同步
	--Packet:sect_red_pack_sync_res

	-- 帮派红包发送
	--Packet:sect_red_pack_send_res

	-- 帮派红包领取
	--Packet:sect_red_pack_take_res

	-- 帮派龙运同步
	--Packet:sect_destiny_sync_res

	-- 帮派龙运礼包同步
	--Packet:sect_destiny_reward_sync_res

	-- 帮派气运夺取结果推送
	--Packet:sect_destiny_rob_push

	-- 帮派红包历史查询
	--Packet:sect_red_pack_history_res

	-- 额外奖励查询
	--Packet:extra_gift_sync_res

	-- 单个坐骑排行
	--Packet:single_horse_rank_res

	-- 玩家回归信息同步
	--Packet:role_back_sync_res

	-- 玩家充值奖励领取
	--Packet:role_back_pay_gift_take_res

	-- 玩家活跃奖励领取
	--Packet:role_back_schdule_gift_take_res

	-- 玩家每日奖励领取
	--Packet:role_back_day_gift_take_res

	-- 玩家回归人数奖励领取
	--Packet:role_back_back_num_gift_take_res

	-- 玩家每日任务数量奖励领取
	--Packet:role_back_task_num_gift_take_res

	-- 玩家世界数量同步
	--Packet:role_back_world_num_sync_res

	-- 玩家回归充值信息同步
	--Packet:role_back_pay_sync_res

	-- 玩家回归充值领取积分奖励
	--Packet:role_back_pay_take_reward_res

	-- 登陆同步聊天框
	--Packet:role_chat_box_sync_on_login

	-- 聊天框列表同步
	--Packet:role_chat_box_sync_res

	-- 更换当前使用的聊天框
	--Packet:role_chat_box_change_res

	--Packet:role_robbermonster

	-- 江洋大盗信息同步
	--Packet:robbermonster_sync_res

	-- 江洋大盗刷新
	--Packet:robbermonster_refresh_res

	-- 传送到大盗
	--Packet:robbermonster_tele_res

	-- 黑市信息同步
	--Packet:black_market_sync_res

	-- 黑市出价
	--Packet:black_market_price_res

	-- 同步帮派工资信息
	--Packet:sect_salary_sync_res

	-- 领取基础工资
	--Packet:sect_base_salary_take_res

	-- 领取活跃工资
	--Packet:sect_activity_salary_take_res

	-- 同步服务器封印是否被打破
	--Packet:breaklevel_state

	-- 同步打破封印信息
	--Packet:breaklevel_sync_res

	-- 打破封印捐赠
	--Packet:breaklevel_donate_res

	-- 声望商城同步协议
	--Packet:fame_shopsync_res

	-- 声望商城刷新协议
	--Packet:fame_shoprefresh_res

	-- 声望商城买商品协议
	--Packet:fame_shopbuy_res

	--Packet:tournament_info

	--Packet:role_fightteam

	--Packet:role_tournament_honor

	-- 战队信息通知
	--Packet:fightteam_info

	-- 队员加入通知
	--Packet:fightteam_join

	-- 队员被踢通知
	--Packet:fightteam_kick

	-- 战队解散通知
	--Packet:fightteam_dismiss

	-- 战队信息同步
	--Packet:fightteam_sync_res

	-- 创建战队
	--Packet:fightteam_create_res

	-- 解散战队
	--Packet:fightteam_dismiss_res

	-- 队长踢人
	--Packet:fightteam_kick_res

	-- 邀请加入战队
	--Packet:fightteam_invite_res

	-- 收到加入战队邀请
	--Packet:fightteam_invite_forward

	-- 战队邀请响应
	--Packet:fightteam_invite_response_res

	-- 通知队长邀请响应
	--Packet:fightteam_invite_response_forward

	--Packet:fightteam_queryf_res

	-- 队长报名海选赛
	--Packet:fightteam_joinqualifying_res

	-- 队长取消报名海选赛
	--Packet:fightteam_quitqualifying_res

	--Packet:fightteam_state_update

	--Packet:fteam_member_state

	--Packet:tournament_map_start

	--Packet:tournament_map_result

	--Packet:tournament_teamgroup_sync_res

	-- 队员锦标赛签到
	--Packet:fightteam_joinknockout_res

	--Packet:fightteam_querym_res

	-- 同步战队排行榜
	--Packet:fightteamrank_sync_res

	-- 获取战队排行榜列表
	--Packet:fightteamrank_get_res

	-- 个人荣誉奖励
	--Packet:tournament_take_rolereward_res

	-- 锦标赛奖励
	--Packet:tournament_take_teamreward_res

	-- 锦标赛结果
	--Packet:tournament_knockout_result

	-- 锦标赛对手查询
	--Packet:fightteam_selfgroup_res

	-- 锦标赛对手签到状态通知
	--Packet:fightteam_enemy_join

	-- 进入观战
	--Packet:tournament_guard_res

	-- 刷新脉象
	--Packet:meridian_refresh_holebuff_res

	-- 冲穴
	--Packet:meridian_break_hole_res

	-- 潜能升级
	--Packet:meridian_potential_uplevel_res

	-- 登陆同步潜能
	--Packet:role_potentials

	-- 帮派招募令信息
	--Packet:sect_msg_info_res

	-- 登录时同步书包
	--Packet:role_bookbag

	-- 骑术书存入
	--Packet:horsebook_push_res

	-- 骑术书取出
	--Packet:horsebook_pop_res

	-- 兽决存入
	--Packet:petbook_push_res

	-- 兽决取出
	--Packet:petbook_pop_res

	-- 结婚证点赞
	--Packet:marriage_card_sign_res

	-- 结婚证同步
	--Packet:marriage_card_sync_res

	-- 同步被抢次数
	--Packet:be_robbed_times

	-- 愿望卡片登陆同步
	--Packet:christmas_cards_login_sync_res

	-- 愿望卡片同步
	--Packet:christmas_cards_sync_res

	-- 请求愿望列表
	--Packet:christmas_cards_get_list_res

	-- 许愿返回
	--Packet:christmas_cards_wish_res

	-- 送花返回
	--Packet:christmas_cards_comment_res

	-- 解锁镖车皮肤
	--Packet:sect_deliver_skin_unlock_res

	-- 选择镖车皮肤
	--Packet:sect_deliver_skin_select_res

	-- 周常任务信息同步
	--Packet:week_task_sync_res

	-- 完成周常任务
	--Packet:week_task_finish_res

	-- 领取周常任务积分奖励
	--Packet:week_task_score_reward_take_res

	-- 使用示爱道具
	--Packet:show_love_item_use_res

	-- 被使用示爱道具通知
	--Packet:show_love_item_be_used_notice

	-- 送宝童子信息同步
	--Packet:wizard_wish_sync_res

	-- 送宝童子求取
	--Packet:wizard_wish_operate_res

	-- 送宝童子领奖
	--Packet:wizard_wish_take_res

	-- 星魂引星
	--Packet:star_spirit_operate_res

	-- 星魂升阶
	--Packet:star_spirit_uprank_res

	-- 星魂属性洗练
	--Packet:main_star_refresh_res

	-- 星魂主星属性推送
	--Packet:main_star_prop_push

	-- 星魂属性保存
	--Packet:main_star_save_res

	-- 登录同步
	--Packet:role_adventure

	-- 触发奇遇
	--Packet:role_trig_adventure

	-- 接取奇遇任务
	--Packet:adtask_take_res

	-- 放弃奇遇任务
	--Packet:adtask_quit_res

	-- 奇遇任务领取奖励
	--Packet:adtask_reward_res

	-- 接受奇遇任务
	--Packet:adtask_accept_res

	-- 选择奇遇任务
	--Packet:adtask_select_res

	-- 领取奇遇任务累计奖励
	--Packet:adtask_total_reward_res

	-- 弹幕添加
	--Packet:sect_popmsg_add_res

	-- 弹幕同步
	--Packet:sect_popmsg_sync_res

	-- 刷新任务库
	--Packet:dragon_hole_task_refresh_res

	-- 接取任务
	--Packet:dragon_hole_task_take_res

	-- 领取任务奖励
	--Packet:dragon_hole_task_reward_res

	-- 放弃任务
	--Packet:dragon_hole_task_giveup_res

	-- 同步龙穴任务信息
	--Packet:dragon_hole_task_sync_res

	-- 登陆同步龙穴任务
	--Packet:role_dragon_hole_task

	-- 快速完成龙穴任务
	--Packet:dragon_hole_quick_finish_task_res

	-- 擦拭雕像
	--Packet:honnor_statue_interation_res

	-- 获取武道会雕像详细信息
	--Packet:honnor_statue_get_fightteam_statue_res

	-- 同步春节福袋
	--Packet:new_year_pack_sync_res

	-- 春节福袋打开
	--Packet:new_year_pack_take_res

	-- 春节福袋登陆同步
	--Packet:role_new_year_pack_id

	-- 新年红包同步领取过的npc
	--Packet:new_year_red_packet_sync_taked_npc

	-- 领取新年红包
	--Packet:new_year_red_packet_get_res

	-- 同步灯谜
	--Packet:light_secret_sync_res

	-- 回答灯谜
	--Packet:light_secret_answer_res

	-- 领取角色奖励
	--Packet:light_secret_role_take_res

	-- 领取世界奖励
	--Packet:light_secret_world_take_res

	-- 登录同步跨服副本匹配信息
	--Packet:role_globalmap

	-- 跨服副本匹配结果
	--Packet:globalmap_match_result

	-- 快速匹配跨服副本
	--Packet:globalmap_join_res

	-- 取消匹配跨服副本
	--Packet:globalmap_quit_res

	-- 登陆同步八卦锻造属性相关
	--Packet:role_eightdiagram_info

	-- 八卦锻造同步
	--Packet:eightdiagram_sync_res

	-- 八卦强化
	--Packet:eightdiagram_strength_res

	-- 八卦分解
	--Packet:eightdiagram_splite_res

	-- 八卦萃取
	--Packet:eightdiagram_extraction_res

	-- 八卦制造
	--Packet:eightdiagram_create_res

	-- 八卦装备
	--Packet:eightdiagram_equip_res

	-- 八卦取消装备
	--Packet:eightdiagram_unequip_res

	-- 使用八卦原石
	--Packet:eightdiagram_use_stonebag_res

	-- 分解属性原石
	--Packet:eightdiagram_del_stonepool_res

	-- 合成祭品
	--Packet:item_compose_res

	-- 分解祭品
	--Packet:item_splite_res

	-- 开启八卦易数玩法
	--Packet:eightdiagram_change_open_res

	-- 购买易数分配点数
	--Packet:eightdiagram_change_buy_point_res

	-- 重置易数分配点数
	--Packet:eightdiagram_change_reset_point_res

	-- 更新易数分配点数
	--Packet:eightdiagram_change_update_point_res

	-- 技能升级
	--Packet:eightdiagram_change_uplevel_res

	-- 装备技能
	--Packet:eightdiagram_change_equip_skill_res

	-- 卸载技能
	--Packet:eightdiagram_change_unequip_skill_res

	-- 参加跨服PVE
	--Packet:globalpve_join_res

	--Packet:globalpve_sync_res

	--Packet:globalpve_teleboss_res

	-- 进入对战区
	--Packet:globalpve_enterwar_res

	-- 同步对战区列表
	--Packet:globalpve_syncwararea_res

	--Packet:globalpve_keys_sync

	--Packet:globalpve_keys_add

	--Packet:role_globalpve_start

	--Packet:role_globalpve_end

	--Packet:sectshare_sync_res

	--Packet:sectshare_event_sync_res

	--Packet:sectshare_apply_sync_res

	-- 共享道具申请
	--Packet:sectshare_apply_res

	-- 设置兑换所需共享积分
	--Packet:sectshare_setprice_res

	--Packet:sectshare_score_add

	--Packet:sectshare_event_start

	--Packet:sectshare_event_batch

	--Packet:sectshare_event_end

	--Packet:sectshare_event_add

	--Packet:sectshare_apply_start

	--Packet:sectshare_apply_batch

	--Packet:sectshare_apply_end

	--Packet:million_answer_sync_res

	--Packet:million_answer_reserve_res

	--Packet:million_answer_click_res

	--Packet:million_answer_name_res

	-- 发送验证码
	--Packet:send_phone_msg_res

	-- 领取绑定手机奖励
	--Packet:take_bind_phone_reward_res

	-- 同步绑定手机奖励
	--Packet:phone_reward_sync_res

	-- 同步卜卦信息
	--Packet:divination_sync_res

	-- 响应卜卦信息
	--Packet:divination_info_res

	-- 领取卜卦奖励
	--Packet:divination_reward_res

	-- 登陆同步五转之路信息
	--Packet:role_transform_road

	-- 升级五转之路
	--Packet:transform_road_uplevel_res

	-- 选择命轮
	--Packet:transform_road_use_lifewheel_res

	-- 重置命轮
	--Packet:transform_road_reset_lifewheel_res

	--Packet:send_kite_res

	-- 同步单人闯关
	--Packet:single_explore_sync_res

	-- 进入单人闯关
	--Packet:single_explore_start_res

	-- 选择单人闯关宠物
	--Packet:single_explore_set_pet_res

	-- 世界杯同步信息响应
	--Packet:world_cup_sync_res

	-- 进行下注
	--Packet:world_cup_conduct_bet_res

	-- 家园创建
	--Packet:homeland_create_res

	-- 家园改名
	--Packet:homeland_rename_res

	-- 家园升级
	--Packet:homeland_uplevel_res

	-- 家园土地升级
	--Packet:homeland_ground_uplevel_res

	-- 家园池塘升级
	--Packet:homeland_pool_uplevel_res

	-- 种植作物
	--Packet:homeland_plant_res

	-- 铲除作物
	--Packet:homeland_remove_res

	-- 偷窃作物
	--Packet:homeland_steal_res

	-- 收获作物
	--Packet:homeland_harvest_res

	-- 进入家园
	--Packet:homeland_enter_res

	-- 进入家园同步
	--Packet:homeland_map_sync

	-- 登陆同步家园等级
	--Packet:homeland_login_sync

	-- 同步家园信息
	--Packet:homeland_sync_res

	-- 同步家园装备信息
	--Packet:homeland_equip_sync_res

	-- 作物浇水
	--Packet:homeland_water_res

	-- 作物护理
	--Packet:homeland_nurse_res

	-- 地图内土地收到操作
	--Packet:homeland_ground_operate

	-- 开始钓鱼
	--Packet:homeland_start_fish_res

	-- 中断钓鱼
	--Packet:homeland_stop_fish_res

	-- 结束钓鱼
	--Packet:homeland_finish_fish_res

	-- 穿戴装备
	--Packet:homeland_equip_wear_res

	-- 脱下装备
	--Packet:homeland_equip_unwaer_res

	-- 销毁装备
	--Packet:homeland_equip_remove_res

	-- 踢出角色
	--Packet:homeland_kick_role_res

	-- 被踢推送
	--Packet:homeland_kick_role_push

	-- 查询家园内角色
	--Packet:homeland_query_roles_res

	-- 同步家园历史信息
	--Packet:homeland_history_sync_res

	-- 修改钓鱼状态
	--Packet:homeland_fish_status_change_res

	-- 登陆同步钓鱼状态
	--Packet:role_homeland_fish_status

	-- 家园生产
	--Packet:homeland_produce_res

	-- 进入房间同步
	--Packet:house_map_sync

	-- 家园房屋升级
	--Packet:homeland_house_uplevel_res

	-- 家具背包存入
	--Packet:furniture_bag_put_res

	-- 家具背包取出
	--Packet:furniture_bag_get_res

	-- 地面家具放置
	--Packet:land_furniture_put_res

	-- 地面家具移动
	--Packet:land_furniture_move_res

	-- 地面家具取回
	--Packet:land_furniture_remove_res

	-- 地毯家具放置
	--Packet:floor_furniture_put_res

	-- 地毯家具移动
	--Packet:floor_furniture_move_res

	-- 地毯家具取回
	--Packet:floor_furniture_remove_res

	-- 墙面家具放置
	--Packet:wall_furniture_put_res

	-- 墙面家具取回
	--Packet:wall_furniture_remove_res

	-- 附加家具放置
	--Packet:addition_furniture_put_res

	-- 附加家具取回
	--Packet:addition_furniture_remove_res

	-- 进入房间
	--Packet:house_enter_res

	-- 家园房屋等级广播
	--Packet:homeland_house_level

	-- 家园地面家具摆放
	--Packet:house_land_furniture_use

	-- 家园地毯家具摆放
	--Packet:house_floor_furniture_use

	-- 家园墙面家具摆放
	--Packet:house_wall_furniture_use

	-- 家园附加家具摆放
	--Packet:house_addition_furniture_use

	-- 家园家具移除
	--Packet:house_land_furniture_remove

	-- 家园家具移动
	--Packet:house_furniture_move

	-- 家具背包同步
	--Packet:house_bag_furniture_sync_res

	-- 钓鱼超时结束同步
	--Packet:homeland_fish_end

	-- 房屋皮肤切换
	--Packet:house_skin_select_res

	-- 房屋皮肤切换通知
	--Packet:house_skin_change

	-- 使用房屋皮肤解锁道具
	--Packet:bag_use_house_skin_item_res

	-- 房屋已解锁皮肤同步
	--Packet:house_unlock_skin_sync_res

	-- 传世大酬宾活动同步
	--Packet:legendmake_sync_res

	-- 标记脚本角色
	--Packet:script_role_mark_res

	-- 登陆节日活动同步
	--Packet:role_festival_info

	-- 节日活动礼盒领取
	--Packet:festival_takegift_res

	-- 节日活动世界祝福
	--Packet:festival_bless_res

	-- 佛诞节信息同步
	--Packet:donate_sync_info_res

	-- 佛诞节进行捐赠
	--Packet:donate_conduct_res

	-- 领取奖励
	--Packet:donate_reward_res

	-- 响应图钉信息
	--Packet:thumbtack_sync_res

	-- 添加图钉
	--Packet:thumbtack_add_res

	-- 修改备注
	--Packet:thumbtack_revise_remarks_res

	-- 删除图钉
	--Packet:thumbtack_delete_res

	-- 使用图钉
	--Packet:thumbtack_use_res

	-- 帮派捐赠
	--Packet:sect_donation_res

	-- 帮派捐赠同步
	--Packet:sect_donation_sync_res

	-- 帮派捐赠同步捐赠角色
	--Packet:sect_donation_roles_res

	-- 同步伙伴码
	--Packet:sync_partner_info_res

	-- 绑定伙伴码
	--Packet:add_partner_code_res

	-- 领取奖励
	--Packet:receive_partner_reward_res

	-- 领取荣耀归来奖励
	--Packet:receive_partner_honour_reward_res

	-- 是否绑定了伙伴码
	--Packet:role_is_bind_partner

	-- 单人开启NPC副本
	--Packet:single_npc_map_start_res

	-- 伙伴解绑下线玩家
	--Packet:unbind_partner_res

	-- 伙伴解绑上线玩家
	--Packet:unbind_upper_partner_res

	-- 登录通知善缘值
	--Packet:role_release_info

	-- 进行放生道具
	--Packet:conduct_release_item_res

	-- 同步登科有礼信息
	--Packet:admission_sync_info_res

	-- 卜算响应
	--Packet:admission_conduct_res

	-- 领取姻缘成就奖励
	--Packet:marriage_achieve_receive_reward_res

	--Packet:marriage_achieve_accumulative_reward_res

	-- 进入宠物试炼副本
	--Packet:pettrain_enter_res

	-- 进入宠物试炼副本同步
	--Packet:pettrain_enter_sync

	-- 领取宠物试炼任务
	--Packet:pettrain_task_take_res

	-- 完成宠物试炼任务
	--Packet:pettrain_task_finish_res

	-- 采集宠物试炼矿物
	--Packet:pettrain_mineral_take_res

	-- 五绝争霸信息同步
	--Packet:five_hegemony_sync_info_res

	-- 选择npc
	--Packet:five_hegemony_choose_npc_res

	-- 选择npc技能
	--Packet:five_hegemony_choose_skill_res

	-- 请求回合争斗结果
	--Packet:five_hegemony_round_result_res

	-- 请求弹幕
	--Packet:notice_five_hegemony_barrages

	-- 发送弹幕
	--Packet:five_hegemony_send_barrage_res

	-- 奖励怪物刷新后进入副本推送坐标
	--Packet:monster_position

	-- 邀请设置
	--Packet:invitation_relevant_settings_res

	-- 登录同步邀请设置
	--Packet:sync_invitation_settings_info

	-- 日程记录同步
	--Packet:schdule_log_sync_res

	-- 登录同步战斗姿态信息
	--Packet:combat_type_info_sync

	-- 通知客户端显示map服务器属性，用于调试
	--Packet:role_show_props

	-- 开始进入地图
	--Packet:role_map_welcome_start

	-- 进入地图成功，对应role_enter_map的异步响应
	--Packet:role_map_welcome

	-- 进地图同步玩家技能CD(key: skillID, value: 剩余多少ms结束)
	--Packet:role_skills_cooldown

	-- 进地图同步玩家在第几个出生点
	--Packet:role_spawn_point

	-- map同步神兵变身剩余时间
	--Packet:role_weaponlefttime

	-- map同步当前神兵ID
	--Packet:role_curweapon

	-- map同步神兵快速变身时间
	--Packet:role_quickmotivatetime

	-- map同步当前的骑乘的坐骑
	--Packet:role_curridehorse

	-- map同步上马CD(ms)
	--Packet:role_ride_cooltime

	-- map同步任务变身状态
	--Packet:role_taskalter

	-- 进入身世副本同步变身的佣兵ID
	--Packet:role_petalter

	-- map同步当前出战佣兵
	--Packet:role_fightpets

	-- 进入地图同步内甲信息
	--Packet:role_armor

	--Packet:role_escortcar

	-- 新郎、新娘进入map通知结婚游街信息
	--Packet:role_weddingcar

	-- 通知新郎、新娘销毁镖车
	--Packet:role_weddingcar_destory

	--Packet:role_update_timetick

	-- 计算延迟(客户端发起client_ping_start的服务器异步回应)
	--Packet:client_ping_end

	-- 玩家鬼魂状态
	--Packet:role_ghost

	-- 周围玩家穿时装
	--Packet:nearby_upwear_fashion

	-- 周围玩家时装是否显示
	--Packet:nearby_set_fashionshow

	-- 周围玩家设置当前称号(titleType 0:永久 大于0:时效  titleID 小于0: 卸载称号)
	--Packet:nearby_role_updatetitle

	-- 周围玩家变身状态（任务变身）
	--Packet:nearby_role_alterstate

	-- 周围玩家更换当前骑乘的坐骑
	--Packet:nearby_ride_horse

	-- 周围玩家下马
	--Packet:nearby_unride_horse

	-- 周围玩家更换良驹之灵外观
	--Packet:nearby_horse_spirit_show

	-- 附近玩家技能伤害结束（清除disattack状态）
	--Packet:nearby_role_endskill

	-- 附近玩家技能结束（清除attack状态）
	--Packet:nearby_role_finishattack

	-- 附近佣兵技能伤害结束（清除disattack状态）
	--Packet:nearby_pet_endskill

	-- 附近佣兵技能结束（清除attack状态）
	--Packet:nearby_pet_finishattack

	-- 附近怪物技能伤害结束（清除disattack状态）
	--Packet:nearby_monster_endskill

	-- 附近怪物技能结束（清除attack状态）
	--Packet:nearby_monster_finishattack

	-- 附近残影技能伤害结束（清除disattack状态）
	--Packet:nearby_blur_endskill

	-- 附近残影技能结束（清除attack状态）
	--Packet:nearby_blur_finishattack

	-- 附近符灵卫技能伤害结束（清除disattack状态）
	--Packet:nearby_summoned_endskill

	-- 附近符灵卫技能结束（清除attack状态）
	--Packet:nearby_summoned_finishattack

	-- 附近法阵能伤害结束（清除disattack状态）
	--Packet:nearby_skillentity_endskill

	-- 附近玩家技能被打断
	--Packet:nearby_role_breakskill

	-- 附近佣兵技能被打断
	--Packet:nearby_pet_breakskill

	-- 附近怪物技能被打断
	--Packet:nearby_monster_breakskill

	-- 附近残影技能被打断
	--Packet:nearby_blur_breakskill

	-- 附近符灵卫技能被打断
	--Packet:nearby_summoned_breakskill

	-- 附近玩家攻击目标改变（单体技能时使用）
	--Packet:nearby_role_change_target

	-- 附近玩家改变朝向（单体技能时使用）
	--Packet:nearby_role_change_rotation

	-- 玩家位置矫正(服务器矫正客户端)
	--Packet:role_adjust_pos

	-- 佣兵位置矫正(服务器矫正客户端)
	--Packet:pet_adjust_pos

	-- 怪物位置矫正
	--Packet:monster_adjust_pos

	-- 周围玩家进入视野(请求详细信息)
	--Packet:nearby_enter_roles

	-- 周围佣兵进入视野(请求详细信息)
	--Packet:nearby_enter_pets

	-- 周围陷阱进入视野(请求详细信息)
	--Packet:nearby_enter_traps

	-- 周围镖车进入视野
	--Packet:nearby_enter_escortcars

	-- 周围怪物进入视野
	--Packet:nearby_enter_monsters

	-- 周围残影进入视野
	--Packet:nearby_enter_blurs

	-- 周围符灵卫进入视野
	--Packet:nearby_enter_summoneds

	-- 周围法阵进入视野
	--Packet:nearby_enter_skillentitys

	-- 周围NPC进入视野
	--Packet:nearby_enter_npcs

	-- 周围婚车进入视野
	--Packet:nearby_enter_weddingcars

	-- 周围竞赛宠物进入视野
	--Packet:nearby_enter_petrunpets

	-- 周围实例进入视野
	--Packet:nearby_enter_entities

	-- 周围周年活动NPC创建
	--Packet:nearby_create_jubileeactivitynpc

	-- 周围示爱道具进入视野
	--Packet:nearby_enter_showloveitems

	-- 周围雕像进入视野
	--Packet:nearby_enter_honnorstatue

	-- 周围矿点进入视野
	--Packet:nearby_enter_minerals

	-- 周围传送点进入视野
	--Packet:nearby_enter_waypoints

	-- 周围场景BUFF进入视野
	--Packet:nearby_enter_mapbuffs

	-- 周围玩家进入视野
	--Packet:nearby_enter_role

	-- 周围佣兵进入视野
	--Packet:nearby_enter_pet

	-- 周围怪物开始变身
	--Packet:nearby_monster_alterstart

	-- 周围怪物结束变身
	--Packet:nearby_monster_alterend

	-- 周围怪物说话
	--Packet:nearby_monster_pop

	-- 周围有怪物出生
	--Packet:nearby_spawn_monster

	-- 周围怪物进入视野
	--Packet:nearby_enter_monster

	-- 周围陷阱进入视野
	--Packet:nearby_enter_trap

	-- 周围NPC进入视野
	--Packet:nearby_enter_npc

	-- 周围矿点进入视野
	--Packet:nearby_enter_mineral

	-- 周围传送点进入视野
	--Packet:nearby_enter_waypoint

	-- 周围场景BUFF进入视野
	--Packet:nearby_enter_mapbuff

	-- 周围法阵进入视野
	--Packet:nearby_enter_skillentity

	-- 周围残影进入视野
	--Packet:nearby_enter_blur

	-- 周围符灵卫进入视野
	--Packet:nearby_enter_summoned

	-- 周围玩家离开视野
	--Packet:nearby_leave_roles

	-- 周围怪物离开视野
	--Packet:nearby_leave_monsters

	-- 周围陷阱离开视野
	--Packet:nearby_leave_traps

	-- 周围佣兵离开视野
	--Packet:nearby_leave_pets

	-- 周围镖车离开视野
	--Packet:nearby_leave_escortcars

	-- 周围NPC离开视野
	--Packet:nearby_leave_npcs

	-- 周围婚车离开视野
	--Packet:nearby_leave_weddingcars

	-- 周围竞赛宠物离开视野
	--Packet:nearby_leave_petrunpets

	-- 周围实例离开视野
	--Packet:nearby_leave_entities

	-- 周围周年活动NPC销毁
	--Packet:nearby_destory_jubileeactivitynpc

	-- 周围示爱道具离开视野
	--Packet:nearby_leave_showloveitems

	-- 周围荣耀雕像离开视野
	--Packet:nearby_leave_honnorstatue

	-- 周围矿点离开视野
	--Packet:nearby_leave_minerals

	-- 周围传送点离开视野
	--Packet:nearby_leave_waypoints

	-- 周围场景BUFF离开视野
	--Packet:nearby_leave_mapbuffs

	-- 周围法阵离开视野
	--Packet:nearby_leave_skillentitys

	-- 周围残影离开视野
	--Packet:nearby_leave_blurs

	-- 周围符灵卫离开视野
	--Packet:nearby_leave_summoneds

	-- 周围玩家离开视野
	--Packet:nearby_leave_role

	-- 周围怪物离开视野
	--Packet:nearby_leave_monster

	-- 周围陷阱离开视野
	--Packet:nearby_leave_trap

	-- 周围佣兵离开视野
	--Packet:nearby_leave_pet

	-- 周围NPC离开视野
	--Packet:nearby_leave_npc

	-- 周围矿点离开视野
	--Packet:nearby_leave_mineral

	-- 周围传送点离开视野
	--Packet:nearby_leave_waypoint

	-- 周围场景BUFF离开视野
	--Packet:nearby_leave_mapbuff

	-- 周围法阵离开视野
	--Packet:nearby_leave_skillentity

	-- 周围残影离开视野
	--Packet:nearby_leave_blur

	-- 周围符灵卫离开视野
	--Packet:nearby_leave_summoned

	-- 周围玩家重置位置
	--Packet:nearby_role_resetposition

	-- 周围玩家更新位置
	--Packet:nearby_role_updateposition

	-- 周围玩家移动
	--Packet:nearby_move_role

	-- 周围佣兵重置位置
	--Packet:nearby_pet_resetposition

	-- 周围佣兵更新位置
	--Packet:nearby_pet_updateposition

	-- 周围佣兵移动
	--Packet:nearby_move_pet

	-- 周围镖车移动
	--Packet:nearby_move_escortcar

	-- 周围怪物移动
	--Packet:nearby_move_monster

	-- 周围残影移动
	--Packet:nearby_move_blur

	-- 周围符灵卫移动
	--Packet:nearby_move_summoned

	-- 周围法阵移动
	--Packet:nearby_move_skillentity

	-- 周围婚车移动
	--Packet:nearby_move_weddingcar

	-- 周围竞赛宠物移动
	--Packet:nearby_move_petrunpet

	-- 周围实例移动
	--Packet:nearby_move_entity

	-- 周围玩家停止移动
	--Packet:nearby_stopmove_role

	-- 周围佣兵停止移动
	--Packet:nearby_stopmove_pet

	-- 周围怪物停止移动
	--Packet:nearby_stopmove_monster

	-- 周围镖车停止移动
	--Packet:nearby_stopmove_escortcar

	-- 周围残影停止移动
	--Packet:nearby_stopmove_blur

	-- 周围符灵卫停止移动
	--Packet:nearby_stopmove_summoned

	-- 周围法阵停止移动
	--Packet:nearby_stopmove_skillentity

	-- 周围婚车停止移动
	--Packet:nearby_stopmove_weddingcar

	-- 周围竞赛宠物停止移动
	--Packet:nearby_stopmove_petrunpet

	-- 周围实例停止移动
	--Packet:nearby_stopmove_entity

	-- 周围玩家使用后续技能
	--Packet:nearby_role_usefollowskill

	--Packet:nearby_role_socialaction

	-- 周围玩家闪烁突刺
	--Packet:nearby_role_blinkskill

	-- 周围玩家使用技能
	--Packet:nearby_role_useskill

	-- 周围玩家使用自创技能
	--Packet:nearby_role_usediyskill

	-- 周围佣兵使用技能
	--Packet:nearby_pet_useskill

	-- 周围怪物使用技能
	--Packet:nearby_monster_useskill

	-- 周围陷阱使用技能
	--Packet:nearby_trap_useskill

	-- 周围残影使用技能
	--Packet:nearby_blur_useskill

	-- 周围符灵卫使用技能
	--Packet:nearby_summoned_useskill

	-- 周围玩家使用子技能
	--Packet:nearby_role_usechildskill

	-- 周围佣兵使用子技能
	--Packet:nearby_pet_usechildskill

	-- 周围怪物使用子技能
	--Packet:nearby_monster_usechildskill

	-- 周围残影使用子技能
	--Packet:nearby_blur_usechildskill

	-- 周围符灵卫使用子技能
	--Packet:nearby_summoned_usechildskill

	-- 周围法阵使用子技能
	--Packet:nearby_skillentity_usechildskill

	-- 周围玩家使用触发技能
	--Packet:nearby_role_usetrigskill

	-- 周围佣兵使用触发技能
	--Packet:nearby_pet_usetrigskill

	-- 周围怪物使用触发技能
	--Packet:nearby_monster_usetrigskill

	-- 周围残影使用触发技能技能
	--Packet:nearby_blur_usetrigskill

	-- 周围符灵卫使用触发技能技能
	--Packet:nearby_summoned_usetrigskill

	-- 4v4竞技场广播首杀
	--Packet:nearby_first_blood

	-- 4v4竞技场广播击杀玩家
	--Packet:nearby_role_kill

	--Packet:nearby_processdamage_end

	-- 周围玩家受到伤害
	--Packet:nearby_role_ondamage

	-- 周围佣兵受到伤害
	--Packet:nearby_pet_ondamage

	-- 周围镖车受到伤害
	--Packet:nearby_escortcar_ondamage

	-- 周围怪物受到伤害
	--Packet:nearby_monster_ondamage

	-- 周围残影受到伤害
	--Packet:nearby_blur_ondamage

	-- 周围符灵卫受到伤害
	--Packet:nearby_summoned_ondamage

	--Packet:nearby_role_prolong_floating

	-- 周围玩家添加BUFF(remainTime： 剩余毫秒)
	--Packet:nearby_role_addbuff

	-- 周围怪物添加BUFF(remainTime： 剩余毫秒)
	--Packet:nearby_monster_addbuff

	-- 周围赛跑宠物添加BUFF(remainTime： 剩余毫秒)
	--Packet:nearby_petrunpet_addbuff

	-- 周围佣兵添加BUFF(remainTime： 剩余毫秒)
	--Packet:nearby_pet_addbuff

	-- 周围镖车添加BUFF
	--Packet:nearby_escortcar_addbuff

	-- 周围残影添加BUFF(remainTime： 剩余毫秒)
	--Packet:nearby_blur_addbuff

	-- 周围符灵卫添加BUFF(remainTime： 剩余毫秒)
	--Packet:nearby_summoned_addbuff

	-- 周围玩家去除BUFF
	--Packet:nearby_role_removebuff

	-- 周围怪物去除BUFF
	--Packet:nearby_monster_removebuff

	-- 周围赛跑宠物去除BUFF
	--Packet:nearby_petrunpet_removebuff

	-- 周围镖车去除BUFF
	--Packet:nearby_escortcar_removebuff

	-- 周围佣兵去除BUFF
	--Packet:nearby_pet_removebuff

	-- 周围残影去除BUFF
	--Packet:nearby_blur_removebuff

	-- 周围符灵卫去除BUFF
	--Packet:nearby_summoned_removebuff

	-- 周围玩家驱散BUFF
	--Packet:nearby_role_dispelbuff

	-- 周围怪物驱散BUFF
	--Packet:nearby_monster_dispelbuff

	-- 周围佣兵驱散BUFF
	--Packet:nearby_pet_dispelbuff

	-- 周围玩家吸吸收伤害
	--Packet:nearby_role_reduce

	-- 周围佣兵吸吸收伤害
	--Packet:nearby_pet_reduce

	-- 周围怪物吸吸收伤害
	--Packet:nearby_monster_reduce

	-- 周围玩家受到BUFF伤害
	--Packet:nearby_role_buffdamage

	-- 周围玩家受到内伤伤害
	--Packet:nearby_role_internalinjurydamage

	-- 周围怪物受到BUFF伤害
	--Packet:nearby_monster_buffdamage

	-- 周围镖车受到BUFF伤害
	--Packet:nearby_escortcar_buffdamage

	-- 周围佣兵受到BUFF伤害
	--Packet:nearby_pet_buffdamage

	-- 周围残影受到BUFF伤害
	--Packet:nearby_blur_buffdamage

	-- 周围符灵卫受到BUFF伤害
	--Packet:nearby_summoned_buffdamage

	-- 周围玩家同步血量
	--Packet:nearby_role_updatehp

	-- 周围玩家同步内伤值
	--Packet:nearby_role_updateinternalinjury

	-- 周围怪物同步血量
	--Packet:nearby_monster_updatehp

	-- 周围怪物同步头顶信息
	--Packet:nearby_monster_updatetop

	-- 周围佣兵同步血量
	--Packet:nearby_pet_updatehp

	-- 周围残影同步血量
	--Packet:nearby_blur_updatehp

	-- 周围符灵卫同步血量
	--Packet:nearby_summoned_updatehp

	-- 周围镖车同步血量(包括镖车主人)
	--Packet:nearby_escortcar_updatehp

	-- 周围镖车社交信息
	--Packet:nearby_escortcar_updatesocial

	-- 周围镖车同步状态（1:正常  0:破损）
	--Packet:nearby_escortcar_updatestate

	-- 周围镖车被劫镖
	--Packet:nearby_escortcar_robbed

	-- 周围玩家死亡
	--Packet:nearby_role_dead

	-- 广播击杀玩家
	--Packet:map_role_kill

	-- 周围佣兵死亡
	--Packet:nearby_pet_dead

	-- 周围怪物死亡
	--Packet:nearby_monster_dead

	-- 周围残影死亡
	--Packet:nearby_blur_dead

	-- 周围符灵卫死亡
	--Packet:nearby_summoned_dead

	-- 周围玩家开始冲锋
	--Packet:nearby_role_rushstart

	-- 周围佣兵开始冲锋
	--Packet:nearby_pet_rushstart

	-- 周围怪物开始冲锋
	--Packet:nearby_monster_rushstart

	-- 周围怪物冲锋结束
	--Packet:nearby_monster_rushend

	-- 周围残影开始冲锋
	--Packet:nearby_blur_rushstart

	-- 周围残影冲锋结束
	--Packet:nearby_blur_rushend

	-- 周围符灵卫开始冲锋
	--Packet:nearby_summoned_rushstart

	-- 周围符灵卫冲锋结束
	--Packet:nearby_summoned_rushend

	-- 周围玩家升级
	--Packet:nearby_role_lvlup

	-- 周围玩家部位更新
	--Packet:nearby_role_updatepart

	-- 周围玩家同步最大血量
	--Packet:nearby_role_updatemaxhp

	-- 更新周围玩家是否是运镖行为
	--Packet:nearby_role_carbehavior

	-- 周围佣兵同步最大血量
	--Packet:nearby_pet_updatemaxhp

	-- 周围镖车同步最大血量(包括镖车主人)
	--Packet:nearby_escortcar_updatemaxhp

	-- 周围单位复活
	--Packet:nearby_role_revive

	-- 周围佣兵复活
	--Packet:nearby_pet_revive

	-- 周围陷阱改变状态
	--Packet:nearby_trap_changestate

	-- 周围玩家更换装备
	--Packet:nearby_role_updateequip

	-- 周围玩家更改脚底特效
	--Packet:nearby_role_updatefooteffect

	-- 周围玩家更改装备外显
	--Packet:nearby_role_updateweapondisplay

	-- 周围玩家更改守护灵兽
	--Packet:nearby_role_changepetguard

	-- 周围玩家脱装备
	--Packet:nearby_role_removeequip

	-- 周围玩家激活神兵
	--Packet:nearby_role_motivateweapon

	-- 周围玩家更新武器祝福状态
	--Packet:nearby_role_update_weaponbless

	-- 自己触发武器祝福特效
	--Packet:role_weaponbless_state

	-- 周围玩家激活神兵结束
	--Packet:nearby_role_motivateend

	-- 周围玩家开始采矿
	--Packet:nearby_role_mineralstart

	-- 周围玩家采矿结束
	--Packet:nearby_role_mineralend

	-- 周围矿状态更新(state 0:损坏 1::正常)
	--Packet:nearby_mineral_updatestate

	--Packet:nearby_mineral_updateowntype

	-- 周围玩家采矿打断
	--Packet:nearby_role_mineralbreak

	-- 同步玩家击退结束位置
	--Packet:nearby_shiftend_role

	-- 同步佣兵击退结束位置
	--Packet:nearby_shiftend_pet

	-- 同步怪物击退结束位置
	--Packet:nearby_shiftend_monster

	-- 同步残影击退结束位置
	--Packet:nearby_shiftend_blur

	-- 同步符灵卫击退结束位置
	--Packet:nearby_shiftend_summoned

	-- 周围玩家添加嘲讽状态
	--Packet:nearby_addataunt_role

	-- 周围佣兵添加嘲讽状态
	--Packet:nearby_addataunt_pet

	-- 周围怪物添加嘲讽状态
	--Packet:nearby_addataunt_monster

	-- 周围残影添加嘲讽状态
	--Packet:nearby_addataunt_blur

	-- 周围符灵卫添加嘲讽状态
	--Packet:nearby_addataunt_summoned

	-- 周围怪物添加硬直状态
	--Packet:nearby_addspa_monster

	-- 更新周围玩家帮派信息
	--Packet:nearby_update_sectbrief

	-- 周围玩家添加状态
	--Packet:nearby_role_addstate

	-- 周围玩家去除状态
	--Packet:nearby_role_removestate

	-- 玩家自身添加状态
	--Packet:role_addstate

	-- 玩家自身去除状态
	--Packet:role_removestate

	-- 佣兵自身添加状态
	--Packet:pet_addstate

	-- 佣兵自身去除状态
	--Packet:pet_removestate

	-- 通知玩家复活
	--Packet:role_revive

	-- 佣兵召唤协议
	--Packet:role_summon_pet

	-- 佣兵解散协议
	--Packet:role_unsummon_pet

	-- 佣兵复活协议(map回应)
	--Packet:role_revive_pet

	-- 佣兵位置重置
	--Packet:pet_reset_position

	-- 周围召唤出一个佣兵
	--Packet:nearby_call_pet

	-- 解散一个佣兵
	--Packet:nearby_dissolve_pet

	-- 同步玩家耐久度
	--Packet:role_sync_durability

	-- 同步玩家能量
	--Packet:role_sync_sp

	-- 同步玩家武器祝福层数
	--Packet:role_sync_weaponbless_curlvl

	-- 同步玩家魂语
	--Packet:role_sync_soulenergy

	-- 同步玩家buff增减战斗能量
	--Packet:role_sync_bufffightSP

	-- 同步玩家战斗能量
	--Packet:role_sync_fightSP

	-- 同步佣兵能量
	--Packet:pet_sync_sp

	-- 激活神兵回应(motivate_weapon的异步回应)
	--Packet:motivate_state

	-- 更新神兵变身减少时间
	--Packet:update_motivate_time

	-- 激活武器祝福回应(role_active_weapon_bless)
	--Packet:weaponbless_state

	-- 查询周围玩家回应(query_roles_detail的异步回应)
	--Packet:roles_detail

	-- 查询周围佣兵信息回应(query_pets_detail的异步回应)
	--Packet:pets_detail

	-- 删除掉落
	--Packet:drop_delete

	-- 拾取掉落成功(role_pickup_drops的异步回应)
	--Packet:role_pickup_add

	-- 掉落
	--Packet:role_sync_drops

	-- 进地图同步所以掉落
	--Packet:role_sync_alldrops

	-- 拾取场景BUFF回应(role_pickup_mapbuff的异步回应)
	--Packet:role_mapbuff_add

	-- 掉落场景BUFF
	--Packet:drop_mapbuff

	-- 同步单机副本进度
	--Packet:privatemap_sync_progress

	-- 同步会武竞技场信息
	--Packet:superarena_info

	-- 更新组队副本当前刷怪区域ID
	--Packet:update_curspawnarea

	-- 玩家自己触发技能（服务器触发）
	--Packet:role_trig_skill

	-- 佣兵自己触发技能（服务器触发）
	--Packet:pet_trig_skill

	-- 更新PK值
	--Packet:role_update_pkvalue

	-- 周围玩家同步PK状态
	--Packet:nearby_update_pkinfo

	-- 冷却玩家某个技能（使技能不能使用）
	--Packet:role_reset_skill

	-- 冷却佣兵某个技能（使技能不能使用）
	--Packet:pet_reset_skill

	-- 快速冷却玩家某个技能（减少CD时间）
	--Packet:role_quickcool_skill

	-- 快速冷却佣兵某个技能（减少CD时间）
	--Packet:pet_quickcool_skill

	-- 查询家园人员位置(query_homeland_members_pos的回应)
	--Packet:homeland_members_position

	-- 势力战自己积分更新
	--Packet:role_forcewar_score

	-- 查询势力战队友位置信息(query_forcewar_members_pos的回应)
	--Packet:forcewar_members_position

	-- 势力战雕像、水晶（进地图时同步的）
	--Packet:role_forcewar_statues

	-- 势力战战报查询回应(query_forcewar_result的回应)
	--Packet:roles_forcewaroverview

	-- 击杀加分
	--Packet:role_forcewar_kill

	-- 助攻加分
	--Packet:role_forcewar_assist

	--Packet:nearby_forcewar_statues

	-- 势力战阵营积分更新
	--Packet:nearby_forcewar_campscore

	-- 势力战首杀
	--Packet:forcewar_first_blood

	-- 势力战连杀、或者终结连杀
	--Packet:nearby_forcewar_kill

	-- 查询帮战队友位置信息(query_sectwar_members_pos的回应)
	--Packet:sectwar_members_position

	-- 帮战战报查询回应(query_sectwar_result的回应, winForceType -1:未结束 0:平局)
	--Packet:roles_sectwaroverview

	-- 通知帮派战战斗阶段是否结束
	--Packet:role_sectwar_fightend

	-- 通知客户端强制切换PK模式
	--Packet:role_force_change_pk_state

	-- 帮战阵营积分更新
	--Packet:nearby_sectwar_campscore

	-- 帮战首杀
	--Packet:sectwar_first_blood

	-- 帮战连杀、或者终结连杀
	--Packet:nearby_sectwar_kill

	-- 周围玩家改名
	--Packet:nearby_role_rename

	-- 周围玩家佣兵改名
	--Packet:nearby_pet_rename

	-- 同步多人坐骑信息
	--Packet:role_mulhorse

	-- 离开多人坐骑
	--Packet:role_leave_mulhorse

	-- 通知成员多人坐骑变化
	--Packet:role_update_mulhorse

	-- 广播周围玩家多人坐骑变化
	--Packet:nearby_update_mulhorse

	-- 相依相偎
	--Packet:role_staywith

	-- 解散相依相偎
	--Packet:role_dissolve_staywith

	-- 广播周围玩家相依相偎
	--Packet:nearby_role_staywith

	-- 广播周围玩家解散相依相偎
	--Packet:nearby_dissolve_staywith

	-- 广播周围玩家么么哒
	--Packet:nearby_role_memeda

	-- 温泉双人动作
	--Packet:role_doubleAct

	-- 解散温泉双人动作
	--Packet:role_dissolve_doubleAct

	-- 广播周围玩家双人动作
	--Packet:nearby_role_doubleAct

	-- 广播周围玩家解散双人动作
	--Packet:nearby_dissolve_doubleAct

	-- 同步世界boss伤害排行
	--Packet:boss_damage_rank

	-- 关闭世界boss伤害界面
	--Packet:boss_damage_close

	-- 周围玩家内甲变化广播
	--Packet:nearby_role_updatearmor

	-- 周围玩家家园装备变化广播
	--Packet:nearby_role_updatehomelandequip

	-- 周围玩家开始钓鱼
	--Packet:nearby_role_startfish

	-- 周围玩家结束钓鱼
	--Packet:nearby_role_endfish

	-- 周围玩家更新钓鱼状态
	--Packet:nearby_role_fishstatus

	-- 玩家内甲冻结状态更新
	--Packet:role_armorfreeze_update

	-- 玩家内甲值变化
	--Packet:role_armorval_update

	-- 玩家内甲虚弱状态更新
	--Packet:role_armorweak_update

	-- 广播周围玩家内甲虚弱状态更新
	--Packet:nearby_role_armorweak

	-- 2v2竞技场每一小场结果（0：负  1：胜 2：平）
	--Packet:superarena_race_result

	-- 进入地图同步当前比分
	--Packet:superarena_race_results

	-- 神器乱斗进地图信息同步
	--Packet:superarena_weaponmap_info

	-- 神器乱斗积分更新
	--Packet:superarena_weaponmap_updatescore

	-- 神器乱斗神兵切换通知
	--Packet:superarena_weaponchangetimes

	-- 神器乱斗乱战技能使用通知
	--Packet:superarena_skillusetimes

	-- 战况同步
	--Packet:sect_group_map_sync_info

	-- 进入帮派本同步
	--Packet:enter_sect_group_map

	-- 双倍掉落冒字
	--Packet:role_double_drop

	-- 世界boss冒泡
	--Packet:world_boss_pop

	--Packet:entity_nearby

	-- 周围玩家传家宝更新
	--Packet:nearby_role_updateheirloom

	-- 周围玩家休闲宠物更新
	--Packet:nearby_role_updatewizardpet

	-- 正义之心目标信息
	--Packet:justice_map_target_info

	-- 角色伤害排行
	--Packet:map_copy_damage_rank

	--Packet:receive_towerdefence_alarm

	--Packet:towerdefence_npc_pop

	--Packet:towerdefence_spawn_monsters

	--Packet:towerdefence_npc_info

	-- 守护副本npc死亡
	--Packet:towerdefence_npc_dead

	--Packet:sync_role_forcetype

	--Packet:sync_role_mapskill

	--Packet:role_usemapskill_ok

	--Packet:demonhole_boss_state

	-- 观战状态
	--Packet:role_guard

	-- 刷怪点数量
	--Packet:point_monster_num

	-- 旗帜占领状况
	--Packet:sectwar_flag_status

	-- 周围玩家变更武魂形象
	--Packet:nearby_weaponsoulshow_update

	--Packet:nearby_petawake_update

	-- 观战同步信息
	--Packet:tournamentmap_guard

	-- members(包括自己)
	--Packet:tournamentmap_info

	-- 更新队友生命数
	--Packet:tournamentmap_rolelives

	-- 更新双方存活数
	--Packet:tournamentmap_teamlives

	-- 更新自己武道荣誉
	--Packet:tournamentmap_honor

	-- 首杀
	--Packet:map_first_blood

	-- 查询队友位置信息(query_mapcopy_members_pos的回应)
	--Packet:mapcopy_members_position

	--Packet:globalpve_bosses_info

	--Packet:globalpve_boss_dead

	-- query_globalpve_boss_rankd的异步回应
	--Packet:globalpve_boss_rank

	--Packet:globalpve_superboss_create

	--Packet:globalpve_superboss_dead

	--Packet:globalpve_shareboss_damage

	-- 进城战地图同步信息(reviveTime 毫秒的时间戳)
	--Packet:citywar_map_info

	-- 城战击杀信息更新
	--Packet:citywar_update_kill

	-- 城战复活点旗子信息更新
	--Packet:citywar_update_reviveflag

	-- 城战积分更新
	--Packet:citywar_update_score

	-- 城战小地图信息(citywar_entities_query的异步回应)
	--Packet:citywar_entities_info

	-- 城战修复箭塔
	--Packet:citywar_arrowtower_fix

	-- 城战传送
	--Packet:citywar_teleport

	-- 城战大将军信息同步
	--Packet:citywar_boss_state

	-- 同步周围玩家怪物点击次数状态
	--Packet:sync_monster_click_num

	-- 活动副本通知客户端播放动画
	--Packet:broadcast_animation_activity_copy

	-- 幻境副本 通知客户端刷新过的BOSS
	--Packet:illusory_map_sync_refreshed_bossIDs

	-- 驻地精灵 同步找到精灵的数量
	--Packet:sect_zone_spirit_find_count

	-- 会武楚汉之争同步兵种
	--Packet:role_sachess_arm

	-- 楚汉之争同步地图所有兵种信息
	--Packet:sync_superarena_chessarm_info

	-- 最近获得同步
	--Packet:item_history_sync_res

	-- 会武周奖励同步
	--Packet:super_arena_week_reward_sync_res

	-- 会武周奖励领取
	--Packet:super_arena_week_reward_take_res

	-- 同步今日兽灵地图组
	--Packet:day_hunter_map_group_sync_res

	-- 添加副本技能
	--Packet:sync_role_map_skill_info

	-- 同步帮派合照角色信息
	--Packet:sect_photo_roles_sync_res

	-- 进入地图同步经验果树等级
	--Packet:exp_tree_enter_sync

	-- 通知周围玩家改变战斗姿态
	--Packet:nearby_role_change_combat_type

	-- åæ­¥å¸å¾ç³»ç»åºæ¬ä¿¡æ¯(ææ¶ä½åº)
	--Packet:master_brief_sync

	-- æå¸ç³è¯·éç¥
	--Packet:master_apply_notice

	-- é¢å¯¹é¢æ¶å¾ç³è¯·éç¥
	--Packet:master_offer_notice

	-- æå¸ç³è¯·è¢«å¤çéç¥
	--Packet:master_accept_apply_notice

	-- æ¶å¾ç³è¯·éè¿éç¥
	--Packet:master_accept_offer_notice

	-- æå¸ç³è¯·ååº
	--Packet:master_apply_res

	-- æ¥åå½é¢æ¶å¾ç³è¯·ååº
	--Packet:master_accept_offer_res

	-- å½é¢æ¶å¾ç³è¯·ååº
	--Packet:master_offer_res

	-- æ¥åæå¸ç³è¯·ååº
	--Packet:master_accept_apply_res

	-- åå¸ååº
	--Packet:master_betray_res

	-- åºå¸ååº
	--Packet:master_graduate_res

	-- åæåºå¸ç³è¯·ååº
	--Packet:master_agree_graduate_res

	-- å¼é¤ååº
	--Packet:master_dismiss_res

	-- æ¥è¯¢èªå·±çæ¶å¾å®£è¨ååº
	--Packet:master_get_announce_res

	-- è®¾ç½®èªå·±çæ¶å¾å®£è¨ååº
	--Packet:master_set_announce_res

	-- å é¤èªå·±çæ¶å¾å®£è¨ååº
	--Packet:master_del_announce_res

	-- åºæ¬ä¿¡æ¯éç¥
	--Packet:master_brief_info_notice

	-- è¯·æ±åºæ¬ä¿¡æ¯ååº
	--Packet:master_info_res

	-- æ¥çä¸ªäººæ¶æ¯ååº
	--Packet:master_msg_list_res

	-- å é¤åå¸æ¶æ¯ååº
	--Packet:master_remove_betray_msg_res

	-- è¯·æ±å¸ç¶åè¡¨ååº
	--Packet:master_list_res

	-- æ¥çæ´»è·ååº
	--Packet:master_list_apprentice_res

	-- è¯·æ±ä»»å¡è¿åº¦ååº
	--Packet:master_tasks_res

	-- å¸å¾åååæ­¥åè®®
	--Packet:master_shopsync_res

	-- å¸å¾ååå·æ°åè®®
	--Packet:master_shoprefresh_res

	-- å¸å¾ååä¹°åååè®®
	--Packet:master_shopbuy_res

	-- æ¡æè¯ä¿®æ¹å®£è¨
	--Packet:master_card_change_declaration_res

	-- æ¡æè¯ç¹èµ
	--Packet:master_card_sign_res

	-- æ¡æè¯åæ­¥
	--Packet:master_card_sync_res

	-- 打开心情日记主页(type=1自己 type=2他人)
	--Packet:mood_diary_open_main_page_res

	-- 请求心情日记内容
	--Packet:mood_diary_get_diaries_res

	-- 删除日记
	--Packet:mood_diary_delete_res

	-- 赠送人气值道具
	--Packet:mood_diary_send_popularity_item_res

	-- 改变装饰
	--Packet:mood_diary_change_decorates_res

	-- 激活装饰
	--Packet:mood_diary_activite_decorate_res

	-- 聊天分享type=1分享本服 type=2分享全服
	--Packet:mood_diary_share_res

	-- 写日记
	--Packet:mood_diary_wirte_diary_res

	-- 获取自己人气值
	--Packet:mood_diary_get_self_popularity_res

	-- 登录同步热血情缘信息
	--Packet:role_cross_friends

	-- 星座设置
	--Packet:personal_info_constellation_res

	-- 性别设置
	--Packet:personal_info_gender_res

	-- 爱好设置
	--Packet:personal_info_hobbies_res

	-- 星愿测试
	--Packet:personal_info_answer_res

	-- 分享星愿测试
	--Packet:personal_info_share_res

	-- 交友宣言设置
	--Packet:personal_info_signature_res

	-- 更新跨服好友信息(info为null时表示 删除)
	--Packet:cross_friend_update

	-- 跨服好友 同步信息(matchInfo 匹配信息, applies好友申请)
	--Packet:cross_friend_sync_res

	-- 跨服好友 立即匹配
	--Packet:cross_friend_match_res

	-- 跨服好友 换一批
	--Packet:cross_friend_refresh_res

	-- 跨服好友 爱心(添加好友)
	--Packet:cross_friend_like_res

	-- 跨服好友 裂心(忽略)
	--Packet:cross_friend_dislike_res

	-- 跨服好友 好友申请 处理
	--Packet:cross_friend_reply_res

	-- 跨服好友 删除好友
	--Packet:cross_friend_delete_res

	-- 跨服好友 好友申请通知
	--Packet:cross_friend_apply

	-- 附灵同步
	--Packet:seal_given_spirit_sync

	-- 附灵升阶
	--Packet:seal_given_spirit_uplvl_res

	-- 附灵加点
	--Packet:seal_given_spirit_addpoint_res

	-- 附灵五行相升升级
	--Packet:seal_given_spirit_upeachotheruplvl_res

	-- 附灵重置加点
	--Packet:seal_given_spirit_resetPoint_res

	-- 附灵加点购买
	--Packet:seal_given_spirit_buy_point_res

	-- 珍珑棋局同步
	--Packet:chess_game_sync

	-- 珍珑棋局任务接取结果
	--Packet:chess_game_receive_res

	-- 珍珑棋局任务取消结果
	--Packet:chess_game_cancel_res

	-- 珍珑棋局任务完成结果
	--Packet:chess_game_finish_res

	-- 珍珑棋局解困
	--Packet:chess_game_uplooplvl_res

	-- 珍珑棋局 获取排行榜列表
	--Packet:chess_game_rank_get_res

	-- 登录同步心决信息
	--Packet:role_soulspell_sync

	-- 心决解锁
	--Packet:soulspell_unlock_res

	-- 心决修心(props:value是终值)
	--Packet:soulspell_props_res

	-- 心决突破(ok:协议是否成功, success:概率是否成功)
	--Packet:soulspell_break_res

	--Packet:hideweapon_login_sync

	-- 暗器激活
	--Packet:hideweapon_make_res

	-- 更换暗器
	--Packet:hideweapon_change_res

	-- 暗器升品
	--Packet:hideweapon_rankup_res

	-- 暗器升级
	--Packet:hideweapon_levelup_res

	-- 暗器被动技能升级
	--Packet:hideweapon_pskill_levelup_res

	-- 暗器更换被动技能
	--Packet:hideweapon_pskill_select_res

	-- 暗器主动技能升级
	--Packet:hideweapon_askill_levelup_res

	-- 暗器皮肤解锁
	--Packet:hideweapon_skin_unLock_res

	-- 暗器更换皮肤
	--Packet:hideweapon_change_skin_res

	--Packet:hideweapon_skill_damage

	-- 玩家登陆信息同步
	--Packet:role_gaintboss_sync

	-- 巨灵信息同步
	--Packet:gaintboss_sync_res

	-- 参加巨灵攻城
	--Packet:gaintboss_join_res

	-- 抽奖
	--Packet:gaintboss_reward_res

	-- 神秘buff
	--Packet:gaintboss_takebuff_res

	-- 通知客户端巨灵攻城开始
	--Packet:role_gaintboss_start

	-- 通知客户端巨灵攻城结束
	--Packet:role_gaintboss_end

	-- 通知客户端增加巨灵币
	--Packet:role_add_gaintboss_coin

	-- 同步巨灵币
	--Packet:sync_gaintboss_coin

	-- 即将刷新boss(抽奖 rewards key index, value rate, curBossIndex：当前是第几个boss)
	--Packet:gaintboss_map_info

	-- 即将刷新boss
	--Packet:gaintboss_welcome

	-- 同步伤害排行榜(gaintboss_rank_query异步回应)
	--Packet:gaintboss_rank

	-- boss死亡结算信息(dead 0:boss未死亡 1:boss死亡 2:boss死亡并且是最后一个boss)
	--Packet:gaintboss_result

	-- 抽奖(map结果)
	--Packet:gaintboss_map_reward

	-- 神秘buff(map结果)
	--Packet:gaintboss_map_takebuff

	-- 外传副本登陆同步
	--Packet:biography_login_sync

	-- 外传副本同步条件
	--Packet:biography_sync_conditions_res

	-- 外传副本解锁外传
	--Packet:biography_unlock_res

	-- 外传副本开始副本
	--Packet:biography_start_mapcopy_res

	-- 外传副本接任务
	--Packet:biography_take_task_res

	-- 外传副本任务提交物品
	--Packet:biography_submit_item_res

	-- 外传副本完成任务
	--Packet:biography_finish_task_res

	-- 外传副本领取完成奖励
	--Packet:biography_take_reward_res

	-- 装备锤炼解锁属性
	--Packet:equip_smelting_unlock_res

	-- 装备锤炼百炼
	--Packet:equip_smelting_res

	-- 装备锤炼百炼保存
	--Packet:equip_smelting_save_res

	-- 装备锤炼千锤
	--Packet:equip_hammer_res

	-- 装备锤炼千锤保存
	--Packet:equip_hammer_save_res

	-- 装备锤炼技能解锁
	--Packet:equip_hammer_skill_unlock_res

	-- 打开活动界面
	--Packet:regular_task_open_res

	--Packet:regular_task_sync

	-- 领取定期活动积分奖励
	--Packet:regular_task_score_reward_take_res

	-- 定期活动兑换
	--Packet:regular_task_exchange_res

	-- 使用定期活动道具
	--Packet:bag_use_regular_item_res

	-- 打开活动祈愿界面
	--Packet:regular_pray_open_res

	-- 祈愿
	--Packet:regular_pray_res

	-- 祈愿领奖
	--Packet:regular_pray_take_reward_res

	-- 宠物驯养数据登陆同步
	--Packet:pet_domestication_sync

	-- 宠物装备精华增加
	--Packet:role_add_pet_equip_spirit

	-- 宠物穿上装备
	--Packet:pet_domestication_equip_wear_res

	-- 宠物脱下装备
	--Packet:pet_domestication_equip_unwear_res

	-- 宠物装备部位升级
	--Packet:pet_domestication_part_lvlup_res

	-- 宠物驯养技能升级
	--Packet:pet_domestication_skill_lvlup_res

	-- 宠物装备分解
	--Packet:pet_domestication_equip_split_res

	-- 打开页签同步信息
	--Packet:survive_sync_res

	-- 设置当前英雄
	--Packet:survive_sethero_res

	-- 穿装备
	--Packet:survive_equip_upwear_res

	-- 脱装备
	--Packet:survive_equip_downwear_res

	-- 销毁道具请求
	--Packet:survive_destoryitems_res

	-- 使用药品
	--Packet:survive_usedrug_res

	-- 个人最终积分结果
	--Packet:survive_final_score_result_res

	-- 通知客户端向副本背包添加副本道具
	--Packet:role_add_survive_items

	-- 通知客户端副本背包减少道具
	--Packet:role_del_survive_items

	-- 通知客户端移除身上装备
	--Packet:role_del_survive_equips

	-- 决战荒漠副本开始通知
	--Packet:survive_map_start

	-- gs 进入地图同步信息
	--Packet:survive_map_sync

	-- 添加副本道具
	--Packet:survive_add_item

	-- 同步玩家决战荒野信息
	--Packet:sync_role_survive_info

	-- 所在队伍最终结果
	--Packet:survive_final_team_result

	-- map进入地图同步信息(lifes: 队友命数包括自己)
	--Packet:survive_map_info

	-- 同步个人积分排行榜(survive_score_rank_query 的异步回应)
	--Packet:survive_score_rank

	-- 个人积分变化通知
	--Packet:survive_score_update

	-- 剩余玩家变化通知
	--Packet:survive_leftrole_update

	-- 周围玩家 个人积分变化通知
	--Packet:nearby_survive_score_update

	-- 同步玩家观战信息
	--Packet:role_view_info

	-- 队友命数变化通知(包括自己)
	--Packet:survive_member_life_update

	-- 补给点信息
	--Packet:survive_supply_infos

	-- 安全区毒圈信息
	--Packet:survive_safe_area_infos

	-- out 0:正常击杀 1:淘汰
	--Packet:nearby_survive_kill

	-- 同步数据
	--Packet:week_treasure_box_sync

	-- 领取宝箱
	--Packet:week_treasure_box_take_res

	-- 开始创建结拜
	--Packet:create_sworn_start_res

	-- 结拜生日信息收集推送
	--Packet:sworn_birthday_sign_push

	-- 登记结拜生日
	--Packet:sworn_sign_birthday_res

	-- 修改结拜生日
	--Packet:sworn_change_birthday_res

	-- 结拜生日信息推送
	--Packet:sworn_birthday_push

	-- 结束创建结拜
	--Packet:create_sworn_end_res

	-- 结拜结束推送
	--Packet:sworn_end_push

	-- 结拜添加角色
	--Packet:sworn_add_role_res

	-- 结拜踢出角色
	--Packet:sworn_kick_role_res

	-- 结拜同步
	--Packet:sworn_sync_res

	-- 修改结拜前缀
	--Packet:sworn_change_prefix_res

	-- 修改结拜后缀
	--Packet:sworn_change_suffix_res

	-- 登陆同步结拜信息
	--Packet:login_sync_sworn

	-- 领取结拜活跃奖励
	--Packet:sworn_activity_reward_take_res

	-- 使用结拜金兰值道具
	--Packet:use_sworn_gift_item_res

	-- 结拜助战奖励领取
	--Packet:sworn_help_map_reward_take_res

	-- 退出结拜
	--Packet:sworn_leave_res

	-- 结拜解散推送
	--Packet:sworn_leave_push

	-- 退出结拜操作通知
	--Packet:sworn_step_early_end_push

	-- 登陆同步角色结拜存储
	--Packet:login_sync_sworn_role_data

	-- 同步结拜助战完成次数
	--Packet:login_sync_sworn_help_times

	-- 修改寄语
	--Packet:set_gift_string_res

	-- 同步金兰证
	--Packet:sworn_card_sync_res

	-- 点赞金兰证
	--Packet:sworn_card_sign_res

	-- 完成成就任务
	--Packet:finish_achievement_task_res

	-- 领取成就点奖励
	--Packet:take_achievement_point_reward_res

	-- 结拜红点
	--Packet:sworn_point

	-- 同步武诀信息
	--Packet:login_sync_skill_formula

	-- 使用武诀经验道具
	--Packet:use_skill_formula_exp_item_res

	-- 武诀升阶
	--Packet:skill_formula_up_rank_res

	-- 武诀技能升级
	--Packet:skill_formula_skill_level_up_res

	-- 武诀开启
	--Packet:skill_formula_open_res

	-- 武诀信息同步
	--Packet:skill_formula_sync_res

	-- 武诀潜魂升级
	--Packet:skill_formula_hidden_soul_uplvl_res

	-- 登录同步幻形信息
	--Packet:role_transform_info

	-- 激活幻形
	--Packet:transform_active_res

	-- 设置当前幻形
	--Packet:transform_set_res

	-- 使用当前幻形(这个协议只是请求服务器修改数据, 客户端修改数据由服务器通知role_transform_use)
	--Packet:transform_use_res

	--Packet:role_transform_use

	-- 打开界面同步信息
	--Packet:maze_sync_res

	-- 参加天魔迷宫
	--Packet:maze_join_res

	-- 进入传送阵
	--Packet:maze_transfer_res

	-- 同步当前收益
	--Packet:maze_commongain_res

	-- 同步额外收益
	--Packet:maze_extragain_res

	-- 添加传送道具数量
	--Packet:maze_transfer_item_add

	-- 特殊事件通知客户端
	--Packet:maze_sync_trig_event

	-- 特殊事件通知客户端
	--Packet:maze_sync_kill_times

	-- 进入地图(重连)同步信息
	--Packet:role_maze_sync

	-- 通知客户端天魔迷宫开始
	--Packet:role_maze_start

	-- 通知客户端天魔迷宫结束
	--Packet:role_maze_end

	-- map进入地图同步信息
	--Packet:practicegate_map_info

	-- 登陆同步节日任务
	--Packet:role_festival_tasks

	-- 开始节日任务
	--Packet:festival_task_enter_res

	-- 领取节日任务
	--Packet:festival_task_accept_res

	-- 完成节日任务
	--Packet:festival_task_finish_res

	-- 记录任务访问点
	--Packet:task_log_point_res

	-- 客户端计算任务请求
	--Packet:client_log_task_res

	-- 登录同步骑战装备
	--Packet:steed_equip_login_sync

	-- 穿骑战装备
	--Packet:dress_steed_equip_res

	-- 脱骑战装备
	--Packet:takeoff_steed_equip_res

	-- 激活骑战套装
	--Packet:unlock_steed_equip_suit_res

	-- 制作骑战装备
	--Packet:steed_equip_create_res

	-- 熔炼骑战装备
	--Packet:steed_equip_destory_res

	-- 灵签登陆同步
	--Packet:lingqian_sync

	-- 灵签抽签
	--Packet:lingqian_get_res

	-- 打开界面同步消息
	--Packet:money_tree_open_res

	-- 每日摇一摇
	--Packet:money_tree_shake_res

	-- 领取累计奖励
	--Packet:money_tree_get_add_up_res

	-- 开启家园宠物位置
	--Packet:homeland_pet_position_open_res

	-- 设置家园宠物
	--Packet:homeland_pet_position_set_res

	-- 家园宠物互动
	--Packet:homeland_pet_position_action_res

	-- 家园宠物一键互动
	--Packet:homeland_pet_position_onekey_action_res

	-- 家园宠物领奖
	--Packet:homeland_pet_position_reward_res

	-- 更新家园宠物
	--Packet:homeland_pet_position_update

	-- 家园宠物领奖
	--Packet:homeland_pet_position_query_info

	-- 进入随时随地副本
	--Packet:anywhere_map_enter_res

	-- 传送至随时随地副本
	--Packet:anywhere_map_point_transfer_res

	-- 登录同步舞会信息
	--Packet:role_danceparty

	-- 舞会获得经验
	--Packet:danceparty_addexp

	-- 开启灵墟寻路
	--Packet:soaring_position_open_res

	-- 进入灵墟
	--Packet:soaring_map_enter_res

	-- 开启飞升
	--Packet:soaring_task_open_res

	-- 完成飞升
	--Packet:soaring_task_finish_res

	-- 登陆同步飞升
	--Packet:soaring_login_sync

	-- 解锁脚底特效
	--Packet:footeffect_unlock_res

	-- 选择脚底特效
	--Packet:footeffect_select_res

	-- 脚底特效同步
	--Packet:footeffect_sync_res

	-- 选择外显
	--Packet:weapondisplay_select_res

	-- 飞升装备推送
	--Packet:soaring_equip_push

	-- 接取飞升任务
	--Packet:soaring_day_task_take_res

	-- 完成飞升任务
	--Packet:soaring_day_task_finish_res

	-- 快速完成飞升任务
	--Packet:soaring_day_task_quick_finish_res

	-- 新的飞升环任务同步
	--Packet:soaring_day_task_next

	-- 使用提升飞升经验道具
	--Packet:soaring_use_exp_item_res

	-- 守护灵兽登陆同步
	--Packet:pet_guard_sync

	-- 守护灵兽激活
	--Packet:pet_guard_active_res

	-- 守护灵兽升级
	--Packet:pet_guard_lvl_up_res

	-- 守护灵兽解锁潜能
	--Packet:pet_guard_unlock_latent_res

	-- 守护灵兽出战
	--Packet:pet_guard_change_res

	-- 守护灵兽隐藏显示
	--Packet:pet_guard_show_res

	-- 周年活动步骤一奖励
	--Packet:jubilee_activity_step1_reward_res

	-- 周年活动步骤二奖励
	--Packet:jubilee_activity_step2_reward_res

	-- 周年活动步骤二任务组选择
	--Packet:jubilee_activity_step2_group_choose_res

	-- 周年活动步骤二任务接取
	--Packet:jubilee_activity_step2_task_take_res

	-- 周年活动步骤二任务完成
	--Packet:jubilee_activity_step2_task_finish_res

	-- 周年活动登陆同步
	--Packet:jubilee_activity_login_sync

	-- 周年活动进度同步
	--Packet:jubilee_activity_process_sync_res

	-- 周年活动步骤三矿物传送
	--Packet:jubilee_activity_step3_teleport_res

	-- 周年活动步骤一活跃度达标推送
	--Packet:jubilee_activity_point_push

	-- 周年活动步骤二达标推送
	--Packet:jubilee_step2_point

	-- 周年活动步骤三矿物采集
	--Packet:jubilee_activity_step3_take_res

	-- 登录同步公主出嫁信息(signTime: 报名时间)
	--Packet:role_princess_marry

	-- 公主出嫁匹配结果 (result 1:成功 -1:超时)
	--Packet:princess_marry_match

	-- 公主出嫁副本开始
	--Packet:princess_marry_map_start

	-- 公主出嫁结算
	--Packet:princess_marry_map_result

	-- 公主出嫁报名
	--Packet:princess_marry_sign_res

	-- 公主出嫁取消报名
	--Packet:princess_marry_quit_res

	-- map进入地图同步信息
	--Packet:princess_marry_map_info

	-- 通知触发事件
	--Packet:princess_marry_trig_event

	-- 同步当前事件
	--Packet:princess_marry_sync_event

	-- 同步任务进度
	--Packet:princess_marry_update_task

	-- 通知积分增加
	--Packet:princess_marry_add_score

	-- 同步马车位置和血量(princess_marry_get_pos 的异步回应)
	--Packet:princess_marry_sync_pos

	-- 同步排行榜(princess_marry_get_rank 的异步回应)
	--Packet:princess_marry_sync_rank

	-- 回归玩家双倍掉落活动同步
	--Packet:back_role_double_drop_sync_res

	-- 神斗升级
	--Packet:god_star_levelup_res

	-- 神斗技能升级
	--Packet:god_star_skill_levelup_res

	-- 方位强制重置
	--Packet:weaponsoul_partmustreset_res

	-- 登录同步神机藏海信息
	--Packet:role_hidden_sea_info

	-- 神机藏海报名
	--Packet:hidden_sea_sign_res

	-- 神机藏海取消报名
	--Packet:hidden_sea_quit_res

	-- 神机藏海副本开始
	--Packet:hidden_sea_map_start

	-- 神机藏海匹配结果
	--Packet:hidden_sea_match_result

	-- 神机藏海结算
	--Packet:hidden_sea_map_result

	-- 神机藏海同步幸运团队
	--Packet:hidden_sea_lucky_team_res

	-- 同步玩家地图积分
	--Packet:hidden_sea_score_info

	-- 触发隐藏boss
	--Packet:hidden_sea_trig_hidden_boss

	-- 通知客户端npc开始行动
	--Packet:hidden_sea_start_timing

	-- 同步地图信息
	--Packet:hidden_sea_map_info

	-- 登陆同步卡包信息
	--Packet:role_card_packet

	-- 卡牌解锁推送
	--Packet:card_unlock_push

	-- 使用卡牌道具
	--Packet:card_item_use_res

	-- 解锁卡背
	--Packet:card_back_unlock_res

	-- 选择卡背
	--Packet:card_back_select_res

	-- 同步地图信息
	--Packet:homeland_guard_map_info

	-- 同步当前刷怪波数
	--Packet:homeland_guard_spawn_count

	-- 同步黄金果树气血百分比
	--Packet:homeland_guard_goldentree_pop

	-- 同步黄金果树血量
	--Packet:homeland_guard_goldentree_info

	-- 选择初始关卡
	--Packet:fiveelement_org_res

	-- 开始五行副本
	--Packet:fiveelement_start_res

	-- 触发解锁最后一个副本
	--Packet:fiveelenemt_unlock_lastmap

	-- 登录游戏同步信息
	--Packet:role_fiveelenemt

	-- 江湖侠探同步
	--Packet:spy_sync

	-- 江湖侠探开启活动
	--Packet:spy_open_res

	-- 江湖侠探调查
	--Packet:spy_survey_res

	-- 江湖侠探追击
	--Packet:spy_chasing_res

	-- 江湖侠探揭露BOSS
	--Packet:spy_finding_boss_res

	-- 江湖侠探追击boss
	--Packet:spy_chasing_boss_res

	-- 登陆同步
	--Packet:friend_circle_sync

	-- 打开界面
	--Packet:friend_circle_open_res

	-- 接取任务 (status 0=是界面点接取, 1是在NPC对话点接取)
	--Packet:friend_circle_take_task_res

	-- 完成任务
	--Packet:friend_circle_finish_task_res

	-- 放弃任务
	--Packet:friend_circle_cancel_task_res

	-- 购买任务次数
	--Packet:friend_circle_buy_task_cnt_res

	-- 领取每日奖励
	--Packet:friend_circle_take_day_reward_res

	-- 领取情义值奖励
	--Packet:friend_circle_take_friendship_reward_res

	-- 任务跟多个NPC对话 送信
	--Packet:task_talk_mul_npc_res

	-- 任务交换物品
	--Packet:task_exchange_item_res

	-- 消耗符文提升铸锭经验
	--Packet:cast_ingot_use_rune_res

	-- 阵法石同步
	--Packet:role_arraystone_info

	-- 祈言
	--Packet:array_stone_prayer_res

	-- 设置密文直接转换能量
	--Packet:array_stone_set_conversion_res

	-- 解锁祈言孔位
	--Packet:array_stone_unlock_hole_res

	-- 密文批量回收
	--Packet:array_stone_ciphertext_batch_destroy_res

	-- 密文上阵
	--Packet:array_stone_ciphertext_equip_res

	-- 密文下阵
	--Packet:array_stone_ciphertext_unequip_res

	-- 密文回收
	--Packet:array_stone_ciphertext_destroy_res

	-- 密文合成
	--Packet:array_stone_ciphertext_uplvl_res

	-- 密文置换
	--Packet:array_stone_ciphertext_change_res

	-- 密文锁定
	--Packet:array_stone_ciphertext_lock_res

	-- 使用密文能量道具
	--Packet:bag_useitemciphertextenergy_res

	-- 添加真言等级熟练度
	--Packet:array_stone_mantra_uplvl_res

	-- 获取玩家秘祝信息
	--Packet:query_arraystoneoverviews_res

	-- 添加密文能量
	--Packet:role_add_ciphertext_energy

	-- 进入黄金海岸
	--Packet:global_world_enter_res

	-- 同步地图信息
	--Packet:global_world_sync_res

	-- 切换分线
	--Packet:global_world_change_res

	-- 登陆同步黄金海岸角色卡片信息
	--Packet:global_world_login_sync

	-- 更新卡牌 0是背包1是使用中，0是增加1是删除
	--Packet:global_world_role_card_sync

	-- 通知客户端卡片拾取或者掉落，0是拾取1是由于被玩家pk而掉落
	--Packet:global_world_notice_card_drop

	-- 卡片操作，类型1.激活 2.放弃
	--Packet:global_world_card_operation_res

	-- 请求卡片日志，类型1.个人 2.战区
	--Packet:global_world_log_res

	-- 帮派卡片捐赠
	--Packet:global_world_card_sect_donate_res

	-- 请求帮派卡池的面板
	--Packet:global_world_sect_panel_res

	-- 请求领取帮派的卡片
	--Packet:global_world_sect_drawcard_res

	-- 同步任务
	--Packet:global_world_task_sync

	-- 领取任务奖励
	--Packet:global_world_task_take_reward_res

	-- 使用卡片包道具
	--Packet:global_world_use_card_box_res

	-- 转盘同步
	--Packet:newluckyroll_sync_res

	-- 连续转转盘回应
	--Packet:newluckyroll_play_res

	-- 登录同步万寿阁信息(signTime: 报名时间)
	--Packet:role_longevity_loft

	-- 万寿阁匹配结果 (result 1:成功 -1:超时)
	--Packet:longevity_loft_match

	-- 万寿阁副本开始
	--Packet:longevity_loft_map_start

	-- 万寿阁结算
	--Packet:longevity_loft_map_result

	-- 万寿阁报名
	--Packet:longevity_loft_sign_res

	-- 万寿阁取消报名
	--Packet:longevity_loft_quit_res

	-- map进入地图同步信息(trigTeleport 1:已触发boss房间传送 0:未触发)
	--Packet:longevity_loft_map_info

	-- 同步当前阶段
	--Packet:longevity_loft_sync_stage

	-- 同步任务进度
	--Packet:longevity_loft_update_task

	-- 通知积分增加
	--Packet:longevity_loft_add_score

	-- 通知已开启boss房间传送
	--Packet:longevity_loft_open_teleport

	-- 同步排行榜(longevity_loft_get_rank 的异步回应)
	--Packet:longevity_loft_sync_rank

	-- 进入御灵鬼岛请求
	--Packet:ghost_island_enter_res

	-- 碎片交换请求回应
	--Packet:ghost_island_exchange_res

	-- 碎片交换结果通知
	--Packet:ghost_island_syn_exchange_result

	-- 取消碎片交换请求回应
	--Packet:ghost_island_exchange_cancle_res

	-- 炼化请求回应
	--Packet:ghost_island_artifice_res

	-- 登录同步信息
	--Packet:ghost_island_syn_info

	-- 同步消息返回
	--Packet:ghost_island_info_res

	--Packet:ghost_island_enter_info

	--Packet:ghost_island_pointcd_update

	--Packet:ghost_island_single_point_update

	--Packet:ghost_island_boss_update

	--Packet:role_drop_spirit

	--Packet:ghost_island_learn_skill_res

	--Packet:summoned_result

	-- 登录同步密探风云信息
	--Packet:role_spy_world

	-- 密探风云副本开始
	--Packet:role_spy_world_map_start

	-- 密探风云副本结束
	--Packet:role_spy_world_map_end

	-- gs进入地图同步信息
	--Packet:sync_spy_world

	-- 密探风云每日奖励
	--Packet:spy_world_day_reward_res

	-- 密探风云活动奖励
	--Packet:spy_world_activity_reward_res

	-- 密探风云变箱子
	--Packet:spy_world_alter_res

	-- 密探风云取消变箱子
	--Packet:spy_world_alter_quit_res

	-- map进入地图同步信息
	--Packet:spy_world_map_info

	-- 同步任务进度
	--Packet:spy_world_update_task

	-- 通知积分增加 addType 1 = 任务  2 = 杀人
	--Packet:spy_world_add_score

	-- 巡逻怪走到终点或超时消失
	--Packet:spy_world_patrol_monster_vanish

	-- 同步外传职业信息
	--Packet:sync_biography_class_info

	-- 开始外传职业副本
	--Packet:biography_class_map_start_res

	-- 外传职业副本装备技能
	--Packet:biography_class_skill_select_res

	-- 外传职业副本卸载技能
	--Packet:biography_class_skill_unselect_res

	-- 外传职业副本装备心法
	--Packet:biography_class_spirit_install_res

	-- 外传职业副本卸载心法
	--Packet:biography_class_spirit_uninstall_res

	-- 接取外传职业副本任务
	--Packet:biography_class_take_task_res

	-- 领取外传职业副本任务奖励
	--Packet:biography_class_task_reward_res

	-- 外传副本变更职业
	--Packet:biography_class_change_profession_res

	-- 外传变更职业反悔
	--Packet:biography_class_regret_profession_res

	-- 领取宝箱奖励
	--Packet:biography_class_receive_box_reward_res

	-- 进入地图同步职业
	--Packet:sync_biography_class_class_type

	-- 登录同步
	--Packet:sync_first_access_info

	-- 领取奖励
	--Packet:first_access_take_reward_res

	-- 领取限时任务
	--Packet:time_limit_task_take_res

	-- 开始限时任务
	--Packet:time_limit_task_start_res

	-- 完成限时任务
	--Packet:time_limit_task_finish_res

	-- 限时任务登陆同步
	--Packet:time_limit_task_login_sync

	-- 节日活动同步
	--Packet:festival_activity_sync_res

	-- 节日活动捐赠
	--Packet:festival_activity_donate_res

	-- 节日活动角色积分奖励
	--Packet:festival_activity_role_reward_res

	-- 节日活动世界积分奖励
	--Packet:festival_activity_world_reward_res

	-- 节日活动积分阶段变化推送
	--Packet:festival_activity_score_push

	-- 同步新春灯卷
	--Packet:spring_lantern_sync_res

	-- 同步新春灯卷每日NPC组
	--Packet:spring_lantern_day_group

	-- 进入新春灯卷地图
	--Packet:spring_lantern_map_enter_res

	-- 完成新春灯卷NPC活动
	--Packet:spring_lantern_join_res

	-- 使用灯笼
	--Packet:spring_lantern_use_res

	-- 使用灯笼完成掉落
	--Packet:spring_lantern_finish_drop

	-- 纪念币同步
	--Packet:souvenir_coin_sync_res

	-- 纪念币登陆同步
	--Packet:souvenir_coin_login_sync

	-- 购买纪念币
	--Packet:souvenir_coin_buy_res

	-- 兑现纪念币
	--Packet:souvenir_coin_cash_res

	-- 代币兑换
	--Packet:souvenir_coin_exchange_res

	-- 强制兑现纪念币
	--Packet:souvenir_coin_force_cash_res

	-- 保持奖励领取
	--Packet:souvenir_coin_hold_reward_take_res


--Channel: C2S	client to server

	-- ping with stamp
	--Packet:client_ping

	-- keep alive
	--Packet:keep_alive

	-- 登录协议
	--Packet:user_login_req

	-- 客户端通知服务器要退出到选人界面
	--Packet:role_logout_req

	-- 客户端查询排队位置
	--Packet:query_loginqueue_pos

	-- 客户端查询排队位置
	--Packet:cancel_loginqueue

	-- 客户端从堵塞状态恢复协议
	--Packet:role_sync_map

	-- 发送聊天消息请求
	--Packet:msg_send_req

	-- 客户端通知服务器已经load好地图资源准备好进入地图的协议
	--Packet:role_enter_map

	-- 进入大地图传送点
	--Packet:waypoint_enter_req

	-- 脱离卡死点
	--Packet:wrongpos_leave_req

	-- 同步世界地图分线状态
	--Packet:worldline_sync_req

	-- 切换当前地图分线(line: 从1开始)
	--Packet:worldline_change_req

	-- 查询玩家信息
	--Packet:query_rolebrief_req

	-- 查询机器人信息响应
	--Packet:query_robot_req

	-- 获取玩家的特性信息
	--Packet:query_rolefeature_req

	-- 获取玩家所有已获得的佣兵信息
	--Packet:query_petoverviews_req

	-- 获取玩家所有已获得的神兵信息
	--Packet:query_weaponoverviews_req

	-- 获取玩家所有已获得的暗器信息
	--Packet:query_hideWeaponoverviews_req

	-- 获取玩家所有坐骑信息
	--Packet:query_horseoverviews_req

	-- 获取玩家单个坐骑信息
	--Packet:query_single_horseoverview_req

	-- 获取玩家内甲信息
	--Packet:query_armoroverviews_req

	-- 获取玩家武魂信息
	--Packet:query_weaponsouloverview_req

	-- 原地复活
	--Packet:role_revive_insitu_req

	-- cpr复活
	--Packet:role_revive_cpr_req

	-- 其他方式复活复活点复活
	--Packet:role_revive_other_req

	-- 安全点复活
	--Packet:role_revive_safe_req

	-- 帮派驻地安全点复活
	--Packet:role_sect_zone_revive_safe_req

	-- 转职
	--Packet:role_transform_req

	-- 签到同步
	--Packet:checkin_sync_req

	-- 签到领奖
	--Packet:checkin_take_req

	-- 签到领取累计额外奖励
	--Packet:checkin_take_additional_req

	-- 商城同步
	--Packet:mall_sync_req

	-- 商城购买
	--Packet:mall_buy_req

	-- 福利同步
	--Packet:benefit_sync_req

	-- 充值相关活动同步
	--Packet:payactivity_sync_req

	-- 同步首次充值送礼活动信息
	--Packet:firstpaygift_sync_req

	-- 领取首次充值送礼活动奖励
	--Packet:firstpaygift_take_req

	-- 同步首次充值送礼活动信息
	--Packet:dailypaygift_sync_req

	-- 领取首次充值送礼活动奖励
	--Packet:dailypaygift_take_req

	-- 同步持续充值送礼活动信息
	--Packet:lastpaygift_sync_req

	-- 领取持续充值送礼活动奖励
	--Packet:lastpaygift_take_req

	-- 同步活动挑战活动信息
	--Packet:activitychallengegift_sync_req

	-- 领取活动挑战活动奖励
	--Packet:activitychallengegift_take_req

	-- 同步升级特惠活动信息
	--Packet:upgradepurchase_sync_req

	-- 购买升级特惠活动奖励
	--Packet:upgradepurchase_buy_req

	-- 同步活跃领奖活动信息
	--Packet:schdulegift_sync_req

	-- 领取活跃领奖活动奖励
	--Packet:schudulegift_take_req

	-- 同步充值送礼活动信息
	--Packet:paygift_sync_req

	-- 领取充值送礼活动奖励
	--Packet:paygift_take_req

	-- 同步充值折扣礼包活动信息
	--Packet:paydiscountgift_sync_req

	-- 领取充值折扣礼包活动奖励
	--Packet:paydiscountgift_take_req

	-- 同步消费送礼活动信息
	--Packet:consumegift_sync_req

	-- 领取消费送礼活动奖励
	--Packet:consumegift_take_req

	-- 同步冲级送礼活动信息
	--Packet:upgradegift_sync_req

	-- 领取冲级送礼活动奖励
	--Packet:upgradegift_take_req

	-- 红包拿来活动信息
	--Packet:redpack_sync_req

	-- 红包拿来活动奖励
	--Packet:redpack_take_req

	-- 充值返还活动信息
	--Packet:payrebate_sync_req

	-- 充值返还活动奖励
	--Packet:payrebate_take_req

	-- 同步投资基金活动信息
	--Packet:investmentfund_sync_req

	-- 买投资基金
	--Packet:investmentfund_buy_req

	-- 领取投资基金活动奖励
	--Packet:investmentfund_take_req

	-- 同步成长基金活动信息
	--Packet:growthfund_sync_req

	-- 买成长基金
	--Packet:growthfund_buy_req

	-- 领取成长基金活动奖励
	--Packet:growthfund_take_req

	-- 同步双倍掉落副本活动信息
	--Packet:doubledrop_sync_req

	-- 同步额外掉落副本活动信息
	--Packet:extradrop_sync_req

	-- 同步兑换礼品活动信息
	--Packet:exchangegift_sync_req

	-- 领取兑换礼品
	--Packet:exchangegift_take_req

	-- 同步累积登录送礼活动信息
	--Packet:logingift_sync_req

	-- 领取累积登录送礼活动奖励
	--Packet:logingift_take_req

	-- 同步礼包兑换活动信息
	--Packet:giftpackage_sync_req

	-- 兑换礼包
	--Packet:giftpackage_take_req

	-- 公测返现查询
	--Packet:pbtcashback_sync_req

	-- 公测返现兑换
	--Packet:pbtcashback_take_req

	-- 充值排行活动同步
	--Packet:payrank_sync_req

	-- 消费排行活动同步
	--Packet:consumerank_sync_req

	-- 新登陆活动同步
	--Packet:luckygift_sync_req

	-- 新登陆活动领奖
	--Packet:luckygift_take_req

	-- 团购活动同步
	--Packet:groupbuy_sync_req

	-- 购买团购商品
	--Packet:groupbuy_buy_req

	-- 拼多多活动同步
	--Packet:morerolediscount_sync_req

	-- 参与拼多多商品团购
	--Packet:morerolediscount_join_req

	-- 购买拼多多商品
	--Packet:morerolediscount_buy_req

	-- 限时抢购活动同步
	--Packet:flashsale_sync_req

	-- 限时抢购活动购买请求
	--Packet:flashsale_buy_req

	-- 打开宝箱
	--Packet:falshsale_open_box

	-- 转盘同步请求
	--Packet:luckyroll_sync_req

	-- 转盘同步请求
	--Packet:luckyroll_play_req

	-- 多次转盘同步请求
	--Packet:luckyroll_multiplay_req

	-- 直购礼包活动信息
	--Packet:directpurchase_sync_req

	-- 领取直购礼包活动奖励
	--Packet:directpurchase_take_req

	-- 老虎机活动信息
	--Packet:onearmbandit_sync_req

	-- 领取老虎机活动奖励
	--Packet:onearmbandit_take_req

	-- 金蛋活动信息
	--Packet:goldenegg_sync_req

	-- 砸金蛋奖励的道具
	--Packet:goldenegg_play_req

	-- 砸金蛋刷新奖励列表
	--Packet:goldenegg_refresh_req

	-- 广告同步协议
	--Packet:adver_sync_req

	-- 同步循环基金活动信息
	--Packet:cyclefund_sync_req

	-- 买循环基金
	--Packet:cyclefund_buy_req

	-- 领取循环基金活动奖励
	--Packet:cyclefund_take_req

	-- 主动离开副本请求
	--Packet:mapcopy_leave_req

	-- 开始进入标准副本请求
	--Packet:normalmap_start_req

	-- 开始进入活动副本请求
	--Packet:activitymap_start_req

	-- 翻牌抽奖
	--Packet:commonmap_selectcard_req

	-- 购买进入标准副本次数的请求
	--Packet:normalmap_buytimes_req

	-- 购买进入活动副本次数的请求
	--Packet:activitymap_buytimes_req

	-- 副本扫荡
	--Packet:privatemap_sweep_req

	-- 活动副本扫荡
	--Packet:activity_sweep_req

	-- 特殊活动记录
	--Packet:activity_instance_logs_sync_req

	-- 活动副本一键扫荡
	--Packet:activity_multi_sweep_req

	-- 同步试炼周常宝箱
	--Packet:activitymap_week_sync_req

	-- 领取周常宝箱奖励
	--Packet:activitymap_week_rewards_req

	-- 同步系统邮件
	--Packet:mail_syncsys_req

	-- 同步临时邮件
	--Packet:mail_synctmp_req

	-- 读邮件
	--Packet:mail_read_req

	-- 读系统邮件
	--Packet:mail_readsys_req

	-- 读临时邮件
	--Packet:mail_readtmp_req

	-- 取邮件附件
	--Packet:mail_take_req

	-- 取系统邮件附件
	--Packet:mail_takesys_req

	-- 取临时邮件附件
	--Packet:mail_taketmp_req

	-- 邮件删除
	--Packet:mail_del_req

	-- 系统邮件删除
	--Packet:mail_delsys_req

	-- 临时邮件删除
	--Packet:mail_deltmp_req

	-- 取全部系统邮件附件
	--Packet:mail_takeallsys_req

	-- 取全部系统邮件附件
	--Packet:mail_takealltmp_req

	-- 同步帮派邮件
	--Packet:mail_syncsect_req

	-- 读帮派邮件
	--Packet:mail_readsect_req

	-- 帮派邮件删除
	--Packet:mail_delsect_req

	-- rollnotice_detail的异步响应
	--Packet:rollnotice_query

	-- 同步排行榜
	--Packet:rank_sync_req

	-- 同步帮派排行榜
	--Packet:sectrank_sync_req

	-- 获取排行榜列表
	--Packet:rank_get_req

	-- 获取帮派排行榜列表
	--Packet:sectrank_get_req

	-- 获取分堂排行榜列表
	--Packet:fightgrouprank_get_req

	-- 获取自己排名(不在榜上返回0)
	--Packet:rank_self_req

	-- 获取自己帮派排名(不在榜上返回0)
	--Packet:sectrank_self_req

	-- 买金币
	--Packet:buy_coin_req

	-- 买体力
	--Packet:buy_vit_req

	-- 同步充值信息
	--Packet:pay_sync_req

	-- 神模式充值
	--Packet:pay_asgod_req

	-- 领取vip礼包的请求信息
	--Packet:vip_take_req

	-- 背包扩展
	--Packet:bag_expand_req

	-- 出售背包里的装备
	--Packet:bag_sellequip_req

	-- 出售背包里的道具物品
	--Packet:bag_sellitem_req

	-- 出售背包里的宝石
	--Packet:bag_sellgem_req

	-- 出售背包里的心法书
	--Packet:bag_sellbook_req

	-- 批量出售背包里的装备
	--Packet:bag_batchsellequips_req

	-- 批量出售背包里的道具物品
	--Packet:bag_batchsellitems_req

	-- 批量出售背包里的宝石物品
	--Packet:bag_batchsellgems_req

	-- 批量出售背包里的心法书物品
	--Packet:bag_batchsellbooks_req

	-- 使用道具礼包
	--Packet:bag_useitemgift_req

	-- 使用N选N道具礼包
	--Packet:bag_useitemchosegift_req

	-- 使用神装礼包
	--Packet:bag_useitemgiftnew_req

	-- 使用N选N神装礼包
	--Packet:bag_useitemchosegiftnew_req

	-- 使用道具金币包
	--Packet:bag_useitemcoin_req

	-- 使用道具钻石包
	--Packet:bag_useitemdiamond_req

	-- 使用道具经验丹
	--Packet:bag_useitemexp_req

	-- 使用道具普通回复hp
	--Packet:bag_useitemhp_req

	-- 使用道具vip普通回复hp
	--Packet:bag_useitemhppool_req

	-- 使用道具宝箱
	--Packet:bag_useitemchest_req

	-- 使用道具装备能量丹
	--Packet:bag_useitemequipenergy_req

	-- 使用道具宝石能量丹
	--Packet:bag_useitemgemenergy_req

	-- 使用熔炼精华道具
	--Packet:bag_useitemforgeenergy_req

	-- 使用道具心法悟性丹
	--Packet:bag_useiteminspiration_req

	-- 使用道具体力丹
	--Packet:bag_useitemvit_req

	-- 批量使用道具体力丹
	--Packet:bag_batchuseitemvit_req

	-- 使用时装道具
	--Packet:bag_useitemfashion_req

	-- 使用历练瓶(满)道具
	--Packet:bag_useitemexpcoinpool_req

	-- 使用月卡道具
	--Packet:bag_usemonthlycard_req

	-- 使用VIP体验卡道具
	--Packet:bag_usevipcard_req

	-- 使用增加武勋道具
	--Packet:bag_useitemfeat_req

	-- 使用技能道具
	--Packet:bag_useitemskill_req

	-- 使用信件道具
	--Packet:bag_useitemletter_req

	-- 使用善恶值道具
	--Packet:bag_useitemevil_req

	-- 合成碎片
	--Packet:bag_piececompose_req

	-- 使用能力强化道具
	--Packet:bag_useitempropstrength_req

	-- 使用离线精灵修炼点添加道具
	--Packet:bag_useitemofflinefuncpoint_req

	-- 使用称号道具
	--Packet:bag_useitemtitle_req

	-- 使用绝技道具
	--Packet:bag_useitemuskill_req

	-- 使用头像激活道具
	--Packet:bag_useitemhead_req

	-- 使用家园装备道具
	--Packet:bag_useitemhomelandequip_req

	-- 使用VIP经验增加道具
	--Packet:bag_useitemaddvipexp_req

	-- 使用增加生产能量道具
	--Packet:bag_useitemaddproducesplitsp_req

	-- 使用buff药
	--Packet:bag_useitembuffdrug_req

	-- 使用表情包
	--Packet:bag_useitemiconpackage_req

	-- 使用加武运道具
	--Packet:bag_useweaponsoulcoinadder_req

	-- 使用聊天框道具
	--Packet:bag_usechatboxitem_req

	-- 销毁道具请求
	--Packet:bag_destoryitems_req

	-- 使用正义徽章道具
	--Packet:bag_useitemgbcoin_req

	-- 使用装备升级道具
	--Packet:bag_useitem_equip_up_to_level_req

	-- 使用势力声望道具
	--Packet:bag_useitem_forcefame_req

	-- 使用试炼副本增加次数道具
	--Packet:bag_useitem_add_activity_map_cnt_req

	-- 同步驻地精灵祝福信息
	--Packet:sync_sect_zone_spirit_bless_req

	-- 驻地精灵是否进行
	--Packet:sect_zone_spirit_exist_req

	-- 使用驻地精灵祝福（order：祝福档位）
	--Packet:use_sect_zone_spirit_bless_req

	-- 穿装备
	--Packet:equip_upwear_req

	-- 脱装备
	--Packet:equip_downwear_req

	-- 装备强化
	--Packet:equip_levelup_req

	-- 装备强化突破
	--Packet:equip_levelup_break_req

	-- 批量装备强化
	--Packet:equip_batchlevelup_req

	-- 装备升星
	--Packet:equip_starup_req

	-- 水晶装备修复
	--Packet:equip_repair_req

	-- 自动穿装备
	--Packet:equip_autoupwear_req

	-- 切换装备特效显示等级
	--Packet:equippart_setshowlvl_req

	-- 装备部位宝石升级
	--Packet:gem_levelup_req

	-- 装备部位宝石镶嵌
	--Packet:gem_inlay_req

	-- 装备部位宝石升级
	--Packet:gem_unlay_req

	-- 背包宝石转化(toID: 转化后的宝石ID)
	--Packet:gem_trans_req

	-- 装备精炼
	--Packet:equip_refine_req

	-- 装备精炼保存
	--Packet:equip_refine_save_req

	-- 装备淬炼
	--Packet:equip_quench_req

	-- 装备淬炼保存
	--Packet:equip_quench_save_req

	-- 同步打造界面信息打造
	--Packet:legend_sync_req

	-- 打造传世装备
	--Packet:legend_make_req

	-- 放弃传世装备属性
	--Packet:legend_quit_req

	-- 保存传世装备属性
	--Packet:legend_save_req

	-- 宝石祝福开启
	--Packet:equip_gem_bless_req

	-- 装备转化
	--Packet:equip_trans_req

	-- 选择技能上战
	--Packet:skill_select_req

	-- 技能升级
	--Packet:skill_levelup_req

	-- 技能全部升级
	--Packet:skill_multi_levelup_req

	-- 技能升界
	--Packet:skill_enhance_req

	-- 技能解锁
	--Packet:skill_unlock_req

	-- 装备绝技
	--Packet:uniqueskill_set_req

	-- 心法学习
	--Packet:spirit_learn_req

	-- 心法研读
	--Packet:spirit_levelup_req

	-- 心法装备
	--Packet:spirit_install_req

	-- 心法卸载
	--Packet:spirit_uninstall_req

	-- 合成神兵
	--Packet:weapon_make_req

	-- 神兵升级
	--Packet:weapon_levelup_req

	-- 神兵买等级
	--Packet:weapon_buylevel_req

	-- 神兵升星
	--Packet:weapon_starup_req

	-- 选择使用神兵
	--Packet:weapon_select_req

	-- 打开神兵界面同步信息
	--Packet:weapon_sync_req

	-- 神兵特技激活
	--Packet:weapon_uskill_open_req

	-- 设置神兵形态 form 1:默认形态 2:进阶形态 3:觉醒形态
	--Packet:weapon_setform_req

	-- 进入神兵副本请求
	--Packet:weaponmap_start_req

	-- 神兵觉醒
	--Packet:weapon_awake_req

	-- 神兵觉醒 兵魂技能升级
	--Packet:weapon_awake_skill_lvlup_req

	-- 打开佣兵界面,同步信息
	--Packet:pet_sync_req

	-- 生成佣兵
	--Packet:pet_make_req

	-- 佣兵转职
	--Packet:pet_transform_req

	-- 佣兵升级
	--Packet:pet_levelup_req

	-- 佣兵买等级
	--Packet:pet_buylevel_req

	-- 佣兵升星
	--Packet:pet_starup_req

	-- 佣兵突破等级提升
	--Packet:pet_breakskillvlup_req

	-- 世界地图佣兵设置,petId为0是不设置世界地图佣兵
	--Packet:pet_worldmapset_req

	-- 单人副本佣兵设置,petsId为空table是不设置地图佣兵
	--Packet:pet_privatemapset_req

	-- 帮派副本佣兵设置,petsId为空table是不设置地图佣兵
	--Packet:pet_sectmapset_req

	-- 活动副本佣兵设置,petsId为空table是不设置地图佣兵
	--Packet:pet_activitymapset_req

	-- 进入身世副本协议
	--Packet:lifetaskmap_start_req

	-- 武库心法升级(第一次相当于解锁心法)
	--Packet:petspirit_lvlup_req

	-- 随从心法修习(第一次默认保存)
	--Packet:petspirit_learn_req

	-- 随从心法替换
	--Packet:petspirit_replace_req

	-- 宠物改名
	--Packet:pet_rename_req

	-- 日常任务同步任务列表协议
	--Packet:dtask_sync_req

	-- 日常任务获取任务奖励协议
	--Packet:dtask_take_req

	-- 日常任务一键领取奖励协议
	--Packet:dtask_take_batch_req

	-- 挑战任务sdk成就完成通知服务器sdk参数
	--Packet:role_chtask_sdkdel

	-- 挑战任务同步任务列表协议
	--Packet:chtask_sync_req

	-- 挑战任务获取任务奖励协议
	--Packet:chtask_take_req

	-- 挑战任务获批量奖励协议
	--Packet:chtask_batchtake_req

	-- 挑战任务上交物品
	--Packet:chtask_give_items_req

	-- 名望同步协议
	--Packet:fame_sync_req

	-- 名望晋级协议
	--Packet:fame_upgrade_req

	-- 名望获取名望奖励协议
	--Packet:fame_take_req

	-- 每日在线奖励同步在线奖励协议
	--Packet:onlinegift_sync_req

	-- 每日在线奖励获取奖励协议
	--Packet:onlinegift_take_req

	-- 离线经验奖励领取协议
	--Packet:offlineexp_take_req

	-- 购买挂机精灵经验
	--Packet:buy_offline_wizard_exp_req

	-- 隐藏离线经验显示设置(0 显示 1隐藏)
	--Packet:hide_offlineexp_display_req

	-- 全服答题活动同步协议
	--Packet:quizgift_sync_req

	-- 全服答题活动查询排行榜
	--Packet:quizgift_qrank_req

	-- 全服答题活动答题协议
	--Packet:quizgift_answer_req

	-- 同步幸运转盘信息
	--Packet:sync_luckywheel_req

	-- 幸运转盘抽奖
	--Packet:luckywheel_ondraw_req

	-- 购买幸运转盘抽奖次数
	--Packet:luckywheel_buydrawtimes_req

	-- 燃放烟花
	--Packet:play_firework_req

	-- 抢红包请求协议
	--Packet:redenvelope_snatch_req

	-- 接取主线任务
	--Packet:mtask_take_req

	-- 放弃主线任务
	--Packet:mtask_quit_req

	-- 客户端判断完成任务通知GS计数
	--Packet:task_complete_notice_gs_req

	-- 主线任务领取奖励
	--Packet:mtask_reward_req

	-- 神兵任务领取奖励
	--Packet:wtask_reward_req

	-- 神兵任务快速完成
	--Packet:wtask_quick_finish_req

	-- 佣兵任务领取奖励
	--Packet:ptask_reward_req

	-- 接取佣兵身世任务
	--Packet:petlifetask_take_req

	-- 佣兵身世任务领取奖励
	--Packet:petlifetask_reward_req

	-- 任务定点使用道具
	--Packet:task_useitem_req

	-- 任务提交道具
	--Packet:task_submititem_req

	-- 随从任务提交道具
	--Packet:pettask_submititem_req

	-- 随从身世任务提交道具
	--Packet:petlifetask_submititem_req

	-- 任务npc对话
	--Packet:task_dialog_req

	-- 任务护送NPC
	--Packet:task_conveynpc_req

	-- 任务护送物件
	--Packet:task_conveyitem_req

	-- 任务文字答题
	--Packet:task_answer_req

	-- 随机答题
	--Packet:task_randquestion_req

	-- 开启宠物觉醒任务
	--Packet:pawaketask_open_req

	-- 完成宠物觉醒任务
	--Packet:pawaketask_finish_req

	-- 放弃宠物觉醒任务
	--Packet:pawaketask_quit_req

	-- 重置宠物觉醒任务
	--Packet:pawaketask_reset_req

	-- 宠物觉醒任务提交道具
	--Packet:pawaketask_submititem_req

	-- 宠物觉醒设置
	--Packet:petawake_set_req

	-- 开始宠物觉醒任务副本
	--Packet:start_pawakemap_req

	-- 重新激活限时任务
	--Packet:tmtask_reactive_req

	-- 接取势力声望任务
	--Packet:forcefame_take_req

	-- 放弃势力声望任务
	--Packet:forcefame_quit_req

	-- 完成势力声望任务
	--Packet:forcefame_finish_req

	-- 势力声望捐赠
	--Packet:forcefame_donate_req

	-- 佣兵复活请求协议
	--Packet:pet_revive_req

	-- 请求挖矿的响应协议
	--Packet:role_mine_req

	-- 设置攻击模式请求
	--Packet:set_attackmode_req

	-- 查询队伍成员信息,异步查询
	--Packet:team_query_member

	-- 邀请其他玩家组队协议
	--Packet:team_invite_req

	-- 接收到其他玩家组队邀请后玩家选择是否同意操作(-2是在指引状态 -1是忙，0是拒绝，1是同意)
	--Packet:team_invitedby_req

	-- 向其队长申请组队协议
	--Packet:team_apply_req

	-- 接收到其他玩家组队申请后队长是否同意操作(0是拒绝，1是同意)
	--Packet:team_appliedby_req

	-- 离开队伍请求协议
	--Packet:team_leave_req

	-- 踢出队伍成员请求协议
	--Packet:team_kick_req

	-- 解散队伍请求协议
	--Packet:team_dissolve_req

	-- 队伍切换队长请求协议
	--Packet:team_change_leader_req

	-- 查询玩家的队伍信息
	--Packet:team_role_query_req

	-- 本队伍信息查询
	--Packet:team_self_req

	-- 附近的队伍请求协议
	--Packet:team_mapt_req

	-- 附近的人请求协议
	--Packet:team_mapr_req

	-- 师徒请求协议
	--Packet:team_master_req

	-- 副本房间创建协议
	--Packet:mroom_create_req

	-- 新成员点击加入副本房间协议
	--Packet:mroom_enter_req

	-- 新成员快速加入副本房间协议
	--Packet:mroom_qenter_req

	-- 队长邀请新人加入副本房间协议
	--Packet:mroom_invite_req

	-- 接收到其他玩家邀请入房间后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
	--Packet:mroom_invitedby_req

	-- 离开房间请求协议
	--Packet:mroom_leave_req

	-- 踢出房间成员请求协议
	--Packet:mroom_kick_req

	-- 副本房间更换房主请求协议
	--Packet:mroom_change_leader_req

	-- 房间信息查询
	--Packet:mroom_self_req

	-- 地图附近的人
	--Packet:mroom_mapr_req

	-- 房间列表查询响应协议
	--Packet:mroom_query_req

	-- 打开帮派界面同步帮派信息请求协议
	--Packet:sect_sync_req

	-- 创建帮派请求协议
	--Packet:sect_create_req

	-- 批量查询帮派是否被申请协议
	--Packet:sect_queryapplied_req

	-- 刷新帮派列表请求协议
	--Packet:sect_list_req

	-- 批量查询帮派信息请求协议
	--Packet:sect_query_req

	-- 搜索帮派信息请求协议
	--Packet:sect_searchbyid_req

	-- 搜索帮派信息请求协议
	--Packet:sect_searchbyname_req

	-- 申请加入帮派协议
	--Packet:sect_apply_req

	-- 快速申请加入帮派请求协议
	--Packet:sect_qapply_req

	-- 查询帮派成员请求协议
	--Packet:sect_members_req

	-- 帮派申请列表协议
	--Packet:sect_applications_req

	-- 帮派历史事件请求协议
	--Packet:sect_history_req

	-- 帮派管理同意或拒绝申请入帮请求协议  accept 1:同意， 2:拒绝
	--Packet:sect_appliedby_req

	-- 帮派管理同意或拒绝全部申请入帮请求协议  accept 1:同意， 2:拒绝
	--Packet:sect_appliedbyall_req

	-- 帮派管理任命请求协议,position为 1为帮主，2位副帮主，3为长老, 4成员
	--Packet:sect_appoint_req

	-- 帮派管理踢出协议
	--Packet:sect_kick_req

	-- 离开帮派协议
	--Packet:sect_leave_req

	-- 解散帮派协议
	--Packet:sect_disband_req

	-- 修改帮派宗旨协议
	--Packet:sect_changecreed_req

	-- 修改帮派名字协议
	--Packet:sect_changename_req

	-- 修改帮派图标协议
	--Packet:sect_changeicon_req

	-- 修改帮派申请加入等级需求协议
	--Packet:sect_joinlvl_req

	-- 帮派发送邮件协议
	--Packet:sect_sendemail_req

	-- 帮派升级协议
	--Packet:sect_upgrade_req

	-- 帮派加速升级冷却协议
	--Packet:sect_accelerate_req

	-- 帮派技能查询协议
	--Packet:sect_aurasync_req

	-- 帮派光环捐献道具增加经验点协议
	--Packet:sect_auraexpadd_req

	-- 帮派膜拜协议
	--Packet:sect_worship_req

	-- 帮派同步膜拜奖励协议
	--Packet:sect_syncworshipreward_req

	-- 帮派领取膜拜奖励协议
	--Packet:sect_takeworshipreward_req

	-- 帮派开启宴席协议
	--Packet:sect_openbanquet_req

	-- 帮派宴席列表协议
	--Packet:sect_listbanquet_req

	-- 帮派帮派宴席协议
	--Packet:sect_joinbanquet_req

	-- 帮派商城同步协议
	--Packet:sect_shopsync_req

	-- 帮派商城刷新协议
	--Packet:sect_shoprefresh_req

	-- 帮派商城买商品协议
	--Packet:sect_shopbuy_req

	-- 进入帮派副本挑战协议
	--Packet:sectmap_start_req

	-- 帮派副本完成过的状态协议
	--Packet:sectmap_status_req

	-- 查询帮派副本进度协议
	--Packet:sectmap_query_req

	-- 帮派开启或重置副本协议
	--Packet:sectmap_open_req

	-- 所有帮派副本奖励已分配日志记录
	--Packet:sectmap_rewards_req

	-- 当前帮派副本申请奖励协议
	--Packet:sectmap_apply_req

	-- 当前帮派副本自取奖励
	--Packet:sectmap_reward_self_take_req

	-- 当前帮派副本奖励分配信息
	--Packet:sectmap_allocation_req

	-- 当前帮派副本伤害输出信息
	--Packet:sectmap_damage_req

	-- 当前帮派副本伤害输出信息异步
	--Packet:sectmap_damage_query

	-- 帮派副本同步进度协议
	--Packet:sectmap_sync_req

	-- 帮派个人任务详细信息
	--Packet:sect_task_sync_req

	-- 帮派共享任务详细信息
	--Packet:sect_share_task_sync_req

	-- 帮派完成的个人任务详细信息
	--Packet:sect_finish_task_sync_req

	-- 帮派任务接取
	--Packet:sect_task_receive_req

	-- 帮派任务取消
	--Packet:sect_task_cancel_req

	-- 帮派任务完成
	--Packet:sect_task_finish_req

	-- 帮派任务共享
	--Packet:sect_task_issuance_req

	-- 帮派任务重置
	--Packet:sect_task_reset_req

	-- 帮派任务完成奖励
	--Packet:sect_task_done_rewards_req

	-- 帮派快速完成任务
	--Packet:sect_quick_finish_task_req

	-- 荣耀商路详细信息
	--Packet:sect_trade_route_sync_req

	-- 荣耀商路任务接取
	--Packet:sect_trade_route_receive_req

	-- 荣耀商路任务取消
	--Packet:sect_trade_route_cancel_req

	-- 荣耀商路任务完成
	--Packet:sect_trade_route_finish_req

	-- 荣耀商路买星
	--Packet:sect_trade_route_buy_star_req

	-- 荣耀商路快速完成任务
	--Packet:sect_trade_route_one_key_finish_req

	-- 同步帮派助战信息
	--Packet:sect_assist_sync_req

	-- 登记帮派助战
	--Packet:sect_assist_join_req

	-- 解除帮派助战登记
	--Packet:sect_assist_quit_req

	-- 邀请帮派助战
	--Packet:sect_assist_apply_req

	-- 移除帮派助战
	--Packet:sect_assist_kick_req

	-- 自创武功信息
	--Packet:diyskill_sync_req

	-- 自创武功
	--Packet:diyskill_create_req

	-- 保存创建的自创武功
	--Packet:diyskill_save_req

	-- 遗忘
	--Packet:diyskill_discard_req

	-- 装备自创技能
	--Packet:diyskill_selectuse_req

	-- 卸下自创技能
	--Packet:diyskill_canceluse_req

	-- 解锁槽
	--Packet:diyskill_unlock_req

	-- 购买学习次数
	--Packet:diyskill_buytimes_req

	-- 自创武功分享
	--Packet:diyskill_share_req

	-- 自创武功取消分享
	--Packet:diyskill_cancelshare_req

	-- 自创武功借用
	--Packet:diyskill_borrow_req

	-- 自创武功炫耀
	--Packet:diyskill_flaunt_req

	-- 自创武功领取共享奖励
	--Packet:diyskill_shareaward_req

	-- 同步随从是否自动使用血池
	--Packet:sync_pet_can_use_pool

	-- 同步是否自动卖出蓝绿装备
	--Packet:sync_auto_sale_equip

	-- 同步是否自动卖出蓝绿药品
	--Packet:sync_auto_sale_drug

	-- 同步是否推送帮派申请数量
	--Packet:sect_push_application_req

	-- 套装购买
	--Packet:suite_buy_req

	-- 买物品
	--Packet:store_buy_req

	--Packet:teleport_npc_req

	--Packet:teleport_monster_req

	--Packet:teleport_spawnmonster_req

	--Packet:teleport_mineral_req

	-- 竞技场同步信息
	--Packet:arena_sync_req

	-- 竞技场防守阵容
	--Packet:arena_setpets_req

	-- 竞技场排行榜
	--Packet:arena_ranks_req

	-- 换一换
	--Packet:arena_refresh_req

	-- 获取竞技场防守阵容
	--Packet:arena_defencepets_req

	-- 重置
	--Packet:arena_resetcool_req

	-- 购买次数
	--Packet:arena_buytimes_req

	-- 竞技场商城同步协议
	--Packet:arena_shopsync_req

	-- 竞技场商城刷新协议
	--Packet:arena_shoprefresh_req

	-- 竞技场商城买商品协议
	--Packet:arena_shopbuy_req

	-- 开始战斗
	--Packet:arena_startattack_req

	-- 战报
	--Packet:arena_log_req

	-- 积分奖励
	--Packet:arena_scoresync_req

	-- 领取积分奖励
	--Packet:arena_takescore_req

	-- 防守阵容显隐
	--Packet:arena_hidedefence_req

	-- 会武同步信息
	--Packet:superarena_sync_req

	-- 会武设置出战佣兵
	--Packet:superarena_setpets_req

	-- 单人匹配
	--Packet:superarena_singlejoin_req

	-- 组队匹配
	--Packet:superarena_teamjoin_req

	-- 取消匹配
	--Packet:superarena_quit_req

	-- 4v4竞技场商城同步协议
	--Packet:superarena_shopsync_req

	-- 4v4竞技场商城刷新协议
	--Packet:superarena_shoprefresh_req

	-- 4v4竞技场商城买商品协议
	--Packet:superarena_shopbuy_req

	-- 神器乱斗神兵设置
	--Packet:superarena_weaponseq_req

	-- 组队创建竞技场房间
	--Packet:aroom_create_req

	-- 邀请新人加入副本房间协议
	--Packet:aroom_invite_req

	-- 接收到其他玩家邀请入房间后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
	--Packet:aroom_invitedby_req

	-- 离开房间请求协议
	--Packet:aroom_leave_req

	-- 踢出房间成员请求协议
	--Packet:aroom_kick_req

	-- 会武房间更换房主请求协议
	--Packet:aroom_change_leader_req

	-- 房间信息查询
	--Packet:aroom_self_req

	-- 查询会武房间成员信息,异步查询
	--Packet:aroom_query_member

	-- 地图附近没房间且等级段一致的人
	--Packet:aroom_mapr_req

	-- 会武周排行榜
	--Packet:superarena_weekrank_req

	-- 会武日排行榜(type 1: 普通4v4)
	--Packet:superarena_dayrank_req

	-- 正邪道场同步信息
	--Packet:bwarena_sync_req

	-- 正邪道场设置参战随从
	--Packet:bwarena_setpet_req

	-- 正邪道场刷新对手
	--Packet:bwarena_refresh_req

	-- 正邪道场购买次数
	--Packet:bwarena_buytimes_req

	-- 正邪道场开始战斗
	--Packet:bwarena_startattack_req

	-- 正邪道场领取积分奖励
	--Packet:bwarena_takescore_req

	-- 正邪道场战报
	--Packet:bwarena_log_req

	-- 正邪道场排行榜
	--Packet:bwarena_ranks_req

	-- 势力战抽奖
	--Packet:forcewar_lottery_req

	-- 势力战界面同步信息
	--Packet:forcewar_sync_req

	-- 势力战报名协议
	--Packet:forcewar_join_req

	-- 势力战取消报名协议
	--Packet:forcewar_quit_req

	-- 创建势力战房间
	--Packet:froom_create_req

	-- 邀请新人加入势力战房间协议
	--Packet:froom_invite_req

	-- 接收到其他玩家邀请入房间后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
	--Packet:froom_invitedby_req

	-- 离开房间请求协议
	--Packet:froom_leave_req

	-- 踢出房间成员请求协议
	--Packet:froom_kick_req

	-- 势力战房间更换房主请求协议
	--Packet:froom_change_leader_req

	-- 查询势力战房间成员信息,异步查询
	--Packet:froom_query_member

	-- 查询势力战房间所有成员信息,异步查询
	--Packet:froom_query_members

	-- 同一地图地图附近没房间且符合条件的人
	--Packet:froom_mapr_req

	-- 同步对战列表
	--Packet:forcewar_mapbrief_req

	-- 进入观战
	--Packet:forcewar_guard_req

	-- boss信息同步请求
	--Packet:bosses_sync_req

	-- 前往boss位置请求
	--Packet:walktoboss_req

	-- 直接传送到boss位置请求
	--Packet:transtoboss_req

	--Packet:reset_transtime_req

	-- boss奖励分配记录请求(last 1:上次, 0:本次)
	--Packet:boss_reward_req

	-- 好友界面信息同步请求
	--Packet:friend_sync_req

	-- 获取最新加我为好友的列表
	--Packet:friend_pluslist_req

	-- 获取系统推荐的列表
	--Packet:friend_recommend_req

	-- 添加好友回应
	--Packet:friend_add_req

	-- 好友搜索
	--Packet:friend_search_req

	-- 删除好友回应
	--Packet:friend_delete_req

	-- 一键删除好友
	--Packet:friend_onekey_delete_req

	-- 好友送体力
	--Packet:friend_givevit_req

	-- 好友一键送体力
	--Packet:friend_giveallvits_req

	-- 好友接受体力
	--Packet:friend_receivevit_req

	-- 同意添加好友
	--Packet:friend_agreeadd_req

	-- 玩家更新心情
	--Packet:friend_changemsg_req

	-- 玩家更改头像
	--Packet:friend_changehead_req

	-- 获取好友宿敌
	--Packet:friend_enemy_req

	-- 删除好友宿敌
	--Packet:friend_removeenemy_req

	-- 设置好友关注度
	--Packet:friend_setfocus_req

	-- 送花
	--Packet:give_flower_req

	-- 获取赠送记录
	--Packet:get_flowerlog_req

	-- 获取接收列表
	--Packet:get_acceptlist_req

	-- 拍卖行信息同步请求
	--Packet:auction_syncitems_req

	-- 拍卖行装备同步请求
	--Packet:auction_syncequips_req

	-- 同步自己寄售物品请求
	--Packet:auction_syncselfitems_req

	-- 上架道具物品请求
	--Packet:auction_putonitems_req

	-- 上架装备请求
	--Packet:auction_putonequip_req

	-- 物品下架请求
	--Packet:auction_putoffitems_req

	-- 购买物品请求
	--Packet:auction_buyitems_req

	-- 拍卖行摊位扩展
	--Packet:auction_expand_req

	-- 交易记录
	--Packet:auction_tradelog_req

	-- 获取道具价格列表
	--Packet:auction_itemprices_req

	-- 同步江湖客栈信息
	--Packet:treasure_syncnpcs_req

	-- 刷新某一个NPC信息
	--Packet:treasure_refreshnpc_req

	-- 购买藏宝图碎片
	--Packet:treasure_buypieces_req

	-- 领取NPC礼包
	--Packet:treasure_npcreward_req

	-- 同步藏宝图信息
	--Packet:treasure_syncmap_req

	-- 总体探索
	--Packet:treasure_totalsearch_req

	-- 探索情报点
	--Packet:treasure_search_req

	-- 合成地图
	--Packet:treasure_makemap_req

	-- 领取藏宝图奖励
	--Packet:treasure_mapreward_req

	-- 扫荡领取藏宝图奖励
	--Packet:treasure_map_one_key_reward_req

	-- 放弃藏宝图
	--Packet:treasure_quitmap_req

	-- 藏品装裱
	--Packet:treasure_medalgrow_req

	-- 藏品镶边
	--Packet:treasure_edge_req

	-- 驯服坐骑
	--Packet:horse_tame_req

	-- 坐骑出征
	--Packet:horse_use_req

	-- 坐骑升星
	--Packet:horse_upstar_req

	-- 坐骑洗练
	--Packet:horse_enhance_req

	-- 坐骑洗练替换属性
	--Packet:horse_enhancesave_req

	-- 更换幻化外形
	--Packet:horse_changeshow_req

	-- 激活幻化外形
	--Packet:horse_activateshow_req

	-- 激活骑术
	--Packet:horse_learnskill_req

	-- 同步骑术等级
	--Packet:sync_horse_skillLevel_req

	-- 升级骑术等级
	--Packet:horse_skill_up_level_req

	-- 设置骑术
	--Packet:horse_setskill_req

	-- 坐骑突破
	--Packet:horse_break_req

	-- 皮肤激活骑战
	--Packet:horse_showfight_req

	-- 马术精通加经验
	--Packet:horse_master_addexp_req

	-- 马术精通解锁条目
	--Packet:horse_master_unlock_req

	-- 良驹之灵锤炼
	--Packet:horse_spirit_upstar_req

	-- 良驹之灵技能升级(lvl 1:解锁技能)
	--Packet:horse_spirit_skill_lvlup_req

	-- 良驹之灵更换形象
	--Packet:horse_spirit_setshow_req

	-- 良驹之灵升阶自动更换形象
	--Packet:horse_spirit_showauto_req

	-- 良驹之灵隐藏形象
	--Packet:horse_spirit_hide_req

	-- 解锁良驹之灵追加形象
	--Packet:horse_spirit_unlock_req

	-- 穿戴时装
	--Packet:fashion_upwear_req

	-- 放入衣橱
	--Packet:fashion_putwardrobe_req

	-- 从衣橱取出
	--Packet:fashion_getwardrobe_req

	-- 精纺时装
	--Packet:fashion_worsted_req

	-- 保存精纺时装属性
	--Packet:fashion_save_worsted_req

	-- 显示/隐藏
	--Packet:fashion_setshow_req

	-- 龙印合成
	--Packet:seal_make_req

	-- 龙印升阶
	--Packet:seal_upgrade_req

	-- 龙印洗练
	--Packet:seal_enhance_req

	-- 龙印储存
	--Packet:seal_save_enhance_req

	-- 同步历练页签信息
	--Packet:expcoin_sync_req

	-- 提取历练
	--Packet:expcoin_extract_req

	-- 同步藏书页签信息
	--Packet:rarebook_sync_req

	-- 藏书存入
	--Packet:rarebook_push_req

	-- 藏书取出
	--Packet:rarebook_pop_req

	-- 藏书解锁
	--Packet:rarebook_unlock_req

	-- 藏书升级
	--Packet:rarebook_lvlup_req

	-- 同步参悟页签信息
	--Packet:grasp_sync_req

	-- 参悟
	--Packet:grasp_impl_req

	-- 参悟次数购买
	--Packet:grasp_time_buy_req

	-- 参悟CD时间重置
	--Packet:grasp_reset_req

	-- 购买乾坤点
	--Packet:dmgtransfer_buypoint_req

	-- 投入乾坤点
	--Packet:dmgtransfer_putpoint_req

	-- 乾坤升级
	--Packet:dmgtransfer_lvlup_req

	-- 重置
	--Packet:dmgtransfer_reset_req

	-- 指引
	--Packet:lead_info_set

	-- 强制剧情
	--Packet:lead_plot_set

	-- 同步用户调研信息
	--Packet:usersurvey_sync_req

	-- 用户调研提交答案
	--Packet:usersurvey_submit_req

	-- 用户调研结束领取奖励
	--Packet:usersurvey_reward_req

	-- 同步登陆有礼信息
	--Packet:cblogingift_sync_req

	-- 登陆有礼领奖
	--Packet:cblogingift_take_req

	-- 升级送VIP、钻石
	--Packet:cblvlupgift_sync_req

	-- 升级送VIP、钻石(领奖)
	--Packet:cblvlupgift_take_req

	-- 同步完善资料拿大奖信息
	--Packet:userdata_sync_req

	-- 资料修改
	--Packet:userdata_modify_req

	-- 完善资料领奖
	--Packet:userdata_reward_req

	-- 同步封测倒计时信息
	--Packet:cbcountdowngift_sync_req

	-- 封测倒计时领奖
	--Packet:cbcountdowngift_take_req

	-- 同步限时领奖信息
	--Packet:ontimegift_sync_req

	-- 限时领奖领取奖励
	--Packet:ontimegift_take_req

	-- 同步强化比拼信息
	--Packet:strengthengift_sync_req

	-- 限时强化比拼奖励
	--Packet:strengthengift_take_req

	-- 同步官网调研信息
	--Packet:official_research_sync_req

	-- 限时官网调研奖励
	--Packet:official_research_take_req

	-- 设置当前的永久称号
	--Packet:permanenttitle_set_req

	-- 设置当前的时效称号
	--Packet:timedtitle_set_req

	-- 解锁新的称号位
	--Packet:titleslot_unlock_req

	-- 支线任务接取
	--Packet:branch_task_take_req

	-- 支线任务放弃
	--Packet:branch_task_quit_req

	-- 支线任务交付
	--Packet:branch_task_finish_req

	-- 史诗任务接取
	--Packet:epic_task_take_req

	-- 史诗任务领奖
	--Packet:epic_task_reward_req

	-- 史诗任务放弃
	--Packet:epic_task_quit_req

	-- 同步爬塔数据
	--Packet:sync_tower_req

	-- 同步战绩记录
	--Packet:tower_record_req

	-- 设置爬塔系统出战随从
	--Packet:tower_setpets_req

	-- 开始战斗
	--Packet:tower_startfight_req

	-- 购买挑战次数
	--Packet:tower_buytimes_req

	-- 爬塔副本扫荡
	--Packet:tower_sweep_req

	-- 爬塔副本一键扫荡
	--Packet:tower_new_sweep_req

	-- 同步声望数据
	--Packet:sync_towerfame_req

	-- 爬塔声望捐赠物品
	--Packet:tower_donate_req

	-- 爬塔声望一键捐赠物品 (donateType   1 捐赠前两种  2捐赠第三种)
	--Packet:tower_onekey_donate_req

	-- 爬塔领取声望奖励
	--Packet:take_towerfame_req

	-- 进入秘境
	--Packet:enter_secretmap_req

	-- 领取秘境任务奖励
	--Packet:take_secretreward_req

	-- 一键完成秘境任务
	--Packet:onekey_finish_secrettask_req

	-- 帮派运镖同步
	--Packet:sect_deliver_sync_req

	-- 帮派运镖刷新
	--Packet:sect_deliver_refresh_req

	-- 帮派运镖投保
	--Packet:sect_deliver_protect_req

	-- 帮派运镖开始运镖
	--Packet:sect_deliver_begin_req

	-- 帮派运镖快速运镖
	--Packet:sect_deliver_quick_finish_req

	-- 帮派运镖求援
	--Packet:sect_deliver_search_help_req

	-- 帮派运镖响应求援
	--Packet:sect_deliver_on_help_req

	-- 帮派运镖取消运镖
	--Packet:sect_deliver_cancel_req

	-- 帮派运镖完成
	--Packet:sect_deliver_finish_req

	-- 帮派祝福同步
	--Packet:sect_deliver_sync_wish_req

	-- 帮派祝福祝福
	--Packet:sect_deliver_add_wish_req

	-- 帮派祝福保存
	--Packet:sect_deliver_save_wish_req

	-- 劫镖任务接取
	--Packet:sect_rob_task_take_req

	-- 劫镖任务放弃
	--Packet:sect_rob_task_cancel_req

	-- 帮派运镖商城同步协议
	--Packet:sect_deliver_shopsync_req

	-- 帮派运镖商城刷新协议
	--Packet:sect_deliver_shoprefresh_req

	-- 帮派运镖商城买商品协议
	--Packet:sect_deliver_shopbuy_req

	-- 帮派运镖抽奖协议
	--Packet:sect_deliver_lottery_req

	-- 同步工坊
	--Packet:produce_workshopsync_req

	-- 使用卷轴获得新配方请求
	--Packet:produce_createnewrecipe_req

	-- 制造请求
	--Packet:produce_produce_req

	-- 分解装备请求
	--Packet:produce_split_req

	-- 炼化炉激活请求
	--Packet:produce_fusion_open_req

	-- 炼化请求
	--Packet:produce_fusion_req

	-- 分解能量购买请求
	--Packet:produce_splitspbuy_req

	-- 背包道具合并
	--Packet:bag_merge_req

	-- 背包道具合并
	--Packet:bag_merge_all_req

	-- 七日留存活动领取奖励
	--Packet:rmactivity_takereward_req

	-- 玩家改名(type 1:消耗非绑元宝 2：使用道具)
	--Packet:role_rename_req

	-- 上马请求
	--Packet:horse_ride_req

	-- 下马请求
	--Packet:horse_unride_req

	-- 邀请骑乘协议
	--Packet:mulhorse_invite_req

	-- 接收到骑乘邀请后选择是否同意操作：(-10:离得太远， -11:战斗状态，-20:指引状态，-21:忙，0:拒绝， 1:同意)
	--Packet:mulhorse_invitehandle_req

	-- 申请多人骑乘
	--Packet:mulhorse_apply_req

	-- 接收到其他玩家骑乘申请后是否同意操作(-10:离得太远， -11:战斗状态，-20:指引状态，-21:忙，0:拒绝， 1:同意)
	--Packet:mulhorse_applyhandle_req

	-- 离开多人骑乘请求协议
	--Packet:mulhorse_leave_req

	-- 剔除骑乘成员
	--Packet:mulhorse_kick_req

	-- 相依相偎邀请
	--Packet:staywith_invite_req

	-- 接收到相依相偎邀请后选择是否同意操作：(-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙，0:拒绝， 1:同意)
	--Packet:staywith_invitehandle_req

	-- 取消相依相偎请求
	--Packet:staywith_leave_req

	-- 么么哒
	--Packet:staywith_memeda_req

	-- 同步留言板请求
	--Packet:sync_message_board_req

	-- 添加留言请求
	--Packet:add_message_board_req

	-- 评论留言请求
	--Packet:comment_message_board_req

	-- 修改文本请求
	--Packet:change_message_board_content_req

	-- 同步日程表请求
	--Packet:schedule_sync_req

	-- 日程表奖励请求
	--Packet:schedule_mapreward_req

	-- 保存引导关进度请求
	--Packet:save_guide_mapcopy_req

	-- 帮派邀请请求
	--Packet:sect_invite_req

	-- 帮派邀请响应请求
	--Packet:sect_invite_response_req

	-- 解锁内甲请求
	--Packet:unlock_armor_type_req

	-- 内甲升阶请求
	--Packet:armor_uprank_req

	-- 内甲升级天赋请求
	--Packet:armor_add_talent_req

	-- 内甲选择请求
	--Packet:armor_change_req

	-- 内甲升级请求
	--Packet:armor_up_level_req

	-- 设置内甲隐藏
	--Packet:armor_effecthide_req

	-- 符文存入请求
	--Packet:rune_push_req

	-- 符文提取请求
	--Packet:rune_pop_req

	-- 重置天赋点请求
	--Packet:reset_talent_point_req

	-- 重置天赋点请求
	--Packet:solt_group_unlock_req

	-- 符文镶嵌请求
	--Packet:solt_push_rune_req

	-- 符文之语镶嵌请求
	--Packet:lang_push_rune_req

	-- 符文许愿请求
	--Packet:rune_wish_req

	-- 符文之语升级请求
	--Packet:rune_upgrade_req

	-- 存入仓库请求
	--Packet:put_in_warehouse_req

	-- 取出物品请求
	--Packet:take_out_warehouse_req

	-- 取出碎片请求
	--Packet:take_out_warehouse_piece_req

	-- 扩展仓库请求
	--Packet:expand_warehouse_req

	-- 同步角色私人仓库信息
	--Packet:sync_private_warehouse_req

	-- 同步角色公共仓库信息
	--Packet:sync_public_warehouse_req

	-- 同步角色家园仓库信息
	--Packet:sync_homeland_warehouse_req

	-- 求婚请求
	--Packet:propose_req

	-- 求婚响应请求
	--Packet:propose_response_req

	-- 同步婚姻信息
	--Packet:marriage_sync_req

	-- 离婚请求
	--Packet:divorce_req

	-- 姻缘技能升级
	--Packet:marriage_skill_levelup_req

	-- 传送至配偶请求
	--Packet:transform_to_partner_req

	-- 开始游街请求
	--Packet:marriage_start_parade_req

	-- 开始宴席请求
	--Packet:marriage_start_banquet_req

	-- 物品交换请求
	--Packet:exchange_item_req

	-- 批量兑换物品
	--Packet:batch_exchange_item_req

	-- 收藏兑换物品
	--Packet:collect_exchange_item_req

	-- 取消收藏兑换物品
	--Packet:cancel_collect_exchange_item_req

	-- 姻缘系列任务开启
	--Packet:mrgseriestask_open_req

	-- 姻缘系列任务接取
	--Packet:mrgseriestask_take_req

	-- 姻缘系列任务领奖
	--Packet:mrgseriestask_reward_req

	-- 姻缘环任务开启
	--Packet:mrglooptask_open_req

	-- 姻缘环任务接取
	--Packet:mrglooptask_take_req

	-- 姻缘环任务领奖
	--Packet:mrglooptask_reward_req

	-- 姻缘档次提升
	--Packet:marriage_upgrade_req

	-- 保存技能预设请求
	--Packet:save_skill_preset_req

	-- 保存技能预设请求
	--Packet:save_all_skill_preset_req

	-- 保存气功预设请求
	--Packet:save_spirits_preset_req

	-- 删除气功预设请求
	--Packet:delete_skill_preset_req

	-- 删除气功预设请求
	--Packet:delete_spirits_preset_req

	-- 使用技能预设请求
	--Packet:change_skill_preset_req

	-- 使用气功预设请求
	--Packet:change_spirits_preset_req

	-- 帮派团队本开启请求
	--Packet:sect_group_map_open_req

	-- 帮派团队本进入请求
	--Packet:sect_group_map_enter_req

	-- 帮派团队本信息同步请求
	--Packet:sect_group_map_sync_req

	-- 神兵技能升级请求
	--Packet:weapon_skill_level_up_req

	-- 神兵天赋升级请求
	--Packet:weapon_talent_level_up_req

	-- 神兵天赋点购买请求
	--Packet:weapon_talent_point_buy_req

	-- 神兵天赋点重置请求
	--Packet:weapon_talent_point_reset_req

	-- 发送礼物请求
	--Packet:send_gift_req

	-- 打开地图同步旗帜信息
	--Packet:sync_big_map_flag_info_req

	-- 随从技能升级请求
	--Packet:pet_skill_level_up_req

	-- 同步特权卡配置请求
	--Packet:sync_special_card_req

	-- 领取特权卡奖励请求
	--Packet:take_special_card_reward_req

	-- 通过类型同步充值商品
	--Packet:paygoods_sync_req

	-- 领取每日体力奖励请求
	--Packet:sync_daily_vit_reward_req

	-- 领取每日体力奖励请求
	--Packet:take_daily_vit_reward_req

	-- 开启洞察请求
	--Packet:try_open_insight_req

	-- 开启寻仇请求
	--Packet:try_open_revenge_req

	-- 同步洞察请求
	--Packet:try_sync_insight_req

	-- 同步寻仇请求
	--Packet:try_sync_revenge_req

	-- 传送至洞察目标请求
	--Packet:try_transform_insight_req

	-- 传送至寻仇目标请求
	--Packet:try_transform_revenge_req

	-- 传家宝擦拭请求
	--Packet:heirloom_wipe_req

	-- 传家宝取出请求
	--Packet:heirloom_takeout_req

	-- 购买离线精灵修炼点请求
	--Packet:buy_offline_func_point_req

	-- 精灵旅行开始
	--Packet:role_wizard_trip_start_req

	-- 精灵旅行设置新照片已读
	--Packet:role_wizard_trip_read_new_photo

	-- 精灵旅行分享照片
	--Packet:role_wizard_trip_share_photo_req

	-- 设置帮派QQ群请求
	--Packet:set_sect_qqgroup_req

	-- 设置传家宝外观显示请求
	--Packet:set_heirloom_display_req

	-- 武勋商城同步协议
	--Packet:feat_gambleshopsync_req

	-- 武勋商城刷新协议
	--Packet:feat_gambleshoprefresh_req

	-- 武勋商城买商品协议
	--Packet:feat_gambleshopbuy_req

	-- 添加结婚预约协议
	--Packet:add_marriage_bespeak_req

	-- 同步结婚预约协议
	--Packet:sync_marriage_bespeak_req

	-- 领取结婚称号
	--Packet:take_marriage_title_req

	-- 基础物品快速购买协议
	--Packet:base_dummygoods_quick_buy_req

	-- 活动补做协议
	--Packet:activity_last_quick_done_req

	-- 打开太玄碑文同步信息
	--Packet:stele_sync_req

	-- 参加活动
	--Packet:stele_join_req

	-- 排行榜同步
	--Packet:stele_rank_req

	-- 传送到太玄碑文
	--Packet:stele_teleport_req

	-- 添加黑名单
	--Packet:blacklist_add_req

	-- 删除黑名单
	--Packet:blacklist_del_req

	-- 同步黑名单
	--Packet:blacklist_sync_req

	-- 设置清除长时间未上线的好友
	--Packet:set_clear_friend_req

	-- 黑名单禁止互动
	--Packet:blacklist_ban_req

	-- 同步伏魔洞信息
	--Packet:demonhole_sync_req

	-- 参加伏魔洞
	--Packet:demonhole_join_req

	-- 进入下一层或上一层
	--Packet:demonhole_changefloor_req

	--Packet:demonhole_battle_req

	-- 开始进入正义之心副本请求
	--Packet:justicemap_start_req

	-- 打开江湖告急同步信息
	--Packet:emergency_sync_req

	-- 进入江湖告急副本
	--Packet:emergency_enter_req

	-- 排行榜同步
	--Packet:emergency_rank_req

	-- 幸运星同步
	--Packet:lucklystar_sync_req

	-- 幸运星赠送
	--Packet:lucklystar_gift_req

	-- 开始挑战
	--Packet:fightnpc_start_req

	-- 领取奖励
	--Packet:fightnpc_reward_req

	-- 分包奖励领取同步协议
	--Packet:packetreward_sync_req

	-- 分包奖励领取协议
	--Packet:packetreward_take_req

	-- 坐骑解锁洗练属性
	--Packet:horse_enhance_prop_unlock_req

	-- 购买休闲宠物时间
	--Packet:buy_wizard_pet_time_req

	-- 设置当前休闲宠物
	--Packet:set_cur_wizard_pet_req

	-- 同步当前已解锁头像
	--Packet:sync_item_unlock_head_req

	-- 宠物，神兵评价(themeType 1:佣兵 2:神兵)
	--Packet:socialmsg_send_req

	-- 点赞(themeType 1:佣兵 2:神兵)
	--Packet:socialmsg_like_req

	-- 鄙视(themeType 1:佣兵 2:神兵)
	--Packet:socialmsg_dislike_req

	-- (tag 1:最新评论 2:点赞最多 3:鄙视最多      themeType 1:佣兵 2:神兵)
	--Packet:socialmsg_pageinfo_req

	-- npc传送功能
	--Packet:npc_transfrom_req

	-- 分享成功通知
	--Packet:share_success

	-- 物品解锁头像
	--Packet:unlock_head_req

	-- 解锁头像边框
	--Packet:unlock_headborder_req

	-- 同步已经解锁的头像边框
	--Packet:sync_headborder_req

	-- 更改装备的头像边框
	--Packet:change_headborder_req

	-- 开始NPC副本
	--Packet:start_npc_map_req

	-- 参与NPC祈福
	--Packet:join_npc_pray_req

	-- 解锁私人仓库
	--Packet:unlock_private_warehouse_req

	-- 解锁家园仓库
	--Packet:unlock_homeland_warehouse_req

	-- 开始挑战
	--Packet:towerdefence_start_req

	-- 翻牌抽奖
	--Packet:towerdefence_selectcard_req

	-- 锁定强化序号
	--Packet:look_strength_heirloom_req

	-- 强化传家宝
	--Packet:strength_heirloom_req

	-- 摇一摇
	--Packet:exp_tree_get_drop_req

	-- 浇水
	--Packet:exp_tree_watering_req

	-- 获取成熟奖励
	--Packet:exp_tree_mature_reward_req

	-- 同步经验果树信息
	--Packet:exp_tree_sync_req

	-- 魂玉解封
	--Packet:seal_dispelling_req

	-- 魂玉解封晋级加速
	--Packet:seal_awaken_accelerate_req

	-- 魂玉解封晋级
	--Packet:seal_awaken_req

	-- 进入城战成员同步
	--Packet:city_war_sect_roles_sync_req

	-- 城战信息同步
	--Packet:city_war_info_sync_req

	-- 获取城池报名信息
	--Packet:city_war_sign_info_req

	-- 帮派报名（id表示城的序号）
	--Packet:city_war_sect_sign_req

	-- 获取帮派竞标信息
	--Packet:city_war_bid_info_req

	-- 帮派竞标
	--Packet:city_war_sect_bid_req

	-- 竞标结果
	--Packet:city_war_bid_result_req

	-- 同步城池归属者
	--Packet:city_war_current_kings_req

	-- 进入城战
	--Packet:city_war_enter_req

	-- 开启城市之光
	--Packet:city_light_open_req

	-- 城市之光同步
	--Packet:city_light_sync_req

	-- 攻城车取消变身
	--Packet:city_war_cancel_car_req

	-- 攻城车变身
	--Packet:city_war_use_car_req

	-- 箭塔修复(towerId:npc实例ID)
	--Packet:city_war_tower_fix_req

	-- 城战传送
	--Packet:city_war_transform_req

	-- 帮派分堂信息同步
	--Packet:sect_fight_group_sync_req

	-- 创建帮派分堂
	--Packet:sect_fight_group_create_req

	-- 解散帮派分堂
	--Packet:sect_fight_group_dismiss_req

	-- 退出帮派分堂
	--Packet:sect_fight_group_exit_req

	-- 申请加入帮派分堂
	--Packet:sect_fight_group_apply_req

	-- 同意加入帮派分堂
	--Packet:sect_fight_group_accept_req

	-- 拒绝加入帮派分堂
	--Packet:sect_fight_group_refuse_req

	-- 修改分堂堂主
	--Packet:sect_fight_group_change_leader_req

	-- 踢出帮派分堂
	--Packet:sect_fight_group_kick_req

	-- 帮派分堂改名
	--Packet:sect_fight_group_change_name_req

	-- 邀请其他玩家进入分堂协议
	--Packet:sect_fight_group_invite_req

	-- 接收到其他玩家分堂邀请后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
	--Packet:sect_fight_group_invitedby_req

	-- 分堂申请列表同步
	--Packet:sect_fight_group_apply_sync_req

	-- 分堂报名帮派战
	--Packet:sect_war_sign_req

	-- 分堂取消报名
	--Packet:sect_war_quit_req

	-- 分堂当前帮派战状态同步
	--Packet:sect_fight_group_cur_status_req

	-- 进入帮战地图
	--Packet:enter_sectwar_req

	-- 变性请求
	--Packet:role_change_gender_req

	-- 发起切磋邀请
	--Packet:role_single_invite_req

	-- 切磋回应(-1: 拒绝 -2:正忙 -3:短时间不再接收玩家邀请)
	--Packet:role_single_response_req

	-- 五绝秘藏同步
	--Packet:five_goals_sync_req

	-- 五绝秘藏领取奖励(type 1领取总得奖励  2领取小目标奖励)
	--Packet:five_goals_take_reward_req

	-- 使用召回码
	--Packet:use_regression_code_req

	-- 领取积分奖励
	--Packet:get_score_reward_req

	-- 同步召回信息
	--Packet:sync_regression_req

	-- 领取登陆奖励
	--Packet:take_regression_login_gift_req

	-- 购买每日折扣
	--Packet:buy_regression_daily_discount_req

	-- 职业转换请求
	--Packet:change_role_profession_req

	-- 同步上次转职时间
	--Packet:sync_last_change_pro_time_req

	-- 开心对对碰祈福
	--Packet:happy_mstching_take_word_req

	-- 开心对对碰打开兑换界面
	--Packet:happy_mstching_open_exchange_req

	-- 开心对对碰兑换
	--Packet:happy_mstching_take_reward_req

	-- 宠物赛跑投票
	--Packet:pet_run_ticket_req

	-- 宠物赛跑同步
	--Packet:pet_run_sync_req

	-- 宠物赛跑扔道具
	--Packet:pet_run_throw_item_req

	-- 宠物赛跑商城同步协议
	--Packet:pet_run_shopsync_req

	-- 宠物赛跑商城刷新协议
	--Packet:pet_run_shoprefresh_req

	-- 宠物赛跑商城买商品协议
	--Packet:pet_run_shopbuy_req

	--Packet:bottle_exchange_sync_req

	--Packet:bottle_exchange_req

	-- 同步祝福排行榜
	--Packet:hot_spring_buff_rank_req

	-- 泡温泉使用单人动作 (actType   1=调戏   2=肥皂  3=搓澡)
	--Packet:hot_spring_use_single_act_req

	-- 泡温泉使用双人动作 (actType  1=船  2=伞)
	--Packet:hot_spring_use_double_act_req

	-- 泡温泉使用双人动作应答 (answer 1=同意   -8=拒绝)
	--Packet:hot_spring_double_act_answer_req

	-- 泡温泉使用buff(buffType  1=全服buff   2=帮派buff)
	--Packet:hot_spring_use_buff_req

	-- 泡温泉取消双人互动
	--Packet:hot_spring_cancel_double_act_req

	-- 泡温泉取消双人互动邀请
	--Packet:hot_spring_cancel_invite

	-- 清除buff药
	--Packet:buffdrug_clear_req

	-- 碎片回收同步请求
	--Packet:fragment_recycle_sync_req

	-- 碎片回收协议
	--Packet:fragment_recycle_req

	-- 武魂方位升级
	--Packet:weaponsoul_lvlup_req

	-- 武魂升阶
	--Packet:weaponsoul_gradeup_req

	-- 设置升阶自动变更形象
	--Packet:weaponsoul_showauto_req

	-- 变更形象
	--Packet:weaponsoul_showset_req

	-- 解锁追加形象
	--Packet:weaponsoul_unlockshow_req

	-- 隐藏形象
	--Packet:weaponsoul_hide_req

	-- 方位重置
	--Packet:weaponsoul_partreset_req

	-- 保存方位重置
	--Packet:weaponsoul_savereset_req

	-- 放弃方位重置
	--Packet:weaponsoul_quitreset_req

	-- 激活星耀
	--Packet:weaponsoul_staractivate_req

	-- 快速激活星耀
	--Packet:weaponsoul_quickactivate_req

	-- 设置当前星耀
	--Packet:weaponsoul_curstar_req

	-- 神木鼎同步
	--Packet:tripod_times_sync_req

	-- 神木鼎融合
	--Packet:tripod_merge_req

	-- 神木鼎购买次数
	--Packet:tripod_buy_times_req

	-- 激活器灵
	--Packet:weaponspirit_activite_req

	-- 激活器灵节点
	--Packet:weaponspirit_activite_point_req

	-- 装备器灵
	--Packet:weaponspirit_equip_req

	-- 器灵升阶
	--Packet:weaponspirit_uprank_req

	-- 器灵技能升级
	--Packet:weaponspirit_skill_level_up_req

	-- 共享好礼同步
	--Packet:shared_pay_sync_req

	-- 共享好礼领奖
	--Packet:shared_pay_take_reward_req

	-- 连续使用道具活动同步
	--Packet:use_item_act_sync_req

	-- 连续使用道具活动领奖
	--Packet:use_item_act_take_reward_req

	-- 找你妹活动开始
	--Packet:finding_your_sister_start_req

	-- 找你妹点击 (result 1=点击正确  0=点击错误) type顺序1-3
	--Packet:finding_your_sister_click_req

	-- 找你妹请求奖励
	--Packet:finding_your_sister_get_rewards_req

	-- 角色加油
	--Packet:role_oil_req

	-- 同步加油信息
	--Packet:sync_oil_req

	-- 领取加油奖励
	--Packet:take_oil_reward_req

	-- 排行榜同步
	--Packet:oil_rank_req

	-- 大富翁同步
	--Packet:rich_sync_req

	-- 大富翁扔色子
	--Packet:rich_go_req

	-- 大富翁完成事件
	--Packet:rich_get_event_req

	-- 大富翁放弃事件
	--Packet:rich_give_up_req

	-- 帮派驻地建造同步
	--Packet:sect_zone_sync_build_req

	-- 帮派驻地建造
	--Packet:sect_zone_build_req

	-- 帮派驻地开启
	--Packet:sect_zone_open_req

	-- 帮派驻地建造排行同步
	--Packet:sect_zone_build_rank_req

	-- 帮派驻地BOSS捐献道具
	--Packet:sect_zone_boss_item_req

	-- 帮派驻地BOSS召唤
	--Packet:sect_zone_boss_open_req

	-- 帮派驻地进入
	--Packet:sect_zone_enter_req

	-- 可进入帮派驻地同步
	--Packet:sect_zone_list_req

	-- 发送气运礼包
	--Packet:send_destiny_reward_req

	-- 帮派驻地BOSS信息同步
	--Packet:sect_zone_sync_boss_req

	-- 帮派红包信息同步
	--Packet:sect_red_pack_sync_req

	-- 帮派红包发送
	--Packet:sect_red_pack_send_req

	-- 帮派红包领取
	--Packet:sect_red_pack_take_req

	-- 帮派龙运同步
	--Packet:sect_destiny_sync_req

	-- 帮派龙运礼包同步
	--Packet:sect_destiny_reward_sync_req

	-- 帮派红包历史查询
	--Packet:sect_red_pack_history_req

	-- 额外奖励查询
	--Packet:extra_gift_sync_req

	-- 单个坐骑排行
	--Packet:single_horse_rank_req

	-- 玩家回归信息同步
	--Packet:role_back_sync_req

	-- 玩家充值奖励领取
	--Packet:role_back_pay_gift_take_req

	-- 玩家活跃奖励领取
	--Packet:role_back_schdule_gift_take_req

	-- 玩家每日奖励领取
	--Packet:role_back_day_gift_take_req

	-- 玩家回归人数奖励领取
	--Packet:role_back_back_num_gift_take_req

	-- 玩家每日任务数量奖励领取
	--Packet:role_back_task_num_gift_take_req

	-- 玩家世界数量同步
	--Packet:role_back_world_num_sync_req

	-- 玩家回归充值信息同步
	--Packet:role_back_pay_sync_req

	-- 玩家回归充值领取积分奖励
	--Packet:role_back_pay_take_reward_req

	-- 聊天框列表同步
	--Packet:role_chat_box_sync_req

	-- 聊天框更换使用的聊天框
	--Packet:role_chat_box_change_req

	-- 江洋大盗信息同步
	--Packet:robbermonster_sync_req

	-- 江洋大盗信息同步(times 第几次刷新)
	--Packet:robbermonster_refresh_req

	-- 传送到大盗
	--Packet:robbermonster_tele_req

	-- 黑市信息同步
	--Packet:black_market_sync_req

	-- 黑市出价
	--Packet:black_market_price_req

	-- 同步帮派工资信息
	--Packet:sect_salary_sync_req

	-- 领取基础工资
	--Packet:sect_base_salary_take_req

	-- 领取活跃工资
	--Packet:sect_activity_salary_take_req

	-- 打破封印捐赠
	--Packet:breaklevel_donate_req

	-- 同步打破封印信息
	--Packet:breaklevel_sync_req

	-- 声望商城同步协议
	--Packet:fame_shopsync_req

	-- 声望商城刷新协议
	--Packet:fame_shoprefresh_req

	-- 声望商城买商品协议
	--Packet:fame_shopbuy_req

	-- 战队信息同步
	--Packet:fightteam_sync_req

	-- 创建战队
	--Packet:fightteam_create_req

	-- 解散战队
	--Packet:fightteam_dismiss_req

	-- 队长踢人
	--Packet:fightteam_kick_req

	-- 邀请加入战队
	--Packet:fightteam_invite_req

	-- 战队邀请响应
	--Packet:fightteam_invite_response_req

	--Packet:fightteam_queryf_req

	-- 队长报名海选赛
	--Packet:fightteam_joinqualifying_req

	-- 队长取消报名海选赛
	--Packet:fightteam_quitqualifying_req

	--Packet:tournament_teamgroup_sync_req

	-- 队员锦标赛签到
	--Packet:fightteam_joinknockout_req

	--Packet:fightteam_querym_req

	-- 同步战队排行榜
	--Packet:fightteamrank_sync_req

	-- 获取战队排行榜列表
	--Packet:fightteamrank_get_req

	-- 个人荣誉奖励
	--Packet:tournament_take_rolereward_req

	-- 锦标赛奖励
	--Packet:tournament_take_teamreward_req

	-- 锦标赛对手查询
	--Packet:fightteam_selfgroup_req

	-- 进入观战
	--Packet:tournament_guard_req

	-- 刷新脉象
	--Packet:meridian_refresh_holebuff_req

	-- 冲穴
	--Packet:meridian_break_hole_req

	-- 潜能升级
	--Packet:meridian_potential_uplevel_req

	-- 帮派招募令信息
	--Packet:sect_msg_info_req

	-- 骑术书存入
	--Packet:horsebook_push_req

	-- 骑术书取出
	--Packet:horsebook_pop_req

	-- 兽决存入
	--Packet:petbook_push_req

	-- 兽决取出
	--Packet:petbook_pop_req

	-- 结婚证点赞
	--Packet:marriage_card_sign_req

	-- 结婚证同步
	--Packet:marriage_card_sync_req

	-- 愿望卡片同步
	--Packet:christmas_cards_sync_req

	-- 请求愿望列表
	--Packet:christmas_cards_get_list_req

	-- 许愿
	--Packet:christmas_cards_wish_req

	-- 送花
	--Packet:christmas_cards_comment_req

	-- 解锁镖车皮肤
	--Packet:sect_deliver_skin_unlock_req

	-- 选择镖车皮肤
	--Packet:sect_deliver_skin_select_req

	-- 周常任务信息同步
	--Packet:week_task_sync_req

	-- 完成周常任务
	--Packet:week_task_finish_req

	-- 领取周常任务积分奖励
	--Packet:week_task_score_reward_take_req

	-- 使用示爱道具
	--Packet:show_love_item_use_req

	-- 送宝童子信息同步
	--Packet:wizard_wish_sync_req

	-- 送宝童子求取
	--Packet:wizard_wish_operate_req

	-- 送宝童子领奖
	--Packet:wizard_wish_take_req

	-- 星魂引星
	--Packet:star_spirit_operate_req

	-- 星魂升阶
	--Packet:star_spirit_uprank_req

	-- 星魂属性洗练
	--Packet:main_star_refresh_req

	-- 星魂属性保存
	--Packet:main_star_save_req

	-- 奇遇与NPC兑话
	--Packet:adventure_npc_chat

	-- 接取奇遇任务
	--Packet:adtask_take_req

	-- 放弃奇遇任务
	--Packet:adtask_quit_req

	-- 奇遇任务领取奖励
	--Packet:adtask_reward_req

	-- 接受奇遇任务(第一次触发, taskId: 0 表示拒绝)
	--Packet:adtask_accept_req

	-- 选择奇遇任务
	--Packet:adtask_select_req

	-- 领取奇遇任务累计奖励
	--Packet:adtask_total_reward_req

	-- 弹幕添加
	--Packet:sect_popmsg_add_req

	-- 弹幕同步
	--Packet:sect_popmsg_sync_req

	-- 刷新任务库
	--Packet:dragon_hole_task_refresh_req

	-- 接取任务
	--Packet:dragon_hole_task_take_req

	-- 领取任务奖励
	--Packet:dragon_hole_task_reward_req

	-- 放弃任务
	--Packet:dragon_hole_task_giveup_req

	-- 同步龙穴任务信息
	--Packet:dragon_hole_task_sync_req

	-- 快速完成龙穴任务
	--Packet:dragon_hole_quick_finish_task_req

	-- 擦拭雕像
	--Packet:honnor_statue_interation_req

	-- 获取武道会雕像详细信息
	--Packet:honnor_statue_get_fightteam_statue_req

	-- 同步春节福袋
	--Packet:new_year_pack_sync_req

	-- 春节福袋打开
	--Packet:new_year_pack_take_req

	-- 领取新年红包
	--Packet:new_year_red_packet_get_req

	-- 同步灯谜
	--Packet:light_secret_sync_req

	-- 回答灯谜
	--Packet:light_secret_answer_req

	-- 领取角色奖励
	--Packet:light_secret_role_take_req

	-- 领取世界奖励
	--Packet:light_secret_world_take_req

	-- 快速匹配跨服副本
	--Packet:globalmap_join_req

	-- 取消匹配跨服副本
	--Packet:globalmap_quit_req

	-- 八卦锻造同步
	--Packet:eightdiagram_sync_req

	-- 八卦强化
	--Packet:eightdiagram_strength_req

	-- 八卦分解
	--Packet:eightdiagram_splite_req

	-- 八卦萃取
	--Packet:eightdiagram_extraction_req

	-- 八卦制造
	--Packet:eightdiagram_create_req

	-- 八卦装备
	--Packet:eightdiagram_equip_req

	-- 八卦取消装备
	--Packet:eightdiagram_unequip_req

	-- 使用八卦原石
	--Packet:eightdiagram_use_stonebag_req

	-- 分解属性原石
	--Packet:eightdiagram_del_stonepool_req

	-- 合成祭品
	--Packet:item_compose_req

	-- 分解祭品
	--Packet:item_splite_req

	-- 开启八卦易数玩法
	--Packet:eightdiagram_change_open_req

	-- 购买易数分配点数
	--Packet:eightdiagram_change_buy_point_req

	-- 重置易数分配点数
	--Packet:eightdiagram_change_reset_point_req

	-- 更新易数分配点数
	--Packet:eightdiagram_change_update_point_req

	-- 技能升级
	--Packet:eightdiagram_change_uplevel_req

	-- 装备技能
	--Packet:eightdiagram_change_equip_skill_req

	-- 卸载技能
	--Packet:eightdiagram_change_unequip_skill_req

	--Packet:globalpve_sync_req

	-- 参加跨服PVE
	--Packet:globalpve_join_req

	--Packet:globalpve_teleboss_req

	-- 进入对战区
	--Packet:globalpve_enterwar_req

	-- 同步对战区列表
	--Packet:globalpve_syncwararea_req

	--Packet:sectshare_sync_req

	--Packet:sectshare_event_sync_req

	--Packet:sectshare_apply_sync_req

	-- 共享道具申请
	--Packet:sectshare_apply_req

	-- 设置兑换所需共享积分
	--Packet:sectshare_setprice_req

	-- 百万答题同步
	--Packet:million_answer_sync_req

	-- 百万答题预约
	--Packet:million_answer_reserve_req

	-- 百万答题点击
	--Packet:million_answer_click_req

	-- 百万答题获取获胜玩家姓名
	--Packet:million_answer_name_req

	-- 发送验证码
	--Packet:send_phone_msg_req

	-- 领取绑定手机奖励
	--Packet:take_bind_phone_reward_req

	-- 同步绑定手机奖励
	--Packet:phone_reward_sync_req

	-- 同步卜卦信息
	--Packet:divination_state_sync_req

	-- 进行占卜
	--Packet:conduct_divination_req

	-- 领取奖励
	--Packet:receive_divination_reward_req

	-- 升级五转之路
	--Packet:transform_road_uplevel_req

	-- 选择命轮
	--Packet:transform_road_use_lifewheel_req

	-- 重置命轮
	--Packet:transform_road_reset_lifewheel_req

	--Packet:send_kite_req

	-- 同步单人闯关
	--Packet:single_explore_sync_req

	-- 进入单人闯关
	--Packet:single_explore_start_req

	-- 选择单人闯关宠物
	--Packet:single_explore_set_pet_req

	-- 同步世界杯相关信息
	--Packet:world_cup_sync_req

	-- 进行世界杯压注
	--Packet:world_cup_conduct_bet_req

	-- 家园创建
	--Packet:homeland_create_req

	-- 家园改名
	--Packet:homeland_rename_req

	-- 家园升级
	--Packet:homeland_uplevel_req

	-- 家园土地升级
	--Packet:homeland_ground_uplevel_req

	-- 家园池塘升级
	--Packet:homeland_pool_uplevel_req

	-- 种植作物
	--Packet:homeland_plant_req

	-- 铲除作物
	--Packet:homeland_remove_req

	-- 偷窃作物
	--Packet:homeland_steal_req

	-- 收获作物
	--Packet:homeland_harvest_req

	-- 进入家园
	--Packet:homeland_enter_req

	-- 同步家园信息
	--Packet:homeland_sync_req

	-- 同步家园装备信息
	--Packet:homeland_equip_sync_req

	-- 作物浇水
	--Packet:homeland_water_req

	-- 作物护理
	--Packet:homeland_nurse_req

	-- 开始钓鱼
	--Packet:homeland_start_fish_req

	-- 中断钓鱼
	--Packet:homeland_stop_fish_req

	-- 结束钓鱼
	--Packet:homeland_finish_fish_req

	-- 穿戴装备
	--Packet:homeland_equip_wear_req

	-- 脱下装备
	--Packet:homeland_equip_unwaer_req

	-- 销毁装备
	--Packet:homeland_equip_remove_req

	-- 踢出角色
	--Packet:homeland_kick_role_req

	-- 查询家园内角色
	--Packet:homeland_query_roles_req

	-- 同步家园历史信息
	--Packet:homeland_history_sync_req

	-- 修改钓鱼状态
	--Packet:homeland_fish_status_change_req

	-- 家园生产
	--Packet:homeland_produce_req

	-- 家园房屋升级
	--Packet:homeland_house_uplevel_req

	-- 家具背包存入
	--Packet:furniture_bag_put_req

	-- 家具背包取出
	--Packet:furniture_bag_get_req

	-- 地面家具放置
	--Packet:land_furniture_put_req

	-- 地面家具移动
	--Packet:land_furniture_move_req

	-- 地面家具取回
	--Packet:land_furniture_remove_req

	-- 地毯家具放置
	--Packet:floor_furniture_put_req

	-- 地毯家具移动
	--Packet:floor_furniture_move_req

	-- 地毯家具取回
	--Packet:floor_furniture_remove_req

	-- 墙面家具放置
	--Packet:wall_furniture_put_req

	-- 墙面家具取回
	--Packet:wall_furniture_remove_req

	-- 附加家具放置
	--Packet:addition_furniture_put_req

	-- 附加家具取回
	--Packet:addition_furniture_remove_req

	-- 进入房间
	--Packet:house_enter_req

	-- 标记脚本角色
	--Packet:script_role_mark_req

	-- 家具背包同步
	--Packet:house_bag_furniture_sync_req

	-- 房屋皮肤切换
	--Packet:house_skin_select_req

	-- 使用房屋皮肤解锁道具
	--Packet:bag_use_house_skin_item_req

	-- 房屋已解锁皮肤同步
	--Packet:house_unlock_skin_sync_req

	-- 传世大酬宾活动同步
	--Packet:legendmake_sync_req

	-- 节日活动礼盒领取
	--Packet:festival_takegift_req

	-- 节日活动世界祝福
	--Packet:festival_bless_req

	-- 同步活动信息请求
	--Packet:donate_sync_info_req

	-- 进行捐助
	--Packet:donate_conduct_req

	-- 领奖
	--Packet:donate_reward_req

	-- 同步图钉信息
	--Packet:thumbtack_sync_req

	-- 添加图钉
	--Packet:thumbtack_add_req

	-- 修改备注
	--Packet:thumbtack_revise_remarks_req

	-- 删除图钉
	--Packet:thumbtack_delete_req

	-- 使用图钉
	--Packet:thumbtack_use_req

	-- 帮派捐赠
	--Packet:sect_donation_req

	-- 帮派捐赠同步
	--Packet:sect_donation_sync_req

	-- 帮派捐赠同步捐赠角色
	--Packet:sect_donation_roles_req

	-- 同步伙伴系统信息
	--Packet:sync_partner_info_req

	-- 填写伙伴码
	--Packet:add_partner_code_req

	-- 领取奖励
	--Packet:receive_partner_reward_req

	-- 领取荣耀归来奖励
	--Packet:receive_partner_honour_reward_req

	-- 单人开启NPC副本
	--Packet:single_npc_map_start_req

	-- 伙伴解绑下线
	--Packet:unbind_partner_req

	-- 伙伴解绑上线
	--Packet:unbind_upper_partner_req

	-- 进行放生
	--Packet:conduct_release_item_req

	-- 同步登科有礼信息
	--Packet:admission_sync_info_req

	-- 进行卜算
	--Packet:admission_conduct_req

	-- 领取姻缘成就奖励
	--Packet:marriage_achieve_receive_reward_req

	-- 领取姻缘成就累计成就奖励
	--Packet:marriage_achieve_accumulative_reward_req

	-- 进入宠物试炼副本
	--Packet:pettrain_enter_req

	-- 领取宠物试炼任务
	--Packet:pettrain_task_take_req

	-- 完成宠物试炼任务
	--Packet:pettrain_task_finish_req

	-- 采集宠物试炼矿物
	--Packet:pettrain_mineral_take_req

	-- 五绝争霸信息同步
	--Packet:five_hegemony_sync_info_req

	-- 选择npc
	--Packet:five_hegemony_choose_npc_req

	-- 选择npc技能
	--Packet:five_hegemony_choose_skill_req

	-- 请求回合争斗结果
	--Packet:five_hegemony_round_result_req

	-- 请求弹幕
	--Packet:sync_five_hegemony_barrages

	-- 发送弹幕
	--Packet:five_hegemony_send_barrage_req

	-- 最近获得同步
	--Packet:item_history_sync_req

	-- 会武周奖励同步
	--Packet:super_arena_week_reward_sync_req

	-- 会武周奖励领取
	--Packet:super_arena_week_reward_take_req

	-- 同步今日兽灵地图组
	--Packet:day_hunter_map_group_sync_req

	-- 同步帮派合照角色信息
	--Packet:sect_photo_roles_sync_req

	-- 邀请设置
	--Packet:invitation_relevant_settings_req

	-- 日程记录同步
	--Packet:schdule_log_sync_req

	-- æå¸ç³è¯·
	--Packet:master_apply_req

	-- å½é¢æ¶å¾ç³è¯·
	--Packet:master_offer_req

	-- æ¥åå½é¢æ¶å¾ç³è¯·
	--Packet:master_accept_offer_req

	-- æ¥åæå¸ç³è¯·
	--Packet:master_accept_apply_req

	-- åå¸
	--Packet:master_betray_req

	-- åºå¸
	--Packet:master_graduate_req

	-- åæåºå¸ç³è¯·
	--Packet:master_agree_graduate_req

	-- å¼é¤
	--Packet:master_dismiss_req

	-- æ¥è¯¢èªå·±çæ¶å¾å®£è¨
	--Packet:master_get_announce_req

	-- è®¾ç½®èªå·±çæ¶å¾å®£è¨
	--Packet:master_set_announce_req

	-- å é¤èªå·±çæ¶å¾å®£è¨
	--Packet:master_del_announce_req

	-- è¯·æ±åºæ¬ä¿¡æ¯
	--Packet:master_info_req

	-- æ¥çä¸ªäººæ¶æ¯
	--Packet:master_msg_list_req

	-- å é¤åå¸æ¶æ¯
	--Packet:master_remove_betray_msg_req

	-- è¯·æ±å¸ç¶åè¡¨
	--Packet:master_list_req

	-- æ¥çæ´»è·
	--Packet:master_list_apprentice_req

	-- è¯·æ±ä»»å¡è¿åº¦
	--Packet:master_tasks_req

	-- å¸å¾åååæ­¥åè®®
	--Packet:master_shopsync_req

	-- å¸å¾ååå·æ°åè®®
	--Packet:master_shoprefresh_req

	-- å¸å¾ååä¹°åååè®®
	--Packet:master_shopbuy_req

	-- æ¡æè¯ä¿®æ¹å®£è¨
	--Packet:master_card_change_declaration_req

	-- æ¡æè¯ç¹èµ
	--Packet:master_card_sign_req

	-- æ¡æè¯åæ­¥
	--Packet:master_card_sync_req

	-- 打开心情日记主页(type=1自己 type=2他人)
	--Packet:mood_diary_open_main_page_req

	-- 请求心情日记内容
	--Packet:mood_diary_get_diaries_req

	-- 删除日记
	--Packet:mood_diary_delete_req

	-- 赠送人气值道具
	--Packet:mood_diary_send_popularity_item_req

	-- 改变装饰
	--Packet:mood_diary_change_decorate_req

	-- 激活装饰
	--Packet:mood_diary_activite_decorate_req

	-- 聊天分享type=1分享本服 type=2分享全服
	--Packet:mood_diary_share_req

	-- 写日记
	--Packet:mood_diary_wirte_diary_req

	-- 获取自己人气值
	--Packet:mood_diary_get_self_popularity_req

	-- 星座设置
	--Packet:personal_info_constellation_req

	-- 性别设置
	--Packet:personal_info_gender_req

	-- 爱好设置, diyHobbies自定义爱好
	--Packet:personal_info_hobbies_req

	-- 星愿测试
	--Packet:personal_info_answer_req

	-- 分享星愿测试
	--Packet:personal_info_share_req

	-- 交友宣言设置
	--Packet:personal_info_signature_req

	-- 跨服好友 同步信息
	--Packet:cross_friend_sync_req

	-- 跨服好友 立即匹配
	--Packet:cross_friend_match_req

	-- 跨服好友 换一批
	--Packet:cross_friend_refresh_req

	-- 跨服好友 爱心(添加好友)
	--Packet:cross_friend_like_req

	-- 跨服好友 裂心(忽略)
	--Packet:cross_friend_dislike_req

	-- 跨服好友 好友申请 处理(accept 0拒绝 1接受)
	--Packet:cross_friend_reply_req

	-- 跨服好友 删除好友
	--Packet:cross_friend_delete_req

	-- 附灵升阶
	--Packet:seal_given_spirit_uplvl_req

	-- 附灵加点
	--Packet:seal_given_spirit_addpoint_req

	-- 附灵五行相升升级
	--Packet:seal_given_spirit_upeachotheruplvl_req

	-- 附灵重置加点
	--Packet:seal_given_spirit_resetPoint_req

	-- 购买附灵加点
	--Packet:seal_given_spirit_buy_point_req

	-- 珍珑棋局任务接取
	--Packet:chess_game_receive_req

	-- 珍珑棋局任务取消
	--Packet:chess_game_cancel_req

	-- 珍珑棋局任务完成
	--Packet:chess_game_finish_req

	-- 珍珑棋局解困
	--Packet:chess_game_uplooplvl_req

	-- 珍珑棋局客户端通知服务器任务完成
	--Packet:chess_game_notice_task_finish

	-- 珍珑棋局传送
	--Packet:chess_game_trans

	-- 珍珑棋局获取排行榜列表
	--Packet:chess_game_rank_get_req

	-- 心决解锁
	--Packet:soulspell_unlock_req

	-- 心决修心
	--Packet:soulspell_props_req

	-- 心决突破
	--Packet:soulspell_break_req

	-- 暗器激活
	--Packet:hideweapon_make_req

	-- 更换暗器
	--Packet:hideweapon_change_req

	-- 暗器升品
	--Packet:hideweapon_rankup_req

	-- 暗器升级
	--Packet:hideweapon_levelup_req

	-- 暗器被动技能升级
	--Packet:hideweapon_pskill_levelup_req

	-- 暗器更换被动技能
	--Packet:hideweapon_pskill_select_req

	-- 暗器主动技能升级
	--Packet:hideweapon_askill_levelup_req

	-- 暗器皮肤解锁
	--Packet:hideweapon_skin_unLock_req

	-- 暗器更换皮肤
	--Packet:hideweapon_change_skin_req

	-- 巨灵信息同步
	--Packet:gaintboss_sync_req

	-- 参加巨灵攻城
	--Packet:gaintboss_join_req

	-- 抽奖
	--Packet:gaintboss_reward_req

	-- 神秘buff
	--Packet:gaintboss_takebuff_req

	-- 外传副本解锁外传
	--Packet:biography_unlock_req

	-- 外传副本同步条件
	--Packet:biography_sync_conditions_req

	-- 外传副本开始副本
	--Packet:biography_start_mapcopy_req

	-- 外传副本接任务
	--Packet:biography_take_task_req

	-- 外传副本任务提交物品
	--Packet:biography_submit_item_req

	-- 外传副本完成任务
	--Packet:biography_finish_task_req

	-- 外传副本领取完成奖励
	--Packet:biography_take_reward_req

	-- 装备锤炼解锁属性
	--Packet:equip_smelting_unlock_req

	-- 装备锤炼百炼
	--Packet:equip_smelting_req

	-- 装备锤炼百炼保存
	--Packet:equip_smelting_save_req

	-- 装备锤炼千锤
	--Packet:equip_hammer_req

	-- 装备锤炼千锤保存
	--Packet:equip_hammer_save_req

	-- 装备锤炼技能解锁
	--Packet:equip_hammer_skill_unlock_req

	-- 打开活动界面
	--Packet:regular_task_open_req

	-- 领取定期活动积分奖励
	--Packet:regular_task_score_reward_take_req

	-- 定期活动兑换
	--Packet:regular_task_exchange_req

	-- 使用定期活动道具
	--Packet:bag_use_regular_item_req

	-- 定期活动客户端通知服务器任务完成计数
	--Packet:regular_task_notice

	-- 打开活动祈愿界面
	--Packet:regular_pray_open_req

	-- 祈愿
	--Packet:regular_pray_req

	-- 祈愿领奖
	--Packet:regular_pray_take_reward_req

	-- 宠物穿上装备
	--Packet:pet_domestication_equip_wear_req

	-- 宠物脱下装备
	--Packet:pet_domestication_equip_unwear_req

	-- 宠物装备部位升级
	--Packet:pet_domestication_part_lvlup_req

	-- 宠物驯养技能升级
	--Packet:pet_domestication_skill_lvlup_req

	-- 宠物装备分解
	--Packet:pet_domestication_equip_split_req

	-- 打开页签同步信息
	--Packet:survive_sync_req

	-- 设置当前英雄
	--Packet:survive_sethero_req

	-- 穿装备
	--Packet:survive_equip_upwear_req

	-- 脱装备
	--Packet:survive_equip_downwear_req

	-- 销毁道具请求
	--Packet:survive_destoryitems_req

	-- 使用药品
	--Packet:survive_usedrug_req

	-- 个人积分最终结果
	--Packet:survive_final_score_result_req

	-- 领取宝箱
	--Packet:week_treasure_box_take_req

	-- 开始创建结拜
	--Packet:create_sworn_start_req

	-- 登记结拜生日
	--Packet:sworn_sign_birthday_req

	-- 修改结拜生日
	--Packet:sworn_change_birthday_req

	-- 结束创建结拜
	--Packet:create_sworn_end_req

	-- 结拜添加角色
	--Packet:sworn_add_role_req

	-- 结拜踢出角色
	--Packet:sworn_kick_role_req

	-- 结拜同步
	--Packet:sworn_sync_req

	-- 修改结拜前缀
	--Packet:sworn_change_prefix_req

	-- 修改结拜后缀
	--Packet:sworn_change_suffix_req

	-- 领取结拜活跃奖励
	--Packet:sworn_activity_reward_take_req

	-- 使用结拜金兰值道具
	--Packet:use_sworn_gift_item_req

	-- 召唤结拜成员
	--Packet:one_key_summond_sworn_member

	-- 结拜助战奖励领取
	--Packet:sworn_help_map_reward_take_req

	-- 退出结拜
	--Packet:sworn_leave_req

	-- 退出结拜操作通知
	--Packet:sworn_step_end

	-- 修改寄语
	--Packet:set_gift_string_req

	-- 同步金兰证
	--Packet:sworn_card_sync_req

	-- 点赞金兰证
	--Packet:sworn_card_sign_req

	-- 完成成就任务
	--Packet:finish_achievement_task_req

	-- 领取成就点奖励
	--Packet:take_achievement_point_reward_req

	-- 使用武诀经验道具
	--Packet:use_skill_formula_exp_item_req

	-- 武诀升阶
	--Packet:skill_formula_up_rank_req

	-- 武诀技能升级
	--Packet:skill_formula_skill_level_up_req

	-- 武诀开启
	--Packet:skill_formula_open_req

	-- 武诀信息同步
	--Packet:skill_formula_sync_req

	-- 武诀潜魂升级
	--Packet:skill_formula_hidden_soul_uplvl_req

	-- 激活幻形
	--Packet:transform_active_req

	-- 设置当前幻形
	--Packet:transform_set_req

	-- 使用当前幻形(use 1:使用  0:取消使用)
	--Packet:transform_use_req

	-- 打开界面同步信息
	--Packet:maze_sync_req

	-- 参加天魔迷宫
	--Packet:maze_join_req

	-- 进入传送阵
	--Packet:maze_transfer_req

	-- 同步当前收益
	--Packet:maze_commongain_req

	-- 同步额外收益
	--Packet:maze_extragain_req

	-- 开始节日任务
	--Packet:festival_task_enter_req

	-- 领取节日任务
	--Packet:festival_task_accept_req

	-- 完成节日任务
	--Packet:festival_task_finish_req

	-- 记录任务访问点
	--Packet:task_log_point_req

	-- 客户端计算任务请求
	--Packet:client_log_task_req

	-- 穿骑战装备（部位--装备id）
	--Packet:dress_steed_equip_req

	-- 脱骑战装备（部位--装备id）
	--Packet:takeoff_steed_equip_req

	-- 激活骑战套装
	--Packet:unlock_steed_equip_suit_req

	-- 制作骑战装备
	--Packet:steed_equip_create_req

	-- 熔炼骑战装备
	--Packet:steed_equip_destory_req

	-- 灵签抽签
	--Packet:lingqian_get_req

	-- 打开界面同步消息
	--Packet:money_tree_open_req

	-- 每日摇一摇
	--Packet:money_tree_shake_req

	-- 领取累计奖励
	--Packet:money_tree_get_add_up_req

	-- 开启家园宠物位置
	--Packet:homeland_pet_position_open_req

	-- 设置家园宠物
	--Packet:homeland_pet_position_set_req

	-- 家园宠物互动
	--Packet:homeland_pet_position_action_req

	-- 家园宠物一键互动
	--Packet:homeland_pet_position_onekey_action_req

	-- 家园宠物领奖
	--Packet:homeland_pet_position_reward_req

	-- 进入随时随地副本
	--Packet:anywhere_map_enter_req

	-- 传送至随时随地副本
	--Packet:anywhere_map_point_transfer_req

	-- 开启灵墟寻路
	--Packet:soaring_position_open_req

	-- 进入灵墟
	--Packet:soaring_map_enter_req

	-- 开启飞升
	--Packet:soaring_task_open_req

	-- 完成飞升
	--Packet:soaring_task_finish_req

	-- 解锁脚底特效
	--Packet:footeffect_unlock_req

	-- 选择脚底特效
	--Packet:footeffect_select_req

	-- 脚底特效同步
	--Packet:footeffect_sync_req

	-- 选择外显
	--Packet:weapondisplay_select_req

	-- 接取飞升任务
	--Packet:soaring_day_task_take_req

	-- 完成飞升任务
	--Packet:soaring_day_task_finish_req

	-- 快速完成飞升任务
	--Packet:soaring_day_task_quick_finish_req

	-- 使用提升飞升经验道具
	--Packet:soaring_use_exp_item_req

	-- 守护灵兽激活
	--Packet:pet_guard_active_req

	-- 守护灵兽升级
	--Packet:pet_guard_lvl_up_req

	-- 守护灵兽解锁潜能
	--Packet:pet_guard_unlock_latent_req

	-- 守护灵兽出战
	--Packet:pet_guard_change_req

	-- 守护灵兽隐藏显示
	--Packet:pet_guard_show_req

	-- 周年活动步骤一奖励
	--Packet:jubilee_activity_step1_reward_req

	-- 周年活动步骤二奖励
	--Packet:jubilee_activity_step2_reward_req

	-- 周年活动步骤二任务组选择
	--Packet:jubilee_activity_step2_group_choose_req

	-- 周年活动步骤二任务接取
	--Packet:jubilee_activity_step2_task_take_req

	-- 周年活动步骤二任务完成
	--Packet:jubilee_activity_step2_task_finish_req

	-- 周年活动进度同步
	--Packet:jubilee_activity_process_sync_req

	-- 周年活动步骤三矿物传送
	--Packet:jubilee_activity_step3_teleport_req

	-- 周年活动步骤三矿物采集
	--Packet:jubilee_activity_step3_take_req

	-- 公主出嫁报名
	--Packet:princess_marry_sign_req

	-- 公主出嫁取消报名
	--Packet:princess_marry_quit_req

	-- 回归玩家双倍掉落活动同步
	--Packet:back_role_double_drop_sync_req

	-- 神斗升级
	--Packet:god_star_levelup_req

	-- 神斗技能升级
	--Packet:god_star_skill_levelup_req

	-- 方位强制重置
	--Packet:weaponsoul_partmustreset_req

	-- 神机藏海报名
	--Packet:hidden_sea_marry_sign_req

	-- 神机藏海取消报名
	--Packet:hidden_sea_quit_req

	-- 神机藏海同步幸运团队
	--Packet:hidden_sea_lucky_team_req

	-- 使用卡牌道具
	--Packet:card_item_use_req

	-- 解锁卡背
	--Packet:card_back_unlock_req

	-- 选择卡背
	--Packet:card_back_select_req

	-- 选择初始关卡
	--Packet:fiveelement_org_req

	-- 开始五行副本
	--Packet:fiveelement_start_req

	-- 江湖侠探开启活动
	--Packet:spy_open_req

	-- 江湖侠探调查
	--Packet:spy_survey_req

	-- 江湖侠探追击
	--Packet:spy_chasing_req

	-- 江湖侠探揭露BOSS
	--Packet:spy_finding_boss_req

	-- 江湖侠探追击boss
	--Packet:spy_chasing_boss_req

	-- 打开界面
	--Packet:friend_circle_open_req

	-- 接取任务 (status 0=是界面点接取, 1是在NPC对话点接取)
	--Packet:friend_circle_take_task_req

	-- 完成任务
	--Packet:friend_circle_finish_task_req

	-- 放弃任务
	--Packet:friend_circle_cancel_task_req

	-- 购买任务次数
	--Packet:friend_circle_buy_task_cnt_req

	-- 领取每日奖励
	--Packet:friend_circle_take_day_reward_req

	-- 领取情义值奖励
	--Packet:friend_circle_take_friendship_reward_req

	-- 任务跟多个NPC对话 送信
	--Packet:task_talk_mul_npc_req

	-- 任务交换物品
	--Packet:task_exchange_item_req

	-- 消耗符文提升铸锭经验
	--Packet:cast_ingot_use_rune_req

	-- 祈言
	--Packet:array_stone_prayer_req

	-- 设置直接转换能量
	--Packet:array_stone_set_conversion_req

	-- 解锁祈言孔位
	--Packet:array_stone_unlock_hole_req

	-- 密文回收
	--Packet:array_stone_ciphertext_destroy_req

	-- 密文上阵
	--Packet:array_stone_ciphertext_equip_req

	-- 密文下阵
	--Packet:array_stone_ciphertext_unequip_req

	-- 密文合成
	--Packet:array_stone_ciphertext_uplvl_req

	-- 密文置换
	--Packet:array_stone_ciphertext_change_req

	-- 密文锁定
	--Packet:array_stone_ciphertext_lock_req

	-- 添加真言等级熟练度
	--Packet:array_stone_mantra_uplvl_req

	-- 使用密文能量道具
	--Packet:bag_useitemciphertextenergy_req

	-- 获取玩家秘祝信息
	--Packet:query_arraystoneoverviews_req

	-- 进入黄金海岸
	--Packet:global_world_enter_req

	-- 同步地图信息
	--Packet:global_world_sync_req

	-- 切换分线
	--Packet:global_world_change_req

	-- 卡片操作，类型1.激活 2.放弃
	--Packet:global_world_card_operation_req

	-- 帮派卡片捐赠
	--Packet:global_world_card_sect_donate_req

	-- 请求卡片日志，类型1.个人 2.战区
	--Packet:global_world_log_req

	-- 请求帮派卡池的面板
	--Packet:global_world_sect_panel_req

	-- 请求领取帮派的卡片
	--Packet:global_world_sect_drawcard_req

	-- 领取任务奖励
	--Packet:global_world_task_take_reward_req

	-- 使用卡片包道具
	--Packet:global_world_use_card_box_req

	-- 转盘同步请求
	--Packet:newluckyroll_sync_req

	-- 转盘同步请求
	--Packet:newluckyroll_play_req

	-- 万寿阁报名
	--Packet:longevity_loft_sign_req

	-- 万寿阁取消报名
	--Packet:longevity_loft_quit_req

	-- 进入御灵鬼岛请求
	--Packet:ghost_island_enter_req

	-- 碎片交换请求
	--Packet:ghost_island_exchange_req

	-- 取消碎片交换请求
	--Packet:ghost_island_exchange_cancle_req

	-- 炼化请求 debrisId为普通碎片Id
	--Packet:ghost_island_artifice_req

	-- 打开界面同步信息
	--Packet:ghost_island_info_req

	-- 学习驭灵和天眼技能 1 御灵2天眼
	--Packet:ghost_island_learn_skill_req

	-- 密探风云每日奖励
	--Packet:spy_world_day_reward_req

	-- 密探风云活动奖励
	--Packet:spy_world_activity_reward_req

	-- 密探风云变箱子
	--Packet:spy_world_alter_req

	-- 密探风云取消变箱子
	--Packet:spy_world_alter_quit_req

	-- 开始外传职业副本
	--Packet:biography_class_map_start_req

	-- 外传职业副本装备技能
	--Packet:biography_class_skill_select_req

	-- 外传职业副本卸载技能
	--Packet:biography_class_skill_unselect_req

	-- 外传职业副本装备心法
	--Packet:biography_class_spirit_install_req

	-- 外传职业副本卸载心法
	--Packet:biography_class_spirit_uninstall_req

	-- 接取外传职业副本任务
	--Packet:biography_class_take_task_req

	-- 领取外传职业副本任务奖励
	--Packet:biography_class_task_reward_req

	-- 变更外传职业
	--Packet:biography_class_change_profession_req

	-- 变更外传职业反悔
	--Packet:biography_class_regret_profession_req

	-- 领取宝箱奖励
	--Packet:biography_class_receive_box_reward_req

	-- 领取奖励
	--Packet:first_access_take_reward_req

	-- 领取限时任务
	--Packet:time_limit_task_take_req

	-- 开始限时任务
	--Packet:time_limit_task_start_req

	-- 完成限时任务
	--Packet:time_limit_task_finish_req

	-- 节日活动同步
	--Packet:festival_activity_sync_req

	-- 节日活动捐赠
	--Packet:festival_activity_donate_req

	-- 节日活动角色积分奖励
	--Packet:festival_activity_role_reward_req

	-- 节日活动世界积分奖励
	--Packet:festival_activity_world_reward_req

	-- 同步新春灯卷
	--Packet:spring_lantern_sync_req

	-- 进入新春灯卷地图
	--Packet:spring_lantern_map_enter_req

	-- 完成新春灯卷NPC活动
	--Packet:spring_lantern_join_req

	-- 使用灯笼
	--Packet:spring_lantern_use_req

	-- 纪念币同步
	--Packet:souvenir_coin_sync_req

	-- 购买纪念币
	--Packet:souvenir_coin_buy_req

	-- 兑现纪念币
	--Packet:souvenir_coin_cash_req

	-- 代币兑换
	--Packet:souvenir_coin_exchange_req

	-- 强制兑现纪念币
	--Packet:souvenir_coin_force_cash_req

	-- 保持奖励领取
	--Packet:souvenir_coin_hold_reward_take_req


--Channel: C2M	client to map

	-- 计算延迟(客户端发起)
	--Packet:client_ping_start

	-- 客户端给服务器同步ping值
	--Packet:sync_server_ping

	-- 怪物回到出生点
	--Packet:set_monster_birthpos

	-- 玩家上马
	--Packet:role_ride_horse

	-- 玩家下马
	--Packet:role_unride_horse

	-- 客户端矫正服务器位置（玩家）
	--Packet:role_adjust_serverpos

	-- 客户端矫正服务器位置（佣兵）
	--Packet:pet_adjust_serverpos

	-- 玩家移动
	--Packet:role_move

	-- 佣兵移动
	--Packet:pet_move

	-- 镖车移动
	--Packet:escortcar_move

	-- 玩家停止移动
	--Packet:role_stopmove

	-- 佣兵停止移动
	--Packet:pet_stopmove

	-- 镖车停止移动
	--Packet:escortcar_stopmove

	-- 查询周围玩家信息协议
	--Packet:query_roles_detail

	-- 查询周围佣兵信息
	--Packet:query_pets_detail

	-- 查询势力战队友位置信息
	--Packet:query_homeland_members_pos

	-- 查询势力战战报
	--Packet:query_forcewar_result

	-- 查询势力战队友位置信息
	--Packet:query_forcewar_members_pos

	-- 查询帮战战报
	--Packet:query_sectwar_result

	-- 查询帮战队友位置信息
	--Packet:query_sectwar_members_pos

	-- 玩家使用后续技能
	--Packet:role_usefollowskill

	-- 玩家使用社交动作
	--Packet:role_socialaction

	-- 玩家打断技能
	--Packet:role_breakskill

	-- 闪烁突刺
	--Packet:role_blinkskill

	-- 玩家使用技能
	--Packet:role_useskill

	-- 玩家使用技能
	--Packet:role_usemapskill

	--Packet:pet_useskill

	-- 玩家开始冲锋
	--Packet:role_rushstart

	-- 佣兵开始冲锋
	--Packet:pet_rushstart

	-- 取消采矿
	--Packet:mineral_quit

	-- 陷阱点击
	--Packet:trap_click

	--Packet:role_shift_start

	--Packet:pet_shift_start

	-- 拾取掉落请求
	--Packet:role_pickup_drops

	-- 拾取场景BUFF请求
	--Packet:role_pickup_mapbuff

	-- 激活神兵请求
	--Packet:role_motivate_weapon

	-- 神兵绝技触发技能
	--Packet:weapon_uskill_trigskill

	-- 激活武器祝福
	--Packet:role_active_weapon_bless

	-- 同步单机副本杀怪进度
	--Packet:privatemap_kill

	-- 单机副本持续掉落
	--Packet:privatemap_damage_reward

	-- 同步单机副本陷阱状态
	--Packet:privatemap_trap

	-- 单机本增加神兵熟练度
	--Packet:privatemap_weapon_master

	-- 同步玩家单机副本血量
	--Packet:privatemap_role_updatehp

	-- 同步佣兵单机副本血量
	--Packet:privatemap_pet_updatehp

	-- 同步玩家单机副本装备耐久
	--Packet:privatemap_durability

	--Packet:query_entity_nearby

	--Packet:send_towerdefence_alarm

	-- 同步地图伤害排行
	--Packet:query_map_damage_rank

	-- 同步帮派团队本战况
	--Packet:query_sect_map_cur_info

	-- 同步地图怪物数量
	--Packet:query_map_monster_num

	-- 同步帮派战旗帜状态
	--Packet:query_sect_war_flag_status

	-- 查询队友位置信息
	--Packet:query_mapcopy_members_pos

	--Packet:query_globalpve_boss_rank

	-- 神器乱战切换神兵
	--Packet:superarena_changeweapon

	-- 城战小地图信息
	--Packet:citywar_entities_query

	-- 驱赶马匹
	--Packet:drive_out_horses_req

	-- 修改战斗姿态请求  平衡姿态传0, 攻击姿态1,防御姿态2
	--Packet:modify_combat_type

	-- 同步伤害排行榜
	--Packet:gaintboss_rank_query

	-- 同步个人积分排行榜
	--Packet:survive_score_rank_query

	-- 玩家切换视角
	--Packet:role_set_view

	-- 玩家取消复活变身
	--Packet:survive_quit_alter

	-- 家园宠物查询
	--Packet:homeland_pet_position_query

	-- 同步马车位置
	--Packet:princess_marry_get_pos

	-- 同步排行榜
	--Packet:princess_marry_get_rank

	-- 神机藏海复位
	--Packet:hidden_sea_reset_position

	-- 脱离卡死
	--Packet:longevity_loft_reset_pos

	-- 传送到boss房间
	--Packet:longevity_loft_boss_teleport

	-- 同步排行榜
	--Packet:longevity_loft_get_rank

	-- 御灵鬼岛召唤
	--Packet:ghost_spirit_summoned



