----------------------------------------------------
g_i3k_game_context = nil;
----------------------------------------------------------------
--module(..., package.seeall)

local require = require;

require("i3k_global");
require("i3k_usercfg");
require("i3k_announcement")
require("logic/i3k_leadtrigger_def")
local JSON4LUA = require("i3k_json4lua")
--local utils = require("logic/module/utility")

g_i3k_logic = nil;--require("logic/i3k_logic").g_i3k_logic;

------------------------------------------------------
eLOGIN_TYPE_NORMAL		= 0;
eLOGIN_TYPE_RECONNECT	= 1;
eLOGIN_TYPE_GOD			= 2;

FINGOT_TYPE = -1
BINGOT_TYPE = 1
FMONEY_TYPE = -2
BMONEY_TYPE = 2
SECT_MONEY = 3

ARENA_MONEY = 4
EQUIP_ENERGY = 31
DIAMOND_ENERGY = 32
XINFA_ENERGY = 33
EXP_TYPE = 100
--体力
PHYSICAL_TYPE = 101
--任务类型对应的文本配置表中的描述
local task_desc = {
[1] = 16,
[2] = 17,
[3] = 18,
[4] = 19,
[5] = 20,
[6] = 21,
[7] = 22,
[8] = 23,
[9] = 24,
[10] = 25,
[11] = 161,
[12] = 21,
}

local shenbing_state = 3
local SHENBING_ATTACK = 1015
local SHENBING_DEFENSE = 1016
local HP = 1001

local keju_startTime = 0
local online_gift = 0
local quizGift_bonus = 0
local quizGift_bonusRank = {}
local quizGift_bonusExp = 0
local quizGift_doubleBonus = 0
local quizGift_usedoubleBonus = 0

local LeaderMark = false

g_Prop_Reward_Grow = 1
g_Prop_Reward_Star = 2
g_Prop_Reward_Stone = 3

SCENE_EFFECT_CONDITION ={
	get = 1,  		--接取
	finish = 2,		--完成
	useItem = 3,  	--使用道具
	mining = 4,		--采矿
	npcDia = 5,  	--npc对话
	doing = 6,		--任务目标
	npcPose = 7,	--npc摆放
}

------------------------------------------------1
g_i3k_game_context = nil;

function i3k_game_context_create()
	if not g_i3k_game_context then
		g_i3k_game_context = i3k_game_context.new();
		--g_i3k_game_context:Create();
	end
end

function i3k_game_context_cleanup()
	if g_i3k_game_context then
		g_i3k_game_context:Cleanup();

		g_i3k_game_context = nil;
	end
end

local SelectDurg =
{
	[1] = function(tbl) -- 加血最多
			local roleLevel = g_i3k_game_context:GetLevel();
			local _cmp = function(d1, d2)
				local v1 = d1.reqlvl <= roleLevel and d1.value or 0
				local v2 = d2.reqlvl <= roleLevel and d2.value or 0
				return v1 > v2
			end
			table.sort(tbl, _cmp);
		end,

	[2] = function(tbl) -- 符合等级要求
		local _cmp = function(d1, d2)
			return d1.reqlvl < d2.reqlvl
		end
		table.sort(tbl, _cmp);
	end,
};

------------------------------------------------------
i3k_game_context = i3k_class("i3k_game_context");
function i3k_game_context:ctor()
	self._roleList = {} --角色列表
	self._chatData = {
		i3k_cyclic_queue.new(g_Battle_Base_Chat_Count),
		i3k_cyclic_queue.new(g_Battle_Base_Chat_Count),
		i3k_cyclic_queue.new(g_Battle_Base_Chat_Count),
		i3k_cyclic_queue.new(g_Battle_Base_Chat_Count),
		{},
		i3k_cyclic_queue.new(g_Battle_Base_Chat_Count),
		i3k_cyclic_queue.new(g_Battle_Base_Chat_Count),
	}
	self._logicMapID = -1;
	self._shareSdkState = false
	self._superOnHook = {valid = false, pos = nil} --高级挂机
	self:Reset();
end

function i3k_game_context:Reset()

	self._refreshDay	= 0

	self._bagData		= { _binDingDiamond = 0,_binDingMoney = 0,_freeDiamond = 0,_freeMoney = 0,_dividend = 0,_dragonCoin = 0,_fame = 0, items ={},equips = {},drugs = {},bagSize = 0,bagIndex = 0,useCellSize=0};
	self._roleTask = {maintask = {id = 1, value = 0, state = 0},weapontask = {},pettask = {},sublinetask = {},lifetask = {},secretareatask = {}, marriageTask = { groupID = 0, id = 0, value = 0, state = 0, leftCount = 0, open = 0}}
	self._roleData		= { curChar = nil, skills = { all = { }, use = { }},uniqueSkills = { all = { }, use = -1 }, buffs = { }, curLocation = { mapID = -1, pos = i3k_vec3(0, 0, 0), rotate = 0 },  newrole = { },mapInstance = 0, blackdata = { }};
	self._carLocation = { mapID = -1, pos = i3k_vec3(0, 0, 0), rotate = 0 }
	self._carMapInstance = 0
	self._notice		= {}
	self._id			= {}-----------
	self._dayCrit		= {}
	self._offlineExpData = {accTimeTotal = 0, accExpTotal = 0, dailyOfflineExp = 0, accDrops = {}, hideCurDay = 0} --离线经验补偿数据
	self._offlineWizardData = {level = 0, exp = 0, funcPoint = 0, dayBuyPointTimes = 0, curWizard = 0, wizardEndTimes = {}} --挂机精灵数据
	self._WizardTripData = {}
	self._runeBagData	= {item = {} ,itemSize = 0};
	self._wearEquips	= {}--穿着的装备信息
	self._WarnEffect	= {};--预警特效缓存
	self._heirloomStrength = {layer = 1, StrengthPro = {} , PropIndex = 0, percent = 0, curStrengthIndex = 0, StrengthProTotal = {}, dayStrengthTime = 0};--深化传家宝数据

	self._fashionData	= {curFashions = {},allFashions = {},isShow = 0, isShowWeapon = 0}
	self._brief 		= 0
	self._energy		 = {_equipEnergy = 0,_stoneEnergy = 0,_runeEnergy = 0}
	self._weaponSoul	= {};
	self._activateStar	= {};
	self._expectStar	= {shape = {}, dish = 0 };
	self._sign			= {isColorSign = 0, isShapeSign = 0}
	-- self._usefcfg		= i3k_usercfg.new();
	-- self._usefcfg:Load();
	self.PetTasktb = {}
	self._SysEmail		= { }
	self._tempEmail		= { }
	self._sectEmail		= {}
	self._tempMailContent = nil
	self._isTempMailFull = false
	self._equipFromEmail = { }

	self._enterMap		= false

	self._xinfa	 = {_zhiye = {},_jianghua = {},_paibie = {}}--心法数据
	self._use_xinfa = {_zhiye = {},_jianghua = {},_paibie = {}}


	self._shenBing = {all = {}, use = nil} -- all={id={"id" = 1,"qlvl" = 1,"slvl" = 1,"exp"= 0}},use = id
	self._weaponAwakeData = {}

	--佣兵数据 all={id={"id" = 1,"level" = 1,"starlvl" = 1,"exp" = 1,"transfer" = 1,"transferTask" = {},"friendTask" = {}},times}
	--			play = {id1,id2,di3}
	self._mercenaries = {all = {},play = {},other = {},dungeon_data = {}, skill = {},allSpirits = {}}
	self._mercenariesSortPowerData = {}  --宠物信息按照战力降序排序列表
	self._petWaken = {};
	self._petWakening = 0;
	self._TripTime = 0;

	self._fight_mercenaries = {all = {},host = {}}

	--self._roleTask = {maintask = {},weapontask = {},pettask = {}} --任务数据

	self._role_fuben = {}--id=count

	self._roomData = {count = 0,memData = {},roomid = 0,mapid = 0,list = {},leaderid = 0,nearbyData = {},createTime = 0, mtype = gRoom_Dungeon, assistData = {}}

	self._revive = {TickLine = 0}

	self._dungeonData = {} -- 副本信息
	self._dungeonSpawnID = 0;
	self._dungeonCfgData = {} -- 缓存副本配置数据
	self:CacheDungeonCfgData()
	self._monsterPosition = nil --奖励怪物刷新后进入副本推送坐标

	self._lifeTaskRecord = 0 -- 重登后副本同步的随从id(身世任务)

	self._rolePhysicalPower = 0

	self._logindays = 0;
	self._createTime = 0
	self._lastLevelUpTime = 0
	--self._useDrugTime = 0
	self._TargetMine = nil;		--矿物信息

	self._needMaterial = {}
	self._batterequip = {false,false,false,false,false,false,false,false}
	self._redPoint = {false, false}

	self._myTeam = {id = 0, leader = 0, members = {}, membersProfile = {}, membersPosition = {}, applicants = {}, membersState = {}}


	self._targetGuid = nil
	self._targetTeamId = 0
	self._isHaveReqForTeam = nil
	self._leaderId = 0
	self._teamInfoInBattle = nil
	self._drugcount = 0;
	self._killcount = 0;
	self._prepower = 0;

	self._haveFreeTime = 0
	self._haveBuyTimes = 0
	self._dynamicActivity  = 0

	self._fuli_red_point = 0 -- 签到和在线奖励
	self._fuli_other = 0 --福利中其他的奖励

	self._ping_task = { id = 1, tasks = { } };

	self._npcId = nil--npc语音
	self._specialCards = nil

	--帮派相关数据
	self._faction_data = {faction_list = {},select_data = {},member_data = {},apply_data = {},thing_data = {},base_data = {},my_data = {},
	worship = {},skill = {},dine = {},dine_list = {},store_data = {},dungeon_over = {},dungeon_data = {},award_record = {},
	damage_data = {},dungeon_award = {},faction_icon = 0,faction_bg = 0,apply_itemID = 0,share_task_punish_time = 0,
	dungeon_state = {},task_get_award = {},
	worship_point = false,	--被膜拜的红点标志
	dine_point	= 0,--宴席的红点标志
	share_task_point = false,--共享任务奖励的红点
	reset_task_point = false,--重置任务红点
	member_count = 0,--帮派成员数量
	faction_id = 0, --帮派id
	faction_is_open_notice = 0,	--是否开启帮派申请推送

	faction_qq = "",		--帮派qq

	faction_day_kick = 0,	--每天踢人次数

	team_dungeon_data = {}, -- 帮派团队本数据
	team_dungeon_mem_lvl = {}, --帮派成员等级信息
	team_dungeon_kill = {}, -- 击杀信息
	team_dungeon_rank = {},--排行信息
	team_dungeon_id = 0,--团队本id
	specialDungeonID = {},--独立本ID映射
	garrsionIsOpen = 0,
	factionZoneSectID = 0,
	factionZoneSectName = "",
	}
	--帮派是否有申请消息
	self._apply_msg = false
	--帮派等级
	self._sectLevel = 0
	--帮派任务
	self._faction_task = {task_bank = {},share_task = {},finish_task = {},current_task = {},refresh_count = 0,finish_count = 0}

	--帮派运镖次数
	self._faction_escort_times = 0
	self._faction_escort_data = {}		--运镖祝福系数

	self._faction_escort_sys = nil  -- 运镖相关数据
	self._faction_escort_path_id = 0 -- 运镖路线
	self._faction_escort_task_id = 0-- 运镖任务id

	self._faction_escort_auto = 0	--是否处在运镖自动寻路的状态 0否1是
	self._faction_escort_refresh_times = 0 -- 镖车刷新次数

	self._faction_escort_rob_state = 0	--劫镖状态1是，0否
	self._faction_escort_acc_times = 0	--运镖次数
	self._faction_rob_times = 0	--劫镖次数
	self._faction_escort_co = nil --携程开启
	self._role_name_invalid_remind = nil --角色名无效字协程

	self._escort_store_refresh_times = 0	--帮派商店刷新次数

	self._escort_rob_money = 0 --	运镖商店的钱

	self._escort_for_help_str = {}	--运镖求援信息
	self._escort_for_help_time = 0	--发送运镖求援信息的时间

	self._escort_is_protect = 0 --是否投保
	self._escort_quick_num = 0 --运镖卡数量

	--帮派夺旗战数据
	self._faction_rob_flag = {
		base_data = {},  --每个地图的旗子信息
		current_map_flag_id = 0;
		current_map_flag_name = ""
	}
	-- 帮派仓库，pve战斗产出
	self._factionWareHouse = { shareEvent = {}, shareApply = {} }



	--自创武功数据
	self._create_kungfu = {skill_icon = nil,have_skill = {},tmp_data = {},pos_count = 2,level_data = {},currentID = 0,create_count = 0,buy_count = 0, gradeId = nil}

	--生产数据数据

	self._clan_data = {
		production = {},--生产数据

	}

	--生产
	self.production = {
		splitSP = 0,	--分解能量
		produceLvl = 0,	--生产等级
		produceExp = 0, --生产经验
		times = 0,	--购买能量次数
		remain_point = 0,  --炼化剩余点数
		recycle_open = 0,  --炼化炉开启标志
		recycled_itemCnt = 0,  --今日炼化炉已炼化物品数量
	}

	--传送消息是否返回的标志
	self._isTransferOK = false

	--缓存怪物，npc，矿对应的地图
	--[[
	self._spawn_npc_res_mapid = {spawn = {},npc = {},res = {}}
	local a,b,c = self:CacheSpawnNpcResourData()
	self._spawn_ncp_res_data = {spawn = a,npc= b,res = c}
	]]

	self._suit_equip_data= {} -- 套装缓存数据
	self._have_suit_data = {data1 = {},data2 = {}} --套装收集数据

	self._fubenRewards = nil

	--时间偏移量(小时)
	self._time_offset = 8


	--自动寻路数据临时缓存
	self._find_path = {mapid = nil,pos = nil,task_type = nil,speed = nil,transferData = nil,line = nil, callFunc = nil}

	--聊天数据
	--self._chatData = {{}, {}, {}, {}, {},{},{}}
	for i = 1 , #self._chatData do
		if i == 5 then
			self._chatData[i] = { }
		else
			self._chatData[i]:clear()
		end
	end
	--self._recentChatData = {}
	self._priviteSendTime = 0
	self._teamSendTime = 0
	self._sectSendTime = 0
	self._worldSendTime = 0
	self._spanServiceSendTime = 0
	self._isHaveNewRecentMsg = false
	self._chatMsg = {{}, {}, {}, {}, {}, {}, {}, {}, {}}


	--竞技场
	self._arenaEnemys = {}
	self._myPower = {}
	self._petTable = {}
	self._isOpenArena = false
	self._arenaMoney = 0
	self._arenaRankBest = 0
	self._challengeTimes = { timeUsed = 0, totalTimes = 0}
	self._attackCoolTime = 0
	self._attackPower = 0
	self.arenaDefensive = {}
	self.isHideArenaDefen = 0
	self._arenaInteralRed = false--竞技场积分红点显示状态
	self._arenaLogsRed = false--竞技场战报红点显示状态
	self._forceWarLotteryNum = 0 --正邪势力战抽奖次数
	self._todayForceWarTimes = 0 --当日正邪势力战参加次数

	--活动
	self._dailyActivityPets = {}
	self._activityLogs = {}
	self._activityKillLog = {}
	self._activityWeekRewardInfo = nil
	--单人副本佣兵设置
	self._normalDungeonPets = {}

	--帮派副本佣兵设置
	self._factionDungeonPets = {}

	--会武佣兵设置
	self._tournament_pet = 0
	--爬塔副本佣兵设置
	self._towerActivityPets  = {}
	self._towerchallengeTimes= { timeUsed = 0, totalTimes = 0,timeBuy = 0}

	---爬塔
	self._towerPrestigeLvl = 1
	self._towerPrestigeValue = 0
	self._towerPrestige = {{id = 1,lvl = 1,fame = 0}}
	self._towerkillcount = 0
	self._towerSweep = {groupID = 0,floor = 0,fbID = 0}

	--秘境
	self._secretareaTb = {id = -1, value = 0, reward = 0}
	self._secretareaMapId = nil
	self.secretareaTaskInfo = {}

	---势力战
	self._forceWarInfo = {join = 0,weekFeats = 0,totalFeats = 0}
	self._forceWarScore = {whiteScore = 0,blackScore = 0}
	self._forceWarSelfScore = 0
	self._forceWarFeat = 0
	self._forceWarWeekFeat = 0
	self._forceWarTeam = {id = 0,  members = {}, membersPosition = {},whitestatues = {},blackstatues={},statues= {},statuesPosition={},whitestatuesPosition={},blackstatuesPosition={}}
	self._statuesData = {}
	self._forceWarStatuesCount ={totalNormalStatue = 0,totalBigStatue = 0}
	self._forceWarDropOutState = false
	self._forceWarisUpdateTime = false

	--坐骑
	self._steedInfo = {}
	self._steedShowInfo = {} --所有的坐骑皮肤数据
	self._steedFightData = {} --皮肤骑战信息
	self._steedSpirit = {} --良驹之灵
	self._useSteed = 0
	self._steedAttrInfo = {}
	self._steedStarAttr = {}
	self._steedPracAttr = {}
	self._allSteedSkill = {} --可装备骑术数据
	self._steedSkillLevel = {} --骑术等级数据



	--藏宝图
	self._hostelNpcInfo = nil
	self._buyedChips = {}
	self._curMapInfo = nil
	self._isHaveMap = false
	self._collection = {}
	self._isFirstTreasure = false
	--势力战组队房间
	self._forceWar_room = {id = 0, leader = 0, grade = 0, members ={}, membersProfile = {}, state = {}, roomType = 0}
	self._isOpenForceWarRoom = true
	--会武
	self._tournament_room = {id = 0, leader = 0, grade = 0, members ={}, membersProfile = {}, state = {}, roomType = 0}
	self._isOpenTournamentRoom = true
	self._tournament_week_honor = 0
	self._tournament_data = {}
	self._tournament_history_honor = 0
	self._tournament_point = 0
	self._tournament_enemies = {}
	self._tournamentWeaponsInfo = {} --会武之神器乱战

	--正邪道场
	self._taoistPets = {}
	self._taoistRank = 0

	--loading图和tips
	self._loading = {use_icon_pool = {},weight_icon_pool = {},use_tips_pool = {},weight_tips_pool = {}}

	--指引信息
	self._leadData = {}
	self._isInLeadMode = false;
	self._leadingID = -1;
	--延迟信息
	self._pingMode = false;
	self._pingdenyticks = 0;
	--龙印相关
	self._longYinData = {}
	--历练相关
	self._experience = {curExpCoin = 0, books = {} ,cheats = {}, grasps = {}, canwuExp = {},canwuLevel = {}, dayTakeTimes = nil, canwuTimes = nil, lastGraspTime = nil, IsCanCanwu = true, dayFortune = nil, members = {}, recordId = nil, memberCount = nil, wudaoId = 1}
	self._qiankunRedRecord = false
	--vip体验相关
	self._vipExperience = {viplevel = 0, endTime = 0}
	--称号相关
	self._roleTitles = {titles = {}, curPermanent = nil, curTimed = {}, equipTitle = {},unlockPlace = 0 }
	--仓库相关
	self._warehouse = {items ={},bagSize = {0,0},expandTimes = {0,0},useCellSize={0,0,0}}
	--强制剧情相关
	self._plot = {curPlot = -1,PlotTick = 0,activedList = {},PlotList = {}}
	-------记录任务动画是否播放过----
	self._flashArray = {}
	local logic = require("logic/i3k_logic");
	g_i3k_logic = logic.i3k_logic.new();

	--封测运营活动
	self._fengceRedCache = {
		[1] = false,
		[2] = false,
		[3] = false,
		[4] = false,
		[5] = false,
		[6] = false
	}
	self._isFirstLogin = false
	self._isShowFence = false
	self._isUpdateFengce = false

	self._joystickMove = false
	self._isRefreshPos = 0
	self._danceUpdateTime = 0
	---任务列表顺序---
	self._TaskListOrder = {}
	self._IsSortedTaskList = false
	self._mainTaskInfo = {task = 1, receiveTime = 0, index = 1}

	self._nosendstopmove = true

	self._unlockSkillStatus = true
	self._keepActivityPos = 0
	if self._rollNoticeCo then
		for i,v in pairs(self._rollNoticeCo) do
			g_i3k_coroutine_mgr:StopCoroutine(self._rollNoticeCo[i])
		end
		self._rollNoticeCo = nil
	end

	--复活次数
	self._reviveTimes = 0
	--cpr复活次数
	self._cprReviveTimes = 0
	--内甲数据
	self._curArmor = 0
	self._allArmorsData = {}
	self._runeLangLvls = {}
	self._hideEffect = 0
	self._castIngots = {} --符语铸锭
	--功能开启
	self.funcPreId = 0
	self._skillItems = { }


	--世界BOSS主界面伤害数据
	self._bossDamageData = {}

	--主UI活动icon是否隐藏
	self._iconIsHide = false

	--任务状态的替换
	self._replaceAction = nil


	--记录结婚步骤
	self.marry = {marriageType = 1,marriageExp = 0,marriageLevel = 0,marriageSkill = {},marriageTime = 0,marriageStep = -1,marriageRole = {},marriageTask = {},marriageAchieve = {}, marriageReward = {}, reserveData = {}, timeIndex = 0, isReserveCue = true, lastTransformTime = 0}
	self.marryStep = -1 --1 尚未结婚 1 去游街<结束之前都不变> ，2 去宴席  0 已婚
	self.marryTime = 0 --记录结婚时间戳
	self.marryEnterPro = 1--记录进入结婚系统的ui入口（不同入口展示不同
	self.divorcTime = 0
	self.marriageId = 0

	--npc兑换同步次数
	self.recordExchangeTimes = {}
	--收藏兑换
	self.collectExchangeInfo = {}
	------

	--运营拍照
	self._isRecoardDebug = false
	self._tmpCarState = false


	--匹配状态
	self._matchState = {matchType = 0, actType = 0, joinTime = 0}

	-------------------
	--神兵升级相关数据
	self.shenbing_upskill = {}

	--神兵天赋相关数据
	self.shenbing_talent = {}

	self.canUseTalentPoint = {}

	--总投入点数
	self.allPoint = {}
	--以购买的天赋点数
	self.haveBuy = {}

	self.shenbingTalentRedPoint = {}

	--神兵特技的熟练度
	self.uniqueSkillData = {}
	--神兵立即变身同步时间
	self._weapCurUseTime = 0
	self._isPromptlyMode = false

	-- self._playLeadLeaveFlag = false
	--神兵兵魂技能经验数
	self._ShenbingBinghunSkillExp = 0
	---------------------
	self._taskMonsterID = {}

	self.oneTimeItems = {}
	self.oneIimeItemsAllCount = {}
	--当前任务类型
	self._currTaskCat = -1
	--玩家是否首冲
	self._isFirstPay = nil
	--打开的是否是首充界面
	self._isFirstPayUI = false
	--名望等级
	self._fameLevel = 0
	self._payRewards = {}

	self._speedUpLvl = 0 --服务器冲关等级
	self._firstCreateRoleFlag = false
	self.marriageRoleId = 0
	self.marriageRoleName = ""
	--试炼补做
	self._retrieveActData = {lastTimes = {}, dayBuyTimes = {}}
	--成就
	self.achPoint = nil
	self._activityPercent = 0--活动副本进度
	self._damageRank = {} --副本伤害排行
	self._miniMapTargetPos = nil -- 在打开了小地图寻路时断线重连，需要清空

	self._stelaData = {index = 0, allFinish = 0, card = 0, receiveTime = 0, stlType = 0, canContinue = 1}
	self._demonholeData = {} -- 伏魔洞相关
	self._demonholeBossState = -1
	self._rightHeartEnterTimes = 0 --正义之心进入次数
	self._annunciate = {prestige = 0, actId = 0, cooltime = 0} --江湖告急
	self._fightNpc = {} --约战
	self._isOpenTask = 1 --任务打开状态
	self._luckyStar = {dayRecvTimes = 0, dayRewardTimes = 0, lastGiftTimes = 0}
	self._isChatOpen = false
	self._isOpenPrivate = false
	self._mtype = 0
	self._diySkills = nil
	self._borrowSkill = nil
	self._onlineVoiceId = nil
	self._loginQueue = {serverName = "", pos = 0}
	self._mulHorseCallbackFunc = nil
	self._woodManDamage = {guid = "", damageCnt = 0, startTime = 0, lastTime = 0, monsterId = 0}
	self._npdDungeonEnterTimes = {}
	self._prayTimes = {} --祈福活动次数
	self._currMapCanGetRewards = 1
	self._towerDefenceLogs = {} -- 守护副本进度信息
	self._towerDefenceTmpInfo = {score = 0, count = 0, curHp = 0, maxHp = 0}
	self._taoistEnemies = {}

	--师徒信息
	self._masterData = {
		masterId = -1, --  师傅ID，-1表示没有
		apptcNum = 0,  -- 徒弟数量，0表示没有
		announce = nil, -- 收徒宣言，只有师傅有
		dismiss_time = -1, --解除师徒关系时间，-1表示没有解除行为
        rebel_time = -1, --叛师时间，-1表示没有叛师行为
		apply_grad_time = -1, --申请出师时间，-1表示没有申请出师的行为
		point = 0, -- 师徒点数量
		reputation = 0, -- 良师值
		memInfo = {}, -- 成员信息，第1个是师傅，后面3个是徒弟。{role（角色信息），online（在线情况），point（师徒点）}
		apply_time = { }, -- 上次申请拜师的时间，不同师傅不一样
	}
	-- 师傅的消息列表 i3k_sbean.MasterApplyEntry
	self._master_msgs = {
		timestamp = -1, -- 最后一次获取消息的时间，-1表示未曾获取
		graduateReqList = { }, -- 出师消息
		betrayList = { }, -- 叛师消息
		applyList = { }, -- 拜师消息
	}
	-- 师徒商店的商品信息
	self._master_shopinfo = nil
	-- 师徒关系摘要信息，仅仅用于判断头像菜单, 协议
	self._master_brief = {
		masterId = 0, -- 师傅id，id~=0表示有师傅
		apprtcList = { }, -- 徒弟列表，id list
		dismiss_time = -1, -- 解除师徒关系时间
		betray_time = -1, -- 上次叛师时间
	}
	self.day_first_login = nil
	self.day_first_login_fuli = nil

	--经验果树信息
	self._expTreeData = nil
	self._userExpTreeData = {
		watchingTimes = 0, --摇一摇次数
		wateringTimes = 0, --浇水次数
		harvestTimes = 0 --丰收次数
	}
	-- 出战佣兵信息
	self._roleFightPets = {}
	--内甲符文红点
	self._underwearRuneRed = {}
	self._jointime = 0
	self._fiveEndAct = 0
	self._roleReturnInfo = {}
	self._roleReturnCode = ""
	self._regressionLogin = 0
	self._driftBottleTimes = 0
	self._epicTask = {} --史诗任务

	self._spring = {
		weekEnterCnt = 0,
		addExpCnt=0,
		enterTime=0,
		serverBuffCnt=0,
		sectBuffCnt=0,
		molestCnt=0,
		soapCnt=0,
		rubCnt=0,
		addExp=0
	} --温泉数据
	self._springBuff = {
		sectBuff = 0,
		serverBuff = 0,
		doubleActBuff = 0,
		fashionBuff = 0
	}--温泉buff

	--buff药数据
	self._buffDrug = {}
	self._otherBuffDrug = {}
	self._fight_line_buff_drug = {}
	--狼神兵数据
	self._wolfData = {
		currVal = 0,
		maxVal = 0,
		coolEndTime = 0
	}
	--表情包数据
	self._emoji = {}
	--帮派龙运数据
	self._sectDestinyData = {}
	self.redEnvelopePoint = 0
	self._partMinPosInStarDish = {}
	self.chatBubbleCurrId = 0
	self._robberDayRefreshTimes = 0 --江洋大盗日刷新次数
	self.backstageState = false
	self.advanceSubLvlTask = {}
	self.openLuckyStarState = 0
	self.sectHonor = 0
	-- 武道会 begin
	self._fightTeamInfo = {} --武道会战队信息
	self._fightTeamEndTime = 0
	self._fightTeamSchedule = {}
	self._fightTeamHonor = 0
	self._fightTeamJoinTimes = 0
	self._fightTeamMapInfo = {}
	self._fightTeamLives = {}
	self._fightTeamGroup = {}
	self._fightTeamGuard = {}
	-- 武道会 end
	self.meridianPotential = {}
	--经脉
	self._meridians = {}
	-- 运镖相关
	self.beRobbedTimes = 0
	self.escortCarCurBlood = nil
	self.escortCarMaxBlood = nil
	self.petBooks = {}
	--圣诞贺卡相关
	self._christmasCardInfo = {}
	--武道币
	self._budoCount = 0
	--帮派弹幕
	self._shootMsgData = {}
	--龙穴任务
	self._dragonHoleTask = {}
	self._getDragonHoleTask = {}
	self._dragonTaskScore = 0
	--奇遇
	self._adventure = {adventureValue = 0, trigID = 0, trigEndTime = 0, task = {id = 0, state = 0, value = 0, rewards = {}, taskIDs = {}}, finished = {}}

	self._isNeedShowXinghunRedPoint = true
	self.newYearRedGetNpcid = {}
	--参悟技能
	self._graspSkill = {}
	self.buyCanwu = 0
	self.limitTimeTask = {taskID = 0, receiveTime = 0}
	--打地鼠信息
	self._diglettInfo = {}
	--八卦
	self._bagua = {}
	self._baguaEnery = 0
	--帮派个人本自取次数
	self._takeRewardCnt = 0
	--商路拓展
	self._factionBusinessTask = {id = 0 , value = 0, receiveTime = 0}
	self._factionBusinessHonorLvl = 0

	self._dragonCoinOpenFlag = false

	--跨服PVe 幽冥密令
	self._battleKey = 0
	--奇遇货币
	self._qiyun = 0
	--奇遇拼图是否完成
	self._pusslePic = false
	--百万答题选择
	self._selectOption = {}
	--每日挂签
	self._divinationInfo = {}
	--roll点时间戳
	self._rollSendTime = 0
	self._fiveTrans = nil -- 五转之路
	self._setUseXinfaData = nil
	--飞鸽传书消息
	self.pigeonPost = {}
	--单人闯关ID
	self._singleChallengeId = 1
	self._singleChallengenpcGroupId = {}
	self._singleChallengePets = {}
	self._fuling = nil -- 魂玉附灵
	--魂玉洗炼红点
	self._isShowLongYinPracticeRedPoint = true

	--体力道具使用
	self._vitItems = nil
	--心情日记人气值
	self._popularity = 0
	self._powerRep = nil -- 势力声望
	-- 家园数据
	self._homeLandData = {} -- 自己的家园数据
	self._homeLandMapData = {} -- 当前地图的家园数据 -- 如果在自己家园则主要用上面的数据
	self._homeLandRoleId = 0 -- 当前副本家园的主人id
	self._homeLandCurEquip = {} -- 当前装备的家园装备
	self._homeLandFacePos = {} -- 进入钓鱼区域朝向点
	self._homeLandPlayers = {} -- 家园所有玩家（一般只有主人才有这个数据
	self._homeLandFishStatus = false -- 钓鱼状态
	--选中entity的名字，用于社交动作气泡
	self._selectName = nil
	--记录棋局任务完成次数
	self.chessTaskFinish = 0
	--图钉vip传送
	self._thumbtackVip = false
	--图钉非vip传送
	self._thumbtackNomal = false
	--图钉数组
	self._thumbtack = {}
	--温泉周入场次数
	self._springWeeklyTimes = 0
	--传世大酬宾红点
	self._legendmakeFlag = 1
	self._hideWeapon = nil  -- 暗器
	--帮派互助
	self._factionDonate = {}
	--巨灵攻城
	self._spiritBoss = {bossId = 0, rewards = {}, nextBuffTime = 0, bossBlood = 0, curBossIndex = 0}
	self._spiritBossCurrency = 0
	-- 外传副本
	self._biography = nil
	self._biographyRewards = {}
	-- 城战
	self._defenceWar = {score = 0, killMonsters = {}, totalMonsters = {}, reviveTime = 0}
	self._dragonCrystal = nil -- 龙晶
	self._delayInfo = {}
	self._citySign = {}
	self._cityBid = {}
	self._defenceWarPveCity = nil -- pve本帮所占城池ID
	self._curDefenceWarCity = nil -- 本帮所占城池ID
	self._defenceWarKings = {} --占领城池信息

	-- 伙伴系统
	self._partnerBindTime = 0 --大于零绑定

	--家园放生善缘值
	self._homelandReleaseValue = 0
	--家园房屋
	self._houseInfo = nil
	self._isInPlace = false
	self._wallAreaId = nil
	self._curHouseBag = nil
	self._houseSkin = {}
	--家园生产红点
	self._houseProduceRed = true
	--家园是否是总览状态
	self._overViewStatus = false
	self._homelandFishCount = 0
	self._homelandFishExpCount = 0
	--热血情缘数据
	self._selfMooddiaryPersonInfo = {}
	self._crossFriendRed = false
	--宠物驯养数据
	self._petDomestication = {petEquipSpirit = 0}
	self._petEquipGroup = 0
	self._petEquipPet = 0

	--宠物试炼
	self._curPetDungeonData = {petID = 0, info = nil}
	--是否打开随时副本完成对话
	self._openMainFinish = nil
	self._loadingEffect = nil
	self._dialogueFinish = {}
	--决战荒漠数据
	self._desertBattleBag = {}
	self._desertBattleEquip = {}
	self._desertBetterEquips = {}
	self._desertBattleMapIndo = {}
	self._battleDesertCircleInfo = nil
	self._desertViewEntity = nil
	self._desertBattleTotalScore = nil
	self._desertBattleResInfo = nil

	--每周限时宝箱数据
	self._weekLimitData = {}
	self._isShowGetBoxTips = false
	self._weekBoxTempData = nil
	--结拜相关
	self._isSworn = false
	--武决数据
	self._wujue = nil
    --幻形数据
	self._metamorphosisInfo = {}
	self._mercenariesUse = 0
	--天魔迷宫
	self._mazeData = nil
	self._mazetransferTime = i3k_db_maze_battle.transferLimitTime
	--修炼之门场景buff 标记
	self._practiceGateMapbuffFlag = nil
	--场景布置矿信息
	self._mineTaskInfo = nil
	self._selectNpcId = nil
	self._festivalTask = {}
	self._quickStore = false
	self._LingQianQiFuUseCount = nil
	--骑战装备
	self._steedWearEquips = nil
	self._steedAllSuits = nil
	self._steedForge = nil
	self._forgeEnergy = 0
	--神兵蚩尤破天斧特技
	self._weaponSpecialCollTime = 0
	--守护灵兽
	self._petGuardInfo = nil
	--角色飞升
	self._roleFlying = {}
	self._footEffects = {}
	self._mainSoaring = {}
	--公主出嫁
	self._princessMarryInfo = nil
	self._princessMarrySignUpTimeInfo = {}
	self._jubileeActivity = {} --周年庆活动
	self._jubileeActivityStep2BoxState = false --周年庆活动阶段二宝箱红点
	self._jubuleeActivityStep2BoxInfo = {} --周年庆活动阶段二宝箱信息
	self:resetDanceExp()
	self._curFootEffect = 0
	self._curWeaponType = 0
	self._waitEquip = nil
	self._BackRoleDoubleDrop = 1
	self._magicMachineInfo = {} --公主出嫁

	self._sworn = nil
	
	--self.onNewMission = utils.i3k_callback.new(true)	--新增任务回调 #1任务对象
	--self.onMissionDestroy = utils.i3k_callback.new(true) --删除任务回调 #1任务对象
	--self.onEnemyKilled = utils.i3k_callback.new(true)	--敌人击杀回调 #1敌人id
	--self.onFinishRealtimeMap = utils.i3k_callback.new(true)	--即时副本完成回调 #1即使副本地图id

	--家园保卫战
	self._monsterCount = 0
	--坐骑自动洗脸
	self._autoDo = {count = 0, time = 0, autoType = 0, callBack = nil}
	self._fiveElementsInfo = {}
	--义结金兰
	self._selfJinlanValue = 0 --自己贡献的金兰值
	self._jinlanCardID = 0
	self._totalJinlanValue = 0
	self._mapTime = 0	--组队通关次数
	self._achiPoint = 0	--成就点
	self._achiPointRewardArchived = {}	--成就点奖励领取进度
	self._taskArchived = {}	--已领取金兰任务
	self._completedTask = {}
	self._workingTask = {}
	self._activityRewardArchived = {}	--已领取活跃点奖励
	self._activityPoint	= 0		--活跃点
	self._swornSuperAurenaTimes = 0
	self.push = false
	self.taskPush = false
	self._feisheng = {}
	--飞升2期
	self._feisheng._level = -1				--飞升等级
	self._feisheng._cfg = nil				--当前飞升等级对应配置
	self._feisheng._upgradeCfg = nil		--飞升升级任务配置
	self._feisheng._maxRingMission = 0		--最大飞升环任务数量
	self._feisheng._exp = 0					--飞升经验
	self._feisheng._isFeisheng = false		--是否飞升状态
	self._feisheng._dailyFinished = 0			--当前完成飞升任务数量
	self._feisheng._upgraing = false			--是否正在做飞升升级任务
	--江湖侠探
	self._spyData = nil
	self._spyMember = {}
	self._spyFinish = false
	--黄金海岸
	self._globalWorldTask = {}				--赏金任务
	self.timeingActivityPrayInfo = nil--定期活动祈愿相关信息
	--战区卡片
	self._warZoneCardInfo = { card = { inUse = {}, bag = {}}, card2DayUseCount = {}	,card2DaySectDrawCount = {}, daySectDonateCount = 0	}
	self._warZoneCardLog = {}
	self._warZoneFactionCardPool = {}
	self._cardPacketInfo = nil
	--阵法石相关
	self._arrayStone = {holeCnt = i3k_db_array_stone_common.holeCount, exp = 0, energy = 0, conversion = false, freeTimes = 0, equips = {}, locks = {}, bag = {}}
	--拳师姿态
	self._combatTypeCoolEndTime = 0			--拳师姿态CD未来可使用时间
	self._combatTypeCurCD = 0 				--拳师CD
	--万寿阁
	self._longevityPavilionInfo = {signUpInfo = {dayEnterTimes = 0}, battleInfo = {task = {}}}
	--国庆加油活动
	self._nationalCheerTimes = 0
	--邀请列表
	self._inviteList = {}
	--鬼岛驭灵
	self._catchSpiritPoint = {}
	self._catchSpiritPointCD = {}
	self._catchSpiritMonster = {id = 0, guid = "", count = 0}
	self._catchSpiritBoss = {}
	self._selectMonsterId = nil
	self._selectMonsterGuid = nil
	--元灵碎片
	self._spiritsInfo = nil
	self._spiritsInExchangeData = { costId = 0, targetId = 0, costCount = i3k_db_catch_spirit_base.spiritFragment.exchangeConsume}
	self._spiritsInExchangeFinish = 0   --记录当前是否交换成功
	self._marriageTaskCount = 4
	--密探风云
	self._spyStoryBattle = {}
	self._spyStoryTasks = {}
	self._spyStoryScore = 0
	self._spyStoryCampType = 1
	--拳师姿态
	self._combatTypeCoolEndTime = 0			--拳师姿态CD未来可使用时间
	self._combatTypeCurCD = 0 				--拳师CD
	self._combatType = 0
	--外传职业
	self._biographyCareer = nil
	self._biographyCareerLog = nil
	self._curBiographyCareer = nil
	self._biographySkills = {}
	self._biographyState = nil
	self._role_seal_awaken = {}
	--背包自动售卖提示
	self._bagAutoSaleEquipTips = nil
	self._competitionBattleInfo = nil
	self._springRollInfo = {}
	--新节日任务
	self._newFestival = {}
	self._newFestival.tasks = {}
	self._newFestivalTasks = {}	
	self.initNpcNotClick = true

	self._festivalGifts =  {} --节日活动初始化
	self._festivalBelss = {}
end -- end of reset function
--记录当前是否交换成功
function i3k_game_context:SetSpiritsIsExchangeComplete(state)
	self._spiritsInExchangeFinish = state
end
function i3k_game_context:GetSpiritsIsExchangeComplete()
	return self._spiritsInExchangeFinish
end
function i3k_game_context:SetSpiritsData(info)
	self._spiritsInfo = info
end
--设置交换时间
function i3k_game_context:SetSpritesDataSwapaLastTime(time)
	self._spiritsInfo.swapLastTime = time
end
--增加交换次数
function i3k_game_context:AddSpiritsSwapTime()
	self._spiritsInfo.daySwapTimes = self._spiritsInfo.daySwapTimes + 1
end
function i3k_game_context:GetExchangeIsInCD()
	local curTime = i3k_game_get_time()
	local cdTime = self._spiritsInfo.swapLastTime + i3k_db_catch_spirit_base.spiritFragment.exchangeLast - curTime  --总时长-当前时间
	return cdTime
end
--得到元灵碎片内容
function i3k_game_context:GetSpiritsData()
	return self._spiritsInfo
end
--清空元灵碎片背包数据
function i3k_game_context:ResetSpiritsBag()
	self._spiritsInfo.spirits = {}
end
function i3k_game_context:GetSpiritsFragmentNum()
	local sum = 0 
	for k,v in pairs(self._spiritsInfo.spirits) do
		sum = sum + v
	end
	return sum
end
--更新元灵碎片炼化次数
function i3k_game_context:UpdateLianHuaNum(num)
	self._spiritsInfo.artificeTimes = self._spiritsInfo.artificeTimes + num < 0 and 0 or self._spiritsInfo.artificeTimes + num
end
--元灵碎片交换成功数据更新
function i3k_game_context:UpdateSpiritsFragmentExchangeComplete(data)
	local costId = data and data.costId or self._spiritsInfo.costId
	local targetId = data and data.targetId or self._spiritsInfo.targetId
	self._spiritsInfo.spirits[costId] = self._spiritsInfo.spirits[costId] - i3k_db_catch_spirit_base.spiritFragment.exchangeConsume
	self._spiritsInfo.spirits[targetId] = self._spiritsInfo.spirits[targetId] and self._spiritsInfo.spirits[targetId] + 1 or 1
	self._spiritsInfo.targetId = 0
	self._spiritsInfo.costId = 0
end
function i3k_game_context:SetSpiritsInExchangeData(costId, targetId)
	self._spiritsInfo.targetId = targetId
	self._spiritsInfo.costId = costId
end
function i3k_game_context:GetSpiritsBagData()
	local normalFragmentList = {} --普通碎片列表
	local rareFragmentList = {}	  --稀有碎片列表
	local rareNum = 0
	for id,count in pairs(self._spiritsInfo.spirits) do
		local tableData = { id = id, count = count}
		if i3k_db_catch_spirit_fragment[id].fragmentType == g_SPIRIT_FRAGMENT_RARE then
			rareNum = rareNum + count
			if count > 0 then
				table.insert(rareFragmentList, tableData)
			end
		else 
			if count > 0 then
				table.insert(normalFragmentList, tableData)
			end
		end
	end
	local sortTable = {}
	for k,v in pairs(self._spiritsInfo.spirits) do
		local tableData = { id = k, count = v}
		if v > 0 then
			table.insert(sortTable, tableData)
		end
	end
	local function sortFList(a,b)
		if a.count ~= b.count then
			return a.count > b.count
		end
		return a.id < b.id
	end
	table.sort(sortTable,sortFList)
	table.sort(normalFragmentList,sortFList)
	table.sort(rareFragmentList,sortFList)
	return sortTable, rareNum, self._spiritsInfo.spirits, normalFragmentList, rareFragmentList --排序碎片数组，稀有碎片数量，碎片哈希表，普通列表，稀有列表
end
--交换成功修改数据
function i3k_game_context:SetSpiritsDataOnExchangeComplete(data)
	self:AddSpiritsSwapTime()							--增加交换次数
	self:SetSpiritsIsExchangeComplete(g_SPIRIT_STATE_COMPLETE)				--设置交换成功状态
	self:SetSpritesDataSwapaLastTime(0)
	self:UpdateSpiritsFragmentExchangeComplete(data)		--修改碎片数量，清空交换中碎片数据
end
function i3k_game_context:SetSpiritsDataInExchanging(data)
	g_i3k_game_context:SetSpritesDataSwapaLastTime(i3k_game_get_time())
	g_i3k_game_context:SetSpiritsInExchangeData(data.costId, data.targetId)
end
--拿到键值对的最大值和最大值键
function i3k_game_context:table_maxID_maxNum(tableList)
	local maxID = nil
	local maxNum = nil
	for k,v in pairs(tableList) do
		if maxNum == nil or maxNum > v then
			maxID = k
			maxNum = v
		end
	end
	return maxID, maxNum
end
function i3k_game_context:GetSpiritsFragmentBagData()
	local fragmentBag = {}
	for _,id in ipairs(self._spiritsInfo.spirits) do
		fData = i3k_db_catch_spirit_fragment[id]
		if fData then
			fragmentBag[fData.fragmentType] = fragmentBag[fData.fragmentType] and fragmentBag[fData.fragmentType] or { _children = {}}
			table.insert(fragmentBag[fData.fragmentType]._children, id)
		end
	end
	for _,v in ipairs(fragmentBag) do
		table.sort(v,function(a,b)
			return a < b
		end)
	end
	return fragmentBag
end
function i3k_game_context:SetMapLoadCallBack(callBack)
	self._mapLoadcallBack = callBack
end
function i3k_game_context:ReloadMapLoadCallBack()
	local callFunc = self._mapLoadcallBack
	if callFunc then
		callFunc()
		self._mapLoadcallBack = nil
	end
end
function i3k_game_context:GetSuperOnHookValid()
	return self._superOnHook.valid
end

function i3k_game_context:SetSuperOnHookValid(valid)
	self._superOnHook.valid = valid
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SetBlood, "initSuperOnHook")
	if not valid then
		g_i3k_ui_mgr:CloseUI(eUIID_SuperOnHook)
	end
end

function i3k_game_context:GetSuperOnHookPos()
	return self._superOnHook.pos
end

function i3k_game_context:SetSuperOnHookPos(pos)
	self._superOnHook.pos = pos

end
-------------------------------
function i3k_game_context:ResetLogicMap()
	self._logicMapID = -1;
end

function i3k_game_context:GetUniqueId()
	return g_i3k_get_unique_id(i3k_get_login_unique_username(), self:GetRoleId())
end

-------------对角色列表的操作--------------------------
function i3k_game_context:AddRoleList(ch)
	if ch then
		table.insert(self._roleList,ch)
	end
end

function i3k_game_context:GetRoleList()
	return self._roleList
end

function i3k_game_context:ClearRoleList()
	self._roleList = {}
end

-------------------loading的数据操作----------------------------------
function i3k_game_context:GetLoadingFromMapID()
	local jubileeIcon = g_i3k_db.i3k_db_get_jubilee_loadingIcon_text()
	if jubileeIcon then
		return 0, jubileeIcon
	end
	local mapID = self:GetWorldMapID()
	if i3k_db_dungeon_base[mapID] then
		local loadingIcons = i3k_db_dungeon_base[mapID].loadingIcons
		if #loadingIcons > 0 then
			local rnd = i3k_engine_get_rnd_u(1, #loadingIcons)
			if loadingIcons[rnd] ~= 0 then
				return 0, loadingIcons[rnd]
			end
		end
	end
	return false, false
end

function i3k_game_context:GetLoadingIcon()
	local icon, bgIcon = self:GetLoadingFromMapID()
	if bgIcon then
		return icon, bgIcon
	end

	if #self._loading.use_icon_pool == 0 then
		self:InitLoadingData()
	end
	local tmp_weight = {}
	local icon_times = i3k_db_loading_first.icon_times.value
	--拿出去的图片次数减一
	for k,v in ipairs(self._loading.weight_icon_pool) do
		v.count = v.count - 1
		if v.count <=0 then
			table.insert(tmp_weight,v)
		end
	end
	--删除被选出去的现在可以使用的图片
	for k,v in ipairs(tmp_weight) do
		for a,b in ipairs(self._loading.weight_icon_pool) do
			if v.id == b.id then
				table.remove(self._loading.weight_icon_pool,a)
			end
		end
	end
	--把可以使用的图片放入到备选列表
	for k,v in pairs(tmp_weight) do
		local t = i3k_db_loading_icon[v.id]
		table.insert(self._loading.use_icon_pool,t)
	end
	--排序
	table.sort(self._loading.use_icon_pool,function(a,b)
		return a.id < b.id
	end)
	--算权重
	local MAX_WEIGHT = 0
	for k,v in ipairs(self._loading.use_icon_pool) do
		MAX_WEIGHT = MAX_WEIGHT + v.weight
	end
	--随机
	local select_weight = math.random(1,MAX_WEIGHT)
	local tmp_weight = 0

	local rdom_icon_id = 0
	local rdom_id = 0
	--取图
	for k,v in ipairs(self._loading.use_icon_pool) do
		tmp_weight = tmp_weight + v.weight
		if tmp_weight >= select_weight then
			rdom_icon_id = v.iconId
			rdom_id = v.id
			table.remove(self._loading.use_icon_pool,k)
			break
		end
	end
	--放入大牢
	local t = {count = icon_times, id = rdom_id}
	table.insert(self._loading.weight_icon_pool,t)

	local big_icon = 0
	for k,v in pairs(i3k_db_loading_icon) do
		if v.iconId == rdom_icon_id then
			big_icon = v.bigIconId
			break
		end
	end
	return rdom_icon_id,big_icon

end

function i3k_game_context:InitLoadingData()
	self:ReloadLoadingTips()

	for k,v in ipairs(i3k_db_loading_icon) do
		table.insert(self._loading.use_icon_pool,v)
	end
end

function i3k_game_context:ReloadLoadingTips()
	local roleLvl = self._roleData.curChar and self:GetLevel() or 1 -- 默认为1
	for _, e in ipairs(i3k_db_loading_tips) do
		if roleLvl >= e.needLvl then
			table.insert(self._loading.use_tips_pool, e)
		end
	end
end

function i3k_game_context:GetLoadingTips()
	local _, txt = g_i3k_db.i3k_db_get_jubilee_loadingIcon_text()
	if txt then
		return txt
	end
	if #self._loading.use_tips_pool == 0 then
		self:InitLoadingData()
	end
	local tmp_weight = {}
	local tips_times = i3k_db_loading_first.tips_times.value
	--拿出去的图片次数减一
	for k,v in ipairs(self._loading.weight_tips_pool) do
		v.count = v.count - 1
		if v.count <=0 then
			table.insert(tmp_weight,v)
		end
	end
	--删除被选出去的现在可以使用的图片
	for k,v in ipairs(tmp_weight) do
		for a,b in ipairs(self._loading.weight_tips_pool) do
			if v.id == b.id then
				table.remove(self._loading.weight_tips_pool,a)
			end
		end
	end
	--把可以使用的图片放入到备选列表
	for k,v in pairs(tmp_weight) do
		local t = i3k_db_loading_tips[v.id]
		table.insert(self._loading.use_tips_pool, t)
	end
	local MAX_WEIGHT = #self._loading.use_tips_pool
	--随机
	local select_weight = i3k_engine_get_rnd_u(1, MAX_WEIGHT)
	local id = self._loading.use_tips_pool[select_weight].id
	local tips = self._loading.use_tips_pool[select_weight].tips
	table.remove(self._loading.use_tips_pool,select_weight)
	--放入大牢
	local t = {count = tips_times, id = id}
	table.insert(self._loading.weight_tips_pool,t)

	return tips

end

-------------------------end-------------------------------------------



function i3k_game_context:setApplyMsg(state)
	self._apply_msg = state
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateApplyPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB,"updateFactionRed", self:getFactionRedPoint())
end

function i3k_game_context:getApplyMsg()
	return self._apply_msg
end

-- 帮派入口红点(两个申请信息)
function i3k_game_context:getFactionRedPoint()
	local apply = self:getApplyMsg()
	local fentang = self:getFighGroupApplysStatus()
	return apply and fentang
end
--获取服务器时间偏移
function i3k_game_context:getOffsetTime()
	return self._time_offset
end

--返回寻径数据
function i3k_game_context:GetFindPathData()
	return self._find_path
end

function i3k_game_context:SetReviveTickLine(TickLine)
	self._revive.TickLine = TickLine
end

function i3k_game_context:GetReviveTickLine()
	return self._revive.TickLine;
end
--点击头像显示最新的玩家信息
--附近玩家信息
--[[function i3k_game_context:SetAroundRoleData(datas)
	self._aroundRoleData  = datas
	local tb = self._onSelectedroleData
	if tb then
		for k,v in pairs(datas) do
			if v.id == self._onSelectedroleData.roleId then
				local roleId = v.id
				local headIcon = v.headIcon
				local name = v.name
				local level = v.level
				local bwType = v.bwType
				self:OnSelectRoleHandler(roleId, headIcon, name, level, tb.curhp, tb.maxhp, tb.buffs, bwType)
				return ;
			end
		end
		self:OnSelectRoleHandler(tb.roleId, tb.headIcon, tb.name, tb.level, tb.curhp, tb.maxhp, tb.buffs, tb.bwType)
	end
end

function i3k_game_context:setOnSelectData(roleId,headIcon,name,level,curhp,maxhp,buffs,bwType)
	local tab = {}
	tab.roleId = roleId
	tab.headIcon = headIcon
	tab.name = name
	tab.level = level
	tab.curhp = curhp
	tab.maxhp = maxhp
	tab.buffs = buffs
	if bwType == -1 then
		bwType = 0
	end
	tab.bwType = (bwType or 0)
	self._onSelectedroleData = tab
end

function i3k_game_context:getOnSelectData()
	return self._onSelectedroleData
end--]]

----暂存被点击玩家的信息
function i3k_game_context:SetSelectedRoleData(player)
	self._selectedRoleData = player
end

function i3k_game_context:GetSelectedRoleData()
	return self._selectedRoleData
end
-----------------------------------------------hero handler------------------------------------------------
function i3k_game_context:OnHpChangedHandler(curhp, maxhp, damage)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleHp", curhp, maxhp)
	--如果伤害
end

function i3k_game_context:OnSpChangedHandler(cursp, maxsp)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleSp", cursp, maxsp)
end

function i3k_game_context:OnBuffChangedHandler(buffs)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleBuff", buffs)
end

function i3k_game_context:OnAboveBuffChangedHandler(aboveBuff)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleAboveBuff", aboveBuff)
end

function i3k_game_context:OnWeaponEnergyChangedHandler(curvalue, maxvalue)
	self:setWeaponRisingStatus(curvalue / maxvalue * 100)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleWeaponEnergy", curvalue, maxvalue)
end

function i3k_game_context:OnSoulEnergyChangedHandler(curvalue, maxvalue)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateSoulEnergy", curvalue, maxvalue)
end

function i3k_game_context:OnInternalInjuryDamageValueChangedHandler(curValue, maxValue)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateNeiShangValue", curValue, maxValue)
end

function i3k_game_context:OnArmorValueChangedHandler(curValue, maxValue)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateNeiJiaValue", curValue, maxValue)
end

function i3k_game_context:OnBossArmorValueChangedHandler(monsterId, curValue, maxValue)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBossHp, "updateNeiJiaValue", monsterId,curValue, maxValue)
end


function i3k_game_context:OnArmorFreezeChangedHandler(freeze)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateNeijiaFreeze", freeze)
end

function i3k_game_context:OnRoleLifeChangedHandler()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onRoleLifeChanged")
end

function i3k_game_context:OnSelectRoleHandler(roleId, headIcon, name, level, curhp, maxhp, buffs, bwType, isMulHorse,sectID, gender, headBorder, buffDrugs,type, curInternalInjuryDamage, maxInternalInjuryDamage)
	if g_i3k_ui_mgr:GetUI(eUIID_GuideUI) or g_i3k_ui_mgr:GetUI(eUIID_SnapShot) then
		return
	end
	local player = {
		type = type,
		name = name,
		id = roleId,
		level = level,
		headIcon = headIcon,
		bwType = bwType,
		isMulHorse = isMulHorse,
		sectID =sectID,
		gender = gender,
		headBorder = headBorder,
		}
	self:SetSelectedRoleData(player)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onSelectRole", roleId, headIcon, name, level, curhp, maxhp, buffs, bwType, isMulHorse,sectID, gender, headBorder, buffDrugs, curInternalInjuryDamage, maxInternalInjuryDamage)
	self:SetSelectName(name)
end

function i3k_game_context:OnSelectMonsterHandler(monsterId, curhp, maxhp, buffs, curArmor, maxArmor, showName, guid)
	if g_i3k_ui_mgr:GetUI(eUIID_GuideUI) or g_i3k_ui_mgr:GetUI(eUIID_SnapShot) then
		return
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnSelectMonster", monsterId, curhp, maxhp, buffs, curArmor, maxArmor, showName)
	self:SetSelectName(showName)
	self:SetSelectMonsterId(monsterId, guid)
end

function i3k_game_context:OnStuntAnimationChangeHandler(animation,enable)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onChangeStuntAnimation", animation, enable)
end

function i3k_game_context:OnSelectNPCHandler(npcId, name, curhp, maxhp,targetPos, instanceID)
	if g_i3k_ui_mgr:GetUI(eUIID_GuideUI) or g_i3k_ui_mgr:GetUI(eUIID_SnapShot) then
		return
	end
	local playerPos = self:GetPlayerPos()
	--local targetPos = g_i3k_db.i3k_db_get_npc_pos(npcId)
	local pos = i3k_vec3_dist(playerPos, targetPos)
	local safeDistance = i3k_db_common.npc_distance.distance/100
	if pos >= safeDistance then
		return
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnSelectNPC", npcId, name, curhp, maxhp)

	local treasureMapInfo = self:getTreasureMapInfo()
	local targetId = 0
	local index = 0
	local spotCfg
	if treasureMapInfo then
		local mapCfg = i3k_db_treasure[treasureMapInfo.mapID]
		local spotTable = mapCfg.clueSpotList
		for i,v in ipairs(treasureMapInfo.points) do
			if v==0 then
				index = i
				spotCfg = i3k_db_spot_list[spotTable[i]]
				break
			end
		end
		if spotCfg and spotCfg.spotType==g_SCRECT_BOX then
			targetId = spotCfg.arg1
		end
	end

	if targetId~=0 and targetId==npcId then
		g_i3k_ui_mgr:OpenUI(eUIID_TreasureScrectBox)
		local needItems = {
			[1] = {id = spotCfg.arg2, count = spotCfg.arg3},
			[2] = {id = spotCfg.arg4, count = spotCfg.arg5},
		}
		g_i3k_ui_mgr:RefreshUI(eUIID_TreasureScrectBox, index, needItems)
	else
		self:playNPCSound(npcId)--手动点击npc
		self:AutoOpenTaskPanel(npcId, instanceID)
	end
	--通知服务器对话的npc
	i3k_sbean.notify_adventure_npc_chat(npcId)
	self:SetSelectName(name)
	self:SetSelectNpcId(npcId)
end

function i3k_game_context:SetSelectName(name)
	self._selectName = name
end

function i3k_game_context:GetSelectName()
	return self._selectName
end

function i3k_game_context:playNPCSound(npcId)
	local soundId = i3k_db_npc[npcId].soundID
	local cur_level = self:GetLevel()--当前等级
	g_i3k_mmengine:StopSFX(-1,false)
	if soundId ~= 0 then
		if self._npcId ~= npcId then

			if i3k_db_npc[npcId].specialSoundType >= 1 then--特殊音效
				local specialSoundID = i3k_db_npc[npcId].specialSoundID
				if cur_level >= 2 and specialSoundID > 0 then
					--self._npcId = npcId
					i3k_game_play_sound(i3k_db_sound[specialSoundID].path, 1)
				else
					self._doubleSoundId = npcId
					i3k_game_play_sound(i3k_db_sound[soundId].path, 1)
				end

			else
				i3k_game_play_sound(i3k_db_sound[soundId].path, 1)
			end
			self._npcId = npcId
		else
		--[[
			if self._doubleSoundId == npcId then
				self._doubleSoundId = 0
				i3k_game_play_sound(i3k_db_sound[soundId].path,3,1)
				i3k_log("--doubleSoundId------",npcId,self._doubleSoundId,cur_level,soundId)----
			end]]
			--i3k_log("--doubleSoundId------",self._doubleSoundId)----
		end
	end

end
function i3k_game_context:OnSelectMercenaryHandler(mercenaryId, level, name, curhp, maxhp, buffs, awaken)
	if g_i3k_ui_mgr:GetUI(eUIID_GuideUI) or g_i3k_ui_mgr:GetUI(eUIID_SnapShot) then
		return
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnSelectMercenary", mercenaryId, level, name, curhp, maxhp, buffs, awaken)
end

function i3k_game_context:OnSelectPetHandler(petId, curhp, maxhp, buffs)
	if g_i3k_ui_mgr:GetUI(eUIID_GuideUI) or g_i3k_ui_mgr:GetUI(eUIID_SnapShot) then
		return
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"OnSelectPet", petId, curhp, maxhp, buffs)
end

function i3k_game_context:OnSelectSummonedHandler(summonedId, curhp, maxhp, buffs)
	if g_i3k_ui_mgr:GetUI(eUIID_GuideUI) or g_i3k_ui_mgr:GetUI(eUIID_SnapShot) then
		return
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"OnSelectSummoned", summonedId, curhp, maxhp, buffs)
end

function i3k_game_context:OnSelectEscortCarHandler(Id, level, name, curhp, maxhp, buffs, isCar)
	if g_i3k_ui_mgr:GetUI(eUIID_GuideUI) or g_i3k_ui_mgr:GetUI(eUIID_SnapShot) then
		return
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnSelectEscortCar", Id, level, name, curhp, maxhp, buffs, isCar)
end

function i3k_game_context:OnCancelSelectHandler()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updateTargetNone")
	self:SetSelectName()
	self:SetSelectMonsterId()
end

function i3k_game_context:OnTargetInternalInjuryChangedHandler(curInternalInjuryDamage, maxInternalInjuryDamage)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnTargetInternalInjuryChanged", curInternalInjuryDamage, maxInternalInjuryDamage)
end

function i3k_game_context:OnTargetHpChangedHandler(curhp, maxhp)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnTargetHpChanged", curhp, maxhp)
end

function i3k_game_context:OnTargetBuffChangedHandler(buffs)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnTargetBuffChanged", buffs)
end

function i3k_game_context:OnFightMercenaryHpChangedHandler(mercenarId, curhp, maxhp)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnFightMercenaryHpChanged", mercenarId, curhp, maxhp)
end

function i3k_game_context:OnFightMercenarySpChangedHandler(mercenarId, cursp,maxsp)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnFightMercenarySpChanged", mercenarId, cursp, maxsp)
end

function i3k_game_context:OnGetRefreshTargetHandler()
	local logic = i3k_game_get_logic();
	local selEntity = logic._selectEntity;
	if selEntity then
		if selEntity:GetEntityType() == eET_Player or selEntity:GetEntityType() == eET_Monster or selEntity:GetEntityType() == eET_Mercenary or selEntity:GetEntityType() == eET_Pet or selEntity:GetEntityType() == eET_Summoned then
			selEntity:OnSelected(true)
		end
	end
end

function i3k_game_context:OnPlayerPositionChangedHandler(PosE)
	if i3k_game_get_time() - self._isRefreshPos > 1 and not g_i3k_ui_mgr:GetUI(eUIID_SnapShot) then
		self._isRefreshPos = i3k_game_get_time()
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateCoordInfo", PosE)
		g_i3k_ui_mgr:CloseUI(eUIID_NpcDialogue)
		g_i3k_ui_mgr:CloseUI(eUIID_FieldSublineTask)
		if not self:isOnSprog() then
			g_i3k_ui_mgr:CloseUI(eUIID_Dialogue1)
		end
		g_i3k_ui_mgr:CloseUI(eUIID_Dialogue3)
		g_i3k_ui_mgr:CloseUI(eUIID_Dialogue4)
		if g_i3k_ui_mgr:GetUI(eUIID_SwornDate) or g_i3k_ui_mgr:GetUI(eUIID_SetSwornPrefix) then
			i3k_sbean.sworn_step()
		end
	end
	self:updateTransferBtnShow()
	-- self:onCheckHeroDancePos(PosE)
end

function i3k_game_context:OnSelectSkillChangedHandler(slotId, skillId)
	--i3k_log("skillId = "..skillId)
end

function i3k_game_context:OnSkillCastedHandler(skillId, coolTime)
	--i3k_log("cooltime = "..coolTime)
	local role_type = g_i3k_game_context:GetRoleType()
	local fly_skill1 = i3k_db_generals[role_type].dodgeSkill
	local fiy_skill2 = i3k_db_skills[fly_skill1].sequences[1]
	if skillId == fly_skill1 or skillId == fiy_skill2 then
		return
	end
	self:ClearFindWayStatus()

end

function i3k_game_context:OnSuperModeChangedHandler(superMode)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnSuperModeChanged", superMode)
	if not superMode then
		--self:changeWeaponShowType()
		local hero = i3k_game_get_player_hero()
		if hero then
			hero:changeWeaponShowType()
		end
	end
	self:UpdateQilingTransProp()
	if g_i3k_db.i3k_db_get_weapon_has_clone(g_i3k_game_context:GetSelectWeapon()) then--如果这个神兵有召唤分身的特技 则调用hero里的创建分身的方法
		local hero = i3k_game_get_player_hero()
		hero:OnWeaponWithCloneEffectChangedHandler(superMode)
	end
end

function i3k_game_context:OnMissionModeChangedHandler(id, missionMode)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnMissionModeChanged", id, missionMode)
end

--ids是一个set，里面是{ xx=true, yy=true}
function i3k_game_context:SetListenedCustomRoles(ids)
	local world = i3k_game_get_world()
	if world then
		world:SetCustomRoles(ids);
	end
end

function i3k_game_context:OnListenedCustomRoleHpChangedHandler(roleId, curhp, maxhp)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnListenedCustomRoleHpChanged", roleId, curhp, maxhp)
end

function i3k_game_context:GetRoleMissionModeSkills()
	local hero = i3k_game_get_player_hero()
	if hero and hero._missionMode and hero._missionMode.skills then
		return hero._missionMode.skills
	end
end

function i3k_game_context:IsInMissionMode()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero._missionMode.valid , hero._missionMode.type
	end
	return false;
end

function i3k_game_context:GetMissionEndTime()
	local hero = i3k_game_get_player_hero() or i3k_game_get_player_real_hero()
	if hero then
		return hero:GetMissionEndTime()
	end
	return 0;
end


function i3k_game_context:OnRideChangedHandler(isride)
	if not g_i3k_game_context:GetIsSpringWorld() then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnRideChanged")
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SpringAct, "onDoubleStateChange")
	end
end

function i3k_game_context:OnMulRideChangedHandler()
	if not g_i3k_game_context:GetIsSpringWorld() then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateKickBtn")
	end
end

function i3k_game_context:OnGuideDirChangedHandler(dir)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnGuideDirChanged", dir)
end


function i3k_game_context:OnGuideVisibleChangedHandler(visible)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnGuideVisibleChanged", visible)
end

-- 藏宝图，挖矿指引
function i3k_game_context:OnTreasureGuideChangedHandler(dir, distance)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTreasure, "updateSceneGuideDir", dir, distance)
end

function i3k_game_context:OnMineStatusChangedHandler(status)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "OnMineStatusChanged", status)
end

function i3k_game_context:GetPetLifeSkills()
	local hero = i3k_game_get_player_hero()
	local skills = {}
	if hero and hero._inPetLife and hero._bindSkills then
		for _, v in pairs(hero._bindSkills) do
			table.insert(skills, v)
		end
	end
	return skills
end

function i3k_game_context:GetSprogSkills()
	local hero = i3k_game_get_player_hero()
	if hero and hero._inSprog and hero._bindSkills then
		return hero._bindSkills
	end
end

----------------------------------------------角色登录初始化--------------------------------------------
function i3k_game_context:SetCurrentCharacter(ch)
	self._roleData.curChar = ch
end

function i3k_game_context:GetLeaveWrongPosTime()
	return self._roleData.curChar._nextLeaveWrongPosTime
end

function i3k_game_context:SetCurrencyInfo(diamondF, diamondR, coinF, coinR, dividend, dragonCoin, fame)
	self._bagData._freeDiamond = diamondF
	self._bagData._binDingdiamond = diamondR
	self._bagData._freeMoney = coinF
	self._bagData._binDingmoney = coinR
	self._bagData._dividend = dividend
	self._bagData._dragonCoin = dragonCoin
	self._bagData._fame = fame
end

function i3k_game_context:SetEnergyInfo(equipEnergy, gemEnergy, bookInspiration)
	self._energy._equipEnergy = equipEnergy
	self._energy._stoneEnergy = gemEnergy
	self._energy._runeEnergy = bookInspiration
end

function i3k_game_context:SetBagInfo(size, index, bagItems)
	self._bagData.bagSize = size
	self._bagData.bagIndex = index
	self._bagData.items = bagItems
	self._bagData.useCellSize = 0
	for k, v in pairs(bagItems) do
		v.sortId = g_i3k_db.i3k_db_get_bag_item_order(v.id)
		local cfgtype = g_i3k_db.i3k_db_get_common_item_type(v.id)
		if cfgtype == g_COMMON_ITEM_TYPE_ITEM then
			local cfg = g_i3k_db.i3k_db_get_common_item_cfg(v.id)
			if cfg.type == UseItemHp then
				local drug = {id = v.id,reqlvl = cfg.levelReq,value = cfg.args1,count = v.count}
				table.insert(self._bagData.drugs,drug)
			end
		end
		local stack_max = g_i3k_db.i3k_db_get_bag_item_stack_max(v.id)
		self._bagData.useCellSize = self._bagData.useCellSize + g_i3k_get_use_bag_cell_size(v.count, stack_max)
	end
	g_i3k_game_context:refreshDrugs(true)
	--	self._bagData.equips = bagItems.equips
	--	self._bagData.items = bagItems.items
	--	self._bagData.useCellSize = bagItems.useCellSize
end

function i3k_game_context:refreshDrugs(recount)
	if #self._bagData.drugs > 0 then
		local exp = SelectDurg[1];
		exp(self._bagData.drugs);
		-- local exp = SelectDurg[2];
		-- exp(self._bagData.drugs);
		if recount then
			g_i3k_game_context:refreshDrugCount()
		end
	else
		self._drugcount = 0;
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateDrugIcon")
	end
end

function i3k_game_context:AddDrugCheck(id,count)
	local cfgtype = g_i3k_db.i3k_db_get_common_item_type(id)
	if cfgtype == g_COMMON_ITEM_TYPE_ITEM then
		local cfg = g_i3k_db.i3k_db_get_common_item_cfg(id)
		if cfg and cfg.type == UseItemHp then
			for k,v in pairs(self._bagData.drugs) do
				if v.id == id then
					v.count = v.count + count
					self._drugcount = self._drugcount + count;
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateDrugIcon")
					return ;
				end
			end
			local drug = {id = id,reqlvl = cfg.levelReq,value = cfg.args1,count = count}
			table.insert(self._bagData.drugs,drug)
			g_i3k_game_context:refreshDrugs(true)
		end
	end
	return ;
end

function i3k_game_context:DesDrugCheck(id,count)
	local cfgtype = g_i3k_db.i3k_db_get_common_item_type(id)
	if cfgtype == g_COMMON_ITEM_TYPE_ITEM then
		local cfg = g_i3k_db.i3k_db_get_common_item_cfg(id)
		if cfg.type == UseItemHp then
			for k,v in pairs(self._bagData.drugs) do
				if v.id == id then
					v.count = v.count - count

					if v.count == 0 then
						table.remove(self._bagData.drugs,k);
						g_i3k_game_context:refreshDrugs(true)
						return;
					end
					self._drugcount = self._drugcount - count;
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateDrugIcon")
				end
			end

		end
	end
	return ;
end

function i3k_game_context:refreshDrugCount()
	self._drugcount = 0
	local herolevel = g_i3k_game_context:GetLevel()
	for k,v in pairs(self._bagData.drugs) do
		if v.reqlvl <= herolevel then
			self._drugcount = self._drugcount + v.count
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateDrugIcon")
end

-----notice
function i3k_game_context:SetNotices(notices)

	for i, e in pairs(notices) do
		self._notice[e] = true
		self:SetDailyTaskRedPoint(e)
		if e==g_NOTICE_TYPE_CAN_REWARD_ARENA then
			self:setArenaInteralRed(true)
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Main, "updateNotices")
	g_i3k_ui_mgr:RefreshUI(eUIID_XB)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "updateRedPoint")
	self:OnFuLiShowStateChangedHandler(true,self:testNotice(g_NOTICE_TEST_BENEFIT))
	if self._isFirstPay then
		self:OnFirstPayShowStateChangedHandler(true,self:GetNoticeState(g_NOTICE_TYPE_CAN_REWARD_FIRST_PAYGIFT))
	elseif self._isFirstPay == false then
		self:OnPayShowStateChangedHandler(true,self:GetNoticeState(g_NOTICE_TYPE_CAN_PAY_ACTIVITY))
	end
	self:OnFightNpcStateChangedHandler(self:TestFightNpcState())
	self:OnFiveEndActiveStateChangedHandler(self:fiveEndActivityState())
end

function i3k_game_context:ClearNotice(noticeType)
	self._notice[noticeType] = nil
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Main, "updateNotices")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "updateRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateOfflineRed")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateYinyuanRed")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateFriendRed")
	g_i3k_game_context:OnFiveEndActiveStateChangedHandler(self:fiveEndActivityState())
end

function i3k_game_context:testNotice(noticeType)
	return self._notice[noticeType] ~= nil
end
----日常红点
function i3k_game_context:SetDailyTaskRedPoint(id)
	if self._notice[id] then
		self._id[id] = true
	end
end

function i3k_game_context:getDailyTaskRedPoint()
	return self._id
end

--挑战任务及名望
function i3k_game_context:ClearDailyTaskNotice(noticeType)
	self._id[noticeType] = nil
	if not self._id[G_NOTICE_TYPE_CAN_REWARD_CHALLENGE_TASK] then
		self._notice[G_NOTICE_TYPE_CAN_REWARD_CHALLENGE_TASK] = nil
	end
	if not self._id[g_NOTICE_TYPE_CAN_FAME] then
		self._notice[g_NOTICE_TYPE_CAN_FAME] = nil
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Main, "updateNotices")
end

function i3k_game_context:setTaskAchPiont(achPoint)
	self.achPoint = achPoint
end

function i3k_game_context:getTaskAchPiont()
	return self.achPoint or nil
end

--单独日常任务
function i3k_game_context:ClearDailyUINotice(noticeType)
	self._id[noticeType] = nil
	if not self._id[g_NOTICE_TYPE_CAN_REWARD_DAILY_TASK] then
		self._notice[g_NOTICE_TYPE_CAN_REWARD_DAILY_TASK] = nil
	end
end

----运营活动红点
function i3k_game_context:SetDynamicActivityRedPoint(id)

	if self._notice[id] then
		return true
	else
		return false
	end

end

-- 有奖调研 红点
function i3k_game_context:setRewardTestRedPoint(bValue)
	self._notice[g_NOTICE_TYPE_CAN_REWARD_TEST] = bValue
end

function i3k_game_context:SetDynamicActivityRedPointInfo(activity)

	self._dynamicActivity = activity
end
function i3k_game_context:GetDynamicActivityRedPointInfo()

	return self._dynamicActivity
end

function i3k_game_context:SetFuliRedPointCount(value)
	self._fuli_red_point = value
end

function i3k_game_context:GetFuliRedPointCount()
	return self._fuli_red_point
end

function i3k_game_context:AddFuliRedPointCount(count)
	self._fuli_red_point = self._fuli_red_point + count
end

function i3k_game_context:RemoveFuliRedPointCount(count)
	self._fuli_red_point = self._fuli_red_point - count

	if self._fuli_red_point <= 0 then
		self._fuli_red_point = 0
	end
	if self._fuli_red_point == 0 and self:GetFuliOther() == 0 then
		self:ClearNotice(g_NOTICE_TEST_BENEFIT)
		self:OnFuLiShowStateChangedHandler(true,self:testNotice(g_NOTICE_TEST_BENEFIT))
	end
end

function i3k_game_context:SetFuliOther(value)
	self._fuli_other = value
	if self._fuli_other == 0 and self:GetFuliRedPointCount() == 0 then
		self:ClearNotice(g_NOTICE_TEST_BENEFIT)
		self:OnFuLiShowStateChangedHandler(true,self:testNotice(g_NOTICE_TEST_BENEFIT))
	end
end

function i3k_game_context:GetFuliOther()
	return self._fuli_other
end

function i3k_game_context:GetNoticeState(id)
	return self._notice[id]
end

-- 师徒主界面入口红点
function i3k_game_context:getMasterRedPoint()
	return self:testNotice(g_NOTICE_TYPE_MASTER)
	-- return self:getMasterMessageRedPoint()
end
function i3k_game_context:clearMasterRedPoint()
	self:ClearNotice(g_NOTICE_TYPE_MASTER)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateMasterNotice")
end

----在线领奖红点
function i3k_game_context:SetOnlineGiftRedPoint(id)

	if self._notice[id] then
		return true
	else
		return false
	end
end
function i3k_game_context:SetIsExistOnlineGift(OnlineGift)

	online_gift = OnlineGift
end
function i3k_game_context:GetIsExistOnlineGift()

	return online_gift
end
------------------------
-- 充值相关红点
function i3k_game_context:clearPayActivityRedPoint()
	self:ClearNotice(g_NOTICE_TYPE_CAN_PAY_ACTIVITY)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshAllItem")
end


-----------------------------------------------
--记录服务器返回科举答题时间
function i3k_game_context:SetkeJuStartTime(time)

	keju_startTime = time
end
function i3k_game_context:GetkeJuStartTime()

	return keju_startTime
end
--------------------------------------------------
--签到红点
function i3k_game_context:SetSignRedPoint(id)
	if self._notice[id] then
		return true
	else
		return false
	end
end

function i3k_game_context:SetSignInData(times)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Fuli, "updateDesc", times)
	if self._notice[g_NOTICE_TYPE_CAN_REWARD_SING_IN] then
		self._notice[g_NOTICE_TYPE_CAN_REWARD_SING_IN] = nil
	end
end
----幸运转盘红点
function i3k_game_context:SetLuckyWheelRedPoint(id)

	if self._notice[id] then
		return true
	else
		return false
	end

end
---------------------------------------------滚动广播--------------------------------------------
local broadcast_msgs = {}
local broadcast_timerTask = {}
function i3k_game_context:SyncRollNotice(ids)
	local msgs = {}
	local notexistids = {}
	for k = 1, #ids do
		local id = ids[k]
		local msg = broadcast_msgs[id]
		if msg then
			msgs[id] = msg
		else
			msgs[id] = {}
			table.insert(notexistids, id)--之前不存在的id,新id
		end
	end
	for k,v in pairs(broadcast_msgs) do
		if not msgs[k] then
			self:removeBroadcastTask(k)
		end
	end
	broadcast_msgs = msgs	---将移除后剩下的id再重新存在broadcast_msgs里
	self:GetBroadcasts(notexistids)---有新id时发异步响应协议

end

function i3k_game_context:GetBroadcasts(ids)
	for k =1, #ids do
		i3k_sbean.query_roll_notice(ids[k])
	end
end

function i3k_game_context:removeBroadcastTask(id)
	if self._rollNoticeCo and self._rollNoticeCo[id] then
		g_i3k_coroutine_mgr:StopCoroutine(self._rollNoticeCo[id])
		self._rollNoticeCo[id] = nil
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RollNotice, "delRollMsg", id)
end

function i3k_game_context:onSyncBroadcast(broadcast)
	local id = broadcast.id
	local time = i3k_game_get_time()

	if not self._rollNoticeCo then
		self._rollNoticeCo = {}
	end

	if not self._rollNoticeCo[id] then
		self._rollNoticeCo[id] = g_i3k_coroutine_mgr:StartCoroutine(function ()
			while true do
				if not g_i3k_ui_mgr:GetUI(eUIID_Loading) then
					local notice = i3k_clone(broadcast)
					local timeNow = i3k_game_get_time()
					if timeNow>=broadcast.sendTime+broadcast.lifeTime then
						g_i3k_coroutine_mgr:StopCoroutine(self._rollNoticeCo[id])
					else
						if not self:getIsShowFirstLoginUI() then
							g_i3k_ui_mgr:OpenUI(eUIID_RollNotice)
							g_i3k_ui_mgr:RefreshUI(eUIID_RollNotice, notice)
						end
					end
					if broadcast.freq>0 then
						g_i3k_coroutine_mgr.WaitForSeconds(broadcast.freq)
					else
						return false
					end
				else
					g_i3k_coroutine_mgr.WaitForSeconds(5)
				end
			end
		end)
	end
end
---------------------------------------------角色基本属性相关--------------------------------------------
function i3k_game_context:GetRoleId()
	return self._roleData.curChar._id
end

function i3k_game_context:GetLevel()
	return self._roleData.curChar and self._roleData.curChar._level or nil
end

function i3k_game_context:isRoleSelf(roleId)
	return self:GetRoleId() == (roleId or 0)
end

function i3k_game_context:GetRoleName()
	return self._roleData.curChar._name
end

--修改角色名字 （在改名的协议返回时修改）
function i3k_game_context:SetRoleName(name)
	self._roleData.curChar._name = name
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Friends,"updateRoleName",name)
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:ChangeHeroName(name)
	end
end

function i3k_game_context:GetRoleGender()
	return self._roleData.curChar._gender
end

function i3k_game_context:IsFemaleRole()
	return g_i3k_game_context:GetRoleGender() == eGENDER_FEMALE
end


function i3k_game_context:GetRoleType()
	return self._roleData.curChar._ctype
end

function i3k_game_context:setRoleHeadIconId(iconId)
	self._roleData.curChar._headIcon = iconId
end

function i3k_game_context:GetRoleHeadIconId()
	return self._roleData.curChar._headIcon
end

function i3k_game_context:setRoleHeadFrameId(frameId)
	self._roleData.curChar._frameIcon = frameId
end

function i3k_game_context:GetRoleHeadFrameId()
	return self._roleData.curChar._frameIcon
end

function i3k_game_context:setloginHeadIcon(gender,hair,face)
	for i,v in ipairs(i3k_db_base_head) do
		if v.gender == gender then
			if v.face == face then
				if v.hair == hair then
					self._roleHeadIcon = v.iconID
				end
			end
		end
	end
end

function i3k_game_context:GetloginHeadIcon()
	return self._roleHeadIcon
end

function i3k_game_context:GetTransformLvl()
	return self._roleData.curChar._transformlvl
end

function i3k_game_context:GetTransformBWtype()
	return self._roleData.curChar._bwtype
end

function i3k_game_context:GetLevelExp()
	return self._roleData.curChar._level, self._roleData.curChar._exp
end

function i3k_game_context:GetCredit()
	return self._roleData.curChar._credit
end

function i3k_game_context:AddCredit(count, reason)
	self._roleData.curChar._credit = self._roleData.curChar._credit + count
	DCItem.get(g_BASE_ITEM_CREDIT, "角色商誉值", count, reason)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Auction, "refresCreditLabel")
end

function i3k_game_context:UseCredit(count, reason)
	self._roleData.curChar._credit = self._roleData.curChar._credit - count
	DCItem.consume(g_BASE_ITEM_CREDIT, "角色商誉值", count, reason)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Auction, "refresCreditLabel")
end

function i3k_game_context:SetLevel(lvl, exp)
	local oriLvl = self._roleData.curChar._level

	self._roleData.curChar._level = lvl
	self._roleData.curChar._exp = exp

	if lvl > oriLvl then
		DCAccount.setLevel(lvl)
		--DCAccount.removeTag("level", "")
		--DCAccount.addTag("level", "level"..lvl)
		DCEvent.onEvent("level", {level = lvl})
		self:SetRoleLevelUpTime(g_i3k_get_GMTtime(i3k_game_get_time()))
		i3k_game_role_info_changed(gRoelChangeInfo)
		self:PlotCheck(eLTFuncRoleLevel)
        local hero = i3k_game_get_player_hero()
		hero.setLevelCoroutine = g_i3k_coroutine_mgr:StartCoroutine(function ()
			--这个WaitForNextFrame非常有必要，要确保StartCoroutine的返回值赋给了hero.setLevelCoroutine
			self:setUpLevelMartialSoulData(lvl) --必须要在刷新属性之前设置武魂阶初始等级
			self:setUpLevelSteedSpiritData(lvl)
			i3k_coroutine_mgr.WaitForNextFrame()
			local hero = i3k_game_get_player_hero()
			hero:UpdateProperty(ePropID_lvl, 1, lvl - oriLvl, true, false)
			i3k_coroutine_mgr.WaitForNextFrame()
			if hero._ride.cache.valid and hero._ride.cache.valid ~= nil then
				if hero._ride._rideSpeed and hero._ride._rideSpeed ~= nil then
					hero:UpdateProperty(ePropID_speed, 1, hero._ride._rideSpeed, true, false, true);
				end
			end
			if hero._missionMode and hero._missionMode.valid and (hero._missionMode.type == 3 or hero._missionMode.type == 4) then
				local speed = hero._missionMode.speedodds
				hero:UpdateProperty(ePropID_speed, 1, speed, true, false, true);
			end

			local addVitValue = g_i3k_db.i3k_db_get_levelup_add_vit(oriLvl, lvl)
			self:AddVit(addVitValue, true)
			self:TestStartOrStopVitRecover(self:GetVitMax())
			i3k_coroutine_mgr.WaitForNextFrame()

			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updateRoleSkills", self:GetRoleSelectSkills(), self:GetRoleType())
			-- g_i3k_ui_mgr:InvokeUIFunction(eUIID_LuckyWheel,"updateLuckyWheelMainInfo", lvl)---改发同步协议  ???
			g_i3k_game_context:ReCheckAllBatterEquip()
			g_i3k_game_context:refreshDrugs(true)

			self:UpdateMainTaskValue(g_TASK_REACH_LEVEL,lvl)
			self:UpdateWeaponTaskValue(g_TASK_REACH_LEVEL,lvl)

			--温泉处理
			if g_i3k_game_context:GetWorldMapID() == i3k_db_spring.common.mapId then
				hero:UpdateProperty(ePropID_speed, 1, i3k_db_spring.common.speed, true, false, true);
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updateSpringUI")
			end

			if self:GetIsInHomeLandZone() then
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateHomeLandUI")
			end

			if self:GetIsInHomeLandHouse() then
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateHomeLandHouse")
			end

			if lvl >= i3k_db_experience_args.args.openLevel then
				hero:UpdateLiLianProps()
			end
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateBtnState")
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateWearEquipsData", self:GetRoleDetail())

			--刷新七日活动
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_KeepActivity, "refreshUIData")
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "updateKeepUI")


			--判断封测的等级条件
			local openDay = i3k_game_get_server_open_day()
			local nowDay = g_i3k_get_day(i3k_game_get_time())
			local dayIndex = nowDay - openDay + 1
			if dayIndex<=#i3k_db_fengce.juxian then
				for i,v in ipairs(i3k_db_fengce.fengcePackage) do
					if v.level==lvl  then
						self:setFengceLevelRedCache(true)
						break
					end
				end
			end
			---判断支线任务组解锁
			self:checkSubLineTaskIsLock(1)
			--更新支线任务
			g_i3k_game_context:UpdateSubLineTaskValue(g_TASK_REACH_LEVEL,lvl)
			for groupId, grplvl in pairs(self.advanceSubLvlTask) do
				if lvl >= grplvl then
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateSubLineTaskTag",groupId)
					self.advanceSubLvlTask[groupId] = nil
				end
			end
			--更新赏金任务
			if lvl >= i3k_db_war_zone_map_cfg.needLvl then
				self:AddTaskToDataList(TASK_CATEGORY_GLOBALWORLD, i3k_game_get_time())
				g_i3k_ui_mgr:RefreshUI(eUIID_BattleTask)
			end

			--弹出按钮跳转升级特惠活动
			if i3k_game_get_map_type() == g_FIELD and self:GetWorldMapID() ~= i3k_db_spring.common.mapId then
				self:OpenUpgradepurchaseTip(lvl)
			end

			--判断藏宝图的引导条件
			if oriLvl<i3k_db_treasure_base.other.needLvl and lvl>=i3k_db_treasure_base.other.needLvl then
				self:setIsFirstTreasure(true)
			end
			self:checkEpicTaskOpen(true)
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateIsShowBtn")
			self:OnTestStrengthenSelf()
			self:ReloadLoadingTips()
			g_i3k_coroutine_mgr.WaitForNextFrame()
			i3k_game_get_player_hero():PlayLevelup()
			g_i3k_coroutine_mgr.WaitForSeconds(0.2)
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updateRoleLevel", lvl)
			if hero then
				hero.setLevelCoroutine = nil;
			end

			--判断等级开启第三代UI(含内伤)
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"openInhurtUI", lvl >= i3k_db_wujue.inhurtLevel)
		end)
	end
end

--设置vip等级
function i3k_game_context:SetVipLevel(vipLvl, isReal)
    local change = self._roleData.curChar._viplvl ~= vipLvl
    self._roleData.curChar._viplvl = vipLvl
	if self._roleData.curChar._viplvl > self:GetVipExperienceLevel() then
		self:SetVipExperienceLevel(0)
	end
	if isReal and isReal == true then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleVipLevel", vipLvl)
	end
    if change then
		--DCAccount.removeTag("vip", "")
		--DCAccount.addTag("vip", "vip"..vipLvl)
		DCEvent.onEvent("vip",  {vip = vipLvl})
		local nowVipLvl
		if vipLvl >= self:GetVipLevel() then
			nowVipLvl = vipLvl
		else
			nowVipLvl = self:GetVipLevel()
		end
		i3k_game_role_info_changed(gRoelChangeInfo)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_Main, "updateRoleVipExperienceLevel")
        g_i3k_ui_mgr:InvokeUIFunction(eUIID_FBLB, "updateDungeonData")
        g_i3k_ui_mgr:InvokeUIFunction(eUIID_Activity, "updateDailyActivity")
        g_i3k_ui_mgr:InvokeUIFunction(eUIID_Auction, "loadSaleLeftData")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleVipLevel", nowVipLvl)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ChannelPay, "setShowVipTime")
    end
end

function i3k_game_context:GetVipLevel()
	if self:GetVipExperienceLevel() ~= 0 then
		if self:GetVipExperienceLevel() > self._roleData.curChar._viplvl then
			return self:GetVipExperienceLevel()
		end
	end
	return (self._roleData.curChar and self._roleData.curChar._viplvl) and self._roleData.curChar._viplvl or 0
end

function i3k_game_context:GetPracticalVipLevel()  -- 获取真实的vip等级
	return self._roleData.curChar._viplvl or 0
end

--设置月卡结束时间
function i3k_game_context:SetMonthlyCardEndTime(endtime)
	self._roleData.curChar.monthlyCardEndTime = endtime
end

function i3k_game_context:GetMonthlyCardEndTime()
	local monthCard = self._roleData.curChar.monthlyCardEndTime
	return monthCard and monthCard.monthlyCardEndTime or 0
end

function i3k_game_context:GetMonthlyCardIsAward()
	return self._roleData.curChar.monthlyCardEndTime.reward
end

function i3k_game_context:SetMonthlyCardIsAward(count)
	self._roleData.curChar.monthlyCardEndTime.reward = count
end

function i3k_game_context:GetRoleProfile()

	local hpNow = hero:GetPropertyValue(ePropID_hp)
	local maxHP = hero:GetPropertyValue(ePropID_maxHP)

	local roleProfile = i3k_sbean.RoleProfile.new()
	roleProfile.overview.id = self._roleData.curChar._id
	roleProfile.overview.name = self._roleData.curChar._name
	roleProfile.overview.gender = self._roleData.curChar._gender
	roleProfile.overview.headIcon = self._roleData.curChar._headIcon
	roleProfile.overview.type = self._roleData.curChar._ctype
	roleProfile.overview.tLvl = self._roleData.curChar._transformlvl
	roleProfile.overview.bwType = self._roleData.curChar._bwtype
	roleProfile.overview.level = self._roleData.curChar._level
	roleProfile.overview.fightPower = self:GetRolePower()
	roleProfile.curHp = hpNow
	roleProfile.maxHp = maxHP
	return roleProfile
end

function i3k_game_context:GetRoleDetail()
	return self:GetRoleTypeName(), self._roleData.curChar._level, self:GetRolePower(), self._wearEquips
end

function i3k_game_context:GetRolePower()
	local hero = i3k_game_get_player_hero()
	if hero then
		return math.modf(hero:Appraise())
	end
	return 0
end

function i3k_game_context:GetRoleLongyinPower()
	local hero = i3k_game_get_player_hero()
	return math.modf(hero:AppraiseLongyinKong())

end

function i3k_game_context:GetRoleTypeName()
	local role_type = self:GetRoleType()
	local transform = self:GetTransformLvl()
	local bwType = self:GetTransformBWtype()
	if transform == 0 then
		return i3k_db_generals[role_type].name
	else
		return i3k_db_zhuanzhi[role_type][transform][bwType].name
	end
end

--[[function i3k_game_context:GetRoleProfile()
local hero = i3k_game_get_player_hero()
local hpNow = hero:GetPropertyValue(ePropID_hp)
local hpMax = hero:GetPropertyValue(ePropID_maxHP)
local profile =
{
id = self._roleData.curChar._id,
name = self._roleData.curChar._name,
gender = self._roleData.curChar._gender,
headIcon = self._roleData.curChar._headIcon,
ctype = self._roleData.curChar._ctype,
tLvl = self._roleData.curChar._transformlvl,
bwType = self._roleData.curChar._bwtype,
level = self._roleData.curChar._level,
curHp = hpNow,
maxHp = maxHp,
}
return profile
end]]

function i3k_game_context:GetBaseRoleNameHeadIcon()
	if i3k_get_is_tournament_chu_han() then
		return  g_i3k_game_context:SetChuHanFightIcon()
	else
		return g_i3k_game_context:GetRoleNameHeadIcon()
	end
end
function i3k_game_context:GetRoleNameHeadIcon()
	return self._roleData.curChar._name, self._roleData.curChar._headIcon
end


function i3k_game_context:GetRoleHp()
	local hero = i3k_game_get_player_hero()
	if hero then
		local hpNow = hero:GetPropertyValue(ePropID_hp)
		local hpMax = hero:GetPropertyValue(ePropID_maxHP)
		return hpNow, hpMax
	end

	return 0, 0
end

function i3k_game_context:GetRoleSp()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetFightSp(), g_i3k_db.i3k_db_get_max_fight_sp(self._roleData.curChar._ctype)
	end

	return 0, 0
end

function i3k_game_context:GetSoulEnergy()
	local hero = i3k_game_get_player_hero()
	local isOpen = self:GetShenBingUniqueSkillData(self:GetSelectWeapon())
	if isOpen and isOpen == 1 then
		local info = i3k_db_shen_bing_unique_skill[self:GetSelectWeapon()]
		for _,v in pairs(info) do
			if v.uniqueSkillType == 17 then--魂语
				if hero then
					return hero:GetSoulEnergy();
				end
			end
		end
	end
	return 0, 0
end

function i3k_game_context:GetRoleWeaponErergy()
	local hero = i3k_game_get_player_hero()
	if hero then
		local spNow = hero:GetPropertyValue(ePropID_sp)
		local spMax = hero:GetPropertyValue(ePropID_maxSP)
		if hero._superMode.valid then
			spNow = hero._weapon.ticks - hero._superMode.ticks
			spMax = hero._weapon.ticks
		end
		return spNow,spMax
	end

	return 0, 0
end

function i3k_game_context:GetRoleWeaponBlessEnergy()
	local hero = i3k_game_get_player_hero()
	if hero then
	local now = hero:GetRoleWeaponBlessEnergy()
	local args = self:GetWeaponBlessArgs()
	local max = args and args.trigger_need_level or 0
	return now,max
	else
		return 0,0
	end
end

function i3k_game_context:GetPKMode()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetPVPStatus()
	end
	return 0;
end

function i3k_game_context:ChangPKMode()
	local hero = i3k_game_get_player_hero()
	local world = i3k_game_get_world();
	if hero and world then
		world:UpdatePKState(hero);
	end
end

function i3k_game_context:GetRolebuff()
	local hero = i3k_game_get_player_hero()
	local buffs = {}
	if hero then
		for k,v in pairs(hero._buffs) do
			if not v._cfg.isShowAbove then
				if v._endTime - v._timeLine > 0 then
					buffs[v._id] = v._endTime - v._timeLine
				elseif v._endTime == -1 then
					buffs[v._id] = -1
				end
			end
		end
	end
	return buffs
end

function i3k_game_context:GetRoleAboveBuff()
	local hero = i3k_game_get_player_hero()
	local buffs = {}
	for k,v in pairs(hero._buffs) do
		if v._cfg.isShowAbove then
			table.insert(buffs, v._cfg)
		end
	end
	return buffs
end

function i3k_game_context:SetPKMode(mode)
	local hero = i3k_game_get_player_hero()
	hero:SetPVPStatus(mode)
end

function i3k_game_context:GetPKPunish()
	local hero = i3k_game_get_player_hero()
	local punish = 0
	if hero._PVPColor >= 0 then
		punish = i3k_db_pkpunish[hero._PVPColor+1].punish2
	end
	return punish
end

function i3k_game_context:SetAutoFight(auto, pos)
	if not auto then
		g_i3k_game_context:SetSuperOnHookValid(false)
	end
	i3k_game_get_player_hero():SetAutoFight(auto, pos)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updateRoleAutoFight", auto , self:IsAutoFightShow())
end


function i3k_game_context:ToggleAutoFight()
	local hero = i3k_game_get_player_hero()
	local auto = not hero:IsAutoFight()
	hero:SetAutoFight(auto)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updateRoleAutoFight", auto , self:IsAutoFightShow())
end

function i3k_game_context:IsAutoFight()
	local hero = i3k_game_get_player_hero()
	if hero then
		return i3k_game_get_player_hero():IsAutoFight()
	end
	return false;
end

function i3k_game_context:IsAutoFightShow()
	local is_mission,mission_mode = self:IsInMissionMode();
	local missionMode =
	{
		[g_TASK_TRANSFORM_STATE_ANIMAL] = true,
		[g_TASK_TRANSFORM_STATE_CARRY] = true,
		[g_TASK_TRANSFORM_STATE_CAR] = true,
		[g_TASK_TRANSFORM_STATE_METAMORPHOSIS] = true,
	}

	if is_mission and missionMode[mission_mode] then
		return false;
	end

	if self:GetIsGuard() or self:GetIsInHomeLandZone() then
		return false
	end
	return true;
end

function i3k_game_context:UnRide(func, isForce)
	local hero = i3k_game_get_player_hero()
	if self:IsMulMemberState() then
		i3k_sbean.mulhorse_leave_requst(func)
	elseif hero:IsOnRide() and (isForce or not hero:GetRideIsFight()) then
		hero:SetRide(false, true, func)
	else
		self:UnHug(func)
	end
end

function i3k_game_context:UnRideNotSyncRpc(func, isForce)
	local hero = i3k_game_get_player_hero()
	if hero and hero:IsOnRide() and (isForce or not hero:GetRideIsFight()) then
		hero:OnRideMode(false)
	end
	if func then
		func()
	end
end

function i3k_game_context:IsInFightTime()
	local hero = i3k_game_get_player_hero()
	return hero:IsInFightTime()
end

function i3k_game_context:RefreshRideProps()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateHorseProps()
	end
end

function i3k_game_context:AppraiseEquestrianSkill(id)
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:AppraiseEquestrianSkill(id)
	end
	return 0
end

function i3k_game_context:RefreshLongyinProps()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateLongyinProps()
	end
end

function i3k_game_context:RefreshLiLianProps()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateLiLianProps()
	end
end

function i3k_game_context:RefreshMercenaryAchievementProps()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateMercenaryAchievementProps()
	end
end

function i3k_game_context:RefreshMercenaryRelationProps()
	local hero = i3k_game_get_player_real_hero()
	if hero then
		hero:UpdateMercenaryRelationProps()
	else
		i3k_game_get_player_hero():UpdateMercenaryRelationProps()
	end
end

function i3k_game_context:RefreshMercenarySpiritsProps()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateMercenarySpiritsProps()
	end
end

function i3k_game_context:RefreshTitleProps()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateTitleProps()
	end
end

function i3k_game_context:IsOnRide()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:IsOnRide()
	end
	return false
end

function i3k_game_context:IsOnMulRide()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:IsOnMulRide()
	end
	return false
end

function i3k_game_context:IsLeaderMemberState()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:IsLeaderMemberState()
	end
	return false
end

function i3k_game_context:IsMulMemberState()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:IsMulMemberState()
	end
	return false
end

function i3k_game_context:GetMulIsLeader()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetMulIsLeader()
	end
	return false
end


--返回当前使用的技能key-value表
function i3k_game_context:GetRoleSelectSkills()
	return self._roleData.skills.use
end

function i3k_game_context:GetRolePassiveSkills()
	local hero = i3k_game_get_player_hero()
	local skillIDs = {}
	local xinfaIds = {}
	if hero and hero._talents then
		for k,v in pairs(hero._talents) do
			if v._cfg and v._cfg.type == 3 then
				skillIDs[v._cfg.args.sid] = v._cfg.args.sid
				xinfaIds[v._cfg.args.sid] = v._id
			end
		end
	end
	return skillIDs, xinfaIds;
end

--返回技能是否使用
function i3k_game_context:GetSkillIsCanUse(id)
	return i3k_game_get_player_hero():GetSkillIsCanUse(id)
end

--返回轻功是否使用
function i3k_game_context:GetDodgeSkillIsCanUse()
	return i3k_game_get_player_hero():GetDodgeSkillIsCanUse()
end

--返回绝技是否使用
function i3k_game_context:GetUniqueSkillIsCanUse()
	return i3k_game_get_player_hero():GetUniqueSkillIsCanUse()
end

--返回DIY技能是否使用
function i3k_game_context:GetDIYSkillIsCanUse()
	return i3k_game_get_player_hero():GetDIYSkillIsCanUse()
end

--返回驻地精灵技能是否使用
function i3k_game_context:GetSpiritSkillIsCanUse()
	return i3k_game_get_player_hero():GetSpiritSkillIsCanUse()
end
--返回技能冷却剩余时间
function i3k_game_context:GetRoleSkillCoolLeftTime(id)
	return i3k_game_get_player_hero():GetSkillCoolLeftTime(id)
end

--返回轻功技能冷却剩余时间
function i3k_game_context:GetRoleDodgeSkillCoolLeftTime()
	return i3k_game_get_player_hero():GetDodgeSkillCoolLeftTime()
end
--返回绝技冷却剩余时间
function i3k_game_context:GetRoleUniqueSkillCoolLeftTime()
    return i3k_game_get_player_hero():GetUniqueSkillCoolLeftTime()
end
--返回DIY技能冷却剩余时间
function i3k_game_context:GetRoleDIYSkillCoolLeftTime()
	return i3k_game_get_player_hero():GetDIYSkillCoolLeftTime()
end
--返回驻地精灵冷却剩余
function i3k_game_context:GetRoleSpiritSkillCoolLeftTime()
	return i3k_game_get_player_hero():GetSpiritSkillCoolLeftTime()
end
--帮派信息
function i3k_game_context:SetSectId(id)
	self._roleData.curChar._sectId = id

	--DCAccount.removeTag("拥有帮派")
	if id > 0 then
		--DCAccount.addTag("拥有帮派", tostring(id))
		DCEvent.onEvent("拥有帮派", {["帮派ID"] = tostring(id)})
	end
end

function i3k_game_context:GetSectId()
	if self._roleData.curChar then
		return self._roleData.curChar._sectId or -1
	end
	return -1
end

function i3k_game_context:SetSectName(name)
	self._roleData.curChar._sectName = name
end

function i3k_game_context:GetSectName()
	if self._roleData.curChar then
		return self._roleData.curChar._sectName or ""
	end
	return "";
end

function i3k_game_context:SetSectPosition(Position)
	self._roleData.curChar._sectPosition = Position
end

function i3k_game_context:GetSectPosition()
	if self._roleData.curChar then
		return self._roleData.curChar._sectPosition or -1
	end
	return -1;
end

function i3k_game_context:GetfullSectName(name,pos)
	local sectname = ""
	if pos ~= -1 and name then
		local posDesc = {
			[eFactionOwner] = 276,
			[eFactionSencondOwner] = 277,
			[eFactionElder] = 278,
			[eFactionElite]	= 1164,
			[eFactionPeple] = 279,
		}
		sectname = i3k_get_string(posDesc[pos], name)
	end
	return sectname;
end

function i3k_game_context:SetEntitySectVisible(vis)
	local world = i3k_game_get_world()
	if world then
		world:ChangeEntitySectVisible(vis)
	end
end
--设置称号是否显示
function i3k_game_context:SetMyselfTitleVisible(isShow)
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:SetHeroTitleVisiable(isShow)
	end
end

function i3k_game_context:SetOtherOnesTitleVisible(isShow)
	local world = i3k_game_get_world()
	if world then
		world:ChangeOtherOnesTitleVisible(isShow)
	end
end
-------
function i3k_game_context:SetSectTitleIcon(iconID)
	local path = ""
	if iconID and i3k_db_faction_icons[iconID] then
		path = g_i3k_db.i3k_db_get_scene_icon_path(i3k_db_faction_icons[iconID].titleIcon)
	end
	self._roleData.curChar._sectTitleIcon = path
end

function i3k_game_context:GetSectTitleIcon()
	return self._roleData.curChar._sectTitleIcon
end

function i3k_game_context:GetBagInfo()
	--	local bagItems = {}
	--	for i, e in ipairs(self._bagData.equips) do
	--		equip = bagItems[e.equip_id] or {id = e.equip_id, count = 0, equips = {}}
	--		equip.count = equip.count + 1
	--		equip.equips[e.equip_guid] = true
	--		bagItems[e.equip_id] = equip
	--	end
	--	for i, e in ipairs(self._bagData.items) do
	--		bagItems[e.itemid] = {id = e.itemid, count = e.item_count, equips = {}}
	--	end
	--	return self._bagData.bagSize, bagItems
	return self._bagData.bagSize, self._bagData.items
end

function i3k_game_context:GetCanSaleBagInfo()
	local size, allItems = self:GetBagInfo()
	local canSaleTable = {}
	local list = g_i3k_db.i3k_db_sort_bag_items(allItems)
	for i,v in ipairs(list) do
		local item = g_i3k_db.i3k_db_get_bag_item_cell_info(v)
		local id = item.id
		local canSale = g_i3k_db.i3k_db_get_common_item_can_sale(id)
		local itemType = g_i3k_db.i3k_db_get_auction_item_type(id)
		local isLock = g_i3k_common_item_has_binding_icon(id)

		if canSale and itemType~=0 and not isLock then
			for _,t in ipairs(item) do
				t.id = item.id
				t.durability = v.equips[t.guid] and v.equips[t.guid].durability or -1
				table.insert(canSaleTable, t)
			end
		end
	end
	return canSaleTable
end
--------------------------------------------------------------------------------------------
--物品操作相关函数

--获取通用物品的绝对数目(id 分正负，正Id表示绑定物品的绝对数目，负Id表示非绑定物品的绝对数目)
function i3k_game_context:GetCommonItemCount(id)
	if id > -65536 and id < 65536 then
		return self:GetBaseItemCount(id)
	else
		return self:GetBagItemCount(id)
	end
end

--获取通用物品的可用数目(id 分正负，正Id表示可以消耗绑定物品和非绑定物品的总数目，负Id表示只消耗非绑定物品的数目)
function i3k_game_context:GetCommonItemCanUseCount(id)
	if id > -65536 and id < 65536 then
		return self:GetBaseItemCanUseCount(id)
	else
		return self:GetBagItemCanUseCount(id)
	end
end

-- 判断消耗物品的条件是否满足([id] = count)
function i3k_game_context:checkNeedCommonItems(items, needMsg)
	local ownCount = 0
	local count = 0
	for id, value in pairs(items) do
		ownCount = self:GetCommonItemCanUseCount(id) or 0
		count = type(value) == "table" and value.count or value
		if ownCount < count then
			if needMsg then
				g_i3k_ui_mgr:PopupTipMessage(string.format("缺少%s%s个", g_i3k_db.i3k_db_get_common_item_name(id), count - ownCount))
			end
			return false
		end
	end
	return true
end

-- 判断消耗物品的条件是否满足 ({id = 0, count = 0} or {itemID = 0, itemCount = 0})
function i3k_game_context:checkNeedCommonItemsCfg(items, needMsg)
	local ownCount = 0
	local count = 0
	for index, value in ipairs(items) do
		local id = value.id or value.itemID
		local count = value.count or value.itemCount
		ownCount = self:GetCommonItemCanUseCount(id) or 0
		if ownCount < count then
			if needMsg then
				g_i3k_ui_mgr:PopupTipMessage(string.format("缺少%s%s个", g_i3k_db.i3k_db_get_common_item_name(id), count - ownCount))
			end
			return false
		end
	end
	return true
end

--UI控件道具统一刷新
	local refreshTab = {
		{eUIID_StrengEquip, "setItemScrollData"},
		{eUIID_EquipUpStar, "setItemScrollData"},
		{eUIID_GemUpLevel, "updateNeedItem"},
		{eUIID_UpSkillTips, "setScrollData"},
		{eUIID_XinFa, "setItemScrollData"},
		{eUIID_SuiCong, "updateSuicongUpStarData"},
		{eUIID_SuiCong, "updateSuicongUpLvlData"},
		{eUIID_SuiCong, "recordSkillBtn"},
		{eUIID_SuiCong, "updateSuicongTransferData"},
		{eUIID_SuiCong, "updateXiansuoDataWhenGetItem"},
		{eUIID_ShenBing, "setShenbingUpStarData"},
		{eUIID_ShenBing, "updateShenbingUplvlDataItem"},
		{eUIID_SteedPractice, "refreshNeedItemData"},
		{eUIID_SteedStar, "setNeedItemData"},
		{eUIID_Steed, "setItemScrollData"},
		{eUIID_CanWuStrat, "updateLayerData"},
		{eUIID_LongYin, "refreshScrollData"},
		{eUIID_longyinSpeedup, "setItemUI"},
		{eUIID_FactionSKill, "updateItemData"},
		{eUIID_EmpowermentTips, "onShowData"},
		{eUIID_SteedHuanhua, "setData"},
		{eUIID_TreasureScrectBox, "loadNeedItems"},
		{eUIID_EquipSevenTips2, "refreshData"},
		{eUIID_Production, "setProductionLevel3"},
		{eUIID_BattleEntrance, "updateBagRedPoint"},
		{eUIID_UseLimitConsumeItems, "updateMaxNum"},
		{eUIID_npcExchange, "refresh" },
		{eUIID_ShenBing_Talent_Buy, "updateShenBingTalentBuyItems"},
		{eUIID_ShenBing_UpSkill, "updateShenBingUpSkillItems"},
		{eUIID_ShenBing_Talent_Reset, "SetShenBingTalenResetData"},
		{eUIID_DailyTask, "setFrameIndex"},
		{eUIID_Transfrom1, "refData"},
		{eUIID_Transfrom2, "refData"},
		{eUIID_Transfrom3, "refData"},
		{eUIID_AllSpirits, "showSpiritsData"},
		{eUIID_StudySpirit, "showSpiritsData"},
		{eUIID_Compound, "onShowData"},
		{eUIID_PetTask, "updatePetTaskData"},
		{eUIID_SuicongUpSkillLevel, "refreshScrollData"},
		{eUIID_UnlockHead, "updateItemCount"},
		{eUIID_DemonHolesummary, "updateKeyNum"},
		{eUIID_SuiCong, "updateWuKuRedPoint"},
		{eUIID_AllSpirits, "refresh"},
		{eUIID_Blood_Pool, "loadScroll"},
		{eUIID_UnlockHunyu, "refreshItem"},
		{eUIID_GemBless, "loadConsumeItemInfo"},
		{eUIID_RecycleOpen, "refreshItemCount"},
		{eUIID_Jewel, "updatePartRedPoint"},
		{eUIID_Jewel, "updateBlessRed"},
		{eUIID_SteedSkin, "updateScroll"},
		{eUIID_SteedSkinRenew, "setData"},
		{eUIID_FashionSpinning, "updateConsumeScroll"},
		{eUIID_steedSkillUpLevel, "setScrollData"}, --骑术升级
		{eUIID_QiankunUp, "loadScroll"}, --乾坤升级
		{eUIID_QiankunBuy, "updateScroll"}, --乾坤购买
		{eUIID_Library, "updateMiJiWidget"}, --藏书
		{eUIID_EquipSharpen, "gengxinUi"}, --淬锋
		{eUIID_ExchangeMore, "updateUi"}, --批量兑换
		{eUIID_ChangeProfession, "updateItemsCount"},
		{eUIID_SpringAct, "setDoubleActNum"},
		{eUIID_MartialSoul, "updateItemScroll"},
		{eUIID_MartialSoul, "updateAddSkinPoint"},
		{eUIID_MartialSoul, "updateGradePoint"},
		{eUIID_MartialSoul, "updatePartPoint"},
		{eUIID_MartialSoul, "updateMartialSoulRed"},
		{eUIID_XB, "updateMartialSoulRed"},
		{eUIID_MartialSoulStage, "ItemScroll"},
		{eUIID_MartialSoulSkinUnlock, "udptaeItem"},
		{eUIID_QilingActive, "refreshConsume"},
		{eUIID_QilingProp, "initNodes"},
		{eUIID_QilingPromote, "setConsumeScroll"},
		{eUIID_QilingSkillUpdate, "updateSkill"},
		{eUIID_WoodenTripod , "refreshUI"}, --神木鼎
		{eUIID_DigitalCollection, "updatewizardScroll"},
		{eUIID_StarShape, "updateNeedItem"},
		{eUIID_StarLock, "updateItemNum"},
		{eUIID_DiceExchange, "setUI"},
		{eUIID_BuyChannelSpiritOther, "refreshItemCount"},
		{eUIID_SuicongWakenTask3, "updateScroll"},
		{eUIID_Bid, "setNeedItem"},
		{eUIID_Meridian, "updateItemScroll"},
		{eUIID_CreateFightTeam, "loadItemScroll"},
		{eUIID_MeridianResetPulse, "updateItemScroll"},
		{eUIID_MeridianPotentialUp, "updateUI"},
		{eUIID_ModifyPetName,"updateNeedItem"},
		{eUIID_EquipTransformCompare, "setConsumeItems"},
		{eUIID_SteedBreak, "showItems"},
		{eUIID_SteedFightUnlock, "loadScroll"},
		{eUIID_XingHun, "refreshCost"},
		{eUIID_XingHunUpStage, "updateScroll"},
		{eUIID_XingHunMainStarPractice, "updateConsumeScroll"},
		{eUIID_SteedFight, "updateItem"},
		{eUIID_SteedFight, "fightSteedRed"},
		{eUIID_SteedFightPropUnlock, "loadScroll"},
		{eUIID_CanWu, "setCanwuData"},
		{eUIID_SteedSpiritSkillUnlock, "loadItemScroll"},
		{eUIID_SteedSpiritSkillUp, "loadItemScroll"},
		{eUIID_SteedSprite, "loadUpSpiritStarScroll"},
		{eUIID_SteedSprite, "loadSpiritSkillsInfo"},
		{eUIID_TripWizardItem, "updateScroll"},
		{eUIID_Bagua,"updateMakeCost"},
		{eUIID_Bagua,"refreshStrengthCost"},
		{eUIID_BaguaExtract,"updateCostScroll"},
		{eUIID_SteedPractice,"refreshActivationCost"},
		{eUIID_fiveTrans, "refresh"},
		{eUIID_LongYin, "initFuling"},
		{eUIID_FulingUpLevel, "refreshWithoutArgs"},
		{eUIID_FulingReset, "refresh"},
		{eUIID_NpcDonate, "updateInputGoods"},
		{eUIID_SendGift, "showGift"},
		{eUIID_XinJue, "refresh"},
		{eUIID_HideWeaponPassiveSkill, "updateCostItem"},
		{eUIID_HomelandPlant, "updateCostItem"},
		{eUIID_HideWeaponActiveSkill, "updateUpSkillItems"},
		{eUIID_HideWeapon, "refresh"},
		{eUIID_HomeLandStructure, "refreshCurNode"},
		{eUIID_HideWeaponHuanhuaUnlock, "setUnlockItemScroll"},
		{eUIID_HomeLandProduce, "updateNeedData"},
		{eUIID_EquipTemper, "setNeedItem"},
		{eUIID_EquipTemperWash, "setNeedItem"},
		{eUIID_ShenBing, "UpdateAwakeConsume"},
		{eUIID_ShenBingBingHunShengJi, "setNeedItem"},
		{eUIID_TimingActivity, "updateActivityExchange"},
		{eUIID_PetEquipSkillUpGrade, "updateCostScroll"},
		{eUIID_PetEquipUpLevel, "setNeedItem"},
		{eUIID_WujueBreak, "setNeedItem"},
		{eUIID_WujueSkillUpLevel, "setNeedItem"},
		{eUIID_WujueSkillActive, "setNeedItem"},
		{eUIID_Wujue, "refresh"},
		{eUIID_WujueUseItems, "RefreshLeftCounts"},
		{eUIID_BuyFulingPoint, "updateItemScroll"},
		{eUIID_SteedSuitActive, "updateCostScroll"},
		{eUIID_SteedStove, "updateBagUI"},
		{eUIID_steedEquipSale, "setUseItem"},
		{eUIID_steedEquipSale2, "setUseItem"},
		{eUIID_steedEquipMake, "setConsume"},
		{eUIID_Chat, "updatelb"},
		{eUIID_LongYin, "updateCompoundHunYuunLockInfo"},
		{eUIID_PetGuard, "updateItemsCount"},
		{eUIID_PetGuard, "updateRedPoint"},
		{eUIID_PetGuardPotentialActive, "refresh"},
		{eUIID_RoleFlyingFoot, "setRightItemData"},
		{eUIID_GemExchangeShow, "refresh"},
		{eUIID_GemExchangeOperate, "refreshConsume"},	
		{eUIID_ShenDou, "setNeedItem"},
		{eUIID_ShenDou, "updateAllRed"},
		{eUIID_ShenDouBigSkillActive, "setNeedItem"},
		{eUIID_ShenDouBigSkillUp, "setNeedItem"},
		{eUIID_ShenDouSmallSkillActive, "setNeedItem"},
		{eUIID_ShenDouSmallSkillUp, "setNeedItem"},
		{eUIID_StarShapeConfirm, "setNeedItem"},
		{eUIID_SkillLy, "refresh"},
		{eUIID_ChallengeSubmitItems, "setSubmitItemScroll"},
		{eUIID_BaguaYilueByPoint,"refreshNeedItem"},
		{eUIID_YilueResetPoint,"refreshNeedItem"},
		{eUIID_YilueSkillJihuo,"refreshItemList"},
		{eUIID_YilueSkillShengjie,"refreshItemList"},
		{eUIID_FlyingEquipSharpen, "refreshAllRedPoint"},
		{eUIID_FlyingEquipSharpen, "setConsumeData"},
		{eUIID_FlyingEquipTrans, "refresh"},
		{eUIID_FlyingExpItem, "refresh"},
		{eUIID_ArrayStoneUpLevel, "updateItemScroll"},
		{eUIID_ArrayStoneMWDisplace, "setConsume"},
		{eUIID_ArrayStoneMWSynthetise, "setConsume"},
		{eUIID_ArrayStone, "updatePrayRootData"},
		{eUIID_ArrayStone, "updatePrayRedPoint"},
		{eUIID_XB, "updateArrayStoneRed"},
		{eUIID_ArrayStoneUnlockHole, "refreshItems"},
		{eUIID_GlobalWorldTaskTake, "updateRewardData"},
		{eUIID_WujueSoulSkill, "setConsumes"},
	}

--添加通用物品(如果id表示装备，则equips参数不能为nil，此时equips是包含equip数据table({equip_id = xxx, equip_guid = xxx, attribute = xxx, naijiu = xxx})的数组)
function i3k_game_context:AddCommonItem(id, count, equips)
	if id > -65536 and id < 65536 then
		self:AddBaseItem(id, count)
	else
		self:AddBagItem(id, count, equips)
		self:checkAddSkillItems(id, count)
	end
	self:SetTaskDataByTaskType(id, g_TASK_USE_ITEM)
	self:UpdateMrgTaskValue(g_TASK_USE_ITEM, id)
	for _,e in ipairs(refreshTab) do
		g_i3k_ui_mgr:InvokeUIFunction(e[1], e[2])
	end
	self:addNewItemCheckList(id)
end

--使用通用物品(id 分正负，正Id表示优先消耗绑定物品然后消耗非绑定物品，负Id表示只消耗非绑定物品)
function i3k_game_context:UseCommonItem(id, count,reason)
	if id > -65536 and id < 65536 then
		self:UseBaseItem(id, count,reason)
	else
		self:UseBagItem(id, count,reason)
	end
--	self:UpdateSubLineTaskValue(g_TASK_USE_ITEM,id)
end

function i3k_game_context:UseCommonItems_safe(items, reason)
	if not items then
		return
	end
	self:UseCommonItems(items, reason)
end

function i3k_game_context:UseCommonItems(items, reason)
	for id, num in pairs(items) do
		if type(num) == "table" then
			self:UseCommonItem(id, num.count, reason)
		else
			self:UseCommonItem(id, num, reason)
		end
	end
end

--UI控件道具统一刷新
local refreshUITb = {
	{eUIID_DemonHolesummary, "updateKeyNum"},
}
-- 删除物品
function i3k_game_context:DeleteCommonItem(id, count, equips, reason)
	if id > 10000000 or id < -10000000 then
		self:DelBagEquips(id, equips, reason)
	else
		self:UseCommonItem(id, count, reason)
	end
	for _,e in ipairs(refreshUITb) do
		g_i3k_ui_mgr:InvokeUIFunction(e[1], e[2])
	end
end

------------------------------------------------------------------------------------------------------------


--获取基础物品数目
function i3k_game_context:GetBaseItemCount(id)
	if id == -g_BASE_ITEM_DIAMOND then
		return self:GetDiamond(true)
	elseif id == g_BASE_ITEM_DIAMOND then
		return self:GetDiamond(false)
	elseif id == -g_BASE_ITEM_COIN then
		return self:GetMoney(true)
	elseif id == g_BASE_ITEM_COIN then
		return self:GetMoney(false)
	elseif id == g_BASE_ITEM_SECT_MONEY then
		return self:GetSectContribution()
	elseif id == g_BASE_ITEM_ARENA_MONEY then
		return self:GetArenaMoney()
	elseif id == g_BASE_ITEM_TOURNAMENT_MONEY then
		return self:getTournamentPoints()
	elseif id == g_BASE_ITEM_EQUIP_ENERGY then
		return self:GetEquipEnergy()
	elseif id == g_BASE_ITEM_GEM_ENERGY then
		return self:GetStoneEnergy()
	elseif id == g_BASE_ITEM_BOOK_ENERGY then
		return self:GetRuneEnergy()
	elseif id == g_BASE_ITEM_SPLITSP then
		return self:GetProductionSplit()
	elseif id == g_BASE_ITEM_VIT then
		return self:GetVit()
	elseif id == g_BASE_ITEM_EMP then
		return self:GetExperienceCurExpCoin()
	elseif id ==  g_BASE_ITEM_ESCORTT_MONEY then
		return self:GetEscortStoreMoney()
	elseif id == g_BASE_ITEM_MASTER_POINT then
		return self:GetMasterPoint()
	elseif id == g_BASE_ITEM_DIVIDEND then
		return self:GetDividendCount()
	elseif id == g_BASE_ITEM_PETCOIN then
		return self:GetPetRaceCoin()
	elseif id == g_BASE_ITEM_WEAPONSOUL then
		return self:GetWeaponSoulCoin()
	elseif id == g_BASE_ITEM_DRAGON_COIN then
		return self:GetDragonCoinCount()
	elseif id == g_BASE_ITEM_FAME then
		return self:GetFameCount()
	elseif id == g_BASE_ITEM_SECT_HONOR then
		return self:getSectHonor()
	elseif id == g_BASE_ITEM_BUDO then
		return self:GetBudoCount()
	elseif id == g_BASE_ITEM_BAGUA_ENERGY then
		return self:GetBaguaEnergy()
	elseif id == g_BASE_ITEM_QIYUN then
		return self:getQiyun()
	elseif id == g_BASE_ITEM_SPIRIT_BOSS then
		return self:getSpiritBossCurrency()
	elseif id == g_BASE_ITEM_PET_EQUIP_SPIRIT then
		return self:GetPetEquipSpiritCount()
	elseif id == g_BASE_ITEM_STEED_EQUIP_SPIRIT then
		return self:GetSteedForgeEnergy()
	elseif id == g_BASE_ITEM_STONE_ENERGY then
		return self:getArrayStoneEnergy()
	end
	return 0
end

--获取基础物品可用数目
function i3k_game_context:GetBaseItemCanUseCount(id)
	if id == -g_BASE_ITEM_DIAMOND then
		return self:GetDiamondCanUse(true)
	elseif id == g_BASE_ITEM_DIAMOND then
		return self:GetDiamondCanUse(false)
	elseif id == -g_BASE_ITEM_COIN then
		return self:GetMoneyCanUse(true)
	elseif id == g_BASE_ITEM_COIN then
		return self:GetMoneyCanUse(false)
	elseif id == g_BASE_ITEM_SECT_MONEY then
		return self:GetSectContribution()
	elseif id == g_BASE_ITEM_ARENA_MONEY then
		return self:GetArenaMoney()
	elseif id == g_BASE_ITEM_TOURNAMENT_MONEY then
		return self:getTournamentPoints()
	elseif id == g_BASE_ITEM_EQUIP_ENERGY then
		return self:GetEquipEnergy()
	elseif id == g_BASE_ITEM_GEM_ENERGY then
		return self:GetStoneEnergy()
	elseif id == g_BASE_ITEM_BOOK_ENERGY then
		return self:GetRuneEnergy()
	elseif id == g_BASE_ITEM_SPLITSP then
		return self:GetProductionSplit()
	elseif id == g_BASE_ITEM_VIT then
		return self:GetVit()
	elseif id == g_BASE_ITEM_EMP then
		return self:GetExperienceCurExpCoin()
	elseif id ==  g_BASE_ITEM_ESCORTT_MONEY then
		return self:GetEscortStoreMoney()
	elseif id == g_BASE_ITEM_MASTER_POINT then
		return self:GetMasterPoint()
	elseif id == g_BASE_ITEM_DIVIDEND then
		return self:GetDividendCount()
	elseif id == g_BASE_ITEM_PETCOIN then
		return self:GetPetRaceCoin()
	elseif id == g_BASE_ITEM_WEAPONSOUL then
		return self:GetWeaponSoulCoin()
	elseif id == g_BASE_ITEM_DRAGON_COIN then
		return self:GetDragonCoinCount()
	elseif id == g_BASE_ITEM_FAME then
		return self:GetFameCount()
	elseif id == g_BASE_ITEM_SECT_HONOR then
		return self:getSectHonor()
	elseif id == g_BASE_ITEM_BUDO then
		return self:GetBudoCount()
	elseif id == g_BASE_ITEM_BAGUA_ENERGY then
		return self:GetBaguaEnergy()
	elseif id == g_BASE_ITEM_QIYUN then
		return self:getQiyun()
	elseif id == g_BASE_ITEM_SPIRIT_BOSS then
		return self:getSpiritBossCurrency()
	elseif id == g_BASE_ITEM_PET_EQUIP_SPIRIT then
		return self:GetPetEquipSpiritCount()
	elseif id == g_BASE_ITEM_STEED_EQUIP_SPIRIT then
		return self:GetSteedForgeEnergy()
	elseif id == g_BASE_ITEM_STONE_ENERGY then
		return self:getArrayStoneEnergy()
	end
	return 0
end

--添加基础物品
function i3k_game_context:AddBaseItem(id, count)
	if id == -g_BASE_ITEM_DIAMOND then
		self:AddDiamond(count, true)
	elseif id == g_BASE_ITEM_DIAMOND then
		self:AddDiamond(count, false)
	elseif id == -g_BASE_ITEM_COIN then
		self:AddMoney(count, true)
	elseif id == g_BASE_ITEM_COIN then
		self:AddMoney(count, false)
	elseif id == g_BASE_ITEM_SECT_MONEY then
		self:AddSectContribution(count)
	elseif id == g_BASE_ITEM_ARENA_MONEY then
		self:AddArenaMoney(count)
	elseif id == g_BASE_ITEM_TOURNAMENT_MONEY then
		self:addTournamentPoint(count)
	elseif id == g_BASE_ITEM_EQUIP_ENERGY then
		self:AddEquipEnergy(count)
	elseif id == g_BASE_ITEM_GEM_ENERGY then
		self:AddStoneEnergy(count)
	elseif id == g_BASE_ITEM_BOOK_ENERGY then
		self:AddRuneEnergy(count)
--	elseif id == g_BASE_ITEM_EXP then
--		self:AddExp(count)
	elseif id == g_BASE_ITEM_VIT then
		self:AddVit(count, true)
	elseif id == g_BASE_ITEM_EMP then
		return self:AddExperienceCurExpCoin(count)
	elseif id ==  g_BASE_ITEM_ESCORTT_MONEY then
		self:AddEscortStoreMoney(count)
	elseif id ==  g_BASE_ITEM_CREDIT then
		self:AddCredit(count)
	elseif id == g_BASE_ITEM_OFFLINE_POINT then
		self:AddOfflineWizardPoint(count)
	elseif id == g_BASE_ITEM_SPLITSP then
		self:AddProductionSplit(count)
	elseif id == g_BASE_ITEM_MASTER_POINT then
		self:AddMasterPoint(count)
	elseif id == g_BASE_ITEM_DIVIDEND then
		self:AddDividend(count)
	elseif id == g_BASE_ITEM_PETCOIN then
		self:AddPetRaceCoin(count)
	elseif id == g_BASE_ITEM_WEAPONSOUL then
		self:AddWeaponSoulCoin(count)
	elseif id == g_BASE_ITEM_DRAGON_COIN then
		self:AddDragonCoin(count)
	elseif id == g_BASE_ITEM_FAME then
		self:AddFameCount(count)
	elseif id == g_BASE_ITEM_SECT_HONOR then
		self:AddSectHonor(count)
	elseif id == g_BASE_ITEM_BUDO then
		self:AddBudoCount(count)
	elseif id == g_BASE_ITEM_BAGUA_ENERGY then
		self:AddBaguaEnergy(count)
	elseif id == g_BASE_ITEM_QIYUN then
		self:addQiyun(count)
	elseif id == g_BASE_ITEM_SPIRIT_BOSS then
		self:addSpiritBossCurrency(count)
	elseif id == g_BASE_ITEM_PET_EQUIP_SPIRIT then
		self:AddPetEquipSpiritCount(count)
	elseif id == g_BASE_ITEM_STEED_EQUIP_SPIRIT then
		return self:AddSteedForgeEnergy(count)
	elseif id == g_BASE_ITEM_STONE_ENERGY then
		self:addArrayStoneEnergy(count)
	end
end

--扣除基础物品
function i3k_game_context:UseBaseItem(id, count,reason)
	if id == -g_BASE_ITEM_DIAMOND then
		self:UseDiamond(count, true,reason)
	elseif id == g_BASE_ITEM_DIAMOND then
		self:UseDiamond(count, false,reason)
	elseif id == -g_BASE_ITEM_COIN then
		self:UseMoney(count, true,reason)
	elseif id == g_BASE_ITEM_COIN then
		self:UseMoney(count, false,reason)
	elseif id == g_BASE_ITEM_SECT_MONEY then
		self:UseSectContribution(count,reason)
	elseif id == g_BASE_ITEM_ARENA_MONEY then
		self:UseArenaMoney(count,reason)
	elseif id == g_BASE_ITEM_EQUIP_ENERGY then
		self:UseEquipEnergy(count,reason)
	elseif id == g_BASE_ITEM_GEM_ENERGY then
		self:UseStoneEnergy(count,reason)
	elseif id == g_BASE_ITEM_BOOK_ENERGY then
		self:UseRuneEnergy(count,reason)
--	elseif id == g_BASE_ITEM_EXP then
--		--不支持使用经验
	elseif id == g_BASE_ITEM_VIT then
		self:UseVit(count,reason)
	elseif id == g_BASE_ITEM_EMP then
		return self:UseExperienceCurExpCoin(count,reason)
	elseif id ==  g_BASE_ITEM_ESCORTT_MONEY then
		self:UseEscortStoreMoney(count,reason)
	elseif id ==  g_BASE_ITEM_CREDIT then
		self:UseCredit(count, reason)
	elseif id == g_BASE_ITEM_OFFLINE_POINT then
		self:UseOfflineWizardPoint(count, reason)
	elseif id == g_BASE_ITEM_SPLITSP then
		self:RemoveProductionSplit(count, reason)
	elseif id == g_BASE_ITEM_TOURNAMENT_MONEY then
		self:addTournamentPoint(-count)
	elseif id == g_BASE_ITEM_MASTER_POINT then
		self:UseMasterPoint(count)
	elseif id == g_BASE_ITEM_DIVIDEND then
		self:UseDividend(count, reason)
	elseif id == g_BASE_ITEM_PETCOIN then
		self:UsePetRaceCoin(count, reason)
	elseif id == g_BASE_ITEM_WEAPONSOUL then
		return self:UseWeaponSoulCoin(count, reason)
	elseif id == g_BASE_ITEM_DRAGON_COIN then
		self:UseDragonCoin(count, reason)

	elseif id == g_BASE_ITEM_FAME then
		self:UseFame(count, reason)

	elseif id == g_BASE_ITEM_SECT_HONOR then
		self:UseSectHonor(count, reason)
	elseif id == g_BASE_ITEM_BUDO then
		self:UseBudoCount(count)
	elseif id == g_BASE_ITEM_BAGUA_ENERGY then
		self:UseBaguaEnergy(count, reason)
	elseif id == g_BASE_ITEM_QIYUN then
		self:useQiyun(count, reason)
	elseif id == g_BASE_ITEM_SPIRIT_BOSS then
		self:useSpiritBossCurrency(count)
	elseif id == g_BASE_ITEM_PET_EQUIP_SPIRIT then
		self:UsePetEquipSpiritCount(count, reason)
	elseif id == g_BASE_ITEM_STEED_EQUIP_SPIRIT then
		return self:UseSteedForgeEnergy(count, reason)
	elseif id == g_BASE_ITEM_STONE_ENERGY then
		self:useArrayStoneEnergy(count, reason)
	end
end

-------------------------------钻石-------------------------------------------------
--获取当前钻石数，参数free表示获取的是非绑定还是绑定钻石数
function i3k_game_context:GetDiamond(free)
	return free and self._bagData._freeDiamond or self._bagData._binDingdiamond
end

--获取当前可用的钻石数，参数freeOnly表示是否限定必须是非绑定
function i3k_game_context:GetDiamondCanUse(freeOnly)
	return freeOnly and self._bagData._freeDiamond or self._bagData._binDingdiamond + self._bagData._freeDiamond
end

--添加钻石，参数free表示添加的是非绑定还是绑定钻石
function i3k_game_context:AddDiamond(amount, free)
	if free then
		self._bagData._freeDiamond = self._bagData._freeDiamond + amount
	else
		self._bagData._binDingdiamond = self._bagData._binDingdiamond + amount
	end

	g_i3k_ui_mgr:RefreshUI(eUIID_DB)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SteedPractice, "updateMoney")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_LuckyWheel, "updateCurMoney")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MakeLegendEquip, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_VipStore, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_CommmonStore, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Warehouse, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDress, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_NpcHotel, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipSharpen, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Activity, "updateMoney", self:GetVit(),self:GetVitMax())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "refreshPetBuyLevel")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "refreshShenbinBuyLevel")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateWuKuRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_sweepActivity, "updateDiamond")
end

--使用消耗钻石，参数freeOnly表示是否限定必须是非绑定,reason 消耗原因
function i3k_game_context:UseDiamond(amount, freeOnly,reason)
	if freeOnly then
		self._bagData._freeDiamond = self._bagData._freeDiamond - amount
		DCItem.consume(g_BASE_ITEM_DIAMOND, "非绑定", amount, reason)
	else
		local rUse = self._bagData._binDingdiamond > amount and amount or self._bagData._binDingdiamond
		local fUse = amount - rUse
		self._bagData._binDingdiamond = self._bagData._binDingdiamond - rUse
		self._bagData._freeDiamond = self._bagData._freeDiamond - fUse
		DCItem.consume(g_BASE_ITEM_DIAMOND, "绑定", amount, reason)
	end

	g_i3k_ui_mgr:RefreshUI(eUIID_DB)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SteedPractice, "updateMoney")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_LuckyWheel, "updateCurMoney")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_VipStore, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_CommmonStore, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MakeLegendEquip, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Warehouse, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDress, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_NpcHotel, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Activity, "updateMoney", self:GetVit(),self:GetVitMax())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipSharpen, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
end

---------------------------------------------金币--------------------------------------------------------
--获取当金币数，参数free表示获取的是非绑定还是绑定金币数
function i3k_game_context:GetMoney(free)
	return free and self._bagData._freeMoney or self._bagData._binDingmoney
end

--获取当前可用的金币数，参数freeOnly表示是否限定必须是非绑定
function i3k_game_context:GetMoneyCanUse(freeOnly)
	return freeOnly and self._bagData._freeMoney or self._bagData._binDingmoney + self._bagData._freeMoney
end

--添加金币，参数free表示添加的是非绑定还是绑定金币
function i3k_game_context:AddMoney(amount, free)
	if free then
		if self._bagData._freeMoney + amount > g_MAX_CURRENCY_AMOUNT then
			self._bagData._freeMoney = g_MAX_CURRENCY_AMOUNT
		else
		self._bagData._freeMoney = self._bagData._freeMoney + amount
		end
	else
		if self._bagData._binDingmoney + amount > g_MAX_CURRENCY_AMOUNT then
			self._bagData._binDingmoney = g_MAX_CURRENCY_AMOUNT
		else
		self._bagData._binDingmoney = self._bagData._binDingmoney + amount
		end
	end
	for _,e in ipairs(refreshTab) do
		g_i3k_ui_mgr:InvokeUIFunction(e[1], e[2])
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_XB)
	g_i3k_ui_mgr:RefreshUI(eUIID_DBF)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_LuckyWheel, "updateCurMoney")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MakeLegendEquip, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Warehouse, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDress, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_NpcHotel, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipSharpen, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "updateSkillPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "showRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "refreshTransferData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "setItemScrollData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "setItemScrollData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Steed, "setItemScrollData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDungeon,"updateUserCoin",self:GetMoney(true))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MartialFeatShop,"updateWordColor")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SteedPractice, "refreshNeedItemData")
end

--使用消耗金币，参数freeOnly表示是否限定必须是非绑定 reason 消耗原因
function i3k_game_context:UseMoney(amount, freeOnly,reason)
	if freeOnly then
		self._bagData._freeMoney = self._bagData._freeMoney - amount
		DCItem.consume(g_BASE_ITEM_COIN, "非绑定", amount, reason)
	else
		local rUse = self._bagData._binDingmoney > amount and amount or self._bagData._binDingmoney
		local fUse = amount - rUse
		self._bagData._binDingmoney = self._bagData._binDingmoney - rUse
		self._bagData._freeMoney = self._bagData._freeMoney - fUse
		DCItem.consume(g_BASE_ITEM_COIN, "绑定", amount, reason)
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_DBF)
	g_i3k_ui_mgr:RefreshUI(eUIID_XB)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_LuckyWheel, "updateCurMoney")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MakeLegendEquip, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Warehouse, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDress, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_CommmonStore, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_NpcHotel, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipSharpen, "updateMoney", self:GetDiamond(true), self:GetDiamond(false), self:GetMoney(true),self:GetMoney(false))
end

---------------------------------------------体力-------------------------------------------------------
--体力恢复
function i3k_game_context:TryRefreshVit(timeTick)
	if self._roleData.curChar and self._roleData.curChar._vitRevertTime > 0 then
		local d = timeTick - self._roleData.curChar._vitRevertTime
		local db = g_i3k_db.i3k_db_get_common_cfg().buyVit
		if d >= db.intervalTime then
			local n = math.floor(d / db.intervalTime)
			local r = d % db.intervalTime
			self._roleData.curChar._vitRevertTime = timeTick - r
			bVitChange = self:AddVit(n * db.recoverValue, false)
		end
	end
end

--获取当前体力真实最大值(使用道具时候的上限)
function i3k_game_context:GetVitRealMax()
	local db = g_i3k_db.i3k_db_get_level_cfg(self:GetLevel())
	return db and db.vitRealValue or 0
end

--获取当前体力最大值
function i3k_game_context:GetVitMax()
	local db = g_i3k_db.i3k_db_get_level_cfg(self:GetLevel())
	return db and db.vitValue or 0
end

---获取当前体力值
function i3k_game_context:GetVit()
	return	self._roleData.curChar._vit;
end

--添加体力
function i3k_game_context:AddVit(amount, exceedMaxVit)
	local maxVit = self:GetVitMax()
	local finalVitAdd = amount
	if not exceedMaxVit then
		if self._roleData.curChar._vit < maxVit then
			finalVitAdd = self._roleData.curChar._vit + amount - maxVit
			if finalVitAdd <= 0 then
				finalVitAdd = amount
			end
		else
			finalVitAdd = 0
		end
	end
	self._roleData.curChar._vit = self._roleData.curChar._vit + finalVitAdd
	self:TestStartOrStopVitRecover(maxVit)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FBLB, "updateVitNum", self:GetVit(),self:GetVitMax())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Activity, "updateMoney", self:GetVit(),self:GetVitMax())

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDungeonLayer, "updateUserVit", self:GetVit(),self:GetVitMax())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEscortPath, "updateUserVit", self:GetVit(),self:GetVitMax())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEatDine, "updateUserVit", self:GetVit(),self:GetVitMax())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_sweepActivity, "updateVit")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDungeonLayer, "updateUserVit", self:GetVit())
end

--使用消耗体力
function i3k_game_context:UseVit(amount,reason)
	self._roleData.curChar._vit =  self._roleData.curChar._vit - amount
	DCItem.consume(g_BASE_ITEM_VIT, "体力", amount, reason)
	self:TestStartOrStopVitRecover(self:GetVitMax())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FBLB, "updateVitNum", self:GetVit(),self:GetVitMax())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Activity, "updateMoney", self:GetVit(),self:GetVitMax())
end


--测试开始或停止恢复体力
function i3k_game_context:TestStartOrStopVitRecover(maxVit)
	if self._roleData.curChar._vitRevertTime == 0 then
		if self._roleData.curChar._vit < maxVit then
			self._roleData.curChar._vitRevertTime = i3k_game_get_time()
		end
	else
		if self._roleData.curChar._vit >= maxVit then
			self._roleData.curChar._vitRevertTime = 0
		end
	end
end


--获取体力恢复时间
function i3k_game_context:GetVitRecoverTime()
	return self._roleData.curChar._vitRevertTime
end
-------------------------------装备能量-----------------------------------
---获取装备能量值
function i3k_game_context:GetEquipEnergy()
	return self._energy._equipEnergy
end

---添加装备能量
function i3k_game_context:AddEquipEnergy(count)
	self._energy._equipEnergy = self._energy._equipEnergy + count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
end

---使用装备能量
function i3k_game_context:UseEquipEnergy(count,reason)
	self._energy._equipEnergy = self._energy._equipEnergy - count
	DCItem.consume(g_BASE_ITEM_EQUIP_ENERGY, "装备能量", count, reason)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
end

-------------------------------宝石能量-----------------------------------
---TO Delete
function i3k_game_context:SetStoneEnergy(count)
	self._energy._stoneEnergy = count
end

---获取宝石能量
function i3k_game_context:GetStoneEnergy()
	return self._energy._stoneEnergy
end
---添加宝石能量
function i3k_game_context:AddStoneEnergy(count)
	self._energy._stoneEnergy = self._energy._stoneEnergy + count
end

---使用宝石能量
function i3k_game_context:UseStoneEnergy(count,reason)
	self._energy._stoneEnergy = self._energy._stoneEnergy - count
	DCItem.consume(g_BASE_ITEM_GEM_ENERGY, "宝石能量", count, reason)
end

-------------------------------心法悟性----------------------------------
---获取心法悟性
function i3k_game_context:GetRuneEnergy()
	return self._energy._runeEnergy
end

---添加心法悟性
function i3k_game_context:AddRuneEnergy(count)
	self._energy._runeEnergy = self._energy._runeEnergy + count
end

---使用心法悟性
function i3k_game_context:UseRuneEnergy(count,reason)
	self._energy._runeEnergy = self._energy._runeEnergy - count
	DCItem.consume(g_BASE_ITEM_BOOK_ENERGY, "心法悟性", count, reason)
end

-------------------------------背包物品---------------------------------------------------
--操作装备
function i3k_game_context:SetWearEquipsData(id, guid, pos, flyEquip)
	self:SetDodgeSkillChangeTime(self._wearEquips[pos].equip)
	self._wearEquips[pos].equip = nil
	local equip_cfg = flyEquip or self:GetBagEquip(id, guid)
	self:DelBagEquip(id, guid,AT_UP_WEAR_EQUIP)
	self._wearEquips[pos].equip = {
	equip_id	= equip_cfg.equip_id > 0 and equip_cfg.equip_id or -equip_cfg.equip_id,
	equip_guid	= equip_cfg.equip_guid,
	attribute	= equip_cfg.attribute,
	naijiu		= equip_cfg.naijiu,
	refine		= equip_cfg.refine,
	legends		= equip_cfg.legends,
	smeltingProps = equip_cfg.smeltingProps,
	hammerSkill = equip_cfg.hammerSkill,
	}
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	hero:UpdateRewardProps()
	if pos == 7 then
		hero:UpdateXingHunProp()
		hero:UpdateHorseProps()
	end
	hero._bwType = self:GetTransformBWtype()
	if not self:GetNotEnterMapIdTips() then
		hero:AttachEquip(id)
	end
	self:SetDodgeSkillChangeTime(self._wearEquips[pos].equip, true)
end

function i3k_game_context:SetWearEquip(id, guid, pos, flyEquip)
	self:SetWearEquipsData(id, guid, pos, flyEquip)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateWearEquipsData", self:GetRoleDetail())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "changeShowType", pos)
	self:SetBetterEquipStatusByPartID(pos,false)
	if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onUpdateBatterEquipShow")
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
end

function i3k_game_context:SetAutoWearEquips(guids, posTable)
	for k, v in pairs(guids) do
		local pos = posTable[k]
		local id = k
		local equip_guids = v.guids
		local guid = nil
		for a,b in pairs(equip_guids) do
			guid = a
		end
		self:SetWearEquipsData(id, guid, pos, nil)
		self:SetBetterEquipStatusByPartID(pos, false)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateWearEquipsData", self:GetRoleDetail())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
	g_i3k_ui_mgr:CloseUI(eUIID_BattleEquip)
end

function i3k_game_context:SetDownWearEquip(pos)
	local hero = i3k_game_get_player_hero()
	self:SetDodgeSkillChangeTime(self._wearEquips[pos].equip)
	self._wearEquips[pos].equip = nil
	hero:UpdateEquipProps()
	if pos == 7 then
		hero:UpdateXingHunProp()
		hero:UpdateHorseProps()
	end
	hero:UpdateRewardProps()
	if not self:GetNotEnterMapIdTips() then
		hero:DetachEquip(pos, true)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateWearEquipsData", g_i3k_game_context:GetRoleDetail())
	--g_i3k_ui_mgr:RefreshUI(eUIID_RoleLy)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateWearEquipSelect")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateWearEquipSelect")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy2, "updateWearEquipSelect")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateWearEquipsData", g_i3k_game_context:GetRoleDetail())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy2, "updateWearEquipsData", g_i3k_game_context:GetRoleDetail())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateProperty")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy2, "updateProperty")
	g_i3k_ui_mgr:CloseUI(eUIID_EquipTips)
	g_i3k_ui_mgr:CloseUI(eUIID_FlyingEquipInfo)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
end
function i3k_game_context:setDeleteWearEquip(equipID)
	local equipCfg = g_i3k_db.i3k_db_get_equip_item_cfg(equipID)
	if equipCfg then
		local pos = equipCfg.partID
		local hero = i3k_game_get_player_hero()
		self:SetDodgeSkillChangeTime(self._wearEquips[pos].equip)
		self._wearEquips[pos].equip = nil
		hero:UpdateEquipProps()
		hero:UpdateRewardProps()
		if not self:GetNotEnterMapIdTips() then
			hero:DetachEquip(pos, true)
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateWearEquipSelect")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy2, "updateWearEquipSelect")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateWearEquipsData", g_i3k_game_context:GetRoleDetail())
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy2, "updateWearEquipsData", g_i3k_game_context:GetRoleDetail())
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateProperty")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy2, "updateProperty")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
	end
end

function i3k_game_context:SetDodgeSkillChangeTime(equip, isChange)
	if equip then
		for i,e in ipairs(equip.legends) do
			if i==3 and e ~= 0 then
				local equip_t = g_i3k_db.i3k_db_get_equip_item_cfg(equip.equip_id)
				local eCfg = i3k_db_equips_legends_3[equip_t.partID][e]
				if eCfg and eCfg.type == 5 then
					local hero = i3k_game_get_player_hero()
					if hero and hero._dodgeSkill then
						hero._dodgeSkill:ChangeSkillTick(isChange and eCfg.args[1] or 0)
						break
					end
				end
			end
		end
	end
end

function i3k_game_context:isCanOpenEquipStreng()
	if self:GetLevel() < i3k_db_common.functionOpen.strengLvl then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(125, i3k_db_common.functionOpen.strengLvl))
		return false
	end
	local is_have = false
	for k = 1, eEquipNumber do
		if self._wearEquips and self._wearEquips[k] and self._wearEquips[k].equip and self._wearEquips[k].equip.equip_id then
			is_have = true
			break
		end
	end
	if not is_have then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(46))
	end
	return is_have
end

function i3k_game_context:UpdateGrowReward(growLvl)
	--DCAccount.removeTag("全身强化", "")
	local tag = g_i3k_db.i3k_db_get_property_reward_tag(g_Prop_Reward_Grow, growLvl)
	if tag then
		--DCAccount.addTag("全身强化", tag)
		DCEvent.onEvent("全身强化", {["全身强化"] = tag})
	end
end

function i3k_game_context:UpdateStarReward(starLvl)
	--DCAccount.removeTag("全身星级", "")
	local tag = g_i3k_db.i3k_db_get_property_reward_tag(g_Prop_Reward_Star, starLvl)
	if tag then
		--DCAccount.addTag("全身星级", tag)
		DCEvent.onEvent("全身星级", {["全身星级"] = tag})
	end
end

function i3k_game_context:UpdateStoneReward(stoneLvl)
	--DCAccount.removeTag("全身宝石", "")
	local tag = g_i3k_db.i3k_db_get_property_reward_tag(g_Prop_Reward_Stone, stoneLvl)
	if tag then
		--DCAccount.addTag("全身宝石", tag)
		DCEvent.onEvent("全身宝石", {["全身宝石"] = tag})
	end
end

function i3k_game_context:equipStrengUseItem(partID, level, strengGroup)
	for i=self:GetEquipStrengLevel(partID)+1, level do
		local _data = i3k_db_streng_equip[strengGroup][i]
		if _data then
			self:UseEquipEnergy(_data.energy,AT_EQUIP_LEVEL_UP)
			for j=1, 3 do
				local item_id = string.format("item%sID",j)
				local item_count = string.format("item%sCount",j)
				if _data[item_id] ~= 0 then
					self:UseCommonItem(_data[item_id], _data[item_count],AT_EQUIP_LEVEL_UP)
				end
			end
		end
	end
end
--装备升级卷轴强化装备
function i3k_game_context:SetEquipStrengLevel(partID, level, equip_id )
	local qLvl = self:GetEquipStrengLevel(partID)
	local starLvl = self:GetEquipUpStarLevel(partID)
	local wEquips = self:GetWearEquips()
	local strengGroup = g_i3k_db.i3k_db_get_equip_streng_group(partID);
	self._wearEquips[partID].eqGrowLvl = level
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	local growLvl, starLvl, stoneLvl = hero:UpdateRewardProps()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_UseItemUpEquipLevel, "updateWearEquipsLevl", partID)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_UseItemUpEquipLevel, "playStrengEffect")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_UseItemUpEquipLevel, "setItemIcon")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_UseItemUpEquipLevel, "updateWearEquipsData", g_i3k_game_context:GetRoleDetail())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_UseItemUpEquipLevel, "setRightView", equip_id, partID)
	-- g_i3k_ui_mgr:InvokeUIFunction(eUIID_UseItemUpEquipLevel, "removeText")
	-- g_i3k_ui_mgr:InvokeUIFunction(eUIID_UseItemUpEquipLevel, "refresh",item, partID, equip_id)
	g_i3k_ui_mgr:PopupTipMessage("升级成功")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_UseItemUpEquipLevel, "updateRolePower")
	local effectids = g_i3k_db.i3k_db_get_equip_effect_id_show(wEquips[partID].equip.equip_id, self:GetRoleType(), partID, level, self:GetEquipUpStarLevel(partID), self:GetEquipWeaponEffectInfo(partID))
	if effectids then--特效ID
		self:AttachRoleEquipEffectByPartID(partID, effectids)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_UseItemUpEquipLevel, "updateRecover")
	end
	self:UpdateGrowReward(growLvl)
	DCEvent.onEvent("装备强化", { ["部位"] = tostring(partID)})
end
--装备强化
function i3k_game_context:SetEquipStrengData(partID, level)
	local qLvl = self:GetEquipStrengLevel(partID)
	local starLvl = self:GetEquipUpStarLevel(partID)
	local wEquips = self:GetWearEquips()
	local strengGroup = g_i3k_db.i3k_db_get_equip_streng_group(partID);
	self:equipStrengUseItem(partID, level, strengGroup)
	self._wearEquips[partID].eqGrowLvl = level
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	local growLvl, starLvl, stoneLvl = hero:UpdateRewardProps()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "updateWearEquipsLevl", partID)
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "setRightView", wEquips[partID].equip.equip_id, partID)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "updateRedPoint")
	if #i3k_db_streng_equip[strengGroup] ~= level then --强化成功特效
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "playStrengEffect", wEquips[partID].equip.equip_id, partID)
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "setRightView", wEquips[partID].equip.equip_id, partID)
	end
	g_i3k_ui_mgr:PopupTipMessage("升级成功")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "updateRolePower")
	local effectids = g_i3k_db.i3k_db_get_equip_effect_id_show(wEquips[partID].equip.equip_id, self:GetRoleType(), partID, level, self:GetEquipUpStarLevel(partID), self:GetEquipWeaponEffectInfo(partID))
	if effectids then--特效ID
		self:AttachRoleEquipEffectByPartID(partID, effectids)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "updateRecover")
	end

	self:UpdateGrowReward(growLvl)
	DCEvent.onEvent("装备强化", { ["部位"] = tostring(partID)})
end

--自动平均强化装备
function i3k_game_context:SetAutoEquipStrengData(posLevels, nowPartID)
	local growLvl, starLvl, stoneLvl
	local hero = i3k_game_get_player_hero()
	local wEquips = self:GetWearEquips()
	local strengGroup = g_i3k_db.i3k_db_get_equip_streng_group(nowPartID);
	for k,v in pairs(posLevels) do
		local qLvl = self:GetEquipStrengLevel(k)
		local starLvl = self:GetEquipUpStarLevel(k)
		local strengGroup = g_i3k_db.i3k_db_get_equip_streng_group(k);
		for i=self:GetEquipStrengLevel(k)+1, v do
			local _data = i3k_db_streng_equip[strengGroup][i]
			if _data then
				self:UseEquipEnergy(_data.energy,AT_EQUIP_LEVEL_UP)
				for j=1, 3 do
					local item_id = string.format("item%sID",j)
					local item_count = string.format("item%sCount",j)
					if _data[item_id] ~= 0 then
						self:UseCommonItem(_data[item_id], _data[item_count],AT_EQUIP_LEVEL_UP)
					end
				end
			end
		end
		self._wearEquips[k].eqGrowLvl = v

		growLvl, starLvl, stoneLvl = hero:UpdateRewardProps()
		local effectids = g_i3k_db.i3k_db_get_equip_effect_id_show(wEquips[k].equip.equip_id, self:GetRoleType(), k, v, self:GetEquipUpStarLevel(k), self:GetEquipWeaponEffectInfo(k))
		if effectids then--特效ID
			self:AttachRoleEquipEffectByPartID(k, effectids)
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "updateRecover")
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "updateWearEquipsLevl", k)
		DCEvent.onEvent("装备强化", { ["部位"] = tostring(k)})
	end
	if #i3k_db_streng_equip[strengGroup] ~= posLevels[nowPartID] then --强化成功特效
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "playStrengEffect", wEquips[nowPartID].equip.equip_id, nowPartID)
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "setRightView", wEquips[nowPartID].equip.equip_id, nowPartID)
	end
	self:UpdateGrowReward(growLvl)
	hero:UpdateEquipProps()
	g_i3k_ui_mgr:PopupTipMessage("升级成功")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "updateRolePower")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip, "updateRedPoint")

end
--装备强化突破
function i3k_game_context:SetEquipStrengBreak(partID)
	self._wearEquips[partID].breakLvl = self._wearEquips[partID].breakLvl + 1
	self:ConsumeEquipBreak(partID)
	local wEquips = self:GetWearEquips()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_StrengEquip,"setRightView", wEquips[partID].equip.equip_id, partID)
	g_i3k_ui_mgr:OpenUI(eUIID_XinJueBreakSuccess)
	g_i3k_ui_mgr:RefreshUI(eUIID_XinJueBreakSuccess)
end
--扣除装备强化突破的材料
function i3k_game_context:ConsumeEquipBreak(partID)
	local strengGroup = g_i3k_db.i3k_db_get_equip_streng_group(partID);
	local cfg = i3k_db_streng_equip_break[strengGroup][self._wearEquips[partID].breakLvl].consume
	for k,v in ipairs(cfg) do
		self:UseCommonItem(v.itemId, v.count, AT_EQUIP_BREAK)
	end
end

--装备升星
function i3k_game_context:SetEquipUpStarData(partID, level)
	local qLvl = self:GetEquipStrengLevel(partID)
	local starLvl = self:GetEquipUpStarLevel(partID)
	local wEquips = self:GetWearEquips()
	local group = g_i3k_db.i3k_db_get_equip_upStar_group(partID);
	for i=self:GetEquipUpStarLevel(partID)+1, level do
		local _data = i3k_db_up_star[group][i]
		for j=1,4 do
			local item_id = string.format("item%sID",j)
			local item_count = string.format("item%sCount",j)
			if _data[item_id] ~= 0 then
				self:UseCommonItem(_data[item_id], _data[item_count],AT_EQUIP_STAR_UP)
			end
		end
	end
	self._wearEquips[partID].eqEvoLvl = level
	self._wearEquips[partID].upCount = 0
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	local growLvl, starLvl, stoneLvl = hero:UpdateRewardProps()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "updateWearEquipsLevl", partID)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "setRightView", wEquips[partID].equip.equip_id, partID)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "updateRedPoint")
	if #i3k_db_up_star[group] ~= level then --升星成功特效
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "playStrengEffect", level)
	end
	g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(635))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "updateRolePower")
	local effectInfo = self:GetEquipWeaponEffectInfo(partID)
	effectInfo.evoLvl = level
	local effectids = g_i3k_db.i3k_db_get_equip_effect_id_show(wEquips[partID].equip.equip_id, self:GetRoleType(), partID, qLvl, level, effectInfo)
	if effectids then--特效ID
		self:AttachRoleEquipEffectByPartID(partID, effectids)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "updateWearEquipsData", g_i3k_game_context:GetRoleDetail())
	end

	self:UpdateStarReward(starLvl)
	DCEvent.onEvent("装备升星", { ["部位"] = tostring(partID)})
end

function i3k_game_context:DelEquipUpStarItem(partID, level)
	local group = g_i3k_db.i3k_db_get_equip_upStar_group(partID);
	for i=self:GetEquipUpStarLevel(partID)+1, level do
		local _data = i3k_db_up_star[group][i]
		for j=1,4 do
			local item_id = string.format("item%sID",j)
			local item_count = string.format("item%sCount",j)
			if _data[item_id] ~= 0 then
				self:UseCommonItem(_data[item_id], _data[item_count],AT_EQUIP_STAR_UP)
			end
		end
	end
	self._wearEquips[partID].upCount = self._wearEquips[partID].upCount + 1
	local wEquips = self:GetWearEquips()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "setRightView", wEquips[partID].equip.equip_id, partID)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "updateRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "updateWearEquipsLevl", partID)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EquipUpStar, "playFailedEffect", level)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
end

function i3k_game_context:GetEquipStrengLevel(partID)
	return self._wearEquips[partID].eqGrowLvl
end
--获取装备突破等级
function i3k_game_context:GetEquipBreakLevel(partID)
	return self._wearEquips[partID].breakLvl
end

--获取装备是否应该突破 --后两个参数是获取指定等级下是否该突破
function i3k_game_context:GetEquipShouldBreak(partID, defaultBreakLvl, defaultStrengLvl)
	local strengGroup = g_i3k_db.i3k_db_get_equip_streng_group(partID);
	local breakLvl = defaultBreakLvl or self:GetEquipBreakLevel(partID)
	local qh_level = defaultStrengLvl or self:GetEquipStrengLevel(partID)
	local breakCfg = i3k_db_streng_equip_break[strengGroup][breakLvl + 1]
	return (breakCfg and breakCfg.level) == qh_level
end

function i3k_game_context:GetEquipUpStarLevel(partID)
	return self._wearEquips[partID].eqEvoLvl
end

function i3k_game_context:GetEquipWeaponEffectInfo(partID)
	partID = partID or eEquipWeapon
	return self._wearEquips[partID].effectInfo
end

function i3k_game_context:SetEquipWeaponEffectInfoEvolvl(partID, evoLvl)
	local effectInfo = g_i3k_game_context:GetEquipWeaponEffectInfo(partID)
	if effectInfo then
		effectInfo.evoLvl = evoLvl
	end
end


-- 获取背包所有的装备
function i3k_game_context:GetAllBagEquips()
	local equips = {}
	local bagSize, bagItems = g_i3k_game_context:GetBagInfo()
	for k, v in pairs(bagItems) do
		if g_i3k_db.i3k_db_get_common_item_type(k) == g_COMMON_ITEM_TYPE_EQUIP then
			if next(v.equips) ~= nil then
				for a, b in pairs(v.equips) do
					table.insert(equips, {id = k, guid = a})
				end
			end
		end
	end
	return equips
end

--是否有穿戴飞升装备
function i3k_game_context:isShowFeishengBtn(wEquips)
	local isShow = false
	for i = eEquipFlying,eEquipFlyRing do	
		if wEquips[i] and wEquips[i].equip then
			isShow = true
			break
		end
	end
	return isShow
end
function i3k_game_context:GetBestEquipInfo()
	local equips = self:GetAllBagEquips()
	local wEquips = g_i3k_game_context:GetWearEquips()

	local best_equip = {}
	local replace_count = 0
	local temp_pos = {}
	local powerlist = {}
	for i=1,eEquipCount do
		--local w_grade = 0
		local w_power = 0
		local temp1 = {}
		local equip = wEquips[i].equip
		if equip then
			--w_grade = g_i3k_db.i3k_db_get_common_item_rank(equip.equip_id)
			w_power = g_i3k_game_context:GetBagEquipPower(equip.equip_id, equip.attribute, equip.naijiu, equip.refine, equip.legends, equip.smeltingProps)
		end
		for k,v in pairs(equips) do
			local equip_cfg = g_i3k_db.i3k_db_get_equip_item_cfg(v.id)
			local equipData = g_i3k_game_context:GetBagEquip(v.id, v.guid)
			local transfromLvl = g_i3k_game_context:GetTransformLvl()
			local role_ctype = g_i3k_game_context:GetRoleType()
			local cur_level = g_i3k_game_context:GetLevel()
			local BWtype = g_i3k_game_context:GetTransformBWtype()

			--if equip_cfg.rank >= w_grade then
				local all_class_type = equip_cfg.roleType == 0 or role_ctype == equip_cfg.roleType
				local isBWtypeMatch = equip_cfg.M_require == 0 or equip_cfg.M_require == BWtype
				local RoleEquipReduceLevel = self:getRoleEquipLevel()
				local isLevelMatch = RoleEquipReduceLevel + cur_level >= equip_cfg.levelReq
				local isTransformMatch = RoleEquipReduceLevel > 0 or transfromLvl >= equip_cfg.C_require
				if equip_cfg.partID == i and all_class_type and isLevelMatch and isTransformMatch and isBWtypeMatch then
					local t = {
					equip_id = v.id,
					equip_guid = v.guid,
					partID = equip_cfg.partID,
					rank = equip_cfg.rank,
					power = g_i3k_game_context:GetBagEquipPower(v.id, g_i3k_get_equip_attributes(equipData), g_i3k_get_equip_durability(equipData), equipData.refine, equipData.legends, equipData.smeltingProps),
					}
					table.insert(temp1,t)
				end
			--end

		end

		local equip_tb = self:equipSort(temp1)
		local _equip = i3k_sbean.KinEquips.new()
		if next(equip_tb) ~= nil then
			if equip_tb[1].power > w_power then
				replace_count = replace_count + 1
				_equip.id = equip_tb[1].equip_id
				_equip.guids = equip_tb[1].equip_guid
				best_equip[equip_tb[1].equip_id] = _equip
				temp_pos[equip_tb[1].equip_id] = equip_tb[1].partID
				powerlist[equip_tb[1].equip_id] = equip_tb[1].power - w_power
			end
		end
	end
	return temp_pos,best_equip,powerlist
end

--一键装备排序
function i3k_game_context:equipSort(equips)
	table.sort(equips,function(a,b)
		return a.power > b.power
	end)
	return equips
end

function i3k_game_context:GetBetterEquipInfoByPartID(partID)
	local temp_pos,best_equip = g_i3k_game_context:GetBestEquipInfo()
	for k,v in pairs(temp_pos) do
		if v == partID then
			return true;
		end
	end
	return false;
end

function i3k_game_context:InitBetterEquipStatus()
	for i = 1, eEquipCount do
		self._batterequip[i] = g_i3k_game_context:GetBetterEquipInfoByPartID(i)
	end
end

function i3k_game_context:GetBetterEquipStatusByPartID(partID)
	return self._batterequip[partID]
end

function i3k_game_context:GetBatterEquipStatus()
	for i = 1, eEquipCount do
		if self:GetBetterEquipStatusByPartID(i) then
			return true
		end
	end
	return false
end

function i3k_game_context:SetBetterEquipStatusByPartID(partID,status)
	self._batterequip[partID] = status
end

--宝石镶嵌
function i3k_game_context:SetGemInlayData(pos, slotPos, gemId)
	self._wearEquips[pos].slot[slotPos] = gemId
	self:UseCommonItem(gemId, 1,AT_GEM_INLAY)
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	local growLvl, starLvl, stoneLvl = hero:UpdateRewardProps()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateSlotGemImage", pos)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "showCanUpLevelUI", slotPos)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updatePVE")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateRolePower")

	self:UpdateStoneReward(stoneLvl)
	DCEvent.onEvent("装备宝石镶嵌", { ["宝石ID"] = tostring(math.abs(gemId))})
end

--宝石拆除
function i3k_game_context:SetGemUnlayData(pos, slotPos, gemId)
	self._wearEquips[pos].slot[slotPos] = 0
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	local growLvl, starLvl, stoneLvl = hero:UpdateRewardProps()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateSlotGemImage", pos)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "showCanInlayUI", slotPos)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updatePVE")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateRolePower")

	self:UpdateStoneReward(stoneLvl)
	DCEvent.onEvent("装备宝石拆除", { ["宝石ID"] = tostring(math.abs(gemId))})
end

--宝石升级
function i3k_game_context:SetGemUpLevelData(pos, seq, toId, needItem)
	for i, e in pairs(needItem) do
		if e.id == g_BASE_ITEM_GEM_ENERGY then
			self:UseStoneEnergy(e.count,AT_GEM_LEVEL_UP)
		else
			self:UseCommonItem(e.id, e.count,AT_GEM_LEVEL_UP)
		end
	end

	self._wearEquips[pos].slot[seq] = toId
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	local growLvl, starLvl, stoneLvl = hero:UpdateRewardProps()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateSlotGemImage", pos)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "showCanUpLevelUI", seq)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updatePVE")
	if g_i3k_db.i3k_db_get_gem_item_cfg(toId).updated_id ~= 0 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_GemUpLevel, "playUpLevelEffect", {pos = pos, seq = seq, gemId = toId})
	else
		g_i3k_ui_mgr:CloseUI(eUIID_GemUpLevel)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateRolePower")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")

	self:UpdateStoneReward(stoneLvl)
	DCEvent.onEvent("装备宝石升级", { ["宝石ID"] = tostring(toId)})
end

--宝石祝福
function i3k_game_context:SetGemBlessData(pos, seq, gemId, level)
	local itemCfg = i3k_db_equip_part[pos].blessing
	self:UseCommonItem(itemCfg.itemID, itemCfg.itemCount[level], AT_GEM_BLESS)

	self._wearEquips[pos].gemBless[seq] = level -- 更新祝福等级
	g_i3k_ui_mgr:RefreshUI(eUIID_GemBless, {pos = pos, seq = seq, gemId = gemId, blessLvl = level})
	g_i3k_game_context:SetPrePower()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateEquipProps()
	end
	g_i3k_game_context:ShowPowerChange()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "showCanUpLevelUI", seq)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateRolePower")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateStrengNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateSlotGemImage", pos)
	g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(15521))
end

--获取装备部位镶嵌宝石信息
function i3k_game_context:GetEquipSoltCfg(partID)
	return self._wearEquips[partID].slot
end

--获取装备部位宝石祝福信息
function i3k_game_context:GetEquipBlessInfo(partID)
	return self._wearEquips[partID].gemBless or {}
end

--水晶装备修复
function i3k_game_context:SetEquipRepairData(pos, money)
	local wEquips = self:GetWearEquips()
	local maxValue = i3k_db_common.equip.durability.durabilityMax
	self:UseMoney(money, true,AT_REPAIR_EQUIP)
	--wEquips[pos].equip.naijiu = maxValue
	--self:SetWearEquips(wEquips)
	self._wearEquips[pos].equip.naijiu = maxValue
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	--g_i3k_ui_mgr:RefreshUI(eUIID_RoleLy)
	--g_i3k_ui_mgr:RefreshUI(eUIID_RoleLy2)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setBagItemsChanged")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updateWearEquipsData", self:GetRoleDetail())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy2, "updateWearEquipsData", self:GetRoleDetail())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateWearEquipsData", self:GetRoleDetail())
end

function i3k_game_context:GetEquipRepairNeedMoney(partId, count)
	local wEquips = self:GetWearEquips()
	local naijiu = wEquips[partId].equip.naijiu
	local MaxVlaue = i3k_db_common.equip.durability.durabilityMax
	local tmp = i3k_db_common.equip.durability.count
	local pkpunish = self:GetPKPunish()
	local money = (MaxVlaue - naijiu) * tmp *(1 + pkpunish)
	money = money * count
	--玄武破天弓
	local isOpen,mastery,form = self:GetShenBingUniqueSkillData(self:GetSelectWeapon())
	if isOpen and isOpen == 1 then
		for k,v in pairs(i3k_db_shen_bing_unique_skill[self:GetSelectWeapon()]) do
			if v.uniqueSkillType == 12 then
				local curparameters = v.parameters
				if g_i3k_game_context:isMaxWeaponStar(self:GetSelectWeapon()) then
					curparameters = v.manparameters
				end
				money = money * (1 - curparameters[1]/10000)
				break
			end
		end
	end
	return math.modf(money), math.modf(naijiu), math.modf(MaxVlaue)
end

--批量出售相关
function i3k_game_context:SetBatchSellEquipsData(equips)
	for k, v in pairs(equips) do
		local count = 0
		for g, t in pairs(v.guids) do
			if g then
				count = count + 1
			end
		end
		if count ~= 1 then
			for m, n  in pairs(v.guids) do
				self:DelBagEquip(v.id, m,AT_BATCH_SELL_BAG_EQUIPS)
			end
		else
			local guid = nil
			for a, b in pairs(v.guids) do
				guid = a
			end
			self:DelBagEquip(v.id, guid,AT_BATCH_SELL_BAG_EQUIPS)
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SaleItemBat, "setSaleItemsChanged")
	end
	g_i3k_ui_mgr:PopupTipMessage("出售成功")
end
--宝石、心法、杂物
function i3k_game_context:SetBatchSellItem(item)
	local flag = false
	for k, v in pairs(item) do
		self:UseBagMiscellaneous(v.id, v.count)
		if self:checkSkillItemType(v.id) then -- 出售技能道具，刷新技能UI
			flag = true
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Jewel, "updateRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SaleItemBat, "setSaleItemsChanged")
	g_i3k_ui_mgr:RefreshUI(eUIID_XB)
	if flag then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateAllSkills")
	end
	g_i3k_ui_mgr:PopupTipMessage("出售成功")
end

--批量销毁道具
function i3k_game_context:SetDestroyItem(item)
	for k, v in pairs(item) do
		self:UseBagMiscellaneous(v.id, v.count)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_DestroyItem, "ChangeSelectScroll", item)
end

--获取非本职业心法书
function i3k_game_context:getValidXinfabookItemList(item_id)
	local role_id = self:GetRoleType()
	local trans_level = self:GetTransformLvl()
	local camp = self:GetTransformBWtype()
	local xinfaTab = {zyXinfa = {}, jhXinfa = {}, pbXinfa = {}}
	--获取当前可用的心法ID列表
	camp = trans_level > 1 and {camp} or {1, 2}
	local max_trans_level = #i3k_db_zhuanzhi[role_id]
	for i,e in ipairs(camp) do
		xinfaTab.zyXinfa[i] = i3k_db_zhuanzhi[role_id][max_trans_level][e].zyXinfa
		xinfaTab.jhXinfa[i] = i3k_db_zhuanzhi[role_id][max_trans_level][e].jhXinfa
		xinfaTab.pbXinfa[i] = i3k_db_zhuanzhi[role_id][max_trans_level][e].pbXinfa
	end
	for _,e in pairs(xinfaTab) do
		for _,v in ipairs(e) do
			for _,c in ipairs(v) do
				if i3k_db_xinfa[c] and i3k_db_xinfa[c].itemID == math.abs(item_id) then
					return false
				end
			end
		end
	end
	return true
end

--扩展背包
function i3k_game_context:ExpandBagSize(size, expandTimes)
	self._bagData.bagSize = self._bagData.bagSize + size
	self._bagData.bagIndex = self._bagData.bagIndex + 1
	self:RefreshBagIsFull()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateBagSize", size)
end

--获取背包格子信息
function i3k_game_context:GetBagSize()
	return self._bagData.bagSize, self._bagData.bagIndex
end
--获取背包已经使用的格子数
function i3k_game_context:GetBagUseCell()
	return self._bagData.useCellSize
end

--判断背包是否还有剩余的格子
function i3k_game_context:GetBagIsFull()
	return self._bagData.useCellSize >= self._bagData.bagSize
end

-- 背包可以剩余是否可以装进对应空间
function i3k_game_context:checkBagCanAddCell(num, needNotice)
	if self:GetBagIsFull() or (self:GetBagSize() - self:GetBagUseCell()) < num then
		if needNotice then
			g_i3k_ui_mgr:PopupTipMessage("背包剩余空间不足，请先清理背包")
		end
		return false
	end
	return true
end

function i3k_game_context:RefreshBagIsFull()
	local iconShow, redShow, isFull = self:TestBagShowState()
	self:OnBagShowStateChangedHandler(iconShow, redShow, isFull)
end

--测试背包能否放入参数t所包含的物品，参数t是key，value的table，其中key是背包物品的id，value是背包物品的count
function i3k_game_context:IsBagEnough(t)
	local addCellSize = 0
	for k, v in pairs(t) do
		local count = self:GetBagItemCount(k)
		local stack_max = g_i3k_db.i3k_db_get_bag_item_stack_max(k)
		addCellSize = addCellSize + g_i3k_get_use_bag_cell_size(count + v, stack_max) - g_i3k_get_use_bag_cell_size(count, stack_max)
	end
	return addCellSize + self._bagData.useCellSize <= self._bagData.bagSize
end
--i3k_game_context:IsBagEnough的数组参数版本，数组中每项包含id和count两个参数
function i3k_game_context:IsBagEnoughForList(list)
	local addCellSize = 0
	for i, e in ipairs(list) do
		local cnt = self:GetBagItemCount(e.id)
		local stack_max = g_i3k_db.i3k_db_get_bag_item_stack_max(e.id)
		addCellSize = addCellSize + g_i3k_get_use_bag_cell_size(cnt + e.count, stack_max) - g_i3k_get_use_bag_cell_size(cnt, stack_max)
	end
	return addCellSize + self._bagData.useCellSize <= self._bagData.bagSize
end

--获取背包中指定的道具、宝石、心法书或装备的数目(id 分正负，正Id表示绑定物品的绝对数目，负Id表示非绑定物品的绝对数目)
function i3k_game_context:GetBagItemCount(id)
	if id > 10000000 or id < -10000000 then
		return self:GetBagEquipCount(id)
	else
		return self:GetBagMiscellaneousCount(id)
	end
end

--获取背包中可消耗的道具、宝石、心法书或装备的数目(id 分正负，正Id表示可以消耗绑定物品和非绑定物品的总数目，负Id表示只消耗非绑定物品的数目)
function i3k_game_context:GetBagItemCanUseCount(id)
	if id > 10000000 or id < -10000000 then
		return self:GetBagEquipCanUseCount(id)
	else
		return self:GetBagMiscellaneousCanUseCount(id)
	end
end

--向背包中添加物品，如果添加的id表示装备，则equips不能为nil，此时equips是需要添加的equip数据table({equip_id = xxx, equip_guid = xxx, attribute = xxx, naijiu = xxx})的数组
function i3k_game_context:AddBagItem(id, count, equips)
	if id > 10000000 or id < -10000000 then
		return self:AddBagEquips(id, count, equips)
	else
		return self:AddBagMiscellaneous(id, count)
	end
end

--使用消耗背包中物品，不支持此种方式消耗背包装备(id 分正负，正Id表示优先消耗绑定物品然后消耗非绑定物品，负Id表示只消耗非绑定物品)
function i3k_game_context:UseBagItem(id, count,reason)
	if id > -10000000 and id < 10000000 then
		return self:UseBagMiscellaneous(id, count,reason)
	else
		--不支持此种删除背包装备的方式
	end
	DCItem.consume(id, g_i3k_db.i3k_db_get_common_item_is_free_type(id), count, reason)
end

--获取背包中指定道具、宝石或心法书的数目(id 分正负，正Id表示绑定物品的绝对数目，负Id表示非绑定物品的绝对数目)
function i3k_game_context:GetBagMiscellaneousCount(id)
	--	for i, e in ipairs(self._bagData.items) do
	--		if e.iteid == id then
	--			return e.item_count
	--		end
	--	end
	--	return 0
	local item = self._bagData.items[id]
	return item and item.count or 0
end

--获取背包中可以合并的道具(不含装备)
function i3k_game_context:GetCanCombinedItems()
	local canCombinedItems = {};
	local items = self._bagData.items
	for i,v in pairs(items) do
		if v.id < 0 and self:GetBagMiscellaneousCount(-v.id) ~= 0 and g_i3k_db.i3k_db_get_common_item_type(v.id) ~= g_COMMON_ITEM_TYPE_EQUIP then
			table.insert(canCombinedItems,v)
		end
	end
	return canCombinedItems
end

--获取背包中可以消耗使用的指定道具、宝石或心法书的数目(id 分正负，正Id表示可以消耗绑定物品和非绑定物品的总数目，负Id表示只消耗非绑定物品的数目)
function i3k_game_context:GetBagMiscellaneousCanUseCount(id)
	return id > 0 and (self:GetBagMiscellaneousCount(id) + self:GetBagMiscellaneousCount(-id)) or self:GetBagMiscellaneousCount(id)
end

----向背包中添加道具、宝石或心法书(id 分正负，正Id表示添加绑定物品，负Id表示添加非绑定物品)
function i3k_game_context:AddBagMiscellaneous(id, count)
	local miscellaneous = self._bagData.items[id]
	miscellaneous = miscellaneous or {id = id, count = 0, equips = {}, sortId = g_i3k_db.i3k_db_get_bag_item_order(id)}
	miscellaneous.count = miscellaneous.count + count
	self._bagData.items[id] = miscellaneous
	local stack_max = g_i3k_db.i3k_db_get_bag_item_stack_max(id)
	local useCellSizeChange = g_i3k_get_use_bag_cell_size(miscellaneous.count, stack_max) - g_i3k_get_use_bag_cell_size(miscellaneous.count-count, stack_max)
	self._bagData.useCellSize = self._bagData.useCellSize + useCellSizeChange
	self:RefreshBagIsFull()
	g_i3k_game_context:AddDrugCheck(id, count)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setBagItemsChanged")
	g_i3k_ui_mgr:RefreshUI(eUIID_XB)
end

--使用背包道具、宝石或心法书具体实现，非对外接口
function i3k_game_context:UseBagMiscellaneousImpl(id, count)
	--	local realUse = 0
	--	if count > 0 then
	--		for i, e in ipairs(self._bagData.items) do
	--			if e.itemid == id then
	--				if e.item_count <= count then
	--					realUse = e.item_count
	--					e.item_count = 0
	--					table.remove(self._bagData.items, i)
	--				else
	--					realUse = count
	--					e.item_count = e.item_count - count
	--				end
	--				local stack_max = g_i3k_db.i3k_db_get_bag_item_stack_max(id)
	--				local useCellSizeChange = g_i3k_get_use_bag_cell_size(e.item_count, stack_max) - g_i3k_get_use_bag_cell_size(e.item_count+realUse, stack_max)
	--				self._bagData.useCellSize = self._bagData.useCellSize + useCellSizeChange
	--
	--				break
	--			end
	--		end
	--	end
	--	return count - realUse
	local realUse = 0
	if count > 0 then
		local miscellaneous = self._bagData.items[id]
		if miscellaneous then
			if miscellaneous.count <= count then
				realUse = miscellaneous.count
				miscellaneous.count = 0
				self._bagData.items[id] = nil
			else
				realUse = count
				miscellaneous.count = miscellaneous.count - count
			end
			local stack_max = g_i3k_db.i3k_db_get_bag_item_stack_max(id)
			local useCellSizeChange = g_i3k_get_use_bag_cell_size(miscellaneous.count, stack_max) - g_i3k_get_use_bag_cell_size(miscellaneous.count+realUse, stack_max)
			self._bagData.useCellSize = self._bagData.useCellSize + useCellSizeChange
			self:RefreshBagIsFull()
		end
		g_i3k_game_context:DesDrugCheck(id, count)
	end
	return realUse
end

----使用背包中道具、宝石或心法书(id 分正负，正Id表示优先消耗绑定物品然后消耗非绑定物品，负Id表示只消耗非绑定物品)
function i3k_game_context:UseBagMiscellaneous(id, count)
	local useCount = id > 0 and self:UseBagMiscellaneousImpl(-id, count-self:UseBagMiscellaneousImpl(id, count)) or self:UseBagMiscellaneousImpl(id, count)
	if self:checkSkillItemType(id) then -- 出售技能道具，刷新技能UI
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateAllSkills")
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setBagItemsChanged")
	g_i3k_ui_mgr:RefreshUI(eUIID_XB)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Blood_Pool, "loadScroll")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SpringAct, "setDoubleActNum")
	g_i3k_ui_mgr:RefreshUI(eUIID_UseVit, true)
	return useCount
end

--获取背包中指定id和guid的装备，如果找到此id和guid的装备则返回装备数据table的拷贝数据，未找到返回nil
function i3k_game_context:GetBagEquip(id, guid)
	--	local equips = self._bagData.equips
	--	for i, e in ipairs(self._bagData.equips) do
	--		if e.equip_id == id and e.equip_guid == guid then
	--			return {equip_id = e.equip_id, equip_guid = e.equip_guid, attribute = e.attribute, naijiu = e.naijiu}
	--		end
	--	end
	--	return nil
	local bagEquips = self._bagData.items[id]
	local equip = bagEquips and bagEquips.equips[guid]
	return equip and g_i3k_get_equip_from_bean(equip) or nil
end

--精炼更新背包装备的属性
function i3k_game_context:UpdateBagEquipProperty(id,guid,refine)
	local bagEquips = self._bagData.items[id]
	if bagEquips and bagEquips.equips[guid] then
		bagEquips.equips[guid].refine = refine
	end
end

function i3k_game_context:UpdateBagEquipAttrPorps(id, guid, propsValue)
	local bagEquips = self._bagData.items[id]
	if bagEquips and bagEquips.equips[guid] then
		bagEquips.equips[guid].addValues = propsValue
	end
end

--非绑定装备变成绑定
function i3k_game_context:UpdateBagEquipFreeType(id,guid)
	local bagEquips = self._bagData.items[id]
	local equips = bagEquips.equips[guid]
	local sortId = bagEquips.sortId
	if self._bagData.items[-id] then
		self._bagData.items[-id].count = self._bagData.items[-id].count + 1
		self._bagData.items[-id].equips[guid] = equips
	else
		equips.id = -id
		self._bagData.items[-id] = {count = 1,id = -id,sortId = sortId ,equips = {}}
		self._bagData.items[-id].equips[guid] = equips
	end
	self:DelBagEquip(id, guid,AT_EQUIP_REFINE)
end

--获取背包中指定装备Id的数目(id 分正负，正Id表示绑定物品的绝对数目，负Id表示非绑定物品的绝对数目)
function i3k_game_context:GetBagEquipCount(id)
	--	local count = 0
	--	for i, e in ipairs(self._bagData.equips) do
	--		if e.equip_id == id then
	--			count = count + 1
	--		end
	--	end
	--	return count
	local item = self._bagData.items[id]
	return item and item.count or 0
end

--获取背包中可以消耗使用的指定装备Id的数目(id 分正负，正Id表示可以消耗绑定物品和非绑定物品的总数目，负Id表示只消耗非绑定物品的数目)
function i3k_game_context:GetBagEquipCanUseCount(id)
	return id > 0 and (GetBagEquipCount(id) + GetBagEquipCount(-id)) or GetBagEquipCount(id)
end

--向背包中添加指定装备，参数equips为包含相同id的装备数据table的数组table
function i3k_game_context:AddBagEquips(id, count, equips)
	--	for i, e in ipairs(equips) do
	--		table.insert(self._bagData.equips, e)
	--		if e.naijiu ~= -1 then
	--			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(191, g_i3k_db.i3k_db_get_common_item_name(e.equip_id)))
	--		end
	--		self._bagData.useCellSize = self._bagData.useCellSize + 1
	--	end
	local bagEquips = self._bagData.items[id]
	if bagEquips then
		for k, v in pairs(equips) do
			bagEquips.equips[k] = v
		end
		bagEquips.count = bagEquips.count + count
	else
		bagEquips = { id = id, count = count, equips = equips, sortId = g_i3k_db.i3k_db_get_bag_item_order(id)}
		self._bagData.items[id] = bagEquips
	end
	self._bagData.useCellSize = self._bagData.useCellSize + count
	self:RefreshBagIsFull()
	self:CheckBatterEquip(id)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setBagItemsChanged")
end

--删除背包中装备，参数equips为包含相同id的装备数据table的数组table
function i3k_game_context:DelBagEquips(id, equips, reason)
	for k, v in pairs(equips) do
		self:DelBagEquip(id, k, reason)
	end
end

--向背包中添加指定装备，参数equip为装备数据table{equip_id = xxx, equip_guid = xxx, attribute = xxx, naijiu = xxx}
--function i3k_game_context:AddBagEquip(equip)
--	table.insert(self._bagData.equips, equip)
--	self._bagData.useCellSize = self._bagData.useCellSize + 1
--	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setBagItemsChanged")
--end

--删除背包中指定装备
function i3k_game_context:DelBagEquip(id, guid,reason)
	--	for i, e in ipairs(self._bagData.equips) do
	--		if e.equip_id == id and e.equip_guid == guid then
	--			table.remove(self._bagData.equips, i)
	--			self._bagData.useCellSize = self._bagData.useCellSize - 1
	--			g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setBagItemsChanged")
	--			return
	--		end
	--	end
	local bagEquips = self._bagData.items[id]
	if bagEquips then
		local equip = bagEquips.equips[guid]
		if equip then
			bagEquips.equips[guid] = nil
			bagEquips.count = bagEquips.count - 1
			if bagEquips.count <= 0 then
				self._bagData.items[id] = nil
			end
			self._bagData.useCellSize = self._bagData.useCellSize - 1
			self:RefreshBagIsFull()
			self:CheckBatterEquip(id)
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setBagItemsChanged")
		end
	end
	DCItem.consume(id, g_i3k_db.i3k_db_get_common_item_is_free_type(id), 1, reason)
end

--根据道具类型得到所有道具
function i3k_game_context:GetAllItemsForType(id)
	local allItem = {}
	for k,v in pairs(self._bagData.items) do
		local item = g_i3k_db.i3k_db_get_other_item_cfg(v.id)
		if item then
			if item.type == id then
				allItem[k] = v
			end
		end
	end
	return allItem or nil
end

--判断装备是否是水晶装备并区分紫和橙 （0:不是水晶装备 1：紫色水晶  2：橙色水晶）
function i3k_game_context:GetBagEquipIsSpecial(equip_id, equip_naijiu)
	if not equip_id then
		return 0
	end
	if equip_naijiu ~= -1 then
		if g_i3k_db.i3k_db_get_common_item_rank(equip_id) == 4 then
			return 1
		elseif g_i3k_db.i3k_db_get_common_item_rank(equip_id) == 5 then
			return 2
		end
	end
	return 0
end

-- 判断当前vip等级是否消耗土灵符(用于判断是否需要弹出需要消耗土灵符的界面)
function i3k_game_context:IsTransNeedItem()
	local vipLvl = self:GetVipLevel()
	return g_i3k_db.i3k_db_get_trans_vip_lvl(vipLvl)
end
-- 判断使用土灵符是否满足
function i3k_game_context:CheckCanTrans(itemId, count)
	local own = self:GetCommonItemCanUseCount(itemId)
	if not self:IsTransNeedItem() then
		count = 0
	end
	return own >= count
end
-- 消耗传送土灵符
function i3k_game_context:UseTrans(itemId, count, what)
	if self:IsTransNeedItem() then
		self:UseCommonItem(itemId, count, what)
	end
end
---------------------------------个人帮贡------------------------------------
---获取个人帮贡
function i3k_game_context:SetSectContribution(currency)
	self._faction_data.my_data.contribution = currency
end
function i3k_game_context:GetSectContribution()
	return self._faction_data.my_data and self._faction_data.my_data.contribution or 0
end

---添加个人帮贡
function i3k_game_context:AddSectContribution(count)
	if self._faction_data.my_data.contribution then
		self._faction_data.my_data.contribution = self._faction_data.my_data.contribution + count
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateMyContribution",self._faction_data.my_data.contribution)
	end
end

---使用个人帮贡
function i3k_game_context:UseSectContribution(count,reason)
	if self._faction_data.my_data.contribution then
		self._faction_data.my_data.contribution = self._faction_data.my_data.contribution - count
		DCItem.consume(g_BASE_ITEM_SECT_MONEY, "帮贡", count, reason)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateMyContribution",self._faction_data.my_data.contribution)
	end
end
---------------------------------竞技场点数----------------------------------
---获取竞技场点数
function i3k_game_context:SetArenaMoney(count)
	self._arenaMoney = count
end

function i3k_game_context:GetArenaMoney()
	return self._arenaMoney
end

---添加竞技场点数
function i3k_game_context:AddArenaMoney(count)
	self._arenaMoney = self._arenaMoney + count
end

---使用竞技场点数
function i3k_game_context:UseArenaMoney(count, reason)
	self._arenaMoney = self._arenaMoney - count
	DCItem.consume(g_BASE_ITEM_ARENA_MONEY, "武斗币", count, reason)
end

--------------------------经验--------------------------------
--获取经验
function i3k_game_context:GetExp()
	return self._roleData.curChar._exp
end

--加经验
function i3k_game_context:AddExp(count, offlineExp, drugExp, wizardexp, citylightexp, sectZoneSpiritexp, swornAdd, globalWorldCardAdd, isAuto)
	-- i3k_log("globalWorldCardAdd", globalWorldCardAdd)
	local finalLevel, finalExp, outExp = g_i3k_db.i3k_db_get_level_exp_on_add_exp(self._roleData.curChar._level, self._roleData.curChar._exp, count, isAuto)
	self._roleData.curChar._expVolume = outExp
	self:SetLevel(finalLevel, finalExp)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "addExpShow", count, offlineExp, drugExp, wizardexp, citylightexp, sectZoneSpiritexp, globalWorldCardAdd, swornAdd)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_AnswerQuestions, "addExpShow", count)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FiveHegemony, "addExpShow", count)
	if offlineExp ~= 0 and self._offlineExpData.dailyOfflineExp > 0 then
		self._offlineExpData.dailyOfflineExp = self._offlineExpData.dailyOfflineExp - offlineExp
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updataOfflineExpProgress", g_i3k_game_context:GetLevelExp())
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_OfflineExpReceive, "onOfflineExpChanged")
	end
end

function i3k_game_context:AddHonor(kill,killermyself)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "addPVPShowKill", kill,killermyself)
end

-- 获取当前持有经验
function i3k_game_context:GetOutExp()
	return self._roleData.curChar._expVolume
end

-- 设置服务器冲关等级
function i3k_game_context:SetSpeedUpLvl(lvl)
	self._speedUpLvl = lvl
end

function i3k_game_context:GetSpeedUpLvl()
	return self._speedUpLvl
end

--登录时离线经验数据
function i3k_game_context:SetOfflineExpData(accTimeTotal, accExpTotal, dailyOfflineExp, accDrops, hideCurDay)
	self._offlineExpData.accTimeTotal = accTimeTotal
	self._offlineExpData.accExpTotal = accExpTotal
	self._offlineExpData.dailyOfflineExp = dailyOfflineExp
	self._offlineExpData.accDrops = accDrops
	self._offlineExpData.hideCurDay = hideCurDay
end
function i3k_game_context:getIsHideOfflineExp()
	return self._offlineExpData.hideCurDay
end
function i3k_game_context:setIsHideOfflineExp(hide)
	self._offlineExpData.hideCurDay = hide
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_OfflineExpReceive, "updateOfflineExpState")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateOfflineExp")
end

--获取离线经验奖励数据
function i3k_game_context:GetOfflineExpData()
	return self._offlineExpData
end

--清空已有的离线经验
function i3k_game_context:ResetDayOfflineExp()
	self._offlineExpData.dailyOfflineExp = 0
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updataOfflineExpProgress", g_i3k_game_context:GetLevelExp())
	g_i3k_ui_mgr:RefreshUI(eUIID_OfflineExpReceive)
end

--离线经验领取
function i3k_game_context:SetOfflineExpTake(exp, doubleExp, needPoint, items,cnt)
	if doubleExp == 1 then --双倍领取
		self:UseOfflineWizardPoint(needPoint, AT_OFFLINE_EXP)
		self:AddOfflinWizardExp(self._offlineExpData.accTimeTotal * 2)

	else
		self:AddOfflinWizardExp(self._offlineExpData.accTimeTotal)
	end
	self._offlineExpData.accTimeTotal = 0
	self._offlineExpData.accExpTotal = 0
	self._offlineExpData.dailyOfflineExp = self._offlineExpData.dailyOfflineExp + exp
	self._offlineExpData.accDrops = {}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updataOfflineExpProgress", g_i3k_game_context:GetLevelExp())
	local str = i3k_get_string(384, exp)
	if cnt and cnt > 0 then
		str = string.format(str..",<c=hlgreen>%s</c>角色经验",cnt)
	end
	g_i3k_ui_mgr:PopupTipMessage(str)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_OfflineExpReceive, "playAnimation")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateOfflineExp")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_OfflineExpReceive, "updateExpRed")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateOfflineRed")
	g_i3k_ui_mgr:ShowGainItemInfo(items)
end

-- 登录时同步挂机精灵数据
function i3k_game_context:SetOfflineWizardData(level, exp, funcPoint, dayBuyPointTimes, curWizard, wizardEndTimes)
	self._offlineWizardData.level = level
	self._offlineWizardData.exp = exp
	self._offlineWizardData.funcPoint = funcPoint
	self._offlineWizardData.curWizard = curWizard
	self._offlineWizardData.wizardEndTimes = wizardEndTimes
	self._offlineWizardData.dayBuyPointTimes = dayBuyPointTimes
end

--购买挂机精灵经验后刷新数据
function i3k_game_context:refreshOfflineWizardData(level,exp)
	self._offlineWizardData.level = level
	self._offlineWizardData.exp = exp
end

-- 清空每日购买挂机精灵点次数
function i3k_game_context:RestDayWizardBuyTimes()
	self._offlineWizardData.dayBuyPointTimes = 0
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BuyWizardPoint, "updateData")
end

-- 获取挂机精灵数据
function i3k_game_context:GetOfflineWizardData()
	return self._offlineWizardData
end

-- 获取挂机精灵等级
function i3k_game_context:GetOfflineWizardLevel()
	return self._offlineWizardData.level
end

-- 加挂机点数
function i3k_game_context:AddOfflineWizardPoint(count, reason)
	self._offlineWizardData.funcPoint = self._offlineWizardData.funcPoint + count
	DCItem.get(g_BASE_ITEM_OFFLINE_POINT, "挂机精灵点", count, reason)
end

-- 消耗离线精灵点（双倍领取离线经验）
function i3k_game_context:UseOfflineWizardPoint(point, reason)
	self._offlineWizardData.funcPoint = self._offlineWizardData.funcPoint - point
	DCItem.consume(g_BASE_ITEM_OFFLINE_POINT, "挂机精灵点", point, reason)
end

function i3k_game_context:SetBuyOfflineWizardPintData(times, needDiamond)
	self._offlineWizardData.dayBuyPointTimes = self._offlineWizardData.dayBuyPointTimes + 1
	self:UseDiamond(needDiamond, true, AT_BUY_OFFLINE_FUNC_POINT)--消耗元宝
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BuyWizardPoint, "updateData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_OfflineExpReceive, "updateExpUI")
	DCItem.buy(g_BASE_ITEM_OFFLINE_POINT, "挂机精灵点", i3k_db_offline_exp.buyPoint, needDiamond, g_BASE_ITEM_DIAMOND, AT_BUY_OFFLINE_FUNC_POINT)
end

-- 加挂机精灵经验
function i3k_game_context:AddOfflinWizardExp(count)
	local finalLevel, finalExp = g_i3k_db.i3k_db_get_level_exp_on_add_offline_point(self._offlineWizardData.level, self._offlineWizardData.exp, count)
	self._offlineWizardData.level = finalLevel
	self._offlineWizardData.exp = finalExp
end

--创建精灵模型
function i3k_game_context:CreateWizar(id)
	local wizarData = i3k_db_arder_pet[id]
	if wizarData.modelID then
		local hero = i3k_game_get_player_hero()
		if hero:isDaZuo() then
			hero:DetachWizard(hero._guid)
			hero:AttachWizard(wizarData);
		end
	end
end

--设置当前精灵ID
function i3k_game_context:SetCurWizard(id)
	self._offlineWizardData.curWizard = id;
end

--获取当前精灵ID
function i3k_game_context:GetCurWizard()
	return self._offlineWizardData.curWizard;
end

function i3k_game_context:SetWizardEndTimes(id,time)
	if time > 0 then
		local timeTick  = i3k_game_get_time();
		if self._offlineWizardData.wizardEndTimes[id] and self._offlineWizardData.wizardEndTimes[id] > timeTick then
			self._offlineWizardData.wizardEndTimes[id] = self._offlineWizardData.wizardEndTimes[id] + time;
		else
			self._offlineWizardData.wizardEndTimes[id] = timeTick + time;
		end
	else
		self._offlineWizardData.wizardEndTimes[id] = time
	end
end
-----------------------旅行精灵--------------------------------
-- 精灵旅行同步
function i3k_game_context:wizardTripSync(tripWizard)
	self._WizardTripData = tripWizard;
end

function i3k_game_context:getCurrTripWizard()
	return self._WizardTripData.currTripWizard;
end

function i3k_game_context:getCurrPhotos()
	if self._WizardTripData and self._WizardTripData.currGetPhotos then
		return self._WizardTripData.currGetPhotos;
	end
end

function i3k_game_context:clsCurrPhotos()
	self._WizardTripData.currGetPhotos = nil
end

function i3k_game_context:getCurrTripWizardTimeCfg()
	return self._WizardTripData.currTripTimeCfg;
end

function i3k_game_context:getCurrTripWizardEndTime()
	if self._WizardTripData.currTripWizard and self._WizardTripData.currTripWizard > 0 then
		if self._WizardTripData and self._WizardTripData.tripEndTime then
			return self._WizardTripData.tripEndTime;
		end
	end
	return 0;
end

function i3k_game_context:setTripTime(tiem)
	self._TripTime = tiem;
end

function i3k_game_context:getTripTime()
	if self._WizardTripData.currTripWizard and self._WizardTripData.currTripWizard > 0 then
		return self._TripTime
	end
	return 0;
end

function i3k_game_context:getlastTryPhotoTime()
	return self._WizardTripData.lastTryGetPhotoTime;
end

function i3k_game_context:getTripWizardOwnPhotos()
	if self._WizardTripData and self._WizardTripData.ownPhotos then
		return self._WizardTripData.ownPhotos;
	end
end

--检测背包里是否有更好的装备
function i3k_game_context:CheckBatterEquip(id)
	local partID = g_i3k_db.i3k_db_get_equip_item_cfg(id).partID
	local haveequip = g_i3k_game_context:GetBetterEquipInfoByPartID(partID)
	if not haveequip then
		g_i3k_game_context:SetBetterEquipStatusByPartID(partID,false)
		return;
	end
	g_i3k_game_context:SetBetterEquipStatusByPartID(partID,true)
	if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onUpdateBatterEquipShow")
	end
end

function i3k_game_context:ReCheckAllBatterEquip()
	for i=1,8 do
		local haveequip = g_i3k_game_context:GetBetterEquipInfoByPartID(i)
		if not haveequip then
			g_i3k_game_context:SetBetterEquipStatusByPartID(i,false)
		else
			g_i3k_game_context:SetBetterEquipStatusByPartID(i,true)
		end
	end
	if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onUpdateBatterEquipShow")
	end
end

---------------武魂相关 start-------------------------
function i3k_game_context:AttachWeaponSoul()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:DetachWeaponSoul();
		hero:AttachWeaponSoul();
	end
end

function i3k_game_context:DetachWeaponSoul()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:DetachWeaponSoul();
	end
end

function i3k_game_context:SetWeaponSoul(weaponSoul)
	self._weaponSoul = weaponSoul
end

function i3k_game_context:setUpLevelMartialSoulData(level)
	if level >= i3k_db_martial_soul_cfg.openLvl and self:GetWeaponSoulGrade() <= 0 then
		self:SetWeaponSoulGrade(1)
		self:SetAutoChangeShow(1)
	end
end

function i3k_game_context:GetWeaponSoulGrade()
	return self._weaponSoul.grade or 0
end

function i3k_game_context:SetWeaponSoulGrade(grade)
	self._weaponSoul.grade = grade;
end

function i3k_game_context:GetWeaponSoulData()
	return	self._weaponSoul
end
function i3k_game_context:GetAutoChangeShow()
	return self._weaponSoul.show.autoChangeShow == 1;
end

function i3k_game_context:SetAutoChangeShow(isAuto)
	self._weaponSoul.show.autoChangeShow = isAuto;
end

function i3k_game_context:GetWeaponSoulParts()
	return self._weaponSoul.parts or {}
end

function i3k_game_context:GetWeaponSoulPartLvl(partID)
	if self._weaponSoul.parts then
		return self._weaponSoul.parts[partID] and self._weaponSoul.parts[partID].level or 1
	end
	return 1
end

function i3k_game_context:GetWeaponSoulCurShow()
	return self._weaponSoul.show and self._weaponSoul.show.curShow or 0
end

function i3k_game_context:SetWeaponSoulCurShow(showID)
	self._weaponSoul.show.curShow = showID
end

function i3k_game_context:GetWeaponSoulShows()
	return self._weaponSoul.show.shows
end

function i3k_game_context:SetWeaponSoulCurHide(isHide)
	self._weaponSoul.show.hide = isHide
end

function i3k_game_context:GetWeaponSoulCurHide()
	if self._weaponSoul.show then
		return self._weaponSoul.show.hide == 0;
	end
	return false;
end
--------------神斗-------
function i3k_game_context:GetWeaponSoulGodStar()
	return self._weaponSoul.godStar
end

function i3k_game_context:SetWeaponSoulGodStarLvl(lvl)
	self._weaponSoul.godStar.curLevel = lvl
end
function i3k_game_context:GetWeaponSoulGodStarCurLvl()
	return self._weaponSoul.godStar and self._weaponSoul.godStar.curLevel or 1
end
function i3k_game_context:SetWeaponSoulGodStarSkillLvl(skillId, lvl)
	self._weaponSoul.godStar.skills[skillId] = lvl
end
function i3k_game_context:GetWeaponSoulGodStarSkills()
	return self._weaponSoul.godStar and self._weaponSoul.godStar.skills or {}
end
function i3k_game_context:GetWeaponSoulGodStarSkillLvl(skillId)
	return self._weaponSoul.godStar and self._weaponSoul.godStar.skills[skillId] or 0
end
---------神斗end-------------
-- 新增武魂形象
function i3k_game_context:AddWeaponSoulShows(showID)
	if not self._weaponSoul.show.shows then
		self._weaponSoul.show.shows = {}
	else
		self._weaponSoul.show.shows[showID] = -1
	end
end

function i3k_game_context:GetWeaponSoulCoin()
	return self._weaponSoul.coin or 0
end

function i3k_game_context:AddWeaponSoulCoin(count)
	self._weaponSoul.coin = self._weaponSoul.coin + count
end

function i3k_game_context:UseWeaponSoulCoin(count, reason)
	self._weaponSoul.coin = self._weaponSoul.coin - count
	DCItem.consume(g_BASE_ITEM_WEAPONSOUL, "武运", count, reason)
end

function i3k_game_context:ChangeSoulModel(showID)
	self:SetWeaponSoulCurShow(showID)
	if self:GetWeaponSoulCurHide() then
		self:AttachWeaponSoul();
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MartialSoul, "updateSoulModel")
end

function i3k_game_context:AutoChangeModel(showID)
	local weaponSoul = i3k_db_martial_soul_display[showID];
	if weaponSoul and weaponSoul.diaplayType == g_MARTIALSOUL_BASE then
		if self:GetAutoChangeShow() then
			self:ChangeSoulModel(showID)
		end
	end
end

function i3k_game_context:isHaveWeaponSoulSkin(showID)
	local allShow = self:GetWeaponSoulShows()
	return allShow[showID]
end

function i3k_game_context:isCanUnlockAddSkin(skinID)
	local skinCfg = i3k_db_martial_soul_display[skinID]
	local UseCount = self:GetCommonItemCanUseCount(skinCfg.needItemID)
	if UseCount >= skinCfg.needItemCount and not self:isHaveWeaponSoulSkin(skinID) then
		return true;
	end
	return false;
end

function i3k_game_context:isShowAddSkinRed()
	local addSoul = g_i3k_db.i3k_get_martialsoul_skin_by_type(g_MARTIALSOUL_ADD)
	for _, e in ipairs(addSoul) do
		if self:isCanUnlockAddSkin(e.id) then
			return true;
		end
	end
	return false;
end

function i3k_game_context:WeaponSoulGradeItemCount()
	local rank = i3k_db_martial_soul_rank[self:GetWeaponSoulGrade() + 1]
	local counts = 0;
	local items = 0;
	if rank and rank.needItems then
		for i,e in ipairs(rank.needItems) do
			if e.itemID ~= 0 then
				items = items + 1;
				if self:GetCommonItemCanUseCount(e.itemID) >= e.itemCount then
					counts = counts + 1;
				end
			end
		end
		if items ~= 0 and items == counts then
			return true;
		end
	end
	return false;
end

function i3k_game_context:isShowGradeRed()
	local AverageLvl, TotalLvl = self:IsCanGrade()
	if self:WeaponSoulGradeItemCount() and AverageLvl and TotalLvl then
		return true;
	end
	return false;
end

function i3k_game_context:GetWeaponSoulTotalLvl()
	local level = 0;
	for _,v in ipairs(self:GetWeaponSoulParts()) do
		level = level + v.level;
	end
	return level;
end

function i3k_game_context:IsCanGrade()
	local grade = self:GetWeaponSoulGrade()
	local rank = i3k_db_martial_soul_rank[grade + 1];
	local AverageLvl = true;
	local TotalLvl = true;
	if rank then
		for _,v in ipairs(self:GetWeaponSoulParts()) do
			if v.level < rank.needAverageLvl  then
				AverageLvl = false;
			end
		end
		if self:GetWeaponSoulTotalLvl() < rank.needTotalLvl then
			TotalLvl = false;
		end
	end
	return AverageLvl, TotalLvl;
end

function i3k_game_context:isMaxGrade()
	local ranks = #i3k_db_martial_soul_rank;
	if self._weaponSoul.grade and ranks then
		if self._weaponSoul.grade == #i3k_db_martial_soul_rank then
			return true;
		end
	end
	return false;
end

function i3k_game_context:SetWeaponSoulUpGradelData(grade, consumeItem)
	local oldPower = math.modf(g_i3k_db.i3k_db_get_battle_power(self:GetWeaponSoulPropData()))
	self._weaponSoul.grade = grade;
	for k, v in pairs(consumeItem) do
		self:UseCommonItem(v.itemID, v.itemCount, AT_WEAPON_SOUL_GRADE_UP)
	end
	self:SetPrePower()
	self:UpdateWeaponSoulProp()
	self:ShowPowerChange()
	local afterPower = math.modf(g_i3k_db.i3k_db_get_battle_power(self:GetWeaponSoulPropData()))
	if self:isMaxGrade() then
		g_i3k_ui_mgr:CloseUI(eUIID_MartialSoulStage);
	else
		g_i3k_ui_mgr:RefreshUI(eUIID_MartialSoulStage);
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_MartialSoul, "updateUpData")
	end
	self:WeaponSoulInvokeUI(afterPower, oldPower)
end

function i3k_game_context:SetWeaponSoulUpLvlData(partID, toLvl, consumeItem)
	local oldPower = math.modf(g_i3k_db.i3k_db_get_battle_power(self:GetWeaponSoulPropData()))
	self._weaponSoul.parts[partID].level = toLvl
	for k, v in pairs(consumeItem) do
		self:UseCommonItem(k, v, AT_WEAPON_SOUL_PART_LVL_UP)
	end
	self:SetPrePower()
	self:UpdateWeaponSoulProp()
	self:ShowPowerChange()
	local afterPower = math.modf(g_i3k_db.i3k_db_get_battle_power(self:GetWeaponSoulPropData()))
	self:WeaponSoulInvokeUI(afterPower, oldPower)
end

function i3k_game_context:WeaponSoulInvokeUI(afterPower, oldPower)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MartialSoul, "loadPartData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MartialSoul, "updateUpData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MartialSoul, "changeBattlePower", afterPower, oldPower)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MartialSoul, "updatePartPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MartialSoul, "updateGradePoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MartialSoul, "updateMartialSoulRed")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateMartialSoulRed")
end

function i3k_game_context:GetWeaponSoulPropData(partData, grade, skillLvl)--skillLvl 武魂神斗技能等级
	local props = {}
	if self:GetLevel() < i3k_db_martial_soul_cfg.openLvl and not partData then
		return props
	end
	local partData = partData or self:GetWeaponSoulParts()
	for i, e in ipairs(partData) do
		local lvlCfg = i3k_db_martial_soul_level[i][e.level]
		for _, c in ipairs(lvlCfg.propTb) do
			if c.propID ~= 0 then
				props[c.propID] = props[c.propID] and props[c.propID] + c.propValue or c.propValue
			end
		end
	end
	local rank = grade or self:GetWeaponSoulGrade()
	local rankCfg = i3k_db_martial_soul_rank[rank]
	if rankCfg then
		for _, e in ipairs(rankCfg.propTb) do
			if e.propID ~= 0 then
				props[e.propID] = props[e.propID] and props[e.propID] + e.propValue or e.propValue
			end
		end
	end
	--神斗技能提升属性
	local ratio = g_i3k_db.i3k_db_get_shen_dou_skill_prop_ratio(g_SHEN_DOU_SKILL_MARTIAL_ID, skillLvl)
	for k, v in pairs(props) do
		props[k] = math.modf(v * (1 + ratio))
	end
	return props
end

function i3k_game_context:UpdateWeaponSoulProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateMartialSoulProp()
	end
end

-- 武魂部位红点
function i3k_game_context:IsWeaponSoulCanUpLvl(partID)
	local lvl = self:GetWeaponSoulPartLvl(partID)
	if i3k_db_martial_soul_level[partID][lvl + 1] then
		local nextLvlCfg = i3k_db_martial_soul_level[partID][lvl+1]
		if self:GetWeaponSoulGrade() < nextLvlCfg.needRank then
			return false
		else
			local items = {}
			local num = 0
			for i, e in ipairs(nextLvlCfg.needItems) do
				if e.itemID ~= 0 then
					items[e.itemID] = items[e.itemID] and items[e.itemID] + e.itemCount or e.itemCount
				end
			end
			for k, v in pairs(items) do
				if self:GetCommonItemCanUseCount(k) >= v then
					num = num + 1
				end
			end
			if num == table.nums(items) then
				return true, items
			end
		end
	end
	return false
end

function i3k_game_context:IsWeaponSoulCanUp()
	for i = 1, 8 do --部位红点
		if self:IsWeaponSoulCanUpLvl(i) then
			return true
		end
	end

	if self:isShowAddSkinRed() then
		return true
	end

	if self:isShowGradeRed() then
		return true
	end

	return false
end

------------------------星耀---------------------
--当前星耀
function i3k_game_context:SetCurStar(starId)
	self._weaponSoul.curStar = starId;
end

function i3k_game_context:GetCurStar()
	if self._weaponSoul.curStar and self._weaponSoul.curStar > 0 then
		return self._weaponSoul.curStar;
	end
	return false;
end
--得到当前星耀的战力  for 我要提升
function i3k_game_context:GetCurStarPower()
	local power = math.modf(g_i3k_db.i3k_db_get_battle_power(g_i3k_game_context:GetStarPropData()))
	return power
end

--可激活的星耀
function i3k_game_context:SetCanActivateStar(starId)
	table.insert(self._activateStar, starId);
end

function i3k_game_context:GetCanActivateStar()
	return self._activateStar;
end

function i3k_game_context:ClsCanActivateStar()
	self._activateStar = {}
end

--所有激活的星耀
function i3k_game_context:SetActiveStars(stars)
	for i,e in ipairs(stars) do
		self._weaponSoul.activeStars[e] = true;
	end
end

function i3k_game_context:SetActiveStar(starId)
	self._weaponSoul.activeStars[starId] = true;
end

function i3k_game_context:GetActiveStars()
	return self._weaponSoul.activeStars;
end

function i3k_game_context:GetActiveStarsCount(starId)
	local counts = 0
	local curStar = starId or self:GetCurStar()
	if curStar then
		local rank = i3k_db_star_soul[curStar].rank
		for k,v in pairs(self._weaponSoul.activeStars) do
			local activeRank = i3k_db_star_soul[k].rank
			if k > 0 and rank == activeRank then
				counts  = counts + 1;
			end
		end
	end
	return counts;
end

--激活的星耀次数
function i3k_game_context:SetActiveTimes(rank)
	self._weaponSoul.activeTimes[rank] = self._weaponSoul.activeTimes[rank] + 1;
end

function i3k_game_context:GetActiveTimes(rank)
	if self._weaponSoul.activeTimes[rank] then
		return self._weaponSoul.activeTimes[rank];
	else
		self._weaponSoul.activeTimes[rank] = 0;
		return 0;
	end
end

function i3k_game_context:ClearPartCahce(partID)
	self._weaponSoul.parts[partID].cache = {}
end

--期望星耀
function i3k_game_context:SetExpectStar(shape)
	self._expectStar.shape[shape.index] = shape;
end

function i3k_game_context:GetExpectStar()
	return self._expectStar.shape;
end

function i3k_game_context:ClsExpectStar(Index)
	self._expectStar.shape[Index] = {};
end

--引导星盘
function i3k_game_context:SetExpectDish(starId)
	self._expectStar.dish = starId;
end

function i3k_game_context:GetExpectDish()
	if self._expectStar.dish > 0 then
		return self._expectStar.dish;
	end
	return false;
end

function i3k_game_context:SetColorSign(arg)
	self._sign.isColorSign = arg;
end

function i3k_game_context:GetColorSign()
	return self._sign.isColorSign;
end

function i3k_game_context:SetShapeSign(arg)
	self._sign.isShapeSign = arg;
end

function i3k_game_context:GetShapeSign()
	return self._sign.isShapeSign;
end

--方位形状
function i3k_game_context:SetPartShape(arg)
	self._weaponSoul.parts[arg.partID].balls = arg.shape;
end

function i3k_game_context:GetPartShape(partID)
	return self._weaponSoul.parts[partID].balls;
end

function i3k_game_context:isHaveStar(starId)
	if self:GetActiveStars() and self:GetActiveStars()[starId] then
		return true;
	end
	return false
end

function i3k_game_context:isUseStar(starId)
	if self:GetCurStar() and self:GetCurStar() == starId then
		return true;
	end
	return false
end

function i3k_game_context:UpdateStarSoulProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateStarSoulProp()
	end
end

function i3k_game_context:SetCurStarData()
	self:SetPrePower()
	self:UpdateStarSoulProp()
	local hero = i3k_game_get_player_hero()
	hero:UpdateShenDouProp()
	self:ShowPowerChange()
end

--当前星耀属性
function i3k_game_context:GetStarPropData(starId, num, skillLvl)--skillLvl 星耀神斗技能等级
	local props = {}
	if self:GetLevel() < i3k_db_martial_soul_cfg.starOpenLvl  then
		return props
	end
	local curStar = starId or self:GetCurStar()
	if curStar then
		local count = num or self:GetActiveStarsCount();
		local rankCfg = i3k_db_star_soul[curStar]
		local addition = i3k_db_martial_soul_cfg.addition[count];
		if rankCfg then
			for _, e in ipairs(rankCfg.propTb) do
				if e.propID ~= 0 then
					if addition and addition > 0 then
						local value = e.propValue + e.propValue *addition;
						props[e.propID] = props[e.propID] and props[e.propID] + value or value
					else
						props[e.propID] = props[e.propID] and props[e.propID] + e.propValue or e.propValue
					end
				end
			end
		end
	end
	--神斗技能提升属性
	local ratio = g_i3k_db.i3k_db_get_shen_dou_skill_prop_ratio(g_SHEN_DOU_SKILL_STAR_ID, skillLvl)
	for k, v in pairs(props) do
		props[k] = math.modf(v * (1 + ratio))
	end
	return props
end


---------------武魂相关 end---------------------------

---------------------宗门数据-------------------



--宗门红点相关（自创武功剩余次数）
function i3k_game_context:SetClanDiySkillTimes(count)
	self._clan_data.diy_skill_times = count

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ClanMain,"updateDiySkillRedPoint")
end

function i3k_game_context:GetClanDiySkillTimes()
	return self._clan_data.diy_skill_times
end




-------------------------------------------------------------------------------------




-------------------------------------------宗门玄铁--------------------------------------------------------

--宗门生产列表
function i3k_game_context:setProductionRecipes(data)

	self._clan_data.production = data

end

function i3k_game_context:getProductionRecipes()
	return self._clan_data.production
end

--生产能量操作
function i3k_game_context:SetProductionSplit(count)
	self.production.splitSP = count
end
--
function i3k_game_context:GetProductionSplit()
	return self.production.splitSP
end

function i3k_game_context:AddProductionSplit(count)
	self.production.splitSP = self.production.splitSP + count
end

function i3k_game_context:RemoveProductionSplit(count,reason)
	self.production.splitSP = self.production.splitSP - count
end

--生产等级
function i3k_game_context:SetProdunctionLvl(value)
	self.production.produceLvl = value
end

function i3k_game_context:GetProdunctionLvl()
	return self.production.produceLvl
end

--生产经验
function i3k_game_context:SetProdunctionExp(value)
	self.production.produceExp = value
end

function i3k_game_context:GetProdunctionExp()
	return self.production.produceExp
end

--购买能量次数
function i3k_game_context:SetProdunctionTImes(value)
	self.production.times = value
end

function i3k_game_context:GetProdunctionTImes()
	return self.production.times
end

function i3k_game_context:AddProdunctionTImes(value)
	self.production.times = self.production.times + value
end

--炼化剩余点数
function i3k_game_context:SetRecycleRemainPoint(value)
	self.production.remain_point = value
end

function i3k_game_context:GetRecycleRemainPoint()
	return self.production.remain_point
end

--炼化炉开启标志
function i3k_game_context:SetRecycleCanOpen(value)
	self.production.recycle_open = value
end

function i3k_game_context:GetRecycleCanOpen()
	return self.production.recycle_open
end

--今日炼化炉已炼化物品数量
function i3k_game_context:SetRecycledItemCnt(value)
	self.production.recycled_itemCnt = value
end

function i3k_game_context:GetRecycledItemCnt()
	return self.production.recycled_itemCnt
end
---------------------------------------------------------------------------------------





function i3k_game_context:GetCurrentDIYSkillId()
	return self._create_kungfu.currentID or 0
end

function i3k_game_context:GetCurrentDIYSkillIconId()
	return self._create_kungfu.skill_icon or 0
end


--操作自创武功数据
function i3k_game_context:setCreateKungfuSkillIcon(id)
	self._create_kungfu.skill_icon = id
end

function i3k_game_context:getCreateKungfuSkillIcon()
	return self._create_kungfu.skill_icon
end

function i3k_game_context:removeCreateKungfuSkillIcon()
	self._create_kungfu.skill_icon = nil
end

--武功数据
function i3k_game_context:setCreateKungfuData(data)

	self._create_kungfu.have_skill = data

end

function i3k_game_context:AddKunfu(data)
	--[[
	local _index = #self._create_kungfu.have_skill

	self._create_kungfu.have_skill[_index + 1] = data
	--]]
	table.insert(self._create_kungfu.have_skill,data)

end


function i3k_game_context:getCreateKungfuData()
	--[[
	if self._create_kungfu then
		return self._create_kungfu.have_skill
	end
	return nil;
	--]]
	return self._create_kungfu.have_skill
end
--临时数据
function i3k_game_context:setTmpKungfuData(data)
	self._create_kungfu.tmp_data = data
end

function i3k_game_context:getTmpKungfuData()
	return self._create_kungfu.tmp_data
end

function i3k_game_context:removeTmpKungfuData()
	self._create_kungfu.tmp_data = {}
end

--武功槽
function i3k_game_context:setKungfuPosCount(count)
	self._create_kungfu.pos_count = count
end

function i3k_game_context:addKungfuPosCount(count)
	self._create_kungfu.pos_count = self._create_kungfu.pos_count + count
end

function i3k_game_context:getKungfuPosCount()
	return self._create_kungfu.pos_count
end

--武功熟练度等级
function i3k_game_context:setKungfuLvlData(level,value)

	self._create_kungfu.level_data.level = level
	self._create_kungfu.level_data.value = value
end

function i3k_game_context:getKungfuLvlData()
	return self._create_kungfu.level_data
end

function i3k_game_context:addKungfuValue(count)
	if count and tonumber(count) then
		local now_level = self._create_kungfu.level_data.level or 1
		local now_value = self._create_kungfu.level_data.value or 0
		local needValue = 0
		if i3k_db_create_kungfu_base[now_level + 1] then
			needValue = i3k_db_create_kungfu_base[now_level + 1].value

			if now_value + count >= needValue then
				now_value = now_value + count - needValue

				now_level = now_level + 1

				self._create_kungfu.level_data.level = now_level
				self._create_kungfu.level_data.value = now_value

				return true
			else
				self._create_kungfu.level_data.value = now_value + count
			end

		end
	end
end

function i3k_game_context:setCurrentSkillGradeId(gradeId)
	self._create_kungfu.gradeId = gradeId
end

function i3k_game_context:GetCurrentSkillGradeId()
	return self._create_kungfu.gradeId
end

function i3k_game_context:setCurrentSkillID(id)
  	self._create_kungfu.currentID = id
end

function i3k_game_context:getCurrentSkillID()
	if self._create_kungfu then
		return self._create_kungfu.currentID
	end
	return 0;
end

function i3k_game_context:setCreateCount(count)
	if count and tonumber(count) then
		self._create_kungfu.create_count = count
	end
end

function i3k_game_context:addCreateCount(count)
	if count and tonumber(count) then
		self._create_kungfu.create_count = self._create_kungfu.create_count + count
	end
end

function i3k_game_context:removeCreateCount(count)
	if count and tonumber(count) then
		self._create_kungfu.create_count = self._create_kungfu.create_count - count
	end
end

function i3k_game_context:getCreateCount()
	return self._create_kungfu.create_count
end

--购买次数
function  i3k_game_context:setKungfuBuyCount(count)
	if count and tonumber(count) then

		self._create_kungfu.buy_count = count

	end
end

function i3k_game_context:addKungfuBuyCount(count)
	if count and tonumber(count) then

		self._create_kungfu.buy_count = count + self._create_kungfu.buy_count

	end
end

function i3k_game_context:getKungfuBuyCount()
	return self._create_kungfu.buy_count
end

-- 帮派仓库 start --
function i3k_game_context:ResetFactionWareHouseShareEvent()
	self._factionWareHouse.shareEvent = {}
end

function i3k_game_context:getFactionWareHouseShareEvent()
	return self._factionWareHouse.shareEvent
end

function i3k_game_context:addFactionWareHouseShareEvent(shareEvents)
	table.insert(self._factionWareHouse.shareEvent, shareEvents)
end

function i3k_game_context:ResetFactionWareHouseShareApply()
	self._factionWareHouse.shareApply = {}
end

function i3k_game_context:getFactionWareHouseShareApply()
	return self._factionWareHouse.shareApply
end

function i3k_game_context:addFactionWareHouseShareApply(shareApplys)
	table.insert(self._factionWareHouse.shareApply, shareApplys)
end
-- 帮派仓库 end --


function i3k_game_context:SetFindPathData(mapID,pos,task_type,petID,transferData,speed,line,callFunc)
	self._find_path.mapid = mapID
	self._find_path.pos = pos
	self._find_path.task_type = task_type
	self._find_path.petID = petID
	self._find_path.transferData = transferData
	self._find_path.speed = speed
	self._find_path.line = line
	self._find_path.callFunc  = callFunc
end

function i3k_game_context:SetTransferState(is_ok)
	self._isTransferOK = is_ok
	self._find_path.line = nil
end

function i3k_game_context:GetTransferState()
	return self._isTransferOK
end

--记录护送Npc状态
function i3k_game_context:setConvoyNpcState(isOpen,mapId)
	if isOpen then
		if not self:getConvoyNpcState() then
			local id,_,state = self:getMainTaskIdAndVlaue()
			local main_task_cfg = g_i3k_db.i3k_db_get_main_task_cfg(id)
			if main_task_cfg then
				if main_task_cfg.type == g_TASK_SHAPESHIFTING and state == 1 then
					return self:CreateMissionNPC(main_task_cfg.arg1, mapId, isOpen)
				end
			end
				local mrg_data = self:GetMarriageTaskData()
				local mrg_cfg = g_i3k_db.i3k_db_marry_task(mrg_data.id, mrg_data.groupID)
			if mrg_data.open > 0 and mrg_data.state == 1 and mrg_cfg and mrg_cfg.type == g_TASK_SHAPESHIFTING then
					return self:CreateMissionNPC(mrg_cfg.arg1, mapId, isOpen)
				end
				local data = g_i3k_game_context:getAdventureTask()
				if data and data.id and data.state == 1 and data.id > 0 then
					local cfg = i3k_db_adventure.tasks[data.id]
				if cfg.type == g_TASK_SHAPESHIFTING then
						return self:CreateMissionNPC(cfg.arg1, mapId, isOpen)
					end
			end
			local swordsmanId, swordsmanValue, swordsmanState = self:getSwordsmanCircleTask()
			if swordsmanId and swordsmanId ~= 0 and swordsmanState == 1 then
				local cfg = i3k_db_swordsman_circle_tasks[swordsmanId]
				if cfg.type == g_TASK_SHAPESHIFTING then
					return self:CreateMissionNPC(cfg.arg1, mapId, isOpen)
				end
			end
			local biographyId, biographyValue, biographyState = self:getBiographyTask()
			if biographyId and biographyId ~= 0 and biographyState == 1 then
				local cfg = i3k_db_wzClassLand_task[self._curBiographyCareer][biographyId]
				if cfg.type == g_TASK_SHAPESHIFTING then
					return self:CreateMissionNPC(cfg.arg1, mapId, isOpen)
				end
			end
		end
	elseif isOpen == false then
		if self:getConvoyNpcState() then
			self:ClearMissionNPC()
			self._convoyState = isOpen
		end
	end
end

function i3k_game_context:getConvoyNpcState()
	if self._convoyState == nil then
		self._convoyState = false
	end
	return self._convoyState
end

--记录护送物品状态
--[[function i3k_game_context:setConvoygoodsState(isOpen,mapId)
	if isOpen then
		if not self:getConvoygoodsState() then
			local id = self:getMainTaskIdAndVlaue()
			local main_task_cfg = g_i3k_db.i3k_db_get_main_task_cfg(id)
			if main_task_cfg.type == g_TASK_CONVOY then
				local id = i3k_db_npc[main_task_cfg.arg1].convoyID
				local mapIds = i3k_db_missionnpcs[id].MapIDs
				local now_mapID = self:GetWorldMapID()
				now_mapID = mapId or now_mapID
				for k,v in pairs(mapIds) do
					if now_mapID == v then

						self._convoyGoodsState = isOpen
					end
				end
			end
		end
	elseif isOpen == false then
		if self:getConvoyNpcState() then

			self._convoyGoodsState = isOpen
		end
	end
end

function i3k_game_context:getConvoygoodsState()
	if self._convoyGoodsState == nil then
		self._convoyGoodsState = false
	end
	return self._convoyGoodsState
end--]]

function i3k_game_context:SetWearEquips(wEquips)
	self._wearEquips = wEquips
end

function i3k_game_context:GetWearEquips()
	return self._wearEquips
end
function i3k_game_context:GetWearEquipPart(pos)
	local wearEquip = self._wearEquips[pos]
	return wearEquip
end
function i3k_game_context:GetWearEquip(pos)
	local wearEquip = self._wearEquips[pos]
	return wearEquip and wearEquip.equip
end
--判断普通或者飞升类型有没有穿戴装备
function i3k_game_context:CheckEquipsIsNilByType(equipType)
	local wEquips = self:GetWearEquips()
	local isNormal = equipType == 1
	local startPos = isNormal and eEquipWeapon or eEquipFlying
	local endPos = isNormal and eEquipArmor or eEquipFlyRing
	for i = startPos, endPos do
		if wEquips[i] and wEquips[i].equip then
			return false
		end
	end
	return true
end

function i3k_game_context:getEquipNumByType(equipType)
	local sum = 0
	local isNormal = equipType == eEquipNormal
	for k, v in pairs(self._wearEquips) do
		if v.equip then
			if (isNormal and k < eEquipFlying) or (not isNormal and k >= eEquipFlying) then
				sum = sum + 1
			end
		end
	end
	return sum
end

--更新身上装备的精炼属性
function i3k_game_context:UpdateWearEquipProperty(pos,refine)
	if self._wearEquips[pos] and self._wearEquips[pos].equip then
		self._wearEquips[pos].equip.refine = refine
	end
	g_i3k_game_context:SetPrePower()
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	g_i3k_game_context:ShowPowerChange()
end

function i3k_game_context:UpdateWearEquipAttrProps(pos, propsValue)
	if self._wearEquips[pos] and self._wearEquips[pos].equip then
		self._wearEquips[pos].equip.attribute = propsValue
	end
	g_i3k_game_context:SetPrePower()
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	g_i3k_game_context:ShowPowerChange()
end

function i3k_game_context:SetBrief(brief)
	if brief then
		self._brief = brief
	end
end

function i3k_game_context:GetBrief()
	return self._brief
end

--function i3k_game_context:Create()
--	self._net = { connected = false, state = i3k_connecting_state.new(), autoReconnect = false, forceCloseErrCode = 0 };
--end

function i3k_game_context:Cleanup()
end

--function i3k_game_context:ConnectToServer(host, port)
--	self._host = host;
--	self._port = port;
--
--	if self._net.connected then
--		i3k_game_network_disconnect();
--	end
--	i3k_game_network_connect(host, port, self);
--end
--
--function i3k_game_context:DisconnectFromServer()
--	if self._net.connected  then
--		i3k_game_network_disconnect();
--	end
--end

--function i3k_game_context:EnableAutoReconnect(val)
--	self._net.autoReconnect = val;
--end
--
--function i3k_game_context:IsEnableAutoReconnect()
--	return self._net.autoReconnect;
--end
--
--function i3k_game_context:OnNetConnected(res)
--	self._net.connected		= res;
--
--	if self._onNetConnected then
--		self._onNetConnected(res);
--	end
--
----	self:EnableAutoReconnect(self._loginData.logined)
--	if not res then
--		self._net.state:notifyConnectClosed()
--	end
--end
--
--function i3k_game_context:OnNetClosed()
--	if self._net.connected then
--		self._net.connected = false;
--
----		if self._host and self._port then
----			i3k_game_network_connect(self._host, self._port, self);
----		end
--	end
--
--	if self._loginData.logined then
--		self._loginData.utype = eLOGIN_TYPE_RECONNECT;
--		DCAccount.logout()
--	end
--	self._net.state:notifyConnectClosed()
--end

--function i3k_game_context:ReconnectToServer()
--	local test = self._net.connected
--	local host = self._host
--	local port = self._port
--	if not self._net.connected then
--		self._loginData.utype = eLOGIN_TYPE_RECONNECT;
--
--		if self._host and self._port then
--			i3k_game_network_connect(self._host, self._port, self);
--		end
--	end
--end
--
--function i3k_game_context:DoLogin(name, channel)
--	local logic = i3k_game_get_logic();
--	if not logic then
--		return false;
--	end
--
--	self._loginData.logined			= false;
--	self._loginData.uname			= name;
--	self._loginData.channel			= channel;
--	self._loginData.ukey			= g_i3k_game_handler:GetLoginUserSID();
--	self._loginData.utype			= eLOGIN_TYPE_NORMAL;
--	self._loginData.lastLogin		= logic:GetTickTime();
--
--	if self._loginData.ukey == "" then
--		self._loginData.godMode		= eLOGIN_TYPE_GOD;
--	else
--		self._loginData.godMode		= 0;
--	end
--
--	i3k_log("do login: " .. name);
--end
--



function i3k_game_context:OnLogined(create)
	--self._loginData.logined = true;
	DCAccount.login(self:GetUniqueId(), i3k_game_get_server_id())
	if create then
		DCAccount.setGender(self:GetRoleGender())
		--DCAccount.addTag("gender", i3k_get_gender_desc(self:GetRoleGender()))
		--DCAccount.addTag("classType", i3k_get_class_desc(self:GetRoleType()))
		DCEvent.onEvent("性别",   {["性别"] =i3k_get_gender_desc(self:GetRoleGender()) })
		DCEvent.onEvent("职业", {["职业"] = i3k_get_class_desc(self:GetRoleType())})
		DCAccount.setLevel(self:GetLevel())

		--DCAccount.addTag("level", "level"..self:GetLevel())
		--DCEvent.onEvent("level",   {level = self:GetLevel()})

		--DCAccount.addTag("vip", "vip"..self:GetVipLevel())
		--DCEvent.onEvent("vip",   {vip = self:GetVipLevel()})

		--DCAccount.addTag("transformlvl", "transformlvl" .. 0)
		--DCAccount.addTag("bwType", i3k_get_transfer_type_desc(self:GetTransformBWtype()))
		--DCEvent.onEvent("转职",  {["转职等级"] = 0})
		--DCEvent.onEvent("正邪", {["正邪"] = i3k_get_transfer_type_desc(self:GetTransformBWtype())})


		--DCAccount.addTag("power", i3k_get_power_desc(self:GetRolePower()))
		--DCEvent.onEvent("战力", {["战力"] = i3k_get_power_desc(self:GetRolePower())})

		local mainTaskId = self:getMainTaskIdAndVlaue()
		--DCAccount.addTag("主线任务", mainTaskId)
		--DCEvent.onEvent("主线任务", {["任务ID"] = mainTaskId})

		local WeaponTaskId = self:getWeaponTaskIdAndLoopType()
		--DCAccount.addTag("神兵任务", WeaponTaskId)
		--DCEvent.onEvent("神兵任务", {["任务ID"] = WeaponTaskId})
		i3k_game_role_info_changed(gCreateRole)
		local mainTaskId = self:getMainTaskIdAndVlaue()
		DCTask.begin(mainTaskId,DC_MainLine)
		local WeaponTaskId = self:getWeaponTaskIdAndLoopType()
		DCTask.begin(WeaponTaskId,DC_BranchLine)
		g_i3k_game_handler:RoleBreakPoint("Game_Create_Role", "")

	end
	g_i3k_game_handler:RoleBreakPoint("Game_Role_Login", "")
	i3k_game_role_info_changed(gRoleLogin)
	DCAccount.setAccountType(DC_Anonymous)
	DCAccount.setGameServer(i3k_game_get_server_id())

--[[
	for k,v in ipairs(i3k_db_mercenaries) do
		local taskID = g_i3k_game_context:getPetTskIdAndValueById(k)
		DCAccount.removeTag("佣兵任务"..k, "")
		DCAccount.addTag("佣兵任务"..k, taskID)
	end
	--]]

	self:InitBetterEquipStatus()
	-- 通知服务器，本地随从血池设置
	local cfg = g_i3k_game_context:GetUserCfg()
	local canUse =cfg:getIsPetCanUsePool() == true and 1 or 0
	local auto = cfg:GetAutoSaleEquip()
	i3k_sbean.syncPetCanUsePool(canUse)
	i3k_sbean.syncAutoSaleEquip(auto)
	local autoDrug = cfg:GetAutoSaleDrug()
	i3k_sbean.syncAutoSaleDrug(autoDrug)
	if self._shareSdkState then
		self:setShareSdkState(false)
		local bean = i3k_sbean.share_success.new()
		i3k_game_send_str_cmd(bean)
	end
end
--
--function i3k_game_context:GetLoginData()
--	return self._loginData;
--end
--
--function i3k_game_context:OnAuthed()
--	self._net.state:notifyAuthSuccess()
--end
--
--function i3k_game_context:forceClose(errCode)
--	self._net.forceCloseErrCode = errCode
--	self._net.state:notifyForceClose()
--end
--
--function i3k_game_context:getforceCloseErrCode()
--	return self._net.forceCloseErrCode
--end
--
--function i3k_game_context:trySetWait()
--	self._net.state:trySetWait()
--end
--
--function i3k_game_context:clearWait()
--	self._net.state:clearWait()
--end
--
--function i3k_game_context:updateConnectState(dtTime)
--	self._net.state:onTick(dtTime)
--end
function i3k_game_context:setShareSdkState(state)
	self._shareSdkState = state
end

function i3k_game_context:CreateChar(ctype, name)
	self._createData = { };
	self._createData.ctype	= ctype;
	self._createData.name	= name;
end

function i3k_game_context:GetCreateCharInfo()
	return self._createData;
end

function i3k_game_context:GetUserCfg()
	return i3k_get_load_cfg()
end

function i3k_game_context:SyncGameInfo(day)
	self._refreshDay = day
end

function i3k_game_context:RefreshDay()
	self._refreshDay = self._refreshDay + 1
	self:ResetBuyCoinTimes()
	self:ResetDungeonDayLog()

	self:AddLoginDays(1)
	--begin刷新帮派
	local roleId = self:getFactionTaskRoleId()
	self:removeFinishFactionTask(roleId)
	self:setFactionTaskRefreshCount(0)
	self:UpdateFactionStoreRefreshTimes(0)
	self:SetFactionKickTimes(0)

	self:ResetDayUseItemsTimesData() --清空限制使用物品购买次数数据
	self:ResetDayOfflineExp() --清空每日已有的离线经验
	self:RestDayWizardBuyTimes()
	self:SetCanwuTimes(0)
	self:SetBuyTimes(0)
	self:resetSpyStoryInfo()
	g_i3k_ui_mgr:RefreshUI(eUIID_CanWu)

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Activity, "updateFiveUniqueActivity") --刷新爬塔
	--神兵任务刷新
	local weaponData = self:GetWeaponTask()
	self:setWeaponTaskData(weaponData.id,weaponData.taskType,weaponData.args,0)

	self:ResetDaySecretareaTask()---清空任务栏中秘境

	for k,v in ipairs(i3k_db_mercenaries) do   --清空随从合修任务的每日次数
		if self:GetDailyCompleteTask(v.id) then
			self:SetDailyCompleteTask(v.id, 0)
		end
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_Task)
	if g_i3k_ui_mgr:GetUI(eUIID_SuiCong) then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(516))
		g_i3k_ui_mgr:CloseUI(eUIID_SuiCong)
	end

	for i,v in pairs(self._activityLogs) do
		self._activityLogs[i].dayVIPBuyTimes = 0
		self._activityLogs[i].dayItemAddTimes = 0
		self._activityLogs[i].dayEnterTimes = 0
	end
	self:RefreshDayStrengthTime();--刷新神器强化次数
	
	--神兵兵魂技能经验数
	self._ShenbingBinghunSkillExp = 0

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Activity, "updateDailyActivity")

	self:SetFactionEscortRefreshTimes(0) -- 运镖刷新次数
	self:SetFactionEscortRobTimes(0)
	self:SetFactionEscortAccTimes(0)
	--重置下劫镖状态
	self:SetRobState(0)
	self:SetEscortRobState(0)

	self:SetProdunctionTImes(0) --分解能量次数刷新
	self:RefreshBuyVitTimes() -- 刷新每日购买体力次数
	local schedule = {}
	schedule.activity = 0
	schedule.padding1 = 0
	schedule.padding2 = 0
	schedule.rewards = {}
	schedule.task2num = {}
	self:SetScheduleInfo(schedule)
	self:clearStelaAct()
	self:setMarryTimeIndex(0) -- 清空当日结婚预约index
	self:checkSubLineTaskIsLock()
	self:ResetTowerDefenceDayEnterTimes() --清空日进入次数
	self:resetRobberDayRefreshTimes()
	self:resetXinghunRedPoint(true)
	self:UpdateAdventureTaskValue(g_TASK_TOMORROW)
	self:setLongYinPracticeRedPoint(true)
	self:refreshSweepCountFlag()
	self:clearRoleFestival()
	self:setChessTaskFinishTimes(0)
	self:setNewYearRedGetNpcid({})
	self:ClearExtraHarvestTimes()
	self:clearFestivalTaskTimes()
	self:clearPetsActionTimes()
	self:ResetubileeStep3MineralTimes() --重置周年庆活动阶段3采矿次数
	self:refreshDefenceWarExpFlag()--刷新城战之光
	self:SetCprReviveTimes(0)
	self:ResetFiveElementsInfo() --五行轮转数据刷新
	self:ringMissionDayFinishNumRefresh()
	self:RefreshRecordExchangeTimes()
	self:refreshArrayStoneFreetimes()
	self:ResetDayUseCardData() --充值卡天day使用信息
	self:cleanNewFestivalAndRefresh()
	if self:GetSuperOnHookValid() and self:getRoleSpecialCardsEndTime(MONTH_CARD) < i3k_game_get_time() then
		self:SetSuperOnHookValid(false)
	end
	self:setIsHideOfflineExp(0)--不隐藏离线经验提示
	self:clearCatchSpiritCall()
	self:updateBiographyTaskValue(g_TASK_TOMORROW)
	self:dayClearSpringRollData()
end

function i3k_game_context:SetCurrentPKValue(value)
	if tonumber(value) >= 0 and tonumber(value) < 10000 then
		if self._roleData.curChar._pkValue then
			self._roleData.curChar._pkValue = tonumber(value)
		end
	end
end

function i3k_game_context:GetCurrentPKValue()
	if self._roleData.curChar._pkValue then
		return self._roleData.curChar._pkValue
	else
		return -1
	end
end

function i3k_game_context:GetCurrentRoleType()
	if self._roleData.curChar then
		if self._roleData.curChar._ctype then
			return self._roleData.curChar._ctype
		else
			return -1
		end
	else
		return -1
	end
end

--帮派任务数据

function i3k_game_context:setFactionTaskBankData(data)
	self._faction_task.task_bank = data
end

function i3k_game_context:getFactionTaskBankData()

	local my_id = self:GetRoleId()
	local my_name = self:GetRoleName()
	local currentRoleID = self:getFactionTaskRoleId()
	local currentGuid = self:getFactionTaskGuid()

	for k,v in pairs(self._faction_task.task_bank) do
		v.sortID = 0
		if v.sid == currentGuid and my_id == currentRoleID then
			v.sortID = 1
		end
	end
	table.sort(self._faction_task.task_bank,function (a,b)
		return a.sortID > b.sortID
	end)

	return self._faction_task.task_bank
end

function i3k_game_context:setFactionShareTaskData(data)
	self._faction_task.share_task = data
end

function i3k_game_context:addFactionShareTaskData(data)
	table.insert(self._faction_task.share_task,data)
end

function i3k_game_context:getFactionShareTaskData()
	return self._faction_task.share_task
end
function i3k_game_context:cleanFactionShareTask()
	self._faction_task.share_task = {}
end

function i3k_game_context:setFactionFinishTaskData(data)
	self._faction_task.finish_task = data
end

function i3k_game_context:getFactionFinishTaskData()
	return self._faction_task.finish_task
end

function i3k_game_context:setFactionCurrentTask(roleID,guid,value,taskID,roleName,receiveTime)
	if self._faction_task.current_task then
		local t = self._faction_task.current_task
		t.roleID = roleID
		t.guid = guid
		t.value = value
		t.taskID = taskID
		t.roleName = roleName
		t.receiveTime = receiveTime
	else
		self._faction_task.current_task = {
				roleID = roleID, guid = guid, value = value, taskID = taskID,
				roleName = roleName, receiveTime = receiveTime
			}
	end
end

function i3k_game_context:AddFactionCurrTaskValue(value)
	self._faction_task.current_task.value = value
end

function i3k_game_context:getFactionCurrentTask()
	return self._faction_task.current_task
end
--获取帮派任务的人的Id
function i3k_game_context:getFactionTaskRoleId()
	return self._faction_task.current_task.roleID
end
--获取帮派任务的唯一id
function i3k_game_context:getFactionTaskGuid()
	return self._faction_task.current_task.guid
end

--获取帮派任务的id和value和接取时间
function i3k_game_context:getFactionTaskIdValueTime()
	local tmp = self._faction_task.current_task
	if tmp then
		return tmp.taskID, tmp.value, tmp.receiveTime, tmp.roleName
	end
end

function i3k_game_context:removeFinishFactionTask(roleId)

	--self._faction_task.current_task = {}
	for k,v in pairs(self._faction_task.current_task) do
		self._faction_task.current_task[k] = nil
	end

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"removeFactionTaskItem")
	self:removeTaskData(TASK_CATEGORY_SECT)
end

function i3k_game_context:setFactionTaskRefreshCount(count)
	if self._faction_task then
		self._faction_task.refresh_count = count
	end
end

function i3k_game_context:getFactionTaskRefreshCount()
	return self._faction_task.refresh_count
end

function i3k_game_context:removeFactionTaskRefreshCount(count)
	self._faction_task.refresh_count = self._faction_task.refresh_count - count
end

function i3k_game_context:addFactionTaskRefreshCount(count)
	self._faction_task.refresh_count = self._faction_task.refresh_count + count
end

function i3k_game_context:setFactionTaskFinishCount(count)
	self._faction_task.finish_count = count
end

function i3k_game_context:addFactionTaskFinishCount(count)
	self._faction_task.finish_count = self._faction_task.finish_count + count
end

function i3k_game_context:getFactionTaskFinishCount()
	return self._faction_task.finish_count
end

--入帮时间
function i3k_game_context:setlastjointime(join_time)
	self._jointime = join_time
end

function i3k_game_context:getlastjointime()
	return self._jointime
end

--分堂数据
function i3k_game_context:setFactionFightGroupData(data)
	self._factionFightGroupData = data;
end
function i3k_game_context:getFactionFightGroupData()
	return self._factionFightGroupData or {};
end
--堂主id
function i3k_game_context:getFactionFightGroupLeaderId(groupId)
	local group = self._factionFightGroupData[groupId]
	if group then
		return group.leader
	end
	return nil
end
--判断时候有分堂
function i3k_game_context:isInFactionFightGroup(roleId)
	if self._factionFightGroupData then
		for k,_ in pairs(self._factionFightGroupData) do
			if self:isInFactionFightGroupById(roleId,k) then
				return true
			end
		end
	end
	return false
end
--获取所在分堂id
function i3k_game_context:getFightGroupId()
	if self._factionFightGroupData then
		local roleId = self:GetRoleId()
		for k, v in pairs(self._factionFightGroupData) do
			if v.member[roleId] then
				return k
			end
		end
	end
end
--判断是否在某个分堂
function i3k_game_context:isInFactionFightGroupById(roleId, groupId)
	local group = self._factionFightGroupData[groupId]
	if group then
		for k,v in pairs(group.member) do
			if k == roleId then
				return true
			end
		end
	end
	return false
end
--判断是否为堂主
function i3k_game_context:roleIsFactionFightGroupLeaderById(roleId, groupId)
	local group = self._factionFightGroupData[groupId]
	if group then
		if roleId == group.leader then
			return group.id
		end
	end
	return nil
end
--判断玩家是否为某堂堂主 返回分堂id
function i3k_game_context:isInFactionFightGroupLeaderById(groupId)
	local group = self._factionFightGroupData[groupId]
	if group then
		if self:GetRoleId() == group.leader then
			return group.id
		end
	end
	return nil
end
--判断玩家是否为堂主 返回分堂id
function i3k_game_context:isInFactionFightGroupLeader()
	if not self._factionFightGroupData then
		return nil
	end
	for k,_ in pairs(self._factionFightGroupData) do
		local id = self:isInFactionFightGroupLeaderById(k)
		if id ~= nil then
			return id
		end
	end
	return nil
end

--判断权限
function i3k_game_context:ishaveFactionFightGroupPower(powerType)
	local pos = g_i3k_game_context:GetSectPosition()
	if i3k_db_faction_power[pos] and i3k_db_faction_power[pos][powerType]  then
		return i3k_db_faction_power[pos][powerType] == 1
	end
	return false
end

--申请数据
function i3k_game_context:setFightGroupApplyData(groupId, applys)
	if self._factionFightGroupData then
		self._factionFightGroupData[groupId].applys = applys
	end
end

function i3k_game_context:getFightGroupApplysById(groupId)
	return self._factionFightGroupData[groupId].applys or {}
end

--记录申请状态
function i3k_game_context:setFightGroupApplyDataByRole(groupId)
	if self._factionFightGroupData and self._factionFightGroupData[groupId].applys then
		self._factionFightGroupData[groupId].applys[self:GetRoleId()] = true
	end
end

--判断是否已经申请该分堂
function i3k_game_context:isApplyFightGroupById(groupId)
	if self._factionFightGroupData then
		if self._factionFightGroupData[groupId].applys[self:GetRoleId()] then
			return true
		end
	end
	return false
end
--分堂改名
function i3k_game_context:renameFightGroupById(groupId,name)
	if self._factionFightGroupData and self._factionFightGroupData[groupId]then
		self._factionFightGroupData[groupId].name = name
	end
end
--同意申请
function i3k_game_context:agreeFightGroupApply(groupId,roleId)
	if self._factionFightGroupData and self._factionFightGroupData[groupId]then
		self._factionFightGroupData[groupId].applys[roleId] = nil
		self._factionFightGroupData[groupId].member[roleId] = true
	end
end
--拒绝申请
function i3k_game_context:disagreeFightGroupApply(groupId,roleIds)
	if self._factionFightGroupData and self._factionFightGroupData[groupId]then
		for k,_ in pairs(roleIds) do
			self._factionFightGroupData[groupId].applys[k] = nil
		end
	end
end
--踢出分堂
function i3k_game_context:kickFromFightGroup(groupId,roleId)
	if self._factionFightGroupData and self._factionFightGroupData[groupId]then
		self._factionFightGroupData[groupId].member[roleId] = nil
	end
end
--修改堂主
function i3k_game_context:changeLeaderFightGroup(groupId,roleId)
	if self._factionFightGroupData and self._factionFightGroupData[groupId]then
		self._factionFightGroupData[groupId].leader = roleId
	end
end
--解散分堂
function i3k_game_context:dismissFightGroup(groupId)
	if self._factionFightGroupData and self._factionFightGroupData[groupId]then
		self._factionFightGroupData[groupId] = nil
	end
end
--判断分堂人数是否已满
function i3k_game_context:fightGroupIsFull(groupId)
	if self._factionFightGroupData and self._factionFightGroupData[groupId]then
		local num = table.nums(self._factionFightGroupData[groupId].member)
		if num >= i3k_db_faction_fightgroup.common.total then
			return true
		end
	end
	return false
end
--获取分堂数量上限
function i3k_game_context:getFightGroupMaxNum()
	local now_level = self:GetFactionLevel()
	return i3k_db_faction_uplvl[now_level].fightGroupCount
end
--是否有申请分堂数据
function i3k_game_context:setFightGroupApplyStatus(status)
	self._factionFightGroupApplyStatus = status

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionFightGroup, "updateRedPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain, "updateFightGroupPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB,"updateFactionRed", self:getFactionRedPoint())
end
function i3k_game_context:getFighGroupApplysStatus()
	return self._factionFightGroupApplyStatus or false
end

--帮战积分
function i3k_game_context:setFactionFightScore(whiteScore, blackScore)
	self._factionFightGroupScore = {whiteScore = whiteScore, blackScore = blackScore}
end

function i3k_game_context:getFactionFightScore()
	return self._factionFightGroupScore or {}
end
--设置帮战当前的胜负状态
function i3k_game_context:setWinForce(winForce)
	self._factionFightGroupWinForce = winForce
end
function i3k_game_context:getWinForce()
	return self._factionFightGroupWinForce
end
--获取帮战宝箱时间
function i3k_game_context:getFactionWarBoxMaxTime()
	local timeStamp = g_i3k_get_GMTtime(i3k_game_get_time())
	local year = os.date("%Y", timeStamp )
	local month = os.date("%m", timeStamp )
	local day = os.date("%d", timeStamp)
	for i = 1, #i3k_db_faction_fight_cfg.timebucket do
		local starttime = string.split(i3k_db_faction_fight_cfg.timebucket[i].applytime, ":")
		local overtime = string.split(i3k_db_faction_fight_cfg.timebucket[i].beginfight, ":")
		local overfight = string.split(i3k_db_faction_fight_cfg.timebucket[i].endfight, ":")
		local opentime = os.time({year = year, month = month, day = day, hour = starttime[1], min = starttime[2], sec = starttime[3]})
		local closetime = os.time({year = year, month = month, day = day, hour = overtime[1], min = overtime[2], sec = overtime[3]})
		local closefight = os.time({year = year, month = month, day = day, hour = overfight[1], min = overfight[2], sec = overfight[3]})

		if timeStamp >= closetime and timeStamp <= closefight then
			return closefight - closetime
		end
	end
	return 0
end

-- 获取帮派战预推送是否开启
function i3k_game_context:testFactionFightState()
	return false, false
end

function i3k_game_context:judgeInFactionFight()
	local timeStamp = g_i3k_get_GMTtime(i3k_game_get_time())
	local year = os.date("%Y", timeStamp )
	local month = os.date("%m", timeStamp )
	local day = os.date("%d", timeStamp)
	local totalDay = g_i3k_get_day(i3k_game_get_time())
	local week = math.mod(g_i3k_get_week(totalDay), 7)
	local isOpen = i3k_get_activity_is_open(i3k_db_faction_fight_cfg.commonrule.openday)
	local startTime = string.split(i3k_db_faction_fight_cfg.timebucket[1].applytime, ":")--报名开始时间
	local beginTime = string.split(i3k_db_faction_fight_cfg.timebucket[3].endfight, ":")--战斗结束时间
	local openTime = os.time({year = year, month = month, day = day, hour = startTime[1], min = startTime[2], sec = startTime[3]})
	local fightTime = os.time({year = year, month = month, day = day, hour = beginTime[1], min = beginTime[2], sec = beginTime[3]})
	if timeStamp > openTime and timeStamp < fightTime and isOpen then
		return true
	end
	return false
end

-- onUpdate
function i3k_game_context:checkFactionFightState(dTime)
	local showState = g_i3k_db.i3k_db_get_faction_fight_time_check()
	self:onFactionFightStateChangeHandler(showState)
end

function i3k_game_context:onFactionFightStateChangeHandler(showState)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 17 , showState, false )
end

--操作帮派数据
function i3k_game_context:SetFactionListtData(data)
	self._faction_data.faction_list = data
end

function i3k_game_context:GetFactionListData()
	return self._faction_data.faction_list
end

function i3k_game_context:SetFactionSelectData(data)
	self._faction_data.select_data = data
end

function i3k_game_context:GetFactionSelectData()
	return self._faction_data.select_data
end

function i3k_game_context:AddFactionSelectId(data)
	for k,v in pairs(data) do
		self._faction_data.select_data[v] = true
	end
end

function i3k_game_context:getFactionRoleDataById(id)
	local tmp_members = self._faction_data.member_data.members
	for k,v in ipairs(tmp_members) do
		if v.role.id == id then
			return v
		end
	end
	return nil
end

--获取帮派的成员列表
function i3k_game_context:GetFactionMemberList()
	local chiefId = g_i3k_game_context:GetFactionChiefID()
	local tmp_members = nil
	if chiefId then
		tmp_members = self._faction_data.member_data.members
		if tmp_members then
			local tmp_data = {}
			for k,v in ipairs(tmp_members) do
				if v.role.id == chiefId then
					tmp_data = v
					table.remove(tmp_members,k)
					break
				end
			end
			table.sort(tmp_members,function (a,b)
				return a.role.level > b.role.level
			end)

			table.insert(tmp_members,1,tmp_data)
		else
			tmp_members = {}
		end
	else
		tmp_members = {}
	end
	return tmp_members
end

--获取帮主的ID
function i3k_game_context:GetFactionChiefID()
	local sect = self._faction_data.base_data.sect
	if sect then
		return sect.overview.chiefId
	end
	return nil
end

--更新帮主id
function i3k_game_context:updateFactionChiedID(id)
	local sect = self._faction_data.base_data.sect
	if sect then
	 sect.overview.chiefId = id
	end
end

--获取副帮主的ID
function i3k_game_context:GetFactionDeputyID()
	return self._faction_data.member_data.deputy or {}
end

--获取帮派长老的ID
function i3k_game_context:GetFactionElderID()
	return self._faction_data.member_data.elder or {}
end

--获取帮派精英id
function i3k_game_context:GetFactionEliteID()
	return self._faction_data.member_data.elite or {}
end


function i3k_game_context:SetFactionApplyData(data)

	self._faction_data.apply_data = data

end

function i3k_game_context:GetFactionApplyData()
	return self._faction_data.apply_data
end

function i3k_game_context:RemoveFactionOneApply(roleID)
	for k,v in ipairs(self._faction_data.apply_data) do
		if roleID == v.id then
			table.remove(self._faction_data.apply_data,k)
			break
		end
	end
end

function i3k_game_context:ClearFactionApply()
	self._faction_data.apply_data = {}
end



function i3k_game_context:SetFactionBaseData(data)
	self._faction_data.base_data = data
	self:SetFactionSectId(self._faction_data.base_data.sect.overview.sectId)
	self:SetFactionCurrentMemberCount(self._faction_data.base_data.sect.overview.memberCount)
end

function i3k_game_context:GetFactionBaseData()
	return self._faction_data.base_data
end
--获取当天活跃贡献值
function i3k_game_context:GetFactionDayVitality()
	return self._faction_data.base_data.stats.dayVitality
end
--获取当前活力
function i3k_game_context:GetFactionVitality()
	return self._faction_data.base_data.sect.vitality
end

--扣除帮派活力值
function i3k_game_context:UseFactionVitality(count)
	self._faction_data.base_data.sect.vitality = self._faction_data.base_data.sect.vitality - count
end

--添加帮派活力值
function i3k_game_context:AddFactionVitality(count)
	self._faction_data.base_data.sect.vitality = self._faction_data.base_data.sect.vitality + count
end



function i3k_game_context:SetFactionApplicants(count)
	self._faction_data.base_data.sect.applicants = count
end

function i3k_game_context:RemoveFactionApplicants(count)
	self._faction_data.base_data.sect.applicants = self._faction_data.base_data.sect.applicants - count
end

--获取帮派Id
function i3k_game_context:GetFactionSectId()
	return self._faction_data.faction_id
end

function i3k_game_context:SetFactionSectId(id)
	self._faction_data.faction_id = id
end

function i3k_game_context:setSectFactionLevel(sectlvl)
	self._sectLevel = sectlvl
end

function i3k_game_context:getSectFactionLevel()
	return self._sectLevel
end

function i3k_game_context:SetFactionCreed(t)
	self._faction_data.base_data.sect.overview.creed = t
end
--获取帮派教义
function i3k_game_context:GetFactionCreed()
	return self._faction_data.base_data.sect.overview.creed or ""
end

function i3k_game_context:GetFactionLimitJoinLevel()
	return self._faction_data.base_data.sect.overview.joinLvlReq
end

function i3k_game_context:SetFactionLevel(t)
	self._faction_data.base_data.sect.overview.level = t
end

function i3k_game_context:AddFactionLevel(count)
	self._faction_data.base_data.sect.overview.level = self._faction_data.base_data.sect.overview.level + count
end

--获取帮派等级
function i3k_game_context:GetFactionLevel()
	return self._faction_data.base_data.sect.overview.level
end
--获取当前服最高帮派等级
function i3k_game_context:GetSeverFactionMaxLvl()
	return self._faction_data.base_data.maxSectLvl
end

function i3k_game_context:SetFactionName(t)
	self._faction_data.base_data.sect.overview.name = t
end
--获取帮派名字
function i3k_game_context:GetFactionName()
	if  self._faction_data.base_data and self._faction_data.base_data.sect then
		return self._faction_data.base_data.sect.overview.name
	end
	return ""
end

function i3k_game_context:SetFactionIcon(t)
	self._faction_data.base_data.sect.overview.icon = t
end

--获取帮派图标
function i3k_game_context:GetFactionIcon()
	return self._faction_data.base_data.sect.overview.icon
end

function i3k_game_context:SetFactionFrame(t)
	self._faction_data.base_data.sect.overview.frame = t
end
--获取帮派图标外框
function i3k_game_context:GetFactionFrame()
	return self._faction_data.base_data.sect.overview.frame
end

function i3k_game_context:AddFactionCurrentMemberCount(count)
	self._faction_data.member_count = self._faction_data.member_count + count
end

function i3k_game_context:RemoveFactionCurrentMemberCount(count)
	self._faction_data.member_count = self._faction_data.member_count - count
end

--获取帮派当前人数
function i3k_game_context:GetFactionCurrentMemberCount()
	return self._faction_data.member_count
end

function i3k_game_context:SetFactionCurrentMemberCount(count)
	self._faction_data.member_count = count
end

--设置帮派占领旗子数量
function i3k_game_context:SetFactionMapFlagCount(count)
	self._faction_data.map_flag_count = count
end

function i3k_game_context:GetFactionMapFlagCount()
	return self._faction_data.map_flag_count
end

--获取帮派上次升级时间戳
function i3k_game_context:GetFactionUpGradeTime()
	return self._faction_data.base_data.sect.lastUpgradeTime
end

function i3k_game_context:SetFactionUpGradeTime(t)
	self._faction_data.base_data.sect.lastUpgradeTime = t
end

function i3k_game_context:SetFactionMyData(data)
	self._faction_data.my_data = data
end

function i3k_game_context:GetFactionMyData()
	return self._faction_data.my_data
end

function i3k_game_context:SetFactionWorshipData(data)
	self._faction_data.worship = data
end

function i3k_game_context:GetFactionWorshipData()
	return self._faction_data.worship
end

function i3k_game_context:SetFactionSkillData(data)
	self._faction_data.skill = data
end

function i3k_game_context:GetFactionSkillData()
	return self._faction_data.skill
end

function i3k_game_context:SetOpenDineData(data)
	if self._faction_data.dine.open then
		self._faction_data.dine.open = data
	else
		self._faction_data.dine.open = {}
		self._faction_data.dine.open = data
	end
end

function i3k_game_context:GetOpenDineData()
	return self._faction_data.dine.open or {}
end

function i3k_game_context:SetDineJoinData(data)
	if self._faction_data.dine.join then
		self._faction_data.dine.join = data
	else
		self._faction_data.dine.join = {}
		self._faction_data.dine.join = data
	end
end

function i3k_game_context:GetDineJoinData()
	return self._faction_data.dine.join or {}
end

function i3k_game_context:SetDineListData(data)
	self._faction_data.dine_list = data
end

function i3k_game_context:GetDineListData()
	return self._faction_data.dine_list
end

--操作帮派商店相关数据
function i3k_game_context:SetFactionStoreData(data)
	self._faction_data.store_data = data
end

function i3k_game_context:GetFactionStoreData()
	return self._faction_data.store_data
end

function i3k_game_context:AddFactionStoreRefreshTimes(count)
	local times = count or 1
	self._faction_data.store_data.refreshTimes = self._faction_data.store_data.refreshTimes + times
end

function i3k_game_context:UpdateFactionStoreItems(items)
	self._faction_data.store_data.items = items
end
function i3k_game_context:UpdateFactionStoreRefreshTimes(count)
	if self._faction_data and self._faction_data.store_data then
		self._faction_data.store_data.refreshTimes = count
	end
end

function i3k_game_context:GetFactionStoreItems()
	return self._faction_data.store_data.items
end

function i3k_game_context:GetFactionStoreRefreshTimes()
	return self._faction_data.store_data.refreshTimes
end
--------------------------------
function i3k_game_context:SetFactionDungeonOverData(data)
	self._faction_data.dungeon_over = data
end


-- function i3k_game_context:GetFactionDungeonOverData()
-- 	return self._faction_data.dungeon_over
-- end

function i3k_game_context:SetFactionDungeonData(data)

	self._faction_data.dungeon_data = data

end

function i3k_game_context:GetFactionDungeonData()
	return self._faction_data.dungeon_data
end

function i3k_game_context:SetFactionDungeonAwardRecord(data)

	self._faction_data.award_record = data

end

function i3k_game_context:GetFactionDungeonAwardRecord(data)
	return self._faction_data.award_record
end



function i3k_game_context:SetFactionDungeonDamage(data)

	self._faction_data.damage_data = data

end

function i3k_game_context:GetFactionDungeonDamage()
	return self._faction_data.damage_data
end

--帮派副本掉落
function i3k_game_context:setFactionDungeonAward(data)

	self._faction_data.dungeon_award = data

end

function i3k_game_context:getFactionDungeonAward()
	return self._faction_data.dungeon_award
end

function i3k_game_context:setFactionSelectIcon(id)
	self._faction_data.faction_icon = id
end

function i3k_game_context:getFactionSelectIcon()
	return self._faction_data.faction_icon
end


function i3k_game_context:setFactionDungeonApplyItemID(id)
	self._faction_data.apply_itemID = id
end

function i3k_game_context:getFactionDungeonApplyItemID()
	return self._faction_data.apply_itemID
end

function i3k_game_context:setShareTaskPunishTime(value)
	self._faction_data.share_task_punish_time = value

end

function i3k_game_context:getShareTaskPunishTime()
	return self._faction_data.share_task_punish_time
end

--帮派副本状态
function i3k_game_context:setFacionDungeonState(data)
	self._faction_data.dungeon_state = data
end

function i3k_game_context:getFacionDungeonState()
	return self._faction_data.dungeon_state
end

--是否是独立副本
function i3k_game_context:isSpecialFacionDungeon(mapID)
	local state = self._faction_data.dungeon_state
	local specialDungeon = i3k_db_faction_dungeon[mapID].specialDungeon;
	if specialDungeon then
		if specialDungeon == -1 then
			specialDungeon = mapID;
		end
		if state and state.open and state.open[specialDungeon] == 1 then
			return true;
		end
	end
	return false;
end

function i3k_game_context:setSpecialDungeonID(idMap)
	specialDungeonID = idMap;
end

function i3k_game_context:getSpecialDungeonID()
	if specialDungeonID then
		return specialDungeonID;
	end
end

function i3k_game_context:clsSpecialDungeonID()
	specialDungeonID = {}
end

--帮派共享任务领取奖励
function i3k_game_context:setFactionTaskGetAward(data)
	self._faction_data.task_get_award = data
end

function i3k_game_context:getFactionTaskGetAward()
	return self._faction_data.task_get_award
end

--膜拜红点
function i3k_game_context:SetFactionWorshipPoint(state)
	self._faction_data.worship_point = state
end

function i3k_game_context:GetFactionWorshipPoint()
	return self._faction_data.worship_point
end

--宴席红点
function i3k_game_context:SetFactionDinePoint(state)
	self._faction_data.dine_point = state
end

function i3k_game_context:GetFactionDinePoint()
	return self._faction_data.dine_point or 0
end

--红包红点
function i3k_game_context:SetRedEnvelopePoint(state)
	self.redEnvelopePoint = state
end

function i3k_game_context:GetRedEnvelopePoint()
	return self.redEnvelopePoint or 0
end

--共享任务红点
function i3k_game_context:SetFactionShareTaskPoint(state)
	self._faction_data.share_task_point = state
end

function i3k_game_context:GetFactionShareTaskPoint()
	return self._faction_data.share_task_point
end

--重置帮派任务红点
function i3k_game_context:SetFactionResetTaskPoint(state)
	self._faction_data.reset_task_point = state

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateTaskPoint")
end

function i3k_game_context:GetFactionResetTaskPoint()
	return self._faction_data.reset_task_point
end

--设置是否开启帮派申请推送
function i3k_game_context:SetFactionIsOpenNoticeState(state)
	self._faction_data.faction_is_open_notice = state
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionAppilyNoticeSet,"updateIcon",state)
end

function i3k_game_context:GetFactionIsOpenNoticeState()
	return self._faction_data.faction_is_open_notice
end

--帮派运镖次数
function i3k_game_context:SetFactionEscortTimes(count)
	self._faction_escort_times = count
end

function i3k_game_context:AddFactionEscortTimes(count)
	self._faction_escort_times = self._faction_escort_times + count
end

function i3k_game_context:GetFactionEscortTimes()
	return self._faction_escort_times
end

--帮派运镖皮肤
function i3k_game_context:GetFactionEscortSkin()
	return self._faction_escort_skin
end

function i3k_game_context:SetFactionEscortSkin(data)
	self._faction_escort_skin = data
end

function i3k_game_context:SetFactionEscortUnlockSkin(skinId)
	if self._faction_escort_skin then
		self._faction_escort_skin.unlockIds[skinId] = true
	end
end

function i3k_game_context:SetFactionEscortSelectSkin(skinId)
	if self._faction_escort_skin then
		self._faction_escort_skin.curId = skinId
	end
end

--帮派祝福系数
function i3k_game_context:GetFactionEscortData()
	return self._faction_escort_data
end

function i3k_game_context:SetFactionEscortData(data)
	self._faction_escort_data = data
end

--是否隐藏他人镖车
function i3k_game_context:GetEscortIsHide()
	local cfg = self:GetUserCfg()
	local isRobing = i3k_game_get_player_hero():GetRobState() == 1
	return cfg:GetIsHideCar() and not isRobing
end

--设置是否屏蔽镖车
function i3k_game_context:SetEscortIsHide(bValue)
	local cfg = self:GetUserCfg()
	local world = i3k_game_get_world()
	cfg:SetIsHideCar(bValue)
	if world then
		world:ChangeCarShowState()
	end
end

--帮派运镖数据
function i3k_game_context:SetFactionEscortSys(data)
	self._faction_escort_sys = data
end

function i3k_game_context:GetFactionEscortSys()
	return self._faction_escort_sys
end

--帮派运镖路线
function i3k_game_context:SetFactionEscortPathId(id)
	self._faction_escort_path_id = id
end
--获取帮派运镖路线
function i3k_game_context:GetFactionEscortPathId()
	return self._faction_escort_path_id
end

--帮派运镖的任务id
function i3k_game_context:SetFactionEscortTaskId(id)
	self._faction_escort_task_id = id
end

--获取帮派运镖的任务id
function i3k_game_context:GetFactionEscortTaskId()
	return self._faction_escort_task_id
end

--镖车刷新次数
function i3k_game_context:SetFactionEscortRefreshTimes(count)
	self._faction_escort_refresh_times = count
end

function i3k_game_context:GetFactionEscortRefreshTimes()
	return self._faction_escort_refresh_times
end

function i3k_game_context:AddFactionEscortRefreshTimes(value)
	self._faction_escort_refresh_times = self._faction_escort_refresh_times + value
end

--帮派团队本数据
function i3k_game_context:SetFactionTeamDungeonDetailData(data)
	self._faction_data.team_dungeon_data = data
end

function i3k_game_context:GetFactionTeamDungeonDetailData()
	return self._faction_data.team_dungeon_data
end

--帮派成员等级信息（帮派团队本数据）
function i3k_game_context:SetFactionTeamDungeonMemberLvl(data)
	self._faction_data.team_dungeon_mem_lvl = data
end

function i3k_game_context:GetFactionTeamDungeonMemberLvl()
	return self._faction_data.team_dungeon_mem_lvl
end

--帮派团队本击杀信息
function i3k_game_context:SetFactionTeamKillData(data)
	self._faction_data.team_dungeon_kill = data
end

function i3k_game_context:GetFactionTeamKillData()
	return self._faction_data.team_dungeon_kill
end

--帮派团队本排行信息
function i3k_game_context:SetFactionTeamRankData(data)
	self._faction_data.team_dungeon_rank = data
end

function i3k_game_context:GetFactionTeamRankData()
	return self._faction_data.team_dungeon_rank
end

--帮派团队本id
function i3k_game_context:SetFactionTeamDungeonId(id)
	self._faction_data.team_dungeon_id = id
end

function i3k_game_context:GetFactionTeamDungeonId()
	return self._faction_data.team_dungeon_id
end


--清空帮派数据
function i3k_game_context:ClearFactionData()
	self._faction_data = {faction_list = {},select_data = {},member_data = {},apply_data = {},thing_data = {},base_data = {},my_data = {},
	worship = {},skill = {},dine = {},dine_list = {},store_data = {},dungeon_over = {},dungeon_data = {},award_record = {},
	damage_data = {},dungeon_award = {},faction_icon = 0,faction_bg = 0,apply_itemID = 0,share_task_punish_time = 0,
	dungeon_state = {},task_get_award = {},faction_id = 0,member_count = 0,faction_qq = "",faction_day_kick = 0,}
	-- 解散帮派，设置头顶文字颜色
	local logic = i3k_game_get_logic();
	if logic then
		local world = logic:GetWorld()
		local player = logic:GetPlayer();
		if player and player:GetHero() then
			local hero = player:GetHero();
			if hero then
				hero:TitleColorTest()
			end
		end
	end
end


---------------新帮派协议处理begin----------
--搜索帮派相关
function i3k_game_context:SearchFactionList(t)
	local temp = {}
	table.insert(temp,t)
	self._faction_data.faction_list = temp
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_JoinFaction,"refresh")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionList,"updateListData",self:GetFactionListData())
end

--搜索帮派列表相关
function i3k_game_context:FactionPartList(data,layer)
	local temp = {}
	local have_select = self:GetFactionSelectData()
	for k,v in ipairs(data) do
		if have_select[v.sectId] then
			temp[v.sectId] = true
			v.sortID = 1
		else
			v.sortID = 0
		end
	end
	local not_t = {}
	for k,v in pairs(have_select) do
		if not temp[k] then
			table.insert(not_t,k)
		end
	end
	table.sort(data,function (a,b)
		return a.sortID > b.sortID
	end)
	self._faction_data.faction_list = data
	if layer == 1 then
		if  g_i3k_ui_mgr:GetUI(eUIID_FactionList) then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionList,"updateListData",self:GetFactionListData())
		else
			g_i3k_ui_mgr:OpenUI(eUIID_FactionList)
			g_i3k_ui_mgr:RefreshUI(eUIID_FactionList)
		end
	else
		if g_i3k_ui_mgr:GetUI(eUIID_JoinFaction) then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_JoinFaction,"refresh")
		else
			g_i3k_ui_mgr:OpenUI(eUIID_JoinFaction)
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_JoinFaction,"refresh")
		end

	end


end

--帮派创建成功扣钱
function i3k_game_context:RemoveFactionCreateMoney(m_type)
	if m_type == 1 then
		self:UseDiamond(i3k_db_common.faction.createIngot,true,AT_CREATE_NEW_SECT)
	else
		self:UseMoney(i3k_db_common.faction.createMoney,false,AT_CREATE_NEW_SECT)
	end
end
--帮派成员查询协议
function i3k_game_context:FactionMemebersData(chief,deputy,elder,elite,members,fun)
	self:updateFactionChiedID(chief)
	local data = {}
	for k,v in pairs(deputy) do
		data[k] = true
	end

	local tmp = {}
	tmp.chief = chief
	tmp.deputy = data
	tmp.elder = elder
	tmp.elite = elite
	tmp.members = members
	self._faction_data.member_data = tmp
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_InviteFriends,"onShowFactionList",tmp.members)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"updateMenberData",self:GetFactionMemberList(),chief,deputy,elder,self:GetRoleId(),self:GetLevel())
	if fun then
		fun()
	end
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionControlLayer,"updateAllList",self:GetFactionMemberList())
end

--帮派申请列表协议
function i3k_game_context:FactionApplyList(applications)
	self:SetFactionApplyData(applications)
	g_i3k_ui_mgr:OpenUI(eUIID_FactionLayer)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"updateApplyData",applications)
end

--帮派事件查询协议
function i3k_game_context:FactionThingList(history)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"updateThingData",history)
end

--申请加入帮派协议
function i3k_game_context:FactionApplyRes(sectId)
	local have_select = self:GetFactionSelectData()
	have_select[sectId] = true
	self:SetFactionSelectData(have_select)

	local faction_data = self:GetFactionListData()
	for k,v in ipairs(faction_data) do
		if v.sectId == sectId then
			v.sortID = 1
			break
		end
	end
	table.sort(faction_data,function (a,b)
		return a.sortID > b.sortID
	end)
	self:SetFactionListtData(faction_data)

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_JoinFaction,"refresh")
	g_i3k_ui_mgr:PopupTipMessage("申请成功，请等待帮派官员批准")
end

--打开帮派同步的协议
function i3k_game_context:FactionSyncRes(info,callBack, isSchedule, doNotOpenUI)
	local data = info.data
	local sect = info.sect
	local stats = info.stats
	local maxSectLvl = info.maxSectLvl
	self:SetFactionMyData(data)
	self:SetFactionMapFlagCount(info.sectFlagNum)
	self:SetFactionGarrisonIsOpen(info.sectZoneOpen)
	self:SetFactionTakeRewardCnt(info.takeMapRewardCnt)
	if not sect then
		if not doNotOpenUI then
			g_i3k_ui_mgr:OpenUI(eUIID_Bangpai)
			g_i3k_ui_mgr:RefreshUI(eUIID_Bangpai)
		end
	else
		local temp = {sect = sect,stats = stats,maxSectLvl = maxSectLvl}
		self:SetFactionBaseData(temp)
		self:SetFactionMyData(data)
		self:SetFactionWorshipData(data.dayWorshipTimes)
		self:SetDineJoinData(data.dayBanquetJoinTimes)
		self:SetFactionQq(sect.qqGroup)
		self:SetFactionKickTimes(sect.dayKickTimes)
		if not doNotOpenUI then
			g_i3k_logic:OpenFactionMainUI(callBack)
		end
		local map_data = data.daySectMapEnterTimes
		for k,v in pairs(map_data) do
			self:SetDungeonData(k,0,0,0,v,0,0)
		end
		self:SetFactionIsOpenNoticeState(sect.applicationPush)
	end
	self:UpdateSubLineTaskValue(g_TASK_JOIN_FACTION,0)

end

--帮派技能查询
function i3k_game_context:FactionSkillRes(t)
	local skill_data = {}
	for k,v in pairs(t) do
		local id = v.id
		local level = v.level
		local items = v.items
		skill_data[id] = {}
		skill_data[id].level = level
		for a,b in pairs(items) do
			if skill_data[id].item then
				skill_data[id].item[a] = b
			else
				skill_data[id].item = {}
				skill_data[id].item[a] = b
			end

		end
	end
	self:SetFactionSkillData(skill_data)
	g_i3k_ui_mgr:OpenUI(eUIID_FactionSKill)
	g_i3k_ui_mgr:RefreshUI(eUIID_FactionSKill)
end

--帮派升级协议
function i3k_game_context:FactionUpGrade(upTime)
	self:AddFactionLevel(1)
	self:SetFactionUpGradeTime(upTime)
	local now_level = self:GetFactionLevel()
	local skills = i3k_db_faction_uplvl[now_level].skills
	local skill_data = self:GetFactionSkillData()
	for k,v in pairs(skills) do
		if not skill_data[v] then
			skill_data[v] = {}
			skill_data[v].level = 0
		end
	end
	self:SetFactionSkillData(skill_data)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateBaseData",now_level,self:GetFactionSectId(),self:GetFactionCurrentMemberCount(),upTime)
end

--帮派捐献技能书
function i3k_game_context:FactionContributionBookRes(skillID,itemid,old_level,itemCount)
	local skill_data = self:GetFactionSkillData()
	if old_level == skill_data[skillID].level then
		if skill_data[skillID] then
			if skill_data[skillID].item then
				if skill_data[skillID].item[itemid] then
					skill_data[skillID].item[itemid] = skill_data[skillID].item[itemid] + itemCount
				else
					skill_data[skillID].item[itemid] = itemCount
				end
			else
				skill_data[skillID].item = {}
				skill_data[skillID].item[itemid] = itemCount
			end
		else
			skill_data[skillID] = {}
			skill_data[skillID].item = {}
			skill_data[skillID].item[itemid] = itemCount
		end
	end
	self:UseCommonItem(itemid,itemCount,AT_ADD_SECT_AURA_EXP)
	local level = 0
	if skill_data[skillID] and skill_data[skillID].level then
		level = skill_data[skillID].level
	end

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionSKill,"updateAllSkill")
end

--帮派膜拜协议
function i3k_game_context:FactionWorshipRes(_type)
	local _data = self:GetFactionWorshipData()
	if _data[_type] then
		_data[_type] =  _data[_type] + 1
	else
		_data[_type] = 1
	end


	self:SetFactionWorshipData(_data)

	local hero_lvl = self:GetLevel()
	local temp =  string.format("exp%s",_type)

	local exp = i3k_db_faction_worship_exp[hero_lvl][temp]

	local tmp_items = {}
	local t = {id = g_BASE_ITEM_EXP,count = exp }
	table.insert(tmp_items,t)
	g_i3k_ui_mgr:ShowGainItemInfo(tmp_items)

	local moneyType = i3k_db_faction_worship[_type].moneyType
	local moneyCount = i3k_db_faction_worship[_type].moneyCount
	self:UseCommonItem(moneyType,moneyCount,AT_TRY_WORSHIP_SECT_MEMBER)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionWorship,"updateWorshipData")
end
--开启帮派宴席
function i3k_game_context:FactionOpenBanquet(_type)
	local moneyType = i3k_db_faction_dine[_type].moneyType
	local moneyCount = i3k_db_faction_dine[_type].moneyCount
	self:UseCommonItem(moneyType,moneyCount,AT_TRY_OPEN_SECT_BANQUET)
	local _data = self:GetOpenDineData() or {}
	if _data[_type] then
		_data[_type] =  _data[_type] + 1
	else
		_data[_type] = 1
	end
	self:SetOpenDineData(_data)
	g_i3k_ui_mgr:PopupTipMessage("开启宴席成功")
	local data = i3k_sbean.sect_listbanquet_req.new()
	i3k_game_send_str_cmd(data,i3k_sbean.sect_listbanquet_res.getName())
end

--帮派宴席列表
function i3k_game_context:FactionBanquetList(banquets)
	local data = {}
	local my_data = self:GetRoleInfo()
	local my_id = my_data.curChar._id
	local t1 = {}
	local t2 = {}
	for k,v in pairs(banquets) do
		local id = v.bid
		local _data = {id= id,roleID =v.openRoleId ,roleName = v.openRoleName ,type =v.type ,openTime = v.openTime,roles = v.roles}
		local serverTime = i3k_game_get_time()
		serverTime = i3k_integer(serverTime)
		local lastTime = i3k_db_faction_dine[v.type].dineTime
		local maxCount = i3k_db_faction_dine[v.type].useCount
		local have_count = 0
		for k,v in pairs(v.roles) do
			have_count = have_count + 1
		end
		if lastTime - serverTime + v.openTime <= 0 then
			_data.sortID = 2
			table.insert(data,_data)
		elseif have_count == maxCount then
			_data.sortID = 2
			table.insert(data,_data)
		elseif v.roles[my_id] then
			_data.sortID = 1
			table.insert(data,_data)
		elseif v.type == 1 then
			table.insert(t1,_data)

		elseif v.type == 2 then
			table.insert(t2,_data)
		end
	end
	table.sort(data,function (a,b)
		return a.sortID < b.sortID
	end)
	table.sort(t1,function (a,b)
		return a.openTime > b.openTime
	end)
	table.sort(t2,function (a,b)
		return a.openTime > b.openTime
	end)
	for k,v in ipairs(t1) do
		table.insert(data,1,v)
	end
	for k,v in ipairs(t2) do
		table.insert(data,1,v)
	end
	self:SetDineListData(data)
	g_i3k_ui_mgr:OpenUI(eUIID_FactionEatDine)
	g_i3k_ui_mgr:RefreshUI(eUIID_FactionEatDine,data,self:GetRoleId())
	self:FactionDineNotice(0)
end

--参加帮派宴席
function i3k_game_context:FactionJoinBanquet(is_ok,id)
	if is_ok >= 1 then
		--TODO 加体力
		local _data = g_i3k_game_context:GetDineListData()
		local data = g_i3k_game_context:GetDineJoinData() or {}
		local _type = 1
		local my_data = g_i3k_game_context:GetRoleInfo()
		local my_id = my_data.curChar._id
		for k,v in pairs(_data) do
			if v.id  == id then
				_type = v.type
				table.insert(v.roles,my_id)
				break
			end
		end
		if data[_type] then
			data[_type] = data[_type] + 1
		else
			data[_type] = 1
		end
		local tmp_str

		if is_ok == 1 then
			tmp_str = i3k_db_faction_dine[_type].textId[math.random(1,3)]
		else
			tmp_str = i3k_db_faction_dine[_type].textId[is_ok+2]
		end
		local add_value = i3k_db_faction_dine[_type].crit[is_ok*2 -1]
		local physicalCount = i3k_db_faction_dine[_type].physicalCount
		physicalCount = physicalCount * add_value/10000

		g_i3k_ui_mgr:OpenUI(eUIID_FactionDineGetVit)
		g_i3k_ui_mgr:RefreshUI(eUIID_FactionDineGetVit,physicalCount,tmp_str)

		g_i3k_game_context:SetDineJoinData(data)
		g_i3k_game_context:SetDineListData(_data)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEatDine,"setDineData")

		local num1 = i3k_db_common.faction.dineCount
		local join_data = g_i3k_game_context:GetDineJoinData() or {}
		local have_count =  0
		for k,v in pairs(join_data) do
			have_count = have_count + v
		end
		if have_count >= num1 then
			g_i3k_game_context:FactionDineNotice(0)
		end
		if data[_type] == i3k_db_faction_dine[_type].useCount then
			local data = i3k_sbean.sect_listbanquet_req.new()
			i3k_game_send_str_cmd(data,i3k_sbean.sect_listbanquet_res.getName())
		end
	elseif is_ok == -3 then
		local _data = g_i3k_game_context:GetDineListData()
		local _type = 1
		for k,v in pairs(_data) do
			if v.id  == id then
				_type = v.type
				break
			end
		end
		local name = i3k_db_faction_dine[_type].name
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(10035,name))
	else
		g_i3k_ui_mgr:PopupTipMessage("当天参与宴席次数已满")
	end
end

--帮派副本结束协议
function i3k_game_context:FactionDungeonResult(mapId,progress,damage,accDamageRank,maxDamageRank,extraReward,items,goldReward)
	local temp = {}
	temp.mapId = mapId
	temp.progress = progress
	temp.damage = damage
	temp.accDamageRank = accDamageRank
	temp.maxDamageRank = maxDamageRank
	temp.extraReward = extraReward
	temp.items = items
	temp.goldReward = goldReward
	self:SetFactionDungeonOverData(temp)
	if i3k_db_faction_dungeon[mapId] and i3k_db_faction_dungeon[mapId].specialDungeon and i3k_db_faction_dungeon[mapId].specialDungeon == -1 then
		g_i3k_ui_mgr:OpenUI(eUIID_FactionDungeonSpecialOver)
		g_i3k_ui_mgr:RefreshUI(eUIID_FactionDungeonSpecialOver,temp)
	else
		g_i3k_ui_mgr:OpenUI(eUIID_FactionDungeonBattleOver)
		g_i3k_ui_mgr:RefreshUI(eUIID_FactionDungeonBattleOver,temp)
	end
end

--修改帮派教义协议
function i3k_game_context:FactionChangeCreed(str)
	self:SetFactionCreed(str)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateCreed",str)
end

--帮派副本重置协议
function i3k_game_context:FactionDungeonReset(mapId)
	--刷新界面
	local data = self:GetFactionDungeonData()
	if data[mapId] and data[mapId].reset then
		data[mapId].reset = data[mapId].reset + 1
		data[mapId].bossHp = 0
	else
		if data[mapId] then
			data[mapId].reset = 1
		else
			data[mapId] = {}
			data[mapId].reset = 1
		end
	end
	local need_count = i3k_db_faction_dungeon[mapId].resetConsume
	self:SetFactionDungeonData(data)
	self:UseFactionVitality(need_count)

	local fun = function ()
		local data = i3k_sbean.sectmap_query_req.new()
		if g_i3k_game_context:isSpecialFacionDungeon(mapId) then
			data.mapId = i3k_db_faction_dungeon[mapId].specialDungeon
		else
			data.mapId = mapId
		end
		i3k_game_send_str_cmd(data,i3k_sbean.sectmap_query_res.getName())
	end

	local data = i3k_sbean.sectmap_status_req.new()
	data.fun = fun
	i3k_game_send_str_cmd(data,i3k_sbean.sectmap_status_res.getName())


end

--当前副本奖励分配信息协议
function i3k_game_context:FactionDungeonAllocationRes(allocation,mapId)
	self:setFactionDungeonApplyItemID(0)
	local is_have = false
	local my_id = self:GetRoleId()
	for k,v in pairs(allocation.rewards) do
		for a,b in pairs(v.applicants) do
			if b == my_id then
				is_have = true
				self:setFactionDungeonApplyItemID(k)
				break
			end
		end
		if is_have then
			break
		end
	end
	self:setFactionDungeonAward(allocation)
	g_i3k_ui_mgr:OpenUI(eUIID_FactionDungeonAward)
	g_i3k_ui_mgr:RefreshUI(eUIID_FactionDungeonAward,mapId)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDungeonDetail,"updateDItemData",self:getFactionDungeonAward(),self:getFactionDungeonApplyItemID(),self:GetRoleId())
end

--申请帮派副本奖励
function i3k_game_context:FactionApplyDungeonItemRes(itemId,mapId)
	self:setFactionDungeonApplyItemID(itemId)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDungeonAward,"updateDABaseData",self:getFactionDungeonAward(),self:getFactionDungeonApplyItemID())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDungeonDetail,"updateDItemData",self:getFactionDungeonAward(),self:getFactionDungeonApplyItemID(),self:GetRoleId())
	local data = i3k_sbean.sectmap_allocation_req.new()
	data.mapId = mapId
	i3k_game_send_str_cmd(data,i3k_sbean.sectmap_allocation_res.getName())
end

--副本总体进度协议
function i3k_game_context:FactionDungeonProgress(bossLostHp,dayResetTimes,mapId)
	local data = self:GetFactionDungeonData()
	if data[mapId] then
		data[mapId].bossHp = bossLostHp
		data[mapId].reset =  dayResetTimes
	else
		data[mapId] = {}
		data[mapId].bossHp = bossLostHp
		data[mapId].reset =  dayResetTimes
	end
	self:SetFactionDungeonData(data)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDungeon,"updateDungeonData",self:getFacionDungeonState(),data)
end

--帮派副本详细进度
function i3k_game_context:FactionDungeonDetailProgress(progress,curAttacker,mapId)
	local data = self:GetFactionDungeonData()
	if data[mapId] then
		data[mapId].progress = progress
		data[mapId].curAttacker = curAttacker
	else
		data[mapId] = {}
		data[mapId].progress = progress
		data[mapId].curAttacker = curAttacker
	end
	self:SetFactionDungeonData(data)
	g_i3k_ui_mgr:OpenUI(eUIID_FactionDungeonLayer)
	g_i3k_ui_mgr:RefreshUI(eUIID_FactionDungeonLayer,mapId)
end

--同意申请协议
function i3k_game_context:FactionAgreeApply(is_ok,roleID,accept)
	self:RemoveFactionApplicants(1)
	if is_ok == 1 then
		if accept == 1 then
			self:AddFactionCurrentMemberCount(1)
		end
		--删除数据
		self:RemoveFactionOneApply(roleID)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"updateApplyData",self:GetFactionApplyData())
	elseif is_ok == -1 then

		--删除数据
		self:RemoveFactionOneApply(roleID)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"updateApplyData",self:GetFactionApplyData())
		g_i3k_ui_mgr:PopupTipMessage("已加入其他帮派")
	elseif is_ok == -2 then
		--删除数据
		self:RemoveFactionOneApply(roleID)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"updateApplyData",self:GetFactionApplyData())
		g_i3k_ui_mgr:PopupTipMessage("帮派成员已满")
	else
		self:RemoveFactionOneApply(roleID)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"updateApplyData",self:GetFactionApplyData())
	end
end

--申请全部拒绝协议
function i3k_game_context:FactionRefuseAllApply()
	self:ClearFactionApply()
	self:SetFactionApplicants(0)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"updateApplyData",{})
end
--帮派申请红点提示
function i3k_game_context:FactionNoticeApply()
	self:setApplyMsg(true)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"refreshLayer")
end

--帮派个人任务详细信息
function i3k_game_context:FactionTaskDetail(dayRefreshCount,dayFinishedCount,tasks,callBack)
	self:setFactionTaskFinishCount(dayFinishedCount)
	self:setFactionTaskRefreshCount(dayRefreshCount)
	local currentRoleID = self:getFactionTaskRoleId()
	local currentGuid = self:getFactionTaskGuid()
	local taskID = self:getFactionTaskIdValueTime()
	local my_id = self:GetRoleId()
	local tmp = {}
	if my_id == currentRoleID then
		tmp.sid = currentGuid
		tmp.taskId = taskID
	end
	if tmp.sid then
		local is_have = false
		for k,v in ipairs(tasks) do
			if v.sid == currentGuid and v.taskId == taskID then
				is_have = true
			end
		end
		if not is_have then
			table.insert(tasks,tmp)
		end
	end

	self:setFactionTaskBankData(tasks)
	local currentTaskID,currentTaskValue = g_i3k_game_context:getFactionTaskIdValueTime()
	g_i3k_ui_mgr:OpenUI(eUIID_FactionTask)
	g_i3k_ui_mgr:RefreshUI(eUIID_FactionTask)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateTaskBankData",self:getFactionTaskBankData(),self:GetRoleId(),self:GetRoleName(),self:getFactionTaskRoleId(),
	self:getFactionTaskGuid(),currentTaskID,currentTaskValue)

	if callBack then
		callBack()
	end

end

--帮派完成的任务
function i3k_game_context:FactionFinishTask(sectTask,shareCount)
	local tmp = {}
	for k,v in pairs(sectTask) do
		local shared = v.shared
		local taskID = v.task.taskId
		local guid = v.task.sid
		if guid ~= 0 and taskID ~= 0  then
			tmp[guid] = {}
			tmp[guid].shared = shared
			tmp[guid].taskID = taskID
			tmp[guid].count = shareCount[guid] or i3k_db_common.faction.share_task_count
		end
	end
	self:setFactionFinishTaskData(tmp)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateFinishTaskData",tmp,self:GetRoleId())
end

--接取帮派任务
function i3k_game_context:FactionTaskReceive(guid,taskID,roleID,roleName,receiveTime)

	local faction_task_cfg = g_i3k_db.i3k_db_get_faction_task_cfg(taskID)
	local value = self:InitTaskValue(faction_task_cfg.type, faction_task_cfg.arg1, faction_task_cfg.arg2)

	local tmp = {taskID = taskID, value = value, roleID = roleID, roleName = roleName, receiveTime = receiveTime}

	self:AddTaskToDataList(TASK_CATEGORY_SECT, receiveTime)

	self:setFactionCurrentTask(roleID,guid,value,taskID,roleName,receiveTime)
	g_i3k_logic:OpenBattleUI()
	g_i3k_ui_mgr:OpenUI(eUIID_BattleTXAcceptTask)
	--	g_i3k_ui_mgr:OpenUI(eUIID_TaskAnimation)
end

--放弃帮派任务协议
function i3k_game_context:FactionTaskGiveUp(stCancelTime,roleID)
	local my_id = self:GetRoleId()
	self:removeFinishFactionTask(roleID)
	if my_id == roleID then
		local currentTaskID,currentTaskValue = self:getFactionTaskIdValueTime()
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateTaskBankData",self:getFactionTaskBankData(),self:GetRoleId(),self:GetRoleName(),self:getFactionTaskRoleId(),
		self:getFactionTaskGuid(),currentTaskID,currentTaskValue)
	else
		self:setShareTaskPunishTime(stCancelTime)
		local currentTaskID,currentTaskValue,receiveTime,roleName = self:getFactionTaskIdValueTime()
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateTaskShareData",self:getFactionShareTaskData(),self:GetRoleId(),self:getFactionTaskRoleId(),self:getFactionTaskGuid(),
		currentTaskID,currentTaskValue,receiveTime,roleName)
	end
end

--帮派任务完成
function i3k_game_context:FactionTaskFinish(guid,roleID,taskID)
	local _data = self:getFactionTaskBankData()
	local my_id = self:GetRoleId()
	local taskId = taskID or 0
	if my_id == roleID then
		for k,v in pairs(_data) do
			if v.sid == guid then
				table.remove(_data,k)
				break
			end
		end
	end
	self:setFactionTaskBankData(_data)
	self:removeFinishFactionTask(roleID)
	self:addFactionTaskFinishCount(1)

	local roleLvl = self:GetLevel()
	local task_cfg = g_i3k_db.i3k_db_get_faction_task_cfg(taskId)
	local level_cfg = g_i3k_db.i3k_db_get_level_cfg(roleLvl)
	local contribution = task_cfg.contribution
	local exp = task_cfg.exp
	local real_exp = level_cfg.factionTaskExp * task_cfg.exp

	local tmp_items = {}

	local t1 = {id = g_BASE_ITEM_SECT_MONEY,count = contribution*i3k_db_kungfu_vip[g_i3k_game_context:GetVipLevel()].factionContribution }
	table.insert(tmp_items,t1)
	if exp ~= 0 then
		t2 = {id = g_BASE_ITEM_EXP,count = real_exp}
		table.insert(tmp_items,t2)
	end

	for i=1,6 do
		local tmp_id =  string.format("awardID%s",i)
		local awardID = task_cfg[tmp_id]
		local tmp_count = string.format("awardCount%s",i)
		local awardCount = task_cfg[tmp_count]
		if awardID ~= 0 then
			local t = {id = awardID,count = awardCount}
			table.insert(tmp_items,t)
		end
	end

	g_i3k_ui_mgr:ShowGainItemInfo(tmp_items)

	if my_id == roleID then
		local currentTaskID,currentTaskValue = g_i3k_game_context:getFactionTaskIdValueTime()
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateTaskBankData",self:getFactionTaskBankData(),self:GetRoleId(),self:GetRoleName(),self:getFactionTaskRoleId(),
		self:getFactionTaskGuid(),currentTaskID,currentTaskValue)
	else
		local data = i3k_sbean.sect_share_task_sync_req.new()
		i3k_game_send_str_cmd(data,i3k_sbean.sect_share_task_sync_res.getName())
	end
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateFactionTask")

	local finish_count = self:getFactionTaskFinishCount()
	if i3k_db_common.faction.faction_task_max_count == finish_count then
		g_i3k_game_context:SetFactionResetTaskPoint(false)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateTaskPoint")
	end

end

--共享任务返回
function i3k_game_context:FactionShareTaskres(guid,updateInfo)
	local _data = self:getFactionFinishTaskData()
	if _data[guid] and _data[guid].shared then
		_data[guid].shared = 1
	end

	self:setFactionFinishTaskData(_data)
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateFinishTaskData",_data,self:GetRoleId(),index)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateShareTaskInfo",updateInfo)
end

--帮派任务重置
function i3k_game_context:FactionTaskReset(tasks)
	self:addFactionTaskRefreshCount(1)
	local dayRefreshCount = self:getFactionTaskRefreshCount()
	local money_count = 0
	if i3k_db_common.faction.reset_count[dayRefreshCount] then
		money_count = i3k_db_common.faction.reset_count[dayRefreshCount]
	else
		local _index = #i3k_db_common.faction.reset_count
		money_count = i3k_db_common.faction.reset_count[_index]
	end
	self:UseDiamond(money_count,false,AT_SECT_TASK_RESET_CB)

	local currentRoleID = self:getFactionTaskRoleId()
	local currentGuid = self:getFactionTaskGuid()
	local taskID = self:getFactionTaskIdValueTime()
	local my_id = self:GetRoleId()
	local tmp = {}
	if my_id == currentRoleID then
		tmp.sid = currentGuid
		tmp.taskId = taskID
	end
	if tmp.sid then
		table.insert(tasks,tmp)
	end
	self:setFactionTaskBankData(tasks)

	local currentTaskID,currentTaskValue = g_i3k_game_context:getFactionTaskIdValueTime()

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateTaskBankData",self:getFactionTaskBankData(),self:GetRoleId(),self:GetRoleName(),self:getFactionTaskRoleId(),
	self:getFactionTaskGuid(),currentTaskID,currentTaskValue)
end

--领取收益
function i3k_game_context:FactionGetTaskAward(taskRewards)
	self:setFactionTaskGetAward(taskRewards)
	self:FactionShareTaskNotice(false)
	--加奖励
	g_i3k_ui_mgr:OpenUI(eUIID_FactionGetAward)
	g_i3k_ui_mgr:RefreshUI(eUIID_FactionGetAward,taskRewards)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateShareTaskAwardPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateTaskPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateGetAwardPoint")
end

--帮派副本的状态
function i3k_game_context:FactionDungeonState(finsihed,fun1)
	local tmp = {}
	tmp.apply = {}
	tmp.open = {}
	for k,v in pairs(finsihed) do
		local is_apply = v%2
		if is_apply == 0 then
			--是否通关
			tmp.apply[k] = 0
		else
			tmp.apply[k] = 1
		end
		local is_open = math.modf(v/2)%2
		if is_open == 0 then
			--是否开启
			tmp.open[k] = 0
		else
			tmp.open[k] = 1
		end
	end
	self:setFacionDungeonState(tmp)

	if fun1 then
		fun1()
	else
		g_i3k_ui_mgr:OpenUI(eUIID_FactionDungeon)
		g_i3k_ui_mgr:RefreshUI(eUIID_FactionDungeon,1)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDungeon,"updateDungeonList",tmp,self:GetFactionVitality(),self:GetFactionDayVitality())
	end
end

--帮派团队本结束
function i3k_game_context:FactionTeamDungeonOver(mapId,finishTime,progress,rank)
	local cfg = i3k_db_faction_team_dungeon[mapId]
	local maxTime = cfg.maxTime
	local awardActivity = 0
	local halfTimeActivity = 0
	local dungeon_items = {}
	local dungeon_speed_items = {}
	if finishTime < maxTime/2 then
		halfTimeActivity = cfg.halfTimeActivity
		for i=1,#cfg.halfTimeAward,2 do
			local tmp = {id = cfg.halfTimeAward[i],count = cfg.halfTimeAward[i+1]}
			table.insert(dungeon_speed_items,tmp)
		end
	end
	local state = false
	if  progress < 10000 then
		state = false
	else
		state = true
	end
	local rank_award = i3k_db_faction_team_dungeon_rank_award[mapId]
	local tmp_items = {}
	local tmp_speed_rank = {}




	if state then
		for i,v in ipairs(rank_award) do
			if rank ~= 0 and rank <= v.rank then
				local tmp_a = v.passAwards
				for i=1,#tmp_a ,2 do
					local tmp = {id = tmp_a[i],count = tmp_a[i+1]}
					table.insert(tmp_items,tmp)
				end
				local tmp_a = v.speedPassAwards
				for i=1,#tmp_a ,2 do
					local tmp = {id = tmp_a[i],count = tmp_a[i+1]}
					table.insert(tmp_speed_rank,tmp)
				end

				break
			end
		end
		for i=1,#cfg.passItems,2 do
			local tmp = {id = cfg.passItems[i],count = cfg.passItems[i+1]}
			table.insert(dungeon_items,tmp)
		end
		awardActivity = cfg.awardActivity
	else
		for i,v in ipairs(rank_award) do
			if rank ~= 0 and  rank <= v.rank then
				local tmp_a = {}
				if progress < 1000 then
					tmp_a = v.failPassAwards1
				elseif progress < 5000 then
					tmp_a = v.failPassAwards2
				elseif progress < 7500 then
					tmp_a = v.failPassAwards3
				else
					tmp_a = v.failPassAwards4
				end
				for i=1,#tmp_a ,2 do
					local tmp = {id = tmp_a[i],count = tmp_a[i+1]}
					table.insert(tmp_items,tmp)
				end
				break
			end
		end
		local tmp_a = {}
		if progress < 1000 then
			tmp_a = cfg.failAward1
			awardActivity = cfg.failAwardActivity1
		elseif progress < 5000 then
			tmp_a = cfg.failAward2
			awardActivity = cfg.failAwardActivity2
		elseif progress < 7500 then
			tmp_a = cfg.failAward3
			awardActivity = cfg.failAwardActivity3
		else
			tmp_a = cfg.failAward4
			awardActivity = cfg.failAwardActivity4
		end
		for i=1,#tmp_a ,2 do
			local tmp = {id = tmp_a[i],count = tmp_a[i+1]}
			table.insert(dungeon_items,tmp)
		end
	end



	g_i3k_ui_mgr:OpenUI(eUIID_FactionTeamDungeonOver)
	g_i3k_ui_mgr:RefreshUI(eUIID_FactionTeamDungeonOver,mapId,state,finishTime,awardActivity,halfTimeActivity,rank,tmp_items,tmp_speed_rank,dungeon_items,dungeon_speed_items,progress)
end





--修改帮派名字
function i3k_game_context:FactionChangeName(name, useItem)
	self:SetFactionName(name)
	local cfg = g_i3k_db.i3k_db_get_common_cfg()
	if not useItem then
		self:UseDiamond(cfg.faction.update_faction_name,false,AT_CHANGE_SECT_NAME_CB)
	else
		self:UseCommonItem(cfg.faction.chageNameItemID, 1, AT_CHANGE_SECT_NAME_CB)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateFactionName",self:GetFactionName())
end

--修改帮派进入等级
function i3k_game_context:FactionChangeEnterLevel(level)
	local base_data = self:GetFactionBaseData()
	base_data.sect.overview.joinLvlReq = level
	self:SetFactionBaseData(base_data)
end

--修改帮派图标
function i3k_game_context:FactionChangeIconAndFrame(icon,frame)
	self:SetFactionIcon(icon)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateFactionIcon",self:GetFactionIcon())
	self:SetSectTitleIcon(icon)
	local hero = i3k_game_get_player_hero();
	if hero then
		hero:ChangeSectName(self:GetSectName(),self:GetSectPosition())
	end
end

--同步膜拜奖励
function i3k_game_context:FactionWorshiprewardRes(dayWorshipedTimes,worshipReward)
	g_i3k_ui_mgr:OpenUI(eUIID_FactionGetWorshipAward)
	g_i3k_ui_mgr:RefreshUI(eUIID_FactionGetWorshipAward,dayWorshipedTimes,worshipReward)
	g_i3k_game_context:SetFactionWorshipPoint(false)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"UpdateWorshipPoint")
end

--膜拜红点
function i3k_game_context:FactionWorshipNotice()
	g_i3k_game_context:SetFactionWorshipPoint(true)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionLayer,"UpdateWorshipPoint")
end

--宴席红点
function i3k_game_context:FactionDineNotice(state)
	local num1 = i3k_db_common.faction.dineCount
	local join_data = g_i3k_game_context:GetDineJoinData()
	local have_count =  0
	for k,v in pairs(join_data) do
		have_count = have_count + v
	end
	if have_count < num1 and state then
		self:SetFactionDinePoint(state)
	end
	if not state then
		self:SetFactionDinePoint(state)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"updateDinePoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDineTips,"updateAddPoint")
end

--共享任务红点
function i3k_game_context:FactionShareTaskNotice(state)
	self:SetFactionShareTaskPoint(state)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionTask,"updateGetAwardPoint")

end

--帮派运镖同步协议
function i3k_game_context:FactionEscortSync(data,wishTimes,wishData)
	if not g_i3k_ui_mgr:GetUI(eUIID_FactionEscort) then
		g_i3k_ui_mgr:OpenUI(eUIID_FactionEscort)
		g_i3k_ui_mgr:RefreshUI(eUIID_FactionEscort,data,wishTimes,wishData)
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEscort,"updateEscortData",data)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEscort,"updateWishMoney",wishTimes)
	end
end

--帮派祝福
function i3k_game_context:FactionEscortWish(data)
	local times = g_i3k_game_context:GetFactionEscortTimes()
	local need_money = 0
	if i3k_db_escort.escort_args.wish_ingot[times + 1] then
		need_money = i3k_db_escort.escort_args.wish_ingot[times + 1]
	else
		need_money = i3k_db_escort.escort_args.wish_ingot[#i3k_db_escort.escort_args.wish_ingot]
	end

	g_i3k_game_context:UseDiamond(need_money,false,AT_SAVE_WISH_SECT_DELIVER)
	g_i3k_game_context:AddFactionEscortTimes(1)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEscort,"updateWishData",data)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEscort,"updateWishMoney",self:GetFactionEscortTimes())

end

-- 是否满足建立帮派驻地条件
function i3k_game_context:IsCanBuildGarrison()
	local openCfg = i3k_db_faction_garrison.openCondition
	return self:getSectFactionLevel() >= openCfg.needFactionLvl and  self:GetFactionVitality() >= openCfg.needActivity
end

function i3k_game_context:SetFactionGarrisonIsOpen(isOpen)
	self._faction_data.garrsionIsOpen = isOpen
end

function i3k_game_context:GetFactionGarrisonIsOpen()
	return self._faction_data.garrsionIsOpen == 1
end

function i3k_game_context:GetIsInFactionZone()
	return i3k_game_get_map_type() == g_FACTION_GARRISON
end

-- 进入帮派驻地的帮派id
function i3k_game_context:SetFactionZoneInfo(sectID, sectName)
	self._faction_data.factionZoneSectID = sectID
	self._faction_data.factionZoneSectName = sectName
end

function i3k_game_context:GetFactionZoneSectID()
	return self._faction_data.factionZoneSectID
end

function i3k_game_context:GetFactionZoneSectName()
	return self._faction_data.factionZoneSectName
end

-- 获取进入的是否是自己的帮派驻地
function i3k_game_context:GetIsOwnFactionZone()
	return self:GetFactionSectId() == self:GetFactionZoneSectID()
end

-- 进入帮派驻地
function i3k_game_context:onEnterFactionZone()
	local tips = self:GetNotEnterTips() or self:GetNotEnterMapIdTips()
	if tips then
		return g_i3k_ui_mgr:PopupTipMessage(tips)
	end
	if self:GetFactionGarrisonIsOpen() then
		if self:GetLevel() >= i3k_db_faction_garrison.openCondition.enterLimitLvl then
			self:StartFactionZone()
		else
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(16628, i3k_db_faction_garrison.openCondition.enterLimitLvl))
		end
	else
		i3k_sbean.sect_zone_sync_build()
	end
end

function i3k_game_context:StartFactionZone()
	local factionBoss = i3k_db_faction_garrison.factionBoss
	if i3k_game_get_time() - self:getlastjointime() < factionBoss.needTime * 3600 then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(16623, factionBoss.needTime))
		return
	end

	if self:IsInRoom() or self:getMatchState() ~= 0 then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(142))
		return
	end

	local function func()
		i3k_sbean.sect_zone_enter(self:GetSectId())
	end
	self:CheckMulHorse(func)
end

--帮派祝福
function i3k_game_context:SetFactionBlessingData(Data)
	self._faction_blessing_data = Data
end

 function i3k_game_context:SetFactionBlessing(order)
 	local count =  self._faction_blessing_data[order]
	count = count -1
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SpiritBlessing, "updataList", order, count)
 end

--精灵击杀数量
function i3k_game_context:SetFactionSpiritKillData(Data, personal)
	self._faction_spirit_kill_faction = Data
	self._faction_spirit_kill_personal = personal
end

function i3k_game_context:GetFactionSpiritKillData()
	return self._faction_spirit_kill_faction or 0
end
function i3k_game_context:GetFactionSpiritKillpersonal()
	return self._faction_spirit_kill_personal or 0
end

--帮派buf
function i3k_game_context:SetFactionBufTimes(times, order, joinTime)
	self._faction_blessing_start_time = times
	self._faction_blessing_start_order = order
	self._join_faction_time = joinTime
	self:SetBlessingBuffState(self:isOpenBlessingBuf())
end

function i3k_game_context:GetFactionBufTimes()
	return self._faction_blessing_start_time or 0
end
function i3k_game_context:GetFactionBufOrder()
	return self._faction_blessing_start_order or 0
end

--buff
function i3k_game_context:isOpenBlessingBuf()
	return self:blessingBuffOpenJurisdiction() and self:blessingBuffOpenTime()
end

--buftime
function i3k_game_context:blessingBuffOpenTime()
	local order = self:GetFactionBufOrder()
	if order == 0 then return false end
	local lightTime = self:GetFactionBufTimes()
	local isOpen = i3k_game_get_time() - lightTime < i3k_db_faction_spirit.blessingRewards[order].lifeTime
	return isOpen
end

--isbuff
function i3k_game_context:blessingBuffOpenJurisdiction()
	local cfg = i3k_db_faction_spirit.spiritCfg
	local heroLvl = self:GetLevel()
	if not self._join_faction_time then return false end
	if i3k_game_get_time() - self._join_faction_time < cfg.factionTime then return false end
	if heroLvl < cfg.blessingLevel then return false end
	return true
end

--buf状态
function i3k_game_context:SetBlessingBuffState(state)
	self._blessing_buff_state = state
end


function i3k_game_context:GetBlessingBuffState()
	return self._blessing_buff_state
end

--驻地精灵打开状态
function i3k_game_context:GetSpiritIsEnd()
	return self._spirit_is_end or 1
end

--驻地精灵结束 0结束 1未结束
function i3k_game_context:SetSpiritIsEnd(state)
	self._spirit_is_end = state
end
---------------新帮派协议处理end----------

--购买套装数据操作
function i3k_game_context:SetBuySuitData(suiteId, equipId)
	local cfg = g_i3k_db.i3k_db_get_all_suit_data(suiteId)
	g_i3k_game_context:UseDiamond(cfg.ingot, true,AT_BUY_SUIT)
	g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(334, g_i3k_db.i3k_db_get_common_item_name(equipId)))
	g_i3k_ui_mgr:CloseUI(eUIID_SuitAttributeTips)
	g_i3k_ui_mgr:RefreshUI(eUIID_SuitEquip)
end

--操作套装收集数据
function i3k_game_context:SetHaveSuitEquipData(t)
	self._have_suit_data.data1 = t
end

function i3k_game_context:SetSuitSeach(t)
	self._have_suit_data.data2 = t
end

function i3k_game_context:AddSuit(equipid)
	if self._suit_equip_data.seachData then
	equipid = math.abs(equipid)
	if self._suit_equip_data.seachData[equipid] then
		local id = self._suit_equip_data.seachData[equipid]
		self._have_suit_data.data2[equipid] = id
		if self._have_suit_data.data1[id] then
			if not self:isHaveSuitEquip(equipid) then
				table.insert(self._have_suit_data.data1[id],equipid)
			end
		else
			self._have_suit_data.data1[id] = {equipid}
		end
		self:SetPrePower()
		local hero = i3k_game_get_player_hero()
		hero:UpdateSuitProps()
		self:ShowPowerChange()
	end
	end
end

function i3k_game_context:isHaveSuitEquip(equipid)
	if self._suit_equip_data.seachData then
	local id = self._suit_equip_data.seachData[equipid]
	local test = self._have_suit_data.data1[id]
	for i, e in pairs(self._have_suit_data.data1[id]) do
		if e == equipid then
			return true
			end
		end
	end
	return false
end
function i3k_game_context:GetHaveSuitEquipData()
	return self._have_suit_data
end

function i3k_game_context:GetEffectSuits()
	local _t = g_i3k_game_context:GetSuitData()
	local effectsuits = {mysuit = {},othersuit = {}}
	if _t and _t.myData and _t.otherData then
		local ht = g_i3k_game_context:GetHaveSuitEquipData();
	for k,v in pairs(_t.myData) do
		if ht.data1[v.id] then
			if #ht.data1[v.id] == v.count then
				effectsuits.mysuit[k] = {{attribute = v.attribute1, value = v.value1},{attribute = v.attribute2, value = v.value2},{attribute = v.attribute3, value = v.value3},{attribute = v.attribute4, value = v.value4},{attribute = v.attribute5, value = v.value5},};
			end
		end
	end
	for k,v in pairs(_t.otherData) do
		if ht.data1[v.id] then
			if #ht.data1[v.id] == v.count then
				effectsuits.othersuit[k] = {{attribute = v.attribute1, value = v.value1},{attribute = v.attribute2, value = v.value2},{attribute = v.attribute3, value = v.value3},{attribute = v.attribute4, value = v.value4},{attribute = v.attribute5, value = v.value5},};
				end
			end
		end
	end
	return effectsuits;
end
--缓存套装表数据
function i3k_game_context:LoadSuitData()
	local roleData = self:GetRoleInfo()
	local classType = (roleData.curChar._ctype)
	local my_attribute = {}
	local seach = {}
	local equipData = {}
	local totle_num = 0
	for k,v in pairs(i3k_db_suit_equip[classType]) do
		local id = (v.id)
		v.classType = classType
		totle_num = totle_num + 1
		table.insert(equipData,v)
		for i=1,6 do
			local tmp_part = string.format("part%sID",i)
			local equipid = v[tmp_part]
			if equipid ~= 0 then
				seach[equipid] = id
			end
		end

		for i=1,5 do
			local tmp_att = string.format("attribute%s",i)
			local attribute = v[tmp_att]
			if attribute ~= 0 then
				my_attribute[attribute] = 0
			end

		end
	end
	local other_attribute = {}
	local otherEquipData = {}
	local other_totle_num = 0
	for k,v in pairs(i3k_db_suit_equip) do
		if (k) ~= classType then
			for a,b in pairs(v) do
				local id = (b.id)
				b.classType = k
				other_totle_num = other_totle_num + 1
				table.insert(otherEquipData,b)
				for i=1,6 do
					local tmp_part = string.format("part%sID",i)
					local equipid = b[tmp_part]
					if equipid ~= 0 then
						seach[equipid] = id
					end
				end
				for i=1,5 do
					local tmp_att = string.format("attribute%s",i)
					local attribute = b[tmp_att]
					if attribute ~= 0 then
						other_attribute[attribute] = 0
					end
				end
			end
		end
	end
	local my_att = {}
	local other_att = {}
	for k,v in pairs(my_attribute) do
		local tmp = {}
		tmp.attribute = k
		tmp.value = 0
		table.insert(my_att,tmp)
	end

	for k,v in pairs(other_attribute) do
		local tmp = {}
		tmp.attribute = k
		tmp.value = 0
		table.insert(other_att,tmp)
	end

	table.sort(my_att,function(a,b)
		return a.attribute < b.attribute
	end)
	table.sort(other_att,function(a,b)
		return a.attribute < b.attribute
	end)

	self._suit_equip_data = {myData = equipData,myCount= totle_num,otherData = otherEquipData,otherCount = other_totle_num,seachData=seach,
	my_attribute = my_att,other_attribute = other_att}
end

function i3k_game_context:GetSuitData()
	return self._suit_equip_data
end

--操作玩家体力
function i3k_game_context:SetRolePhysicalPower(count)
	count = tonumber(count)
	if count then
		self._rolePhysicalPower = count
	end
end



--操作副本信息
function i3k_game_context:SetDungeonData(id, finishCount, enterTimes, score, dayEnterCount, dayBuyTimes,rewardTimes)
	self._dungeonData[id] = {id = id, finishCount = finishCount, enterTimes = enterTimes, score = score, dayEnterCount = dayEnterCount, dayBuyTimes = dayBuyTimes,rewardTimes= rewardTimes}
end

function i3k_game_context:GetDungeonData()
	return self._dungeonData
end

function i3k_game_context:GetNormalMapDayBuyTimes(id)
	return self._dungeonData[id] and self._dungeonData[id].dayBuyTimes or 0
end

function i3k_game_context:AddNormalMapBuyTimes(id, times)
	if self._dungeonData[id].dayBuyTimes then
		self._dungeonData[id].dayBuyTimes = self._dungeonData[id].dayBuyTimes + times
	else
		self._dungeonData[id].dayBuyTimes = 0
		self._dungeonData[id].dayBuyTimes = self._dungeonData[id].dayBuyTimes + times
	end
end

function i3k_game_context:GetNormalMapEnterTotalTimes(id)
	return i3k_db_new_dungeon[id].openTimes + self:GetNormalMapDayBuyTimes(id)
end

function i3k_game_context:addDungeonEnterTimes(mapId,count)
	local times = count or 1
	if self._dungeonData[mapId] and self._dungeonData[mapId].dayEnterCount then
		self._dungeonData[mapId].dayEnterCount = self._dungeonData[mapId].dayEnterCount + times
	else
		if self._dungeonData[mapId] then
			self._dungeonData[mapId].dayEnterCount = times
		else
			self._dungeonData[mapId] = {}
			self._dungeonData[mapId].dayEnterCount = times
		end
	end
end

function i3k_game_context:setDungeonEndScore(mapId, score)
	if not self._dungeonData[mapId] then
		self._dungeonData[mapId] = {}
		self._dungeonData[mapId].score = score
	else
		if self._dungeonData[mapId].score then
			if score > self._dungeonData[mapId].score then
				self._dungeonData[mapId].score = score
			end
		else
			self._dungeonData[mapId].score = score
		end
	end
	if score > 0 then
		if self._dungeonData[mapId] and self._dungeonData[mapId].finishCount  then
			self._dungeonData[mapId].finishCount = self._dungeonData[mapId].finishCount + 1
		else
			if self._dungeonData[mapId] then
				self._dungeonData[mapId].finishCount = 1
			else
				self._dungeonData[mapId] = {}
				self._dungeonData[mapId].finishCount = 1
			end
		end
	end
end

function i3k_game_context:getDungeonDayEnterTimes(mapId)
	if  self._dungeonData[mapId] then
		return self._dungeonData[mapId].dayEnterCount or 0
	else
		return 0
	end
end

function i3k_game_context:setDungeonDayRewardTimes(mapId)
	if not self._dungeonData[mapId] then
		self._dungeonData[mapId] = {id = mapId,rewardTimes= 0}
	end
	if self._dungeonData[mapId].rewardTimes then
		if mapId == i3k_db_forcewar_base.otherData.goldFuben then --黄金副本
			if self._dungeonData[mapId].rewardTimes + 1 > i3k_db_forcewar_base.otherData.goldFubenlimitTimes then
				self._dungeonData[mapId].rewardTimes = i3k_db_forcewar_base.otherData.goldFubenlimitTimes
			else
				self._dungeonData[mapId].rewardTimes = self._dungeonData[mapId].rewardTimes + 1
			end
		end

		if mapId == i3k_db_forcewar_base.otherData.AgFuben then --白银副本
			if self._dungeonData[mapId].rewardTimes + 1 > i3k_db_forcewar_base.otherData.AgFubenlimitTimes then
				self._dungeonData[mapId].rewardTimes = i3k_db_forcewar_base.otherData.AgFubenlimitTimes
			else
				self._dungeonData[mapId].rewardTimes = self._dungeonData[mapId].rewardTimes + 1
			end
		end
	end
end

function i3k_game_context:reduceDungeonDayRewardTimes(mapId)
	if self._dungeonData[mapId] and self._dungeonData[mapId].rewardTimes then
		if self._dungeonData[mapId].rewardTimes - 1 >= 0 then
			self._dungeonData[mapId].rewardTimes = self._dungeonData[mapId].rewardTimes - 1
		end
	end
end

function i3k_game_context:getDungeonDayRewardTimes(mapId)
	if self._dungeonData[mapId] then
		return self._dungeonData[mapId].rewardTimes or 0
	else
		return 0
	end
end


function i3k_game_context:getDungeonFinishTimes(mapId)
	if 	 self._dungeonData[mapId] then
		return self._dungeonData[mapId].finishCount or 0
	else
		return 0
	end
end

function i3k_game_context:getDungeonEndSocre(mapId)
	if  self._dungeonData[mapId] then
		return self._dungeonData[mapId].score or 0
	else
		return 0
	end
end

--获取重登后身世副本随从id
function i3k_game_context:SetLifeTaskRecordPetID(id)
	self._lifeTaskRecord = id
end

function i3k_game_context:GetLifeTaskRecorkPetID()
	return self._lifeTaskRecord
end

function i3k_game_context:SetDungeonSpawnID(id)
	self._dungeonSpawnID = id
end

-- 同步寻路坐标点
function i3k_game_context:SetMonsterPosition(pos)
	self._monsterPosition = pos
end

function i3k_game_context:GetMonsterPosition()
	return self._monsterPosition or nil
end

function i3k_game_context:GetDungeonSpawnID()
	return self._dungeonSpawnID
end

function i3k_game_context:ResetDungeonDayLog()
	for k,v in pairs(self._dungeonData) do
		if v.dayEnterCount then
			v.dayEnterCount = 0
		end
		if v.dayBuyTimes then
			v.dayBuyTimes = 0
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FBLB, "updateDungeonData")
end

--存取当前副本id
function i3k_game_context:GetDungeonMapid()
	--[[
	local recordId
	local taskID = g_i3k_game_context:getMainTaskIdAndVlaue()
	for _,e in ipairs(i3k_db_main_line_task) do
		if e.type == g_TASK_GET_TO_FUBEN then
			if taskID >= e.id then
				recordId = e.arg1
			end
		end
	end
	if self:getDungeonFinishTimes(recordId) > 0 then
		return (recordId + 1)
	end
	return recordId
	]]
	local recordId
	local taskID = g_i3k_game_context:getMainTaskIdAndVlaue()
	local d_cfg = i3k_db_new_dungeon
	local lastID
	for k, v in ipairs(self._dungeonCfgData) do
		local dungeon_id = 0
		for difficulty,id in pairs(v) do
			if self:getDungeonDayEnterTimes(id) < self:GetNormalMapEnterTotalTimes(id) then
				if d_cfg[id].beforeTask ~= -1 and taskID >= d_cfg[id].beforeTask then
					recordId  = id
				end
				if d_cfg[id].conditionDungeon ~= -1 and self:getDungeonEndSocre(d_cfg[id].conditionDungeon) > 0 then
					recordId  = id
				end
			end
			if self:getDungeonEndSocre(id) > 0 then
				lastID = id
			end
		end
	end

	if not recordId and lastID then
		recordId = lastID
	end

	return recordId
end

--缓存单人副本副本配置数据
function i3k_game_context:CacheDungeonCfgData()
	local dungeon_data = {}
	for k,v in pairs(i3k_db_new_dungeon) do
		local groupID = v.teamid
		local difficulty = v.difficulty
		local id = v.id
		local dunType = v.openType
		--屏蔽打地鼠副本
		if not self:isHitDiglett(id) then
			if dunType == 0 then
				if groupID ~= -1  then
					if dungeon_data[groupID] then
						dungeon_data[groupID][difficulty] = id
					else
						dungeon_data[groupID] = {}
						dungeon_data[groupID][difficulty] = id
					end
				end
			end
		end
	end
	self._dungeonCfgData = dungeon_data
end

function i3k_game_context:isHitDiglett(id)
	for _, v in ipairs(i3k_db_findMooncake) do
		if id == v.mapId then
			return true
		end
	end
end

function i3k_game_context:GetCacheDungeonCfgData()
	return self._dungeonCfgData
end

--缓存怪物，矿，npc的查找表
--[[
function i3k_game_context:CacheSpawnNpcResourData()

	local spawn = {}
	local _spawn = {}
	for k,v in pairs(i3k_db_spawn_point) do
		local id = tonumber(k)
		spawn[v.monsters[1] ] = v.pos

		for c,d in pairs(i3k_db_spawn_area) do
			local area_point = c
			for a,b in pairs(d.spawnPoints) do
				if id == b then
					for i,j in pairs(i3k_db_dungeon_base) do
						local mapid = tonumber(i)
						for x,y in pairs(j.areas) do
							if y == area_point then
								_spawn[v.monsters[1] ] = mapid
								break
							end
						end
					end

					break
				end
			end
		end

	end

	local npc = {}
	local _npc = {}
	for k,v in pairs(i3k_db_npc_area) do
		local id = tonumber(k)
		npc[v.NPCID] = v.pos
		for a,b in pairs(i3k_db_dungeon_base) do
			local mapid = tonumber(a)
			for i,j in pairs(b.npcs) do
				if id == j then
					_npc[v.NPCID] = mapid
					break
				end
			end
		end
	end

	local res = {}
	local _res = {}
	for k,v in pairs(i3k_db_resourcepoint_area) do
		local id = tonumber(k)
		res[v.ResourcepointID] = v.pos
		for a,b in pairs(i3k_db_dungeon_base) do
			local mapid = tonumber(a)
			for i,j in pairs(b.resPos) do
				if id == j then
					_res[v.ResourcepointID] = mapid
					break
				end
			end
		end
	end
	self._spawn_npc_res_mapid = {spawn = _spawn,npc = _npc,res = _res}
	return spawn,npc,res
end

function i3k_game_context:getCacheSpawnNpcResourData()
	return self._spawn_ncp_res_data ,self._spawn_npc_res_mapid
end
]]

--操作房间相关信息
--自己点击加入服务器同步消息
function i3k_game_context:SetMroomSync(room_data)
	self:SetRoomLeaderID(room_data.leader)
	self:SetRoomID(room_data.id)
	self:SetMapID(room_data.mapId)
	self:SetRoomCreateTime(room_data.createTime)
	self:SetRoomType(room_data.type)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
end

function i3k_game_context:SetRoomCreateTime(timeNum)
	self._roomData.createTime = timeNum
end

function i3k_game_context:GetRoomCreateTime()
	return self._roomData.createTime or 0
end

--有人离开房间服务器同步消息
function i3k_game_context:SetMroomLeaveData(roleId)
	self:RemoveRoomRoleCount(1)
	local roomData = self:GetRoomData()
	for k,v in pairs(roomData) do
		if v.id == roleId then
			table.remove(roomData,k)
			break
		end
	end
	table.sort(roomData,function (a,b)
		return a.leader > b.leader
	end)
	if roleId == self:GetRoleId() then
		self:CleanRoomData()
		g_i3k_ui_mgr:CloseUI(eUIID_CreateRoom)
		g_i3k_ui_mgr:CloseUI(eUIID_RoomTips)
	else
		self:SetRoomData(roomData)
		g_i3k_ui_mgr:RefreshUI(eUIID_CreateRoom)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
end
--有人被踢出房间服务器同步消息
function i3k_game_context:SetMroomKickData(roleId)
	self:RemoveRoomRoleCount(1)
	local roomData = self:GetRoomData(roleId)
	for k,v in pairs(roomData) do
		if v.id == roleId then
			table.remove(roomData,k)
			break
		end
	end
	if roleId == self:GetRoleId() then
		self:CleanRoomData()
		g_i3k_ui_mgr:CloseUI(eUIID_CreateRoom)
		g_i3k_ui_mgr:CloseUI(eUIID_RoomTips)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
		return
	end
	table.sort(roomData,function (a,b)
		return a.leader > b.leader
	end)
	self:SetRoomData(roomData)
	g_i3k_ui_mgr:RefreshUI(eUIID_CreateRoom)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
end
--切换队长服务器同步消息
function i3k_game_context:SetMroomChangeLeaderData(roleId)
	self:SetRoomLeaderID(roleId)
	local roomData = self:GetRoomData()
	for k,v in pairs(roomData) do
		if v.id == roleId then
			v.leader = 1
		else
			v.leader = 0
		end
	end
	table.sort(roomData,function (a,b)
		return a.leader > b.leader
	end)
	self:SetRoomData(roomData)
	g_i3k_ui_mgr:CloseUI(eUIID_RoomTips)
	g_i3k_ui_mgr:RefreshUI(eUIID_CreateRoom)
end
--邀请人加入房间同步消息
function i3k_game_context:SetMroomInviteData(ok, roleName)
	if ok == -1 then
		g_i3k_ui_mgr:PopupTipMessage("玩家已云游世界")
	elseif ok == -2 then
		g_i3k_ui_mgr:PopupTipMessage("临时队伍已满")
	elseif ok == -3 then
		g_i3k_ui_mgr:PopupTipMessage("查找玩家不存在")
	elseif ok == -4 then
		g_i3k_ui_mgr:PopupTipMessage("玩家已报名参与其他副本/活动")
	elseif ok == -5 then
		g_i3k_ui_mgr:PopupTipMessage("玩家正在副本中")
	elseif ok == -6 then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(390, roleName))
	end
end
--被邀请的协议
function i3k_game_context:SetInviteForward(roleId, roleName, mapId, roomId, roomType)
	--此处应有被邀请界面
	if g_i3k_ui_mgr:GetUI(eUIID_MessageBox3) then
		local data = i3k_sbean.mroom_invitedby_req.new()
		data.roleId = roleId
		data.accept = -1
		data.mapId = mapId
		data.roomId = roomId
		data.type = roomType
		i3k_game_send_str_cmd(data, "mroom_invitedby_res")
		return
	end
	local callback = (function(btn, state)
		local data = i3k_sbean.mroom_invitedby_req.new()
		data.roleId = roleId
		data.mapId = mapId
		data.roomId = roomId
		data.type = roomType
		if btn then
			if state then
				g_i3k_ui_mgr:PopupTipMessage("选择不再接受组队状态无法确认")
			else
				data.accept = 1
				g_i3k_ui_mgr:CloseUI(eUIID_MessageBox3)
				i3k_game_send_str_cmd(data, "mroom_invitedby_res")
			end
		else
			if state then
				data.accept = 2
			else
				data.accept = 0
			end
			g_i3k_ui_mgr:CloseUI(eUIID_MessageBox3)
			i3k_game_send_str_cmd(data, "mroom_invitedby_res")
		end
	end)
	local function callbackRadioButton(randioButton,yesButton,noButton)
	end
	local mapName = i3k_db_new_dungeon[mapId] and i3k_db_new_dungeon[mapId].name or ""
	if mapId == 0 then
		mapName = "正义之心副本"
	elseif roomType == gRoom_NPC_MAP then
		mapName = i3k_db_NpcDungeon[mapId].name
	elseif roomType == gRoom_TOWER_DEFENCE then
		mapName = i3k_db_defend_cfg[mapId].descName
	end
	local msg = i3k_get_string(352, roleName, mapName)
	local rtext=string.format("%d分钟内不再接受组队邀请",i3k_db_common.RefuseTeamInvitationTime/60)
	g_i3k_ui_mgr:ShowMidCustomMessageBox2Ex("同意", "拒绝", msg, rtext, callback, callbackRadioButton)

end
--房间附近的人
function i3k_game_context:SetMroomNearData(roles, freshType)
	local data = {}
	for k,v in pairs(roles) do
		local mamberInfo = {
		id = v.id,
		name = v.name,
		lvl = v.level,
		job = v.type,
		gender = v.gender,
		tLvl = v.tLvl,
		bwType = v.bwType,
		headIcon = v.headIcon,
		power = v.fightPower,
		headBorder = v.headBorder,
		}
		table.insert(data, mamberInfo)
	end
	self:SetNearByRoleData(data)
	if freshType == g_NEARBY_IFRIENDS then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_InviteFriends, "onShowPlayerList",roles)
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_CreateRoom, "SetNearbyData")
	end
end
--本房间查询信息
function i3k_game_context:SetMroomSelfData(roles)
	local allData = {}
	local size = 0
	for k,v in pairs(roles) do
		size = size + 1
		local temp = {}
		temp.id = v.id
		temp.name = v.name
		temp.lvl = v.level
		temp.job = v.type
		temp.power = v.fightPower
		temp.gender = v.gender
		temp.tLvl = v.tLvl
		temp.bwType = v.bwType
		temp.headIcon = v.headIcon
		temp.headBorder = v.headBorder
		if v.id == self:GetRoomLeaderID() then
			temp.leader = 1
		else
			temp.leader = 0
		end
		table.insert(allData, temp)
	end
	table.sort(allData,function (a,b)
		return a.leader > b.leader
	end)
	if not next(allData) then
		return
	end
	self:SetRoomData(allData)
	self:SetRoomRoleCount(size)
	g_i3k_ui_mgr:OpenUI(eUIID_CreateRoom)
	g_i3k_ui_mgr:RefreshUI(eUIID_CreateRoom)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
end
--查询房间列表
function i3k_game_context:SetMroomQuery(roles)
	local data = {}
	for k,v in pairs(roles) do
		local temp = {}
		temp.id = v.id
		temp.leaderid = v.leader
		temp.leaderName = v.leaderName
		temp.count = v.memberCount
		table.insert(data, temp)
	end
	self:SetListData(data)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FBLB, "updateTeamsData")
end

function i3k_game_context:SetRoomInviteRefuse(roleName)
	g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(353, roleName))
end

function i3k_game_context:SetNearByRoleData(data)
	self._roomData.nearbyData = data
end

function i3k_game_context:GetNearByRoleData()
	return self._roomData.nearbyData
end

--设置帮派助战角色信息
function i3k_game_context:SetAssistRoleData(members)
	local roomData = self:GetRoomData()
	local roomRoleId = {}
	for k, v in pairs(roomData) do
		table.insert(roomRoleId, math.abs(v.id))
	end

	local data = {}
	for i, v in ipairs(members) do
		if not self:vectorContain(roomRoleId, v.role.id) then
			table.insert(data, v.role)
		end
	end
	table.sort(data, function(a, b)
		return a.fightPower > b.fightPower
	end)

	self._roomData.assistData = data

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_CreateRoom, "SetAssistData")
end

function i3k_game_context:GetAssistRoleData()
	return self._roomData.assistData
end

function i3k_game_context:SetRoomData(t)
	self._roomData.memData = t
end

function i3k_game_context:GetRoomData()
	return self._roomData.memData
end

function i3k_game_context:SetRoomLeaderID(leaderId)
	self._roomData.leaderid = leaderId
end

function i3k_game_context:GetRoomLeaderID()
	return self._roomData.leaderid
end

function i3k_game_context:AddRoomData(t)

	table.insert(self._roomData.memData,t)

end
function i3k_game_context:AddRoomRoleCount()
	self._roomData.count = self._roomData.count + 1
end

function i3k_game_context:SetRoomRoleCount(count)
	self._roomData.count = count
end

function i3k_game_context:RemoveRoomRoleCount(count)
	if tonumber(count) then
		if self._roomData.count >= count then
			self._roomData.count = self._roomData.count - tonumber(count)
		end
	end
end
function i3k_game_context:GetRoomRoleCount()
	return self._roomData.count
end

function i3k_game_context:SetRoomID(roomid)
	self._roomData.roomid = roomid
end

function i3k_game_context:SetMapID(mapid)
	self._roomData.mapid = mapid
end

function i3k_game_context:SetRoomType(mtype)
	self._roomData.mtype = mtype
end

function i3k_game_context:GetRoomID()
	return self._roomData.roomid
end

function i3k_game_context:GetMapID()
	return self._roomData.mapid
end

function i3k_game_context:GetCommonRoomType()
	return self._roomData.mtype
end

function i3k_game_context:GetWorldMapID()
	local world = i3k_game_get_world();
	if world then
		return world._cfg.id
	end
	return 0;
end

function i3k_game_context:GetWorldMapType()
	local world = i3k_game_get_world();
	return world and world._mapType or 0
end

function i3k_game_context:SetListData(t)
	self._roomData.list = t
end

function i3k_game_context:GetListData()
	return self._roomData.list
end

function i3k_game_context:CleanRoomData()
	self._roomData.count = 0
	self._roomData.memData = {}
	self._roomData.roomid = 0
	self._roomData.mapid = 0
	self._roomData.leaderid = 0
	self._roomData.createTime = 0
end

function i3k_game_context:MroomEnterReq(mapId, roomId)
	local room = self:IsInRoom()
	if room then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(392))
		return
	end

	if self:GetLevel() < i3k_db_new_dungeon[mapId].reqLvl then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(69))
		return
	end

	local dayEnterCount = self:getDungeonDayEnterTimes(mapId)
	local nedd_dungeon = i3k_db_new_dungeon[mapId].conditionDungeon
	local finishCount = self:getDungeonFinishTimes(nedd_dungeon)
	if nedd_dungeon ~= -1 then
		if finishCount < 1 then
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(70, i3k_db_new_dungeon[nedd_dungeon].name, i3k_db_new_dungeon[mapId].name))
			return
		end
	end
	--副本次数
	local count = i3k_db_new_dungeon[mapId].openTimes
	local goldid = i3k_db_forcewar_base.otherData.goldFuben --黄金副本id
	local Agid =  i3k_db_forcewar_base.otherData.AgFuben--白银
	if mapId == goldid or mapId == Agid then
		local rewardTimes= self:getDungeonDayRewardTimes(mapId)-----势力战获得的黄金/白银组队副本
		count = count+rewardTimes
	end
	if count ~= -1 then
		if dayEnterCount  >= count then
			--g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(71))
			--return
		end
	end
	i3k_sbean.mroom_enterReq(roomId, mapId, gRoom_Dungeon)
end

function i3k_game_context:enterRightHeartRoom(mapId, roomId)
	if i3k_game_get_map_type() ~= g_FIELD then
		return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(15339))
	end
	if g_i3k_game_context:GetLevel() < i3k_db_rightHeart.openlevel then
		return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(15194,i3k_db_rightHeart.openlevel))
	end
	-- if  self:getRightHeartNowHadEnterTimes() <= 0 then
	-- 	return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(15188))
	-- end
	i3k_sbean.mroom_enterReq(roomId, mapId, gRoom_Dungeon)
end

function i3k_game_context:enterNpcDungeonRoom(mapId, roomId)
	if i3k_game_get_map_type() ~= g_FIELD then
		return g_i3k_ui_mgr:PopupTipMessage("您正在参与其他活动")
	end
	local nd = i3k_db_NpcDungeon[mapId]
	if g_i3k_game_context:GetLevel() < nd.openLevel then
		return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(60))
	end
	-- if self:getNpcDungeonEnterTimes() >= nd.joinCnt then
	-- 	return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(71))
	-- end
	i3k_sbean.mroom_enterReq(roomId, mapId, gRoom_NPC_MAP)
end

function i3k_game_context:enterDefenceDungeonRoom(mapId, roomId)
	local cfg = i3k_db_defend_cfg[mapId]
	if i3k_game_get_map_type() ~= g_FIELD then
		return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(392))
	end

	if self:GetLevel() < cfg.needLevel then
		return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(60))
	end
	-- if not self:getTowerDefenceIsCanEnter(cfg.mapID) then
	-- 	return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(71))
	-- end
	i3k_sbean.mroom_enterReq(roomId, mapId, gRoom_TOWER_DEFENCE)
end

----操作转职信息
function i3k_game_context:SetTransformLvl(lvl)
	if not self._roleData.curChar._transformlvl or self._roleData.curChar._transformlvl ~= lvl then
		self._roleData.curChar._transformlvl = lvl
		--DCAccount.removeTag("transformlvl", "")
		--DCAccount.addTag("transformlvl", "transformlvl" .. lvl)
		DCEvent.onEvent("转职", {["转职等级"] = lvl})
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_XB)
end

function i3k_game_context:SetTransformBWtype(bwtype)
	if not self._roleData.curChar._bwtype or self._roleData.curChar._bwtype ~= bwtype then
		self._roleData.curChar._bwtype = bwtype
		--DCAccount.removeTag("bwType", "")
		--DCAccount.addTag("bwType", i3k_get_transfer_type_desc(bwtype))
		DCEvent.onEvent("正邪", {["正邪"] = i3k_get_transfer_type_desc(bwtype) })
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleHeadBg", bwtype)
	end
end

--存储镖车的速度
function i3k_game_context:GetEscortCarSpeed()
	return i3k_db_escort.escort_args.speed
end

--记录当前镖车的位置
function i3k_game_context:GetEscortCarLocation()
	return self._carLocation.mapID, self._carLocation.pos, self._carLocation.rotate
end

function i3k_game_context:SetEscortCarLocation(mapID, pos, rotate)
--[[	if self._carLocation.mapID ~= mapID then
		self._carLocation.mapID = mapID
		self._carLocation.pos = i3k_vec3_clone(pos);
		self._carLocation.rotate = rotate
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleMiniMap,"updateMapInfo")
	end--]]
	self._carLocation.mapID = mapID
	self._carLocation.pos = i3k_vec3_clone(pos);
	self._carLocation.rotate = rotate
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SceneMap,"onUpdateEscortCar")
end

--记录当前镖车的所在线
function i3k_game_context:GetEscortCarMapInstance()
	return self._carMapInstance
end

function i3k_game_context:SetEscortCarMapInstance(carMapInstance)
	self._carMapInstance = carMapInstance
end

function i3k_game_context:ChangeZone(mapID, pos, rotate)
	collectgarbage("collect");

	local newWorld = self._logicMapID ~= mapID;
	self._logicMapID					= mapID;
	self._roleData.curLocation.mapID	= mapID;
	self._roleData.curLocation.rotate	= rotate;
	self._roleData.curLocation.pos		= pos;

	local logic = i3k_game_get_logic();
	if logic then
		if newWorld then

			logic:OnQuitDungeon();
			g_i3k_ui_mgr:CloseAllOpenedUI()
			i3k_engine_set_frame_interval_scale(1.0);

			local _D = require("logic/battle/i3k_dungeon");
			local world = _D.i3k_dungeon.new();
			if not world:Create(mapID) then
				world = nil;
			end

			if world then
				local mapType = i3k_db_dungeon_base[mapID].openType
				local player = logic:GetPlayer();
				if player and player:GetHero() then
					local hero = player:GetHero();
					if hero then
						if mapType == 0 or mapType == 1 or mapType == 2 then
							hero._AutoFight = false;
						elseif mapType == 3 then
							hero._AutoFight = true;
						elseif mapType == 4 then
							hero._AutoFight = true;
						end
						if hero._behavior:Test(eEBPrepareFight) then
							hero._behavior:Clear(eEBPrepareFight)
						end
						if mapType ~= g_Life and mapType ~= g_BIOGIAPHY_CAREER then
							hero:OnMissionMode(false);
						end
					end
				end
				logic:EnterNewWorld(world);
			end
		else
			if not g_i3k_game_context:isOnSprog() then
				local world = logic:GetWorld();
				if world then
					if world._syncRpc then
						local player = logic:GetPlayer();
						if player then
							player:SetHeroPos(self._roleData.curLocation.pos);
						end
					end
				end
				i3k_game_send_str_cmd(i3k_sbean.role_enter_map.new());
			else
				-- 新手关
				local logic = i3k_game_get_logic();
				if logic then
					local world = logic:GetWorld();
					if world then
						g_i3k_game_context:SetMoveState(true)
						g_i3k_game_context:SetMapEnter(true);
						g_i3k_ui_mgr:CloseUI(eUIID_Loading);

						local id = g_i3k_game_context:GetRoleType()
						local level = i3k_db_new_player_guide_init[id].initRoleLevel
						local gender = g_i3k_game_context:GetRoleGender()
						local world = i3k_game_get_world();
						local player = i3k_game_get_player()
						local hero = i3k_game_get_player_hero()
						local inSporg = hero._inSprog
						if player and not hero._inSprog then
							world:OnPlayerEnterWorld(nil);
							player:SetSprogEntity(id, level, gender)
							world:OnPlayerEnterWorld(player);
						end
						local stage = g_i3k_game_context:getPlayerLeadStage()
						local args = g_i3k_game_context:getSpawnLoadArgsByStage(stage)
						world:OnSpawnLoaded(args)
						world:OnTrapLoaded({})
						g_i3k_game_context:SetMoveState(false)
						g_i3k_ui_mgr:OpenUI(eUIID_BattleBase)
						g_i3k_ui_mgr:RefreshUI(eUIID_BattleBase)
					end
				end
			end
		end
	end
end

function i3k_game_context:SetCurrentPos(pos)
	self._roleData.curLocation.pos = i3k_vec3_clone(pos);
end
function i3k_game_context:SetCurrentLine(line)

	self._roleData.mapInstance = line
end
function i3k_game_context:GetCurrentLine()
	return self._roleData.mapInstance
end

----------------------------------------------好友数据--------------------------------------------------------------
function i3k_game_context:SetFriendsData(friendstb)--同步好友
	---转化成数组形式
	local newtable = {}
	for k,v in pairs(friendstb) do
		table.insert(newtable,v)
	end
	self._roleData.friendsdata = newtable
end

function i3k_game_context:GetFriendsData()--获取所有好友数据
	return self._roleData.friendsdata or {}
end

function i3k_game_context:deleteOneFriend(playerId)
	local friendsData = self:GetFriendsData()
	local num = #friendsData
	for i=num,1,-1 do
		local id
		if friendsData[i].fov then
			id = friendsData[i].fov.overview.id
		else
			id = friendsData[i].overview.id
		end
		if id == playerId then
			table.remove(friendsData,i)
		end
	end
	g_i3k_game_context:SetFriendsData(friendsData)--刷新本地
end


function i3k_game_context:GetFriendsDataByID(roleId)--通过Id获取
	local data = self:GetFriendsData()
	if data then
		for k,v in ipairs(data) do
			local key = nil
			if v.fov then
				key = v.fov.overview.id
			else
				key = v.overview.id
			end
			if key == roleId then
				return v
			end
		end
	end
end

function i3k_game_context:GetFrRoleOverviewById(roleId)
	local value = self:GetFriendsDataByID(roleId)
	if value then
		if value.fov then
			return value.fov.overview
		else
			return value.overview
		end
	end
end

--对friendsData进行排序
function i3k_game_context:SortFriendsData()
	local data = self:GetFriendsData()
	if data then
		-- local online = {}
		-- local offline = {}

		-- for i , v in ipairs(data) do
		-- 	if a.fov.online > 0 then
		-- 		table.insert(online,v)
		-- 	else
		-- 		table.insert(offline,v)
		-- 	end
		-- end

		local function cmp(a,b)
			if a.fov.online ~= b.fov.online then
				return a.fov.online > b.fov.online
			end

			if a.focusValue ~= b.focusValue then
				return a.focusValue > b.focusValue
			end

			if a.eachFriend ~= b.eachFriend then
				return a.eachFriend > b.eachFriend
			end

			return false
		end
		--table.sort(online, cmp)
		--table.sort(offline, cmp)
		table.sort(data, cmp)
		self:SetFriendsData(data)
	end
end

--玩家个人信息
function i3k_game_context:setMyselfData(data)
	self._mySelfData = data
end

function i3k_game_context:getMyselfData()
	return self._mySelfData
end

--改变关注度
function i3k_game_context:SetfriendsAttention(attention,friendId)
	local friendstab = self:GetFriendsData()
	for k,v in ipairs(friendstab) do
		if v.fov.overview.id == friendId then
			v.focusValue = attention
			break;
		end
	end
	self:SetFriendsData(friendstab)
end

function i3k_game_context:GetfriendsAttention(id)
	local friendstab = self:GetFriendsData()
	local atten = 100
	for k,v in ipairs(friendstab) do
		if v.fov.overview.id == id then
			atten = v.focusValue
			break;
		end
	end
	return atten
end
--推荐的好友列表
function i3k_game_context:SetRecommendList1(data)
	self._roleData.recommentdata = data or {}
end

function i3k_game_context:SetRecommendList(data,source)
	self._roleData.recommentData = {}
	local newtable={}
	for i,v in ipairs(data) do
		v.flag = source
		table.insert(newtable,v)
	end
	self._roleData.recommentdata = newtable
end

function i3k_game_context:addRecommendData(value,source)
	local data = self._roleData.recommentdata
	if data == nil then
		data = {}
	end
	table.insert(data,value)
	for i,v in ipairs(data) do
		if value.id == v.id then
			v.flag = source
			break;
		end
	end
	self._roleData.recommentdata = data
end

function i3k_game_context:deleteRecommendData(friendId)
	local value =  g_i3k_game_context:GetRecommendDataById(friendId)
	if value then
		local mfData = g_i3k_game_context:GetRecommendList()
		if mfData then
			for i=#mfData,1,-1 do
				if friendId == mfData[i].id then
					table.remove(mfData,i)
					g_i3k_game_context:SetRecommendList1(mfData)
					break;
				end
			end
		end
	end
end


function i3k_game_context:GetRecommendDataById(id)
	local data =  self._roleData.recommentdata
	if data then
		for i,v in ipairs(data) do
			if v.id == id then
				return v
			end
		end
	end
end

function i3k_game_context:GetRecommendList()
	return self._roleData.recommentdata or {}
end
--黑名单列表
function i3k_game_context:SetBlackListData(enemys, banList)
	self._roleData.blackdata = enemys or {}
	self._roleData.banList = banList
end
--添加禁止互动
function i3k_game_context:RemoveBanList(rid)
	local list = self._roleData.banList
	if list[rid] then
		list[rid] = nil
	end
end

function i3k_game_context:AddBanList(rid)
	self._roleData.banList[rid] = true
end
--是否将其禁止互动
function i3k_game_context:IsBlackListBaned(rid)
	return self._roleData.banList[rid]
end
function i3k_game_context:GetBlackListData()
	return self._roleData.blackdata,self._roleData.banList
end

function i3k_game_context:SetBlackListData2(enemys)
	local data1 = enemys.overviews or {}
	local data2 = enemys.addTimes or {}
	local data3 = {}
	for k,v in pairs(data1) do
		v.addtime = data2[k]
		v.isBanInterAct = enemys.banList[v.id] or false
		table.insert(data3,v)
	end
	table.sort( data3, function( a,b )
		return a.addtime > b.addtime
	end )
	self._roleData.blackdata2 = data3
end

function i3k_game_context:GetBlackListData2()
	return self._roleData.blackdata2
end

function i3k_game_context:isBlackFriend(rid)
	local data = self:GetBlackListData()
	return data[rid]
end

function i3k_game_context:delBlackFriend(rid)
	local data = self:GetBlackListData()
	data[rid] = nil
	local data2 = self:GetBlackListData2()
	for i,v in ipairs(data2) do
		if v.id == rid then
			table.remove(data2,i)
			break
		end
	end
	self:RemoveBanList(rid)
end

function i3k_game_context:addBlackFriend(rid)
	local data = self:GetBlackListData()
	data[rid] = true
end

--宿敌列表
function i3k_game_context:SetEnemyListData(enemys)
	self._roleData.enemysdata = enemys
end

function i3k_game_context:GetEnemyListData()
	return self._roleData.enemysdata
end

function i3k_game_context:sortByTime()
	local data = self:GetEnemyListData()
	local function Desc(a,b)
		if a.killTime == b.killTime then
			return a.overview.id<b.overview.id
		else
			return a.killTime > b.killTime
		end
	end
	table.sort(data,Desc)
	self:SetEnemyListData(data)
	return data;
end

function i3k_game_context:removeEnemy(enemyId)
	local data = self:GetEnemyListData()
	for i,e in ipairs(data) do
		if enemyId == e.overview.id then
			table.remove(data,i)
			break;
		end
	end
	self:SetEnemyListData(data)
end

function i3k_game_context:SetRoleSkills(askills, cskills)
	self._roleData.skills.all = askills;
	self._roleData.skills.use = cskills;
end

--加技能是否使用判断jxw
function i3k_game_context:CheakRoleSkillsUnlockAndUsed(skillID ,index)
	local role_type = g_i3k_game_context:GetRoleType()
	local base_skills = i3k_db_generals[role_type].skills
	local _index  = 0
	for k,v in pairs(base_skills) do
		if v == skillID then
			_index = k
			break
		end
	end
	local state =true
	if self._roleData.skills.all[skillID] then
		if  self._roleData.skills.use[_index]==0 then   --当前技能不在使用技能中
			state = false
		end
	end
	if state then
		i3k_sbean.goto_skill_unlock(skillID,index)
	else
		if _index~=0 then
			i3k_sbean.goto_skill_select(_index, skillID)
		end
	end
end
function i3k_game_context:SetRoleUniqueSkills(askills, cskills)
	self._roleData.uniqueSkills.all = askills
	self._roleData.uniqueSkills.use = cskills

end

function i3k_game_context:SetCurRoleUniqueSkills(id,level,bourn,sortId)
	--self._roleData.uniqueSkills.all = askills
	self._roleData.uniqueSkills.all[id] = { id = id, lvl = level, state = bourn ,sortId = sortId}
end

function i3k_game_context:SetRoleBuffs(buffs)
	self._roleData.buffs = buffs;
end

function i3k_game_context:GetRoleInfo()
	return self._roleData;
end

function i3k_game_context:GetRoleSkills()
	return self._roleData.skills.all, self._roleData.skills.use
end

function i3k_game_context:GetRoleUniqueSkills()
	return self._roleData.uniqueSkills.all, self._roleData.uniqueSkills.use
end

function i3k_game_context:GetRoleSkillsCfg(skillID)
	return self._roleData.skills.all[skillID] or nil
end

function i3k_game_context:GetRoleUniqueSkillsCfg(skillID)
	return self._roleData.uniqueSkills.all[skillID] or nil
end

function i3k_game_context:SetRoleSkillLevel(skillID, lvl)
	if self._roleData.skills.all[skillID] then
		self._roleData.skills.all[skillID].lvl = lvl
	else
		self._roleData.skills.all[skillID] = {}
		self._roleData.skills.all[skillID].id = skillID
		self._roleData.skills.all[skillID].lvl = lvl
		self._roleData.skills.all[skillID].state = 0;
	end

	local hero = i3k_game_get_player_hero();
	if hero then
		hero:OnSkillUpgradeLvl(skillID, lvl);
	end
end

function i3k_game_context:SetRoleSkillState(skillID, lvl)
	if self._roleData.skills.all[skillID] then
		self._roleData.skills.all[skillID].state = lvl
	end

	local hero = i3k_game_get_player_hero();
	if hero then
		hero:OnSkillUpgradeRealm(skillID, lvl);
	end
end

function i3k_game_context:SetRoleSelectSkill(pos,skillID)
	if not self._roleData.skills.use[pos] then
		for k,v in pairs(self._roleData.skills.use) do
			if v == skillID then
				self._roleData.skills.use[k] = nil
				break
			end
		end
		self._roleData.skills.use[pos] = skillID
	else
		if self._roleData.skills.use[pos] == skillID then

		else
			local temp = self._roleData.skills.use[pos]
			local is_have = false
			for k,v in pairs(self._roleData.skills.use) do
				if v == skillID then
					self._roleData.skills.use[k] = temp
					self._roleData.skills.use[pos] = skillID
					is_have = true
					break
				end
			end
			if not is_have then
				self._roleData.skills.use[pos] = skillID
			end
		end
	end

end

function i3k_game_context:SetZhiyeXF(id,lvl)
	if self._xinfa._zhiye[id] then
		self._xinfa._zhiye[id] = lvl
	else
		self._xinfa._zhiye[id] = {}
		self._xinfa._zhiye[id] = lvl
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "SetZhiye", false)
end

function i3k_game_context:SetJianghuXF(id,lvl)
	if self._xinfa._jianghua[id] then
		self._xinfa._jianghua[id] = lvl
	else
		self._xinfa._jianghua[id] = {}
		self._xinfa._jianghua[id] = lvl
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "SetJianghu", false)
end

function i3k_game_context:SetPaibieXF(id,lvl)
	if self._xinfa._paibie[id] then
		self._xinfa._paibie[id] = lvl
	else
		self._xinfa._paibie[id] = {}
		self._xinfa._paibie[id] = lvl
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "SetPaibie", false)
end

function i3k_game_context:SetXinfaUpLevlData(id, lvl,percent)
	local needItem = i3k_db_xinfa[id].itemID
	if lvl == 0 then
		self:UseCommonItem(needItem, 1,AT_SPIRIT_LEVEL_UP)
	end

	local item1Count = i3k_db_xinfa_data[id][lvl].item1Count
	self:UseCommonItem(g_BASE_ITEM_BOOK_ENERGY,item1Count,AT_SPIRIT_LEVEL_UP)

	local item2ID = i3k_db_xinfa_data[id][lvl].item2ID
	local item2Count = i3k_db_xinfa_data[id][lvl].item2Count
	if item2ID ~= 0  then
		self:UseCommonItem(item2ID, item2Count,AT_SPIRIT_LEVEL_UP)
	end

	local typeXinfa = i3k_db_xinfa[id].type
	local haveXinfa ---
	local xinfa = g_i3k_game_context:GetXinfa()
	if typeXinfa == g_ZHIYE_XINFA then
		haveXinfa = xinfa._zhiye
		self:SetZhiyeXF(id, lvl)
	elseif typeXinfa == g_JIANGHU_XINFA then
		haveXinfa = xinfa._jianghua
		self:SetJianghuXF(id, lvl)
	elseif typeXinfa == g_PEIBIE_XINFA then
		haveXinfa = xinfa._paibie
		self:SetPaibieXF(id, lvl)
	end
	local hero = i3k_game_get_player_hero()
	hero:UpdateTalentProps(nil, true)
	hero:UpdateCombatTypeProp()
	hero:UpdatePassiveProp()
	--i3k_log("--SetXinfaUpLevlData = -------",id,percent)----
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "SetData", id,haveXinfa,percent)---gai
	if lvl % 7 == 0 and lvl ~= 0 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "updateAnimation", id,haveXinfa)--gai
	end
	if lvl ~= 0 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "playStaveEffect", lvl)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
end

function i3k_game_context:GetXinfa()
	return self._xinfa
end

function i3k_game_context:GetUseXinfa()
	return self._use_xinfa
end
function i3k_game_context:CleanUseXinfaData()
	 self._use_xinfa = {_zhiye = {},_jianghua = {},_paibie = {}}
end

function i3k_game_context:SetUseXinfa(id)

	local typeXinfa = i3k_db_xinfa[id].type
	if typeXinfa == g_ZHIYE_XINFA then
		local count = #self._use_xinfa._zhiye
		local is_have = false
		local index = 0
		for k,v in pairs(self._use_xinfa._zhiye) do
			if v == id then
				is_have = true
				index = k
				break
			end
		end
		if is_have then
			table.remove(self._use_xinfa._zhiye, index)
		else
			if count < g_i3k_db.i3k_db_get_professional_xinfa_count() then
				self._use_xinfa._zhiye[count + 1] = id
			end
		end
	elseif typeXinfa == g_JIANGHU_XINFA then
		local count = #self._use_xinfa._jianghua
		local is_have = false
		local index = 0
		for k,v in pairs(self._use_xinfa._jianghua) do
			if v == id then
				is_have = true
				index = k
				break
			end
		end
		if is_have then
			table.remove(self._use_xinfa._jianghua, index)
		else
			if count < i3k_db_common.spiritBook.jianghuCount then
				self._use_xinfa._jianghua[count + 1] = id
			end
		end
	elseif typeXinfa == g_PEIBIE_XINFA then
		local count = #self._use_xinfa._paibie
		local is_have = false
		local index = 0
		for k,v in pairs(self._use_xinfa._paibie) do
			if v == id then
				is_have = true
				index = k
				break
			end
		end
		if is_have then
			table.remove(self._use_xinfa._paibie, index)
		else
			if count < i3k_db_common.spiritBook.peibieCount then
				self._use_xinfa._paibie[count + 1] = id
			end
		end
	end
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateTalentEffector()
	end
end

function i3k_game_context:SetUseXinfaByType(id, install,percent)--
	local typeXinfa = i3k_db_xinfa[id].type
	local count
	local haveXinfa ---new
	local xinfa = g_i3k_game_context:GetXinfa()

	if typeXinfa == g_ZHIYE_XINFA then
		count = #self._use_xinfa._zhiye
		haveXinfa = xinfa._zhiye
		if install then
			if count < g_i3k_db.i3k_db_get_professional_xinfa_count() then
				self._use_xinfa._zhiye[count + 1] = id
			end
		else
			local is_have = false
			local index = 0
			for k,v in pairs(self._use_xinfa._zhiye) do
				if v == id then
					is_have = true
					index = k
					break
				end
			end
			if is_have then
				table.remove(self._use_xinfa._zhiye, index)
			end
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "SetZhiye", false)
	elseif typeXinfa == g_JIANGHU_XINFA then
		local count = #self._use_xinfa._jianghua
		haveXinfa = xinfa._jianghua
		if install then
			if count < i3k_db_common.spiritBook.jianghuCount then
				self._use_xinfa._jianghua[count + 1] = id
			end
		else
			local is_have = false
			local index = 0
			for k,v in pairs(self._use_xinfa._jianghua) do
				if v == id then
					is_have = true
					index = k
					break
				end
			end
			if is_have then
				table.remove(self._use_xinfa._jianghua,index)
			end
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "SetJianghu", false)
	elseif typeXinfa == g_PEIBIE_XINFA then
		count = #self._use_xinfa._paibie
		haveXinfa = xinfa._paibie
		if install then
			if count < i3k_db_common.spiritBook.peibieCount then
				self._use_xinfa._paibie[count + 1] = id
			end
		else
			local is_have = false
			local index = 0
			for k,v in pairs(self._use_xinfa._paibie) do
				if v == id then
					is_have = true
					index = k
					break
				end
			end
			if is_have then
				table.remove(self._use_xinfa._paibie,index)
			end
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "SetPaibie", false)
	end
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateTalentEffector()
		hero:UpdatePassiveProp()
		hero:UpdateCombatTypeProp()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "SetData", id,haveXinfa,percent)---gai
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XinFa, "spiritsPerBtnFormat")
end

--副本数据
function i3k_game_context:SetRoleFubenData(id,count)
	id = tonumber(id)
	count = tonumber(count)
	if id and count then
		self._role_fuben[id] = count
	end
end

function i3k_game_context:GetRoleFubenData(id)
	return self._role_fuben[id]
end

function i3k_game_context:AddFubenCount(id)
	if self._role_fuben[id] then
		self._role_fuben[id] = self._role_fuben[id] + 1
	else
		self._role_fuben[id] = 1
	end
end



--登陆天数
function i3k_game_context:SetLoginDays(count)
	self._logindays = count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_KeepActivity, "refreshUIData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "updateKeepUI")
end

function i3k_game_context:AddLoginDays(count)
	self._logindays = self._logindays + count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_KeepActivity, "refreshUIData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "updateKeepUI")
end

function i3k_game_context:GetLoginDays()
	return self._logindays
end
---角色创建时间
function i3k_game_context:SetRoleCreateTime(time)
	self._createTime = time
end
function i3k_game_context:GetRoleCreateTime()
	return self._createTime
end
--角色等级改变时间
function i3k_game_context:SetRoleLevelUpTime(time)
	self._lastLevelUpTime = time
end

function i3k_game_context:GetRoleLevelUpTime()
	return self._lastLevelUpTime
end
--------------------佣兵数据操作------------------
-- all={id={"id" = 1,"level" = 1,"starlvl" = 1,"exp" = 1,"transfer" = 1,"transferTask" = 1}}
function i3k_game_context:SetYongbingData(id,level,exp,starlvl,transfer,breakSkill,spirits,exploit, petName)
	self._mercenaries.all[id] = {id = id,level = level,starlvl = starlvl,exp = exp,transfer = transfer,breakSkill=breakSkill, spirits = spirits, exploit = exploit, petName = petName}
end

--召唤佣兵数据
function i3k_game_context:SetPetMakeData(id)
	if self:GetPetCount() == 0 then --首次召唤佣兵时加入副本出战设置
		self:AddNormalDungeonPets(i3k_db_mercenaries[id], 1)
		self:SetYongbingPlay(id, DUNGEON)
		local petsTable = {}
		for i,v in ipairs(self:GetNormalDungeonPets()) do
			petsTable[v.id] = true
		end
		i3k_sbean.goto_pet_privatemapset(petsTable)
	end
	local breakSkill = {}
	local level = i3k_db_mercenaries[id].firstLvl >= self:GetLevel() and self:GetLevel() or i3k_db_mercenaries[id].firstLvl
	local transfer = level >= i3k_db_suicong_transfer[1].maxLvl and 1 or 0
	transfer = level >= i3k_db_suicong_transfer[2].maxLvl and 2 or transfer
	transfer = level >= i3k_db_suicong_transfer[3].maxLvl and 3 or transfer
	local temp = {id = id, level = level, exp = 0, starlvl = i3k_db_mercenaries[id].firstStarLvl, transfer = transfer, breakSkill = breakSkill}
	local spirits = {[1]={id = 0, level = 0},
	[2]={id = 0, level = 0},
	[3]={id = 0, level = 0},
	[4]={id = 0, level = 0},
	[5]={id = 0, level = 0},
	[6]={id = 0, level = 0},
	}
	self:SetYongbingData(temp.id, temp.level, temp.exp, temp.starlvl, temp.transfer, temp.breakSkill,spirits,0, i3k_db_mercenaries[id].name)
	local skill = {[1] = 1, [2] = 1, [3] = 1, [4] = 1}
	self:SetMercenarySkillData(id, skill)
	local _tmp = self:GetYongbingData()
	local count = 0
	for k,v in pairs(_tmp) do
		count = count + 1
	end
	local arg = {use = 0, awake = 0, task = {state = 0, value = 0, receiveTime = 0, id = 0}};
	self:setPetWaken(id, arg);
	self:SetTaskDataByTaskType(count,g_TASK_GET_PET_COUNT)
	local itemid = g_i3k_db.i3k_db_get_pet_cfg(id).consumeItem
	local itemCount = g_i3k_db.i3k_db_get_pet_cfg(id).consumeCount
	if itemid ~= 0 then
		self:UseCommonItem(itemid, itemCount,AT_MAKE_PET)
	end
	self:SetYongbingOtherData(id,1,0)
	g_i3k_ui_mgr:RefreshUI(eUIID_SuiCong)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateCallPetAnimation")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updatePetModule", id, 1)
	self:SetTaskDataByTaskType(id, g_TASK_OWN_PET)

	DCEvent.onEvent("拥有随从", {["数量"] = tostring(self:GetPetCount())})
	DCEvent.onEvent("随从启动", { ["随从ID"] = tostring(id) })
end

function i3k_game_context:SetPetSkillData(petId, skillIndex, level)
	if self._mercenaries.skill[petId] then
		self._mercenaries.skill[petId][skillIndex] = level
	end
	local cfg = g_i3k_db.i3k_db_get_pet_cfg(petId)
	local skillId
	if skillIndex == 4 then
		skillId = cfg.ultraSkill
	else
		skillId = cfg.skills[skillIndex]
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_SuicongUpSkillLevel, skillId, petId, skillIndex)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "recordSkillBtn")
end

function i3k_game_context:SetBreakSkillLvl(id, skillID, lvl)
	if self._mercenaries.all[id].breakSkill then
		self._mercenaries.all[id].breakSkill[skillID] = lvl
	end
end

--获取宠物技能总等级
function i3k_game_context:GetPetSkillLvlSum()
	local lvlSum = 0
	if self._mercenaries.skill then
		for _,v in pairs(self._mercenaries.skill) do
			for _,v2 in pairs(v ) do
				lvlSum = lvlSum + v2
			end
		end
	end
	return lvlSum
end
--修改宠物名字
function i3k_game_context:SetPetName(id, name)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].petName = name
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updatePetName", id, name)
		local world = i3k_game_get_world()
		if world then
			local Entity = world:GetEntity(eET_Mercenary, id.."|"..self:GetRoleId())
  			if Entity then
 				Entity:ChangeHeroName(name)
 			end
		end
	end
end

--获取佣兵名名字
function i3k_game_context:getPetName(id)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].petName
	else
		return ""
	end
end

--获取佣兵转职等级
function i3k_game_context:getPetTransfer(id)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].transfer
	else
		return 0
	end
end
--获取佣兵等级
function i3k_game_context:getPetLevel(id)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].level
	else
		return 0
	end
end

--获取佣兵经验
function i3k_game_context:getPetExp(id)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].exp
	else
		return 0
	end
end

--获取佣兵星级
function i3k_game_context:getPetStarLvl(id)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].starlvl
	else
		return 0
	end
end

--判断是否拥有该佣兵
function i3k_game_context:IsHavePet(id)
	if self._mercenaries.all[id] then
		return true
	else
		return false
	end
end

--获取佣兵的友好度等级
function i3k_game_context:getPetFriendLvl(id)
	if self._mercenaries.other[id] then
		return self._mercenaries.other[id].friendLvl
	else
		return 1
	end
end
--获取宠物喂养数据(佣兵好友度等级总和) 同一种东西  for 我要提升
function i3k_game_context:GetPetFriendLvlSum()
	local levelSum = 0
	if self._mercenaries.other then
		for k,v in pairs(self._mercenaries.other) do
			if self:getIsCompletePetLifeTaskFromID(k) then
				levelSum = levelSum + v.friendLvl
			end
		end
	end
	return levelSum
end

--获取佣兵的友好度经验
function i3k_game_context:getPetFriendExp(id)
	if self._mercenaries.other[id] then
		return 	self._mercenaries.other[id].friendExp
	else
		return 0
	end
end

--获取当前大于五星的佣兵数量
function i3k_game_context:getCurrentPetCount()
	local MaxCount = 0
	for k,v in pairs(self._mercenaries.all) do
		local starlvl = tonumber(v.starlvl)
		if not i3k_db_suicong_upstar[tonumber(k)][starlvl + 1] then
			MaxCount = MaxCount + 1
		end
	end
	return MaxCount
end

--获取当前大于指定等级的佣兵数量
function i3k_game_context:GetPetCountByLvl(needLvl)
	local count = 0
	for k,v in pairs(self._mercenaries.all) do
		if v.level >= needLvl then
			count = count + 1
		end
	end

	return count
end

--获取大于多少等级的随从个数
function i3k_game_context:GetAllPetCountForLevel(level)
	local count = 0
	for k,v in pairs(self._mercenaries.all) do
		local nowLevel = tonumber(v.level)
		if nowLevel >= level then
			count = count + 1
		end
	end
	return count
end


--获取当前大于指定星级的佣兵数量
function i3k_game_context:GetPetCountByStar(needStar)
	local count = 0
	for k,v in pairs(self._mercenaries.all) do
		if v.starlvl >= needStar then
			count = count + 1
		end
	end
	return count
end

--获取随从技能数据
function i3k_game_context:GetPetSkillData(petID, skillID, skillLvl)
	local needItemId = {}
	local needItemCount = {}
	for i,e in ipairs(i3k_db_suicong_skillUplvl[petID]) do
		if e.petSkillId == skillID and e.petSkillLevel == skillLvl then
			needItemId[1] = e.needItemId1
			needItemId[2] = e.needItemId2
			needItemCount[1] = e.needItemCount1
			needItemCount[2] = e.needItemCount2
			return e.needPetLevel, needItemId, needItemCount
		end
	end
end

--是否足够随从技能升级
function i3k_game_context:isEnoughUpPetSkillLevel(needItemId, needItemCount, nowLvl, needLvl)
	if not needLvl or nowLvl < needLvl then
		return false
	end
	local allItem = {}
	for i=1,2 do
		if needItemId[i] ~= 0 then
			allItem[needItemId[i]] = (allItem[needItemId[i]] or 0) + needItemCount[i]
			if allItem[needItemId[i]] > g_i3k_game_context:GetCommonItemCanUseCount(needItemId[i]) then
				return false
			end
		end
	end
	return true
end

--获取当前大于指定突破等级的佣兵数量
function i3k_game_context:GetPetCountByBreakLevel(needBreakLevel)
	local count = 0
	for k,v in pairs(self._mercenaries.all) do
		for i,e in pairs(v.breakSkill) do
			if e >= needBreakLevel then
				count = count + 1
			end
		end
	end
	return count
end

--随从成就的参数
function i3k_game_context:GetPetAchievementData(needType, args)
	if needType == 1 then
		return self:GetAllPetCountForLevel(args)
	elseif needType == 2 then
		return self:GetPetCountByStar(args)
	elseif needType == 3 then
		return self:GetPetCountByBreakSkillLvl(args)
	elseif needType == 4 then
		--合修成就
	end
end

--获取当前突破技能大于指定等级的佣兵数量
function i3k_game_context:GetPetCountByBreakSkillLvl(needLvl)
	local count = 0
	for k,v in pairs(self._mercenaries.all) do
		local allcheck = true;
		local cfg = g_i3k_db.i3k_db_get_pet_cfg(v.id)
		for i=1,4 do
			local tmp_skill = string.format("breakSkill%s",i)
			local break_skill = cfg[tmp_skill]
			local skillLvl =  g_i3k_game_context:getPetBreakSkillLvl(v.id,break_skill)
			if skillLvl < needLvl then
				allcheck = false;
				break;
			end
		end
		if allcheck then
			count = count + 1
		end
	end
	return count
end

--获取当前拥有的佣兵个数
function i3k_game_context:GetPetCount()
	local count = 0
	for k,v in pairs(self._mercenaries.all) do
		count = count + 1
	end
	return count
end

--获取佣兵的突破技能
function i3k_game_context:getPetBreakSkill(id)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].breakSkill
	else
		return 0
	end
end

--获取佣兵突破技能等级
function i3k_game_context:getPetBreakSkillLvl(id,skillId)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].breakSkill[skillId] or 0
	else
		return 0
	end
end

--获取佣兵合修等级
function i3k_game_context:GetBackfitLevel(id)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].backfitLevel or 0
	else
		return 0
	end
end

--获取佣兵心法数据
function i3k_game_context:getPetSpiritsData(id)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].spirits
	else
		return {}
	end
end

--获取宠物平均心法等级
function i3k_game_context:GetPetSpiritsAllData()
	local petCount = 0
	local lvlSum = 0
	if self._mercenaries.all then
		for _,v in pairs(self._mercenaries.all) do
			petCount = petCount + 1
			for _,v2 in pairs(v.spirits) do
				lvlSum = lvlSum + v2.level
			end
		end
	end
	return lvlSum / petCount
end
--获取佣兵战绩
function i3k_game_context:getPetExploit(id)
	if self._mercenaries.all[id] then
		return self._mercenaries.all[id].exploit
	else
		return 0
	end
end

--判断武库或心法是否开启（随从）
function i3k_game_context:GetCanOpenSpirits(id)
	if id then
		if self:getPetLevel(id) >= i3k_db_common.petBackfit.petSpiritOpenLvl then
			return true
		end
		return false
	end
	for k,v in pairs(self._mercenaries.all) do
		if self:getPetLevel(v.id) >= i3k_db_common.petBackfit.petSpiritOpenLvl then
			return true
		end
	end
	return false
end

--获取心法红点是否显示
function i3k_game_context:getXinFaRedPointVisible(id)
	local spirits = g_i3k_game_context:getPetSpiritsData(id)
	local myExploitConfig = i3k_db_suicong_exploit[id]
	local exploit = g_i3k_game_context:getPetExploit(id)

	if not spirits or not myExploitConfig or not exploit then
		return false
	end

	--如果武库没有可学心法直接返回 false
	if not next(self:getCanStudySpirits(id)) then
		return false
	end

	for i = 1,#myExploitConfig do
		local spirit = spirits[i]
		if not spirit or spirit.id ==0 then
			local cfg = myExploitConfig[i]
			if exploit >= cfg.needExploit then
				return true
			end
		end
	end

	return false
end

--判断武库红点是否显示
function i3k_game_context:getWuKuRedPointVisible()
	for id,_ in ipairs(i3k_db_suicong_spirits) do
		if self:getWuKuRedPointVisibleById(id) then
			return true
		end
	end
	return false
end

function i3k_game_context:getWuKuRedPointVisibleById(id)
	local spirits = g_i3k_game_context:getPetAllSpirits()
	local spiritConfig = i3k_db_suicong_spirits[id];
 	local Books = g_i3k_game_context:getPetBooks()
	for i,v in ipairs(spiritConfig) do
		local level = spirits[v.id] or 0;
		if level + 1 == v.level then
			local isEnough = true
			for i = 1, 2 do
				local itemId = v["needItemId".. i]
				if itemId ~= 0 then
					local haveCount = 0
					if itemId == g_BASE_ITEM_COIN then
						haveCount = g_i3k_game_context:GetCommonItemCanUseCount(itemId)
					else
						haveCount = self:getPetBooksWithId(itemId)
					end

					if haveCount < v["needItemCount".. i] then
						isEnough = false
					end
				end
			end
			if isEnough then
				return true
			end
			break
		end
	end
	return false
end

--获取所有武库数据
function i3k_game_context:getPetAllSpirits()
	return self._mercenaries.allSpirits
end

function i3k_game_context:setPetSpiritsData(id, index, spiritID, level)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].spirits[index] = {id = spiritID, level = level}
	end
end

function i3k_game_context:AddPetExploit(id, exploit)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].exploit = (self._mercenaries.all[id].exploit or 0) + exploit
	end
end

function i3k_game_context:setPetAllSpirits(allSpirits)
	self._mercenaries.allSpirits = allSpirits
end

function i3k_game_context:addPetAllSpirits(spirits)
	for k,v in pairs(spirits) do
		self._mercenaries.allSpirits[k] = v
	end
end

function i3k_game_context:AddPetBreakSkillLvl(id,skillId,count)
	if self._mercenaries.all[id] and self._mercenaries.all[id].breakSkill[skillId] then
		self._mercenaries.all[id].breakSkill[skillId] = self._mercenaries.all[id].breakSkill[skillId] + count
		return self._mercenaries.all[id].breakSkill[skillId]
	end
	return 0
end

function i3k_game_context:SetYongbingOtherData(id,friendLvl,friendExp)
	self._mercenaries.other[id] = {friendLvl = friendLvl,friendExp = friendExp }
end

function i3k_game_context:SetYongbingLvl(id,level)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].level = level
		if level >= i3k_db_common.petBackfit.hexiuNeedLvl then
			if self._roleTask.lifetask[id] == nil then
				self:setOnePetLifeTask(id, 0, 0)
			end
			if self._mercenaries.all[id].times == nil then
				self:SetDailyCompleteTask(id, 0)
			end
		end
	end
end

function i3k_game_context:SetYongbingExp(id,exp)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].exp = exp
	end
end

function i3k_game_context:SetYongbingStarlvl(id,starlvl)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].starlvl = starlvl
	end
end

function i3k_game_context:AddYongbingStarLvl(id,count)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].starlvl = count + self._mercenaries.all[id].starlvl
	end
end

function i3k_game_context:SetBackfitLevel(id, level)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].backfitLevel = level
	end
end

function i3k_game_context:SetYongbingFriendLvl(id,friendLvl)
	if self._mercenaries.other[id] then
		self._mercenaries.other[id].friendLvl = friendLvl
	end
end

function i3k_game_context:SetYongbingFriendExp(id,friendExp)
	if self._mercenaries.other[id] then
		self._mercenaries.other[id].friendExp = friendExp
	end
end

--获取随从合修任务的次数
function i3k_game_context:SetDailyCompleteTask(id, times)
	self._mercenaries.all[id].times = times
end

function i3k_game_context:GetDailyCompleteTask(id)
	if self._mercenaries.all[id] then
		if self._mercenaries.all[id].times then
			return self._mercenaries.all[id].times
		end
	end
	return nil
end

function i3k_game_context:AddYongBIngFriendExp(id,count)
	self:SetPrePower()
	local old_lv = self._mercenaries.other[id].friendLvl
	local oldLevel = old_lv
	local old_exp = self._mercenaries.other[id].friendExp
	local need_exp = 0
	if old_lv == 0 then
		old_lv = 1
	end
	if not i3k_db_suicong_relation[id][old_lv + 1] then

		need_exp = i3k_db_suicong_relation[id][old_lv].needCount
		if need_exp > old_exp + count then
			self._mercenaries.other[id].friendExp = old_exp + count
		else
			self._mercenaries.other[id].friendExp = need_exp
		end
	end

	local tmp_exp =  old_exp + count
	while i3k_db_suicong_relation[id][old_lv + 1] do
		need_exp = i3k_db_suicong_relation[id][old_lv + 1].needCount
		if need_exp > tmp_exp then
			self._mercenaries.other[id].friendExp = tmp_exp
			break
		else
			old_lv = old_lv + 1
			tmp_exp = tmp_exp - need_exp
			self._mercenaries.other[id].friendExp = tmp_exp
			self._mercenaries.other[id].friendLvl = old_lv
			--g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(318,i3k_db_mercenaries[id].name,i3k_db_suicong_relation[id][old_lv].name))
		end
	end
	if oldLevel < self._mercenaries.other[id].friendLvl then
		self:RefreshMercenaryRelationProps() --刷新属性
		self:ShowPowerChange()
		g_i3k_ui_mgr:PopupTipMessage("喂养等级提升")
	end
end


function i3k_game_context:SetYongbingTransfer(id,transfer)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].transfer = transfer
	end
end

function i3k_game_context:AddYongbingTransfer(id ,count)
	if self._mercenaries.all[id] then
		self._mercenaries.all[id].transfer = count + self._mercenaries.all[id].transfer
	end
end

function i3k_game_context:SetYongbingPlay(id,playType)
	if not self._mercenaries.play[playType] then
		if playType == FIELD then
			self._mercenaries.play[playType] = id
			self:UpdateWeaponSikillProp()
		elseif playType == DUNGEON then
			self._mercenaries.play[playType] = {}
			table.insert(self._mercenaries.play[playType],id)
		elseif playType == FACTION_DUNGEON then
			self._mercenaries.play[playType] = {}
			table.insert(self._mercenaries.play[playType],id)
		elseif playType == ARENA then
			self._mercenaries.play[playType] = {}
			table.insert(self._mercenaries.play[playType], id)
		end
	else
		if playType == FIELD then
			self._mercenaries.play[playType] = id
			self:UpdateWeaponSikillProp()
		elseif playType == DUNGEON or playType == FACTION_DUNGEON or playType == ARENA then
			local is_mark = false
			for k,v in pairs(self._mercenaries.play[playType]) do
				if v == id then
					table.remove(self._mercenaries.play[playType],k)
					is_mark = true
					break
				end
			end
			if not is_mark then
				table.insert(self._mercenaries.play[playType],id)
			end
		end
	end
end

function i3k_game_context:CleanDungeonPlayPet()
	self._mercenaries.play[DUNGEON] = {}
end

function i3k_game_context:CleanFactionDungeonPlayPet()
	self._mercenaries.play[FACTION_DUNGEON] = {}
end

function i3k_game_context:GetYongbingData(isByPower)
	if isByPower then
		local sortPetsTable = {}
		for i,v in pairs(self._mercenaries.all) do
			local power = self:getBattlePower(v.id)
			table.insert(sortPetsTable, v)
			v.power = power
		end
		table.sort(sortPetsTable, function(a, b)
			return a.power>b.power
		end)
		return sortPetsTable,self._mercenaries.play,self._mercenaries.other
	else
		return self._mercenaries.all,self._mercenaries.play,self._mercenaries.other
	end
end

function i3k_game_context:GetYongbingNums()
	local allPets = self:GetYongbingData()
	local hasPetsCount = 0
	for i,v in pairs(allPets) do
		hasPetsCount = hasPetsCount + 1
	end
	return hasPetsCount
end

function i3k_game_context:GetAllYongBing()
	return self._mercenaries.all,self._mercenaries.play,self._mercenaries.other
end

--获取宠物最高等级
function i3k_game_context:GetPetsMaxLevel()
	local level = 0
	for k, v in pairs(self:GetAllYongBing()) do
		level = math.max(level, v.level)
	end
	return level
end
---获取一个佣兵的详细数据
function i3k_game_context:getOnePetData(id)
	return self._mercenaries.all[id]
end

--获取当前野外出战的佣兵
function i3k_game_context:getFieldPetID()
	return self._mercenaries.play[FIELD] or 0
end

--获取合修的属性
function i3k_game_context:getHexiuProperty(id)
	local friendLvl = self:getPetFriendLvl(id)
	local info = i3k_db_suicong_relation[id][friendLvl]
	local propertyID = {}
	local propertyCount = {}
	for i = 1,7 do
		if info["propertyId" .. i] ~= 0 then
			propertyID[i] = info["propertyId" .. i]
			propertyCount[i] = info["propertyCount" .. i]
		end
	end
	return propertyID, propertyCount
end

--获取佣兵战力
function i3k_game_context:getBattlePower(id)

	local a,b,friend = self:GetAllYongBing()
	if not a[id] then
		return 0
	end
	local level = a[id].level
	local yongbingCfg = g_i3k_db.i3k_db_get_pet_cfg(id)
	if self:getPetIsWaken(id) then
		yongbingCfg = i3k_db_mercenariea_waken_property[id];
	end

	local function get_attr(base,inc1,inc2)
		local value = (level -1)*(level -1)*inc1 + (level - 1)*inc2 + base
		value = math.modf(value)
		return value
	end
	local tab = {}

	tab[1001] = get_attr(yongbingCfg.hpOrg, yongbingCfg.hpInc1, yongbingCfg.hpInc2)
	tab[1002] = get_attr(yongbingCfg.atkNOrg, yongbingCfg.atkNInc1, yongbingCfg.atkNInc2)
	tab[1003] = get_attr(yongbingCfg.defNOrg, yongbingCfg.defNInc1, yongbingCfg.defNInc2)
	tab[1004] = get_attr(yongbingCfg.atrOrg, yongbingCfg.atrInc1, yongbingCfg.atrInc2)
	tab[1005] = get_attr(yongbingCfg.ctrOrg, yongbingCfg.ctrInc1, yongbingCfg.ctrInc2)
	tab[1006] = get_attr(yongbingCfg.acrNOrg, yongbingCfg.acrNInc1, yongbingCfg.acrNInc2)
	tab[1007] = get_attr(yongbingCfg.touOrg, yongbingCfg.touInc1, yongbingCfg.touInc2)
	local xinfa_inc,weapon_inc = 0,0
	tab[1043],tab[1044],xinfa_inc,weapon_inc = self:get_star_data(id)
	xinfa_inc = xinfa_inc + yongbingCfg.atkCOrg*100
	weapon_inc = weapon_inc + yongbingCfg.atkWOrg*100

	local spirits = self:getPetSpiritsData(id)
	for _,e in ipairs(spirits) do
		if e.id ~= 0 then
			local proID, value = self:GetMercenarySpirits(id, e.id, e.level, 1)
			if proID then
				if tab[proID] then
					tab[proID] = tab[proID] + value
				end
			end
		end
	end
	if self:getIsCompletePetLifeTaskFromID(id) then
		local propertyID,propertyCount = self:getHexiuProperty(id)
		for i=1, #propertyID do
			if propertyID[i] ~= 0 then
				if tab[propertyID[i]] then
					if self:getPetStarLvl(id) == #i3k_db_suicong_upstar[id] and not self:getPetIsWaken(id) then
						propertyCount[i] = propertyCount[i] * (i3k_db_common.petBackfit.upCount/10000 + 1)
					elseif self:getPetStarLvl(id) ~= #i3k_db_suicong_upstar[id] and self:getPetIsWaken(id) then
						propertyCount[i] = propertyCount[i] * (i3k_db_mercenariea_waken_property[id].upArg/10000 + 1)
					elseif self:getPetStarLvl(id) == #i3k_db_suicong_upstar[id] and self:getPetIsWaken(id) then
						propertyCount[i] = propertyCount[i] * (i3k_db_mercenariea_waken_property[id].upArg/10000 + i3k_db_common.petBackfit.upCount/10000 + 1)
					end
					tab[propertyID[i]] = tab[propertyID[i]] + propertyCount[i]
				end
			end
		end
	end

	--宠物装备属性
	local petEquipProps = self:GetPetEquipProps(id)
	for k, v in pairs(petEquipProps) do
		tab[k] = (tab[k] or 0) + v
	end
	--守护灵兽属性
	local petGuardProps = g_i3k_db.i3k_db_pet_guard_pet_props()	
	for k, v in pairs(petGuardProps) do
		if k == 1043 or k == 1044 then
			tab[k] = (tab[k] or 0) + v / 100
		else
			tab[k] = (tab[k] or 0) + v
		end
	end

	local petEquipSkillPower = self:GetPetEquipSkillPowerByPetID(id)

	tab[1043] = tab[1043] and tab[1043] / 100 or 0
	tab[1044] = tab[1044] and tab[1044] / 100 or 0

	return math.modf((g_i3k_db.i3k_db_get_battle_power(tab,false,true) + 73 * xinfa_inc + 118 * weapon_inc + petEquipSkillPower)*0.5)
end

function i3k_game_context:get_star_data(id)
	local a,b,friend = self:GetAllYongBing()
	local starlvl = a[id].starlvl
	local finc = i3k_db_suicong_upstar[id][starlvl].hurtIncrease
	local tdec = i3k_db_suicong_upstar[id][starlvl].hurtAvoid
	local xinfa_inc = i3k_db_suicong_upstar[id][starlvl].xinfaIncrease
	local weapon_inc = i3k_db_suicong_upstar[id][starlvl].weaponIncrease
	for i,v in pairs(a[id].breakSkill) do
		local skilllvl = a[id].breakSkill[i]
		if skilllvl >0 then
			local skill = i3k_db_suicong_breakdata[i][skilllvl]
			if skill.skillType == 1 then
				finc = finc + skill.increaseCount
			elseif skill.skillType == 2 then
				tdec = tdec + skill.increaseCount
			elseif skill.skillType == 3 then
				xinfa_inc = xinfa_inc + skill.increaseCount
			elseif skill.skillType == 4 then
				weapon_inc = weapon_inc + skill.increaseCount
			end
		end
	end
	return finc/100,tdec/100,xinfa_inc*100,weapon_inc*100
end


--------------------------佣兵协议begin--------------------------------
--佣兵转职
function i3k_game_context:PetTransferLvl(id, lvl)
	self:AddYongbingTransfer(id,1)
	local cfg = g_i3k_db.i3k_db_get_pet_transfer_cfg(lvl)
	for i=1, 3 do
		local tmp_Id = string.format("item%sID", i)
		local tmp_Count = string.format("item%sCount", i)
		if cfg[tmp_Id] ~= 0 and cfg[tmp_Count] ~= 0 then
			self:UseCommonItem(cfg[tmp_Id], cfg[tmp_Count],AT_PET_TRANSFORM)
		end
	end

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateAllPetMsg")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateTransterAnimation")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong,"onUpLvlUpdata")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateBattleMatk")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateSelectMark")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updatePetModule", id, 1)
end

--佣兵升级
function i3k_game_context:PetUpLevel(id,items,level,exp,compare_lvl)
	local oldPower = math.modf(self:getBattlePower(id))
	self:SetYongbingLvl(id,level)
	self:SetYongbingExp(id,exp)
	for k,v in pairs(items) do
		self:UseCommonItem(k,v,AT_PET_LEVEL_UP)
	end
	local logic = i3k_game_get_logic()
	local player = logic:GetPlayer()
	if player then
		for k = 1, player:GetMercenaryCount() do
			mercenary = player:GetMercenary(k);
			local guid = string.split(mercenary._guid, "|")
			if tonumber(guid[2]) == id then
				local oldlvl = mercenary:GetPropertyValue(ePropID_lvl);
				if level ~= oldlvl then
					mercenary:UpdateProperty(ePropID_lvl, 1, level - oldlvl, true, false)
				end
			end
		end
	end
	if compare_lvl.isUpLvl then
		local data =
		{	oldData = self:GetPetAttributeValue(id, compare_lvl.before_lvl),
			newData = self:GetPetAttributeValue(id, level),
			lvl = level}
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateUpLevelAnimation", data)
		g_i3k_game_context:RefreshMercenaryAchievementProps()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "testRefresh")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
	local afterPower = math.modf(self:getBattlePower(id))
	if compare_lvl.isUpLvl then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updatePetModule", id, 1)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "changeBattlePower", afterPower, oldPower)
	end
end
--佣兵刷新血条
function i3k_game_context:PetUpHpProp(id , count)
	local cfg = g_i3k_db.i3k_db_get_other_item_cfg(id)
	if cfg.args1 == ePropID_maxHP then
		local mercenary = i3k_game_get_mercenary_entity(self:getFieldPetID())
		if mercenary then
			local addHp = cfg.args2 * count
			mercenary:UpdateProperty(ePropID_maxHP,1 ,addHp, true, false)
		end
	end
end

--佣兵买等级
function i3k_game_context:PetBuyLevel(id, lvl, needDiamond)
	local oldPower = math.modf(self:getBattlePower(id))
	local oldLvl = self:getPetLevel(id)
	self:SetYongbingLvl(id,lvl)
	self:UseDiamond(needDiamond, true,AT_PET_BUY_LEVEL)
	--刷新界面
	if lvl == g_i3k_db.i3k_db_pet_can_up_level(id) then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong,"onUpLvlUpdata")
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateDiamondData")
	end

	local oldData = self:GetPetAttributeValue(id, oldLvl)
	local newData = self:GetPetAttributeValue(id, lvl)
	local data = {oldData = oldData, newData = newData, lvl = lvl}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateUpLevelAnimation", data)
	--g_i3k_ui_mgr:RefreshUI(eUIID_SuiCong)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "refreshDiamond")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
	g_i3k_game_context:RefreshMercenaryAchievementProps()
	local afterPower = math.modf(self:getBattlePower(id))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "changeBattlePower", afterPower, oldPower)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "recordSkillBtn")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updatePetModule", id, 1)
end

function i3k_game_context:getCanStudySpirits(petID, spiritID)
	local tmp = {}
	local tab = {}
	local item = g_i3k_game_context:getPetAllSpirits()
	local spirits = g_i3k_game_context:getPetSpiritsData(petID)
	for _,e in ipairs(spirits) do
		if e.id ~= 0 then
			tab[e.id] = e.level
		end
	end
	for k,v in pairs(item) do
		if spiritID then
			if tab[k] and tab[k] ~= 0 then
				if spiritID == k then
					local cfg = i3k_db_suicong_spirits[k][v]
					cfg.order = 1000 - cfg.id
					table.insert(tmp, cfg)
				end
			else
				local cfg = i3k_db_suicong_spirits[k][v]
				cfg.order = 1 - cfg.id
				table.insert(tmp, cfg)
			end
		else
			if tab[k] and tab[k] ~= 0 then

			else
				local cfg = i3k_db_suicong_spirits[k][v]
				cfg.order = 1 - cfg.id
				table.insert(tmp, cfg)
			end
		end

	end
	table.sort(tmp, function (a,b)
			return a.order > b.order
		end)
	return tmp
end

function i3k_game_context:GetPetAttributeValue(id, lvl, proId)
	local temp = {}
	local cfg = g_i3k_db.i3k_db_get_pet_cfg(id)
	if self:getPetIsWaken(id) then
		cfg = i3k_db_mercenariea_waken_property[id];
	end
	local finc,tdec,xinfa_inc,weapon_inc = self:get_star_data(id)
	local nameTab = {"气血", "攻击", "防御", "命中", "躲闪", "暴击", "韧性", "伤害增加", "伤害减免", "气功继承", "神兵继承"}
	local property = {1001, 1002, 1003, 1004, 1005, 1006, 1007, 1043, 1044}
	local propertyID,propertyCount = self:getHexiuProperty(id)
	xinfa_inc = xinfa_inc + cfg.atkCOrg*100
	weapon_inc = weapon_inc + cfg.atkWOrg*100
	for i=1,11 do
		local base = 0
		local value1 = 0
		local value2 = 0
		local name
		if i == 1 then
			base = cfg.hpOrg
			value1 = cfg.hpInc1
			value2 = cfg.hpInc2
		elseif i == 2 then
			base = cfg.atkNOrg
			value1 = cfg.atkNInc1
			value2 = cfg.atkNInc2
		elseif i == 3 then
			base = cfg.defNOrg
			value1 = cfg.defNInc1
			value2 = cfg.defNInc2
		elseif i == 4 then
			base = cfg.atrOrg
			value1 = cfg.atrInc1
			value2 = cfg.atrInc2
		elseif i == 5 then
			base = cfg.ctrOrg
			value1 = cfg.ctrInc1
			value2 = cfg.ctrInc2
		elseif i == 6 then
			base = cfg.acrNOrg
			value1 = cfg.acrNInc1
			value2 = cfg.acrNInc2
		elseif i == 7 then
			base = cfg.touOrg
			value1 = cfg.touInc1
			value2 = cfg.touInc2
		elseif i == 8 then
			base = math.modf(finc) .. "%"
		elseif i == 9 then
			base = math.modf(tdec) .. "%"
		elseif i == 10 then
			base = math.modf(xinfa_inc) .. "%"
		elseif i == 11 then
			base = math.modf(weapon_inc) .. "%"
		end
		local value
		local name
		if i <= 11 and i > 7 then
			value = base
			name = nameTab[i]
			if self:getIsCompletePetLifeTaskFromID(id) then
				for k=1,#propertyID do
					if name == i3k_db_prop_id[propertyID[k]].desc then
						if self:getPetStarLvl(id) == #i3k_db_suicong_upstar[id] and not self:getPetIsWaken(id) then
							propertyCount[k] = propertyCount[k] * (i3k_db_common.petBackfit.upCount/10000 + 1)
						elseif self:getPetStarLvl(id) ~= #i3k_db_suicong_upstar[id] and self:getPetIsWaken(id) then
							propertyCount[k] = propertyCount[k] * (i3k_db_mercenariea_waken_property[id].upArg/10000 + 1)
						elseif self:getPetStarLvl(id) == #i3k_db_suicong_upstar[id] and self:getPetIsWaken(id) then
							propertyCount[k] = propertyCount[k] * (i3k_db_mercenariea_waken_property[id].upArg/10000 + i3k_db_common.petBackfit.upCount/10000 + 1)
						end
						value = value + (propertyCount[k] / 100)
						break
					end
				end
			end
			temp[i] = {value = value, name = name, proID = property[i]}
			if proId and property[i] == proId then
				temp[property[i]] = {value = math.modf(value), name = name, proID = property[i]}
				return temp
			end
		else
			name = nameTab[i]
			if self:getIsCompletePetLifeTaskFromID(id) then
				for k=1,#propertyID do
					if name == i3k_db_prop_id[propertyID[k]].desc then
						if self:getPetStarLvl(id) == #i3k_db_suicong_upstar[id] and not self:getPetIsWaken(id) then
							propertyCount[k] = propertyCount[k] * (i3k_db_common.petBackfit.upCount/10000 + 1)
						elseif self:getPetStarLvl(id) ~= #i3k_db_suicong_upstar[id] and self:getPetIsWaken(id) then
							propertyCount[k] = propertyCount[k] * (i3k_db_mercenariea_waken_property[id].upArg/10000 + 1)
						elseif self:getPetStarLvl(id) == #i3k_db_suicong_upstar[id] and self:getPetIsWaken(id) then
							propertyCount[k] = propertyCount[k] * (i3k_db_mercenariea_waken_property[id].upArg/10000 + i3k_db_common.petBackfit.upCount/10000 + 1)
						end
						base = base + propertyCount[k]
						break
					end
				end
			end
			value = (lvl -1)*(lvl -1)*value1 + (lvl - 1)*value2 + base
			temp[i] = {value = math.modf(value), name = name, proID = property[i]}
			if proId and property[i] == proId then
				temp[property[i]] = {value = math.modf(value), name = name, proID = property[i]}
				return temp
			end

		end
	end
	return temp
end

--佣兵升星
function i3k_game_context:PetUpStartLevel(id, itemCount, altCount)
	local oldPower = math.modf(self:getBattlePower(id))
	local allData = self:GetYongbingData()
	self:AddYongbingStarLvl(id,1)
	local starlvl = self:getPetStarLvl(id)
	local cost_item_id = i3k_db_suicong_upstar[id][starlvl].itemid
	local replace_item_id = i3k_db_suicong_upstar[id][starlvl].replaceItem
	local cost_item_count = i3k_db_suicong_upstar[id][starlvl].itemCount

	self:UseCommonItem(cost_item_id,itemCount,AT_PET_STAR_UP)
	self:UseCommonItem(replace_item_id,altCount,AT_PET_STAR_UP)
	if starlvl == 5 then
		local pet5Count = self:GetPetCountByStar(starlvl)

		for k,v in pairs(allData) do
			if v.starlvl >= 5 then
				for i=1,4 do
					local tmp_condition = string.format("breakSkill%sCondition",i)
					local tmp_skill = string.format("breakSkill%s",i)
					local yongbingCfg = g_i3k_db.i3k_db_get_pet_cfg(k)
					local break_skill = yongbingCfg[tmp_skill]
					local condition = yongbingCfg[tmp_condition]
					if pet5Count >= condition then
						if not allData[k].breakSkill[break_skill] then
							self:SetBreakSkillLvl(k,break_skill,1)
						end
					end
				end
			end
		end
	end
	self:SetPrePower()
	self:RefreshMercenaryRelationProps()
	self:ShowPowerChange()
	--刷新界面
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateUpStarAnimation")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateStarDate")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updatePetModule", id, 1)
	g_i3k_game_context:RefreshMercenaryAchievementProps()
	local afterPower = math.modf(self:getBattlePower(id))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "changeBattlePower", afterPower, oldPower)
end

--佣兵突破技能升级
function i3k_game_context:PetBreakSkillUpLevel(id,skillID,level,itemCount,altCount)
	local oldPower = math.modf(self:getBattlePower(id))
	local lvl = self:AddPetBreakSkillLvl(id,skillID,1)
	if not i3k_db_suicong_breakdata[skillID][lvl + 1] then
		g_i3k_ui_mgr:CloseUI(eUIID_SuicongBreakTips)
	end
	local itemid = i3k_db_suicong_breakdata[skillID][level].itemid
	local needCount =  i3k_db_suicong_breakdata[skillID][level].itemCount
	local replaceid = i3k_db_suicong_breakdata[skillID][level].replaceItem

	self:UseCommonItem(itemid,itemCount,AT_PET_BREAK_SKILL_LEVEL_UP)
	self:UseCommonItem(replaceid,altCount,AT_PET_BREAK_SKILL_LEVEL_UP)

	--刷新界面
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateSuicongBreakData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updateStarDate")
	g_i3k_ui_mgr:RefreshUI(eUIID_SuicongBreakTips, id, skillID)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updatePetModule", id, 1)
	g_i3k_game_context:RefreshMercenaryAchievementProps()
	local afterPower = math.modf(self:getBattlePower(id))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "changeBattlePower", afterPower, oldPower)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuicongBreakTips, "changeBattlePower", afterPower, oldPower)
end

--世界地图设置佣兵
function i3k_game_context:PetSetWorldPlay(id)
	g_i3k_game_context:SetYongbingPlay(id,FIELD)

	--刷新界面
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong,"updateBattleMatk")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong,"ShowSKillBtn")
	if id ~= 0 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuiCong, "updatePetModule", id, 1)
	end
end

--单人副本设置佣兵
function i3k_game_context:PetSetSingleDungeonPLay(pets)
	self:CleanDungeonPlayPet()
	for k,v in pairs(pets) do
		self:SetYongbingPlay(k, DUNGEON)
	end
end

function i3k_game_context:SetNormalDungeonPets(pets)
	self._normalDungeonPets = {}
	for k, v in pairs(pets) do
		table.insert(self._normalDungeonPets, i3k_db_mercenaries[k])
	end
end

function i3k_game_context:AddNormalDungeonPets(pets, count)
	local isAdd = true
	for i = #self._normalDungeonPets, 1, -1 do
		if self._normalDungeonPets[i].id == pets.id then
			table.remove(self._normalDungeonPets, i)
			isAdd = false
		end
	end
	if isAdd then
		if #self._normalDungeonPets >= count then
			table.remove(self._normalDungeonPets, 1)
		end
		table.insert(self._normalDungeonPets, pets)
	end
end

function i3k_game_context:GetNormalDungeonPets()
	return self._normalDungeonPets
end

--帮派副本设置佣兵
function i3k_game_context:PetSetFactionDungeonPlay(pets)
	self:CleanFactionDungeonPlayPet()
	for k, v in pairs(pets) do
		self:SetYongbingPlay(k, FACTION_DUNGEON)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionDungeonLayer,"updateBaseData")
end

function i3k_game_context:SetFactionDungeonPets(pets)
	self._factionDungeonPets = {}
	for k, v in pairs(pets) do
		table.insert(self._factionDungeonPets, i3k_db_mercenaries[k])
	end
end

function i3k_game_context:AddFactionDungeonPets(pets, count)
	local isAdd = true
	for i = #self._factionDungeonPets, 1, -1 do
		if self._factionDungeonPets[i].id == pets.id then
			table.remove(self._factionDungeonPets, i)
			isAdd = false
		end
	end
	if isAdd then
		if #self._factionDungeonPets >= count then
			table.remove(self._factionDungeonPets, 1)
		end
		table.insert(self._factionDungeonPets, pets)
	end
end
--------------------------佣兵协议end--------------------------------

function i3k_game_context:GetFactionDungeonPets()
	return self._factionDungeonPets
end

function i3k_game_context:GetTournamentPet()
	return	self._tournament_pet
end

function i3k_game_context:SetTournamentPet(id)
	self._tournament_pet = id
end

function i3k_game_context:setTournamentData(info)
	self._tournament_data = info
end

function i3k_game_context:getTournamentData()
	return self._tournament_data
end

-- 神器乱战出战神兵相关
function i3k_game_context:AddTournamentWeapons(weaponID)
	local isAdd = true
	for i = #self._tournament_data.weaponSeq, 1, -1 do
		if self._tournament_data.weaponSeq[i] == weaponID then
			table.remove(self._tournament_data.weaponSeq, i)
			isAdd = false
		end
	end
	if isAdd then
		if #self._tournament_data.weaponSeq >= i3k_db_tournament_base.weaponCanSelectCount then
			table.remove(self._tournament_data.weaponSeq, 1)
		end
		table.insert(self._tournament_data.weaponSeq, weaponID)
	end
end

function i3k_game_context:GetTournamentWeapons()
	return self._tournament_data.weaponSeq or {}
end

--佣兵通关副本信息
function i3k_game_context:GetPetDungeonData()
	return self._mercenaries.dungeon_data
end

function i3k_game_context:AddPetDungeonData(id,dungeonID)
	if self._mercenaries.dungeon_data[id] then
		self._mercenaries.dungeon_data[id][dungeonID] = true
	else
		self._mercenaries.dungeon_data[id] = {}
		self._mercenaries.dungeon_data[id][dungeonID] = true
	end
end

function i3k_game_context:SetFightMercenaryData(data)
	self._fight_mercenaries.all = data
end

function i3k_game_context:SetFightMercenaryHostData(data)
	self._fight_mercenaries.host = data
end

function i3k_game_context:GetFightMercenaryData()
	return self._fight_mercenaries.all;
end

function i3k_game_context:GetFightMercenaryHostData()
	return self._fight_mercenaries.host;
end

function i3k_game_context:SetMercenarySkillData(petId, skill)
	self._mercenaries.skill[petId] = skill
end

function i3k_game_context:GetMercenarySkillLevelForIndex(petId, index)
	if index then
		return self._mercenaries.skill[petId] and self._mercenaries.skill[petId][index] or 0
	end
	local skill = self._mercenaries.skill[petId] or {}
	return skill
end

function i3k_game_context:GetMercenarySpirits(petID, spiritID, level, effectType)
	local cfg = i3k_db_suicong_spirits[spiritID][level]
	if cfg.effectType == 1 then
		local value
		local tmp = self:GetPetAttributeValue(petID, self:getPetLevel(petID), cfg.effectArgs1)
		local data = tmp[cfg.effectArgs1]
		if data or cfg.effectArgs1 == 1020 then
			if cfg.effectArgs2 == 1 then
				value = cfg.effectArgs3
			else
				value = cfg.effectArgs3/10000 * data.value
			end
			return cfg.effectType == effectType and cfg.effectArgs1, math.modf(value)
		end
	elseif cfg.effectType == 2 then
		return cfg.effectType == effectType and cfg.effectArgs1, cfg.effectArgs2
	elseif cfg.effectType == 3 then
		if cfg.effectArgs2 == 1 then
			return cfg.effectType == effectType and cfg.effectArgs1, cfg.effectArgs3
		else
			return cfg.effectType == effectType and cfg.effectArgs1, cfg.effectArgs3, true
		end
	elseif cfg.effectType == 4 then
		return cfg.effectType == effectType and cfg.effectArgs1
	end
end

--------------------佣兵觉醒--------------------------------
function i3k_game_context:setPetWaken(petID, awake)
	self._petWaken[petID] = awake;
	if awake.task.id > 0 then
		self:setPetWakening(petID);
	end
end

function i3k_game_context:getPetWakeCount()
	local count = 0
	for k, v in pairs(self._petWaken) do
		if v.awake ~= 0 then
			count = count + 1
		end
	end
	return count
end
function i3k_game_context:getPetWaken(petID)
	return self._petWaken[petID]
end

function i3k_game_context:setPetIsWaken(petID, isWaken)
	self._petWaken[petID].awake = isWaken;
end

function i3k_game_context:getPetIsWaken(petID)
	if self._petWaken[petID] then
		return self._petWaken[petID].awake == 1;
	end
	return false;
end

function i3k_game_context:setPetWakenUse(petID, isUse)
	self._petWaken[petID].use = isUse;
end

function i3k_game_context:getPetWakenUse(petID)
	if self._petWaken[petID] then
		return self._petWaken[petID].use == 1;
	end
	return false;
end

function i3k_game_context:setPetWakenTaskId(petID, id)
	self._petWaken[petID].task.id = id;
end

function i3k_game_context:getPetWakenTaskId(petID)
	if self._petWaken[petID] then
		return self._petWaken[petID].task.id;
	end
	return 0;
end

function i3k_game_context:setPetWakenTaskState(petID, state)
	self._petWaken[petID].task.state = state;
end

function i3k_game_context:getPetWakenTaskState(petID)

	return self._petWaken[petID].task.state;
end

--正在觉醒宠物
function i3k_game_context:setPetWakening(petID)
	self._petWakening = petID;
end

function i3k_game_context:getPetWakening()
	if self._petWakening > 0 then
		return self._petWakening;
	else
		return false;
	end
end

function i3k_game_context:clsPetWakening()
	self._petWakening = 0;
end

function i3k_game_context:getPetWakenTask(petID)
	local task = i3k_db_mercenariea_waken_task[petID];
	if task then
		local id = self:getPetWakenTaskId(petID);
		if task[id] and task[id] then
			return task[id];
		end
	end
	return false;
end

function i3k_game_context:setWakenKillCount(count, id)
	local world = i3k_game_get_world()
	local petID = self:getPetWakening();
	if world and world._mapType == g_FIELD and petID then
		local task = self:getPetWakenTask(petID);
		local state = self:getPetWakenTaskState(petID);
		if state == g_TaskState1 and task and task.taskArg.Arg1 == id then
			self:setCount(count);
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuicongWakenTask1,"updateKillCount", petID)
			if self:getWakenKillCount() >= task.taskArg.Arg2 then
				self:setPetWakenTaskState(petID, g_TaskState2)
				if not g_i3k_ui_mgr:GetUI(eUIID_SuicongWakenTask1) then
					g_i3k_ui_mgr:OpenUI(eUIID_SuicongWakenTask1)
					g_i3k_ui_mgr:RefreshUI(eUIID_SuicongWakenTask1, petID)
				end
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateAwakenTaxt", petID)
				self:SetAutoFight(false)
			end
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_SuicongWakenTask1,"updateKillCount", petID)
		end
	end
end

function i3k_game_context:setCount(count)
	local petID = self:getPetWakening();
	if petID and self._petWaken[petID] then
		self._petWaken[petID].task.value = count
	end
end

function i3k_game_context:getWakenKillCount()
	local petID = self:getPetWakening();
	if petID and self._petWaken[petID] then
		return self._petWaken[petID].task.value;
	end
	return 0;
end

function i3k_game_context:clsWakenKillCount()
	local petID = self:getPetWakening();
	if petID and self._petWaken[petID] then
		self._petWaken[petID].task.value = 0;
	end
end

--------------------神兵数据操作------------------
function i3k_game_context:IsInSuperMode()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:IsInSuperMode()
	end
	return false
end

function i3k_game_context:SetWeaponMakeData(weaponId)
	local temp = {weaponId = weaponId, lvl = 1, starLvl = i3k_db_shen_bing[weaponId].slvl, exp = 0}--解锁的初始值
	self:SetShenbingData(temp.weaponId, temp.lvl, temp.starLvl, temp.exp)
	local weapon_cfg = i3k_db_shen_bing[weaponId]
	self:UseCommonItem(weapon_cfg.itemid, weapon_cfg.itemCount,AT_MAKE_WEAPON)
	local hero = i3k_game_get_player_hero()
	hero:UpdateWeaponProps()
--	g_i3k_ui_mgr:RefreshUI(eUIID_ShenBing)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateRightRedPoint", weaponId)--

end

function i3k_game_context:SetShenbingData(id,qlvl,slvl,exp)
	if id and qlvl and slvl and exp then
		if not self._shenBing.all[id] then
			self._shenBing.all[id] = {}
		end
		self._shenBing.all[id] = {id = id, qlvl = qlvl, slvl = slvl, exp = exp}
		if id == self._shenBing.use then
			local hero = i3k_game_get_player_hero()
			if hero then
				hero:UpdateWeapon(qlvl, slvl)
			end
		end
		self:SetShenbingState(id, g_WEAPON_STATE_UNLOCK)
	end
end

function i3k_game_context:SetWeaponUpLevelData(weaponId, items, lvl, exp, compare_lvl)
	self:SetShenbingLvl(weaponId, lvl)
	self:SetShenbingExp(weaponId, exp)
	for k,v in pairs(items) do
		self:UseCommonItem(k,v,AT_WEAPON_LEVEL_UP)
	end
	local hero = i3k_game_get_player_hero()
	hero:UpdateWeaponProps()
	if compare_lvl.isUpLvl then
		local data = {oldData = self:GetWeaponAttributeValue(weaponId, compare_lvl.before_lvl), newData = self:GetWeaponAttributeValue(weaponId, lvl)}
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateUpLevelAnimation", data)
	end
	if not i3k_db_shen_bing_uplvl[weaponId][lvl + 1] then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "onSetShenbingMaxUpLvlData")
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateLeftRedPoint", weaponId)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateWeaponNotice")--主界面神兵红点
	if compare_lvl.isUpLvl then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "SetModule", i3k_db_shen_bing[weaponId].showModuleID, 2)
	end
	local proValue = self:getPropertyData(weaponId)
	g_i3k_ui_mgr:RefreshUI(eUIID_ShenBingPropertyTips, proValue)
end
--
function i3k_game_context:getPropertyData(id)
	local SHENBING_ATTACK = 1015
	local SHENBING_DEFENSE = 1016
	local CRIT = 1006
	local TOUGHNESS = 1007
	local HP = 1001
	local level = g_i3k_game_context:GetShenBingQlvl(id)
	local starlvl =  g_i3k_game_context:GetShenbingStarLvl(id)
	local grade = i3k_db_shen_bing_upstar[id][starlvl].grade
	local attack = 0
	local defense = 0
	local crit = 0
	local tou = 0
	local hp = 0
	for i=1,4 do
		local temp_attribute = "attribute"..i
		local temp_value = "value"..i
		local attribute = i3k_db_shen_bing_uplvl[id][level][temp_attribute]
		local value = i3k_db_shen_bing_uplvl[id][level][temp_value]
		local atr_star = i3k_db_shen_bing_upstar[id][starlvl][temp_attribute]
		local val_star = i3k_db_shen_bing_upstar[id][starlvl][temp_value]
		if attribute == SHENBING_ATTACK then
			attack = attack + value
		elseif attribute == SHENBING_DEFENSE then
			defense = defense + value
		elseif attribute == CRIT then
			crit = crit + value
		elseif attribute == TOUGHNESS then
			tou = tou + value
		elseif attribute == HP then
			hp = hp + value
		end
		if atr_star == SHENBING_ATTACK then
			attack = attack + val_star
		elseif atr_star == SHENBING_DEFENSE then
			defense = defense + val_star
		elseif atr_star == CRIT then
			crit = crit + val_star
		elseif atr_star == TOUGHNESS then
			tou = tou + val_star
		elseif atr_star == HP then
			hp = hp + value
		end
	end
	return {grade = grade, attack = attack, defense = defense, crit = crit, tou = tou, hp = hp}
end

function i3k_game_context:SetWeaponBuyLevelData(id, lvl)
	local nowLevel = g_i3k_game_context:GetShenBingQlvl(id)
	local levl
	for levl = nowLevel+1,lvl do
		self:UseDiamond(i3k_db_shen_bing_uplvl[id][levl].diamond,true,AT_WEAPON_BUY_LEVEL)--使用元宝
	end
	local maxUp=1
	local maxLevel = #i3k_db_shen_bing_uplvl[id]
	for x=1,maxLevel do
		if i3k_db_shen_bing_uplvl[id][x].needLevel>g_i3k_game_context:GetLevel() then
			maxUp = x-1
			break
		end
	end
	self:SetShenbingLvl(id, lvl)
	local hero = i3k_game_get_player_hero()
	hero:UpdateWeaponProps()
	local data = {oldData = self:GetWeaponAttributeValue(id, lvl-1), newData = self:GetWeaponAttributeValue(id, lvl)}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateUpLevelAnimation", data)
	if not i3k_db_shen_bing_uplvl[id][lvl + 1] then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "onSetShenbingMaxUpLvlData")
	end
	if lvl == maxUp then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "SetUpAndStar")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "SetShenbingUplvlData", id)
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "onDiamondUp")
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "SetShenbingDataInfo",g_i3k_game_context:GetShenbingData())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateIsUse")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateLeftRedPoint", id)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateStarLevelAnimation")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "setResponseModule")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateWeaponNotice")--主界面神兵红点
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "refreshShenbinBuyLevel")
	--local _layer = g_i3k_ui_mgr:GetUI(eUIID_ShenBing)
	--local proValue = _layer:getPropertyData()
	--g_i3k_ui_mgr:RefreshUI(eUIID_ShenBingPropertyTips, proValue)

	local proValue = self:getPropertyData(id)
	g_i3k_ui_mgr:RefreshUI(eUIID_ShenBingPropertyTips, proValue)
end

function i3k_game_context:GetWeaponAttributeValue(id, lvl)
	local propertyData = {}
	for i=1,4 do
		local temp_attribute = string.format("attribute%s",i)
		local temp_value = string.format("value%s",i)
		local attribute = i3k_db_shen_bing_uplvl[id][lvl][temp_attribute]
		local value = i3k_db_shen_bing_uplvl[id][lvl][temp_value]
		local name
		if attribute == SHENBING_ATTACK then
			name = "神兵攻击"
			table.insert(propertyData,{value = value, name = name})
		elseif attribute == SHENBING_DEFENSE then
			name = "神兵防御"
			table.insert(propertyData, {value = value, name = name})
		elseif attribute == HP then
			name = "气血"
			table.insert(propertyData, {value = value, name = name })
		end
	end
	return propertyData
end

function i3k_game_context:SetShenbingLvl(id,lvl)
	if self._shenBing.all[id] then
		self._shenBing.all[id].qlvl = lvl
		if id == self._shenBing.use then
			local hero = i3k_game_get_player_hero()
			hero:UpdateWeapon(lvl, self._shenBing.all[id].slvl);
		end
		self:SetShenbingState(id, g_WEAPON_STATE_RESPONSE)
		return true
	end
end

function i3k_game_context:SetWeaponStarLevelData(id, lvl, itemCount, altCount)
	self:SetShenbingStarlvl(id, lvl)
	local itemid = i3k_db_shen_bing_upstar[id][lvl].itemid
	local replaceItemid = i3k_db_shen_bing_upstar[id][lvl].replaceItem
	self:UseCommonItem(itemid, itemCount,AT_WEAPON_STAR_UP)
	self:UseCommonItem(replaceItemid, altCount,AT_WEAPON_STAR_UP)
	local hero = i3k_game_get_player_hero()
	hero:UpdateWeaponProps()
	if i3k_db_shen_bing_upstar[id][lvl + 1] then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "setShenbingUpStarData")
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "onSetShenbingMaxStarData")
		self:UpdateWeaponSikillProp()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateLeftRedPoint", id)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateStarLevelAnimation")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateWeaponNotice")--主界面神兵红点
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
	local proValue = self:getPropertyData(id)
	g_i3k_ui_mgr:RefreshUI(eUIID_ShenBingPropertyTips, proValue)
end

function i3k_game_context:SetShenbingStarlvl(id,lvl)
	if self._shenBing.all[id] then
		self._shenBing.all[id].slvl = lvl
		if id == self._shenBing.use then
			local hero = i3k_game_get_player_hero()
			hero:UpdateWeapon(self._shenBing.all[id].qlvl, lvl)
		end
		self:SetShenbingState(id, g_WEAPON_STATE_RESPONSE)
		return true
	end
end

function i3k_game_context:SetShenbingExp(id,count)
	if self._shenBing.all[id] then
		self._shenBing.all[id].exp = count
	end
end

function i3k_game_context:SetShenbingState(id,state)
	if self._shenBing.all[id] then

		self._shenBing.all[id].state = state
	end
end

function i3k_game_context:GetShenBingState(id)

	return self._shenBing.all[id] and self._shenBing.all[id].state or g_WEAPON_STATE_LOCK

	-- return shenbing_state
end

function i3k_game_context:GetSelectWeapon()
	return self._shenBing.use
end

function i3k_game_context:GetSelectWeaponMaxAnimation()
	local animation = nil
	if i3k_db_shen_bing[self._shenBing.use] then
		animation = i3k_db_shen_bing[self._shenBing.use].animationName
	end
	return animation;
end

function i3k_game_context:GetPlayerPos()
	local pos = {x = 0,y = 0,z = 0}
	local hero = i3k_game_get_player_hero()
	if hero then
		pos = hero._curPosE
	end
	return pos;
end

function i3k_game_context:GetShenBingQlvl(id)
	return self._shenBing.all and self._shenBing.all[id].qlvl or 1
end

function i3k_game_context:GetShenbingStarLvl(id)
	return self._shenBing.all[id].slvl
end

function i3k_game_context:GetShenbingExp(id)
	return self._shenBing.all[id].exp
end

function i3k_game_context:GetShenbingData()
	return self._shenBing.all, self._shenBing.use
end

function i3k_game_context:GetShenBingCount()
	return i3k_table_length(self._shenBing.all)
end

function i3k_game_context:GetShenBingCountByLvl(needLvl)
	local count = 0
	for k,v in pairs(self._shenBing.all) do
		if v.qlvl >= needLvl then
			count = count + 1
		end
	end
	return count
end

function i3k_game_context:GetShenBingCountByStar(needStar)
	local count = 0
	for k,v in pairs(self._shenBing.all) do
		if v.slvl >= needStar then
			count = count + 1
		end
	end
	return count
end

function i3k_game_context:SetUseShenbing(id)
	self._shenBing.use = id
	self:SetShenbingState(id, g_WEAPON_STATE_RESPONSE)
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UseWeapon(id)
	end
	self:UpdateWeaponSikillProp()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenBing, "updateIsUse")
end

function i3k_game_context:UpdateWeaponSikillProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateWeaponUniqueSkillProps()
	end
end

function i3k_game_context:setWeaponNpcEnterTimes( times)
	self.npcEnterTimes = times or self.npcEnterTimes or 0
end

function i3k_game_context:setWeaponNpcEnterTimesAdd()
	self.npcEnterTimes =  self.npcEnterTimes or 0
	self.npcEnterTimes = self.npcEnterTimes + 1
end

function i3k_game_context:getWeaponNpcEnterTimes()
	return self.npcEnterTimes
end

function i3k_game_context:setWeaponShowNpcID( id)
	self.weaponShowNpcID = id or self.weaponShowNpcID or 0
end

function i3k_game_context:getWeaponShowNpcID()
	return self.weaponShowNpcID
end

function i3k_game_context:showWeaponNPC()
	local entity = self:GetNPCbyID(self.weaponShowNpcID)
	if entity then
		entity:Show(true, true, 100);
		entity:ShowTitleNode(true);
		entity:SetHittable(true)
	end
end

function i3k_game_context:hideWeaponNPC()
	local world = i3k_game_get_world()
	if world then
		for k,entity in pairs(world._entities[eGroupType_O]) do
			if entity:GetEntityType() == eET_NPC then
				if entity._baseCfg.FunctionID[1] == 17 then
					entity:Show(false, true, 100);
					entity:ShowTitleNode(false);
					entity:SetHittable(false)
				end
			end
		end
	end
end
--设置神兵分身继承属性百分比
function i3k_game_context:SetWeaponCloneBodyInheritRatio(value)
	self._weaponCloneBodyInheritRatio = value
end
--获取神兵分身继承属性百分比
function i3k_game_context:GetWeaponCloneBodyInheritRatio()
	return self._weaponCloneBodyInheritRatio
end
-------------幸运转盘记录剩余次数和购买次数--------
function i3k_game_context:SetLuckyWheelFreeTime(nums)

	self._haveFreeTime = nums
end
function i3k_game_context:GetLuckyWheelFreeTime()

	return self._haveFreeTime
end
function i3k_game_context:SetLuckyWheelBuyTime(nums)

	self._haveBuyTimes = nums
end
function i3k_game_context:GetLuckyWheelBuyTime()

	return self._haveBuyTimes
end
-- 购买幸运转盘次数需要多少钱
function i3k_game_context:getBuyLuckyWheelNeedMoney(BASE_COUNT,buy_count)--已经购买的次数

	local needMoney = 0
	for i=buy_count + 1, buy_count+BASE_COUNT do
		needMoney = i3k_db_lucky_wheel.needGold[i] + needMoney
	end
	return needMoney
end



function i3k_game_context:AutoUseDrug(mark)
	if self._drugcount > 0 then
		local lastUseHpTime = g_i3k_game_context:GetUseDrugTime()
		local now_time = i3k_game_get_time()
		local cool_time = i3k_db_common.drug.drugTime.cTime
		if now_time - lastUseHpTime > cool_time then
			local hpnow,hpmax = g_i3k_game_context:GetRoleHp()
			if mark / 100 > hpnow / hpmax then
				if hpnow ~= 0 then
					g_i3k_game_context:SetUseDrugTime(i3k_integer(i3k_game_get_time()))
					i3k_sbean.bag_useitemhp(self._bagData.drugs[1].id, 1,lastUseHpTime)
				end
			end
		end
	end
end

function i3k_game_context:GetAllDrugCount()
	return self._drugcount;
end

function i3k_game_context:SetVipBloodPoolData(id, count)
	self:UseBagMiscellaneous(id, count)
	local cfg = g_i3k_db.i3k_db_get_common_item_cfg(id)
	local bloodValue = cfg.args1 * count
	local hero = i3k_game_get_player_hero()
	if hero then
		local HPIncrease = hero:GetPropertyValue(ePropID_MeridianHPIncrease)
		bloodValue = bloodValue + bloodValue*HPIncrease
	end

	g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(210,bloodValue/10000))
	self._roleData.curChar._hpPool = self._roleData.curChar._hpPool + bloodValue
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateVipBloodPool") -- some problems
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateDrugIcon")
	g_i3k_ui_mgr:RefreshUI(eUIID_Blood_Pool)
end

function i3k_game_context:reduceVipBloodPool(value)
	self:SetUseHpPoolTime(i3k_game_get_time())
	self._roleData.curChar._hpPool = self._roleData.curChar._hpPool - value
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "setVipBloodPoolTime")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateVipBloodPool")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "playVipBloodAnimation")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateDrugIcon")
end

function i3k_game_context:GetVipBloodPool()
	return self._roleData.curChar._hpPool
end

function i3k_game_context:SetVipBloodPool(value)
	self._roleData.curChar._hpPool = value
end

function i3k_game_context:SetUseDrugTime(t)
	self._roleData.curChar._lastUseHpTime = t
end

function i3k_game_context:GetUseDrugTime()
	return self._roleData.curChar._lastUseHpTime
end

function i3k_game_context:SetUseHpPoolTime(t)
	self._roleData.curChar._lastUseHpPoolTime = t
end

function i3k_game_context:GetUseHpPoolTime()
	return self._roleData.curChar._lastUseHpPoolTime
end
--拳师start---------------------------------------------------------------------
--拳师技能可用时间,同时记录当前点击时刻拳师技能CD（可能受气功影响CD值会变化）
function i3k_game_context:SetCombatCoolEndTime(t)
	if i3k_game_get_map_type() ~= g_BIOGIAPHY_CAREER then
		self._combatTypeCoolEndTime = t
	else
		if self._curBiographyCareer then
			self._biographyCareer[self._curBiographyCareer].combat.coolEndTime = t
		end
	end
	self:SetCombatTypeCurCD()
end
function i3k_game_context:GetCombatCoolEndTime()
	if i3k_game_get_map_type() ~= g_BIOGIAPHY_CAREER then
		return self._combatTypeCoolEndTime
	else
		if self._curBiographyCareer then
			return self._biographyCareer[self._curBiographyCareer].combat.coolEndTime
		else
			return 0
		end
	end
end
function i3k_game_context:SetCombatTypeCurCD()
	self._combatTypeCurCD = g_i3k_db.i3k_db_get_CombatTypeCD()
end
function i3k_game_context:GetCombatTypeCurCD()
	return self._combatTypeCurCD
end
function i3k_game_context:SetCombatType(ctype)
	if i3k_game_get_map_type() ~= g_BIOGIAPHY_CAREER then
		self._combatType = ctype
	else
		if self._biographyCareer then
			self._biographyCareer[self._curBiographyCareer].combat.combatType = ctype
		end
	end
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:SetCombatType(ctype)
	end
end
function i3k_game_context:GetCombatType()
	if i3k_game_get_map_type() ~= g_BIOGIAPHY_CAREER then
		return self._combatType
	else
		if self._curBiographyCareer then
			return self._biographyCareer[self._curBiographyCareer].combat.combatType
		else
			return 0
		end
	end
end
--拳师--------------------end---------------------------------------------------------------------

function i3k_game_context:GetMaxVipBloodPoolCount(itemid,itemcount)
	local hppool = g_i3k_game_context:GetVipBloodPool()
	local hppoolmax = i3k_db_common.drug.viplimited
	local itemhp = g_i3k_db.i3k_db_get_other_item_cfg(itemid).args1

	local hero = i3k_game_get_player_hero()
	if hero then
		hppoolmax = hppoolmax + hero:GetPropertyValue(ePropID_MeridianHPUpper)
		itemhp = itemhp + itemhp* hero:GetPropertyValue(ePropID_MeridianHPIncrease)
	end

	local res = 0
	if itemcount then
		res = math.min(math.floor((hppoolmax - hppool)/itemhp),itemcount)
	else
		res = math.floor((hppoolmax - hppool)/itemhp)
	end
	return math.max(res,0)
end

function i3k_game_context:GetVipBloodCD()
	local cfgCD = i3k_db_common.drug.drugTime.vipTime
	local wearEquip = self:GetWearEquips()
	for k,v in pairs(wearEquip) do
		if v.equip then
			for i,e in ipairs(v.equip.legends) do
				if i==3 and e ~= 0 then -- 3号位
					local equip_t = g_i3k_db.i3k_db_get_equip_item_cfg(v.equip.equip_id)
					local eCfg = i3k_db_equips_legends_3[equip_t.partID][e]
					if eCfg and eCfg.type == 4 then --传世装备 类型4 血池CD减少
						cfgCD = cfgCD - eCfg.args[1] / 1000
					end
				end
			end
		end
	end
	return cfgCD
end

--------------------------任务数据--------------------------------

--获取当前主线任务和帮派任务的矿和npc数据
function i3k_game_context:GetMianAndFactionTaskAnimationData()
	local mId,mValue = self:getMainTaskIdAndVlaue()
	if not mId or mId == 0 then
		return
	end

	local main_task_cfg = g_i3k_db.i3k_db_get_main_task_cfg(mId)
	local taskType = main_task_cfg.type

	local is_ok = self:IsTaskFinished(taskType,main_task_cfg.arg1,main_task_cfg.arg2,mValue)


	local  t = {ore = {},npc = {}}

	if taskType == g_TASK_COLLECT then
		if not is_ok then
			table.insert(t.ore,main_task_cfg.arg1)
		else
			if main_task_cfg.finishTaskNpcID ~= 0 then
				table.insert(t.npc,main_task_cfg.finishTaskNpcID)
			end
		end
	elseif taskType == g_TASK_NEW_NPC_DIALOGUE then
		table.insert(t.npc,main_task_cfg.arg1)
	elseif taskType == g_TASK_KILL then
		if is_ok then
			if main_task_cfg.finishTaskNpcID ~= 0 then
				table.insert(t.npc,main_task_cfg.finishTaskNpcID)
			end
		end
	end
	local taskID,value = self:getFactionTaskIdValueTime()
	local faction_task_cfg = g_i3k_db.i3k_db_get_faction_task_cfg(taskID)
	if faction_task_cfg then
		local taskType = faction_task_cfg.type
		local is_ok = self:IsTaskFinished(taskType,faction_task_cfg.arg1,faction_task_cfg.arg2,value)
		if taskType == g_TASK_COLLECT then
			if not is_ok then
				table.insert(t.ore,faction_task_cfg.arg1)
			else
				if faction_task_cfg.finishTaskNpcID ~= 0 then
					table.insert(t.npc,faction_task_cfg.finishTaskNpcID)
				end
			end
		elseif taskType == g_TASK_NPC_DIALOGUE then
			table.insert(t.npc,faction_task_cfg.arg1)
		elseif taskType == g_TASK_NEW_NPC_DIALOGUE then
			table.insert(t.npc,faction_task_cfg.arg1)
		elseif taskType == g_TASK_KILL then
			if is_ok then
				if faction_task_cfg.finishTaskNpcID ~= 0 then
					table.insert(t.npc,faction_task_cfg.finishTaskNpcID)
				end
			end
		end
	end
	return t
end

function i3k_game_context:GetAllTaskMineData(t)
	local mineData = t
	local id ,loop = g_i3k_game_context:getWeaponTaskIdAndLoopType()
	local weapon_cfg = g_i3k_db.i3k_db_get_weapon_task_cfg(id,loop)
	if weapon_cfg then
		local type1 = weapon_cfg.type1
		local arg11 = weapon_cfg.arg11
		local type2 = weapon_cfg.type2
		local arg21 = weapon_cfg.arg21

		if type1 == g_TASK_COLLECT then
			table.insert(mineData,arg11)
		end
		if type2 == g_TASK_COLLECT then
			table.insert(mineData,arg21)
		end
		local subLineTaskData = g_i3k_game_context:getSubLineTask()
		for k,v in pairs(subLineTaskData) do
			if v.state >= 1 then
				local cfg = g_i3k_db.i3k_db_get_subline_task_cfg(k,v.id)
				if cfg.type == g_TASK_COLLECT then
					table.insert(mineData,cfg.arg1)
				end
			end
		end
	end

	local margTask = self:GetMarriageTaskData()
	if margTask.open == 1 and margTask.id ~= 0 then
		local marg_cfg = g_i3k_db.i3k_db_marry_task(margTask.id, margTask.groupID)
		if marg_cfg and marg_cfg.type == g_TASK_COLLECT then
			table.insert(mineData,marg_cfg.arg1)
		end
	end
	return mineData
end

function i3k_game_context:getMainTaskIdAndVlaue()
	local t = self._roleTask.maintask
	return t.id, t.value, t.state
end

function i3k_game_context:setMainTaskIdAndValue(id,value,state)
	--self._roleTask.maintask = {id = id, value = (value or 0), state = (state or 1) }
	local t = self._roleTask.maintask
	t.id = id
	t.value = value or 0
	t.state = state or 1
end

function i3k_game_context:IsTaskFinished(taskType, taskArg1, taskArg2, taskValue)
	local is_ok = true
	if taskType == g_TASK_KILL then
		if taskValue < taskArg2 then
			is_ok = false
		end
	elseif taskType == g_TASK_COLLECT then
		if taskValue < taskArg2 then
			is_ok = false
		end

	elseif taskType == g_TASK_USE_ITEM_AT_POINT then
		if taskValue == 0 then
			is_ok = false
		end

	elseif taskType == g_TASK_TOATL_DAYS then
		taskValue = self:GetLoginDays()
		if taskValue < taskArg1 then
			is_ok = false
		end
	elseif taskType == g_TASK_REACH_LEVEL then
		taskValue = self:GetLevel()
		if taskValue < taskArg1 then
			is_ok = false
		end

	elseif taskType == g_TASK_NPC_DIALOGUE then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_NEW_NPC_DIALOGUE then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_USE_ITEM then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_GET_TO_FUBEN then
		if taskValue < taskArg2 then
			is_ok = false
		end

	elseif taskType == g_TASK_GET_PET_COUNT then
		taskValue = self:GetPetCount()
		if taskValue < taskArg1 then
			is_ok = false
		end

	elseif taskType == g_TASK_POWER_COUNT then
		taskValue = self:GetRolePower()
		if taskValue < taskArg1 then
			is_ok = false
		end
	elseif taskType == g_TASK_TRANSFER then
		taskValue = self:GetTransformLvl()
		if taskValue < taskArg1 then
			is_ok = false
		end
	elseif taskType ==	g_TASK_CLEARANCE_ACTIVITYPAD then --通关活动本
		taskValue =  self:getActivityDayEnterTime(taskArg1) or 0
		if not taskValue or taskValue<=0 then
			is_ok = false
		end
	elseif taskType ==	g_TASK_PERSONAL_ARENA then --参与个人竞技场
		taskValue = self:GetArenaEnterTimes()
		if taskValue < taskArg1 then
			is_ok = false
		end
	elseif taskType == 	g_TASK_SHAPESHIFTING then--护送NPC
		--协议
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_CONVOY then--运送物件
		--协议
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_ANSWER_PROBLEME then --回答问题
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_JOIN_FACTION then
		taskValue = self:GetFactionSectId()
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_GATE_POINT then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_ENTER_FUBEN then
		if taskValue < taskArg2 then
			is_ok = false
		end
	elseif taskType == g_TASK_TOMORROW then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_FIND_DIFFERENCE then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_PUZZLE_PICTURE then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_PLAY_SOCIALACT then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_SORT_VERSE then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_LUCKYCHANCE then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_SCENE_MINE then
		local totalValue = 2 ^ #i3k_db_scene_mine_cfg[taskArg1].mineIDs - 1
		if taskValue < totalValue then
			is_ok = false
		end
	elseif taskType == g_TASK_NPC_SOCIAL_ACTION then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_ANY_MOMENT_DUNGEON then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_ROLE_FLYING then
		if not self:isFinishFlyingTask(taskArg1) then
			is_ok = false
		end
	elseif taskType == g_TASK_OWN_WEAPON then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_OWN_HORSE then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_OWN_PET then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_TEAM_WITH_ISOMERISM then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_CHANGE_ITEM then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_EXPOSE_LETTER then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_MATCH_TOKEN then
		if taskValue == 0 then
			is_ok = false
		end
	elseif taskType == g_TASK_DELIVER_LETTERS then
		local totalValue = 2 ^ #i3k_db_npc_deliver_letters[taskArg1].npcList - 1
		if taskValue < totalValue then
			is_ok = false
		end
	end
	return is_ok
end

function i3k_game_context:InitTaskValue(taskType, taskArg1, taskArg2)
	local taskValue = 0
	if taskType == g_TASK_KILL then

	elseif taskType == g_TASK_COLLECT then

	elseif taskType == g_TASK_USE_ITEM_AT_POINT then

	elseif taskType == g_TASK_TOATL_DAYS then
		taskValue = self:GetLoginDays()

	elseif taskType == g_TASK_REACH_LEVEL then
		taskValue = self:GetLevel()

	elseif taskType == g_TASK_NPC_DIALOGUE then
	elseif taskType == g_TASK_NEW_NPC_DIALOGUE then
	elseif taskType == g_TASK_USE_ITEM then
	elseif taskType == g_TASK_GET_TO_FUBEN then

	elseif taskType == g_TASK_GET_PET_COUNT then
		taskValue = self:GetPetCount()

	elseif taskType == g_TASK_POWER_COUNT then
		taskValue = self:GetRolePower()

	elseif taskType == g_TASK_TRANSFER then
		taskValue = self:GetTransformLvl()

	elseif taskType ==	g_TASK_CLEARANCE_ACTIVITYPAD then --通关活动本
		taskValue =  self:getActivityDayEnterTime(taskArg1) or 0
	elseif taskType ==	g_TASK_PERSONAL_ARENA then --参与个人竞技场
		taskValue = self:GetArenaEnterTimes()
	elseif taskType == 	g_TASK_SHAPESHIFTING then--护送NPC
	elseif taskType == g_TASK_CONVOY then--运送物件
	elseif taskType == g_TASK_ANSWER_PROBLEME then --回答问题
	elseif taskType == g_TASK_JOIN_FACTION then
		taskValue = self:GetFactionSectId()
	elseif taskType == g_TASK_GATE_POINT then
	elseif taskType == g_TASK_ENTER_FUBEN then
	elseif taskType == g_TASK_TOMORROW then
	elseif taskType == g_TASK_OWN_WEAPON then
		if self._shenBing.all[taskArg1] then
			taskValue = 1
		end
	elseif taskType == g_TASK_OWN_HORSE then
		if self._steedInfo[taskArg1] then
			taskValue = 1
		end
	elseif taskType == g_TASK_OWN_PET then
		if self._mercenaries.all[taskArg1] then
			taskValue = 1
		end
	elseif taskType == g_TASK_TEAM_WITH_ISOMERISM then
		local team = self:GetTeamOtherMembersProfile()
		for k, v in ipairs(team) do
			if v.overview.gender ~= self:GetRoleGender() then
				taskValue = 1
				break
			end
		end
	end
	return taskValue
end

function i3k_game_context:TaskItemIsEnough(taskType, is_ok, itemId, count)
	if taskType == g_TASK_USE_ITEM and not is_ok and g_i3k_game_context:GetCommonItemCanUseCount(itemId) >= count then
		is_ok = true
	end
	return is_ok
end

function i3k_game_context:GetNPCbyID(id)
	local world = i3k_game_get_world()
	if world then
		for k,v in pairs(world._entities[eGroupType_O]) do
			if v:GetEntityType() == eET_NPC then
				if v._baseCfg.ID == id then
					return v;
				end
			end
		end
	end
	return ;
end

function i3k_game_context:GetNearestNPCID()
	local id = -1;
	local mindist = -1;
	local hero = i3k_game_get_player_hero()
	local world = i3k_game_get_world()
	if world and hero then
		for k,v in pairs(world._entities[eGroupType_O]) do
			if v:GetEntityType() == eET_NPC then
				local dist = i3k_vec3_len(i3k_vec3_sub1(hero._curPos, v._curPos))
				local targetNpc = g_i3k_game_context:GetNPCbyID(v._baseCfg.ID)
				if mindist == -1 or dist < mindist and targetNpc:IsShow() then
					mindist = dist
					id = v._baseCfg.ID
				end
			end
		end
	end
	return id;
end
--1:普通任务变身,2:神兵变身3：坐骑变身 4：护送开始 -1：护送结束
function i3k_game_context:getSpecialtasktype()
	local id = g_i3k_game_context:getMainTaskIdAndVlaue()
	local main_task_cfg = g_i3k_db.i3k_db_get_main_task_cfg(id)
	local ShapeId =  main_task_cfg.shapesShiftID
	if ShapeId == -1 then
		local functype = i3k_db_missionmode_cfg[math.abs(tonumber(ShapeId))].type
		if functype == 1 or functype == 2 or functype == 3 or functype == 4 then
			return -1;
		end
	elseif ShapeId>0 then
		local functype = i3k_db_missionmode_cfg[math.abs(tonumber(ShapeId))].type
		return functype;
	end
end
-----------------------------神兵任务---------------------------------------
function i3k_game_context:GetWeaponTask()
	return self._roleTask.weapontask
end

function i3k_game_context:setWeaponTaskData(id,taskType,args,dayLoopCount)
	if self._roleTask.weapontask then
		self._roleTask.weapontask.id = id
		self._roleTask.weapontask.taskType = taskType
		self._roleTask.weapontask.args = args
		self._roleTask.weapontask.dayLoopCount = dayLoopCount
	else
		self._roleTask.weapontask = {id = id, taskType = taskType, args = args, dayLoopCount = dayLoopCount}
	end
end

function i3k_game_context:getWeaponTaskIdAndLoopType()
	return self._roleTask.weapontask.id,self._roleTask.weapontask.taskType
end

function i3k_game_context:getWeaponTaskArgsCountAndArgs()
	if self._roleTask.weapontask.args then
		return self._roleTask.weapontask.args[1],self._roleTask.weapontask.args[2]
	else
		return 0,0
	end
end

function i3k_game_context:getWeaponDayLoopCount()
	return self._roleTask.weapontask.dayLoopCount
end

function i3k_game_context:addWeaponDayLoopCount(count)
	self._roleTask.weapontask.dayLoopCount = self._roleTask.weapontask.dayLoopCount + count
end

function i3k_game_context:clearWeaponData()
	self._roleTask.weapontask = {}
end

function i3k_game_context:addWeaponValueByIndex(index,count)
	self._roleTask.weapontask.args[index] = self._roleTask.weapontask.args[index] + count
end

function i3k_game_context:setWeaponValueByIndex(index,count)
	self._roleTask.weapontask.args[index] = count
end

--------------------------佣兵任务---------------------------------
function i3k_game_context:SetPetTask(t)
	self._roleTask.pettask = t
end

function i3k_game_context:GetPetTask()
	return self._roleTask.pettask
end

function i3k_game_context:setOnePetTask(petID,id,value)
	self._roleTask.pettask[petID] = {id = id,value = value}
end

function i3k_game_context:getPetTskIdAndValueById(id)
	--return 1 ,2
	if self._roleTask.pettask[id] then
		return self._roleTask.pettask[id].id,self._roleTask.pettask[id].value
	end
	return nil
end

-------------------------身世任务-----------------------------------
function i3k_game_context:setOnePetLifeTask(petID, id, value, reward)
	self._roleTask.lifetask[petID] = {id = id, value = value, reward = reward}
end

function i3k_game_context:getPetLifeTskIdAndValueById(id)  -- petID
	return self._roleTask.lifetask[id].id,self._roleTask.lifetask[id].value, self._roleTask.lifetask[id].reward
end

function i3k_game_context:ClearPetLifeTask()
	self._roleTask.lifetask = {}
end

function i3k_game_context:getLifeIdAndValueBytype(groupId)
	local data1 = self._roleTask.lifetask
	if data1 then
		local data  = data1[groupId]
		return data
	end
	return nil
end

--判断是否完成随从身世任务（判断宠物喂养开启）
function i3k_game_context:getIsCompletePetLifeTaskFromID(id)
	if self._roleTask.lifetask[id] == nil then
		return false
	end
	local fromID, lifeValue, reward = self:getPetLifeTskIdAndValueById(id)
	if fromID == #i3k_db_from_task[id] and reward == 1 then
		return true
	end
	return false
end

--------------------------支线任务---------------------------------
function i3k_game_context:checkSubLineTask(func)
	local allData = g_i3k_db.i3k_db_get_subline_conditionTasks()
	for _,v in ipairs(allData) do
		local value = 0
		if v.conditionType == 1 then--等级
			if i3k_db_common.sublineTaskAdvanceShow > 0 then
				value = self:GetLevel() + 1
			else
				value = self:GetLevel()
			end
		elseif v.conditionType == 2 then--战力
			value = self:GetRolePower()
		elseif v.conditionType == 3 then--完成主线任务
			value = self:getMainTaskIdAndVlaue()-1
		elseif v.conditionType == 4 then--支线任务组Id
			value =  0
		elseif v.conditionType == 5 then---飞升升级任务，手动接取
			value = -65536
			local fs = self:getFeishengInfo()
			if v.arg1 == fs._level + 1 and fs._upgraing then
				value = v.conditionValue
			end
		elseif v.conditionType == 6 then
			value = self:GetLoginDays()
		elseif v.conditionType == 7 then -- 五转之路  手动接取的任务
			value = 0
		end
		if value >= v.conditionValue and (self:GetTransformBWtype() == v.bwType or v.bwType == 0) then
			if v.conditionType == 1 and self:GetLevel() < v.conditionValue then
				self.advanceSubLvlTask[v.taskgroupid] = v.conditionValue
			end
			func(v)
		end
	end
end
function i3k_game_context:checkSubLineTaskIsLock()

	local function fucn(v)
		self:addSubLineData(v.taskgroupid,v.id,0, 0)

		-- local isexit = self:AddTaskToDataList(v.taskgroupid*1000)
		local isexit = self:AddTaskToDataList(g_i3k_db.i3k_db_get_subline_task_hash_id(v.taskgroupid))
		if not isexit then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateSublineTask", v.taskgroupid, v.id)
		end
	end
	self:checkSubLineTask(fucn)
end

function i3k_game_context:checkPetPoint()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
end

function i3k_game_context:addSubLineData(groupID,taskId,value,state)
	local cfg = g_i3k_db.i3k_db_get_subline_task_cfg(groupID,taskId)
	if cfg and value==0 then
		value = self:InitTaskValue(cfg.type, cfg.arg1, cfg.arg2)
	end
	self:setSubTaskOneGroupData(groupID,taskId,value,state)
end

function i3k_game_context:setSubLineTask(t)
	local newtable = {}

	for k,v in pairs(t) do
		newtable[k] = {id = v.id, value = v.value, state = v.state}
		if v.id > 0 then
			-- self:SetTaskDataList(k*1000, v.receiveTime)
			local hash = g_i3k_db.i3k_db_get_subline_task_hash_id(k)
			self:SetTaskDataList(hash, v.receiveTime)
		end
	end
	self._roleTask.sublinetask = newtable
end


--外部调用读取信件并可接取支线任务接口
function i3k_game_context:canOpenMailItemUI(id)
	--当为普通信件或者 已经接取完成的 就不调用了
	local MailItemTab = g_i3k_db.i3k_db_get_other_item_cfg(id)
	local task = self:isMainItemGetSubLineTask(id)  --是否可接取支线任务
	if MailItemTab.args2 ~=0 and task then --非普通信件 并且可接取支线任务
		--todo显示读取框
		g_i3k_ui_mgr:OpenUI(eUIID_ItemMailUI)
		g_i3k_ui_mgr:RefreshUI(eUIID_ItemMailUI,id)
	end
end

--判断是否已经接取支线任务 jxw
function i3k_game_context:isMainItemGetSubLineTask(id)
	--0代表未接取
	--1 代表已接取
	local index = 0 -- 0,false  1, true
	local MailItemTab = g_i3k_db.i3k_db_get_other_item_cfg(id)
	for k,v in pairs(self:getSubLineTask()) do
		if k ==MailItemTab.args2 and v.id == MailItemTab.args3 then
			if v.id ~= 0 and v.state == 0 then
				index = 1
			else
				index = 0
			end
			return index ==1
		else
			index = 1
		end
	end
	return index ==1
end

function i3k_game_context:getSubLineTask()
	local data = self._roleTask.sublinetask
	return data
end

-- -- 临时接取五转任务
-- function i3k_game_context:addFiveTransSublineTask(id, info)
-- 	self._roleTask.sublinetask[id] = info
-- end

-- 判断支线任务是否完成
function i3k_game_context:getSubLineTaskIsFinishedByID(id)
	local data = self:getSubLineTask()
	if data == nil or data[id] == nil then
		return false -- 未接取
	end
	return data[id].id == 0 -- 判断id==0，当id为0的时候，表示这个任务的组的后置任务没有了，I guess
end

-- 判断支线任务是否接取
function i3k_game_context:getSubLineTaskIsAccepted(id)
	local data = self:getSubLineTask()
	return data[id] ~= nil --为空则是未接取
end

function i3k_game_context:setSubTaskOneGroupData(groupId,taskId,value,state)
	if self._roleTask.sublinetask[groupId] then
		local t = self._roleTask.sublinetask[groupId]
		t.id = taskId
		t.value = value
		t.state = state or 1
	else
		self._roleTask.sublinetask[groupId] = {id = taskId, value = value, state = state or 1}
	end
end

function i3k_game_context:setSubTaskOneGroupDataNil(groupId)
	local newtable = {}
	local allData =  self:getSubLineTask()
	for k,v in pairs(allData) do
		if k ~= groupId then
			newtable[k] = v
		end
	end
	self:setSubLineTask(newtable)
end

function i3k_game_context:getSubLineIdAndValueBytype(groupId)
	local data1 = self:getSubLineTask()
	if data1 then
		local data  = data1[groupId]
		return data
	end
	return nil
end
-------------------------姻缘任务--------------
function i3k_game_context:SetMarriageTaskData(series, loop, open)
	local task = self._roleTask.marriageTask
	task.open = open
	local receiveTime = 1
	if series.group ~= 0 then
		task.groupID = series.group
		task.id = series.id
		task.value = series.value
		task.state = series.state
		receiveTime = series.receiveTime
	else
		task.id = loop.id
		task.value = loop.value
		task.leftCount = loop.leftCount
		task.state = loop.state
		receiveTime = loop.receiveTime
	end
	i3k_set_MrgTaskCategory(series.group)
	if task.id > 0 then
		self:AddTaskToDataList(i3k_get_MrgTaskCategory(),receiveTime)
	end
end

function i3k_game_context:SetNextMarriageTaskData(id, value, state)
	local task = self._roleTask.marriageTask
	task.id = id
	task.value = value
	task.state = state
end

function i3k_game_context:SetMarriageTaskOpen(open)
	self._roleTask.marriageTask.open = open
end
function i3k_game_context:GetMarriageTaskOpen( )
 	return self._roleTask.marriageTask.open
end
function i3k_game_context:SetMarriageTaskState(state)
	self._roleTask.marriageTask.state = state
end

function i3k_game_context:AddMarriageTaskValue(value)
	self._roleTask.marriageTask.value = value
end

function i3k_game_context:GetMarriageTaskData()
	return self._roleTask.marriageTask
end

--进入黄金海岸
function i3k_game_context:IntoWarZone(mapID)
	local warZoneCfg = i3k_db_war_zone_map_cfg
	local roleLvl = self:GetLevel()
	if roleLvl < warZoneCfg.needLvl then
		return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5778, warZoneCfg.needLvl))
	end
	local _, _, isInTime = g_i3k_db.i3k_db_get_activity_open_close_time(warZoneCfg.openTimes)
	if not isInTime then
		return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5780))
	end
	local sectID = self:GetFactionSectId()
	if sectID == 0 then
		return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5779))
	end
	if self:getMatchState() ~= 0 or self:IsInRoom() then -- 等待其他活动无法进行匹配
		return g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5781))
	end
	local fun = function()
		i3k_sbean.global_world_enter(mapID)
	end
	self:CheckMulHorse(fun)
end
---------------------黄金海岸：赏金任务-----------------------------------------
function i3k_game_context:SetGlobalWorldTask(tasks)
	self._globalWorldTask = tasks or {}
end
function i3k_game_context:GetGlobalWorldTaskData()
	return self._globalWorldTask
end
function i3k_game_context:SetGlobalWorldTaskValue(taskID, value)
	if self._globalWorldTask[taskID] then
		self._globalWorldTask[taskID].curValue = value
		local cfg = i3k_db_war_zone_map_task[taskID]
		if cfg then
			local isFinish = g_i3k_game_context:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, value)
			if isFinish then
				self._globalWorldTask[taskID].taskStatus = g_GLOBAL_WORLD_TASK_COMPLETE --已完成
			end
		end
	end
end
function i3k_game_context:GetGlobalWorldTaskDataCfgByNPCID(npcID)
	local data = {}
	for k,v in pairs(self._globalWorldTask) do
		local cfg = i3k_db_war_zone_map_task[v.id]
		if cfg.arg1 == npcID then
			local isFinish = g_i3k_game_context:IsTaskFinished(g_TASK_NEW_NPC_DIALOGUE, cfg.arg1, cfg.arg2, v.curValue)
			if not isFinish then
				data = v
				break
			end
		end
	end
	return data
end
function i3k_game_context:GetGlobalWorldTaskSortData()
	local sortList = {}
	for k,v in pairs(self._globalWorldTask) do
		local cfg =  i3k_db_war_zone_map_task[v.id]
		table.insert(sortList, v)
	end
	local function sortCfg(a, b)
		if a.isReward ~= b.isReward then
			return a.isReward < b.isReward
		end
		if a.taskStatus ~= b.taskStatus then
			return a.taskStatus > b.taskStatus
		end
		local cfgA = i3k_db_war_zone_map_task[a.id]
		local cfgB = i3k_db_war_zone_map_task[b.id]
		assert(cfgA ~= nil , "GlobalTaskID："..a.id.." is not in the i3k_db_war_zone_map_task")
		assert(cfgB ~= nil , "GlobalTaskID："..b.id.." is not in the i3k_db_war_zone_map_task")
		if cfgA.isLuanDou ~= cfgB.isLuanDou then
			return cfgA.isLuanDou > cfgB.isLuanDou
		end
		if a.id ~= b.id then
			return a.id < b.id
		end
	end 
	table.sort(sortList, sortCfg)
	return sortList
end
function i3k_game_context:SetGlobalWorldTaskComplete(taskID)
	if self._globalWorldTask[taskID] then
		self._globalWorldTask[taskID].isReward = g_GLOBAL_WORLD_TASK_HASTAKE
	end
end
--统计赏金任务完成数量
function i3k_game_context:GetGlobalWorldTaskCompleteNum()
	local num = 0
	local maxNum = 0
	for k,v in pairs(self._globalWorldTask) do
		maxNum = maxNum + 1
		if v.taskStatus == g_GLOBAL_WORLD_TASK_COMPLETE then
			num = num + 1
		end
	end
	return num, maxNum
end
--统计对应分线赏金任务未完成数量
function i3k_game_context:GetGlobalWorldTaskNotCompleteTaskNum(fightType)
	local num = 0
	for k,v in pairs(self._globalWorldTask) do
		local cfg = i3k_db_war_zone_map_task[v.id]
		local isFinish =  g_i3k_game_context:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, v.curValue)
		if cfg.isLuanDou == fightType then
			if not isFinish or (isFinish and v.isReward == g_GLOBAL_WORLD_TASK_CANTAKE) then
				num = num + 1
			end
		end
	end
	return num
end
function i3k_game_context:updateGlobalWorldTaskResponce(taskID)
	if not taskID and taskID == 0 then
		return 
	end
	local data = self._globalWorldTask[taskID]
	if data then
		local value = data.curValue --当前任务值
		local cfg = i3k_db_war_zone_map_task[data.id]
		local taskType = cfg.type
		local arg1 = cfg.arg1
		local arg2 = cfg.arg2
		local is_finish = self:IsTaskFinished(taskType,arg1,arg2,value)
		if taskType == g_TASK_COLLECT and not is_finish then
			self:TaskCollect(arg1)
		elseif taskType == g_TASK_NEW_NPC_DIALOGUE and not is_finish then
			self:OpenNewNpcDialogue(cfg, TASK_CATEGORY_GLOBALWORLD, taskId)
		end
	end
end
--赏金任务
function i3k_game_context:updateGlobalWorldTaskValue(task_type, target)
	--杀怪类型可能会有多个任务同时进行相同怪物
	local isFinished = false
	local taskIDList = {}
	local is_true, is_finish, targetValue, shouldUpdateUI, sub = false, false, 0, false, nil
	for i,v in pairs(self._globalWorldTask) do
		local cfg = i3k_db_war_zone_map_task[v.id]
		if cfg.type == task_type and cfg.arg1 == target then
			is_true, is_finish, targetValue, shouldUpdateUI
					= self:updateCommonTaskValue(TASK_CATEGORY_GLOBALWORLD, task_type, cfg.arg1, cfg.arg2, v.curValue, target)
			if targetValue > v.curValue then
				self:LogTaskValue(TASK_CATEGORY_GLOBALWORLD, targetValue, v.id)
			end
		end
	end
	if isFinished then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateGlobalWorldTask")
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_GlobalWorldMapTask, "refresh")
	return is_true, is_finish, sub
end
--------------------------秘境任务---------------------------------
function i3k_game_context:getSecretareaTaskIdAndVlaue()
	return self._roleTask.secretareatask.id,self._roleTask.secretareatask.value
end

function i3k_game_context:ClearSecretareaTask()
	self._roleTask.secretareatask = {}
end

function i3k_game_context:setSecretareaTaskIdAndValue(id,value)
	if self._roleTask.secretareatask then
		self._roleTask.secretareatask.id = id
		self._roleTask.secretareatask.value = value
	else
		self._roleTask.secretareatask = {id = id, value = value}
	end
end

function i3k_game_context:addSecretareaTaskValue(id,count)
	self._roleTask.secretareatask.value = self._roleTask.secretareatask.value + count
end

---史诗任务
function i3k_game_context:SetEpicTaskData(epicTask)
	self._epicTask = epicTask or {}
	self:checkEpicTaskOpen()
end

function i3k_game_context:checkEpicTaskOpen(isUpdateTaskUI)
	local index = #self._epicTask
	local lvl = self:GetLevel()
	local epicqueue = i3k_db_generals[self:GetRoleType()].epicQueue
	if index == 0 then
		if lvl >= self:getEpicTaskOpenLvl() then
			table.insert(self._epicTask, {seriesID = epicqueue[1], groupID = 1, id = 1, value = 0, state = 0, receiveTime = 0})
		end
	else
		local data, index = self:getCurrEpicTaskData()
		local nextIndex = index+1
		if data.id == 0 and nextIndex <= #epicqueue and lvl >= i3k_db_epic_cfg[epicqueue[nextIndex]].limitLvl then
			data = {}
			data.seriesID = epicqueue[nextIndex]
			data.groupID = 1
			data.id = 1
			data.value = 0
			data.state = 0
			data.receiveTime = 0
			table.insert(self._epicTask, data)
		end
	end
	if #self._epicTask > 0 and self._epicTask[#self._epicTask].id > 0 then
		self:AddTaskToDataList(TASK_CATEGORY_EPIC)
		if isUpdateTaskUI then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateEpicTask")
		end
	end
end

function i3k_game_context:nextEpicTask()
	local data, index = self:getCurrEpicTaskData()
	local epicqueue = i3k_db_generals[self:GetRoleType()].epicQueue
	local cfg = i3k_db_epic_task
	local nextId = data.id + 1
	local nextGroupId = data.groupID + 1
	if nextId > #cfg[data.seriesID][data.groupID] then
		if nextGroupId > #cfg[data.seriesID] then
			data.id = 0
			data.state =  0
			local hero = i3k_game_get_player_hero()
			if hero then
				g_i3k_game_context:SetPrePower()
				hero:UpdateEpicTaskAttr()
			end
			g_i3k_logic:OpenEpickActUI()
			if i3k_db_epic_cfg[data.seriesID].titleId ~= 0 then
				g_i3k_logic:openRoleTitleUI(i3k_db_epic_cfg[data.seriesID].titleId)
			end
			g_i3k_game_context:ShowPowerChange()
			if #epicqueue > index then
				self:checkEpicTaskOpen()
			else
				self:removeTaskData(TASK_CATEGORY_EPIC)
			end
		else
			data.groupID = nextGroupId
			data.id = 1
		end
	else
		data.id = nextId
	end
	data.state = 0
	data.value = 0
	if data.id > 0 then
		self:AddTaskToDataList(TASK_CATEGORY_EPIC)
		local main_task_cfg = cfg[data.seriesID][data.groupID][data.id]
		if main_task_cfg.getTaskNpcID == 0 then
			data.state = 1
			g_i3k_game_context:OpenGetTaskDialogue(main_task_cfg, TASK_CATEGORY_EPIC)
		end
	end

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateEpicTask")
end

function i3k_game_context:getEpicTaskAttr( )
	local cfg = i3k_db_epic_cfg
	local attrs = {}
	for _,et in ipairs(self._epicTask) do
		if et.id == 0 then
			for i,v in ipairs(cfg[et.seriesID].attr) do
				if attrs[v.id] then
					attrs[v.id] = attrs[v.id] + v.value
				else
					attrs[v.id] = v.value
				end
			end
		end
	end
	return attrs
end

function i3k_game_context:getEpicTaskOpenLvl()
	local epicqueue = i3k_db_generals[self:GetRoleType()].epicQueue
	return i3k_db_epic_cfg[epicqueue[1]].limitLvl
end

function i3k_game_context:getCurrEpicTaskData()
	local index = #self._epicTask
	return self._epicTask[index], index
end

function i3k_game_context:setCurrEpicTaskState(state, isAuto)
	local data = self:getCurrEpicTaskData()
	data.state = 1
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateEpicTaskTag", isAuto)
end

function i3k_game_context:getEpicTaskData( )
	return self._epicTask
end

function i3k_game_context:addCurrEpicTaskValue(value)
	local data = self:getCurrEpicTaskData()
	data.value = value
end

function i3k_game_context:resetEpicTaskValue()
	local data = self:getCurrEpicTaskData()
	data.value = 0
	data.state = 0
end

---记录任务列表顺序
function i3k_game_context:InitTaskDataList()

	local function func(v)
		self:addSubLineData(v.taskgroupid,v.id,0, 0)
		if not self._IsSortedTaskList then
			self:SetTaskDataList(g_i3k_db.i3k_db_get_subline_task_hash_id(v.taskgroupid), 2)
		else
			self:AddTaskToDataList(g_i3k_db.i3k_db_get_subline_task_hash_id(v.taskgroupid))
		end
	end

	self:checkSubLineTask(func)
	self:SortTaskList()
end

--把任务添加到任务队列
function i3k_game_context:addMissionToDataList(taskIdentify, receiveTime)
	local index = 0
	for i,v in ipairs(self._TaskListOrder) do
		if v.task == taskIdentify then
			v.receiveTime = receiveTime
			index = i
			break
		end
	end
	if self._IsSortedTaskList then
		if index ~= 0 then
			local tbl = self._TaskListOrder[index]
			table.remove(self._TaskListOrder, index)
			table.insert(self._TaskListOrder, 2, tbl)
		else
			table.insert(self._TaskListOrder, 2, {task = taskIdentify, receiveTime = receiveTime})
		end
	else
		self:SetTaskDataList(taskIdentify, receiveTime)
	end
end
function i3k_game_context:SetTaskDataList(task, receiveTime)
	if self._IsSortedTaskList then
		return
	end
	if task == 1 then
		local mainTaskId = self:getMainTaskIdAndVlaue()
		local cfg = g_i3k_db.i3k_db_get_main_task_cfg(mainTaskId)
		self._mainTaskInfo.task = task
		self._mainTaskInfo.receiveTime = receiveTime
		if cfg.type == g_TASK_REACH_LEVEL and self:GetLevel() < cfg.arg1 then
			self._mainTaskInfo.index = 2
		else
			self._mainTaskInfo.index = 1
		end
	else
		table.insert(self._TaskListOrder, {task = task, receiveTime = receiveTime})
	end
end

-- taskIdentify 为唯一id，其中特殊任务类型只能存在一个任务，故taskIdentify为任务的类型，如果一个任务类型可以同时接取多个任务，
-- 那么taskIdentify字段为一个特殊方法hash出来的一个数字（在一定范围内）
-- 参考 支线任务：i3k_db_get_subline_task_hash_id，势力声望：i3k_db_get_power_rep_task_hash_id
function i3k_game_context:AddTaskToDataList(taskIdentify, receiveTime)
	--任务列表里必有两个任务 主线和神兵 神兵任务在此列表中没有被删除，
	--千万别删了神兵任务不然下面的操作是错误的,也就是该列表是在有两个任务的前提下操作的。本来也可以删了根据列表长度进行判断(这样更麻烦)
	if taskIdentify == 1 then return end

	receiveTime = receiveTime or i3k_game_get_time()
	local index = 0
	for i,v in ipairs(self._TaskListOrder) do
		if v.task == taskIdentify then
			v.receiveTime = receiveTime
			index = i
			break
		end
	end
	if self:GetMainTaskIndex() == 1 then
		if index ~= 0 then
			local tbl = self._TaskListOrder[index]
			table.remove(self._TaskListOrder, index)
			table.insert(self._TaskListOrder, 2, tbl)
		else
			table.insert(self._TaskListOrder, 2, {task = taskIdentify, receiveTime = receiveTime})
		end
	else
		local mtbl = self._TaskListOrder[2]
		if index == 0 then
			table.insert(self._TaskListOrder, 1, {task = taskIdentify, receiveTime = receiveTime})
			if mtbl then
				self._TaskListOrder[3] = self._TaskListOrder[2]
				self._TaskListOrder[2] = mtbl
			end
		elseif index == 1 then

		elseif index > 2 then

			local tbl = self._TaskListOrder[index]
			table.remove(self._TaskListOrder, index)
			table.insert(self._TaskListOrder, 1, tbl)

			self._TaskListOrder[3] = self._TaskListOrder[2]
			self._TaskListOrder[2] = mtbl
		end
	end

	return index ~= 0
end

function i3k_game_context:SortTaskList()
	if not self._IsSortedTaskList then
		if next(self._TaskListOrder) and #self._TaskListOrder > 1 then
		table.sort(self._TaskListOrder, function(tb1, tb2)
				if tb1 and tb2 and tb1.receiveTime ~= tb2.receiveTime then
				return tb1.receiveTime > tb2.receiveTime
			end
			return false
		end)
		end
		table.insert(self._TaskListOrder, self._mainTaskInfo.index, self._mainTaskInfo)
		self._IsSortedTaskList = true
	end
end

function i3k_game_context:SetMainTaskIndex(idx)
	if idx == self._mainTaskInfo.index then
		return
	end
	self._mainTaskInfo.index = idx
	if idx == 2 then
		table.remove(self._TaskListOrder, 1)
		table.insert(self._TaskListOrder, 2, {task = 1, receiveTime = i3k_game_get_time()})
	else
		table.remove(self._TaskListOrder, 2)
		table.insert(self._TaskListOrder, 1, {task = 1, receiveTime = i3k_game_get_time()})
	end
end

function i3k_game_context:removeTaskData(taskType)
	local index = 0
	for i,v in ipairs(self._TaskListOrder) do
		if v.task == taskType then
			index = i
			table.remove(self._TaskListOrder, i)
			break
		end
	end
	if self._mainTaskInfo.index == 2 then
		if index == 1 then
			local t = self._TaskListOrder[1]
			table.remove(self._TaskListOrder, 1)
			table.insert(self._TaskListOrder, 2, t)
		end
	end
end

function i3k_game_context:GetMainTaskIndex()
	return self._mainTaskInfo.index or 1
end

function i3k_game_context:getTaskListOrderDate()
	return self._TaskListOrder
end

----记录全服答题的积分和排行榜 累计经验
function i3k_game_context:SetQuizGiftBonus(bonus)

	quizGift_bonus = bonus

end
function i3k_game_context:GetQuizGiftBonus()

	return quizGift_bonus
end
function i3k_game_context:SetQuizGiftBonusRank(rank)

	quizGift_bonusRank = rank

end
function i3k_game_context:GetQuizGiftBonusRank()

	return quizGift_bonusRank
end
function i3k_game_context:SetQuizGiftBonusExp(exp)

	quizGift_bonusExp = quizGift_bonusExp + exp

end
function i3k_game_context:GetQuizGiftBonusExp()

	return quizGift_bonusExp
end
function i3k_game_context:SetQuizGiftUseDoubleBonus(bonus)

	quizGift_doubleBonus = bonus

end
function i3k_game_context:GetQuizGiftUseDoubleBonus()

	return quizGift_doubleBonus
end
function i3k_game_context:SetQuizGiftIsUseDoubleBonus(bonus)

	quizGift_usedoubleBonus = bonus

end
function i3k_game_context:GetQuizGiftIsUseDoubleBonus()

	return quizGift_usedoubleBonus

end
--------------------------背包金钱和钻石------------------------------


---------------背包相关--------------------


---------------购买金币相关--------------------
function i3k_game_context:BuyCoins(req, result)
	local times = req.times
	local number = req.number
	local scrollData = req.temp
	local needDiamond = g_i3k_db.i3k_db_get_buy_coin_needDiamond_count(scrollData)

	self._roleData.curChar._dayBuyCoinTimes = number

	g_i3k_game_context:UseDiamond(needDiamond, false,AT_BUY_COIN)
	g_i3k_ui_mgr:RefreshUI(eUIID_BuyCoin,result,scrollData)
	local coinCount = 0
	for i=1,#result do
		coinCount = coinCount + scrollData[i].getCoinCount * result[i]
	end
	DCItem.buy(g_BASE_ITEM_COIN,"非绑定",coinCount, needDiamond, g_BASE_ITEM_DIAMOND, AT_BUY_COIN)
end

function i3k_game_context:ResetBuyCoinTimes()
	self._roleData.curChar._dayBuyCoinTimes = 0
end

function i3k_game_context:AddBuyCoinTimes(times)
	self._roleData.curChar._dayBuyCoinTimes = self._roleData.curChar._dayBuyCoinTimes + times
end

function i3k_game_context:GetBuyCoinTimes()
	return self._roleData.curChar._dayBuyCoinTimes
end

---------------购买体力相关--------------------
function i3k_game_context:SetBuyVitData(number)
	self:SetBuyVitTimes(number)
	local price = i3k_db_common.buyVit.price
	local needDiamond = price[number] and price[number] or price[#price]
	self:UseDiamond(needDiamond, false,AT_BUY_VIT)--消耗元宝
	local nextDiamond = price[number+1] and price[number+1] or price[#price]
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BuyVit, "updateVitTips", number, nextDiamond)
	g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(332, i3k_db_common.buyVit.vitValue))
	DCItem.buy(g_BASE_ITEM_VIT,"体力",i3k_db_common.buyVit.vitValue, needDiamond, g_BASE_ITEM_DIAMOND, AT_BUY_VIT)
end

function i3k_game_context:SetBuyVitTimes(times)
	self._roleData.curChar._dayBuyVitTimes = times
end

function i3k_game_context:GetBuyVitTimes()
	return self._roleData.curChar._dayBuyVitTimes
end

function i3k_game_context:RefreshBuyVitTimes() -- 刷新每日购买体力次数
	self._roleData.curChar._dayBuyVitTimes = 0
	g_i3k_ui_mgr:RefreshUI(eUIID_BuyVit)
end

function i3k_game_context:SetDayCrit(tb)
	self._dayCrit = tb
end

function i3k_game_context:GetDayCrit()
	return self._dayCrit
end


function i3k_game_context:GetRedColour()
	return "FFFF0000"
end
function i3k_game_context:GetGreenColour()
	return "FF5DD13D"
end

function i3k_game_context:GetWhiteColour()
	return "FFCCE2DD"
end

function i3k_game_context:GetBlueColour()
	return "FF30B4FF"
end

function i3k_game_context:GetPurpleColour()
	return "FFCD81FF"
end

function i3k_game_context:GetOrangeColour()
	return "FFFFCD3A"
end

function i3k_game_context:GetGreyColour()
	return "FFCCCCCC"
end

function i3k_game_context:SetNameColour(name,grade)
	grade = tonumber(grade)
	if not grade then
		return
	end
	if grade == 1 then
		return "<c=qwhite>"..name.."</c>"
	elseif grade == 2 then
		return "<c=qgreen>"..name.."</c>"
	elseif grade == 3 then
		return  "<c=qblue>"..name.."</c>"
	elseif grade == 4 then
		return  "<c=qpurple>"..name.."</c>"
	elseif grade == 5 then
		return  "<c=qorange>"..name.."</c>"
	end
end











--获取身上装备的战力
function i3k_game_context:GetBodyEquipPower(equip_id,attribute,naijiu,qlvl,starlvl,diamond,refine,legends,gemBless, smeltingProps, hammerSkill)

	local _t = g_i3k_db.i3k_db_get_common_item_cfg(equip_id)

	if not _t then
		return 0
	end
	local base_attribute = _t.properties
	local expect_attribute = _t.ext_properties
	local group = g_i3k_db.i3k_db_get_equip_upStar_group(_t.partID);
	if not i3k_db_up_star[group][starlvl] then
		starlvl = starlvl - 1
	end
	local Threshold = i3k_db_common.equip.durability.Threshold
	local property = {}
	local strengGroup = g_i3k_db.i3k_db_get_equip_streng_group(_t.partID);
	for k,v in pairs(base_attribute) do
		local temp_value = v.value
		local per = 0;
		local addCount = 0;
		if v.type and v.type ~= 0 and v.rankFactor == 1 then
			per = i3k_db_up_star_percent[v.type].upPercent[starlvl + 1] / 10000
			addCount = i3k_db_up_star_percent[v.type].upValue[starlvl + 1]
		end
		if not i3k_db_streng_equip[strengGroup][qlvl] then
			qlvl = qlvl -1
		end
		if qlvl ~= 0  and i3k_db_streng_equip[strengGroup][qlvl].props[v.type] then
			temp_value = (temp_value + i3k_db_streng_equip[strengGroup][qlvl].props[v.type])*( 1 + per*v.rankFactor) + addCount
		else
			temp_value = (temp_value)*( 1 + per*v.rankFactor) + addCount
		end

		if naijiu ~= -1 and naijiu > Threshold then
			if legends[1] and legends[1] ~= 0 then
				temp_value = math.floor(tonumber(temp_value) * (1+i3k_db_equips_legends_1[legends[1]].count/10000))
			end
		end
		property[v.type] = (property[v.type] or 0) + temp_value
	end
	for k,v in ipairs(expect_attribute) do
		if tonumber(attribute[k]) then
			if tonumber(v.type) == 1 then
				local count = tonumber(attribute[k])
				if naijiu ~= -1 and naijiu > Threshold then
					if legends[2] and legends[2] ~= 0 then
						count = math.floor(count * (1+i3k_db_equips_legends_2[legends[2]].count/10000))
					end
				end
				property[v.args] = (property[v.args] or 0) + count
			end
		end
	end
	if next(refine) then
		for k,v in pairs(refine) do
			property[v.id] = (property[v.id] or 0) + tonumber(v.value)
		end
	end

	--锤炼技能宝石属性提升系数
	local ratio = 1 + g_i3k_db.i3k_db_get_equip_bless_increase_ratio_by_skill_set(hammerSkill)
	--加宝石属性
	for k,v in pairs(diamond) do
		if v ~= 0 then
			local tmp_cfg = g_i3k_db.i3k_db_get_common_item_cfg(v)
			local attType = tmp_cfg.effect_id
			local attValue = tmp_cfg.effect_value
			local addPercent = 0
			if gemBless and gemBless[k] and gemBless[k] >= 1 then
				local gemBlessCfg = g_i3k_db.i3k_db_get_diamond_bless_cfg(tmp_cfg.type)
				addPercent = gemBlessCfg[gemBless[k]]
			end
			property[attType] = (property[attType] or 0) + math.floor(attValue * (1 + addPercent + ratio))
		end
	end

	--加锤炼属性
	if smeltingProps and next(smeltingProps) then
		for i, v in ipairs(smeltingProps) do
			property[v.id] = (property[v.id] or 0) + v.value
		end
	end

	return g_i3k_db.i3k_db_get_battle_power(property, true)
end

--获取背包一件装备的战力
function i3k_game_context:GetBagEquipPower(equip_id,attribute,naijiu,refine,legends, smeltingProps)
	local _t = g_i3k_db.i3k_db_get_common_item_cfg(equip_id)
	if not _t then
		return 0
	end
	local base_attribute = _t.properties
	local expect_attribute = _t.ext_properties
	local Threshold = i3k_db_common.equip.durability.Threshold
	local property = {}
	for k,v in pairs(base_attribute) do
		local temp_value = v.value
		if legends[1] and legends[1] ~= 0 then
			if naijiu ~= -1 and naijiu > Threshold then
				temp_value = math.floor(tonumber(temp_value) * (1+i3k_db_equips_legends_1[legends[1]].count/10000))
			end
		end
		property[v.type] = (property[v.type] or 0) + temp_value
	end
	for k,v in ipairs(expect_attribute) do
		if tonumber(attribute[k]) then
			if v.type == 1 then
				local count = tonumber(attribute[k])
				if legends[2] and legends[2] ~= 0 then
					if naijiu ~= -1 and naijiu > Threshold then
						count = math.floor(count * (1+i3k_db_equips_legends_2[legends[2]].count/10000))
					end
				end
				property[v.args] = (property[v.args] or 0) + count
			end
		end
	end

	if next(refine) then
		for k,v in pairs(refine) do
			property[v.id] = (property[v.id] or 0) + tonumber(v.value)
		end
	end
	--锤炼属性
	if smeltingProps and next(smeltingProps) then
		for i,v in ipairs(smeltingProps) do
			property[v.id] = (property[v.id] or 0) + v.value
		end
	end

	return g_i3k_db.i3k_db_get_battle_power(property, true)
end

--到满级经验丹个数
function i3k_game_context:GetAddExpNumber(itemExp, itemCount)
	local isCue = false
	local num = 1
	local limitLvl = g_i3k_db.i3k_db_get_sever_limit_lvl()
	local roleLvl = self:GetLevel()
	if roleLvl ~= limitLvl then
		local rushCfg = g_i3k_db.i3k_db_rush_lvl_cfg()
		local achieveLvl = g_i3k_db.i3k_db_get_can_achieve_lvl()
		itemExp = rushCfg and itemExp * (rushCfg.percent + 100) / 100 or itemExp
		for i=1,itemCount do
			local addExp = i * itemExp
			local cur_lv, cur_exp = g_i3k_db.i3k_db_get_level_exp_on_use_item(roleLvl, self:GetExp(), addExp)
			num = i
			if cur_lv >= achieveLvl then
				isCue = true
				break
			end
		end
	else --达到封印等级时,使用经验丹削弱百分比
		local outExp = self:GetOutExp()
		local mulValue = g_i3k_db.i3k_db_get_max_out_exp()
		itemExp = itemExp * (100 - i3k_db_server_limit.reducePercent) / 100
		for j=1,itemCount do
			outExp = outExp + itemExp
			num = j
			if outExp >= mulValue then
				break
			end
		end
	end
	return num, isCue
end

-- 判断是否还可以继续使用经验丹
function i3k_game_context:GetCanUseExpItem()
	local limitLvl = g_i3k_db.i3k_db_get_sever_limit_lvl()
	if self:GetLevel() < limitLvl then
		return true
	else
		return self:GetOutExp() < g_i3k_db.i3k_db_get_max_out_exp()
	end
end

--到达体力满值所需道具个数
function i3k_game_context:GetAddVitNumber(id)
	--local cfg = g_i3k_db.i3k_db_get_other_item_cfg(id)
	--return math.ceil((self:GetVitMax() - self:GetVit()) / cfg.args1)
	local cfg = g_i3k_db.i3k_db_get_other_item_cfg(id)
	local MaxCount = math.floor((self:GetVitRealMax() - self:GetVit()) / cfg.args1)
	local haveCount = self:GetCommonItemCanUseCount(id)
	local lastCount = g_i3k_db.i3k_db_get_day_use_item_day_use_times(id)
	if MaxCount >= haveCount then
		if lastCount then
			if lastCount > haveCount then
				return haveCount
			else
				return lastCount
			end
		else
			return haveCount
		end
	else
		if lastCount then
			if lastCount > MaxCount then
				return MaxCount
			else
				return lastCount
			end
		else
			return MaxCount
		end
	end
end

function i3k_game_context:AutoOpenTaskPanel(id, instanceID)
	--帮派
	local factid,factvalue,receiveTime = g_i3k_game_context:getFactionTaskIdValueTime()
	local faction_task_cfg = g_i3k_db.i3k_db_get_faction_task_cfg(factid)

	--龙穴
	local dragonTask = self:GetAcceptDragonHoleTask()
	local dragonTaskCfg = {}
	local dragonFinish = false
	local dragonReceive = 0
	local dragonId = 0
	local isDragonTask = false
	for k, v in ipairs(dragonTask) do
		dragonTaskCfg = g_i3k_db.i3k_db_get_dragon_task_cfg(v.id)
		if dragonTaskCfg.type == g_TASK_NEW_NPC_DIALOGUE and dragonTaskCfg.arg1 == id then
			dragonId = v.id
			dragonReceive = v.receiveTime
			dragonFinish = self:IsTaskFinished(dragonTaskCfg.type, dragonTaskCfg.arg1, dragonTaskCfg.arg2, v.value)
			isDragonTask = true
			break
		end
	end

	--支线任务
	local alltaskData = g_i3k_game_context:getSubLineTask()
	local sublineId = nil
	local groupId = nil
	local sub_state = nil
	local sub_cfg = nil
	local subTaskIsFinish = false
	for k,v in pairs(alltaskData) do
		local cfg = g_i3k_db.i3k_db_get_subline_task_cfg(k,v.id)
		if cfg then
			subTaskIsFinish = self:IsTaskFinished(cfg.type,cfg.arg1,cfg.arg2,v.value)
			local care1 = (v.state == 0 and cfg.getTaskNpcID == id)
			local care2 = ((cfg.type == g_TASK_NEW_NPC_DIALOGUE) and (id == cfg.arg1))
			local care3 = (v.state >= 1 and cfg.finishTaskNpcID == id and subTaskIsFinish)
			if care1 or care2 or care3 then
				sublineId = v.id
				groupId = k
				sub_state = v.state
				sub_cfg = cfg
				break
			end
		end
	end

	--身世任务
	local petID = g_i3k_game_context:GetLifeTaskRecorkPetID()
	local petReward = nil
	local is_finish = nil
	local taskId = nil
	local petTaskDesc = nil
	local petNpcId
	local petCompleteNpc
	if petID ~= 0 then
		local data = g_i3k_game_context:getLifeIdAndValueBytype(petID)
		taskId = data.id
		local value = data.value
		petReward = data.reward
		local isFirstTask = false
		if taskId == 0 then
			taskId = 1
			petReward = 1
			isFirstTask = true
		end
		if petReward == 1 and not isFirstTask then
			local cfg = i3k_db_from_task[petID][taskId]
			if cfg.postTaskID ~= 0 then
				taskId = cfg.postTaskID
			end
			value = 0
		end
		local cfg = i3k_db_from_task[petID][taskId]
		local taskType = cfg.taskType
		local petArg1 = cfg.arg1
		local petArg2 = cfg.arg2
		petNpcId = cfg.npcID
		petCompleteNpc = cfg.completeNpcID
		is_finish = self:IsTaskFinished(taskType,petArg1,petArg2,value)
		petTaskDesc = g_i3k_db.i3k_db_get_task_desc(taskType, petArg1, petArg2, 0, false, nil)
	end

	--珍珑棋局任务
	local isChessTask = false
	local chessFinish = false
	local chessCfg = {}
	local chess = g_i3k_game_context:getChessTask()
	if chess and chess.curTaskID and chess.curTaskID > 0 then
		chessCfg = i3k_db_chess_task[chess.curTaskID]
		if chessCfg.type == g_TASK_NEW_NPC_DIALOGUE and chessCfg.arg1 == id then
			chessFinish = self:IsTaskFinished(g_TASK_NEW_NPC_DIALOGUE, chessCfg.arg1, chessCfg.arg2, chess.curValue)
			isChessTask = true
		end
	end

	--周年庆任务
	local isJubileeTask = false
	local jubileeFinish = false
	local jubileeTaskCfg = {}
	local jubilee = g_i3k_game_context:GetJubileeStep2Task()
	if jubilee and jubilee.id and jubilee.id > 0 then
		jubileeTaskCfg = i3k_db_jubilee_tasks[jubilee.id]
		if jubileeTaskCfg.type == g_TASK_NEW_NPC_DIALOGUE and jubileeTaskCfg.arg1 == id then
			jubileeFinish = self:IsTaskFinished(g_TASK_NEW_NPC_DIALOGUE, jubileeTaskCfg.arg1, jubileeTaskCfg.arg2, jubilee.value)
			isJubileeTask = true
		end
	end
	--赏金任务
	local isGlobalWorldTask = false
	local globalWorldTaskFinish = false
	local globalWorldTaskCfg = {}
	local globalWorldTaskData = self:GetGlobalWorldTaskDataCfgByNPCID(id) 
	if globalWorldTaskData and globalWorldTaskData.id and globalWorldTaskData.id > 0 then
		globalWorldTaskCfg = i3k_db_war_zone_map_task[globalWorldTaskData.id]
		if globalWorldTaskCfg.type == g_TASK_NEW_NPC_DIALOGUE and globalWorldTaskCfg.arg1 == id then
			globalWorldTaskFinish = self:IsTaskFinished(g_TASK_NEW_NPC_DIALOGUE, globalWorldTaskCfg.arg1, globalWorldTaskCfg.arg2, globalWorldTaskData.curValue)
			if globalWorldTaskFinish then
				self:OpenFinishTaskDialogue(globalWorldTaskCfg, TASK_CATEGORY_GLOBALWORLD)
			else
				self:OpenNewNpcDialogue(globalWorldTaskCfg, TASK_CATEGORY_GLOBALWORLD, globalWorldTaskData.id)
			end
			return
		end
	end
	--史诗任务
	local epic_data = g_i3k_game_context:getCurrEpicTaskData()
	local world = i3k_game_get_world()
	local state = true
	--奇遇任务，对话表没有id，点击奇遇npc取默认对话，所以屏蔽
	--local adventure = g_i3k_game_context:getAdventureTask()
	--主线
	local mId,mValue, mstate = self:getMainTaskIdAndVlaue()
	local main_task_cfg = g_i3k_db.i3k_db_get_main_task_cfg(mId)
	if main_task_cfg and (id == main_task_cfg.arg1 or id == main_task_cfg.getTaskNpcID or id == main_task_cfg.finishTaskNpcID) then--当选中的npc与要执行任务的npc相同时则直接打开npc对话
		local taskRealType = main_task_cfg.type
		local arg1 = main_task_cfg.arg1
		local arg2 = main_task_cfg.arg2
		local m_IsFinish = self:IsTaskFinished(taskRealType, arg1, arg2,mValue)
		if mstate == 0 and id == main_task_cfg.getTaskNpcID then
			self:OpenGetTaskDialogue(main_task_cfg, TASK_CATEGORY_MAIN)
			state = false
		elseif mstate >= 1 and id == main_task_cfg.finishTaskNpcID and m_IsFinish then
			self:OpenFinishTaskDialogue(main_task_cfg, TASK_CATEGORY_MAIN)
			state = false
		elseif taskRealType == g_TASK_NEW_NPC_DIALOGUE and id == main_task_cfg.arg1 and mstate >= 1 then
			self:OpenNewNpcDialogue(main_task_cfg, TASK_CATEGORY_MAIN)
			state = false
		end
	elseif faction_task_cfg and faction_task_cfg.type == g_TASK_NEW_NPC_DIALOGUE and id == faction_task_cfg.arg1 then
		local roleID = self:getFactionTaskRoleId()
		local guid = self:getFactionTaskGuid()
		self:OpenFactionTaskFinishDialogue(faction_task_cfg)
		state = false
		return;
	elseif sublineId and groupId and sub_state then
		if sub_state == 0 then
			state = false
			g_i3k_game_context:GetSubLineTaskDialogue(groupId,sublineId)
		elseif sub_state >= 1 and subTaskIsFinish then
			state = false
			self:FinishSubLineTaskDialogue(groupId,sublineId,g_i3k_game_context:isBagEnoughSubLineTaskAward(groupId,sublineId),g_i3k_game_context:getSublineTaskAward(groupId,sublineId))
		elseif sub_state >= 1 and (sub_cfg.type == g_TASK_NEW_NPC_DIALOGUE) and (id == sub_cfg.arg1) then
			self:OpenNewNpcDialogue(sub_cfg, TASK_CATEGORY_SUBLINE, sublineId, groupId)
		end
	elseif world._mapType == g_SPY_STORY then
		local data = g_i3k_db.i3k_db_get_spy_dialogue_npc_data(id)
		if data then
			state = false
			g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
			g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, data.dialogues, data.mod, data.callback)
		end
	elseif epic_data and epic_data.id and epic_data.id > 0 then
		local cfg = g_i3k_db.i3k_db_epic_task_cfg(epic_data.seriesID, epic_data.groupID, epic_data.id)
		if epic_data.state == 0 and id == cfg.getTaskNpcID then
			self:OpenGetTaskDialogue(cfg, TASK_CATEGORY_EPIC)
			state = false
		elseif epic_data.state >= 1 and (id == cfg.finishTaskNpcID or id == cfg.arg1) and self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, epic_data.value) then
			self:OpenFinishTaskDialogue(cfg, TASK_CATEGORY_EPIC)
			state = false
		elseif cfg.type == g_TASK_NEW_NPC_DIALOGUE and id == cfg.arg1 and epic_data.state >= 1 then
			self:OpenNewNpcDialogue(cfg, TASK_CATEGORY_EPIC)
			state = false
		end
	elseif world._mapType == g_Life and petID ~= 0 then
		if not self:getIsCompletePetLifeTaskFromID(petID) then
			if petReward == 0 and is_finish and id == petCompleteNpc then
				state = false
				g_i3k_game_context:FinishLifeTaskDialogue(petID,taskId,g_i3k_game_context:isBagEnoughLifeTaskAward(petID,taskId),g_i3k_game_context:getLifeTaskAward(petID,taskId))
			elseif petReward == 1 and not is_finish and id == petNpcId then
				state = false
				g_i3k_game_context:GetLifeTaskDialogue(petID,taskId,g_i3k_game_context:getLifeTaskAward(petID,taskId),petTaskDesc)
			end
		end
	elseif world._mapType == g_OUT_CAST then
		--外传任务
		local outCastID = g_i3k_game_context:getCurOutCastID()
		local petReward = nil
		local is_finish = nil
		local taskId = nil
		local petTaskDesc = nil
		local petNpcId
		local petCompleteNpc
		if outCastID ~= 0 then
			local data = g_i3k_game_context:getOutCastInfo()
			taskId = data.curTaskID
			local value = data.curTaskValue
			petReward = data.curTaskReward
			local isFirstTask = false
			if taskId == 0 then
				taskId = 1
				petReward = 1
				isFirstTask = true
			end
			if petReward == 1 and not isFirstTask then
				local cfg = i3k_db_out_cast_task[taskId]
				if cfg.afterTaskID ~= 0 then
					taskId = cfg.afterTaskID
				end
				value = 0
			end
			local cfg = i3k_db_out_cast_task[taskId]
			local taskType = cfg.taskType
			local petArg1 = cfg.arg1
			local petArg2 = cfg.arg2
			petNpcId = cfg.npcID
			petCompleteNpc = cfg.completeNpcID
			is_finish = self:IsTaskFinished(taskType,petArg1,petArg2,value)
			petTaskDesc = g_i3k_db.i3k_db_get_task_desc(taskType, petArg1, petArg2, 0, false, nil)
		end
		if not self:getIsCompleteOutCastTaskFromID(outCastID) then
			if petReward == 0 and is_finish and id == petCompleteNpc then
				state = false
				g_i3k_game_context:FinishOutCastDialogue(outCastID,taskId,g_i3k_game_context:isBagEnoughOutTaskAward(outCastID,taskId),g_i3k_game_context:getOutCastTaskAward(taskId))
			elseif petReward == 1 and not is_finish and id == petNpcId then
				state = false
				g_i3k_game_context:GetOutCastTaskDialogue(outCastID,taskId,g_i3k_game_context:getOutCastTaskAward(taskId),petTaskDesc)
			end
		end
	elseif isDragonTask then
		self:OpenDragonTaskFinishDialogue(dragonId)
	--[[elseif adventure and adventure.id and adventure.id ~= 0 and i3k_db_adventure.tasks[adventure.id].type == g_TASK_NEW_NPC_DIALOGUE and i3k_db_adventure.tasks[adventure.id].arg1 == id then
		self:OpenAdventureFinishDialogue(i3k_db_adventure.tasks[adventure.id])--]]
	elseif isChessTask then
		if chessFinish then
			self:OpenFinishTaskDialogue(chessCfg, TASK_CATEGORY_CHESS)
		else
			self:OpenNewNpcDialogue(chessCfg, TASK_CATEGORY_CHESS, chess.curTaskID)
		end
		--self:finishChessTaskDialogue()
	elseif isJubileeTask then
		if jubileeFinish then
			self:OpenFinishTaskDialogue(jubileeTaskCfg, TASK_CATEGORY_JUBILEE)
		else
			self:OpenNewNpcDialogue(jubileeTaskCfg, TASK_CATEGORY_JUBILEE, jubilee.id)
		end
	elseif world._mapType == g_BIOGIAPHY_CAREER then
	end
 	if state == true then
		self:OpenNormalNpcDialogue(id, instanceID)
	end
end

function i3k_game_context:OpenNormalNpcDialogue(id, instanceID)
	local funcId = i3k_db_npc[id].FunctionID
	if g_i3k_logic:IsRootUIBattle() then
		for i,e in ipairs(funcId) do
			if e == TASK_FUNCTION_MESSAGEBOARD then
				g_i3k_logic:OpenBillBoardUI()
				return
			elseif e == TASK_FUNCTION_SUBLINE_TASK then
				g_i3k_logic:OpenFieldSublineTaskUI(id)
				return
			end
		end
		if g_i3k_db.i3k_db_get_is_demonhole_key_npc(id) then
			g_i3k_logic:OpenDemonHoleDialogueUI(id)
		elseif g_i3k_db.i3k_db_get_is_change_gender_npc(id) then
			g_i3k_ui_mgr:OpenUI(eUIID_DegenerationNpc)
			g_i3k_ui_mgr:RefreshUI(eUIID_DegenerationNpc, id)
		elseif g_i3k_db.i3k_db_get_is_dragon_hole_npc(id) then
			g_i3k_ui_mgr:OpenUI(eUIID_DragonHoleDialogue)
			g_i3k_ui_mgr:RefreshUI(eUIID_DragonHoleDialogue, id)
		else
			local count = 0
			for i, e in ipairs(funcId) do
				if e ~= 0 then
					count = count + 1
				end
			end
			if table.indexof(funcId, TASK_FUNCTION_EQUIP_TRANS) then
				count = count + table.getn(i3k_db_npc[id].transFormId) - 1
			end
			g_i3k_logic:OpenNpcDialogue(id,count, instanceID)
		end
	end
end

function i3k_game_context:LogTaskValue(taskCat, value, taskID, groupID)
	local LogTaskValueFunc = {
		[TASK_CATEGORY_MAIN] = function()
			self:setMainTaskIdAndValue(taskID, value)
		end,

		[TASK_CATEGORY_SUBLINE] = function()
			self:setSubTaskOneGroupData(groupID, taskID, value)
		end,
		[TASK_CATEGORY_WEAPON] = function()
			self:setWeaponValueByIndex(1,value)
		end,
		[TASK_CATEGORY_MRG] = function()
			self:AddMarriageTaskValue(value)
		end,
		[TASK_CATEGORY_MRG_LOOP] = function()
			self:AddMarriageTaskValue(value)
		end,
		[TASK_CATEGORY_EPIC] = function()
			self:addCurrEpicTaskValue(value)
		end,
		[TASK_CATEGORY_DRAGON_HOLE] = function()
			self:ChangeAcceptDragonTaskValue(taskID, value)
		end,
		[TASK_CATEGORY_ADVENTURE] = function()
			self:setAdventureTask(value)
		end,
		[TASK_CATEGORY_FCBS] = function()
			self._factionBusinessTask.value = value
		end,
		[TASK_CATEGORY_CHESS] = function()
			self:setChessTaskValue(value)
		end,
		[TASK_CATEGORY_POWER_REP] = function()
			self:setPowerRepTask(taskID, value)
		end,
		[TASK_CATEGORY_FESTIVAL] = function()
			self:setFestivalTaskValue(groupID, value)
		end,
		[TASK_CATEGORY_JUBILEE] = function()
			self:SetJubileeStep2TaskValue(value)
		end,
		[TASK_CATEGORY_SWORDSMAN] = function ()
			self:setSwordsmanCircleTaskValue(value)
		end,
		[TASK_CATEGORY_GLOBALWORLD] = function ()
			self:SetGlobalWorldTaskValue(taskID, value)
		end,
		[TASK_CATEGORY_BIOGRAPHY] = function()
			self:setBiographyTaskValue(value)
		end,
	}
	LogTaskValueFunc[taskCat](taskID, value, groupID)
end

local ConsensusTask = {
[g_TASK_REACH_LEVEL] 	= g_TASK_REACH_LEVEL,
[g_TASK_POWER_COUNT] 	= g_TASK_POWER_COUNT,
[g_TASK_TRANSFER] 	 	= g_TASK_TRANSFER,
[g_TASK_TOATL_DAYS]  	= g_TASK_TOATL_DAYS,
[g_TASK_GET_PET_COUNT]  = g_TASK_GET_PET_COUNT,
[g_TASK_PERSONAL_ARENA] = g_TASK_PERSONAL_ARENA,
[g_TASK_CLEARANCE_ACTIVITYPAD] = g_TASK_CLEARANCE_ACTIVITYPAD,
}

function i3k_game_context:updateCommonTaskValue(category, taskType, target, targetCount, targetValue, targetParam, mineIndex)
	local isTarget = math.abs(targetParam or 0) == target
	local is_finish = self:IsTaskFinished(taskType, target, targetCount, targetValue)
	local shouldUpdateUI = false
	if ConsensusTask[taskType] and is_finish then
		if taskType == g_TASK_REACH_LEVEL and category == TASK_CATEGORY_MAIN then
			self:SetMainTaskIndex(1)
		end
		shouldUpdateUI = true
	elseif isTarget and not is_finish then
		if taskType ~= g_TASK_USE_ITEM then
			if taskType == g_TASK_SCENE_MINE or taskType == g_TASK_DELIVER_LETTERS then
				local value = g_i3k_db.i3k_db_convert_index_to_value(mineIndex)
				targetValue = targetValue + value
			else
				targetValue = targetValue + 1
			end
			is_finish = self:IsTaskFinished(taskType, target, targetCount, targetValue)
		end
		if (category == TASK_CATEGORY_BIOGRAPHY and i3k_game_get_map_type() == g_BIOGIAPHY_CAREER) or (category ~= TASK_CATEGORY_BIOGRAPHY and i3k_game_get_map_type() == g_FIELD) then
			if taskType == g_TASK_USE_ITEM then
				if not self:IsBagEnough({[target] = targetCount}) then
					return g_i3k_ui_mgr:PopupTipMessage("背包已满无法完成任务")
				end
				local itemCount = self:GetCommonItemCanUseCount(target)
				is_finish = itemCount >= targetCount
			end
			if is_finish then
				if taskType ~= g_TASK_USE_ITEM then
				self:SetAutoFight(false)
				end
				if taskType == g_TASK_KILL and self:GetTaskMonster(category) then
					self:ResetTaskMonster(category)
				end
			end
			shouldUpdateUI = true
		end
	end
	return isTarget, is_finish, targetValue, shouldUpdateUI
end

function i3k_game_context:UpdateMainTaskValue(task_type, target)
	local mId, value, state = self:getMainTaskIdAndVlaue()
	if state == 0 then
		return
	end

	local cfg = g_i3k_db.i3k_db_get_main_task_cfg(mId)

	if cfg.type ~= task_type then
		return
	end
	local is_true, is_finish, targetValue, shouldUpdateUI
			= self:updateCommonTaskValue(TASK_CATEGORY_MAIN, task_type, cfg.arg1, cfg.arg2, value, target)

	if targetValue > value then
		self:LogTaskValue(TASK_CATEGORY_MAIN, targetValue, mId)
	end

	if shouldUpdateUI then
		if is_finish and (taskType == g_TASK_SHAPESHIFTING or taskType == g_TASK_KILL or taskType == g_TASK_CONVOY) then
			self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.doing)
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateMainTask", mId, targetValue, is_finish)
	end
	return is_true, is_finish
end

function i3k_game_context:LogMrgTask(value)
	local data = g_i3k_game_context:GetMarriageTaskData()
	local cfg = g_i3k_db.i3k_db_marry_task(data.id, data.groupID)

	self:AddMarriageTaskValue(value)
	local isfinish = g_i3k_game_context:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, value)
	if isfinish and i3k_game_get_map_type() == g_FIELD then
		g_i3k_game_context:SetAutoFight(false)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateMrgTask",data.id, data.groupID, value, isfinish)
end

function i3k_game_context:UpdateMrgTaskValue(task_type, target)
	local data = self:GetMarriageTaskData()
	if data.state == 0 or data.open == 0 or data.id == 0 then
		return
	end

	local cfg = g_i3k_db.i3k_db_marry_task(data.id,data.groupID)

	if cfg.type == task_type and math.abs(target) == cfg.arg1 then
		if task_type == g_TASK_USE_ITEM then
			local is_finish = g_i3k_game_context:GetCommonItemCanUseCount(cfg.arg1) >= cfg.arg2
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateMrgTask",data.id, data.groupID, value, is_finish)
		end
	end
end

function i3k_game_context:UpdateEpicTaskValue(task_type, target)
	local data = self:getCurrEpicTaskData()
	if not data or not data.id or data.state == 0 or data.id == 0 then
		return
	end

	local cfg = g_i3k_db.i3k_db_epic_task_cfg(data.seriesID, data.groupID, data.id)

	if cfg.type ~= task_type then
		return
	end
	local is_true, is_finish, targetValue, shouldUpdateUI
			= self:updateCommonTaskValue(TASK_CATEGORY_EPIC, task_type, cfg.arg1, cfg.arg2, data.value, target)

	if targetValue > data.value then
		self:LogTaskValue(TASK_CATEGORY_EPIC, targetValue)
	end

	if shouldUpdateUI then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateEpicTask", is_finish)
	end
	return is_true, is_finish
end

function i3k_game_context:UpdateAdventureTaskValue(task_type, target)
	local data = self:getAdventureTask()
	if not data or not data.id or data.state == 0 or data.id == 0 then
		return
	end

	local cfg = i3k_db_adventure.tasks[data.id]

	if cfg.type ~= task_type then
		return
	end
	local is_true, is_finish, targetValue, shouldUpdateUI
			= self:updateCommonTaskValue(TASK_CATEGORY_ADVENTURE, task_type, cfg.arg1, cfg.arg2, data.value, target)

	if targetValue > data.value then
		self:LogTaskValue(TASK_CATEGORY_ADVENTURE, targetValue)
	end

	if shouldUpdateUI then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateAdventureTask", is_finish)
	end
	return is_true, is_finish
end

function i3k_game_context:UpdateFCBSTaskValue(task_type, target)
	local data = self:getFactionBusinessTask()
	if data.id == 0 then
		return
	end

	local cfg = i3k_db_factionBusiness_task[data.id]

	if cfg.type ~= task_type then
		return
	end
	local is_true, is_finish, targetValue, shouldUpdateUI
			= self:updateCommonTaskValue(TASK_CATEGORY_FCBS, task_type, cfg.arg1, cfg.arg2, data.value, target)

	if targetValue > data.value then
		self:LogTaskValue(TASK_CATEGORY_FCBS, targetValue)
	end

	if shouldUpdateUI then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateFCBSTask", is_finish)
	end
	return is_true, is_finish
end

--更新支线任务数据
function i3k_game_context:UpdateSubLineTaskValue(task_type, target)
	local alltaskData = g_i3k_game_context:getSubLineTask()

	local is_true, is_finish, targetValue, shouldUpdateUI, sub = false, false, 0, false, nil
	for k,v in pairs(alltaskData) do
		local cfg = g_i3k_db.i3k_db_get_subline_task_cfg(k,v.id)

		if cfg and v.state >= 1 and cfg.type == task_type then
			if cfg.arg1 == target then sub = cfg end
			--is_true = math.abs(target) == cfg.arg1
			--TODO刷新界面
			--value = v.value  --unknown global variable
			--is_finish = self:IsTaskFinished(task_type, cfg.arg1, cfg.arg2, mVlaue)
			is_true, is_finish, targetValue, shouldUpdateUI
					-- = self:updateCommonTaskValue(k*1000, task_type, cfg.arg1, cfg.arg2, v.value, target)
					= self:updateCommonTaskValue(g_i3k_db.i3k_db_get_subline_task_hash_id(k), task_type, cfg.arg1, cfg.arg2, v.value, target)

			if targetValue > v.value then
				self:LogTaskValue(TASK_CATEGORY_SUBLINE, targetValue, v.id, k)
			end

			if shouldUpdateUI then
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateSublineTask", k, v.id, is_finish)
				break
			end
		end
	end
	return is_true, is_finish, sub
end

function i3k_game_context:UpdateWeaponTaskValue(task_type, target)
	local dayLoopCount = self:getWeaponDayLoopCount()
	if not dayLoopCount then
		return
	end
	if dayLoopCount >= i3k_db_common.weapontask.Ctasktimes then
		return
	end

	local id,loop = self:getWeaponTaskIdAndLoopType()
	local value1,value2 = self:getWeaponTaskArgsCountAndArgs()
	local is_true2, is_ok2 = false, false

	local cfg = g_i3k_db.i3k_db_get_weapon_task_cfg(id,loop)

	local is_finish = false
	local is_true = target == cfg.arg11
	if cfg.type1 == task_type then
		--TODO刷新界面
		is_finish = self:IsTaskFinished(task_type, cfg.arg11, cfg.arg12, value1)

		if ConsensusTask[task_type] and is_finish then
			local args = {type1 = cfg.type1, isOk1 = is_finish, type2 = cfg.type2, isOk2 = is_ok2}
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateWeaponTask",loop, id, value1, value2, dayLoopCount, args)
		elseif is_true and not is_finish then
			value1 = value1 + 1
			self:LogTaskValue(TASK_CATEGORY_WEAPON, value1)
			is_finish,_ = self:IsTaskFinished(task_type, cfg.arg11, cfg.arg12, value1)

			if i3k_game_get_map_type() == g_FIELD then
				if is_finish then
					self:SetAutoFight(false)
				end
				local args = {type1 = cfg.type1, isOk1 = is_finish, type2 = cfg.type2, isOk2 = is_ok2}
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateWeaponTask",loop, id, value1, value2, dayLoopCount, args)
			end
		end
	end

	return is_true, false, is_finish, false
end

function i3k_game_context:UpdateFactionTaskValue(task_type,count)
	local roleID = self:getFactionTaskRoleId()
	if not roleID then
		return
	end
	local taskID,value,receiveTime,roleName = self:getFactionTaskIdValueTime()
	local faction_task_cfg = g_i3k_db.i3k_db_get_faction_task_cfg(taskID)
	local taskType = faction_task_cfg.type
	local arg1 = faction_task_cfg.arg1
	local arg2 = faction_task_cfg.arg2

	local sid = self:getFactionTaskGuid()
	local my_id = self:GetRoleId()
	local is_finish, _ = self:IsTaskFinished(taskType,arg1,arg2,value)
	if is_finish then
		return
	end
	local is_true = arg1 == count
	if taskType == task_type and is_true then
		value = value + 1
		self:AddFactionCurrTaskValue(value)
		is_finish = self:IsTaskFinished(taskType,arg1,arg2,value)
		if i3k_game_get_map_type() == g_FIELD then
			if is_finish then
				g_i3k_game_context:RefreshMissionEffect()
				self:SetAutoFight(false)
			end
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateFactionTask",sid, taskID, value,roleID,receiveTime,my_id, is_finish)
		end
	end
	return is_true,is_finish
end

function i3k_game_context:UpdatePetTaskValue(task_type,count)
	local is_have = 0
	local is_ok = 0
	local isShow = true
	local petTask = self:GetPetTask()
	for k,v in pairs(petTask) do
		local id = v.id
		if id then
			local value = v.value
			local pet_task_cfg = g_i3k_db.i3k_db_get_pet_task_cfg(id)
			if pet_task_cfg then
				local taskType = pet_task_cfg.type
				local arg1 = pet_task_cfg.arg1
				local arg2 = pet_task_cfg.arg2
				local is_finish = self:IsTaskFinished(taskType,arg1,arg2,value)
				if self.PetTasktb[k] and self.PetTasktb[k].id == id then
					isShow = false
					if not is_finish then
						self.PetTasktb[k] = nil
					end
				end
				if taskType == task_type then
					local personname = g_i3k_db.i3k_db_get_pet_cfg(k).name
					local task_name = pet_task_cfg.name
					local isOpen = g_i3k_db.i3k_db_get_pet_cfg(k).isOpen
					if task_type == g_TASK_GET_TO_FUBEN then
						if arg1 == count then
							petTask[k].value = petTask[k].value +   1
						end
					elseif task_type == g_TASK_COLLECT then
						if arg1 == count then
							is_have = is_have + 1
							petTask[k].value = petTask[k].value + 1
							if petTask[k].value >= arg2 then
								petTask[k].value = arg2
								is_ok = is_ok + 1
								if isOpen ~= 0 and isShow then
									g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(144,personname,task_name))
									self.PetTasktb[k] = {}
									self.PetTasktb[k].id = id
								end
							end
						end
					elseif task_type == g_TASK_KILL then
						if arg1 == count then
							is_have = is_have + 1
							petTask[k].value = petTask[k].value + 1
							if petTask[k].value >= arg2 then
								petTask[k].value = arg2
								is_ok = is_ok + 1
								if isOpen ~= 0 and isShow then
									g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(144,personname,task_name))
									self.PetTasktb[k] = {}
									self.PetTasktb[k].id = id
								end
							end
						end
					else
						petTask[k].value = count
					end
					self:SetPetTask(petTask)
				end
			end

		end
	end
	return is_have,is_ok
end

function i3k_game_context:UpdateLifeTaskValue(task_type, value)
	local petID = self:GetLifeTaskRecorkPetID()
	if self:getIsCompletePetLifeTaskFromID(petID) then
		return
	end
	local isTrue = false
	local is_ok = false
	if petID ~= 0 then
		local id, valueCount, reward = self:getPetLifeTskIdAndValueById(petID)
		if reward == 1 then
			return
		end
		local cfg = i3k_db_from_task[petID][id]
		if not cfg then
			return
		end
		local completeNpcID = cfg.completeNpcID
		local nocompleteNpcID = cfg.npcID
		local taskType = cfg.taskType
		local arg1 = cfg.arg1
		local arg2 = cfg.arg2
		local isfinish = self:IsTaskFinished(taskType,arg1,arg2,value)
		if task_type == taskType then
			if taskType == g_TASK_COLLECT then
				if arg1 == value then
					isTrue = true
					if valueCount+1 >= arg2 then
						is_ok = true
						self:setOnePetLifeTask(petID,id,arg2, 0)
					else
						self:setOnePetLifeTask(petID,id,valueCount+1, 0)
					end
				end
			elseif taskType == g_TASK_KILL then
				if arg1 == value then
					if valueCount+1 >= arg2 then
						is_ok = true
						self:setOnePetLifeTask(petID,id,arg2, 0)
					else
						self:setOnePetLifeTask(petID,id,valueCount+1, 0)
					end
				end
			end
			if is_ok then
				self:SetAutoFight(false)
			end
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_ShenshiBattle,"onShowData",petID, true)

		end
	end
	return isTrue, is_ok
end

function i3k_game_context:UpdateOutCastTaskValue(task_type, value)
	local info = self:getOutCastInfo()
	local petID = info.curUnlockID
	if self:getIsCompleteOutCastTaskFromID(petID) then
		return
	end
	local isTrue = false
	local is_ok = false
	if petID ~= 0 then
		local id, valueCount, reward = self:getOutCastTskIdAndValueById()
		if reward == 1 then
			return
		end
		local cfg = i3k_db_out_cast_task[id]
		if not cfg then
			return
		end
		local completeNpcID = cfg.completeNpcID
		local nocompleteNpcID = cfg.npcID
		local taskType = cfg.taskType
		local arg1 = cfg.arg1
		local arg2 = cfg.arg2
		local isfinish = self:IsTaskFinished(taskType,arg1,arg2,value)
		if task_type == taskType then
			if taskType == g_TASK_COLLECT then
				if arg1 == value then
					isTrue = true
					if valueCount+1 >= arg2 then
						is_ok = true
						info.curTaskValue = arg2
						info.curTaskReward = 0
					else
						info.curTaskValue = valueCount+1
						info.curTaskReward = 0
					end
				end
			elseif taskType == g_TASK_KILL then
				if arg1 == value then
					if valueCount+1 >= arg2 then
						is_ok = true
						info.curTaskValue = arg2
						info.curTaskReward = 0
					else
						info.curTaskValue = valueCount+1
						info.curTaskReward = 0
					end
				end
			end
			if is_ok then
				self:SetAutoFight(false)
			end
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_OutCastBattle,"onShowData",petID, true)

		end
	end
	return isTrue, is_ok
end

function i3k_game_context:UpdateSecretareaTaskValue(task_type,value)
	local mId,mVlaue = self:getSecretareaTaskIdAndVlaue()
	--i3k_log("UpdateSecretareaTaskValue is 10587 : ",mId)
	if not mId or mId==0 then
		return
	end

	local secretarea_task_cfg = i3k_db_secretarea_task[mId]--g_i3k_db.i3k_db_get_main_task_cfg(mId)
	local taskType = secretarea_task_cfg.type
	local arg1 = secretarea_task_cfg.arg1
	local arg2 = secretarea_task_cfg.arg2
	local is_true = arg1 == value

	local is_finish = self:IsTaskFinished(taskType,arg1,arg2,mVlaue)
	if taskType == task_type and not is_finish and is_true then
		if task_type == g_TASK_KILL then--杀怪
			if arg1 == value then
				self:addSecretareaTaskValue(mId,1)
				if mVlaue + 1 >= arg2 then
					self:setSecretareaTaskIdAndValue(mId,arg2)
				end
			end
		end
		--TODO刷新界面
		local mId,mVlaue = self:getSecretareaTaskIdAndVlaue()
		local finish = self:IsTaskFinished(taskType,arg1,arg2,mVlaue)
		--i3k_log("dawan shauxin shuju ",is_finish,mId,mVlaue)
		if finish then
			self:SetAutoFight(false)--关闭自动打怪
			self:setSecretareaTaskId(mId, mVlaue, 0)
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(539))
		end

		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateSecretareaTask",mId,mVlaue,finish)---
	end

	return is_true,finish
end

function i3k_game_context:SetTaskDataByTaskType(value, task_type, mineIndex)
	self:updateGlobalWorldTaskValue(task_type, value)
	self:updateFSRTaskValue(task_type, value)
	if i3k_game_get_map_type() == g_FIELD then
		self:UpdateMainTaskValue(task_type,value, mineIndex)
		self:UpdateWeaponTaskValue(task_type,value, mineIndex)
		self:UpdateSubLineTaskValue(task_type,value, mineIndex)
		self:UpdateFactionTaskValue(task_type,value, mineIndex)
		self:UpdateEpicTaskValue(task_type, value, mineIndex)
		self:UpdateAdventureTaskValue(task_type, value, mineIndex)
		self:UpdateDragonHoleValue(task_type, value, mineIndex)
		self:UpdateFCBSTaskValue(task_type, value, mineIndex)
		self:updateChessTaskValue(task_type, value, mineIndex)
		self:updatePowerRepTaskValue(task_type, value, mineIndex)
		self:updateNewFestivalTaskValue(task_type, value, mineIndex)
		self:updateFestivalTaskValue(task_type, value, mineIndex)
		self:updateJubileeTaskValue(task_type, value, mineIndex)
		self:updateSwordsmanTaskValue(task_type, value, mineIndex)
	elseif task_type == g_TASK_ANY_MOMENT_DUNGEON then
		local mainId = g_i3k_game_context:getMainTaskIdAndVlaue()
		local mainTaskCfg = g_i3k_db.i3k_db_get_main_task_cfg(mainId)
		if mainTaskCfg.type == g_TASK_ANY_MOMENT_DUNGEON and mainTaskCfg.arg1 == value then
			g_i3k_game_context:setMainTaskIdAndValue(mainId, value)
			local isTrue, isFinished = g_i3k_game_context:UpdateMainTaskValue(g_TASK_ANY_MOMENT_DUNGEON, value)
			if isTrue and isFinished then
				g_i3k_game_context:setOpenMainTaskFinishDialogue({taskType = TASK_CATEGORY_MAIN, taskId = mainId, groupId = 0})
			end
		end
		local isTrue, isFinished, task = g_i3k_game_context:UpdateSubLineTaskValue(g_TASK_ANY_MOMENT_DUNGEON, value)
			if task then
			g_i3k_game_context:setOpenMainTaskFinishDialogue({taskType = TASK_CATEGORY_SUBLINE, taskId = task.id, groupId = task.taskgroupid})
		end
	end

	self:UpdatePetTaskValue(task_type,value)
	self:UpdateLifeTaskValue(task_type, value)
	if i3k_game_get_map_type() == g_OUT_CAST then
		self:UpdateOutCastTaskValue(task_type, value)
	end
	---秘境
	self:UpdateSecretareaTaskValue(task_type,value)

	if i3k_game_get_map_type() == g_PET_ACTIVITY_DUNGEON then
		self:updatePetDungeonTaskInfo(task_type, value)
	end
	if i3k_game_get_map_type() == g_BIOGIAPHY_CAREER then
		self:updateBiographyTaskValue(task_type, value, mineIndex)
	end
end

function i3k_game_context:SetTaskResponse(is_ok,task_type,petId)
	if not g_i3k_logic:IsRootUIBattle() then
		return
	end
	if is_ok then
		if task_type == TASK_CATEGORY_MAIN or task_type == i3k_get_MrgTaskCategory() or task_type == TASK_CATEGORY_EPIC
			or task_type == TASK_CATEGORY_ADVENTURE then
			self:updateMainTaskResponse(task_type)
		elseif task_type == TASK_CATEGORY_SECT then
			self:updateFactionTaskResponse()
		elseif task_type == TASK_CATEGORY_WEAPON then
			self:updateWeaponTaskResponse()
		elseif task_type == TASK_CATEGORY_PET then
			self:updatePetTaskResponse(petId)
		elseif task_type == TASK_CATEGORY_OUT_CAST then
			self:updateOutCastTaskResponse(petId)
		elseif task_type == TASK_CATEGORY_SUBLINE then
			self:updateSubLineTaskResponse(petId)
		elseif task_type == TASK_CATEGORY_LIFE then
			self:updateLifeTaskResponse(petId)
		elseif task_type == TASK_CATEGORY_ESCORT then
			self:updateEscortResponse()
		elseif task_type == TASK_CATEGORY_DRAGON_HOLE then
			self:updateDragonHoleResponse(petId)
		elseif task_type == TASK_CATEGORY_FCBS then
			self:updateFCBSResponse()
		elseif task_type == TASK_CATEGORY_CHESS then
			self:updateChessTaskResponse()
		elseif task_type == TASK_CATEGORY_POWER_REP then
			self:updatePowerRepTaskResponse(petId)
		elseif task_type == TASK_CATEGORY_FESTIVAL then
			self:updateFestivalTaskResponce(petId)
		elseif task_type == TASK_CATEGORY_JUBILEE then
			self:updateJubileeTaskResponce()
		elseif task_type == TASK_CATEGORY_RING then
			self:FSResponce()
		elseif task_type == TASK_CATEGORY_DETECTIVE then
			self:updateDetectiveTaskResponce()
		elseif task_type == TASK_CATEGORY_SWORDSMAN then
			self:updateSwordsmanTaskResponse()
		elseif task_type == TASK_CATEGORY_GLOBALWORLD then --赏金任务
			self:updateGlobalWorldTaskResponce(petId)
		elseif task_type == TASK_CATEGORY_BIOGRAPHY then
			self:updateBiographyTaskResponse()
		elseif task_type == TASK_CATEGORY_SPYSTORY then
			self:updateSpyStoryTaskResponse()
		elseif task_type == TASK_CATEGORY_NEW_FESTIVAL then
			self:updateNewFestivalTaskResponse(petId)
		end
	end
end
function i3k_game_context:FSResponce()
	local info = g_i3k_game_context:getFSRTaskInfo()
	local cfg = i3k_db_ring_mission[info.id]
	if cfg.type == g_TASK_ANY_MOMENT_DUNGEON then
		g_i3k_game_context:setIsNeedLoading(i3k_db_at_any_moment[cfg.arg1].effects)
		if g_i3k_game_context:IsInRoom() then
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(142))
			return
		end
		local func = function ()
		i3k_sbean.anywhere_map_enter(TASK_CATEGORY_RING, 0, info.id)
		end
		g_i3k_game_context:CheckMulHorse(func)
	else
		self:SetAutoFight(true)
	end
end

function i3k_game_context:TaskCollect(mineId, pos)
	local pos = pos or g_i3k_db.i3k_db_get_res_pos(mineId);
	local hero = i3k_game_get_player_hero()
	if hero then
		local newpos = hero._curPos
		newpos = i3k_vec3_div2(newpos,100)
		local angle = i3k_vec3_angle2(i3k_vec3(pos.x-newpos.x, newpos.y, pos.z-newpos.z), i3k_vec3(1, 0, 0));
		hero:SetFaceDir(0, angle, 0)
	end

	local DigMineDistance = 3
	if i3k_db_common["digmine"] and i3k_db_common["digmine"].DigMineDistance then
		DigMineDistance = i3k_db_common["digmine"].DigMineDistance
	end
	local logic = i3k_game_get_logic();
	local world = logic:GetWorld()
	local hero = i3k_game_get_player_hero()
	for k,v in pairs(world._ResourcePoints) do
		if v._gid == mineId then
			if hero then
				local dist = i3k_vec3_sub1(v._curPos, hero._curPos);
				if DigMineDistance > i3k_vec3_len(dist) and hero:CanUseSkill() then
					logic:SwitchSelectEntity(v);
					break
				end
			end
		end
	end
end

function i3k_game_context:updateEscortResponse()
	local point = g_i3k_game_context:GetFactionEscortPathId()
	local end_npcid = i3k_db_escort_path[point].end_npc
	local id = g_i3k_db.i3k_db_get_npc_id_by_npc_point(end_npcid)
	local funcId = i3k_db_npc[id].FunctionID
	local count = 0
	for i,e in ipairs(funcId) do
		if e ~= 0 then
			count = count+1
		end
	end
	g_i3k_ui_mgr:OpenUI(eUIID_NpcDialogue)
	g_i3k_ui_mgr:RefreshUI(eUIID_NpcDialogue,id,count)
end

function i3k_game_context:updatePetTaskResponse(petId)
	local taskID,value = self:getPetTskIdAndValueById(petId)
	local pet_task_cfg = g_i3k_db.i3k_db_get_pet_task_cfg(taskID)
	if pet_task_cfg then
		local arg1 = pet_task_cfg.arg1
		local arg2 = pet_task_cfg.arg2
		local taskType = pet_task_cfg.type

		local is_ok = self:IsTaskFinished(taskType,arg1,arg2,value)
		if taskType == g_TASK_COLLECT and not is_ok then
			self:TaskCollect(arg1)
		end
	end
end

function i3k_game_context:updateOutCastTaskResponse(id)
	local taskId, value, reward = g_i3k_game_context:getOutCastTskIdAndValueById()
	local curTaskID = taskId
	if taskId == 0 then
		local outCastcfg = i3k_db_out_cast[id]
		taskId = outCastcfg.taskID
	end
	if reward == 1 then -- 上个任务已完成
		local cfg = i3k_db_out_cast_task[taskId + 1]
		if cfg and cfg.outCastID == id then
			taskId = taskId + 1
		end
		value = 0
	end
	local cfg = i3k_db_out_cast_task[taskId]
	local taskType = cfg.taskType
	local arg1 = cfg.arg1
	local arg2 = cfg.arg2
	local is_finish = self:IsTaskFinished(taskType,arg1,arg2,value)
	local npcID = cfg.completeNpcID
	local getTalkNpcID = cfg.npcID
	if (reward == 1 or curTaskID == 0) and (getTalkNpcID ~= 0) then
		local taskDesc = g_i3k_db.i3k_db_get_task_desc(taskType, arg1, arg2, value, is_finish, nil)
		g_i3k_game_context:GetOutCastTaskDialogue(id,taskId,g_i3k_game_context:getOutCastTaskAward(taskId),taskDesc)
		return;
	end
	if taskType == g_TASK_COLLECT and not is_finish then
		self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.doing)
		self:TaskCollect(arg1)

	elseif taskType == g_TASK_USE_ITEM_AT_POINT and not is_finish then
	--	if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip) -- new battle
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip,arg1, TASK_CATEGORY_OUT_CAST)
	--	end
	elseif taskType == g_TASK_USE_ITEM  and is_finish then
		self:taskSubItem(TASK_CATEGORY_OUT_CAST,arg1,arg2)
	elseif taskType == g_TASK_TRANSFER  then
		local now_mapID =  g_i3k_game_context:GetWorldMapID()
		local targetMaps = g_i3k_db.i3k_db_get_all_npcs_map_id_by_funcId(TASK_FUNCTION_TRANSFER)
		local mapID, pos = g_i3k_db.i3k_db_find_nearest_map(now_mapID,targetMaps)
		npcID = g_i3k_db.i3k_db_get_npc_id_by_pos(pos)
		g_i3k_logic:SelectNPCByID(npcID)
		if is_finish then
			g_i3k_game_context:FinishOutCastDialogue(id,taskId,g_i3k_game_context:isBagEnoughOutTaskAward(id,taskId),g_i3k_game_context:getOutCastTaskAward(id,taskId))
		end
	elseif taskType == g_TASK_NEW_NPC_DIALOGUE then
		if is_finish then
			g_i3k_game_context:FinishOutCastDialogue(id,taskId,g_i3k_game_context:isBagEnoughOutTaskAward(id,taskId),g_i3k_game_context:getOutCastTaskAward(id,taskId))
		else
			self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.doing)
			self:OpenNewNpcDialogue(cfg, TASK_CATEGORY_OUT_CAST, taskId, id)
		end
	else
		if is_finish then
			g_i3k_game_context:FinishOutCastDialogue(id,taskId,g_i3k_game_context:isBagEnoughOutTaskAward(id,taskId),g_i3k_game_context:getOutCastTaskAward(id,taskId))
		end
	end
end

function i3k_game_context:updateWeaponTaskResponse()
	local id,taskCat = self:getWeaponTaskIdAndLoopType()
	local value1,value2 = self:getWeaponTaskArgsCountAndArgs()
	local dayLoopCount = self:getWeaponDayLoopCount()
	local weapon_task_cfg = g_i3k_db.i3k_db_get_weapon_task_cfg(id,taskCat)
	local taskType1 = weapon_task_cfg.type1
	local taskType2 = weapon_task_cfg.type2
	local arg11 = weapon_task_cfg.arg11
	local arg12 = weapon_task_cfg.arg12
	local arg21 = weapon_task_cfg.arg21
	local arg22 = weapon_task_cfg.arg22
	local is_ok1 = g_i3k_game_context:IsTaskFinished(taskType1,arg11,arg12,value1)
	local is_ok2 = g_i3k_game_context:IsTaskFinished(taskType2,arg21,arg22,value2)
	if taskType1 == g_TASK_COLLECT and not is_ok1 then
		self:TaskCollect(arg11)
	end
	if taskType2 == g_TASK_COLLECT and not is_ok2 then
		self:TaskCollect(arg21)
	end

end

function i3k_game_context:updateFactionTaskResponse()
	local roleID = self:getFactionTaskRoleId()
	local guid = self:getFactionTaskGuid()
	local taskID,value,receiveTime = self:getFactionTaskIdValueTime()
	local faction_task_cfg = g_i3k_db.i3k_db_get_faction_task_cfg(taskID)
	if not faction_task_cfg then
		return
	end
	local arg1 = faction_task_cfg.arg1
	local mark = faction_task_cfg.arg2
	local arg3 = faction_task_cfg.arg3
	local arg4 = faction_task_cfg.arg4
	local arg5 = faction_task_cfg.arg5
	local taskType = faction_task_cfg.type
	local NPCID = faction_task_cfg.finishTaskNpcID
	local desc = faction_task_cfg.finishTaskDialogue1
	local tmp_desc = faction_task_cfg.finishTaskDialogue2
	local is_ok = self:IsTaskFinished(taskType,arg1,mark,value)
	if taskType == g_TASK_USE_ITEM_AT_POINT then
		if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip) -- new battle
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip,arg1)
		end

	elseif taskType == g_TASK_COLLECT and not is_ok then
		self:TaskCollect(arg1)

	elseif taskType == g_TASK_USE_ITEM and not is_ok then
		self:taskSubItem(TASK_CATEGORY_SECT,arg1,mark)
	elseif taskType == g_TASK_NEW_NPC_DIALOGUE then
		self:OpenFactionTaskFinishDialogue(faction_task_cfg)
	elseif taskType == g_TASK_NPC_DIALOGUE then
		self:OpenFactionTaskFinishDialogue(faction_task_cfg)

	else
		if is_ok then
			self:OpenFactionTaskFinishDialogue(faction_task_cfg)
		end
	end


end

function i3k_game_context:updateFCBSResponse()
	local data = self:getFactionBusinessTask()
	local cfg = i3k_db_factionBusiness_task[data.id]
	if cfg then
		local taskType = cfg.type
		if taskType == g_TASK_COLLECT then
			self:TaskCollect(cfg.arg1)
		elseif taskType == g_TASK_USE_ITEM then
			self:taskSubItem(TASK_CATEGORY_FCBS, cfg.arg1, cfg.arg2)
		elseif taskType == g_TASK_NEW_NPC_DIALOGUE then
			self:OpenFCBSFinishDialogue(cfg)
		end
	end
end

function i3k_game_context:OpenFCBSFinishDialogue(cfg)
	local t = g_i3k_db.i3k_db_get_faction_task_finish_desc(cfg)
	local fun
	if cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		fun = (function()
			local callBack = function()
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow") --检测有没有新加入背包的物品
			end
			local data = i3k_sbean.task_dialog_req.new()
			data.npcId = cfg.arg1
			data.dialogId = cfg.arg2
			data.taskCat = TASK_CATEGORY_FCBS
			data.__callback = callBack
			i3k_game_send_str_cmd(data,i3k_sbean.task_dialog_res.getName())
		end)
	end

	if #t ~= 0 then
		if (not g_i3k_logic:IsRootUIBattle()) then
			return
		end
		local motable = {}
		for i=1,#t do
			local keyName = "finishTaskDialogue" .. i .. "Icon"
			table.insert(motable,cfg[keyName])
		end
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun,TASK_CATEGORY_FCBS)
	end
end

function i3k_game_context:GetTaskCurrData(category)
	local TASK_CURR_DATA_FUNC = {
		[TASK_CATEGORY_MAIN] = function()
			return self:getMainTaskIdAndVlaue()
		end,
		[TASK_CATEGORY_MRG] = function()
			local data = self:GetMarriageTaskData()
			return data.id, data.value, data.state, data.groupID
		end,
		[TASK_CATEGORY_MRG_LOOP] = function()
			local data = self:GetMarriageTaskData()
			return data.id, data.value, data.state, data.groupID
		end,
		[TASK_CATEGORY_EPIC] = function ( )
			local data = g_i3k_game_context:getCurrEpicTaskData()
			return data.id, data.value, data.state, data.groupID, data.seriesID
		end,
		[TASK_CATEGORY_ADVENTURE] = function ( )
			local data = g_i3k_game_context:getAdventureTask()
			return data.id, data.value, data.state
		end,
		[TASK_CATEGORY_CHESS] = function ( )
			local data = g_i3k_game_context:getChessTask()
			return data.curTaskID, data.curValue, data.state
		end,
		[TASK_CATEGORY_SWORDSMAN] = function ( )
			local id, value, state = self:getSwordsmanCircleTask()
			return id, value, state
		end,
		[TASK_CATEGORY_BIOGRAPHY] = function ( )
			local id, value, state = self:getBiographyTask()
			return id, value, state
		end,
	}
	return TASK_CURR_DATA_FUNC[category]()
end

function i3k_game_context:getTaskCfg(TASK_CATEGORY, taskID, otherArg, seriesID)
	local CFG_FUNC = {
		[TASK_CATEGORY_MAIN] = function()
			return g_i3k_db.i3k_db_get_main_task_cfg(taskID)
		end,

		[TASK_CATEGORY_WEAPON] = function()
			--otherArg  -- loop
			local cfg = g_i3k_db.i3k_db_get_weapon_task_cfg(taskID, otherArg)
			return {id = cfg.id, arg1 = cfg.arg11, arg2 = cfg.arg12, arg3 = cfg.arg13, arg4 = cfg.arg14, arg5 = cfg.arg15, arg6 = cfg.arg16}
		end,

		[TASK_CATEGORY_SECT] = function()
			return g_i3k_db.i3k_db_get_faction_task_cfg(taskID)
		end,

		[TASK_CATEGORY_SUBLINE] = function()
			--otherArg  -- groupId
			return g_i3k_db.i3k_db_get_subline_task_cfg(otherArg,taskID)
		end,

		[TASK_CATEGORY_SECRETAREA] = function()
			return i3k_db_secretarea_task[taskID]
		end,
		[TASK_CATEGORY_MRG] = function()
			return g_i3k_db.i3k_db_marry_task(taskID, otherArg)
		end,
		[TASK_CATEGORY_MRG_LOOP] = function()
			return g_i3k_db.i3k_db_marry_task(taskID, otherArg)
		end,
		[TASK_CATEGORY_EPIC] = function()
			return g_i3k_db.i3k_db_epic_task_cfg(seriesID, otherArg, taskID)
		end,
		[TASK_CATEGORY_ADVENTURE] = function()
			return i3k_db_adventure.tasks[taskID]
		end,
		[TASK_CATEGORY_FESTIVAL] = function()
			return i3k_db_festival_task[otherArg][taskID]
		end,
		[TASK_CATEGORY_JUBILEE] = function()
			return i3k_db_jubilee_tasks[taskID]
		end,
		[TASK_CATEGORY_SWORDSMAN] = function()
			return i3k_db_swordsman_circle_tasks[taskID]
		end,
		[TASK_CATEGORY_BIOGRAPHY] = function()
			return i3k_db_wzClassLand_task[self._curBiographyCareer][taskID]
		end,
	}
	return CFG_FUNC[TASK_CATEGORY](taskID, otherArg)
end

function i3k_game_context:GetCurrTaskCfg( )
	if self._currTaskCat > 0 then
		local mId,mValue, mstate, groupID, seriesID = self:GetTaskCurrData(self._currTaskCat)
		return self:getTaskCfg(self._currTaskCat, mId, groupID, seriesID)
	end
end

function i3k_game_context:ResetCurrTaskType( )
	self._currTaskCat = -1
end

function i3k_game_context:updateMainTaskResponse(category)
	local mId,mValue, mstate, groupID, seriesID = self:GetTaskCurrData(category)
	if not mId or mId <= 0 then
		return
	end
	local main_task_cfg = self:getTaskCfg(category, mId, groupID, seriesID)
	assert(main_task_cfg ~= nil, "task category "..(category or 0).." taks id = "..(mId and mId or "nil"))
	local taskRealType = main_task_cfg.type
	local arg1 = main_task_cfg.arg1
	local mark = main_task_cfg.arg2
	local is_finish = self:IsTaskFinished(taskRealType,arg1,mark,mValue)

	if main_task_cfg.getTaskNpcID ~= 0 and mstate == 0 then
		g_i3k_game_context:OpenGetTaskDialogue(main_task_cfg, category)
		return
	end

	if is_finish then
		self:OpenFinishTaskDialogue(main_task_cfg, category)
	end
	if taskRealType == g_TASK_USE_ITEM_AT_POINT and not is_finish then
		if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			self._currTaskCat = category
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip) -- new battle
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip,arg1, category)
		end
	elseif taskRealType == g_TASK_SHAPESHIFTING then--护送npc
		if is_finish then
		else
			local data = i3k_sbean.task_conveynpc_req.new()
			data.npcId = arg1
			data.taskCat = category
			i3k_game_send_str_cmd(data,i3k_sbean.task_conveynpc_res.getName())
		end
	elseif taskRealType == g_TASK_CONVOY then--运送物件
		if is_finish then
		else
			--协议
			local data = i3k_sbean.task_conveyitem_req.new()
			i3k_game_send_str_cmd(data,i3k_sbean.task_conveyitem_res.getName())
		end
	elseif taskRealType == g_TASK_ANSWER_PROBLEME then--回答问题
		if is_finish then
		else
			local callback = function (rightCount)
				self:FinishAnswerTask(main_task_cfg, category, rightCount)
			end
			g_i3k_ui_mgr:OpenUI(eUIID_Task_Question)
			g_i3k_ui_mgr:RefreshUI(eUIID_Task_Question, main_task_cfg, callback, TASK_CATEGORY_MAIN)
		end

	elseif 	taskRealType == g_TASK_COLLECT and not is_finish then
		if main_task_cfg.arg4 > 0 and not self:getPusslePicIsFinish() then
			g_i3k_ui_mgr:OpenUI(eUIID_puzzlePic)
			g_i3k_ui_mgr:RefreshUI(eUIID_puzzlePic, main_task_cfg.arg4, function( )
				self:TaskCollect(arg1)
			end)
		else
			self:TaskCollect(arg1)
		end
	elseif taskRealType == g_TASK_USE_ITEM and not is_finish then
		if self:GetCommonItemCanUseCount(arg1) >= main_task_cfg.arg2 then
			self:OpenFinishTaskDialogue(main_task_cfg, category)
		elseif main_task_cfg.arg4 > 0 then
			self:SetAutoFight(true)
		end
	elseif taskRealType == g_TASK_NEW_NPC_DIALOGUE then
		if is_finish then
		else
			self:OpenNewNpcDialogue(main_task_cfg, category)
		end
	elseif taskRealType == g_TASK_TRANSFER  then
		local now_mapID =  g_i3k_game_context:GetWorldMapID()
		local targetMaps = g_i3k_db.i3k_db_get_all_npcs_map_id_by_funcId(TASK_FUNCTION_TRANSFER)
		local mapID, pos = g_i3k_db.i3k_db_find_nearest_map(now_mapID,targetMaps)
		local npcID = g_i3k_db.i3k_db_get_npc_id_by_pos(mapID,pos)
		g_i3k_logic:SelectNPCByID(npcID)
	elseif taskRealType == g_TASK_ANY_MOMENT_DUNGEON and not is_finish then
		if next(i3k_db_at_any_moment[arg1].startDialogue) then
			local callback = function ()
				if g_i3k_game_context:IsInRoom() then
					g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(142))
					return
				end
				local func = function ()
					if g_i3k_game_context:IsInRoom() then
						g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(142))
						return
					end
					g_i3k_game_context:ClearFindWayStatus()
					g_i3k_game_context:setIsNeedLoading(i3k_db_at_any_moment[arg1].effects)
					i3k_sbean.anywhere_map_enter(TASK_CATEGORY_MAIN, 0, mId)
				end
				g_i3k_game_context:CheckMulHorse(func)
			end
			local dialogues, models = g_i3k_db.i3k_db_get_at_any_moment_dialogue(arg1)
			table.insert(dialogues, {txt = ""})
			g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
			g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, dialogues, models, callback)
		else
			if g_i3k_game_context:IsInRoom() then
				g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(142))
				return
			end
			local func = function ()
			g_i3k_game_context:ClearFindWayStatus()
			g_i3k_game_context:setIsNeedLoading(i3k_db_at_any_moment[arg1].effects)
			i3k_sbean.anywhere_map_enter(TASK_CATEGORY_MAIN, 0, mId)
			end
			g_i3k_game_context:CheckMulHorse(func)
		end
	end
end

--回调身世任务
function i3k_game_context:updateLifeTaskResponse(petID)
	local data = g_i3k_game_context:getLifeIdAndValueBytype(petID)
	local taskId = data.id
	local value = data.value
	local reward = data.reward
	if taskId == 0 then
		taskId = 1
	end
	if reward == 1 then
		local cfg = i3k_db_from_task[petID][taskId]
		if cfg.postTaskID ~= 0 then
			taskId = cfg.postTaskID
		end
		value = 0
	end
	local cfg = i3k_db_from_task[petID][taskId]
	local taskType = cfg.taskType
	local arg1 = cfg.arg1
	local arg2 = cfg.arg2
	local is_finish = self:IsTaskFinished(taskType,arg1,arg2,value)
	local npcID = cfg.completeNpcID
	local getTalkNpcID = cfg.npcID
	if (reward == 1 or data.id == 0) and (getTalkNpcID ~= 0) then
		local taskDesc = g_i3k_db.i3k_db_get_task_desc(taskType, arg1, arg2, value, is_finish, nil)
		g_i3k_game_context:GetLifeTaskDialogue(petID,taskId,g_i3k_game_context:getLifeTaskAward(petID,taskId),taskDesc)
		return;
	end
	if taskType == g_TASK_COLLECT and not is_finish then
		--self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.doing)
		self:TaskCollect(arg1)

	elseif taskType == g_TASK_USE_ITEM_AT_POINT and not is_finish then
	--	if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip) -- new battle
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip,arg1, TASK_CATEGORY_LIFE)
	--	end
	elseif taskType == g_TASK_USE_ITEM  and is_finish then
		self:taskSubItem(TASK_CATEGORY_LIFE,arg1,arg2)
	elseif taskType == g_TASK_TRANSFER  then
		local now_mapID =  g_i3k_game_context:GetWorldMapID()
		local targetMaps = g_i3k_db.i3k_db_get_all_npcs_map_id_by_funcId(TASK_FUNCTION_TRANSFER)
		local mapID, pos = g_i3k_db.i3k_db_find_nearest_map(now_mapID,targetMaps)
		npcID = g_i3k_db.i3k_db_get_npc_id_by_pos(pos)
		g_i3k_logic:SelectNPCByID(npcID)
		if is_finish then
			g_i3k_game_context:FinishLifeTaskDialogue(petID,taskId,g_i3k_game_context:isBagEnoughLifeTaskAward(petID,taskId),g_i3k_game_context:getLifeTaskAward(petID,taskId))
		end
	elseif taskType == g_TASK_NEW_NPC_DIALOGUE then
		if is_finish then
			g_i3k_game_context:FinishLifeTaskDialogue(petID,taskId,g_i3k_game_context:isBagEnoughLifeTaskAward(petID,taskId),g_i3k_game_context:getLifeTaskAward(petID,taskId))
		else
			--self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.doing)
			self:OpenNewNpcDialogue(cfg, TASK_CATEGORY_LIFE, taskId, petID)
		end
	else
		if is_finish then
			g_i3k_game_context:FinishLifeTaskDialogue(petID,taskId,g_i3k_game_context:isBagEnoughLifeTaskAward(petID,taskId),g_i3k_game_context:getLifeTaskAward(petID,taskId))
		end
	end
end

---回调支线任务
function i3k_game_context:updateSubLineTaskResponse(groupID)
	local data = g_i3k_game_context:getSubLineIdAndValueBytype(groupID)
	local taskId = data.id
	if not taskId or taskId == 0 then
		return
	end
	local value = data.value
	local cfg = g_i3k_db.i3k_db_get_subline_task_cfg(groupID,taskId)
	local taskType = cfg.type
	local arg1 = cfg.arg1
	local arg2 = cfg.arg2
	local is_finish = self:IsTaskFinished(taskType,arg1,arg2,value)
	local npcID = cfg.finishTaskNpcID
	local getTalkNpcID = cfg.getTaskNpcID
	if data.state == 0 and getTalkNpcID ~= 0 then
		--local taskDesc = g_i3k_db.i3k_db_get_task_desc(taskType, arg1, arg2, value, is_finish, nil)
		g_i3k_game_context:GetSubLineTaskDialogue(groupID,taskId)
		return;
	end

	if taskType == g_TASK_USE_ITEM_AT_POINT and not is_finish then
		if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip)
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip,arg1, TASK_CATEGORY_SUBLINE)
		end
	elseif taskType == g_TASK_COLLECT and not is_finish then
		self:TaskCollect(arg1)
	elseif taskType == g_TASK_NEW_NPC_DIALOGUE and not is_finish then
		self:OpenNewNpcDialogue(cfg, TASK_CATEGORY_SUBLINE, taskId, groupID)
	elseif taskType == g_TASK_TRANSFER  then
		local now_mapID =  g_i3k_game_context:GetWorldMapID()
		local targetMaps = g_i3k_db.i3k_db_get_all_npcs_map_id_by_funcId(TASK_FUNCTION_TRANSFER)
		local mapID, pos = g_i3k_db.i3k_db_find_nearest_map(now_mapID,targetMaps)
		npcID = g_i3k_db.i3k_db_get_npc_id_by_pos(mapID,pos)
		g_i3k_logic:SelectNPCByID(npcID)
		if is_finish then
			g_i3k_game_context:FinishSubLineTaskDialogue(groupID,taskId,g_i3k_game_context:isBagEnoughSubLineTaskAward(groupID,taskId),g_i3k_game_context:getSublineTaskAward(groupID,taskId))
		end
	elseif taskType == g_TASK_USE_ITEM  and not is_finish then
		if self:GetCommonItemCanUseCount(arg1) >= arg2 then
			g_i3k_game_context:FinishSubLineTaskDialogue(groupID,taskId,g_i3k_game_context:isBagEnoughSubLineTaskAward(groupID,taskId),g_i3k_game_context:getSublineTaskAward(groupID,taskId))
		elseif cfg.arg4 > 0 then
			self:SetAutoFight(true)
		end
	elseif taskType == g_TASK_ANY_MOMENT_DUNGEON and not is_finish then
		if next(i3k_db_at_any_moment[arg1].startDialogue) then
			local callback = function ()
				if g_i3k_game_context:IsInRoom() then
					g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(142))
					return
				end
				local func = function ()
					g_i3k_game_context:ClearFindWayStatus()
					g_i3k_game_context:setIsNeedLoading(i3k_db_at_any_moment[arg1].effects)
					i3k_sbean.anywhere_map_enter(TASK_CATEGORY_SUBLINE, groupID, taskId)
				end
				g_i3k_game_context:CheckMulHorse(func)
			end
			local dialogues, models = g_i3k_db.i3k_db_get_at_any_moment_dialogue(arg1)
			g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
			g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, dialogues, models, callback)
		else
			if g_i3k_game_context:IsInRoom() then
				g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(142))
				return
			end
			local func = function ()
			g_i3k_game_context:ClearFindWayStatus()
			g_i3k_game_context:setIsNeedLoading(i3k_db_at_any_moment[arg1].effects)
			i3k_sbean.anywhere_map_enter(TASK_CATEGORY_SUBLINE, groupID, taskId)
			end
			g_i3k_game_context:CheckMulHorse(func)
		end
	elseif taskType == g_TASK_ROLE_FLYING and not is_finish then
		g_i3k_logic:SelectNPCByID(cfg.getTaskNpcID)
	else
		if is_finish then
			g_i3k_game_context:FinishSubLineTaskDialogue(groupID,taskId,g_i3k_game_context:isBagEnoughSubLineTaskAward(groupID,taskId),g_i3k_game_context:getSublineTaskAward(groupID,taskId))
		end
	end
end

function i3k_game_context:taskSubItem(taskCat,itemID,itemCount, groupID)
	local data = i3k_sbean.task_submititem_req.new()
	data.taskCat = taskCat
	data.ItemId = itemID
	data.ItemCount = itemCount
	data.petId = 0
	data.groupID = groupID
	i3k_game_send_str_cmd(data,i3k_sbean.task_submititem_res.getName())
end

--获取主线任务的奖励
function i3k_game_context:getMainTaskAward(cfg)
	local my_type = self:GetRoleType()
	local all_items = {}
	local cnt = 0
	for i=1,4 do
		local tmp_items = string.format("awardItem%s",i)
		local awardItem = cfg[tmp_items]
		local tmp_count = string.format("awardItem%sCount",i)
		local awardItemCount = cfg[tmp_count]
		if awardItem[my_type] and awardItem[my_type] ~= 0 then
			if all_items[awardItem[my_type]] then
				all_items[awardItem[my_type]] = all_items[awardItem[my_type]] + awardItemCount
			else
				cnt = cnt + 1
				all_items[awardItem[my_type]] = awardItemCount
			end
		end
	end
	if cnt < 4 and cfg.awardExp and cfg.awardExp ~= 0 then
		all_items[g_BASE_ITEM_EXP] = cfg.awardExp
	end
	return all_items
end

function i3k_game_context:getBiographyTaskAward(cfg)
	local all_items = {}
	local cnt = 0
	for i=1,4 do
		local tmp_items = string.format("awardItem%sID",i)
		local awardItem = cfg[tmp_items]
		local tmp_count = string.format("awardItem%sCount",i)
		local awardItemCount = cfg[tmp_count]
		if awardItem and awardItem ~= 0 then
			if all_items[awardItem] then
				all_items[awardItem] = all_items[awardItem] + awardItemCount
			else
				cnt = cnt + 1
				all_items[awardItem] = awardItemCount
			end
		end
	end
	if cnt < 4 and cfg.awardExp and cfg.awardExp ~= 0 then
		all_items[g_BASE_ITEM_EXP] = cfg.awardExp
	end
	return all_items
end

function i3k_game_context:isBagEnoughMainTaskAward(cfg)
	local my_type = self:GetRoleType()
	local all_items = {}
	for i=1,4 do
		local tmp_items = string.format("awardItem%s",i)
		local awardItem = cfg[tmp_items]
		local tmp_count = string.format("awardItem%sCount",i)
		local awardItemCount = cfg[tmp_count]
		if awardItem[my_type] and awardItem[my_type] ~= g_BASE_ITEM_DIAMOND and awardItem[my_type] ~= g_BASE_ITEM_COIN then
			if all_items[awardItem[my_type]] then
				all_items[awardItem[my_type]] = all_items[awardItem[my_type]] + awardItemCount
			else
				all_items[awardItem[my_type]] = awardItemCount
			end
		end
	end
	return self:IsBagEnough(all_items)
end

function i3k_game_context:isBagEnoughBiographyTaskAward(cfg)
	local all_items = {}
	local cnt = 0
	for i=1,4 do
		local tmp_items = string.format("awardItem%sID",i)
		local awardItem = cfg[tmp_items]
		local tmp_count = string.format("awardItem%sCount",i)
		local awardItemCount = cfg[tmp_count]
		if awardItem and awardItem ~= 0 then
			if all_items[awardItem] then
				all_items[awardItem] = all_items[awardItem] + awardItemCount
			else
				cnt = cnt + 1
				all_items[awardItem] = awardItemCount
			end
		end
	end
	if cnt < 4 and cfg.awardExp and cfg.awardExp ~= 0 then
		all_items[g_BASE_ITEM_EXP] = cfg.awardExp
	end
	return self:IsBagEnough(all_items)
end
--姻缘任务奖励
function i3k_game_context:getMrgTaskAward(cfg) --不分职业的奖励
	local all_items = {}
	local cnt = 0
	for i=1,4 do
		local tmp_items = string.format("awardItem%dID",i)
		local awardItemID = cfg[tmp_items]
		local tmp_count = string.format("awardItem%dCount",i)
		local awardItemCount = cfg[tmp_count]
		if awardItemID and awardItemID ~= 0 then
			all_items[awardItemID] = awardItemCount
			cnt = cnt + 1
		end
	end
	if cnt < 4 and cfg.addGold > 0 then
		all_items[g_BASE_ITEM_COIN] = cfg.addGold
	end
	return all_items
end

--获取身世任务奖励
function i3k_game_context:getLifeTaskAward(petID, taskID)
	local cfg = i3k_db_from_task[petID][taskID]
	local all_items = {}
	for i=1,4 do
		local tmp_items = string.format("awardID%s",i)
		local awardItemID = cfg[tmp_items]
		local tmp_count = string.format("awardCount%s",i)
		local awardItemCount = cfg[tmp_count]
		if awardItemID and awardItemID ~= 0 then
			all_items[awardItemID] = awardItemCount
		end
	end
	return all_items
end

--判断身世任务奖励背包是否足够
function i3k_game_context:isBagEnoughLifeTaskAward(petID, taskID)
	local all_items = self:getLifeTaskAward(petID, taskID)
	return self:IsBagEnough(all_items)
end

--获取外传任务奖励
function i3k_game_context:getOutTaskAward(awards)
	local all_items = {}
	for i, e in ipairs(awards) do
		if e.itemID ~= 0 then
			all_items[e.itemID] = e.itemCount
		end
	end
	return all_items
end

--判断外传任务奖励背包是否足够
function i3k_game_context:isBagEnoughOutTaskAward(id, taskID)
	local cfg = g_i3k_db.i3k_db_getOutCastTaskCfgByTaskID(id, taskID)
	return self:getOutTaskAward(cfg.awards)
end

--获取支线任务奖励
function i3k_game_context:getSublineTaskAward(groupId,id)
	local my_type = self:GetRoleType()
	local cfg = g_i3k_db.i3k_db_get_subline_task_cfg(groupId,id)
	local all_items = {}
	local index = 0
	local awardItemID,awardItemCount
	for i=1,4 do

		-- if i == 5 and index < 4 then
		-- 	awardItemID = g_BASE_ITEM_EXP
		-- 	awardItemCount = cfg.awardExp
		-- end

		local tmp_items = string.format("awardItem%s",i)
		local awardItemID = cfg[tmp_items][my_type]
		local tmp_count = string.format("awardItem%sCount",i)
		local awardItemCount = cfg[tmp_count]
		if awardItemID and awardItemID ~= 0 then
			if all_items[awardItemID] then
				all_items[awardItemID] = all_items[awardItemID] + awardItemCount
			else
				index = index+1
				all_items[awardItemID] = awardItemCount
			end
		end
	end
	if index < 4 and cfg.awardExp ~= 0 then
		all_items[g_BASE_ITEM_EXP] = cfg.awardExp
	end
	return all_items
end

--判断支线任务奖励背包是否足够
function i3k_game_context:isBagEnoughSubLineTaskAward(groupId,id)
	local all_items = self:getSublineTaskAward(groupId,id)
	return self:IsBagEnough(all_items)
end

--获取帮派任务奖励
function i3k_game_context:getFactionTaskAward(id)
	local task_cfg = g_i3k_db.i3k_db_get_faction_task_cfg(id)
	local all_items = {}
	for i=1,4 do
		local tmp_id = string.format("awardID%s",i)
		local itemid = task_cfg[tmp_id]

		local tmp_count = string.format("awardCount%s",i)
		local count = task_cfg[tmp_count]
		if itemid ~= 0 then
			all_items[itemid] = count
		end
	end
	return all_items
end
--判断帮派任务奖励背包是否足够
function i3k_game_context:isBagEnoughFactionTaskAward(id)
	local task_cfg = g_i3k_db.i3k_db_get_faction_task_cfg(id)
	local all_items = {}
	for i=1,4 do
		local tmp_id = string.format("awardID%s",i)
		local itemid = task_cfg[tmp_id]

		local tmp_count = string.format("awardCount%s",i)
		local count = task_cfg[tmp_count]
		if itemid ~= 0 and itemid ~= g_BASE_ITEM_DIAMOND and itemid ~= g_BASE_ITEM_COIN then
			all_items[itemid] = count
		end
	end
	return self:IsBagEnough(all_items)
end

function i3k_game_context:SetEquipFromEmail(equip)
	self._equipFromEmail = equip
end

function i3k_game_context:GetEquipFromEmail()
	return self._equipFromEmail
end

function i3k_game_context:openAutoFightMianTask(doTaskType,petID)
	if doTaskType == TASK_CATEGORY_MAIN then
		local mId,mValue, state = self:getMainTaskIdAndVlaue()
		local main_task_cfg = g_i3k_db.i3k_db_get_main_task_cfg(mId)
		local taskType = main_task_cfg.type
		local arg1 = main_task_cfg.arg1
		local mark = main_task_cfg.arg2
		local is_ok = self:IsTaskFinished(taskType,arg1,mark,mValue)
		if state > 0 and taskType == g_TASK_KILL and not is_ok then
			if not self:IsExistTaskMonster(doTaskType) then
				return
			end
			self:SetAutoFight(true)
		end

	elseif doTaskType == TASK_CATEGORY_WEAPON then
		local taskId,loopTask = self:getWeaponTaskIdAndLoopType()
		local value1,value2 = self:getWeaponTaskArgsCountAndArgs()
		local weapon_task_cfg = g_i3k_db.i3k_db_get_weapon_task_cfg(taskId,loopTask)
		local taskType1 = weapon_task_cfg.type1
		local taskType2 = weapon_task_cfg.type2
		local arg11 = weapon_task_cfg.arg11
		local arg12 = weapon_task_cfg.arg12
		local arg21 = weapon_task_cfg.arg21
		local arg22 = weapon_task_cfg.arg22
		local is_ok1
		local is_ok2
		if taskType1 ~= 0 then
			is_ok1 = self:IsTaskFinished(taskType1,arg11,arg12,value1)
		end
		if taskType2 ~= 0 then
			is_ok2 = self:IsTaskFinished(taskType2,arg21,arg22,value2)
		end
		if (taskType1 == g_TASK_KILL and not is_ok1) or (taskType2 == g_TASK_KILL and not is_ok2) then
			self:SetAutoFight(true)
			return
		end

	elseif doTaskType == TASK_CATEGORY_SECT then
		local taskID,value,receiveTime = self:getFactionTaskIdValueTime()
		local faction_task_cfg = g_i3k_db.i3k_db_get_faction_task_cfg(taskID)
		if faction_task_cfg then
			local taskType = faction_task_cfg.type
			local arg1 = faction_task_cfg.arg1
			local mark = faction_task_cfg.arg2
			local NPCID = faction_task_cfg.finishTaskNpcID
			local is_ok = self:IsTaskFinished(taskType,arg1,mark,value)
			if taskType == g_TASK_KILL and not is_ok then
				self:SetAutoFight(true)
				return
			end
		end

	elseif doTaskType == TASK_CATEGORY_PET then
		local taskID,value = self:getPetTskIdAndValueById(petID)
		local pet_task_cfg = g_i3k_db.i3k_db_get_pet_task_cfg(taskID)
		if pet_task_cfg then
			local arg1 = pet_task_cfg.arg1
			local arg2 = pet_task_cfg.arg2
			local taskType = pet_task_cfg.type

			local is_ok = self:IsTaskFinished(taskType,arg1,arg2,value)
			if taskType == g_TASK_KILL and not is_ok then
				self:SetAutoFight(true)
				return
			end
		end


	elseif doTaskType == TASK_CATEGORY_SUBLINE then
		local data = g_i3k_game_context:getSubLineIdAndValueBytype(petID)
		if data and data.id > 0 then
			local value = data.value
			local cfg = g_i3k_db.i3k_db_get_subline_task_cfg(petID,data.id)
			local arg1 = cfg.arg1
			local arg2 = cfg.arg2
			local taskType = cfg.type
			local is_ok = self:IsTaskFinished(taskType,arg1,arg2,value)
			if taskType == g_TASK_KILL and not is_ok and data.state >= 1 then
				-- if not self:IsExistTaskMonster(petID*1000) then
				if not self:IsExistTaskMonster(g_i3k_db.i3k_db_get_subline_task_hash_id(petID)) then
					return
				end
				self:SetAutoFight(true)
			end
		end


	elseif doTaskType == TASK_CATEGORY_LIFE then
		local data = g_i3k_game_context:getLifeIdAndValueBytype(petID)
		if data then
			local id = data.id
			if id == 0 then
				id = 1
			end
			local value = data.value
			local cfg = i3k_db_from_task[petID][id]
			local arg1 = cfg.arg1
			local arg2 = cfg.arg2
			local taskType = cfg.taskType
			local is_ok = self:IsTaskFinished(taskType,arg1,arg2,value)
			if taskType == g_TASK_KILL and not is_ok and data.reward == 0 and data.id ~= 0 then
				self:SetAutoFight(true)
				return
			end
		end
	elseif doTaskType == TASK_CATEGORY_OUT_CAST then
		local id, value, reward = g_i3k_game_context:getOutCastTskIdAndValueById()
		local data = {id = id, value = value, reward = reward}
		if data then
			local id = data.id
			if id == 0 then
				id = 1
			end
			local value = data.value
			local cfg = g_i3k_db.i3k_db_getOutCastTaskCfgByTaskID(petID, id)
			local arg1 = cfg.arg1
			local arg2 = cfg.arg2
			local taskType = cfg.taskType
			local is_ok = self:IsTaskFinished(taskType,arg1,arg2,value)
			if taskType == g_TASK_KILL and not is_ok and data.reward == 0 and data.id ~= 0 then
				self:SetAutoFight(true)
				return
			end
		end
	elseif doTaskType == TASK_CATEGORY_SECRETAREA then ---秘境

		local sId,mValue = self:getSecretareaTaskIdAndVlaue()
		local secretarea_task_cfg = i3k_db_secretarea_task[sId]
		if secretarea_task_cfg == nil then
			return
		end
		local taskType = secretarea_task_cfg.type
		local arg1 = secretarea_task_cfg.arg1
		local mark = secretarea_task_cfg.arg2
		local is_ok = self:IsTaskFinished(taskType,arg1,mark,mValue)
		if taskType == g_TASK_KILL and not is_ok then
			self:SetAutoFight(true)
		end

	elseif doTaskType == i3k_get_MrgTaskCategory() then
		local data = self:GetMarriageTaskData()
		local cfg = g_i3k_db.i3k_db_marry_task(data.id,data.groupID)
		if data.state > 0 and cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, data.value) then
			self:SetAutoFight(true)
		end
	elseif doTaskType == TASK_CATEGORY_EPIC then
		local data = g_i3k_game_context:getCurrEpicTaskData()
		local cfg = g_i3k_db.i3k_db_epic_task_cfg(data.seriesID, data.groupID, data.id)
		if cfg.type == g_TASK_KILL and data.state > 0 and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, data.value) then
			if not self:IsExistTaskMonster(doTaskType) then
				return
			end
			self:SetAutoFight(true)
		end
	elseif doTaskType == TASK_CATEGORY_DRAGON_HOLE then
		local data, isAccept = self:isAcceptDragonHoleTask(petID)
		if isAccept then
			local cfg = g_i3k_db.i3k_db_get_dragon_task_cfg(petID)
			if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, data.value) then
				self:SetAutoFight(true)
			end
		end
	elseif doTaskType == TASK_CATEGORY_ADVENTURE then
		local data = g_i3k_game_context:getAdventureTask()
		local cfg = i3k_db_adventure.tasks[data.id]
		if cfg.type == g_TASK_KILL and data.state > 0 and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, data.value) then
			self:SetAutoFight(true)
		end
	elseif doTaskType == TASK_CATEGORY_FCBS then
		local data = self._factionBusinessTask
		local cfg = i3k_db_factionBusiness_task[data.id]
		if cfg then
			if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, data.value) then
				self:SetAutoFight(true)
			end
		end
	elseif doTaskType == TASK_CATEGORY_CHESS then
		local task = self:getChessTask()
		if task.curTaskID then
			local cfg = i3k_db_chess_task[task.curTaskID]
			if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, task.curValue) then
				self:SetAutoFight(true)
			end
		end
	elseif doTaskType == TASK_CATEGORY_POWER_REP then
		local taskCfg = g_i3k_db.i3k_db_power_rep_get_taskCfg_by_hash(petID)
		local cfg = g_i3k_db.i3k_db_power_rep_convert_db(taskCfg)
		local curTask = self:getPowerRepTask(petID)
		if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, curTask.value) then
			self:SetAutoFight(true)
		end
	elseif doTaskType == TASK_CATEGORY_PETDUNGEON then
		local findata = self:GetFindPathData()
		local index = g_i3k_game_context:getpetDungeonMapIndex()

		for k, v in ipairs(i3k_db_PetDungeonTasks) do
			if v.mapID == index and findata.petID == v.arg1 then
				local state, value = self:getPetDungeonTaskState(k)
				local isFinished = self:IsTaskFinished(v.type, v.arg1, v.arg2, value)

				if not isFinished and v.type == g_TASK_KILL then
					self:SetAutoFight(true)
					break
				end
			end
		end
	elseif doTaskType == TASK_CATEGORY_FESTIVAL then
		local data = self:getFestivalLimitTask()
		local groupId, taskId = g_i3k_db.i3k_db_get_festival_task_real_id(petID)
		for k, v in pairs(data) do
			if v.curTask and v.curTask.groupId == groupId then
				local cfg = i3k_db_festival_task[groupId][v.curTask.index]
				if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, v.curTask.value) then
					self:SetAutoFight(true)
					break
				end
			end
		end
	elseif doTaskType == TASK_CATEGORY_JUBILEE then
		local task = self:GetJubileeStep2Task()
		if task.id ~= 0 and task.state == 1 then
			local cfg = g_i3k_db.i3k_db_get_jubilee_task_cfg(task.id)
			if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, task.value) then
				self:SetAutoFight(true)
			end
		end
	elseif doTaskType == TASK_CATEGORY_SWORDSMAN then
		local taskId, value, state = self:getSwordsmanCircleTask()
		if taskId and taskId ~= 0 and state == 1 then
			local cfg = i3k_db_swordsman_circle_tasks[taskId]
			if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, value) then
				self:SetAutoFight(true)
			end
		end
	elseif doTaskType == TASK_CATEGORY_GLOBALWORLD then
		local data =  self._globalWorldTask[petID]
		if data and data.id ~= 0 and data.taskStatus == 1 then
			local cfg = i3k_db_war_zone_map_task[data.id]
			if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, data.curValue) then
				self:SetAutoFight(true)
			end
		end
	elseif doTaskType == TASK_CATEGORY_BIOGRAPHY then
		local id, value, state = self:getBiographyTask()
		if id ~= 0 and state == 1 then
			local cfg = i3k_db_wzClassLand_task[self._curBiographyCareer][id]
			if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, value) then
				self:SetAutoFight(true)
			end
		end
	elseif doTaskType == TASK_CATEGORY_NEW_FESTIVAL then
		local taskCfg = g_i3k_db.i3k_db_new_festival_get_taskCfg_by_hash(petID)
		local cfg = g_i3k_db.i3k_db_task_info_convert_db(taskCfg)
		local curTask = self:getNewFestivalTask_hash(petID)
		if cfg.type == g_TASK_KILL and not self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, curTask.value) then
			self:SetAutoFight(true)
		end
	end
end

function i3k_game_context:ResetOneActName()
	if self._replaceAction then
		local hero = i3k_game_get_player_hero()
		if hero then
			--hero:ResetActName(self._replaceAction)
			hero:Play(self._replaceAction, 1, false)
			self._replaceAction = nil
		end
	end
end

function i3k_game_context:ResetNpcActName(npcID)
	local _npc = self:GetNPCbyID(npcID)
	if _npc then
		_npc:ResetActName("stand")
		_npc:Play("stand", 1, false)
	end
end

function i3k_game_context:ChangeNpcActName(cfg)
	local tbl = { }
	self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.npcPose, tbl)
	if tbl.npcID and tbl.repName then
		local _npc = self:GetNPCbyID(tbl.npcID)
		if _npc then
			_npc:Play(tbl.repName, 1, false)
		end
	end
end

function i3k_game_context:CheckTransformationTaskState(effectIdList)
	if not effectIdList then
		return
	end
	local cfg = i3k_db_scene_trigger.cfg
	local isMissionMode =  self:IsInMissionMode()
	for i,v in ipairs(effectIdList) do
		if v < 0 and cfg[v].effectType == 7 then
			return isMissionMode
		end
	end
	return false
end

function i3k_game_context:CheckSceneTriggerEffect(cfg, trType, tbl)
	if not cfg or not cfg.effectIdList then
		return
	end
	for i,v in ipairs(cfg.effectIdList) do
		if v > 0 then
			self:SceneTriggerEffect(v, trType, tbl)
		end
	end
end

local function scheduleScriptFunc(func, millisecond)
	local sid = 0
	sid = cc.Director:getInstance():getScheduler():scheduleScriptFunc(
		function()
			func()
			cc.Director:getInstance():getScheduler():unscheduleScriptEntry(sid)
		end, millisecond/1000, false
	)
end

function i3k_game_context:SceneTriggerEffect(trrigerId, trType, tbl)
	local cfg = g_i3k_db.i3k_db_get_scene_trigger_cfg(trrigerId)

	if cfg.triggerType ~= trType then
		return
	end

	local effType = cfg.effectType
	local db = i3k_db_scene_trigger
	if effType == 1 then 		--触发Npc表现
		local aa = db.repNpcActionName[cfg.arg1]
		local _npc = self:GetNPCbyID(aa.npcID)--i3k_game_get_world():GetNeutralNpcByID(npcid);
		if _npc then
			_npc:Play(aa.repName, 1, false)
		end
		if aa.timeCnt > 0 then
			scheduleScriptFunc(function()
				self:ResetNpcActName(aa.npcID)
			end, aa.timeCnt)
		end

	elseif effType == 2 then    --触发角色表现
		--打开冒泡
		local hero = i3k_game_get_player_hero()
		local dialogue = cfg.arg2
		if dialogue > 0 and hero:IsResCreated() then
			g_i3k_ui_mgr:OpenUI(eUIID_MonsterPop)
			g_i3k_ui_mgr:RefreshUI(eUIID_MonsterPop, dialogue, hero)
		end
		local aa = db.repActionName[cfg.arg1]
		local func = function( )
			self._replaceAction = aa.oriName
			if trType == 1 then
				hero._socialactionID = aa.repName
			end
			hero:Play(aa.repName, 1, false)
			if cfg.arg4 > 0 then
				scheduleScriptFunc(function()
					self:ResetOneActName()
				end, cfg.arg4)
			end
		end
		if hero and not hero:IsOnRide() then
			--hero:ReplaceActName(aa.oriName, aa.repName)
			func()
		else
			self:UnRide(func)
		end
	elseif effType == 3 then 	--触发特效
		local aa = db.effctList[cfg.arg1]
		local effID = g_i3k_logic:PlaySceneEffect(aa.effID, aa.pos)
		if aa.timeCnt > 0 then
			scheduleScriptFunc(function()
					g_i3k_actor_manager:ReleaseSceneNode(effID)
				end, aa.timeCnt
			)
		end

	elseif effType == 4 then 	--触发动画

		i3k_game_play_scene_ani(cfg.arg1)

	elseif effType == 5 then 	--触发场景镜头缩放
		local value = cfg.arg1

		g_i3k_coroutine_mgr:StartCoroutine(function ()
			local inter = i3k_usercfg:GetCameraInter()
			local detal = 0.02
			local cnt = 50
			if value == 1 then
				detal = -detal
			else
				cnt = 100
			end

			for i = 1, cnt do
				g_i3k_coroutine_mgr.WaitForNextFrame()
				inter = inter + detal

				if inter >= 2 then inter = 2 end
				if inter <= 0.0 then inter = 0.0 end
				i3k_game_get_logic():GetMainCamera():UpdateCameraDistance(inter)
			end

			for i = 1 , 10 do
				g_i3k_coroutine_mgr.WaitForSeconds(0.1)
			end

			local oriInter = i3k_usercfg:GetCameraInter()
			for i = 1 , cnt do
				g_i3k_coroutine_mgr.WaitForNextFrame()
				inter = inter - detal
				if value == 1 and inter >= oriInter then inter = oriInter end
				if value == 2 and inter <= oriInter then inter = oriInter end
				i3k_game_get_logic():GetMainCamera():UpdateCameraDistance(inter)
			end
			i3k_game_get_logic():GetMainCamera():UpdateCameraDistance(oriInter)
		end)
		-- scheduleScriptFunc(function()
		-- 			i3k_game_get_logic():GetMainCamera():UpdateCameraDistance(i3k_usercfg:GetCameraInter())
		-- 		end, cfg.arg2)

	elseif effType == 6 then 	--触发刷怪

	elseif effType == 9 and tbl then
		local aa = db.repNpcActionName[cfg.arg1]
		tbl.npcID = aa.npcID
		tbl.repName = aa.repName

	elseif effType == 10 then
		self:ResetNpcActName(cfg.arg1)
	elseif effType == 11 then

		local aa = db.uiList[cfg.arg1]
		g_i3k_ui_mgr:OpenUI(aa.uiID)
	elseif effType == 12 then
		local hero = i3k_game_get_player_hero()
		local npcRun = db.npcRun[cfg.arg1]
		if hero then
			hero:CreateMissionAdVentureNPC(npcRun)
		end
	elseif effType == 13 then
		g_i3k_ui_mgr:OpenUI(eUIID_BiographyAnimate)
		g_i3k_ui_mgr:RefreshUI(eUIID_BiographyAnimate, cfg.arg1)
	end
end

function i3k_game_context:Caculator(posa,posb,value)
	local istrue = false
	local p1 = { x = posa.x, y = 0, z = posa.z };
	local p2 = { x = posb.x, y = 0, z = posb.z };
	local tmp = i3k_vec3_dist(p1, p2)
	if tmp < value then
		istrue = true
	end
	return istrue
end

function i3k_game_context:toDoTask()
	local data = g_i3k_game_context:GetFindPathData()
	g_i3k_game_context:turnToNpc(data)
	g_i3k_game_context:openAutoFightMianTask(data.task_type,data.petID)
	g_i3k_game_context:SetTaskResponse(true,data.task_type,data.petID)
end

function i3k_game_context:turnToNpc(data)
	if data.transferData and data.transferData.flage == 1 then
		self:turnToNpcDir(data.transferData.areaId)
		-- local rolePos = data.pos
		--[[
		local pos = g_i3k_db.i3k_db_get_npc_pos(data.transferData.areaId)
		local hero = i3k_game_get_player_hero()
		local newpos = hero._curPos
		newpos = i3k_vec3_div2(newpos,100)
		local angle = i3k_vec3_angle2(i3k_vec3(pos.x-newpos.x, newpos.y, pos.z-newpos.z), i3k_vec3(1, 0, 0));
		hero:SetFaceDir(0, angle, 0);
		--]]
	end
end
function i3k_game_context:turnToNpcDir(id)
	local pos = g_i3k_db.i3k_db_get_npc_pos(id)
	local hero = i3k_game_get_player_hero()
	local newpos = hero._curPos
	newpos = i3k_vec3_div2(newpos,100)
	local angle = i3k_vec3_angle2(i3k_vec3(pos.x-newpos.x, newpos.y, pos.z-newpos.z), i3k_vec3(1, 0, 0));
	hero:SetFaceDir(0, angle, 0);
end

function i3k_game_context:StopMove()
	local logic = i3k_game_get_logic()
	local player = logic:GetPlayer()
	if player then
		local hero = player:GetHero();
		if hero then
			hero._onStopMove = nil
			hero:StopMove()
		end
	end
	self:SetFindPathData()
end

--从点a到b移动
function i3k_game_context:sameMapFindPath(posb,callBack)
	local hero = i3k_game_get_player_hero()
	hero:MoveTo((i3k_vec3(posb.x,posb.y,posb.z)));
	self:SetFindWayStatus()
	hero._onStopMove = function(pos)
		local istrue= self:Caculator(pos, posb, 3)
		local isfindway = self:GetFindWayStatus()
		if isfindway == true then
			if istrue then
				if callBack then
					callBack()
				end
			else
				self:sameMapFindPath(posb, callBack)
			end
		end
	end
end

--换线
function i3k_game_context:ChangeWorldLine(line)
	local hero = i3k_game_get_player_hero()
	if hero and not hero:IsInFightTime() then
		---打开进度条
		local function func()
			g_i3k_logic:OpenWorldLineProcessBarUI(nil, line)
		end
		g_i3k_game_context:CheckMulHorse(func, true)
	else

		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(537))

	end
end

function i3k_game_context:findPathChangeLine(mapId, pos, mapLine)
	local callFunc = nil
	local selfmapId = g_i3k_game_context:GetWorldMapID()
	if selfmapId == mapId and mapLine ~= g_i3k_game_context:GetCurrentLine() then
		callFunc = function ()
			g_i3k_game_context:ChangeWorldLine(mapLine)
		end
	end
	g_i3k_game_context:SeachPathWithMap(mapId, pos,nil,nil,nil,nil,mapLine,callFunc)
end

--传送
function i3k_game_context:wayPointFindPath(wid,sline)
	--传送点坐标和当前自己的坐标
	local logic	= i3k_game_get_logic()
	local player = logic:GetPlayer()
	local rolePos = player:GetHeroPos()
	rolePos = {x=rolePos.x/100, y= rolePos.y/100, z=rolePos.z/100}
	local pos1 = g_i3k_db.i3k_db_getPointdata(wid).pos
	local istrue = self:Caculator(rolePos,pos1,2)
	if not istrue then
		self:sameMapFindPath(pos1)
	else
		-- --停止播放场景动画
		-- i3k_game_stop_scene_ani()
		-- local data = i3k_sbean.waypoint_enter_req.new()
		-- data.wid = wid
		-- data.line = sline or 0
		-- data.__callback = callBack
		-- i3k_log("wayPointFindPath-----------%s",sline)
		-- i3k_game_send_str_cmd(data,i3k_sbean.waypoint_enter_res.getName())
	end
end

--主方法
function i3k_game_context:SeachPathMainFunc(mapID,toPos,sline,callfunc)
	local cur_mapId = self:GetWorldMapID()
	if cur_mapId == mapID then
		local stopMoveCallBack = nil
		if callfunc then
			stopMoveCallBack = function()
				callfunc()
				g_i3k_game_context:ClearFindWayStatus()
			end
		else
			stopMoveCallBack = function()
				g_i3k_game_context:ClearFindWayStatus()
			end
		end
		self:sameMapFindPath(toPos, stopMoveCallBack)
	else
		--跨图寻径
		if i3k_db_find_path_data[cur_mapId] and i3k_db_find_path_data[cur_mapId][mapID] then
			local mapPointID = g_i3k_db.i3k_db_find_nextMapPointID(cur_mapId,mapID)
			if mapPointID then
				self:wayPointFindPath(mapPointID,sline)
			end
		end
	end
end

function i3k_game_context:CaculatorSameMapDistance(mapId, point)
	local cur_mapId = g_i3k_game_context:GetWorldMapID()
	local distance = 4

	if cur_mapId == mapId then
		local rolePos = g_i3k_game_context:GetPlayerPos()
		local istrue = g_i3k_game_context:Caculator(rolePos,point,distance)
		if istrue then
			return true;
		end
	end
	return false
end

function i3k_game_context:SeachPathWithMap(mapID,toPos,task_type,petID,transferData,speed, sline, callBack, tipsState, comparePos, force)
	local hero = i3k_game_get_player_hero()
	if hero:IsDead() then
		return
	end
	self:ResetOneActName()
	if not toPos or not mapID then
		return
	end

	if self:CheckMulHorse(nil, true) then
		return
	end

	if self:CheckHugMode(nil, true) then
		return
	end

	if self:GetFindWayStatus() then
		self:ClearFindWayStatus()
	end

	if hero then
		hero:ClsEnmities()
	end

	if g_i3k_game_context:GetWorldMapID() ~= i3k_db_spring.common.mapId and not force then
		g_i3k_game_context:SetAutoFight(false)
	end

	if not callBack and task_type and task_type > 0 then
		callBack = self.toDoTask
	end
	if force then
		transferData = nil
	end

	self:SetFindPathData(mapID,toPos,task_type,petID,transferData,speed,sline, callBack)
	local pos =	toPos
	if transferData and transferData.npcPos then
		pos = transferData.npcPos
	end
	pos = comparePos or pos
	if self:CaculatorSameMapDistance(mapID, pos) then
		if callBack then
			callBack()
		end
		g_i3k_game_context:ClearFindWayStatus()
		return
	end

	self:SetFindWayStatus(tipsState)
	if not hero:CanMove() then
		hero._PreCommand = ePreTypeClickMove;
		return;
	end

	local logic = i3k_game_get_logic();
	if logic then
		logic:SwitchSelectEntity(nil);
	end
	if g_i3k_game_context:GetWorldMapID() ~= i3k_db_spring.common.mapId then
		if self:IsOnRide() or self:IsInMissionMode() then
			hero:SetFindWayTmpSpeed(speed)
		else
			local func = function ()
				hero:SetFindWayTmpSpeed(speed)
			end
			hero:SetRide(true, true, func)
		end
	end

	self:SeachPathMainFunc(mapID,toPos,sline, callBack)
	self:setMiniMapTargetPos(toPos)
	self:setMiniMapTargetPosMapID(mapID)
end

--传送条结束后的回调
function i3k_game_context:TransportCallBack(mapId,areaId,flage)
	local hero = i3k_game_get_player_hero()
	if hero then
	hero:StopMove(true);
	end
	self:ClearFindWayStatus()
	self:SetSuperOnHookValid(false)
	if flage == g_TRANSPORT_TO_NPC then
		local areaId = g_i3k_db.i3k_db_getNpcAreaId_By_npcId(areaId,mapId)
		i3k_sbean.transToNpc(mapId, areaId)
	elseif flage == g_TRANSPORT_TO_MINEPOINT then
		local mineId = i3k_db_res_map[areaId].resPosId
		if mineId then
			i3k_sbean.transToMinePoint(mapId,mineId)
		end
	elseif flage == g_TRANSPORT_TO_MONSTER then
		local haveMonsterArea = i3k_db_dungeon_base[mapId].areas
		for i,v in pairs(haveMonsterArea) do
			local monsterPointTable = i3k_db_spawn_area[v].spawnPoints
			for j,k in pairs(monsterPointTable) do
				local pointCfg = i3k_db_spawn_point[k]
				local monsterId = pointCfg.monsters[1]
				if monsterId == areaId then
					i3k_sbean.transToMonster(mapId, k)
					break;
				end
			end
		end
	elseif flage == g_TRANSPORT_TO_STELA then -- 太玄碑文传送
		i3k_sbean.teleportToStela(mapId, areaId)
	elseif flage == g_TRANSPORT_TO_SPAWNMONSTER then
		i3k_sbean.teleport_spawnmonsterReq(areaId)
	elseif flage == g_TRANSPORT_TO_THUMBTACK then  --图钉传送
		i3k_sbean.thumbtack_Use(mapId, areaId)
	elseif flage == g_TRANSPORT_TO_ANYWHERE then -- 随时副本传送
		i3k_sbean.anywhere_map_point_transfer(areaId)
	elseif flage == g_TRANSPORT_TO_JUBILEE then -- 周年庆活动阶段3传送
		i3k_sbean.jubilee_activity_step3_teleport()
	end
end

function i3k_game_context:SetTmpCarState(state)
	self._tmpCarState = state
end

function i3k_game_context:GetTmpCarState()
	return self._tmpCarState
end

function i3k_game_context:doTransport(array, isForce)
	if self:CheckMulHorse(nil, true) then
		return
	end

	if self:CheckHugMode(nil, true) then
		return
	end

	local needId = i3k_db_common.activity.transNeedItemId
	local hero = i3k_game_get_player_hero()
	local isFight = hero and hero:IsInFightTime()
	local isEscort = self:GetTransportState()
	if self:CheckCanTrans(needId, 1) and array and not (isFight and isEscort==1) then
		local mapID = array.mapId
		local cur_mapId = self:GetWorldMapID()
		if isForce or cur_mapId ~= mapID then
			g_i3k_ui_mgr:OpenUI(eUIID_transportProcessBar)
			g_i3k_ui_mgr:RefreshUI(eUIID_transportProcessBar,3,array,true)
			return true;
		end
	end
	return false;
end

function i3k_game_context:getNPCRandomPos(NPCID)
	local mapId = g_i3k_db.i3k_db_get_npc_map_id(NPCID)
	local areaId = g_i3k_db.i3k_db_getNpcAreaId_By_npcId(NPCID,mapId)
	local angle = i3k_db_npc_area[areaId].dir.y
	angle = math.pi * 2 - math.rad(angle)
	local a = math.random(angle-math.pi*2.7/8, angle+math.pi*2.7/8)
	local x = math.cos(a)*2.7
	local z = math.sin(a)*2.7
	local pos = g_i3k_db.i3k_db_get_npc_pos(NPCID)

	local newpos = {}
	newpos.x = pos.x+x
	newpos.y = pos.y
	newpos.z = pos.z+z
	return newpos
end

function i3k_game_context:IsExistTaskMonster(taskCategory, id)
	local id = self:GetTaskMonster(taskCategory)
	if not id then
		return true
	end
	local isExist = false
	local world = i3k_game_get_world()
	if world then
		for i,e in pairs(world._entities[eGroupType_E]) do
			if e and e:GetEntityType() == eET_Monster and e._id == id then
				isExist = true
			end
		end
	end
	if not isExist then
		g_i3k_ui_mgr:PopupTipMessage("敌人逃跑了，请去任务面板放弃任务，重新接取")
	end
	return isExist
end

function i3k_game_context:setTaskMonsterID(taskCat, id)
	self._taskMonsterID[taskCat] = id
end

function i3k_game_context:ResetTaskMonster(taskCat)
	self._taskMonsterID[taskCat] = nil
end

function i3k_game_context:GetTaskMonster(taskCat)
	return self._taskMonsterID[taskCat]
end

function i3k_game_context:CoupleDoTask(checkCaptain, checkDistance)
	local coupleID = g_i3k_game_context:getMarryRoleId()
	local teamID = g_i3k_game_context:GetTeamId()
	if teamID == 0 or (teamID > 0 and not g_i3k_game_context:IsTeamMember(coupleID)) then
		g_i3k_ui_mgr:PopupTipMessage("请夫妻二人组队完成任务")
		return true
	elseif not checkCaptain and not g_i3k_game_context:IamTeamLeader() then
		g_i3k_ui_mgr:PopupTipMessage("只有队长才能交接任务")
		return true
	end
	if checkDistance then
		local hero = i3k_game_get_player_hero()
		local selfMap = self:GetWorldMapID()
		local posInfo = self:GetTeamMemberPosition(coupleID)

		if hero and posInfo and posInfo.pos and posInfo.mapId then
			if selfMap ~= posInfo.mapId or i3k_vec3_dist(hero._curPos, {x = posInfo.pos.x*100, y = posInfo.pos.y*100, z = posInfo.pos.z*100}) > 3000 then
				g_i3k_ui_mgr:PopupTipMessage("夫妻距离太远，将无法完成任务")
				return true
			end
		end
	end
	return false
end

function i3k_game_context:switchDoTask(tbl, cfg, otherId, taskCategory)
	local Task_Func = {
		[g_TASK_KILL] = function()
			local isNormal, monsterID, pointID = true, 0, 0
			tbl.point, tbl.mapId, isNormal, monsterID, pointID = g_i3k_db.i3k_db_checkMainTaskKillTarget(cfg);
			--mapId = g_i3k_db.i3k_db_get_monster_map_id(cfg.arg1);
			if isNormal then
				tbl.transport = {flage = 3, mapId = tbl.mapId, areaId = cfg.arg1}
			else
				g_i3k_game_context:setTaskMonsterID(tbl.taskCat, monsterID)
				tbl.transport = {flage = 5, areaId = pointID, mapId = tbl.mapId}
			end
		end,

		[g_TASK_COLLECT] = function()
			tbl.point = g_i3k_db.i3k_db_get_res_pos(cfg.arg1);
			tbl.mapId = g_i3k_db.i3k_db_get_res_map_id(cfg.arg1);
			tbl.transport = {flage = 2, mapId = tbl.mapId, areaId = cfg.arg1}
		end,

		[g_TASK_USE_ITEM_AT_POINT] = function()
			tbl.point = {x = cfg.arg3, y = cfg.arg4,z = cfg.arg5}
			tbl.mapId = cfg.arg2
		end,

		[g_TASK_TOATL_DAYS] = function ()
			g_i3k_logic:openTaskSpecifiedUI(cfg.jumpUIID, cfg.arg1, cfg.id, tbl.taskCat)
		end,

		[g_TASK_REACH_LEVEL] = function ()
			g_i3k_logic:openTaskSpecifiedUI(cfg.jumpUIID, cfg.arg1, cfg.id, tbl.taskCat)
		end,

		[g_TASK_NPC_DIALOGUE] = function () --deprecated
			--
		end,

		[g_TASK_USE_ITEM] = function ()
			if cfg.arg4 > 0 then
				tbl.point = g_i3k_db.i3k_db_get_monster_pos(cfg.arg4);
				tbl.mapId = g_i3k_db.i3k_db_get_monster_map_id(cfg.arg4);
				--tbl.transport = {flage = 3, mapId = tbl.mapId, areaId = cfg.arg4}
			else
				g_i3k_logic:openTaskSpecifiedUI(cfg.jumpUIID, cfg.arg1, cfg.id, tbl.taskCat)
			end
		end,

		[g_TASK_GET_TO_FUBEN] = function ()
			g_i3k_logic:OpenDungeonUI(false,cfg.arg1)
		end,

		[g_TASK_GET_PET_COUNT] = function ()
			g_i3k_logic:openTaskSpecifiedUI(cfg.jumpUIID, cfg.arg1, cfg.id, tbl.taskCat)
		end,

		[g_TASK_POWER_COUNT] = function ()
			g_i3k_logic:openTaskSpecifiedUI(cfg.jumpUIID, cfg.arg1, cfg.id, tbl.taskCat)
		end,

		[g_TASK_TRANSFER] = function ()
			if i3k_game_get_map_type() == g_FIELD then
				local now_mapID =  g_i3k_game_context:GetWorldMapID()
				local targetMaps = g_i3k_db.i3k_db_get_all_npcs_map_id_by_funcId(TASK_FUNCTION_TRANSFER)
				tbl.mapId, tbl.point = g_i3k_db.i3k_db_find_nearest_map(now_mapID, targetMaps)
				local npcId = g_i3k_db.i3k_db_get_npc_id_by_pos(tbl.mapId, tbl.point)
				tbl.transport = {flage = 1, mapId = tbl.mapId, areaId = npcId, npcPos = tbl.point}
				tbl.point = g_i3k_game_context:getNPCRandomPos(npcId)
			end
		end,

		[g_TASK_NEW_NPC_DIALOGUE] = function ()
			tbl.mapId = g_i3k_db.i3k_db_get_npc_map_id(cfg.arg1);
			tbl.point = g_i3k_game_context:getNPCRandomPos(cfg.arg1)
			tbl.transport = {flage = 1, mapId = tbl.mapId, areaId = cfg.arg1, npcPos = g_i3k_db.i3k_db_get_npc_pos(cfg.arg1)}
		end,

		[g_TASK_CLEARANCE_ACTIVITYPAD] = function ()
			g_i3k_logic:OpenShiLianUI()
		end,

		[g_TASK_PERSONAL_ARENA] = function ()
			g_i3k_logic:OpenArenaUI()
		end,

		[g_TASK_SHAPESHIFTING] = function ()
			g_i3k_game_context:setConvoyNpcState(true)
			tbl.point = {x = cfg.arg3, y = cfg.arg4, z = cfg.arg5 }
			tbl.mapId = cfg.arg2
		end,

		[g_TASK_CONVOY] = function ()
			tbl.point = {x = cfg.arg3, y = cfg.arg4, z = cfg.arg5 }
			tbl.mapId = cfg.arg2
			tbl.transport = {flage = 1, mapId = tbl.mapId, areaId = cfg.arg1}
		end,

		[g_TASK_ANSWER_PROBLEME] = function ()
			tbl.point = g_i3k_db.i3k_db_get_npc_pos(cfg.arg1);
			tbl.mapId = g_i3k_db.i3k_db_get_npc_map_id(cfg.arg1);
		end,

		[g_TASK_JOIN_FACTION] = function ()
			g_i3k_logic:OpenFactionUI()
		end,

		[g_TASK_GATE_POINT] = function ()
			tbl.mapId = i3k_db_transfer_point[cfg.arg1].startMap
			tbl.point = i3k_db_transfer_point[cfg.arg1].pos
		end,
		[g_TASK_ENTER_FUBEN] = function ()
			g_i3k_logic:OpenDungeonUI(false,cfg.arg1)
		end,
		[g_TASK_TOMORROW] = function ()
			g_i3k_ui_mgr:PopupTipMessage("大侠此任务第二天会自动完成")
		end,
		[g_TASK_FIND_DIFFERENCE] = function ()
			--找不同ui
			g_i3k_ui_mgr:OpenUI(eUIID_ChessTaskFindDiff)
			g_i3k_ui_mgr:RefreshUI(eUIID_ChessTaskFindDiff, cfg.arg1, cfg, otherId)
		end,
		[g_TASK_PUZZLE_PICTURE] = function ()
			if g_i3k_db.i3k_db_check_festival_task_by_hash_id(otherId) then
				local callback = function ()
					g_i3k_game_context:tellSeverFestivalFinish(g_TASK_PUZZLE_PICTURE, cfg.arg1, 0, 1)
				end
				g_i3k_ui_mgr:OpenUI(eUIID_ChessTaskPuzzle)
				g_i3k_ui_mgr:RefreshUI(eUIID_ChessTaskPuzzle, cfg.arg1, callback)
			else
				local callback = function ()
					g_i3k_game_context:tellSeverChessTaskFinished(0, g_TASK_PUZZLE_PICTURE, cfg.arg1)
				end
				g_i3k_ui_mgr:OpenUI(eUIID_ChessTaskPuzzle)
				g_i3k_ui_mgr:RefreshUI(eUIID_ChessTaskPuzzle, cfg.arg1, callback)
			end
		end,
		[g_TASK_SORT_VERSE] = function ()
			if g_i3k_db.i3k_db_check_festival_task_by_hash_id(otherId) then
				g_i3k_ui_mgr:OpenUI(eUIID_ChessTaskVerse)
				g_i3k_ui_mgr:RefreshUI(eUIID_ChessTaskVerse, cfg.arg1, g_TASK_VERSE_STATE_FESTIVAL, nil, cfg)
			else
				g_i3k_ui_mgr:OpenUI(eUIID_ChessTaskVerse)
				g_i3k_ui_mgr:RefreshUI(eUIID_ChessTaskVerse, cfg.arg1, g_TASK_VERSE_STATE_CHESS, nil, cfg)
			end
		end,
		[g_TASK_PLAY_SOCIALACT] = function ()
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(17253, i3k_db_social[cfg.arg1].name))
		end,
		[g_TASK_LUCKYCHANCE] = function ()
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(17254))
		end,
		[g_TASK_SCENE_MINE] = function()
			local sceneMineCfg = i3k_db_scene_mine_cfg[cfg.arg1]
			local value = 0
			if taskCategory == TASK_CATEGORY_FESTIVAL then
				local groupId, taskId = i3k_db_get_festival_task_real_id(otherId)
				local data = g_i3k_game_context:getFestivalTaskValue(groupId, taskId)
				value = data.value
			elseif taskCategory == TASK_CATEGORY_JUBILEE then
				value = g_i3k_game_context:GetJubileeStep2TaskValue()
			end
			local pos, mineId = g_i3k_db.i3k_db_get_scene_mineInfo(cfg.arg1, value)
			tbl.point = pos
			tbl.mapId = sceneMineCfg.mapID
			tbl.transport = {flage = 2, mapId = tbl.mapId, areaId = mineId}
		end,
		[g_TASK_NPC_SOCIAL_ACTION] = function()
			tbl.mapId = g_i3k_db.i3k_db_get_npc_map_id(cfg.arg1)
			tbl.point = g_i3k_game_context:getNPCRandomPos(cfg.arg1)
			tbl.transport = {flage = 1, mapId = tbl.mapId, areaId = cfg.arg1, npcPos = g_i3k_db.i3k_db_get_npc_pos(cfg.arg1)}
		end,
		[g_TASK_ANY_MOMENT_DUNGEON] = function()
			local position = i3k_db_at_any_moment[cfg.arg1].position
			tbl.point = {x = position[1], y = position[2],z = position[3]}
			tbl.mapId = i3k_db_at_any_moment[cfg.arg1].mapId
			tbl.transport = {flage = 6, mapId = i3k_db_at_any_moment[cfg.arg1].mapId, areaId = cfg.arg1}
		end,
		[g_TASK_EXPOSE_LETTER] = function ()
			g_i3k_logic:OpenExposeLetterUI(cfg.arg1)
		end,
		[g_TASK_MATCH_TOKEN] = function ()
			g_i3k_logic:OpenMatchTokenUI(cfg.arg1)
		end,
		[g_TASK_ROLE_FLYING] = function()
			tbl.mapId = g_i3k_db.i3k_db_get_npc_map_id(cfg.getTaskNpcID)
			tbl.point = g_i3k_game_context:getNPCRandomPos(cfg.getTaskNpcID)
			tbl.transport = {flage = 1, mapId = tbl.mapId, areaId = cfg.getTaskNpcID, npcPos = g_i3k_db.i3k_db_get_npc_pos(cfg.getTaskNpcID)}
		end,
		[g_TASK_OWN_WEAPON] = function ()
			g_i3k_logic:OpenShenBingUI()
			i3k_sbean.shen_bing_open_syncUniqueSkillSp()
		end,
		[g_TASK_OWN_HORSE] = function ()
			g_i3k_logic:OpenSteedUI()
		end,
		[g_TASK_OWN_PET] = function ()
			g_i3k_logic:OpenPetUI()
		end,
		[g_TASK_TEAM_WITH_ISOMERISM] = function ()
			g_i3k_ui_mgr:PopupTipMessage("异性组队")
		end,
		[g_TASK_CHANGE_ITEM] = function ()
			g_i3k_ui_mgr:OpenUI(eUIID_SwordsmanCommit)
			g_i3k_ui_mgr:RefreshUI(eUIID_SwordsmanCommit, taskCategory, cfg.arg1)
		end,
		[g_TASK_DELIVER_LETTERS] = function ()
			local _, value = self:getSwordsmanCircleTask()
			local index, npcId = g_i3k_db.i3k_db_get_deliver_npc_index(cfg.arg1, value)
			tbl.mapId = g_i3k_db.i3k_db_get_npc_map_id(npcId)
			tbl.point = g_i3k_game_context:getNPCRandomPos(npcId)
			tbl.transport = {flage = 1, mapId = tbl.mapId, areaId = npcId, npcPos = g_i3k_db.i3k_db_get_npc_pos(npcId)}
		end,
		[g_TASK_COLLECT_NPC] = function ()
			tbl.point = g_i3k_db.i3k_db_get_res_pos(cfg.arg1);
			tbl.mapId = g_i3k_db.i3k_db_get_res_map_id(cfg.arg1);
			tbl.transport = {flage = 2, mapId = tbl.mapId, areaId = cfg.arg1}
		end,
	}
	Task_Func[cfg.type]()
end

function i3k_game_context:GoingToDoTask(taskCategory, cfg, otherId)
	local temp_taskCat = g_i3k_db.i3k_db_check_subline_task_by_hash_id(taskCategory) and TASK_CATEGORY_SUBLINE or taskCategory
	local tbl = { point = nil, mapId = nil, transport = nil, taskCat = taskCategory}
	self:switchDoTask(tbl, cfg, otherId, taskCategory)

	--棋局任务和密探任务点击会寻路但不传送
	if taskCategory == TASK_CATEGORY_CHESS or taskCategory == TASK_CATEGORY_SPYSTORY then
		tbl.transport = nil
	end

	if tbl.transport then
		local isCan = self:doTransport(tbl.transport)
		if isCan then
			return;
		end
	end
	if taskCategory == TASK_CATEGORY_DRAGON_HOLE then
		local mapType = self:GetWorldMapType()
		local curMapId = self:GetWorldMapID()
		if mapType == g_FIELD and curMapId ~= tbl.mapId then
			local isDragonHole = curMapId >= 75001 and curMapId <= 75007
			if isDragonHole then
				local stratum = {[75001] = "一", [75002] = "二", [75003] = "三", [75004] = "四", [75005] = "五", [75006] = "六", [75007] = "七"}
				g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(16982, stratum[tbl.mapId]))
			else
				g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(16978))
			end
			return
		end
	end

	if tbl.point and tbl.mapId then
		if cfg.taskTips and cfg.taskTips ~= '0.0' then
			g_i3k_ui_mgr:PopupTipMessage(cfg.taskTips)
		end
		g_i3k_game_context:SeachPathWithMap(tbl.mapId, tbl.point, temp_taskCat, otherId, tbl.transport)
	end
end

function i3k_game_context:justGo(mapid, targetId, flag, pos, comparePos, cb)
	local transferData = {mapId = mapid, areaId = targetId, flage = flag}
	if self:doTransport(transferData) then
		return
	end
	self:SeachPathWithMap(mapid, pos, nil, nil, transferData, nil, nil, cb, nil, comparePos)
end
--------------------------------------------------
function i3k_game_context:GetCurCarSpeed()
	local base_car =  i3k_db_escort.escort_args.speed
	local max_speed = i3k_db_escort.escort_args.max_speed
	local cur_speed = g_i3k_game_context:GetEscortCarSpeed()
	if cur_speed >= base_car then
		cur_speed = cur_speed
	end
	if cur_speed >= max_speed then
		cur_speed = max_speed
	end
	return cur_speed
end

--帮派任务完成对白 任务id，任务roleID，唯一guid，判断背包是否足够放下奖励is_enough，任务奖励items
function i3k_game_context:OpenFactionTaskFinishDialogue(cfg)
	local t = g_i3k_db.i3k_db_get_faction_task_finish_desc(cfg)
	local fun
	if cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		fun = (function()
			local callBack = function()
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow") --检测有没有新加入背包的物品
			end
			local data = i3k_sbean.task_dialog_req.new()
			data.npcId = cfg.arg1
			data.dialogId = cfg.arg2
			data.taskCat = TASK_CATEGORY_SECT
			data.__callback = callBack
			i3k_game_send_str_cmd(data,i3k_sbean.task_dialog_res.getName())
		end)
	end

	if #t ~= 0 then
		if (not g_i3k_logic:IsRootUIBattle()) then
			return
		end
		local motable = {}
		for i=1,#t do
			local keyName = "finishTaskDialogue" .. i .. "Icon"
			table.insert(motable,cfg[keyName])
		end
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun,TASK_CATEGORY_SECT)
	end
end

function i3k_game_context:OpenMapCopyDialogue()
	local mapId = self:GetWorldMapID()
	if self._dungeonData[mapId] and self._dungeonData[mapId].enterTimes and self._dungeonData[mapId].enterTimes > 0 then
		return
	end

	local cfg = i3k_db_MapCopy_Dialogue[mapId]
	if cfg then
		for m, n in ipairs(cfg) do
			if n.dialogueNode == 0 then
		local actionT = {}
		local dia = {}
		local moduleIds = {}
		for i = 1 , 6 do
			local tmp_dialog = string.format("dialogue%d", i)
			local keyName = string.format("diaModel%s",i)
			local action = string.format("action%s",i)
					local dialogId = n[tmp_dialog]
			if dialogId ~= 0 then
				local str = i3k_db_dialogue[dialogId]
				for k,v in ipairs(str) do
					table.insert(dia, v)
							table.insert(actionT, n[action])
							table.insert(moduleIds, n[keyName])
				end
			end
		end
		local function callback( )
			if self._dungeonData[mapId] then
				self._dungeonData[mapId].enterTimes = 1
			else
				self._dungeonData[mapId] = {}
				self._dungeonData[mapId].enterTimes = 1
			end
		end
		table.insert(dia,"")
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, dia, moduleIds, callback, nil, nil, nil, nil, nil, actionT)
			end
		end
	end
end

function i3k_game_context:OpenNewNpcDialogue(cfg, taskCat, taskID, petID)
	if cfg.arg2 > 0 then
		local dt = i3k_db_dialogue[cfg.arg2]
		local mod = {}
		local dialogues = {}
		local modelID = g_i3k_db.i3k_db_get_npc_modelID(cfg.arg1)
		for i = 1 , #dt do
			table.insert(dialogues, dt[i])
			table.insert(mod, modelID)
		end

		local function callback( )
			self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.npcDia)
			i3k_sbean.dialogue_req(taskCat, cfg.arg1, cfg.arg2, taskID, petID)
		end

		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, dialogues, mod, callback)
	else
		self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.npcDia)
		g_i3k_coroutine_mgr:StartCoroutine(function ()
			g_i3k_coroutine_mgr.WaitForNextFrame()
			g_i3k_coroutine_mgr.WaitForNextFrame()
			i3k_sbean.dialogue_req(taskCat, cfg.arg1, cfg.arg2, taskID, petID)
		end)
	end
end

--答题后的对话
function i3k_game_context:FinishAnswerTask(cfg, taskCat, rightCount)
	local isFinish = (rightCount or 0) >= 2
	if taskCat == TASK_CATEGORY_SWORDSMAN then
		isFinish = (rightCount or 0) >= cfg.arg3
	end
	local t, motable = g_i3k_db.i3k_db_get_main_task_Question(cfg.arg2, isFinish)
	local function callback( )
		local data = i3k_sbean.task_randquestion_req.new()
		data.taskCat = taskCat
		i3k_game_send_str_cmd(data,i3k_sbean.task_randquestion_res.getName())
	end
	if #t == 0 then
		callback()
	else
	g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
	g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, t, motable, callback)
	end
end

--主线任务完成对白任务id，判断背包是否足够放下奖励is_enough，任务奖励items
function i3k_game_context:OpenFinishTaskDialogue(cfg, category)
	if cfg.type == g_TASK_USE_ITEM then
		local mId,mValue, mstate, groupID = self:GetTaskCurrData(category)
		if not self:IsTaskFinished(cfg.type,cfg.arg1, cfg.arg2, mValue) then
			self:taskSubItem(category,cfg.arg1, cfg.arg2)
			return
		end
	end

	local t,motable = g_i3k_db.i3k_db_get_task_finish_desc(cfg)
	local is_enough = nil
	local items = nil

	local callfunc = function()
		g_i3k_ui_mgr:CloseUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow") --检测有没有新加入背包的物品
		self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.finish)
	end

	local reward_req = nil
	if category == TASK_CATEGORY_MAIN then
		reward_req = function()
			local data = i3k_sbean.mtask_reward_req.new()
			data.taskId = cfg.id
			data.__callback = callfunc
			i3k_game_send_str_cmd(data,i3k_sbean.mtask_reward_res.getName())
		end
		is_enough = self:isBagEnoughMainTaskAward(cfg)
		items = self:getMainTaskAward(cfg)
	elseif category == TASK_CATEGORY_MRG then
		reward_req = function()
			i3k_sbean.mrgseriestask_rewardReq(cfg.id, callfunc)
		end
		items = self:getMrgTaskAward(cfg)
		is_enough = self:IsBagEnough(items)
	elseif category == TASK_CATEGORY_MRG_LOOP then
		reward_req = function()
			i3k_sbean.mrglooptask_rewardReq(cfg.id, callfunc)
		end
		items = self:getMrgTaskAward(cfg)
		is_enough = self:IsBagEnough(items)
	elseif category == TASK_CATEGORY_EPIC then
		reward_req = function()
			local data = self:getCurrEpicTaskData()
			i3k_sbean.epic_task_rewardReq(data.seriesID, data.groupID)
		end
		is_enough = self:isBagEnoughMainTaskAward(cfg)
		items = self:getMainTaskAward(cfg)
	elseif category == TASK_CATEGORY_ADVENTURE then
		local data = g_i3k_game_context:getAdventureTask()
		if i3k_db_adventure.circuit[data.id].isChoose > 0 then
			g_i3k_ui_mgr:OpenUI(i3k_db_adventure.choose[data.id].uiId)
			g_i3k_ui_mgr:RefreshUI(i3k_db_adventure.choose[data.id].uiId)
			return
		else
			reward_req = function()
				i3k_sbean.adtask_rewardReq(data.id)
			end
			is_enough = self:isBagEnoughMainTaskAward(cfg)
			items = self:getMainTaskAward(cfg)
		end
	elseif category == TASK_CATEGORY_CHESS then
		reward_req = function()
			i3k_sbean.chess_game_finish()
		end
		is_enough = self:isBagEnoughMainTaskAward(cfg)
		items = self:getMainTaskAward(cfg)
	elseif category == TASK_CATEGORY_JUBILEE then
		local callBack = function()
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow") --检测有没有新加入背包的物品
		end
		reward_req = function()
			i3k_sbean.jubilee_activity_step2_task_finish(callBack)
		end
		items = self:GetTaskAward(cfg)
		is_enough = self:IsBagEnough(items)
	elseif category == TASK_CATEGORY_SWORDSMAN then
		reward_req = function()
			local taskId = self:getSwordsmanCircleTask()
			if taskId > 0 then
				i3k_sbean.friend_circle_finish_task(taskId)
			end
		end
		is_enough = self:isBagEnoughMainTaskAward(cfg)
		items = self:getMainTaskAward(cfg)
	elseif category == TASK_CATEGORY_BIOGRAPHY then
		reward_req = function()
			local taskId = self:getBiographyTask()
			if taskId > 0 then
				i3k_sbean.biography_class_task_reward(self._curBiographyCareer, taskId)
			end
		end
		is_enough = self:isBagEnoughBiographyTaskAward(cfg)
		items = self:getBiographyTaskAward(cfg)
	end

	local last_dialog = function()
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue4,t[#t],reward_req,is_enough,items,motable[#t], category, cfg.id)
	end

	if #t == 0 then
		reward_req()
	else
		if #t == 1 then
			last_dialog()
		elseif #t > 1 then
			g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
			g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,last_dialog)
		end
	end
	if cfg.finishTaskNpcID ~= 0 then
		self:playNPCSound(cfg.finishTaskNpcID)
	end
end
--------------------------------
local GET_TASK_FUN = {
	[TASK_CATEGORY_MAIN] = function(dialogueNum)
		local id,_,state = g_i3k_game_context:getMainTaskIdAndVlaue()
		if state == 0 then
			i3k_sbean.mainTask_take(id, true)
		elseif not dialogueNum then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateMainTaskTag", true)
		end
	end,
	[TASK_CATEGORY_MRG] = function(dialogueNum)
		local data = g_i3k_game_context:GetMarriageTaskData()
		if data.state == 0 then
			i3k_sbean.mrgseriestask_takeReq(data.id)
		elseif not dialogueNum then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateMrgTaskTag", true)
		end
	end,
	[TASK_CATEGORY_MRG_LOOP] = function(dialogueNum)
		local data = g_i3k_game_context:GetMarriageTaskData()
		if data.state == 0 then
			i3k_sbean.mrglooptask_takeReq(data.id)
		elseif not dialogueNum then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateMrgTaskTag", true)
		end
	end,
	[TASK_CATEGORY_EPIC] = function(dialogueNum)
		local data = g_i3k_game_context:getCurrEpicTaskData()
		if data.state == 0 then
			i3k_sbean.epic_task_takeReq(data.seriesID, data.groupID, true)
		elseif not dialogueNum then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateEpicTaskTag", true)
		end
	end,

	[TASK_CATEGORY_ADVENTURE] = function(dialogueNum)
		local data = g_i3k_game_context:getAdventureTask()
		if data.state == 0 then
			i3k_sbean.adtask_takeReq(data.id)
		elseif not dialogueNum then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateAdventureTaskTag", true)
		end
	end,
	[TASK_CATEGORY_SWORDSMAN] = function(dialogueNum)
		local data = g_i3k_game_context:getSwordsmanCircleData()
		if data and data.taskStatus == 0 then
			i3k_sbean.friend_circle_take_task(data.curTaskId, 1)
		elseif not dialogueNum then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateSwordsmanTaskTag")
		end
	end,
	[TASK_CATEGORY_BIOGRAPHY] = function(dialogueNum)
		local id, _, state = g_i3k_game_context:getBiographyTask()
		if state == 0 then
			local careerId = g_i3k_game_context:getCurBiographyCareerId()
			i3k_sbean.biography_class_take_task(careerId, id)
		elseif not dialogueNum then
			g_i3k_ui_mgr:RefreshUI(eUIID_BiographyTask)
		end
	end,
}

--主线任务接取对白任务id，任务奖励items，任务目标描述tagDesc
function i3k_game_context:OpenGetTaskDialogue(cfg, category)

	local taskId = cfg.id
	local _cfg_desc = g_i3k_db.i3k_db_get_task_specialized_desc(cfg, false)
	local tagDesc = g_i3k_db.i3k_db_get_task_desc(cfg.type, cfg.arg1, cfg.arg2, 0,false,_cfg_desc)

	local t, motable = g_i3k_db.i3k_db_get_task_start_desc(cfg)

	local items = {}
	local start_func = GET_TASK_FUN[category]
	if category == TASK_CATEGORY_MAIN or category == TASK_CATEGORY_EPIC or category == TASK_CATEGORY_ADVENTURE or category == TASK_CATEGORY_SWORDSMAN then
		items = self:getMainTaskAward(cfg)
	elseif category == TASK_CATEGORY_MRG then
		items = self:getMrgTaskAward(cfg)
	elseif category == TASK_CATEGORY_MRG_LOOP then
		items = self:getMrgTaskAward(cfg)
	elseif category == TASK_CATEGORY_BIOGRAPHY then
		items = self:getBiographyTaskAward(cfg)
	end

	local fun = function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue3)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue3,t[last_index],items,tagDesc,motable[last_index],start_func, category, taskId)
	end
	self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.get)

	if #t == 0 then
		start_func(0)
	elseif #t == 1 then
		fun()
	elseif #t > 1 then
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun)
	end
end


---支线任务接取对话----
function i3k_game_context:GetSubLineTaskDialogue(groupId,id)
	local items = g_i3k_game_context:getSublineTaskAward(groupId, id)
	local t,motable = g_i3k_db.i3k_db_get_subline_task_get_desc(groupId,id)
	local cfg = g_i3k_db.i3k_db_get_subline_task_cfg(groupId,id)

	local tagDesc = g_i3k_db.i3k_db_get_task_desc(cfg.type, cfg.arg1, cfg.arg2, 0, false, nil)

	local callfunc = function()
		local data = self:getSubLineIdAndValueBytype(groupId)
		if data.state == 0 then
			i3k_sbean.branch_task_receive(groupId,true)
		end
	end

	local fun = function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue3)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue3,t[last_index],items,tagDesc,motable[last_index],callfunc)
	end

	if #t == 0 then
		if cfg.getTaskNpcID ~= 0 then
			g_i3k_logic:OpenFieldSublineTaskUI(cfg.getTaskNpcID)
		else
		callfunc()
		end
	elseif #t == 1 then
		fun()
	elseif #t > 1 then
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun)
	end
end

---支线任务完成对话---
function i3k_game_context:FinishSubLineTaskDialogue(groupId,id,is_enough,items,is_finish)

	local t,motable = g_i3k_db.i3k_db_get_subline_task_finish_desc(groupId,id)
	local cfg = g_i3k_db.i3k_db_get_subline_task_cfg(groupId,id)
	local groupId = cfg.taskgroupid
	local npcID = cfg.finishTaskNpcID
	local tasktype = cfg.type

	if cfg.type == g_TASK_USE_ITEM then
		local data = self:getSubLineIdAndValueBytype(groupId)
		if data.value == 0 then
			self:taskSubItem(TASK_CATEGORY_SUBLINE,cfg.arg1, cfg.arg2, groupId)
			return
		end
	end

	local callfunc = function()
		g_i3k_ui_mgr:CloseUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
	end

	local func = (function()
		local data = i3k_sbean.branch_task_finish_req.new()
		data.groupId = groupId
		data.__callback = callfunc
		i3k_game_send_str_cmd(data,i3k_sbean.branch_task_finish_res.getName())
	end)
	local fun = (function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue4,t[last_index],func,is_enough,items,motable[last_index])
	end)
	if #t == 0 then
		i3k_sbean.branch_task_finish(groupId,true)
	else
		if #t == 1 then
			fun()
		elseif #t > 1 then
			g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
			g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun)
		end
	end
	if npcID ~= 0 then
		self:playNPCSound(npcID)
	end
end

--身世任务接取对话
function i3k_game_context:GetLifeTaskDialogue(petID, taskID, items, tagDesc)
	if (not g_i3k_logic:IsRootUIBattle()) then
		return
	end
	local t,motable = g_i3k_db.i3k_db_get_life_task_get_desc(petID,taskID)
	local callfunc = (function()
		i3k_sbean.petlifetask_take(petID, taskID)
	end)

	local fun = (function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue3)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue3,t[last_index],items,tagDesc,motable[last_index],callfunc)
	end)
	local cfg = i3k_db_from_task[petID][taskID]
	self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.get)
	if #t == 0 then
		i3k_sbean.petlifetask_take(petID, taskID)
	elseif #t == 1 then
		fun()
	elseif #t > 1 then
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun)
	end
end

--完成身世任务对话
function i3k_game_context:FinishLifeTaskDialogue(petID,taskID,is_enough,items)
	-- if (not g_i3k_logic:IsRootUIBattle()) or  g_i3k_game_context:IsInLeadMode() then
	-- 	return
	-- end
	local t,motable = g_i3k_db.i3k_db_get_life_task_finish_desc(petID,taskID)
	local life_task_cfg = i3k_db_from_task[petID][taskID]
	local petID = life_task_cfg.petID
	local npcID = life_task_cfg.completeNpcID
	local npcid = life_task_cfg.replActionNpcId

	if npcid > 0 then
		local npc = self:GetNPCbyID(npcid)
		if npc then
			npc:ResetActName(i3k_db_common.engine.defaultStandAction)
		end
	end
	local callfunc = function()
		self:CheckSceneTriggerEffect(life_task_cfg, SCENE_EFFECT_CONDITION.finish)
		g_i3k_ui_mgr:CloseUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
	end
	local func = (function()
		if life_task_cfg.type == g_TASK_NPC_DIALOGUE then
			g_i3k_game_context:mainTaskPlayFlash(taskID)
		end
		local data = i3k_sbean.petlifetask_reward_req.new()
		data.petId = petID
		data.taskId = taskID
		data.__callback = callfunc
		i3k_game_send_str_cmd(data,i3k_sbean.petlifetask_reward_res.getName())
	end)
	if life_task_cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		func = i3k_sbean.dialogue_req
	end
	local fun = (function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue4,t[last_index],func,is_enough,items,motable[last_index], petID, taskID, life_task_cfg.arg1, life_task_cfg.arg2)
	end)
	if #t == 0 then
		if life_task_cfg.type == g_TASK_NEW_NPC_DIALOGUE then
			i3k_sbean.dialogue_req(TASK_CATEGORY_LIFE, life_task_cfg.arg1, life_task_cfg.arg2, taskID, petID)
		else
			i3k_sbean.petlifetask_reward(petID, taskID)
		end
	else
		if #t == 1 then
			fun()
		elseif #t > 1 then
			g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
			g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun, 0, petID, taskID, life_task_cfg.arg1, life_task_cfg.arg2)
		end
	end
	if npcID ~= 0 then
		self:playNPCSound(npcID)
	end
end

function i3k_game_context:SetTempMailContent(content)
	self._tempMailContent = content
end

function i3k_game_context:GetTempMailContent()
	if self._tempMailContent then
		return self._tempMailContent
	else
		return nil
	end
end

function i3k_game_context:setIsTempMailFull(isTrue)
	self._isTempMailFull = isTrue
end

function i3k_game_context:getIsTempMailFull()
	return self._isTempMailFull
end

function i3k_game_context:CheckJudgeEmailIsFull(fun, isFuben)
	if self:getIsTempMailFull() then
		if isFuben then
			g_i3k_ui_mgr:ShowMessageBox2(i3k_get_string(785), fun)
		else
			g_i3k_ui_mgr:ShowMessageBox2(i3k_get_string(784), fun)
		end
	else
		fun(true)
	end
end


-------------------邮件重构-----------------------------
function i3k_game_context:MailSaveSysMailData(sysMail)
	table.sort(sysMail, function (a, b)
		return a.sendTime>b.sendTime
	end)
	self._SysEmail = sysMail
	self:MailSetData(sysMail)
end

--------------------------MailSaveTempMailData
function i3k_game_context:MailSaveTempMailData(tempMail)
	table.sort(tempMail, function (a, b)
		return a.sendTime>b.sendTime
	end)
	self._tempEmail = tempMail
	self:MailSetData(tempMail)
end

function i3k_game_context:MailSaveSectMailData(tempMail)
	table.sort(tempMail, function (a, b)
		return a.sendTime>b.sendTime
	end)
	self._sectEmail = tempMail
	self:MailSetData(tempMail)
end
function i3k_game_context:MailSyncPageInfo(currentPage, pageCount, unreadCount, totalCount)
	self._currentPage = currentPage
	self._pageCount = pageCount
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Email, "setPageInfo", currentPage, pageCount, unreadCount, totalCount)
end

function i3k_game_context:GetSysMail()
	return self._SysEmail
end

function i3k_game_context:GetTempMail()
	return self._tempEmail
end
function i3k_game_context:GetSectMail()
	return self._sectEmail
end

function i3k_game_context:SyncMailState(mail, isSys)
	if isSys then
		for i,v in pairs(self._SysEmail) do
			if v.id==mail.id then
				v.state = mail.state
				break
			end
		end
	else
		for i,v in pairs(self._tempEmail) do
			if v.id==mail.id then
				v.state = mail.state
				break
			end
		end
	end
end
function i3k_game_context:SyncSectState(mail)
	for i,v in pairs(self._sectEmail) do
		if v.id == mail.id then
			v.state = mail.state
			break
		end
	end
end

function i3k_game_context:MailSetData(mails)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Email, "setMailData", mails)
end



---------------地图加载---------------------

function i3k_game_context:SetMapEnter(MapEnter)
	if MapEnter ~= nil then
		self._enterMap = MapEnter;
	end
end

function i3k_game_context:GetMapEnter()
	local logic = i3k_game_get_logic();
	if logic then
		local world = logic:GetWorld();
		if world then	-- and not world._syncRpc
			--return true;
			return self._enterMap
		end
	end

	return true;
	--return self._enterMap;
end

-------------采矿信息--------------------------

function i3k_game_context:SetMineInfo(TargetMine)
	if TargetMine then
		self._TargetMine = TargetMine;
	end
end

function i3k_game_context:GetMineInfo()
	return self._TargetMine;
end

--------------升级宝石需要材料-------------
function i3k_game_context:SetNeedMaterial(needMaterial)
	if needMaterial then
		self._needMaterial = needMaterial
	end
end

function i3k_game_context:GetNeedMaterial()
	return self._needMaterial
end

-------------镶嵌与升星强化红点之间逻辑----------------
function i3k_game_context:SetRedPoint(redP)
	if redP then
		self._redPoint = redP
	end
end

function i3k_game_context:GetRedPoint()
	return self._redPoint
end

------------我当前的队伍--------------------
function i3k_game_context:ResetMyTeam()
	if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) and not g_i3k_ui_mgr:GetUI(eUIID_BattleTask) and i3k_game_get_map_type()==g_FIELD then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTeam, "onBaseTaskBtn")
	end
	if self._myTeam.members then
		for k,v in pairs(self._myTeam.members) do
			if g_i3k_game_context:GetRoleId() ~= k then
				self:ChangeInvisible(k);
			end
		end
	end
	self._myTeam = {id = 0, leader = 0, members = {}, membersProfile = {}, membersPosition = {}, applicants = {}, membersState = {}}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "setPetsViewVisible", true)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateTeamMemberProfiles", self:GetRoleId(), self._myTeam.leader, self._myTeam.membersProfile)
	g_i3k_ui_mgr:CloseUI(eUIID_MyTeam)
	self:UpdateMercenaryPKState()
end

function i3k_game_context:SetMyTeam(id, leader, membersId)
	if id~=0 then
		if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "setPetsViewVisible", false)
		end
	end
	local team = {id = id, leader = leader, members = {}, membersProfile = {}, membersPosition = {}, applicants = {}, membersState = {}}
	local selfRoleId = self:GetRoleId()
	for i, e in pairs(membersId) do
		team.members[e] = true
		i3k_sbean.query_team_member(e)
	end
	self._myTeam = team

	self:setOpenTaskState(2)
	g_i3k_ui_mgr:RefreshUI(eUIID_BattleTeam)
	-- g_i3k_ui_mgr:RefreshUI(eUIID_BattleBase)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateTeamMemberProfiles", self:GetRoleId(), self._myTeam.leader, self._myTeam.membersProfile)
	self:UpdateMercenaryPKState()
end

function i3k_game_context:UpdateMercenaryPKState()
	local player = i3k_game_get_player()
	local world = i3k_game_get_world()
	if world and player and i3k_game_get_map_type() == g_FIELD then
		local MercenaryCount =  player:GetMercenaryCount()
		for i = 1,MercenaryCount do
			local mercenary = player:GetMercenary(i)
			if mercenary then
				world:UpdatePKState(mercenary)
			end
		end
	end
end

function i3k_game_context:TeamSyncMemberProfile(profile)
	local id = profile.overview.id
	local allCount = 0
	for i,v in pairs(self._myTeam.members) do
		if v then
			allCount = allCount + 1
		end
	end
	if self._myTeam.members[id] then
		self._myTeam.membersProfile[id] = profile
		local otherProfiles = self:GetTeamOtherMembersProfile()
		local leaderId = self:GetTeamLeader()
		local myId = self:GetRoleId()
		if id~=myId then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateTeamMemberProfiles", myId, leaderId, otherProfiles)
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_MyTeam, "updateTeamList", self._myTeam.leader, self._myTeam.membersProfile)
		g_i3k_ui_mgr:CloseUI(eUIID_Wjxx)
	end
	local profileCount = 0
	for i,v in pairs(self._myTeam.membersProfile) do
		profileCount = profileCount + 1
	end

	if profileCount==allCount then
		if g_i3k_ui_mgr:CloseUI(eUIID_Team) then
			g_i3k_ui_mgr:OpenUI(eUIID_MyTeam)
			g_i3k_ui_mgr:RefreshUI(eUIID_MyTeam, self:GetIsHaveReqForTeam(), self._myTeam.leader, self._myTeam.membersProfile)
		end
	end
	if profile.overview.gender ~= self:GetRoleGender() then
		self:SetTaskDataByTaskType(0, g_TASK_TEAM_WITH_ISOMERISM)
	end
end

function i3k_game_context:TeamMemberJoin(roleId, roleName)
	self._myTeam.members[roleId] = true
	self:ChangeInvisible(roleId);
	i3k_sbean.query_team_member(roleId)
	g_i3k_ui_mgr:RefreshUI(eUIID_BattleBase)
	self:UpdateMercenaryPKState()
end

function i3k_game_context:TeamMemberLeave(roleId, roleName)
	self._myTeam.members[roleId] = nil
	self._myTeam.membersProfile[roleId] = nil
	self._myTeam.membersPosition[roleId] = nil
	self._myTeam.membersState[roleId] = nil
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MyTeam, "updateTeamList", self._myTeam.leader, self._myTeam.membersProfile)
	for i,v in pairs(self._myTeam.membersProfile) do
		self:TeamSyncMemberProfile(v)
	end
	g_i3k_ui_mgr:CloseUI(eUIID_Wjxx)
	self:ChangeInvisible(roleId);
	self:UpdateMercenaryPKState()
end

function i3k_game_context:ChangeInvisible(roleId)
	local world = i3k_game_get_world();
	local Entity = world:GetEntity(eET_Player, roleId);
	if Entity and Entity._behavior:Test(eEBInvisible) then
		Entity:Show(false, true);
		Entity:SetHittable(false)
	end
end

function i3k_game_context:isInvisible()
	local hero = i3k_game_get_player_hero();
	if hero then
		if hero._behavior:Test(eEBInvisible) then
			return true;
		end
	end
	return false;
end

function i3k_game_context:TeamChangeLeader(roleId, roleName)
	self._myTeam.leader = roleId
	if roleId ~= self:GetRoleId() then
		self._myTeam.applicants = {}
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MyTeam, "updateTeamList", self._myTeam.leader, self._myTeam.membersProfile)
	for i,v in pairs(self._myTeam.membersProfile) do
		self:TeamSyncMemberProfile(v)
	end
	g_i3k_ui_mgr:CloseUI(eUIID_Wjxx)
end

function i3k_game_context:TeamSyncHp(roleId, curHp, maxHp)
	local memberProfile = self._myTeam.membersProfile[roleId]
	if memberProfile then
		memberProfile.curHp = curHp
		memberProfile.maxHp = maxHp
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTeam, "updateTeamMemberHp", roleId, memberProfile.curHp, memberProfile.maxHp)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleFubenDesert, "updateTeamMemberHp", roleId, memberProfile.curHp, memberProfile.maxHp)
	end
end

function i3k_game_context:TeamChangeState(roleId, state)
	state = roleId > 0 and state or 1
	self._myTeam.membersState[roleId] = state
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTeam, "updateTeamMemberState", roleId, state>0)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleFubenDesert, "updateTeamMemberState", roleId, state>0)
end

function i3k_game_context:GetTeamMemberState(roleId)
	return self._myTeam.membersState[roleId]
end

function i3k_game_context:IsAllTeamMemberIsConected()
	local isConect = true
	for i,v in pairs(self._myTeam.membersState) do
		if v==0 then
			isConect = false
			break
		end
	end
	return isConect
end


function i3k_game_context:GetTeamId()
	return self._myTeam.id
end

function i3k_game_context:GetTeam()
	return self._myTeam
end

function i3k_game_context:TeamChangePosition(roleId, mapId, position, line)
	position = {x = position.x/100, y = position.y/100, z = position.z/100}
	self._myTeam.membersPosition[roleId] = {mapId = mapId, pos = i3k_vec3_to_engine(position), line = line}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTeam, "updateTeamMemberLocation", roleId, mapId, position, line)
end

function i3k_game_context:GetTeamMemberPosition(roleId)
	return self._myTeam.membersPosition[roleId]
end

function i3k_game_context:IsTeamMember(roleId)
	return self._myTeam.members[roleId]
end

function i3k_game_context:ChangeMemberName(roleId, roleName)
	if self:IsTeamMember(roleId) and self._myTeam.membersProfile[roleId] then
		self._myTeam.membersProfile[roleId].overview.name = roleName
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTeam, "memberChangeName", roleId, roleName)
	end
end

function i3k_game_context:GetTeamLeader()
	return self._myTeam.leader
end

function i3k_game_context:IamTeamLeader()
	return self._myTeam.leader == self:GetRoleId()
end

function i3k_game_context:GetAllTeamMembers()
	return self._myTeam.membersProfile
end

function i3k_game_context:GetTeamMembers()
	local m = {}
	local selfRoleId = self:GetRoleId()
	if self._myTeam then
		for k, v in pairs(self._myTeam.members) do
			if k ~= selfRoleId then
				table.insert(m, k)
			end
		end
	end
	return m
end

function i3k_game_context:GetTeamMemberCount()
	return #self:GetTeamMembers()
end

function i3k_game_context:GetTeamOtherMembersProfile()
	local m = {}
	if self._myTeam.leader~=self:GetRoleId() then
		local leaderProfile = self._myTeam.membersProfile[self._myTeam.leader]
		if leaderProfile then
			table.insert(m, leaderProfile)
		end
	end
	for k, v in pairs(self._myTeam.membersProfile) do
		if k~=self._myTeam.leader and k~=self:GetRoleId() then
			table.insert(m, v)
		end
	end
	return m
end


function i3k_game_context:addJoinTeamApplicant(roleId)
	if self._myTeam.id > 0 then
		self._myTeam.applicants[roleId] = true
	end
end

function i3k_game_context:removeJoinTeamApplicant(roleId)
	self._myTeam.applicants[roleId] = nil
end

function i3k_game_context:GetJoinTeamApplicants()
	return self._myTeam.applicants
end



----------------当前有没有组队请求----------------------
function i3k_game_context:SetIsHaveReqForTeam(isHave)
	self._isHaveReqForTeam = isHave
end

function i3k_game_context:AddReqRole(role)
	if role then
		if self._isHaveReqForTeam then
		else
			self._isHaveReqForTeam = {}
		end
		table.insert(self._isHaveReqForTeam, role)
	end
end

function i3k_game_context:GetIsHaveReqForTeam()
	return self._isHaveReqForTeam
end

-------------选中的player的RoleId--------------------
function i3k_game_context:SetTargetGuid(guid)
	self._targetGuid = guid
end

function i3k_game_context:GetTargetClass()
	local guid = self._targetGuid
	if guid then
		local index = string.find(guid, '|', 1)
		local entityClass
		if index then
			entityClass = string.sub(guid, 1, index-1)
		end
		return entityClass
	else
		return nil
	end
end

function i3k_game_context:GetTargetId()
	local guid = self._targetGuid
	if guid then
		local entityClass = self:GetTargetClass()
		local index = string.find(guid, '|', 1)
		local roleId
		if index and entityClass=="i3k_hero" then
			roleId = tonumber(string.sub(guid, index+1, -1))
		end
		return roleId
	else
		return nil
	end
end


--返回当前地图出战佣兵的id列表
function i3k_game_context:GetFightMercenaries()
	local MercenaryIDs = {}
	local player = i3k_game_get_player()
	if player then
		for k = 1, player:GetMercenaryCount() do
			mercenary = player:GetMercenary(k);
			table.insert(MercenaryIDs, mercenary._cfg.id)
		end
	end
	return MercenaryIDs
end

--返回指定id的出战佣兵的信息(level, curHp, maxHp, curSp, maxSp, deadTime)
function i3k_game_context:GetFightMercenaryInfo(id)
	local player = i3k_game_get_player()
	for k = 1, player:GetMercenaryCount() do
		mercenary = player:GetMercenary(k);
		local mercenaryId = mercenary._cfg.id
		if mercenaryId == id then
			local level = mercenary._lvl
			local name = mercenary._cfg.name
			local curHp = mercenary:GetPropertyValue(ePropID_hp)
			local maxHp = mercenary:GetPropertyValue(ePropID_maxHP)
			local curSp = mercenary:GetPropertyValue(ePropID_sp)
			local maxSp = mercenary:GetPropertyValue(ePropID_maxSP)
			local deadTime = mercenary._deadTimeLine
			return level, name, curHp, maxHp, curSp, maxSp, deadTime
		end
	end
end



----------------获取login请求数据-------------
--function i3k_game_context:GetLoginInfo()
--	local loginData = self:GetLoginData();
--	if not loginData then
--		return false;
--	end
--
--	local loginInfo = i3k_sbean.UserLoginInfo.new()
--
--	local arg = i3k_sbean.UserLoginParam.new()
--	arg.loginType = loginData.utype + loginData.godMode
--	arg.loginKey = loginData.ukey
--	loginInfo.arg = arg
--
--	local client = i3k_sbean.UserClientinfo.new()
--	client.gameAppID = ""
--	client.clientVerPacket = i3k_game_get_client_version()
--	client.clientVerResource = i3k_game_get_client_res_version()
--	client.clientChannel = 0
--	loginInfo.client = client
--
--	local system = i3k_sbean.UserSysteminfo.new()
--	system.deviceID = g_i3k_game_handler:GetDeviceID()
--	system.systemHardware = ""
--	system.systemSoftware = ""
--	system.cpuHardware = ""
--	system.screenWidth = 0
--	system.screenHeight = 0
--	system.density = 0
--	system.network = 0
--	system.loginIP = ""
--	system.model = ""
--	system.macAddr = ""
--	loginInfo.system = system
--
--	return loginInfo
--end

--------------------副本奖励-----------------------
function i3k_game_context:SetFubenRewards(rewards)
	self._fubenRewards = rewards
end

function i3k_game_context:GetFubenRewards()
	local rewards = self._fubenRewards
	self._fubenRewards = nil
	return rewards
end


-----------------------聊天数据--------------------
function i3k_game_context:parseChatData(msg)
	local time = msg.time
	local msgType = msg.type
	local srcId = msg.srcId
	local srcName = msg.srcName
	local iconId = msg.headIcon
	local headBorder = msg.headBorder
	local bwType = msg.bwType
	local vipLvl = msg.vipLevel
	local srcSectId = msg.srcSectId
	local chatBox = msg.chatBox
	local msgContent = msg.content
	local Mtype = msgContent.type
	local sendFlowersInfo = msgContent.refSendFlowers
	local DiySkillData = msgContent.refFlauntDiySkill
	local showLoveItem = msgContent.refShowLoveItem -- 示爱道具
	local wizardTripPhoto = msgContent.refWizardTripPhoto -- 精灵旅行照片
	local moodDiaryShare = msgContent.refMoodDiaryShare -- 心情日记分享
	local moodDiarySendPopularity = msgContent.refMoodDiarySendPopularity -- 心情日记送礼
	local refFestivalBless = msgContent.refFestivalBless -- 世界祝福
	local constellationTest = msgContent.refConstellationTest -- 星语星愿分享
	local msgString = msgContent.msg
	local msgEquips = msgContent.refEquip
	local gsName = msg.gsName

	--如果是送花类型，则将其改为系统消息
	if Mtype == 2 then
		msgType = global_world
	end
	-- 如果是示爱道具类型
	if Mtype == 8 then
		msgType = global_world
	end
	--如果是正义之心，则将其改为系统消息
	if msgType == global_invite and Mtype == 5 then
		msgType = global_world
	end
	--如果是心情日记分享，gs名字改一下
	if Mtype == 11 then
		gsName = moodDiaryShare.serverName
	end
	--只有一个装备
	local temp = {}
	if msgEquips then
		temp.equip_id = msgEquips.id
		temp.equip_guid = msgEquips.guid

		local addValues = msgEquips.addValues
		local attribute_count = #addValues
		local att_t = {}

		for k=1,attribute_count do
			att_t[k] = addValues[k]
		end
		temp.attribute = att_t
		temp.naijiu = msgEquips.durability
		temp.refine = msgEquips.refine
		temp.legends = msgEquips.legends
	end

	local message = {}
	message.time = time
	message.type = msgType
	message.fromId = srcId
	message.fromName = srcName
	message.iconId = iconId
	message.headBorder = headBorder
	message.bwType = bwType
	message.msg = msgString
	message.msgType = Mtype
	message.sendFlowersData = sendFlowersInfo
	message.DiySkillData = DiySkillData
	message.showLoveItem = showLoveItem
	message.wizardTripPhoto = wizardTripPhoto
	message.moodDiaryShare = moodDiaryShare
	message.moodDiarySendPopularity = moodDiarySendPopularity
	message.refFestivalBless = refFestivalBless
	message.refConstellationTest = constellationTest
	message.equips = temp
	message.msgContent = msgContent
	message.vipLvl = vipLvl
	message.gsName = gsName
	message.srcSectId = srcSectId
	message.chatBox = chatBox

	local firstLetter = string.sub(msgString, 0, 1)
	local lastLetter = string.sub(msgString, string.len(msgString), string.len(msgString))
	if firstLetter=="#" and lastLetter=="#" then
		local function startWith(msg,str)
			local signLetter = string.sub(msg, 1, #str)
			return str == signLetter
		end
		-- local signLetter = string.sub(msgString, 2, 2)
		if startWith(msgString, "#MR") then
			local marriageId, otherName = string.match(msgString, "#MR(%d+),([^#]+)#")
			message.marriageId = marriageId
			message.otherName = otherName
		elseif startWith(msgString, "#MC") then
			local masterId, sharerName = string.match(msgString, "#MC(%d+),([^#]+)#")
			message.masterId = masterId
			message.sharerName = sharerName
		elseif startWith(msgString, "#SR") then
			message.jinLanCardID, message.jinlanFriends = string.match(msgString, "#SR(%d+),(%S+)#")
		elseif startWith(msgString, "#M") then

			local index1 = string.find(msgString, ',', 1)
			local index2 = string.find(msgString, ',', index1+1)
			local index3 = string.find(msgString, ',', index2+1)
			local index4 = string.find(msgString, ',', index3+1)

			local mapId = tonumber(string.sub(msgString, 3, index1-1))
			local posx = tonumber(string.sub(msgString, index1+1, index2-1))
			local posy = tonumber(string.sub(msgString, index2+1, index3-1))
			local posz = tonumber(string.sub(msgString, index3+1, index4-1))
			if posx and posy and posz then
				local pos = {x = posx/100, y = posy/100, z = posz/100}
				local mapLine = tonumber(string.sub(msgString, index4+1, string.len(msgString)-1))
				message.mapLine = mapLine
				message.mapId = mapId
				message.pos = pos
				message.isPos = true
			else
				return
			end
		elseif startWith(msgString, "#V") then --voice message
			message.isVoice = true
			--voice_url = string.sub(msgString, 3, string.len(msgString)-1)
			local voice_url, voice_sec = string.match(msgString, "#V([^#]+)#([^#]+)#")
			message.voiceUrl = voice_url
			message.voiceSec = voice_sec
		elseif startWith(msgString, "#ROLL") then
			local rollPoint = string.match(msgString, "#ROLL(%d+)#")
			message.rollPoint = tonumber(rollPoint)
		elseif startWith(msgString, "#R") then --组队副本房间
			message.isRoom = true
			if message.type ~= global_recent and message.type ~= global_cross then
				message.type = global_system
			end
			local index = string.find(msgString, ",")
			message.rMapId = tonumber(string.sub(msgString, 3, index-1))
			local index2 = string.find(msgString, ',', index+1)
			message.roomId = tonumber(string.sub(msgString, index+1, index2-1))
			message.roomType = tonumber(string.sub(msgString, index2+1, string.len(msgString)-1))
		elseif startWith(msgString, "#SOLO") then
			local soloresult, soloname = string.match(msgString, "#SOLO(%d+),([^#]+)#")
			message.isSolo = true
			message.soloresult = tonumber(soloresult)
			message.soloname = soloname
		elseif startWith(msgString, "#S") then
			message.isJoinSect = true
			local info = string.split(msgString, ",")
			message.sectId = tonumber(string.sub(info[1], 3, string.len(info[1])))
			message.sectName = info[2]
			message.sectDescType = tonumber(info[3])
			message.sectDesc = string.sub(info[4], 1, string.len(info[4]) - 1)
		elseif startWith(msgString, "#DPS") then
			local _, _, damage, monsterId = string.match(msgString, "#DPS(%d+),(%d+),(%d+),(%d+)#")
			message.isWoodMan = true
			message.damage = tonumber(damage)
			message.monsterId = tonumber(monsterId)
		elseif startWith(msgString, "#B") then
			local id, roleName, msgBless = string.match(msgString, "#B(%d+),(%S+),(%S+)#")
			message.isBless = true
			message.id = tonumber(id)
			message.roleName = roleName
			message.msgBless = msgBless
		end
	end

	local player = nil
	local recentMsgContent = nil
	if message.type == global_recent or message.type == global_cross then
		player = {}
		player.msgType = message.type
		player.id = message.fromId
		player.name = message.fromName
		player.iconId = message.iconId
		player.headBorder = message.headBorder
		player.bwType = message.bwType
		player.srcSectId = srcSectId
		player.vipLvl = vipLvl
		player.chatBox = chatBox

		player.msgContent = msgContent
		player.msgContent.time = time
		player.msgContent.fromId = message.fromId

		player.msgContent.equips = temp

		if message.isPos then
			player.msgContent.mapLine = message.mapLine
			player.msgContent.isPos = message.isPos
			player.msgContent.mapId = message.mapId
			player.msgContent.pos = message.pos
		end

		if message.isVoice then
			player.msgContent.isVoice = message.isVoice
			player.msgContent.voiceUrl = message.voiceUrl
			player.msgContent.voiceSec = message.voiceSec
		end

		if message.fromId<0 then
			player.msgContent.isFromSelf = true
		else
			player.msgContent.isFromSelf = false
		end
		recentMsgContent = self:addRecentChatData(player)
		self:SetChatData(message, 1)
	else
		self:SetChatData(message, message.type)
	end
	self:handleReceiveMessage(message)
	return message, player, recentMsgContent
end

function i3k_game_context:SetChatData(msg, msgType)
	local currChat = self._chatData[msgType+1]
	local wChat = self._chatData[2]
	if msgType ~= 1 then
		--table.insert(self._chatData[msgType+1], msg)
		currChat:push(msg)
	end
	--table.insert(self._chatData[2], msg)
	if msgType ~= global_system then
		wChat:push(msg)
	end

	--if currChat:size2()>50 then
		--table.remove(self._chatData[msgType+1], 1)
		--currChat:pop()
	--end
	--if wChat:size2() > 50 then
		--table.remove(self._chatData[2], 1)
		--wChat:pop()
	--end

	for i,e in pairs(self._chatData) do
		if i ~= 5 then
			for k,v in e:ipairs() do
				if v and v.fromId then
					if msg.fromId == v.fromId then
						if msg.iconId ~= v.iconId then
							v.iconId = msg.iconId
						end
						if msg.chatBox ~= v.chatBox then
							v.chatBox = msg.chatBox
						end
						if msg.headBorder ~= v.headBorder then
							v.headBorder = msg.headBorder
						end
						if msg.srcSectId ~= v.srcSectId then
							v.srcSectId = msg.srcSectId
						end
					end
				end
			end
		end
	end
end

function i3k_game_context:GetChatData()
	return self._chatData
end

function i3k_game_context:SaveChatMsg(msgTab)
	self._chatMsg = msgTab
end

function i3k_game_context:addChatMsg(msg)
	table.insert(self._chatMsg[msg.type+1], msg)
end

function i3k_game_context:reduceMsg(Msgtype)
	for i,e in ipairs(self._chatMsg) do
		if i == Msgtype+1 then
			self._chatMsg[i] = {}
		end
	end
end

function i3k_game_context:isEmpty()
	local isempty = true
	for k,v in ipairs(self._chatMsg) do
		if #v ~= 0 then
			isempty = false
		end
	end
	return isempty
end

function i3k_game_context:GetChatMsg()
	return self._chatMsg
end
--聊天本地显示信息
function i3k_game_context:ShowSysMessage(msg,title,type,syncType, args)
	local message = {}
	message.time = i3k_game_get_time()
	message.type = type
	message.fromName = title
	message.iconId = 0
	message.bwType = 0
	message.headBorder = 0
	message.msgType = global_system
	message.msg = msg
	message.syncType = syncType
	message.rollArgs = args
	if type == global_sect then
		message.help = true
		message.fromId = 2
		message.iconId = 2426
	elseif type == global_system then
		message.fromId = 0
		message.iconId = 2427
	end
	self:SetChatData(message,type)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Chat, "receiveNewMsg", message)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "receiveNewMsg", message)
end

function i3k_game_context:ShowSectMessage(msg, sectGarrisonBossId)
	local message = {}
	message.time = i3k_game_get_time()
	message.type = global_sect
	message.fromName = "帮派事件"
	message.factionThing = true
	message.iconId = 2426
	message.fromId = 2
	message.bwType = 0
	message.msgType = 0
	message.msg = msg
	if sectGarrisonBossId then
		message.sectGarrisonBossId = sectGarrisonBossId
	end
	g_i3k_game_context:SetChatData(message,global_sect)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Chat, "receiveNewMsg", message)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "receiveNewMsg", message)
end

-- 收到消息时候，需要做一些动作
function i3k_game_context:handleReceiveMessage(message)
	if message.msgType == 12 then -- 心情日记送礼
		if i3k_game_get_map_type() == g_FIELD and self:GetCurrentLine() ~= g_WORLD_KILL_LINE then
			local diaryGift = message.moodDiarySendPopularity
			local sid = i3k_game_get_server_id()
			if diaryGift.sendSid == sid or diaryGift.receiveSid == sid then
				local sendRname = diaryGift.sendRname
				local receiveRname = diaryGift.receiveRname
				local itemId = diaryGift.itemId
				local itemCnt = diaryGift.itemCnt
				local popularity = i3k_db_new_item[itemId].args1 * itemCnt

				local tipMsg = i3k_get_string(17206, sendRname, receiveRname, itemCnt,  g_i3k_db.i3k_db_get_common_item_name(itemId))
				local euiid = g_i3k_db.i3k_db_get_mood_diary_effect_uiid(itemId, popularity)
				if euiid then
					g_i3k_logic:OpenMoodDiaryEffect(euiid, tipMsg)
				end
			end
		end
	end
end

-----------------------最近联系人数据------------------------------
function i3k_game_context:addRecentChatData(player)
	local recentChatData = self._chatData[5]
	local msgContent = player.msgContent
	local exIndex
	for i,v in ipairs(recentChatData) do
		if math.abs(v.id)==math.abs(player.id) then
			exIndex = i
			if not msgContent.isFromSelf then
				v.msgType = player.msgType
				v.name = player.name
				v.iconId = player.iconId
				v.headBorder = player.headBorder
				v.vipLvl = player.vipLvl
				v.chatBox = player.chatBox
				if v.srcSectId ~= player.srcSectId then
					v.srcSectId = player.srcSectId
				end
			end
			break;
		end
	end
	if exIndex then
		if msgContent.msg then
			table.insert(recentChatData[exIndex].msgContent, msgContent)
			if #recentChatData[exIndex].msgContent > 50 then
				table.remove(recentChatData[exIndex].msgContent,1)
			end
		end
		-- if exIndex~=1 then
		-- 	local tb = recentChatData[exIndex]
		-- 	recentChatData:erase(exIndex)
		-- 	recentChatData:push(tb)
		-- end
	else
		player.msgContent = {}
		if msgContent.msg then
			table.insert(player.msgContent, msgContent)
		end
		-- if #recentChatData>30 then
		-- 	table.remove(recentChatData,1)
		-- end
		table.insert(recentChatData, player)
	end
	return msgContent
end

function i3k_game_context:GetRecentChatDataIndexWithMsg(msg)
	local exIndex
	for i,v in ipairs(self._chatData[5]) do
		if math.abs(v.id)==math.abs(msg.id) then
			exIndex = i
			break;
		end
	end

	return exIndex
end

function i3k_game_context:SetRecentChatData(roleId, funcId, func)
	local recentData = self._chatData[5]
	for i,v in ipairs(recentData) do
		if math.abs(v.id)==roleId then
			if funcId == 1 then --删除聊天人
				table.remove(recentData,i)
				func()
			elseif funcId == 2 then --清除内容
				v.msgContent = {}
				func()
			end
			break;
		end
	end
end

-- function i3k_game_context:SetRecentChatData(data)
-- 	self._recentChatData = data or {}
-- 	return self._recentChatData
-- end

function i3k_game_context:GetRecentChatData()
	return self._chatData[5]
end

-------------------------聊天面板是否打开-------------------------
function i3k_game_context:setChatUIOpenState(isOpen)
	self._isChatOpen = isOpen
end

function i3k_game_context:GetChatUIOpenState()
	return self._isChatOpen
end

function i3k_game_context:setPrivateChatUIOpenState(isOpenPrivate)
	self._isOpenPrivate = isOpenPrivate
end
function i3k_game_context:GetPrivateChatUIOpenState()
	return self._isOpenPrivate
end
------------------------是否收到私聊消息---------------------------
function i3k_game_context:SetIsHaveRecentMsg(isHave)
	self._isHaveNewRecentMsg = isHave
end

function i3k_game_context:GetIsHaveRecentMsg()
	return self._isHaveNewRecentMsg
end


-----------------------推荐好友的发送成功的时间戳-----------------
function i3k_game_context:SetRecommendSendTime(time)
	self._recommendSendTime = time
end

function i3k_game_context:GetRecommendSendTime()
	local time = self._recommendSendTime
	return time
end



-----------------------私聊的发送成功的时间戳-----------------
function i3k_game_context:SetPriviteSendTime(time)
	self._priviteSendTime = time
end

function i3k_game_context:GetPriviteSendTime()
	return self._priviteSendTime
end
-----------------------私聊消息记录时间戳-----------------
function i3k_game_context:SetPriviteMsgTime(time)
	self._priviteMsgTime = time
end

function i3k_game_context:GetPriviteMsgTime()
	return self._priviteMsgTime
end
----------------------世界的发送成功的时间戳------------------
function i3k_game_context:SetWorldSendTime(time)
	self._worldSendTime = time
end

function i3k_game_context:GetWorldSendTime()
	return self._worldSendTime
end

----------------------队伍的发送成功的时间戳------------------
function i3k_game_context:SetTeamSendTime(time)
	self._teamSendTime = time
end

function i3k_game_context:GetTeamSendTime()
	return self._teamSendTime
end

----------------------帮派的发送成功的时间戳--------------------
function i3k_game_context:SetSectSendTime(time)
	self._sectSendTime = time
end

function i3k_game_context:GetSectSendTime()
	return self._sectSendTime
end
-----------------------跨服的发送成功的时间戳-----------------------
function i3k_game_context:SetSpanSendTime(time)
	self._spanServiceSendTime = time
end

function i3k_game_context:GetSpanSendTime()
	return self._spanServiceSendTime
end


----------------------竞技场缓存进入次数--------------------------
function i3k_game_context:SetArenaEnterTimes(times)
	self._arenaEnterTimes = times
end

function i3k_game_context:GetArenaEnterTimes()
	return self._arenaEnterTimes
end

function i3k_game_context:AddArenaEnterTimes()
	self._arenaEnterTimes = self._arenaEnterTimes+1
end
----------------------竞技场刷新的敌人--------------------------
function i3k_game_context:SetArenaEnemys(enemys)
	self._arenaEnemys = enemys
end

function i3k_game_context:GetArenaEnemys()
	return self._arenaEnemys
end




----------------------竞技场缓存防守阵容--------------------
function i3k_game_context:SetArenaDefensive(lineup)
	self.arenaDefensive = lineup
end

function i3k_game_context:AddArenaDefensive(id)
	local isHave = false
	for i,v in pairs(self.arenaDefensive) do
		if tonumber(v)==id then
			isHave = true
			table.remove(self.arenaDefensive, i)
		end
	end
	if isHave then

	else
		if #self.arenaDefensive>=3 then
			table.remove(self.arenaDefensive, 1)
		end
		table.insert(self.arenaDefensive, id)
	end
end

function i3k_game_context:GetArenaDefensive()
	return self.arenaDefensive
end

-- 竞技场是否隐藏防守阵容
function i3k_game_context:GetIsHideArenaDefen()
	return self.isHideArenaDefen
end

function i3k_game_context:SetIsHideArenaDefen(val)
	self.isHideArenaDefen = val
end

----------------------竞技场最高排名-------------------------
function i3k_game_context:SetArenaRankBest(rank)
	self._arenaRankBest = rank
end

function i3k_game_context:GetArenaRankBest()
	return self._arenaRankBest
end


----------------------竞技场缓存出战随从-------------------------
function i3k_game_context:SetArenaPet(arenaPets)
	local isAdd = true
	for i,v in pairs(self._petTable) do
		if v.id==arenaPets.id then
			table.remove(self._petTable, i)
			isAdd = false
		end
	end
	if isAdd then
		if #self._petTable<3 then

		else
			table.remove(self._petTable, 1)
		end
		table.insert(self._petTable, arenaPets)
	end
end

function i3k_game_context:GetArenaPet()
	return self._petTable
end

function i3k_game_context:setArenaLogsRed(isShow)
	self._arenaLogsRed = isShow
	local isRedShow = self:isShowArenaListRedPoint()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Main, "setArenaRedSpot", isRedShow)
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_Arena, "setLogsRed", isShow)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "setLogsRed", isShow)
end

function i3k_game_context:getArenaLogsRed()
	return self._arenaLogsRed
end

function i3k_game_context:setArenaInteralRed(isShow)
	self._arenaInteralRed = isShow
	local isRedShow = self:isShowArenaListRedPoint()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Main, "setArenaRedSpot", isRedShow)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "setInteralRed", isShow)
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_Arena, "setInteralRed", isShow)
	if not isShow then
		self:ClearNotice(g_NOTICE_TYPE_CAN_REWARD_ARENA)
	end
end

function i3k_game_context:getArenaInteralRed()
	return self._arenaInteralRed
end
function i3k_game_context:setForceWarLotteryNum(num)
	self._forceWarLotteryNum = num
	local isRedShow = self:isShowArenaListRedPoint()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Main, "setArenaRedSpot", isRedShow)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "setForceWarLotteryRed")
end
function i3k_game_context:getForceWarLotteryNum()
	return self._forceWarLotteryNum
end
function i3k_game_context:setTodayForceWarTimes(times)
	self._todayForceWarTimes = times
end
function i3k_game_context:getTodayForceWarTimes()
	return self._todayForceWarTimes
end
function i3k_game_context:isShowArenaListRedPoint()
	return self._arenaInteralRed or self._arenaLogsRed or self._forceWarLotteryNum > 0
end

--[[----------------------竞技完成后是否打开竞技场界面---------------
function i3k_game_context:SetIsOpenArena(isOpen)
	self._isOpenArena = isOpen
end

function i3k_game_context:GetIsOpenArena()
	return self._isOpenArena
end--]]

----------------------缓存竞技场最高排名---------------------------
--[[function i3k_game_context:SetArenaBestRank(rankBest)
self._rankBest = rankBest
end

function i3k_game_context:GetArenaBestRank()
	return self._rankBest
end--]]



-----------------------缓存竞技场挑战次数--------------------------
function i3k_game_context:SetArenaChallengeTimes(timeUsed, totalTimes)
	self._challengeTimes.timeUsed = timeUsed
	self._challengeTimes.totalTimes = totalTimes
end

function i3k_game_context:GetArenaChallengeTimes()
	return self._challengeTimes.timeUsed, self._challengeTimes.totalTimes
end





-----------------------开始竞技时的冷却倒计时-------------------------
function i3k_game_context:StartAttackCoolTime(coolTime)
	if coolTime then
		self._attackCoolTime = coolTime
	else
		self._attackCoolTime = i3k_db_arena.arenaCfg.attackCoolTime
	end
	if g_sc1 then
		cc.Director:getInstance():getScheduler():unscheduleScriptEntry(g_sc1)
	end
	local function update(dTime)
		self._attackCoolTime = self._attackCoolTime - dTime
		--g_i3k_ui_mgr:InvokeUIFunction(eUIID_Arena, "cool", self._attackCoolTime)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "cool", self._attackCoolTime)
		if self._attackCoolTime<=0 then
			--g_i3k_ui_mgr:InvokeUIFunction(eUIID_Arena, "cool2")
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "cool2")
			cc.Director:getInstance():getScheduler():unscheduleScriptEntry(g_sc1)
		end

	end
	g_sc1=cc.Director:getInstance():getScheduler():scheduleScriptFunc(update, 0, false)
end


-------------------------竞技场攻击阵容战斗力--------------------
function i3k_game_context:SetAttackPower(power)
	self._attackPower = power
end

function i3k_game_context:GetAttackPower()
	return self._attackPower
end

------------------------活动出战佣兵--------------------------------
function i3k_game_context:SetActivityPets(pets)
	self._dailyActivityPets = {}
	for k, v in pairs(pets) do
		table.insert(self._dailyActivityPets, i3k_db_mercenaries[k])
	end
end

function i3k_game_context:AddActivityPets(pets, count)
	local isAdd = true
	for i = #self._dailyActivityPets, 1, -1 do
		if self._dailyActivityPets[i].id == pets.id then
			table.remove(self._dailyActivityPets, i)
			isAdd = false
		end
	end
	if isAdd then
		if #self._dailyActivityPets<count then

		else
			table.remove(self._dailyActivityPets, 1)
		end
		table.insert(self._dailyActivityPets, pets)
	end
end

function i3k_game_context:GetActivityPets()
	return self._dailyActivityPets
end

------------------------爬塔活动出战佣兵--------------------------------
function i3k_game_context:SetTowerActivityPets(pets)
	local index = 0
	for k, v in pairs(pets) do

		index = index +1
		if not self._towerActivityPets[index] then
			table.insert(self._towerActivityPets, i3k_db_mercenaries[k])

		end
		--table.insert(self._towerActivityPets, i3k_db_mercenaries[k])
	end
end

function i3k_game_context:AddTowerActivityPets(pets, count)
	local isAdd = true
	for i = #self._towerActivityPets, 1, -1 do
		if self._towerActivityPets[i].id == pets.id then
			table.remove(self._towerActivityPets, i)
			isAdd = false
		end
	end
	if isAdd then
		if #self._towerActivityPets<count then

		else
			table.remove(self._towerActivityPets, 1)
		end
		table.insert(self._towerActivityPets, pets)
	end
end

function i3k_game_context:GetTowerActivityPets()
	return self._towerActivityPets
end

-----------------------缓存爬塔挑战次数--------------------------
function i3k_game_context:SetTowerChallengeTimes(timeUsed,timeBuy, totalTimes)
	self._towerchallengeTimes.timeUsed = timeUsed
	self._towerchallengeTimes.totalTimes = totalTimes
	self._towerchallengeTimes.timeBuy = timeBuy
end

function i3k_game_context:GetTowerChallengeTimes()
	return self._towerchallengeTimes.timeUsed,self._towerchallengeTimes.timeBuy, self._towerchallengeTimes.totalTimes
end

------爬塔相关函数
function i3k_game_context:SetRoleTowerPrestigeLvl(id,level,fame)
	self._towerPrestige[id]={ id=id,lvl = level,fame = fame}
end

function i3k_game_context:GetRoleTowerPrestigeLvl(id)
	return self._towerPrestige[id].lvl
end

function i3k_game_context:GetRoleTowerPrestigeValue(id)
	local lvl = self._towerPrestige[id].lvl
	local sumValue = 0
	for i,e in ipairs(i3k_db_climbing_tower_prestige[id]) do
		if e.lvl<=lvl then
			sumValue = sumValue+e.needPrestige
		else
			break
		end
	end
	local removeValue = self._towerPrestige[id].fame - sumValue
	i3k_log("shengwangzhi is = ",removeValue)
	return removeValue
end

--判断声望值是否超出
--[[function i3k_game_context:isEnoughTowerPrestigeValue(id, items)
	local last_items = {}
	local totalvalue = 0 --升到满级所需要的总声望值
	local lvl = self:GetRoleTowerPrestigeLvl(id)
	local value = self:GetRoleTowerPrestigeValue(id)
	for i = lvl + 1 , #i3k_db_climbing_tower_prestige[id] do
		totalvalue = totalvalue + i3k_db_climbing_tower_prestige[id][i].needPrestige
	end
	totalvalue = totalvalue - value
	if items then
		for k , v in pairs(items) do
			local count = 0
			if v._count * v._value >= totalvalue then
				count, f = math.modf(totalvalue/v._value)
				if f > 0 then
					count = count + 1
				end
				table.insert(last_items, {_id = v._id, _count = count, _value = v._value})
				break
			else
				totalvalue = totalvalue - v._count * v._value
				count = v._count
				table.insert(last_items, {_id = v._id, _count = count, _value = v._value})
			end
		end
	end
	return last_items
end--]]

function i3k_game_context:setTowerKillCount(count)
	local world = i3k_game_get_world()
	self._towerkillcount = count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_KillTarget, "showInfo",self._towerkillcount)
end

function i3k_game_context:getTowerKillCount()
	return self._towerkillcount;
end
---爬塔扫荡记录
function i3k_game_context:setTowerSweep(groupID,floor,fbID)
	self._towerSweep = {groupID = groupID,floor=floor,fbID=fbID}
end
function i3k_game_context:getTowerSweep()
	return self._towerSweep.groupID ,self._towerSweep.floor,self._towerSweep.fbID
end

----秘境
function i3k_game_context:setSecretareaTaskId(id,value,reward)
	self._secretareaTb.id = id
	self._secretareaTb.value = value
	self._secretareaTb.reward = reward
	--DCAccount.removeTag("秘境任务", "")
	if id > 0 then
		--DCAccount.addTag("秘境任务", tostring(id))
		DCEvent.onEvent("秘境任务",{["任务ID"] = tostring(id)})
	end
end

function i3k_game_context:getSecretareaTaskId()
	return self._secretareaTb.id,self._secretareaTb.value,self._secretareaTb.reward
end

--清空已有的秘境任务
function i3k_game_context:ResetDaySecretareaTask()

	self:setSecretareaTaskId(-1, 0, 0)--重置
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateTaskInfo")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"removeSecreTaskItem")
	self:removeTaskData(TASK_CATEGORY_SECRETAREA)
end

---记录秘境界面需要传的信息
function i3k_game_context:setSecretareaTaskInfo(info)

	self.secretareaTaskInfo = info
end
function i3k_game_context:getSecretareaTaskInfo()

	return self.secretareaTaskInfo
end

function i3k_game_context:setInSecretareaMap(mapId)
	self._secretareaMapId = mapId
end

function i3k_game_context:getInSecretareaMap()
	return self._secretareaMapId
end

---------势力战相关函数start----------------------------------------------------------------------
function i3k_game_context:setForceWarCfgInfo(isjoin,weekFeats,totalFeats,punishEndTime)
	self._forceWarInfo = {join = isjoin,weekFeats = weekFeats,totalFeats = totalFeats,punishEndTime = punishEndTime}
end

function i3k_game_context:getForceWarCfgInfo()
	return self._forceWarInfo
end

function i3k_game_context:ResetForceWarData()
	self._forceWarTeam = {id = 0,  members = {}, membersPosition = {},statues= {},statuesPosition={}}
	self._forceWarisUpdateTime = false
end

function i3k_game_context:setForceWarUpdateTime(isUpdate)
	self._forceWarisUpdateTime = isUpdate
end

---势力战副本结束是否显示自动关闭倒计时
function i3k_game_context:getForceWarUpdateTime()
	return self._forceWarisUpdateTime
end

function i3k_game_context:setForceWarDropOutState(isMatching)
	self._forceWarDropOutState = isMatching
end

function i3k_game_context:getForceWarDropOutState()
	return self._forceWarDropOutState
end

---势力战双方分数
function i3k_game_context:setForceWarScore(white,black)
	self._forceWarScore ={whiteScore = white,blackScore = black}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "showInfo",self._forceWarScore.whiteScore,self._forceWarScore.blackScore)
end

function i3k_game_context:getForceWarScore()
	return self._forceWarScore
end

---势力战自身分数
function i3k_game_context:setForceWarSelfScore(Score)
	self._forceWarSelfScore = Score
end

---势力战增加的武勋
function i3k_game_context:setForceWarAddFeat(feat)
	self._forceWarFeat = self._forceWarFeat + feat
end

function i3k_game_context:getForceWarAddFeat()
	return self._forceWarFeat
end

---势力战的周武勋
function i3k_game_context:setForceWarAddWeekFeats(feat)
	self._forceWarWeekFeat =  feat
end
function i3k_game_context:getForceWarAddWeekFeats()

	return self._forceWarWeekFeat
end

function i3k_game_context:getForceWarSelfScore()
	return self._forceWarSelfScore
end

---势力战副本中成员数据
function i3k_game_context:setForceWarMemberInfo(RoleID,bwtype)
	local heroId = self:GetRoleId()
	if RoleID ~= heroId then
		self._forceWarTeam.members[RoleID] = {id = RoleID, bwtype = bwtype}
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "SetMemberLocation",RoleID, bwtype )
	end
end

function i3k_game_context:setForceWarMemberPosition(RoleID,position,mapId)
	local heroId = self:GetRoleId()
	if RoleID ~= heroId then
		position = {x = position.x/100, y = position.y/100, z = position.z/100}
		self._forceWarTeam.membersPosition[RoleID] = {mapId = mapId, pos = i3k_vec3_to_engine(position)}
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "SetMemberLocation", RoleID )
	end
end

function i3k_game_context:ForceWarMemberLeave(roleId, forceType)
	self._forceWarTeam.members[roleId] = {}
	self._forceWarTeam.membersPosition[roleId] = {}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "SetMemberLocation",roleId, forceType)
end

--- 设置雕像位置
function i3k_game_context:setForceWarStatuesPosition(statuesid,cfgID,position,mapId)
	position = {x = position.x/100, y = position.y/100, z = position.z/100}
	local monsterSide = i3k_db_monsters[cfgID].camp --怪物阵营
	self._forceWarTeam.statuesPosition[statuesid] = {mapId = mapId, pos = i3k_vec3_to_engine(position)}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "SetStatueLocation", statuesid,monsterSide )
end

function i3k_game_context:GetForceWarMemberPosition(roleId)
	return self._forceWarTeam.membersPosition[roleId]
end
---势力战副本中雕像数据
function i3k_game_context:setForceWarStatuesInfo(statuesid,curHP,cfgID,maxHP)
	self._forceWarTeam.statues[statuesid] = nil
	local monsterSide = i3k_db_monsters[cfgID].camp --怪物阵营
	self._forceWarTeam.statues[statuesid] = {id = statuesid,cfgid=cfgID ,curHP = curHP,maxHP=maxHP,bwtype = monsterSide}
end

--保存水晶的血量
function i3k_game_context:setForceWarBossHp(statuesid,curHP)
	for k,v in pairs(self._forceWarTeam.statues) do
		if statuesid == v.id then
			v.curHP = curHP
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "showTargetInfo",cfgID)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "showPopupTipMessage",cfgID)
end

---势力战副本中雕像死亡的数据
function i3k_game_context:setForceWarStatuesNums(statuesid,curHP)
	if curHP == 0 then
		self._statuesData[statuesid] = {id = statuesid, curHP = curHP}
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "showTargetInfo")
	end
	for k,v in pairs(self._forceWarTeam.statues) do
		if v.id == statuesid then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "SetStatueLocation",v.id, v.bwtype)
		end
	end
end

function i3k_game_context:GetForceWarStatuesNums()
	return self._statuesData
end

function i3k_game_context:GetForceWarStatuesPosition(roleId)
	return self._forceWarTeam.statuesPosition[roleId]
end

function i3k_game_context:getForceWarStatuesInfo()
	local whiteSide = {}
	if self._forceWarTeam then
		for k, v in pairs(self._forceWarTeam.statues) do
			local already_death = false
			for i,e in pairs(self._statuesData) do
				if v.id == e.id then
					already_death = true
				end
			end
			if not already_death then
				table.insert(whiteSide, v)
			end
		end
	end
	return whiteSide
end

function i3k_game_context:getForceWarMemberInfo()
	local otherSide = {}
	local selfRoleId = self:GetRoleId()
	if self._forceWarTeam then
		for k, v in pairs(self._forceWarTeam.members) do
			if v.id ~= selfRoleId then
				table.insert(otherSide, v)
			end
		end
	end
	return otherSide
end

function i3k_game_context:IsForceWarMember(roleId)
	return self._forceWarTeam.members[roleId]
end
function i3k_game_context:IsForceWarStatues(statuesid)
	return self._statuesData[statuesid]
end

---记录势力战里雕像的总数
function i3k_game_context:setForceWarStatuesCount(NormalStatue,BigStatue)
	self._forceWarStatuesCount ={totalNormalStatue = NormalStatue,totalBigStatue = BigStatue}
	if not g_i3k_ui_mgr:GetUI(eUIID_ForceWarKillNumber) then
		g_i3k_ui_mgr:OpenUI(eUIID_ForceWarKillNumber)
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_ForceWarKillNumber)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "showTargetInfo")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "showInfo",self._forceWarScore.whiteScore,self._forceWarScore.blackScore)
end

function i3k_game_context:getForceWarStatuesCount()
	return self._forceWarStatuesCount.totalNormalStatue,self._forceWarStatuesCount.totalBigStatue
end

---------势力战相关函数end----------------------------------------------------------------------

function i3k_game_context:setCameraAngle(index)
	local angle = nil
	if i3k_get_is_tournament_weapon() then --神器乱战三方摄像机角度
		local camerCfgTb = {
			i3k_db_common.mapCameraAngle.tournamentWeaponA_angle,
			i3k_db_common.mapCameraAngle.tournamentWeaponB_angle,
			i3k_db_common.mapCameraAngle.tournamentWeaponC_angle,
		}
		if camerCfgTb[index] then
			angle = math.pi * camerCfgTb[index]/180
		end
	elseif g_i3k_db.i3k_db_get_tournament_type(g_i3k_game_context:GetWorldMapID()) == g_TOURNAMENT_CHUHAN then
		local camerCfgTb = {
			i3k_db_common.mapCameraAngle.tournamentChuHanA_angle,
			i3k_db_common.mapCameraAngle.tournamentChuHanB_angle,
		}
		if camerCfgTb[index] then
			angle = math.pi * camerCfgTb[index]/180
		end
	else
		local mapType = i3k_game_get_map_type()
		if index == 1 then
			local tb1 = {
				[g_TOURNAMENT]	= i3k_db_common.mapCameraAngle.tournamentA_angle,
				[g_FORCE_WAR]	= i3k_db_common.mapCameraAngle.forceWarA_angle,
				[g_BUDO]		= i3k_db_common.mapCameraAngle.fightTeamA_angle,
				[g_SPY_STORY]	= i3k_db_common.mapCameraAngle.spyStoryA_angle,
			}
			angle = tb1[mapType] or i3k_db_common.mapCameraAngle.forceWarA_angle --帮派战或者其他类型未定义副本 angle 取势力战配置
			angle = math.pi * angle/180
		elseif index == 2 then
			local tb2 = {
				[g_TOURNAMENT]	= i3k_db_common.mapCameraAngle.tournamentB_angle,
				[g_FORCE_WAR]	= i3k_db_common.mapCameraAngle.forceWarB_angle,
				[g_BUDO]		= i3k_db_common.mapCameraAngle.fightTeamB_angle,
				[g_SPY_STORY]	= i3k_db_common.mapCameraAngle.spyStoryB_angle
			}
			angle = tb2[mapType] or i3k_db_common.mapCameraAngle.forceWarB_angle --帮派战或者其他类型未定义副本 angle 取势力战配置
			angle = math.pi * angle/180
		end
	end
	self._angle = angle
end

function i3k_game_context:getCameraAngle()
	return self._angle
end
-----------------------活动传送至boss的冷却倒计时-------------------------
function i3k_game_context:StartTransCoolTime(coolTime)
	if coolTime then
		self._actTransCoolTime = coolTime
	else
		self._actTransCoolTime = i3k_db_common.activity.transCoolTime
	end
	if g_scTrans then
		cc.Director:getInstance():getScheduler():unscheduleScriptEntry(g_scTrans)
	end
	local function update(dTime)
		self._actTransCoolTime = self._actTransCoolTime - dTime
		local bossSelectUI = g_i3k_ui_mgr:GetUI(eUIID_BossSelect)
		if bossSelectUI then
			local btnName = bossSelectUI:GetChildByVarName("transName")
			btnName:setText("重置")
			local needItemIcon = bossSelectUI:GetChildByVarName("needItemIcon")
			needItemIcon:setImage(g_i3k_db.i3k_db_get_icon_path(33))
			local lock = bossSelectUI:GetChildByVarName("lock")
			lock:show()
			local gradeIcon = bossSelectUI:GetChildByVarName("gradeIcon")
			gradeIcon:setOpacity(0)
			local transToPos = bossSelectUI:GetChildByVarName("transToPos")
			transToPos:onClick(bossSelectUI, bossSelectUI.resetCoolTime)

			local coolRoot = bossSelectUI:GetChildByVarName("coolRoot")
			coolRoot:show()

			local coolTimeLabel = bossSelectUI:GetChildByVarName("coolTimeLabel")
			coolTimeLabel:setText(os.date("%M:%S", math.ceil(self._actTransCoolTime)))
			local needDiamondLabel = bossSelectUI:GetChildByVarName("needDiamond")
			local needCount = i3k_db_common.activity.resetCoolDiamond--.arenaCfg.cleanCoolDiamond
			local needText = string.format("x%d", needCount)
			needDiamondLabel:setText(needText)
		end
		local usercfg = g_i3k_game_context:GetUserCfg()
		usercfg:SetActTransCoolTime(self._actTransCoolTime)
		if self._actTransCoolTime<=0 then
			if bossSelectUI then
				local btnName = bossSelectUI:GetChildByVarName("transName")
				btnName:setText("传送")
				local transToPos = bossSelectUI:GetChildByVarName("transToPos")
				transToPos:onTouchEvent(bossSelectUI, bossSelectUI.transToBossPos)

				local coolTimeLabel = bossSelectUI:GetChildByVarName("coolTimeLabel")
				coolTimeLabel:hide()
				local needItemIcon = bossSelectUI:GetChildByVarName("needItemIcon")
				needItemIcon:setImage(g_i3k_db.i3k_db_get_common_item_icon_path(i3k_db_common.activity.transNeedItemId,i3k_game_context:IsFemaleRole()))
				local lock = bossSelectUI:GetChildByVarName("lock")
				lock:hide()
				local gradeIcon = bossSelectUI:GetChildByVarName("gradeIcon")
				gradeIcon:setOpacity(255)
				local needDiamondLabel = bossSelectUI:GetChildByVarName("needDiamond")
				needDiamondLabel:setText("x1")
			end
			usercfg:SetActTransCoolTime(0)
			cc.Director:getInstance():getScheduler():unscheduleScriptEntry(g_scTrans)
		end

	end
	g_scTrans = cc.Director:getInstance():getScheduler():scheduleScriptFunc(update, 0, false)
end
---判断是否获得神兵
function i3k_game_context:IsHaveShenbing(id)
	if self._shenBing.all[id] then
		return true
	else
		return false
	end
end

function i3k_game_context:haveShenbingCount()
	local count = 0
	for k,v in pairs(self._shenBing.all) do
		count = count + 1
	end
	if count > 1 then
		return true
	else
		return false
	end
end

--判断神兵是否满星
function i3k_game_context:isMaxWeaponStar(id)
	local lvl = self:GetShenbingStarLvl(id)
	if not i3k_db_shen_bing_upstar[id][lvl+ 1] then
		return true
	end
	return false
end
--------------------------判断神兵是否可升级或者升星----------------------

function i3k_game_context:isEnoughUpWeaponStar(id,lvl)
	local lvl = self:GetShenbingStarLvl(id)
	if not i3k_db_shen_bing_upstar[id][lvl+ 1] then
		return false
	end
	local itemid = i3k_db_shen_bing_upstar[id][lvl+ 1].itemid
	local count = i3k_db_shen_bing_upstar[id][lvl+ 1].itemCount
	local replace = i3k_db_shen_bing_upstar[id][lvl+ 1].replaceItem
	return self:GetCommonItemCanUseCount(itemid) + self:GetCommonItemCanUseCount(replace) >= count
end

function i3k_game_context:isEnoughUpWeaponlvl(id)
	local role_lvl = self:GetLevel()
	if role_lvl < i3k_db_common.functionOpen.shenbingshengjiOpenLvl then
		return false
	end
	local lvl = self:GetShenBingQlvl(id)
	local maxLevel = #i3k_db_shen_bing_uplvl[id]
	local need_level = lvl == maxLevel and i3k_db_shen_bing_uplvl[id][lvl].needLevel or i3k_db_shen_bing_uplvl[id][lvl+1].needLevel
	if need_level > role_lvl then
		return false
	end
	if not i3k_db_shen_bing_uplvl[id][lvl+1] then
		return false
	end
	local now_exp = self:GetShenbingExp(id)
	local items = i3k_db_shen_bing_uplvl[id][lvl].itemid
	local has_least_one = false
	for i,v in ipairs(items) do
		if self:GetCommonItemCanUseCount(v) > 0 then
			has_least_one = true
			break
		end
	end
	if has_least_one == false then
		--g_i3k_ui_mgr:PopupTipMessage("您未持有任何经验道具，无法一键升级")
		return false
	end

	local temp_lvl = self:getLvlExp(id,role_lvl,lvl,now_exp,items)
	local tmp_items = i3k_db_shen_bing_uplvl[id][temp_lvl].itemid
	local final_lvl,final,final_exp,need_exp = self:getLvlExp(id,role_lvl,lvl,now_exp,tmp_items)
	local needLevel = i3k_db_shen_bing_uplvl[id][final_lvl].needLevel
	if  needLevel > role_lvl then
		return false
	end
	local last_exp = 0
	if final_exp >= need_exp then
		last_exp = final_exp - need_exp
	else
		last_exp = final_exp
	end

	local compare_lvl = {isUpLvl= false, before_lvl=0}
	if final_lvl ~= lvl then
		compare_lvl.isUpLvl = true
		compare_lvl.before_lvl = lvl
	end
	local need_items = {}
	for k, v in pairs(final) do
		if self:GetCommonItemCount(k) >= v then
			need_items[k] = v
		else
			if self:GetCommonItemCount(k) > 0 then
				need_items[k] = self:GetCommonItemCount(k)
			end
			need_items[-k] = v - self:GetCommonItemCount(k)
		end
 	end
	return need_items, final_lvl, last_exp, compare_lvl
end

function i3k_game_context:getLvlExp(id,role_lvl,up_lvl,total_exp,items)
	local temp = {}
	local is_ok = false
	local last_item_count = 0
	local need_exp = 0
	for k,v in ipairs(items) do
		local count = self:GetCommonItemCanUseCount(v)
		if count ~= 0 then
			for j=1,count do
				local tmp_cfg = g_i3k_db.i3k_db_get_common_item_cfg(v)
				total_exp = tmp_cfg.args1 + total_exp
				need_exp = 0
				while i3k_db_shen_bing_uplvl[id][up_lvl + 1]  do
					need_exp = need_exp + i3k_db_shen_bing_uplvl[id][up_lvl +1].exp
					if total_exp >= need_exp then
						total_exp = total_exp - need_exp
						need_exp = 0
						up_lvl = up_lvl + 1
						local needLevel = i3k_db_shen_bing_uplvl[id][up_lvl+1].needLevel
						if needLevel > role_lvl then
							is_ok = true
							last_item_count = j
							break
						end
					else
						break
					end

				end
				if is_ok then
					break
				end
			end
			if is_ok then
				temp[v] = last_item_count
				break
			end
			temp[v] = count
		end
	end
	return up_lvl,temp,total_exp,need_exp
end

function i3k_game_context:isEnougSummonWeapon(id)
	local allShenbing = self:GetShenbingData()
	if not allShenbing[id] then
		local _tmp_need = i3k_db_shen_bing[id].itemid
		local _tmp_need_count = i3k_db_shen_bing[id].itemCount
		return self:GetCommonItemCanUseCount(_tmp_need) >= _tmp_need_count
	end
end

---神兵外部红点
function i3k_game_context:canBetterWeapon()
	--[[
	local is_ok = {is_ok1 = false, is_ok2 = false, is_ok3 = false, is_ok4 = false, is_ok5 = false}
	for i, e in ipairs(i3k_db_shen_bing) do
		local ok = string.format("is_ok%s",i)
		local allShenbing = self:GetShenbingData()
		if e.canUse then
			if allShenbing[e.id] then
				if self:isEnoughUpWeaponlvl(e.id) or self:isEnoughUpWeaponStar(e.id) then
					is_ok[ok] = true
				end
			else
				local _tmp_need = i3k_db_shen_bing[e.id].itemid
				local _tmp_need_count = i3k_db_shen_bing[e.id].itemCount
				if self:GetCommonItemCanUseCount(_tmp_need) >= _tmp_need_count then
					is_ok[ok] = true
				end
			end
		end
	end
	if is_ok.is_ok1 or is_ok.is_ok2 or is_ok.is_ok3 or is_ok.is_ok4 or is_ok.is_ok5 then
		return true
	else
		return false
	end
	]]
	local allShenbing = self:GetShenbingData()
	for i, e in pairs(i3k_db_shen_bing) do
		if e.canUse then

			if allShenbing[e.id] then--解锁
				--i3k_log("-----canBetterWeapon -------",self:isEnoughUpWeaponlvl(e.id) , self:isEnoughUpWeaponStar(e.id) )--
				local talentRedPoint = false
				if g_i3k_game_context then
					local isCanTalentPoint = false
					if not g_i3k_game_context:IsShenBingCanInput(e.id) then
						isCanTalentPoint = false
					else
						isCanTalentPoint = g_i3k_game_context:IsShenBingCanInput(e.id)
					end

					if isCanTalentPoint and not self.shenbingTalentRedPoint[e.id] then
						talentRedPoint = true
					end
					if g_i3k_game_context:GetLevel() < i3k_db_common.functionOpen.shenbingtianfuOpenLvl then
						talentRedPoint = false
					end
				end
				if self:isEnoughUpWeaponlvl(e.id) or self:isEnoughUpWeaponStar(e.id) or talentRedPoint or g_i3k_game_context:GetShenBingUniqueRedPointState(e.id) or self:GetWeaponAwakeRed(e.id) then
					return true
				end
			else
				if self:isEnougSummonWeapon(e.id) then

					return true
				end


			end
		end
	end
	return false
end
----------------------------------判断心法是否可以升级---------------------------------------
function i3k_game_context:canBetterSkillOrSpirit()
	return self:isShowSkillRedPoint() or self:isShowXinfaRedPoint() or self:isShowUniqueSkillRedPoint() or self:GetIsMeridianRed() or self:isShowWujueRedPoint()
end
--判断是否背包中有这个心法ID的心法书
function i3k_game_context:isHaveXinfaBook(xinfaID)
	local _temp_item = i3k_db_xinfa[xinfaID].itemID
	local have_count = self:GetCommonItemCanUseCount(_temp_item)
	return have_count > 0
end
-- 心法是否可以继续研读
function i3k_game_context:isXinfaEnoughUpLvl(id,lvl)
	if i3k_db_xinfa_data[id][lvl + 1] then
		local is_ok1 = true
		local is_ok2 = true
		local item1Count =  i3k_db_xinfa_data[id][lvl + 1].item1Count
		local have_count = self:GetCommonItemCanUseCount(g_BASE_ITEM_BOOK_ENERGY)
		if have_count < item1Count then
			is_ok1 = false
		end
		local itemi2 = i3k_db_xinfa_data[id][lvl + 1].item2ID
		local item2Count =  i3k_db_xinfa_data[id][lvl + 1].item2Count
		if itemi2 ~= 0 then
			local have_count = self:GetCommonItemCanUseCount(itemi2)
			if have_count < item2Count then
				is_ok2 = false
			end
		end
		return is_ok1 and is_ok2
	else
		return false
	end
end

--判断3种心法类型是否可以学习的通用方法
function i3k_game_context:isCanLearnXinfa(xinfaType)
	local zyID = self:GetRoleType()
	local transfromLvl = self:GetTransformLvl()
	local BWtype = self:GetTransformBWtype()

	local xinfa = self:GetXinfa()
	local useXinfa = self:GetUseXinfa()
	local xinfaData = {}
	if xinfaType == 1 then --职业
		use_data = useXinfa._zhiye
		zy_data = xinfa._zhiye
		if transfromLvl == 0 then
			xinfaData = i3k_db_generals[zyID].zyXinfa
		else
			xinfaData = i3k_db_zhuanzhi[zyID][transfromLvl][BWtype].zyXinfa
		end
	elseif xinfaType == 2 then  --江湖
		use_data = useXinfa._jianghua
		zy_data = xinfa._jianghua
		if transfromLvl == 0 then
			xinfaData = i3k_db_generals[zyID].jhXinfa
		else
			xinfaData = i3k_db_zhuanzhi[zyID][transfromLvl][BWtype].jhXinfa
		end
	elseif xinfaType == 3 then --派别
		use_data = useXinfa._paibie
		zy_data = xinfa._paibie
		if transfromLvl >= 2 then
			--这里要读的是专职后的心法表
			xinfaData = i3k_db_zhuanzhi[zyID][transfromLvl][BWtype].pbXinfa
		else
			return false
		end
	end

	if next(xinfaData) == nil then
		return false
	end
	local result = false
	local result2 = false
	for k,v in ipairs(xinfaData) do
		if not zy_data[v] then
			result = result or self:isHaveXinfaBook(v)
		else
			result2 = result2 or self:isXinfaEnoughUpLvl(v,zy_data[v])
		end
	end
	return result or result2
end

--判断是否有可以学习的职业心法
function i3k_game_context:isCanLearnXinfaInZhiyeScroll()
	return self:isCanLearnXinfa(1)
end
--判断是否有可以学习的江湖心法
function i3k_game_context:isCanLearnXinfaInJianghuScroll()
	return self:isCanLearnXinfa(2)
end
--判断是否有可以学习的派别心法
function i3k_game_context:isCanLearnXinfaInPaibieScroll()
	return self:isCanLearnXinfa(3)
end
--心法总红点
function i3k_game_context:isShowXinfaRedPoint()
	return ( self:isCanLearnXinfaInZhiyeScroll()
	or self:isCanLearnXinfaInJianghuScroll()
	or self:isCanLearnXinfaInPaibieScroll() )
end

--初始技能是否全部解锁
function i3k_game_context:isStartSkillAllUnlock()
	local role_all_skill = self:GetRoleSkills()
	local roletype = self:GetRoleType()
	local isOk = {is_ok1 = false, is_ok2 = false, is_ok3 = false, is_ok4 = false}
	local default_skill = g_i3k_db.i3k_db_get_character_default_skills(roletype)
	for i, e in pairs(default_skill) do
		local isLock = string.format("is_ok%s", i)
		if role_all_skill[e] then
			isOk[isLock] = true
		end
	end
	if isOk.is_ok1 and isOk.is_ok2 and isOk.is_ok3 and isOk.is_ok4 then
		return true
	else
		return false
	end
end


----------------------技能相关---------------------------
--选择技能上战
function i3k_game_context:SetRoleSelectSkillData(slotId, skillId)
	self:SetRoleSelectSkill(slotId, skillId)
	local all,use = self:GetRoleSkills()
	local hero = i3k_game_get_player_hero()
	hero:BindSkills(use)
	if hero._AutoFight then
		hero:InitPlayerAttackList()
		hero:AddAutofightTriggerSkill()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "setSkillPos")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy , "ShowEquip")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleSkills", self:GetRoleSelectSkills(), self:GetRoleType())
end

--操作技能升级 升界数据
function i3k_game_context:SetSkillUpLevelData(skillId, level, needItem, auto)
	self:SetRoleSkillLevel(skillId, level)
	if auto then
		for k, v in pairs(needItem) do
			self:UseCommonItem(k, v,AT_SKILL_LEVEL_UP)
		end
	else
		for i=1,#needItem do
			self:UseCommonItem(needItem[i].itemID, needItem[i].itemCount,AT_SKILL_LEVEL_UP)
		end
	end

	if level == self:GetLevel() then
		g_i3k_ui_mgr:CloseUI(eUIID_UpSkillTips)
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_UpSkillTips, "playUpLevelEffect", skillId)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "onUpdateLayer")
	-- g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "updateSkillPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateSkillNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
end


local MAX_STATE = 4
function i3k_game_context:SetSkillUpStateData(skillId, level, needItem)
	self:SetRoleSkillState(skillId, level)
	for i=1,#needItem do
		self:UseCommonItem(needItem[i].itemID, needItem[i].itemCount,AT_SKILL_ENHANCE)
	end

	if level == MAX_STATE then
		g_i3k_ui_mgr:CloseUI(eUIID_UpSkillTips)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "onUpdateLayer")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "onUpdateSkillBorder", skillId)

	-- g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "updateSkillPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_UpSkillTips, "onStateTips", skillId)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateSkillNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
end

----------------------绝技相关---------------------------
-- 装备绝技
function i3k_game_context:SetRoleSelectUniqueSkillData(skillId)
	self:SetRoleSelectUniqueSkill(skillId)
	local all,use = self:GetRoleUniqueSkills()
	local hero = i3k_game_get_player_hero()
	hero:InitSkills();
	if hero._AutoFight then
			hero:InitPlayerAttackList()
			hero:AddAutofightTriggerSkill()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "setUniqueSkillPos")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy , "ShowEquip")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleUniqueSkill", self:GetRoleType())

end

-- 操作绝技升级
function i3k_game_context:SetUniqueSkillUpLevelData(skillId, level, needItem, auto)
	self:SetRoleUniqueSkillLevel(skillId, level)
	if auto then
		for k, v in pairs(needItem) do
			self:UseCommonItem(k, v,AT_SKILL_LEVEL_UP)
		end
	else
		for i=1,#needItem do
			self:UseCommonItem(needItem[i].itemID, needItem[i].itemCount,AT_SKILL_LEVEL_UP)
		end
	end

	if level == self:GetLevel() then
		g_i3k_ui_mgr:CloseUI(eUIID_UpSkillTips)
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_UpSkillTips, "onSkillTips", skillId,true)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "onUpdateLayer")
	-- g_i3k_ui_mgr:InvokeUIFunction(eUIID_UniqueSkill, "updateSkillPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateSkillNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
end
-----绝技升境界数据
local MAX_STATE = 4
function i3k_game_context:SetUniqueSkillUpStateData(skillId, level, needItem)
	self:SetRoleUniqueSkillState(skillId, level)
	for i=1,#needItem do
		self:UseCommonItem(needItem[i].itemID, needItem[i].itemCount,AT_SKILL_ENHANCE)
	end

	if level == MAX_STATE then
		g_i3k_ui_mgr:CloseUI(eUIID_UpSkillTips)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "onUpdateLayer")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SkillLy, "onUpdateSkillBorder", skillId)

	-- g_i3k_ui_mgr:InvokeUIFunction(eUIID_UniqueSkill, "updateSkillPoint")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_UpSkillTips, "onStateTips", skillId,true)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateSkillNotice")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updatePetNotice")
end

function i3k_game_context:SetRoleUniqueSkillLevel(skillID, lvl)
	if self._roleData.uniqueSkills.all[skillID] then
		self._roleData.uniqueSkills.all[skillID].lvl = lvl
	else
		self._roleData.uniqueSkills.all[skillID] = {}
		self._roleData.uniqueSkills.all[skillID].id = skillID
		self._roleData.uniqueSkills.all[skillID].lvl = lvl
		self._roleData.uniqueSkills.all[skillID].state = 0
	end
	local hero = i3k_game_get_player_hero();
	if hero then
		hero:OnUniqueSkillUpgradeLvl(skillID, lvl);
	end
end

function i3k_game_context:SetRoleUniqueSkillState(skillID, lvl)
	if self._roleData.uniqueSkills.all[skillID] then
		self._roleData.uniqueSkills.all[skillID].state = lvl
	end
	local hero = i3k_game_get_player_hero();
	if hero then
		hero:OnUniqueSkillUpgradeRealm(skillID, lvl);
	end
end

function i3k_game_context:SetRoleSelectUniqueSkill(skillID)
	if self._roleData.uniqueSkills.use ~= skillID then
		self._roleData.uniqueSkills.use = skillID
	end
end

---------------------------判断技能是否可以升级-------------------------------

-------技能红点---- ---
function i3k_game_context:isUpSkillEnough(skillID, skill_lv)
	local _skill_data1 = i3k_db_skill_datas[skillID]
	if not _skill_data1[skill_lv + 1] then
		return false
	end
	local needCoin = _skill_data1[skill_lv+1].needCoin
	local needItemID = _skill_data1[skill_lv+1].needItemID
	local needItemNum = _skill_data1[skill_lv+1].needItemNum
	local canUseCount = self:GetMoneyCanUse(false)
	local have_item = self:GetCommonItemCanUseCount(needItemID)
	--i3k_log("skill enough: ",canUseCount,needCoin,have_item,needItemNum)
	if canUseCount >= needCoin and have_item >= needItemNum then
		return true
	else
		return false
	end
end
-- 判断单个技能是否可以升级
function i3k_game_context:isSkillCanUpdateLevel(skillId)
	local skill_data = i3k_db_skill_datas[skillId]
	local hero_lv = self:GetLevel()
	local role_all_skill = self:GetRoleSkills() -- 包括转职技能
	local role_all_unique_skill = self:GetRoleUniqueSkills()
	if next(role_all_skill) == nil then
		if hero_lv >= skill_data[1].studyLvl then
			return true
		end
		return false -- 技能全都没有开启
	end
	local now_lv = 0
	if role_all_skill[skillId] and role_all_skill[skillId].lvl then
		now_lv = role_all_skill[skillId].lvl
	elseif role_all_unique_skill[skillId] and role_all_unique_skill[skillId].lvl then
		now_lv = role_all_unique_skill[skillId].lvl
	end
	local need_lv = 0
	if skill_data[now_lv + 1] then
		need_lv = skill_data[now_lv + 1].studyLvl
	elseif  skill_data[now_lv] then
		need_lv = skill_data[now_lv].studyLvl  --add by jxw 2016.11.8 加报错判断
	end
	if hero_lv >= need_lv then
		return self:isUpSkillEnough(skillId,now_lv)
	end
end
--判断单个技能是否可以提升境界
function i3k_game_context:isSkillCanUpdateJingjie(skillId,uniqueSkills)
	local roleType = self:GetRoleType()
	local hero_lv = self:GetLevel()
	local skills = i3k_db_generals[roleType].skills

	local role_all_skill
	if uniqueSkills then
		role_all_skill = self:GetRoleUniqueSkills()
	else
		role_all_skill = self:GetRoleSkills()
	end

	local skill_data = i3k_db_skill_datas[skillId]
	if role_all_skill[skillId] and role_all_skill[skillId].lvl ~= 0 then
		local tmp_state = role_all_skill[skillId].state + 1
		if role_all_skill[skillId].state == MAX_STATE then
			return false
		end
		local _data = i3k_db_state[tmp_state]
		if _data then
			local item1 = _data.item1ID
			local item1Count = _data.item1Count
			local item2 = _data.item2ID
			local item2Count = _data.item2Count
			local is_ok1 = true
			local is_ok2 = true
			if item1 ~= 0  then
				local _count = self:GetCommonItemCanUseCount(item1)
				if _count < item1Count then
					is_ok1 = false
				end
			end
			if item2 ~= 0 then
				local _count = self:GetCommonItemCanUseCount(item2)
				if _count < item2Count then
					is_ok2 = false
				end
			end
			if 	is_ok2 and is_ok1 then
				return true
			end
		else
			if hero_lv >= skill_data[1].studyLvl then
				return true
			end
		end
	end
	return false
end
--判断玩家的单个技能是否显示红点
function i3k_game_context:isSkillCanUpdate(skillId,isUniqueSkill)

	local role_all_skill = self:GetRoleSkills()
	local skill_data = i3k_db_skill_datas[skillId]
	local hero_lv = self:GetLevel()
	if next(role_all_skill) == nil then
		if hero_lv >= skill_data[1].studyLvl then
			return true
		end
		return false
	end
	local level = self:isSkillCanUpdateLevel(skillId)
	local jingjie = self:isSkillCanUpdateJingjie(skillId,isUniqueSkill)
	return level or jingjie
end
--判断玩家拥有的所有（解锁 未解锁共4个）的技能是否可以升级或提升境界
function i3k_game_context:isShowSkillRedPoint()
	local roleType = self:GetRoleType()
	local hero_lv = self:GetLevel()
	local skills = self:GetRoleSkills()

	-- 判断角色初始技能是否完全解锁
	local baseSkills = i3k_db_generals[roleType].skills
	local count = 0
	for i, e in pairs(baseSkills) do
		local skillData = i3k_db_skill_datas[e]
		local needLevel = skillData[1].studyLvl
		if self:GetLevel() >= needLevel and not skills[e] then
			count =  count + 1
		end
	end
	if count <= #baseSkills and count ~= 0 then
		return true
	end


	local result = false
	for k,v in pairs(self:GetRoleSkills()) do
		result = result or self:isSkillCanUpdate(v.id) -- 增加判断转职技能
	end
	return result
end

-----------------------------------


function i3k_game_context:isUpStateEnough(lvl)
	local _data = i3k_db_state[lvl + 1]
	if not _data then
		return
	end
	local is_ok1 = true
	local is_ok2 = true
	if _data.item1ID ~= 0 then
		if self:GetCommonItemCanUseCount(_data.item1ID) < _data.item1Count then
			is_ok1 = false
		end
	end
	if _data.item2ID ~= 0 then
		if self:GetCommonItemCanUseCount(_data.item2ID) < _data.item2Count then
			is_ok2 = false
		end
	end
	if is_ok1 and is_ok2 then
		return true
	else
		return false
	end
end
-------------------------------判断绝技是否可以升级-------------------------------

-- 判断单个绝技是否可以升级
function i3k_game_context:isUniqueSkillCanUpdateLevel(skillId)
	local skill_data = i3k_db_skill_datas[skillId]
	local hero_lv = self:GetLevel()
	local role_all_uniqueSkill = self:GetRoleUniqueSkills() --

	local now_lv = 0
	if role_all_uniqueSkill[skillId] and role_all_uniqueSkill[skillId].lvl then
		now_lv = role_all_uniqueSkill[skillId].lvl
	end
	local need_lv = 0
	if skill_data[now_lv + 1] then
		need_lv = skill_data[now_lv + 1].studyLvl
	else
		need_lv = skill_data[now_lv].studyLvl
	end
	if hero_lv >= need_lv then
		return self:isUpSkillEnough(skillId,now_lv)---isUpUniqueSkillEnough(skillId,now_lv)
	end
end
-------绝技红点---- ---
function i3k_game_context:isUpUniqueSkillEnough(skillID, skill_lv)
	local _skill_data1 = i3k_db_skill_datas[skillID]
	if not _skill_data1[skill_lv + 1] then
		return false
	end
	local needCoin = _skill_data1[skill_lv+1].needCoin
	local needItemID = _skill_data1[skill_lv+1].needItemID
	local needItemNum = _skill_data1[skill_lv+1].needItemNum
	local canUseCount = self:GetMoneyCanUse(false)
	local have_item = self:GetCommonItemCanUseCount(needItemID)
	if canUseCount > needCoin and have_item >= needItemNum then
		return true
	else
		return false
	end
end

--判断玩家的单个绝技是否显示红点
function i3k_game_context:isUniqueSkillCanUpdate(skillId)

	local level = self:isUniqueSkillCanUpdateLevel(skillId)
	local jingjie = self:isSkillCanUpdateJingjie(skillId,true)
	return level or jingjie
end

--判断玩家拥有的所有的绝技是否可以升级或提升境界
function i3k_game_context:isShowUniqueSkillRedPoint()

	local unique_skills = self:GetRoleUniqueSkills()

	local result = false
	for k,v in pairs(unique_skills) do
		result = result or self:isUniqueSkillCanUpdate(v.id)
	end
	return result
end

-----------------------判断是否可以升星强化装备镶嵌锤炼----------------------------
function i3k_game_context:canBetterEquip()
	return self:starRedPoint() or self:qhRedPoint() or self:isHaveInlayRedPoint() or self:temperRedPoint()
end

--获取已装备的单个物品或装备是否可以升星
function i3k_game_context:isEquipCanPromote(id)
	if self:GetLevel() < i3k_db_common.functionOpen.starUpLvl then
		return false
	end
	if not g_i3k_game_context:checkEquipFacility(id, g_FACILITY_EQUIP_ENHANCEMENT) then
		return false
	end
	local equips = self:GetWearEquips()
	if not equips[id] or not equips[id].equip then return false end --这个位置没有装备物品
	if equips[id].equip then
		local star_lv = equips[id].eqEvoLvl
		local group = g_i3k_db.i3k_db_get_equip_upStar_group(id);
		local _data = i3k_db_up_star[group][star_lv+1] or i3k_db_up_star[group][star_lv]
		local temp = {is_ok1 = true, is_ok2 = true, is_ok3 = true, is_ok4 = true}
		local need_item = {}
		for j=1,4 do
			local item_id = string.format("item%sID", j)
			local item_count = string.format("item%sCount", j)
			if _data[item_id] ~= 0 then
				table.insert(need_item, {itemId = _data[item_id], itemCount =  _data[item_count]})
			end
		end
		for k=1, 4 do
			local is_ok = string.format("is_ok%s",k)
			if need_item[k] and need_item[k].itemCount > self:GetCommonItemCanUseCount(need_item[k].itemId) then
				temp[is_ok] = false
			end
		end
		if temp.is_ok1 and temp.is_ok2 and temp.is_ok3 and temp.is_ok4 and i3k_db_up_star[group][star_lv+1] then
			return true
		end
	end
	return false
end

--装备升星判断红点
function i3k_game_context:starRedPoint(startID, endID)
	local startPos = startID and startID or 1
	local endPos = endID and endID or eEquipNumber
	for i = startPos, endPos do
		if self:isEquipCanPromote(i) then
			return true
		end
	end
	return false
end

--获取已装备的单个物品是否可以强化或者突破
function i3k_game_context:isEquipCanStreng(id)
	if self:GetLevel() < i3k_db_common.functionOpen.strengLvl then
		return false
	end
	if not g_i3k_game_context:checkEquipFacility(id, g_FACILITY_EQUIP_UPGRADE) then
		return false
	end
	local wEquips = self:GetWearEquips()
	local qh_lv = wEquips[id].eqGrowLvl
	local strengGroup = g_i3k_db.i3k_db_get_equip_streng_group(id);
	local breakLvl = wEquips[id].breakLvl
	local breakCfg = i3k_db_streng_equip_break[strengGroup][breakLvl+1]
	if wEquips[id].equip == nil then return false end --这个位置没有装备物品
	if self:GetLevel() > qh_lv and i3k_db_streng_equip[strengGroup][qh_lv+1] then
		local temp = {is_ok1 = true, is_ok2 = true, is_ok3 = true, is_ok4 = true}
		local _data = i3k_db_streng_equip[strengGroup][qh_lv+1] or i3k_db_streng_equip[strengGroup][qh_lv]
		local need_item = {}
		if (breakCfg and breakCfg.level) == qh_lv then--如果当前正在突破 need_item设置为突破所需材料
			for  k,v in ipairs(breakCfg.consume) do
				table.insert(need_item, v)
			end
		else
			table.insert(need_item, {itemId = g_BASE_ITEM_EQUIP_ENERGY, itemCount = _data.energy,})
			for j=1,3 do
				local item_id = string.format("item%sID", j)
				local item_count = string.format("item%sCount", j)
				if _data[item_id] ~= 0 then
					table.insert(need_item, {itemId = _data[item_id], itemCount =  _data[item_count]})
				end
			end
		end
		for i,v in ipairs(need_item) do -- 需要的这几个物品必须同时满足
			if(v.itemCount or v.count)> self:GetCommonItemCanUseCount(v.itemId) then
				return false
			end
		end
		return true
	end
	return false
end

--判断已装备的物品是否可以强化
function i3k_game_context:qhRedPoint(startID, endID)
	local startPos = startID and startID or 1
	local endPos = endID and endID or eEquipNumber
	for i = startPos, endPos do
		if self:isEquipCanStreng(i) then
			return true
		end
	end
	return false
end

--判断是否有装备可镶嵌
function i3k_game_context:isHaveInlayRedPoint(startID, endID)
	local startPos = startID and startID or 1
	local endID = endID and endID or eEquipNumber
	for i=startPos,endID do
		local wEquips = self:GetWearEquips()
		if wEquips[i].equip then
			if self:isEquipCanInlay(i) then
				return true
			end
		end
	end
	return false
end

--单个部位的装备是否可镶嵌
function i3k_game_context:isEquipCanInlay(pos)
	for i=1, 4 do
		local tmp = string.format("slot%sIcon", i)
		local slotIcon = i3k_db_equip_part[pos][tmp]
		if slotIcon ~= 0 and self:isInlayAble(pos, i) then
			return true
		end
	end
	return false
end

--单个部位的装备的所有孔位是否可以镶嵌宝石
function i3k_game_context:isInlayAble(pos, slotId)
	if self:GetLevel() < i3k_db_common.functionOpen.inlayLvl then
		return false
	end
	if not g_i3k_game_context:checkEquipFacility(pos, g_FACILITY_GEM_NESTING) then
		return false
	end
	local wEquips = self:GetWearEquips()
	local bagSize, items = self:GetBagInfo()
	if wEquips[pos].equip then
		local slot = wEquips[pos].slot
		if slot[slotId] ~= 0 then
			local id = slot[slotId]
			local isBless = self:isCanBlessAble(pos, slotId)
			local nextId = g_i3k_db.i3k_db_get_gem_item_cfg(id).updated_id
			local isUpLvlEnough = nextId ~= 0
			if isUpLvlEnough then
				local needItem = g_i3k_db.i3k_db_get_gem_need_info(nextId)
				for i, e in pairs(needItem) do
					local itemCount = e.id==g_BASE_ITEM_GEM_ENERGY and g_i3k_game_context:GetStoneEnergy() or g_i3k_game_context:GetCommonItemCanUseCount(e.id)
					if itemCount < e.count then
						isUpLvlEnough = false
						break
					end
				end
			end
			return isUpLvlEnough or isBless
		else
			for k, v in pairs(items) do --装备没镶嵌宝石
				local diamondInBag = g_i3k_db.i3k_db_get_gem_item_cfg(k)
				local slotType = string.format("slot%sType", slotId)
				local tmp = i3k_db_equip_part[pos][slotType]
				if diamondInBag then -- 有可以镶嵌的宝石
					for _,v in ipairs(tmp) do
						if v == diamondInBag.type then
							return true
						end
					end
				end
			end
		end
	end
	return false
end

-- 获取是否可以宝石祝福
function i3k_game_context:isCanBlessAble(pos, slotId)
	local wEquips = self:GetWearEquips()
	local bagSize, items = self:GetBagInfo()
	if not g_i3k_game_context:checkEquipFacility(pos, g_FACILITY_GEM_BLESSING) then
		return false
	end
	if wEquips[pos].equip then
		local slot = wEquips[pos].slot
		local gemBless = wEquips[pos].gemBless
		if slot[slotId] ~= 0 then
			local cfg = i3k_db_equip_part[pos].blessing
			if not gemBless[slotId] then
				local isBlessEnough = false
				if g_i3k_game_context:GetCommonItemCanUseCount(cfg.itemID) >= cfg.itemCount[1] then
					isBlessEnough = true
				end
				return isBlessEnough
			else
			    if gemBless[slotId] < #cfg.itemCount and g_i3k_game_context:GetCommonItemCanUseCount(cfg.itemID) >= cfg.itemCount[gemBless[slotId] + 1] then
					return true
				else
					return false
				end
			end
		end
	end
	return false
end

--获得龙印升阶的红点逻辑
function i3k_game_context:GetLongYinRedpoint()
	if self:isLonYinOpen() == false then
		return false
	end
	local info = {}
	local needItemId = {}
	local needItemConunt = {}
	local level = self:GetIsHeChengLongYin()
	if level == #i3k_db_LongYin_UpLvl then
		return false
	end
	for k,v in ipairs(i3k_db_LongYin_UpLvl) do
		if level == #i3k_db_LongYin_UpLvl then
			info = i3k_db_LongYin_UpLvl[k]
			break
		end
		if k == level then
			info = i3k_db_LongYin_UpLvl[k + 1]
			break
		end
	end
	local needCount = 0
	local count = 0
	for i=1, 4 do
		needItemId[i] = info["needItemId" .. i]
		needItemConunt[i] = info["needItemConunt" .. i]
		if needItemId[i] ~= 0 then
			local canUseCount = g_i3k_game_context:GetCommonItemCanUseCount(needItemId[i])
			if canUseCount >= needItemConunt[i] then
				count = count + 1
			end
			needCount = needCount + 1
		end
	end
	if count == needCount then
		return true
	end
	return false
end

--获取龙印洗练的红点逻辑
function i3k_game_context:GetLongYinRedpoint2()
	if self:isLonYinOpen() == false then
		return false
	end
	local isShow = false
	local argData = i3k_db_LongYin_arg
	if self:GetIsHeChengLongYin() < argData.skill.needLvlcount then
		return false
	end
	local xlNeedItemId = {}
	local xlNeedItemConunt = {}
	local needCount = 0
	local count = 0
	for k=1,4 do
		xlNeedItemId[k] = argData.needItems["needItem" .. k .."ID"]
		xlNeedItemConunt[k] =  argData.needItems["needItem" .. k .."Count"]
		if xlNeedItemId[k] == 0 then
			break
		end
		local canUseCount = g_i3k_game_context:GetCommonItemCanUseCount(xlNeedItemId[k])
		if canUseCount >= xlNeedItemConunt[k] then
			count = count + 1
		end
		needCount = needCount + 1
	end
	if count == needCount then
		isShow = true
	end
	return isShow and self:getLongYinPracticeRedPoint()
end
--获取龙印解禁的红点逻辑
function i3k_game_context:GetLongYinRedpoint3()
	if self:isLonYinOpen() == false then
		return false
	end
	local NowLevel=self:GetIsHeChengLongYin()
	local showneedLevel=i3k_db_LongYin_arg.hunyuWenyang.unlockLevel
	if NowLevel < showneedLevel then return false  end
	local rank = self._role_seal_awaken.rank
	local cfg = g_i3k_db.i3k_db_get_longyin_ban(rank)
	if not cfg then return false end
	local unlock_flag = true
	local fengyinID={}
	for k, v in ipairs(cfg.items) do
        if not self._role_seal_awaken.awaken[v] then
			unlock_flag = false
			table.insert(fengyinID,v)
			--break
		end
	end
	if unlock_flag then return false end
	local flag = true
	for index, fengyin in ipairs(fengyinID) do
		local fengyinCfg = g_i3k_db.i3k_db_get_longyin_lock(fengyin)
		flag = true
		for i, v in ipairs(fengyinCfg.needItem) do
			local curCount
			if v.itemID > 0 then
				local banCount = g_i3k_game_context:GetCommonItemCount(v.itemID)
				local unBanCount = g_i3k_game_context:GetCommonItemCount(-v.itemID)
				curCount = banCount + unBanCount
			else
				local banCount = g_i3k_game_context:GetCommonItemCount(v.itemID)
				curCount = banCount
			end
			local needCount = v.itemCount
			if curCount < needCount then
				flag = false
			end
					-- flag = flag and curCount >= needCount -- 可以简写
		end
		if flag then break end
	end
	return flag
end
function i3k_game_context:bagPointForLongYin()
	if self:isLonYinOpen() and self:GetIsHeChengLongYin() == 0 then
		return true
	end
	return false
end

--时装界面红点提示
function i3k_game_context:getFashionRedPoint()
	local isWearCount = 0
	for i,e in pairs(i3k_db_fashion_dress) do
		if g_i3k_db.i3k_db_get_fashion_is_wear(e.id) then
			isWearCount = isWearCount + 1
		end
	end
	if isWearCount == 0 then
		for i,e in pairs(i3k_db_fashion_dress) do
			local isHave = g_i3k_db.i3k_db_get_fashion_is_have(e.id)
			local isWear = g_i3k_db.i3k_db_get_fashion_is_wear(e.id)
			local isCanDo = not isHave and not isWear and self:GetCommonItemCanUseCount(e.needItemId) > 0
			local sex = e.sex == self:GetRoleGender()
			if (isCanDo or isHave) and sex then
				return true
			end
		end
	else
		return false
	end
end

function i3k_game_context:heirloomRedPoint()
	local heirloom = g_i3k_game_context:getHeirloomData();
	local lvl = g_i3k_game_context:GetLevel();
	if heirloom.isOpen == 1 then
		if heirloom.perfectDegree < i3k_db_chuanjiabao.cfg.topcount then
			if heirloom.dayWipeTimes < i3k_db_chuanjiabao.cfg.haveTimes then
				return true
			end
		else
			local isMax = false;
			if i3k_db_chuanjiabao_strength.strength then
				local strengthLayer = #i3k_db_chuanjiabao_strength.strength
				if ((self._heirloomStrength.layer == strengthLayer) and self:CheckHeirloomStrengMax()) or (self._heirloomStrength.layer > strengthLayer) then
					isMax = true;
				end
			end

			if (self._heirloomStrength.dayStrengthTime < i3k_db_chuanjiabao_strength.cfg.dayStrengthTime) and (lvl >= i3k_db_chuanjiabao_strength.cfg.levelLimit) and (not isMax) then
				return true
			end
		end
	end
	return false
end

--判断是否满足龙印解锁需求
function i3k_game_context:isLonYinOpen( )
	local argData = g_i3k_db.i3k_db_LongYin_arg
	local needData = argData.openNeed
	local NowLevel = g_i3k_game_context:GetLevel()
	local NowPower = g_i3k_game_context:GetRolePower()
	local NowVocation = g_i3k_game_context:GetTransformLvl()
	if NowLevel >= needData.needLvl and NowPower >= needData.needPower and NowVocation >= needData.needTransLvl then
		return true
	else
		return false
	end
end

--得到龙印的信息(登入时同步)
function i3k_game_context:SetLongYinInfo(grade, skills, enhanceCount, tempSkills)
	self._longYinData.grade = grade
	self._longYinData.skills = skills
	self._longYinData.enhanceCount = enhanceCount
	self._longYinData.newSkills = tempSkills
end
function i3k_game_context:SetLongYinSkills(skills)
	self._longYinData.skills = skills
end

function i3k_game_context:SetNewLongYinSkills(skills)
	self._longYinData.newSkills = skills
end

function i3k_game_context:GetLongYinSkills()
	return self._longYinData.skills or {}
end

function i3k_game_context:GetNewLongYinSkills()
	return self._longYinData.newSkills or {}
end

--根据龙印等级获取龙印品质
function i3k_game_context:GetLongYinQuality(lvl)
	local quality = 0
	for k,v in ipairs(i3k_db_LongYin_UpLvl) do
		if k == lvl then
			quality = v.quality
		end
	end
	return quality
end

function i3k_game_context:GetLongYinInfo()
	return self._longYinData
end
--判断龙印当前等级（非0为合成）
function i3k_game_context:SetIsHeChengLongYin(level)
	if level then
		self._longYinData.grade = level
	end
end

function i3k_game_context:GetIsHeChengLongYin()
	return self._longYinData.grade or 0
end

--根据当前龙印等级得到龙印图标
function i3k_game_context:GetLongYinIronForGrade(level)
	for k,v in ipairs(i3k_db_LongYin_UpLvl) do
		if k == level then
			return v.ironID
		end
	end
end

--计算龙印洗练添加的战力
function i3k_game_context:otherLongyinSkills(roleType, skills)
	local power = 0
	if skills then
		for k,v in pairs(skills) do
			local translvl = g_i3k_db.i3k_db_get_hero_skill_translevel(roleType,k)
			power = power + v * i3k_db_common.powerappraise.N1 * (i3k_db_common.powerappraise.N2 + translvl * i3k_db_common.powerappraise.N3)
		end
	end
	return power
end

--得到历练系统信息（登入时同步）
function i3k_game_context:SetExperienceInfo(grasps)
	--self._experience.curExpCoin = curExpCoin
	--self._experience.books = books
	self._experience.grasps = grasps

end

--通知客户端所加的历练币
function i3k_game_context:AddExperienceCurExpCoin(curExpCoin)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "addExpCoinShow", curExpCoin)
	self._experience.curExpCoin = self._experience.curExpCoin + curExpCoin

end

function i3k_game_context:SetExperienceCurExpCoin(curExpCoin)
	self._experience.curExpCoin = curExpCoin
end

function i3k_game_context:GetExperienceCurExpCoin()
	return self._experience.curExpCoin
end
function i3k_game_context:UseExperienceCurExpCoin(count,reason)
	self._experience.curExpCoin = self._experience.curExpCoin - count
	DCItem.consume(g_BASE_ITEM_EMP, "历练", count, reason)
end

--历练币可增加的上线
function i3k_game_context:canGetMaxCurExpCoin(id)
	local nowCoin = self:GetExperienceCurExpCoin()
	local maxCoin = i3k_db_experience_args.args.maxSaveExperience
	local item_cfg = g_i3k_db.i3k_db_get_other_item_cfg(id)
	local needCoin = item_cfg.args1
	local coin = (maxCoin - nowCoin) / needCoin
	if math.floor(coin) < 1 then
		return 1
	end
	local haveCount = self:GetCommonItemCanUseCount(id)
	if math.floor(coin) >= haveCount then
		return haveCount
	else
		return math.floor(coin)
	end
end

--红名道具可使用上限
function i3k_game_context:canGetMaxCurrentPKValue(id)
	local data = g_i3k_db.i3k_db_get_other_item_cfg(id)
	local nowPKvalue = g_i3k_game_context:GetCurrentPKValue()
	local PKvalue = data.args1
	local needCount = math.ceil(nowPKvalue / PKvalue)
	if needCount <= 0 then
		return 1
	end
	local haveCount = self:GetCommonItemCanUseCount(id)
	return needCount >= haveCount and haveCount or needCount
end

--获取每日已提炼的次数
function i3k_game_context:SetExperienceDayTakeTimes(dayTakeTimes)
	self._experience.dayTakeTimes = dayTakeTimes
end
function i3k_game_context:GetExperienceDayTakeTimes()
	return self._experience.dayTakeTimes
end

--书袋里面的藏书
function i3k_game_context:SetBooksIsLock(books)
	self._experience.books = books
end

function i3k_game_context:GetBooksIsLock()
	return self._experience.books or nil
end

--根据藏书ID获取藏书数量
function i3k_game_context:GetBooksCountForID(booksID)
	local count = 0
	for k,v in pairs(self._experience.books) do
		if math.abs(k) == booksID then
			count = count + v
		end
	end
	return count
end

--记录当前所指定的藏书
function i3k_game_context:SetRecordBooksId(info)
	self._experience.recordId = info
end

function i3k_game_context:GetRecordBooksId()
	return self._experience.recordId
end

--根据藏书ID扣除藏书数量
function i3k_game_context:UseBooksCountForID(booksID, count)
	local binDingBooks = 0
	local freeBooks = 0
	for k,v in pairs(self._experience.books) do
		if k > 0 and k == booksID then
			binDingBooks = k
		end
		if k < 0 and math.abs(k) == math.abs(booksID) then
			freeBooks = k
		end
	end
	local rUse
	local fUse
	if self._experience.books[binDingBooks] then
		rUse = self._experience.books[binDingBooks] > count and count or self._experience.books[binDingBooks]
		fUse = count - rUse
		self._experience.books[binDingBooks] = self._experience.books[binDingBooks] - rUse
	else
		fUse = count
	end
	if self._experience.books[freeBooks] then
		self._experience.books[freeBooks] = self._experience.books[freeBooks] - fUse
	end
	if self._experience.books[binDingBooks] == 0 then
		self._experience.books[binDingBooks] = nil
	end
	if self._experience.books[freeBooks] == 0 then
		self._experience.books[freeBooks] = nil
	end
end

--根据秘籍ID获取秘籍等级
function i3k_game_context:GetBooksLevel(booksID)
	for k,v in pairs(self._experience.cheats) do
		if k == booksID then
			return v
		end
	end
end

--登入时同步
function i3k_game_context:SetCheatsInfo(cheats)
	self._experience.cheats = cheats
end

--得到秘籍
function i3k_game_context:GetCheatsInfo()
	return self._experience.cheats
end

--设置秘籍的等级
function i3k_game_context:SetBookLevel(booksID, level)

	for k,v in pairs(self._experience.cheats) do
		if k == booksID then
			self._experience.cheats[booksID] = level
		end
	end

end

function i3k_game_context:GetAllBooksLevel( )
	local lvl = 0
	for k,v in pairs(self._experience.cheats) do
		lvl = lvl + v
	end
	return lvl
end

--解锁秘籍的等级
function i3k_game_context:isLibraryUnlock(booksID, level)
	self._experience.cheats[booksID] = level
end

--设置秘籍前一级属性（也就是当前属性）
function i3k_game_context:GetNowCheatsInfo(id, level)
	for k,v in ipairs(i3k_db_experience_library) do
		if v[level].libraryID == id then
			if level - 1 == 0 then
				return nil
			else
				return v[level - 1]
			end
		end
	end
end

--获取解锁后一级的属性
function i3k_game_context:GetFirstProperty(id, level)
	for k,v in ipairs(i3k_db_experience_library) do
		if v[level].libraryID == id then
			return v[1]
		end
	end
end

--设置藏书
function i3k_game_context:SetBooks(books)
	for k,v in pairs(books) do
		self._experience.books[k] = v
	end
end

--添加藏书
function i3k_game_context:AddBooks(id, count)
	if next(self._experience.books) ~= nil then
		local isHave = false
		for k,v in pairs(self._experience.books) do
			if id == k then
				isHave = true
				break
			else
				isHave = false
			end
		end
		if isHave == true then
			for k,v in pairs(self._experience.books) do
				if id == k then
					self._experience.books[id] = v + count
				end
			end
		else
			self._experience.books[id] = count
		end
	else
		self._experience.books[id] = count
	end
end

--查看上一级秘籍的属性
function i3k_game_context:lastLibraryProperty(info)
	local newInfo
	for k,v in ipairs(i3k_db_experience_library) do
		if info.libraryID == v[1].libraryID then
			newInfo = v[info.libraryLvl - 1]
			break
		end
	end
	return newInfo
end

--藏书的红点逻辑
function i3k_game_context:redPointForBooks()
	local openLevel = i3k_db_experience_args.args.openLevel
	local showLevel = i3k_db_experience_args.args.libraryShowLevel
	if self:GetLevel() < openLevel or self:GetLevel() < showLevel then
		return false
	end
	local items = self:GetAllItemsForType(20)  --获取背包里面所有的藏书
	local tab = {}
	for k,v in pairs(items) do
		tab[v.id] = v.count
	end
	if next(tab) ~= nil then
		return true
	else
		return false
	end
end

--每个秘籍的红点逻辑
function i3k_game_context:redPointForCheats(libraryID, level)
	if g_i3k_game_context:GetBooksLevel(libraryID) == g_i3k_db.i3k_db_get_library_max_level(libraryID)  then --#i3k_db_experience_library[level]
		return false
	end
	local info = {}
	for i, e in ipairs(i3k_db_experience_library) do
		if e[level].libraryID == libraryID then
			info = e[level]
		end
	end
	local expendLibraryID = {}
	local expendLibraryCount = {}
	local coinID = g_i3k_db.i3k_db_get_base_item_cfg(43).id    --历练币id（固定）
	expendLibraryID[1] = info.expendLibraryID
	expendLibraryID[2] = coinID
	expendLibraryID[3] = info.expend3ID
	expendLibraryID[4] = info.expend4ID
	expendLibraryCount[1] = info.expendLibraryCount
	expendLibraryCount[2] = info.expendExperienceCount
	expendLibraryCount[3] = info.expend3Count
	expendLibraryCount[4] = info.expend4Count

	local count = 0
	local canUseCount = {}
	local typeNow = g_i3k_game_context:GetRoleType()
	for i=1,4 do
		if info.needVocation == typeNow or info.needVocation == 0 then
			expendLibraryCount[i] = expendLibraryCount[i]
		else
			expendLibraryCount[i] = expendLibraryCount[i] * 2
		end
		if i == 1 then
			canUseCount[i] = g_i3k_game_context:GetBooksCountForID(expendLibraryID[i])   --藏书从书袋里面扣
		else
			canUseCount[i] = g_i3k_game_context:GetCommonItemCanUseCount(expendLibraryID[i])
		end
		if canUseCount[i] >= expendLibraryCount[i] then
			count = count + 1
		end
	end
	if count == 4 then
		return true
	end
	return false
end

--获取秘籍的红点逻辑
function i3k_game_context:redPointForAllCheats()
	local openLevel = i3k_db_experience_args.args.openLevel
	local showLevel = i3k_db_experience_args.args.libraryShowLevel
	if self:GetLevel() < openLevel or self:GetLevel() < showLevel then
		return false
	end
	local isLockBooks = {}
	for i, e in ipairs(i3k_db_experience_library) do
		local level = g_i3k_game_context:GetBooksLevel(e[1].libraryID) and g_i3k_game_context:GetBooksLevel(e[1].libraryID) or 0
		if level < #e then
			level = level + 1
		end
		isLockBooks[i] = e[level]
	end
	local now = false
	for k,v in ipairs(isLockBooks) do
		if self:redPointForCheats(v.libraryID, v.libraryLvl) == true then
			now = true
		end
	end
	return now
end

--------------------骑术背包----------------------
--设置骑术背包
function i3k_game_context:SetHorseBooks(horseBooks)
	self._horseBooksBag = {}
	for k,v in pairs(horseBooks) do
		self._horseBooksBag[k] = v
	end
end

--骑术背包添加骑术
function i3k_game_context:AddHorseBooks(id, count)
	local item = g_i3k_db.i3k_db_get_other_item_cfg(id)
	if item and item.type == UseItemHorseBook then
		if self._horseBooksBag[id] then
			self._horseBooksBag[id] = self._horseBooksBag[id] + count
		else
			self._horseBooksBag[id] = count
		end
	end
end

--得到骑术背包信息
function i3k_game_context:GetHorseBooks()
	return self._horseBooksBag
end

--寻找骑术背包中的某样骑术（若id > 0 ，表示所有该骑术数量，若id < 0 ,表示非绑定骑术数量）
function i3k_game_context:SearchHorseBook(id)
	local count = 0
	if id > 0 then
		if self._horseBooksBag[id] then
			count = count + self._horseBooksBag[id]
		end
		if self._horseBooksBag[-id] then
			count = count + self._horseBooksBag[-id]
		end
	elseif id < 0 then
		if self._horseBooksBag[id] then
			count = count + self._horseBooksBag[id]
		end
	end
	return count
end

--骑术背包删除（若id > 0 ，表示优先消耗绑定骑术，若id < 0 ,表示只消耗非绑定骑术 ）
function i3k_game_context:UseHorseBooks(id, count)
	if id > 0 then
		if self._horseBooksBag[id] then
			if self._horseBooksBag[id] >= count then
				self._horseBooksBag[id] = self._horseBooksBag[id] - count
			else
				local num = count - self._horseBooksBag[id]
				self._horseBooksBag[id] = 0
				self._horseBooksBag[-id] = self._horseBooksBag[-id] - num
			end
		else
			self._horseBooksBag[-id] = self._horseBooksBag[-id] - count
		end
	elseif id < 0 then
		self._horseBooksBag[id] = self._horseBooksBag[id] - count
	end
end

--判断背包中是否有骑术可以存入
function i3k_game_context:canAddBook()
	local tbl = g_i3k_game_context:GetAllItemsForType(UseItemHorseBook)
	if next(tbl) then
		return true
	else
		return false
	end
end

----------------------------------------------------------
--记录当前可参悟帮派成员的人数
function i3k_game_context:SetNewFactionMemberCount(count)
	if self:GetFactionCurrentMemberCount() then
		self._experience.memberCount = self:GetFactionCurrentMemberCount() - count
	end
end

function i3k_game_context:GetNewFactionMemberCount()
	return self._experience.memberCount or 0
end

--获取参悟等级的信息（k = id, v = lvl）
function i3k_game_context:GetCanLevelWuInfo()
	return self._experience.canwuLevel
end

function i3k_game_context:SetCanLevelWuInfo(id, lvl, exp)
	self._experience.canwuLevel[id] = {lvl = lvl, exp = exp}
	self:GetCanwuLvlForExp(lvl, id, exp)
end

--根据等级得到悟道相关信息
function i3k_game_context:GetWudaoInfo()
	local info = self:GetCanLevelWuInfo()
	local tab = {}
	for k,v in pairs(info) do
		tab[k] = i3k_db_experience_canwu[k][v.lvl]
	end
	return tab
end

--添加悟道的经验(以及设置悟道的等级)
function i3k_game_context:AddCanWuExp(id, exp)
	for k,v in pairs(self._experience.canwuLevel) do
		if k == id then
			self._experience.canwuLevel[k] = {lvl = v.lvl, exp = v.exp + exp}
			self:GetCanwuLvlForExp(v.lvl, k, v.exp + exp)
		end
	end
end

--计算经验是否满足升级
function i3k_game_context:GetCanwuLvlForExp(lvl, id, exp)
	local nowExp = exp
	for k,v in ipairs(i3k_db_experience_canwu) do
		if k == id then
			for i = lvl,#v do
				if v[i+1] and v[i+1].exp and nowExp >= v[i + 1].exp  then
					for x,y in pairs(self._experience.canwuLevel) do
						if x == id then
							self._experience.canwuLevel[x] = {lvl = i+1, exp = nowExp - v[i + 1].exp}
							nowExp = nowExp - v[i + 1].exp
						end
					end
				else
					break
				end
			end
		end
	end
end

--根据当前悟道等级获取下一等级
function i3k_game_context:GetNextWudaoLevel(id, level)
	local temp = {}
	for i,j in pairs(i3k_db_experience_canwu) do
		if i == id then
			temp = j[level + 1]
		end
	end
	return temp or nil

end

--获取已经参悟的次数
function i3k_game_context:SetCanwuTimes(times)
	self._experience.canwuTimes = times
end

function i3k_game_context:GetCanwuTimes()
	if self._experience and self._experience.canwuTimes then
		return self._experience.canwuTimes
	end
	return 0;
end

function i3k_game_context:SetGraspSkill(skill)
	self._graspSkill = skill
end

function i3k_game_context:GetGraspSkill()
	return self._graspSkill
end

function i3k_game_context:SetBuyTimes(times)
	self.buyCanwu = times
end

function i3k_game_context:GetBuyTimes()
	return self.buyCanwu
end

--获取上一次参悟的时间
function i3k_game_context:SetLastCanwuTime(time)
	self._experience.lastGraspTime = time
end

function i3k_game_context:GetLastCanwuTime()
	return self._experience.lastGraspTime or 0
end

--获取是否可以参悟
function i3k_game_context:SetIsCanCanwu(isCan)
	self._experience.IsCanCanwu = isCan
end

function i3k_game_context:GetIsCanCanwu()
	return self._experience.IsCanCanwu
end

--获取当前玄机
function i3k_game_context:SetNowXuanJi(dayFortune)
	self._experience.dayFortune = dayFortune
end

function i3k_game_context:GetNowXuanJi()
	return self._experience.dayFortune
end

function i3k_game_context:GetCanWuNeedItem(canwuID, canwuLvl)
	local canwuCfg = i3k_db_experience_canwu[canwuID][canwuLvl + 1]
	if canwuCfg then
		return canwuCfg.consumeItem
	end
	return nil
end

function i3k_game_context:IsCanWuItem(needItem)
	if not needItem then
		return false
	end
	for _, v in ipairs(needItem) do
		local curCnt = self:GetCommonItemCanUseCount(v.id)
		if curCnt < v.count then
			return false
		end
	end
	return true
end

function i3k_game_context:isAllCanWuMax()
	local info = self:GetWudaoInfo()
	local count = 0
	for _, e in ipairs(info) do
		local lvlsCfg = i3k_db_experience_canwu[e.canwuID]
		count = e.lvl >= #lvlsCfg and count + 1 or count
	end
	return count == #i3k_db_experience_canwu
end

function i3k_game_context:satisfyCanWu()
	if self:isAllCanWuMax() then
		return false
	end
	local info = self:GetWudaoInfo()
	for k,v in ipairs(info) do
		local needItem = self:GetCanWuNeedItem(v.canwuID, v.lvl);
		if self:IsCanWuItem(needItem) then
			return true;
		end
	end
	return false;
end

function i3k_game_context:isHaveCanWuTimes()
	local nowTimes = g_i3k_game_context:GetCanwuTimes()
	if nowTimes < i3k_db_experience_args.canwuCorrelation.canwuTimes then
		return true;
	end
	return false;
end

--参悟红点
function i3k_game_context:isShowCunWnRed()
	if self:isHaveCanWuTimes() and self:satisfyCanWu() and self:GetIsCanCanwu() then
		return true;
	end
	return false;
end

--记录参悟的所选中框
function i3k_game_context:recordSelectWudao(wudaoId)
	self._experience.wudaoId = wudaoId
end

function i3k_game_context:GetSelectWudao()
	return self._experience.wudaoId
end

--登入时同步乾坤数据
function i3k_game_context:setQiankunInfo(cheats)
	self._experience.qiankunInfo = cheats or {}
end

function i3k_game_context:getQiankunInfo()
	return self._experience.qiankunInfo or {}
end

function i3k_game_context:addQiankunBuyTimes(cnt)
	self._experience.qiankunInfo.buyTimes = self._experience.qiankunInfo.buyTimes + cnt
end

function i3k_game_context:addQiankunTotalPoints(cnt)
	self._experience.qiankunInfo.totalPoints = self._experience.qiankunInfo.totalPoints + cnt
end

-- 获取可用乾坤点
function i3k_game_context:getCanUseQiankunPoint()
	if self._experience and self._experience.qiankunInfo then
		return self._experience.qiankunInfo.totalPoints - self._experience.qiankunInfo.usePoints
	end
	return 0;
end

-- 乾坤红点
function i3k_game_context:qiankunRedPoints()
	if self:GetLevel() >= i3k_db_experience_args.experienceUniverse.openLevel and self:getCanUseQiankunPoint() > 0 and not self:GetQianKunRedRecord() then
		--return true
	end
	return false
end

function i3k_game_context:SetQianKunRedRecord(state)
	self._qiankunRedRecord = state
end

function i3k_game_context:GetQianKunRedRecord()
	return self._qiankunRedRecord
end

-- 获取乾坤属性
function i3k_game_context:getQiankunProps()
	local props = {}
	if self._experience.qiankunInfo then
	for i, e in pairs(i3k_db_experience_universe) do
		local lvl = self._experience.qiankunInfo.levels[i] or 0
		if lvl > 0 and e[lvl].propertyValue > 0 then
			table.insert(props, {attribute = e[lvl].propertyId, value = e[lvl].propertyValue})
			end
		end
	end
	return props
end

-- 乾坤升级
function i3k_game_context:setQianhuaUpLvl(point, id, items)
	for i, e in pairs(items) do
		self:UseCommonItem(e.itemID, e.itemCount, AT_LVLUP_TRANSFER_POINT)
	end
	self._experience.qiankunInfo.usePoints = self._experience.qiankunInfo.usePoints + point
	self._experience.qiankunInfo.levels[id] = self._experience.qiankunInfo.levels[id] and self._experience.qiankunInfo.levels[id] + 1 or 1
	self:SetPrePower()
	self:RefreshLiLianProps()
	self:ShowPowerChange()
	if self._experience.qiankunInfo.levels[id] + 1 <= #i3k_db_experience_universe[id] then
		g_i3k_ui_mgr:RefreshUI(eUIID_QiankunUp, id, self._experience.qiankunInfo.levels[id])
	else
		g_i3k_ui_mgr:CloseUI(eUIID_QiankunUp)
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_Qiankun)
end

-- 乾坤点购买
function i3k_game_context:setQiankunBuyInfo(discount, point, items)
	for k,v in pairs(items) do
		g_i3k_game_context:UseCommonItem(v.itemID, v.itemCount, AT_TRANSFER_POINT_BUY)
	end
	self:addQiankunTotalPoints(point)
	self:addQiankunBuyTimes(1)
	if self._experience.qiankunInfo.totalPoints < i3k_db_experience_args.experienceUniverse.maxPoint then
		g_i3k_ui_mgr:RefreshUI(eUIID_QiankunBuy)
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(877))
	else
		g_i3k_ui_mgr:CloseUI(eUIID_QiankunBuy)
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(880))
	end
	if discount == 1 then
		g_i3k_ui_mgr:CloseUI(eUIID_QiankunBuy)
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_Qiankun)
end

-- 获取乾坤重置返还道具
function i3k_game_context:getQiankunRetrunItems()
	local items = {}
	for i, e in ipairs(i3k_db_experience_universe) do
		local lvl = self._experience.qiankunInfo.levels[i] or 0
		if lvl ~= 0 then
			local cfg = e[lvl]
			for a, b in ipairs(cfg.returnRewards) do
				if b ~= 0 then
					if items[b] then
						items[b] = items[b] + cfg.returnRewardsNum[a]
					else
						items[b] = cfg.returnRewardsNum[a]
					end
				end
			end
		end
	end
	return items
end

-- 乾坤重置
function i3k_game_context:setQiankunReset(items)
	g_i3k_game_context:UseCommonItem(i3k_db_experience_args.experienceUniverse.resetItemId,i3k_db_experience_args.experienceUniverse.resetItemCount,AT_TRANSFER_POINT_RESET)
	self._experience.qiankunInfo.usePoints = 0
	self._experience.qiankunInfo.levels = {}
	g_i3k_game_context:SetPrePower()
	g_i3k_game_context:RefreshLiLianProps()
	g_i3k_game_context:ShowPowerChange()
	g_i3k_ui_mgr:CloseUI(eUIID_QiankunReset)
	g_i3k_ui_mgr:RefreshUI(eUIID_Qiankun)
	g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(878))
end

--历练红点
function i3k_game_context:LiLianAllRedPoints()
	if self:redPointForAllCheats() or self:redPointForBooks() or self:qiankunRedPoints() then
		return true;
	end
	return false;
end

--使用月卡
function i3k_game_context:SetUseMonthCard(cardID, endTime)
	self:UseCommonItem(cardID, 1,AT_USE_ITEM_MONTHLYCARD)
	if endTime ~= 0 then
		local item_cfg = g_i3k_db.i3k_db_get_other_item_cfg(cardID)
		local needCount = item_cfg.args2
		local dimond = g_i3k_db.i3k_db_get_base_item_cfg(1).id
		local tmp_items = {}
		local t = {id = dimond,count = needCount}
		table.insert(tmp_items,t)
		g_i3k_ui_mgr:ShowGainItemInfo(tmp_items)
	else
		g_i3k_ui_mgr:PopupTipMessage("正在体验月卡")
	end
end

--使用vip体验卡
function i3k_game_context:SetUseVipCard(cardID, vipLevel)
	self:UseCommonItem(cardID, 1,AT_USE_ITEM_VIPCARD)
	self:SetVipExperienceLevel(vipLevel)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Main, "updateRoleVipExperienceLevel")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ChannelPay, "setShowVipTime")
end

--设置vip体验卡的等级
function i3k_game_context:SetVipExperienceLevel(vipLevel,end_time)
	self._vipExperience.viplevel = vipLevel
	local serverTime = i3k_game_get_time()
	serverTime = i3k_integer(serverTime)
	if end_time then
		if serverTime >= end_time then
			self._vipExperience.viplevel = 0
		end
		self._vipExperience.endTime = end_time
	end
	--DCAccount.removeTag("vip", "")
	--DCAccount.addTag("vip", "vip"..vipLevel)

end

function i3k_game_context:GetVipExperienceLevel()
	return self._vipExperience.viplevel
end

function i3k_game_context:GetVipExperienceEndTime()
	return self._vipExperience.endTime
end

--仓库数据
function i3k_game_context:SetWarehouseData(privateWarehouse, warehouseType)
	self._warehouse.items[warehouseType] = privateWarehouse.items
	self._warehouse.bagSize[warehouseType]= privateWarehouse.cellSize
	self._warehouse.expandTimes[warehouseType] = privateWarehouse.expandTimes
	for i, e in pairs(self._warehouse.items) do --这里说明下，应该是map
		for _, v in pairs(e) do
			local stack_max = g_i3k_db.i3k_db_get_bag_item_stack_max(v.id)
			self._warehouse.useCellSize[i] = self._warehouse.useCellSize[i] + g_i3k_get_use_bag_cell_size(v.count, stack_max)
		end
	end
end

function i3k_game_context:GetWarehouseInfoForType(warehouseType)
	return self._warehouse.bagSize[warehouseType] or 0, self._warehouse.items[warehouseType] or {}
end

function i3k_game_context:GetWarehouseItemsForType(warehouseType)
	return self._warehouse.items[warehouseType] or {}
end

function i3k_game_context:GetWarehouseSizeForType(warehouseType)
	return self._warehouse.bagSize[warehouseType] or 0
end

function i3k_game_context:GetWarehouseExpandTimesForType(warehouseType)
	return self._warehouse.expandTimes[warehouseType] or 0
end

function i3k_game_context:GetWarehouseUseCellSizeForType(warehouseType)
	return self._warehouse.useCellSize[warehouseType] or 0
end

function i3k_game_context:ExpandWarehouseSize(expandCount, times, warehouseType)
	self._warehouse.bagSize[warehouseType] = self._warehouse.bagSize[warehouseType] + expandCount
	self._warehouse.expandTimes[warehouseType] = times
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Warehouse, "setBagItemsChanged")
end

function i3k_game_context:SetWarehouseItemsForType(id, count, warehouseType, saveType, guid)
	if saveType == 1 then	--存仓库
		if guid ~= 0 then
			local bagEquips = self._bagData.items[id]
			local equips = bagEquips and bagEquips.equips[guid]
			local warehouseEquips = self._warehouse.items[warehouseType][id]
			if warehouseEquips then
				warehouseEquips.equips[guid] = equips
				warehouseEquips.count = warehouseEquips.count + count
			else
				warehouseEquips = { id = id, count = count , equips = {}}
				warehouseEquips.equips[guid] = equips
				self._warehouse.items[warehouseType][id] = warehouseEquips
			end
			self._warehouse.useCellSize[warehouseType] = self._warehouse.useCellSize[warehouseType] + count
			self:DelBagEquip(id, guid,AT_WAREHOUSE_SAVE)
		else
			self:UseBagItem(id, count,AT_WAREHOUSE_SAVE)
			local miscellaneous = self._warehouse.items[warehouseType][id]
			miscellaneous = miscellaneous or {id = id, count = 0, equips = {}}
			miscellaneous.count = miscellaneous.count + count
			self._warehouse.items[warehouseType][id] = miscellaneous
			local stack_max = g_i3k_db.i3k_db_get_bag_item_stack_max(id)
			local useCellSizeChange = g_i3k_get_use_bag_cell_size(miscellaneous.count, stack_max) - g_i3k_get_use_bag_cell_size(miscellaneous.count-count, stack_max)
			self._warehouse.useCellSize[warehouseType] = self._warehouse.useCellSize[warehouseType] + useCellSizeChange
		end
	elseif saveType == 2 then  --取仓库
		local miscellaneous = self._warehouse.items[warehouseType][id]
		if miscellaneous then
			local realUse = 0
			if miscellaneous.count <= count then
				realUse = miscellaneous.count
				miscellaneous.count = 0
				self._warehouse.items[id] = nil
			else
				realUse = count
				miscellaneous.count = miscellaneous.count - count
				if guid ~= 0 then
					miscellaneous.equips[guid] = nil
				end
			end
			local stack_max = g_i3k_db.i3k_db_get_bag_item_stack_max(id)
			if stack_max == 0 then
				return 1
			else
			    local useCellSizeChange = g_i3k_get_use_bag_cell_size(miscellaneous.count, stack_max) - g_i3k_get_use_bag_cell_size(miscellaneous.count+realUse, stack_max)
			    self._warehouse.useCellSize[warehouseType] = self._warehouse.useCellSize[warehouseType] + useCellSizeChange
		    end
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Warehouse, "setBagItemsChanged")
end

function i3k_game_context:GetWarehouseItemCount(id, warehouseType)
	local item = self._warehouse.items[warehouseType][id]
	return item and item.count or 0
end

function i3k_game_context:GetWareHouseItemCountSafe(id, type)
	local items = self:GetWarehouseItemsForType(type)
	local item = items[id]
	return item and item.count or 0
end
function i3k_game_context:GetWarehouseEquip(id, guid, warehouseType)
	local bagEquips = self._warehouse.items[warehouseType][id]
	local equip = bagEquips and bagEquips.equips[guid]
	return equip and g_i3k_get_equip_from_bean(equip) or nil
end

--称号系统登入同步
function i3k_game_context:SetRoleTitlesInfo(titles, curPermanent, equipedtitles)
	self._roleTitles.titles = titles  --tab
	self._roleTitles.curPermanent = curPermanent  --num
	if next(self._roleTitles.equipTitle) then
		for i = #self._roleTitles.equipTitle, 1, -1 do
			table.remove(self._roleTitles.equipTitle, i)
		end
	end
	for i=#equipedtitles, 1, -1 do
		table.insert(self._roleTitles.equipTitle, equipedtitles[i].titleId)
	end
end

--得到现在已解锁的称号
function i3k_game_context:AddTitles(id, end_time)
	self._roleTitles.titles[id] = end_time
	local idType = nil
	for k,v in pairs(i3k_db_title_base) do
		if id == k then
			idType = v.titleType
			break
		end
	end
	if idType then
		for _,v in ipairs(i3k_db_common.roleTitles.pushType) do
			if v == idType then
				g_i3k_logic:openRoleTitleUI(id)
				break
			end
		end
	end
	self:RefreshTitleProps()
end

function i3k_game_context:GetAllRoleTitle()
	return self._roleTitles.titles or nil
end

--删除称号
function i3k_game_context:DeleteRoleTitle(id)
	local deleteValue2 = nil
	for i,e in ipairs(self._roleTitles.equipTitle) do	--删除所有的已装备的称号
		if id == e then
			deleteValue2 = i
		end
	end
	if deleteValue2 then
		table.remove(self._roleTitles.equipTitle, deleteValue2)
		g_i3k_game_context:ChangeRoleTitle()
		self:RefreshTitleProps()
	end
	self._roleTitles.titles[id] = nil
end

function i3k_game_context:DeleteMarriageTitle()
	for i,v in ipairs(i3k_db_marry_title) do
		self:DeleteRoleTitle(v.id)
		if self._roleTitles.titles[v.id] then
			self._roleTitles.titles[v.id] = nil
		end
	end
end

--设置当前已装备称号（永久）
function i3k_game_context:SetNowEquipTitle(id)
	self._roleTitles.curPermanent = id
end

function i3k_game_context:GetNowEquipTitle()
	return self._roleTitles.curPermanent or nil
end

function i3k_game_context:GetEquipTimedTitle()
	return self._roleTitles.curTimed
end

--判断是否为时效称号（true为时效，false为永久）
function i3k_game_context:GetIsCurtimeTitles(id)
	for k,v in pairs(i3k_db_title_base) do
		if id == v.id then
			if v.time > 0 then
				return true
			else
				return false
			end
		end
	end
end

--记录所有的当前装备的称号
function i3k_game_context:SetAllEquipTitles(id, state)
	if not self._roleTitles.equipTitle then
		return
	end
	if state == 0 then  -- 卸下
		for k,v in ipairs(self._roleTitles.equipTitle) do
			if id == v then
				table.remove(self._roleTitles.equipTitle, k)
				break
			end
		end

	elseif state == 1 then --装备并卸下同一类型的-先删后加
		local titleDB = i3k_db_title_base
		local newType = titleDB[id].titleType

		for i,e in ipairs(self._roleTitles.equipTitle) do
			if newType == titleDB[e].titleType then
				table.remove(self._roleTitles.equipTitle, i)
				break
			end
		end

		local forever = 0
		for k,v in ipairs(self._roleTitles.equipTitle) do
			forever = forever + g_i3k_db.i3k_db_is_permanent_title(v)
		end
		if forever == 1 and g_i3k_db.i3k_db_is_permanent_title(id) == 1 then
			for i=#self._roleTitles.equipTitle, 1, -1 do
				if g_i3k_db.i3k_db_is_permanent_title(self._roleTitles.equipTitle[i]) == 1 then
					table.remove(self._roleTitles.equipTitle, i)
				end
			end
		end
		table.insert(self._roleTitles.equipTitle, id)
	end

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleTitles, "updateScroll", id)

end

function i3k_game_context:GetAllEquipTitles()
	return self._roleTitles.equipTitle
end

--有效称号
function i3k_game_context:GetValidTitleInfo()
	local titleinfo = self:GetAllRoleTitle()
	local validTitle = {}
	local tmp = {}
	for k, v in pairs(titleinfo) do
		local cfg = i3k_db_title_base[k]
		if tmp[cfg.titleType] then
			if cfg.quality < tmp[cfg.titleType].quality then
				tmp[cfg.titleType] = {id = k, quality = cfg.quality}
			end
		else
			tmp[cfg.titleType] = {id = k, quality = cfg.quality}
		end
	end
	for k, v in pairs(tmp) do
		table.insert(validTitle, v.id)
	end
	return validTitle
end

function i3k_game_context:getRoleTitleCanEquip(id)
	local cfg = i3k_db_title_base[id]
	local allEquipTitle = self:GetAllEquipTitles()
	for i,e in ipairs(allEquipTitle) do
		if i3k_db_title_base[e].titleType == i3k_db_title_base[id].titleType then
			return true
		end
	end
	local forever = 0
	for k,v in ipairs(self._roleTitles.equipTitle) do
		forever = forever + g_i3k_db.i3k_db_is_permanent_title(v)
	end
	if forever == 1 and g_i3k_db.i3k_db_is_permanent_title(id) == 1 then
		return true
	end
	if self:getTitlesUnlockPlace() > #allEquipTitle then
		return true
	end
	return false
end

function i3k_game_context:getTitlesUnlockPlace()
	return self._roleTitles.unlockPlace
end

function i3k_game_context:setTitlesUnlockPlace(index)
	self._roleTitles.unlockPlace = index
end

function i3k_game_context:getPetCanUnlockId()
	for _,e in ipairs(i3k_db_mercenaries) do
		if e.isOpen ~= 0 then
			local id = self:isShowXiansuoRedPoint(e.id)
			if id then
				return id
			end
		end
	end
	return 0
end

---------------------判断随从红点-----------------------------
--随从线索红点
function i3k_game_context:isShowXiansuoRedPoint(petID)
	if self:IsHavePet(petID) then
		return false
	end
	local value
	local hero = i3k_game_get_player_hero()
	if hero then
		value = hero:Appraise()
	end
	local power = math.modf(value or 0)
	local lvl = self:GetLevel()
	local id = petID
	local is_ok1 = true
	local is_ok2 = true
	local is_ok3 = true
	local is_ok4 = true
	local is_ok5 = true
	local is_ok6 = true
	for i=1,3 do
		local temp_condition = string.format("callCondition%s",i)
		local condition = i3k_db_mercenaries[id][temp_condition]
		local tmp_arg = string.format("callArgs%s",i)
		local args =  i3k_db_mercenaries[id][tmp_arg]
		if condition == 0 then
			local itemid = i3k_db_mercenaries[id].consumeItem
			if itemid ~= 0  then
				local itemCount = i3k_db_mercenaries[id].consumeCount
				local have_count = self:GetCommonItemCanUseCount(itemid)
				if have_count >= itemCount then
				else
					is_ok1 = false
				end
			end
		elseif condition == 1 then
			local main_task_cfg = g_i3k_db.i3k_db_get_main_task_cfg(args)
			local tmp_desc = main_task_cfg.name
			local now_taskid = self:getMainTaskIdAndVlaue()
			if now_taskid < args then
				is_ok2 = false
			end
		elseif condition == 2 then
			if power < args then
				is_ok3 = false
			end
		elseif condition == 3 then
			local finishCount = self:getDungeonFinishTimes(args)
			if  finishCount > 0 then
			else
				is_ok4 = false
			end
		elseif condition == 4 then
			if lvl < args then
				is_ok5 = false
			end
		end
		--if self:getPetFriendLvl(petID) < g_i3k_db.i3k_db_get_pet_cfg(petID).friLvl then
			--is_ok6 = false
		--end
	end
	if is_ok1 and is_ok2 and is_ok3 and is_ok4 and is_ok5 and is_ok6 then
		return id
	else
		return false
	end
end

--随从升级红点
function i3k_game_context:isEnoughUpPetLevel(id)
	if not self:IsHavePet(id) then
		return false
	end
	local lvl = self:getPetLevel(id)
	if lvl >= i3k_db_server_limit.breakSealCfg.newSealLevel then
		return false
	end

	local transfer = self:getPetTransfer(id)
	local transfer_level = 0
	local trs_cfg = g_i3k_db.i3k_db_get_pet_transfer_cfg(transfer+1)
	if trs_cfg then
		transfer_level = trs_cfg.maxLvl
	end
	local now_exp = self:getPetExp(id)
	local uplvl_cfg = g_i3k_db.i3k_db_get_pet_uplvl_cfg(transfer_level)
	if not uplvl_cfg then
		uplvl_cfg = i3k_db_suicong_uplvl[#i3k_db_suicong_uplvl]
	end
	local items = uplvl_cfg.itemid
	local total_exp = now_exp
	local _lvl = self:GetLevel()
	local has_least_one = false
	for _,v in ipairs(items) do
		if self:GetCommonItemCanUseCount(v) > 0 then
			local nowLvlCfg = g_i3k_db.i3k_db_get_pet_uplvl_cfg(lvl + 1)
			if nowLvlCfg then
				for _,e in ipairs(nowLvlCfg.itemid) do
					if e == v then
						has_least_one = true
						break
					end
				end
			end
		end
	end
	if has_least_one == false then
		return false
	end
	local up_lvl = lvl
	local last_exp = 0
	local need_exp = 0
	local is_ok = false
	local last_item_count = 999
	local temp = {}
	for k,v in ipairs(items) do
		local count = self:GetCommonItemCanUseCount(v)
		if count ~= 0 then
			local isHave = false
			local nowLvlCfg = g_i3k_db.i3k_db_get_pet_uplvl_cfg(lvl + 1)
			for _,e in ipairs(nowLvlCfg.itemid) do
				if e == v then
					isHave = true
				end
			end
			if isHave then
				for j=1,count do
					local item_cfg = g_i3k_db.i3k_db_get_common_item_cfg(v)
					total_exp = item_cfg.args1 + total_exp
					uplvl_cfg = g_i3k_db.i3k_db_get_pet_uplvl_cfg(up_lvl+1)
					need_exp = uplvl_cfg.value
					while total_exp >= need_exp do
						total_exp = total_exp - need_exp
						up_lvl = up_lvl + 1
						uplvl_cfg = g_i3k_db.i3k_db_get_pet_uplvl_cfg(up_lvl+1)
						need_exp = uplvl_cfg.value
						if up_lvl == transfer_level or _lvl <= up_lvl then
							is_ok = true
							last_item_count = j
							if total_exp > uplvl_cfg.value then
								up_lvl = up_lvl - 1
								last_item_count = last_item_count - 1
								total_exp = total_exp + need_exp - item_cfg.args1
							end
							break
						end
					end
					if is_ok then
						break
					end
				end
			end
			if is_ok then
				temp[v] = last_item_count
				break
			end
			if isHave then
				temp[v] = count
			end
		end
	end
	if last_item_count == 0 then
		return false
	end
	local compare_lvl = {isUpLvl= false,before_lvl=0}
	if up_lvl ~= lvl then
		compare_lvl.isUpLvl = true
		compare_lvl.before_lvl = lvl
	end
	if up_lvl > _lvl then
		return false
	end
	local need_items = {}
	for k, v in pairs(temp) do
		if self:GetCommonItemCount(k) >= v then
			need_items[k] = v
		else
			if self:GetCommonItemCount(k) > 0 then
				need_items[k] = self:GetCommonItemCount(k)
			end
			need_items[-k] = v - self:GetCommonItemCount(k)
		end
 	end
	return need_items, up_lvl, total_exp, compare_lvl
end

--随从升星红点
function i3k_game_context:isShowPetUpStarPoint(petID)
	if not self:IsHavePet(petID) then
		return false
	end
	local starlvl =  self:getPetStarLvl(petID)
	if i3k_db_suicong_upstar[petID][starlvl+1] then
		local itemid = i3k_db_suicong_upstar[petID][starlvl+1].itemid
		local needItemCount = i3k_db_suicong_upstar[petID][starlvl+1].itemCount
		local replaceItem = i3k_db_suicong_upstar[petID][starlvl+1].replaceItem
		if self:GetCommonItemCanUseCount(itemid) + self:GetCommonItemCanUseCount(replaceItem) >= needItemCount then
			return true
		end
	end
	return false
end

--随从转职红点
function i3k_game_context:isShowPetTransferPoint(petID)
	if not self:IsHavePet(petID) then
		return false
	end
	local transfer = self:getPetTransfer(petID)
	local need_lvl = 0
	local tmpData = i3k_db_suicong_transfer[transfer + 1]
	if tmpData then
		need_lvl = tmpData.maxLvl
	end
	local isOk = {is_ok1 = true, is_ok2 = true, is_ok3 = true}
	if need_lvl ~= 0 and need_lvl == self:getPetLevel(petID) then
		for i=1, 3 do
			local tmpId = string.format("item%sID", i)
			local tmpCount = string.format("item%sCount", i)
			local tmpOk = string.format("is_ok%s", i)
			local itemid = tmpData[tmpId]
			local needCount = tmpData[tmpCount]
			local itemCount = self:GetCommonItemCanUseCount(itemid)
			if itemCount < needCount then
				isOk[tmpOk] = false
			end
		end
		--[[local task = tmpData.transferCondition
		local args =  tmpData.transferArgs
		local have_dungeon_data = self:GetPetDungeonData()
		if have_dungeon_data[petID] then
			if task == 1 and not have_dungeon_data[petID][args] then
				isOk.is_ok4 = false
			end
		else
			isOk.is_ok4 = false
		end--]]
		if isOk.is_ok1 and isOk.is_ok2 and isOk.is_ok3 then
			return true
		end
	end
	return false
end

--随从突破红点
function i3k_game_context:isShowBreakSkillPoint(petID)
	if not self:IsHavePet(petID) then
		return false
	end
	local starlvl = self:getPetStarLvl(petID)
	local MaxCount = self:getCurrentPetCount()
	local cfg = g_i3k_db.i3k_db_get_pet_cfg(id)
	if not i3k_db_suicong_upstar[petID][starlvl + 1] then
		for i=1,4 do
			local tmp_skill =  string.format("breakSkill%s",i)
			local break_skill = i3k_db_mercenaries[petID][tmp_skill]
			local tmp_condition =  string.format("breakSkill%sCondition",i)
			local break_condition = i3k_db_mercenaries[petID][tmp_condition]
			if MaxCount >= break_condition then
				local skillLvl = self:getPetBreakSkillLvl(petID, break_skill)
				if i3k_db_suicong_breakdata[break_skill][skillLvl + 1] then
					local itemid = i3k_db_suicong_breakdata[break_skill][skillLvl + 1].itemid
					local needCount =  i3k_db_suicong_breakdata[break_skill][skillLvl + 1].itemCount
					local replaceid = i3k_db_suicong_breakdata[break_skill][skillLvl + 1].replaceItem
					if self:GetCommonItemCanUseCount(itemid) + self:GetCommonItemCanUseCount(replaceid) >= needCount then
						return true
					end
				end
			end
		end
	end
	return false
end

function i3k_game_context:isShowPetPoint(petID) --单个随从红点
	local upLvlData = self:isEnoughUpPetLevel(petID)
	local upLevelPoint = false
	if upLvlData and next(upLvlData) then
		upLevelPoint = true
	end
	-- 到达转职等级是未转职时升级红点false
	local transfer = self:getPetTransfer(petID)
	local need_lvl = 0
	local tmpData = i3k_db_suicong_transfer[transfer + 1]
	if tmpData then
		need_lvl = tmpData.maxLvl
	end
	if need_lvl ~= 0 and need_lvl == self:getPetLevel(petID) then
		upLevelPoint = false
	end
	local isHave = false
	if self:getIsCompletePetLifeTaskFromID(petID) then
		isHave = self:petTaskRedPoint(petID)
	end
	return self:isShowBreakSkillPoint(petID) or upLevelPoint
	or self:isShowPetTransferPoint(petID) or self:isShowPetUpStarPoint(petID) or (self:isShowXiansuoRedPoint(petID) ~= false) or isHave
end

function i3k_game_context:canBetterPet()-- 随从外部红点
	for i, e in pairs(i3k_db_mercenaries) do
		if e.isOpen ~= 0 then
			if self:isShowPetPoint(e.id) then
				return true
			end
		end
	end
	return false
end
--随从任务是否有完成---
function i3k_game_context:petTaskRedPoint(id)
	local is_have = false
	local friend_lvl = self:getPetFriendLvl(id)
	if i3k_db_suicong_relation[id][friend_lvl+ 1] then
		local taskID,value = self:getPetTskIdAndValueById(id)
		local pet_task_cfg = g_i3k_db.i3k_db_get_pet_task_cfg(taskID)
		if pet_task_cfg then
			local arg1 = pet_task_cfg.arg1
			local arg2 = pet_task_cfg.arg2
			local is_ok = self:GetBagItemCanUseCount(arg1)
			if is_ok >= arg2 then
				is_have = true
			end
		end
	end
	return is_have
end











-------------------------帮派错误码判断-------------------------

--错误码

local error_code = {
[0] = "操作失败",
[-1] = "已经不在帮派中",
[-2] = "帮派不存在",
[-3] = "已经加入帮派",
[-4] = "创建帮派名字非法",
[-5] = "您输入的帮派名称已存在",
[-6] = "没有许可权",
[-7] = "帮派已满",
[-8] = "已经申请了",
[-9] = "不在申请列表了",
[-10] = "副帮主超过人数了",
[-11] = "长老超过人数了",
[-12] = "帮派宗旨文本段非法",
[-13] = "帮派申请列表已满",
[-14] = "此玩家已加入其他帮派",
[-15] = "踢人次数已满",
[-16] = "长度超过限制",
[-18] = "解除目标堂主职务后再次尝试踢出帮派操作",
[-20] = "帮派请客吃饭参加人员已满",
[-21] = "已经参与过",
[-22] = "宴席已超时",
[-24] = "帮派申请列表已满",
[-25] = "参与次数已满",
[-30] = "有人正在打帮派副本",
[-31] = "副本已通关，帮主重新开启后可进入",
[-37] = "正在打帮派团队副本",
[-41] = "处在退出帮派惩罚时间",
[-43] = "只能转让给副帮主",
[-44] = "膜拜目标等级不符",
[-45] = "不在帮派副本开放时间",
[-46] = "被邀请角色已下线",
[-47] = "邀请人不属于帮派成员",
[-48] = "邀请已失效",
[-49] = "玩家等级不足",
[-50] = "运镖期间，禁止其他操作",
[-51] = "角色已死亡",
[-52] = "目标消失，运镖结束",
[-53] = "不在大地图无法求援",
[-60] = "共用任务不存在",
[-61] = "该共用任务接取次数已满",
[-71] = "BOSS捐献的进度已发生改变",
[-75] = "红包已被领完",
[-101] = "神地幽冥境活动期间，无法踢出成员",
[-102] = "帮派已经被封禁，无法加入、无法发送邀请、无法解散",
[-103] = "当帮派人数少于两人时，方可解散帮派",
[-104] = "对方已经拒绝了来自您所处帮派的邀请，请勿重复邀请",
}

function i3k_game_context:JudgeFactionErrorCode(is_ok)
	if is_ok and is_ok <= 0 then
		return false,error_code[is_ok] or error_code[0]
	else
		return true
	end
end

-- 音量设置相关
function i3k_game_context:setBloodBgMusicOn(percent)
	g_i3k_ui_mgr:RefreshUI(eUIID_SetBlood,percent,nil)
end

function i3k_game_context:setBloodEffMusicOn(percent)
	g_i3k_ui_mgr:RefreshUI(eUIID_SetBlood,nil,percent)
end

function i3k_game_context:setCameraDistance(percent)
	i3k_get_load_cfg():SetCameraInter(percent);

	local logic = i3k_game_get_logic();
	if logic then
		local camera = logic:GetMainCamera();
		if camera then
			camera:UpdateCameraDistance(percent);
		end
	end
end

------------------ 自创武功相关---------------
-- 获取今日自创武功剩余次数
function i3k_game_context:getCreateKungfuLastTimes(data)
	if next(data) == nil then
		return 0
	end
	local level =  data.level or 1
	local vipLvl = self:GetVipLevel()
	local use_count = data.dayCreateCount
	local buy_count = data.dayBuyCount
	local all_count = i3k_db_create_kungfu_base[level].count + i3k_db_kungfu_vip[vipLvl].addCount + buy_count
	g_i3k_game_context:SetClanDiySkillTimes(all_count - use_count)
	return all_count - use_count
end
--是否可以购买自创武功次数
function i3k_game_context:isCanBuyCreateKungfuTimes(data)
	if next(data) == nil then
		return false
	end
	local _viplvl = self:GetVipLevel()
	local totleCount = i3k_db_kungfu_vip[_viplvl].count
	local buyCount = data.dayBuyCount
	return buyCount < totleCount
end
-- 获取熟练度的值
function i3k_game_context:getCreateKungfuProficiency(data)
	if next(data) == nil then
		return 0
	end
	local level = data.level
	return level or 1
end
-- 获取熟练度后面进度条的百分比
function i3k_game_context:getCreateKungfuLoadingBarPercent(data)
	if next(data) == nil then
		return 0
	end
	local level = data.level
	local exp_value = data.exp or 0
	local max_value = i3k_db_create_kungfu_base[level + 1] and i3k_db_create_kungfu_base[level + 1].value or i3k_db_create_kungfu_base[level].value
	return exp_value/max_value*100
end
-- 获得当前等级 悟道点总数
function i3k_game_context:getAllWudaoPoint(data)
	if next(data) == nil then
		return 0
	end
	local level = data.level
	return i3k_db_create_kungfu_base[level].points
end
-- 获得当前等级，某个属性可以使用的最大悟道点数
-- 界面1 pos 1~5  界面2 pos 1~6
function i3k_game_context:getMaxWudaoPointAtLevel(data,tag)
	if next(data) == nil then
		return 0
	end
	local level = data.level
	return i3k_db_create_kungfu_base[level].argsMax[tag]
end
--获取未使用的悟道点数量
function i3k_game_context:getLastWudaoPoint(wudao,roleAllSkillData)
	local count = 0
	for k,v in pairs(wudao) do
		count = count + v
	end
	return g_i3k_game_context:getAllWudaoPoint(roleAllSkillData) - count
end

-- 增加了exp熟练度经验，判断是否熟练度升级
function i3k_game_context:isDiySkillLevelUp(exp,myData)
	local nowExp = myData.exp
	local nowLevel = myData.level
	if i3k_db_create_kungfu_base[nowLevel + 1] then
		local needValue = i3k_db_create_kungfu_base[nowLevel+1].value
		if nowExp + exp >= needValue then
			return true
		end
	end
	return false
end
-- 创建技能
function i3k_game_context:diySkillCreate(skillData,roleAllSkills,my_diySkillShare)
	local gradeId = skillData.gradeId
	local exp = i3k_db_create_kungfu_score[gradeId].exp
	local is_ok = self:isDiySkillLevelUp(exp,roleAllSkills)
	g_i3k_ui_mgr:OpenUI(eUIID_CreateKungfuSuccess)
	g_i3k_ui_mgr:RefreshUI(eUIID_CreateKungfuSuccess,  skillData,nil,roleAllSkills,my_diySkillShare)
	if is_ok then
		g_i3k_ui_mgr:OpenUI(eUIID_KungfuUplvl)
		g_i3k_ui_mgr:RefreshUI(eUIID_KungfuUplvl,roleAllSkills)
	end
end

-- 购买创建武功次数需要多少钱
function i3k_game_context:getBuyCreateKungfuNeedMoney(BASE_COUNT,roleAllSkillData)
	local buy_count = roleAllSkillData.dayBuyCount
	local _viplvl = self:GetVipLevel()
	local needMoney = 0
	for i=buy_count + 1, buy_count+BASE_COUNT do
		needMoney = i3k_db_kungfu_vip[_viplvl].money[i] + needMoney
	end
	return needMoney
end

-- 刷新装备的自创技能（战斗界面）
function i3k_game_context:refreshDiySkillInBattle(res)

	--local pos = res.skillPos
	local currentID = g_i3k_game_context:getCurrentSkillID()
	local logic = i3k_game_get_logic();
	local player = logic:GetPlayer();
	local hero = nil;
	if player then
		hero = player:GetHero();
	end
	hero:InitSkills()
	if hero._AutoFight then
		hero:InitPlayerAttackList()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleDIYSkill", self:GetCurrentDIYSkillId(), self:GetCurrentDIYSkillIconId(), self:GetCurrentSkillGradeId())
end
-- 自创武功，是否开启“追”
function i3k_game_context:isUnlock_ZHUI(data)
	local level = data.level
	if i3k_db_create_kungfu_base[level].is_start == 1 then
		return true
	end
	return false
end

-- 自创武功，破控幻是否开启2个
function i3k_game_context:isUnlock2pkh(data)
	local level = data.level
	if i3k_db_create_kungfu_base[level].selectCount == 2 then
		return true
	end
	return false
end

-- 自创武功，获取选中了破幻控中的几个值
function i3k_game_context:getSelectPKHCount(data)
	local count = 0
	for k,v in pairs(data) do
		if v == 1 then count = count + 1 end
	end
	return count
end

-- 自创武功，获取投入的悟道点数
function i3k_game_context:getIntoWudaoPoint(data)
	local count = 0
	for k,v in pairs(data) do
		count = count + v
	end
	return count
end
-- 根据宗门已经分享的技能，判断是不是我分享的
function i3k_game_context:isMyShareDIYSkill(data,data2,tag)
	if not data or next(data) == nil then
		return false
	end

	local skillData = data2.diySkills[tag]
	if skillData == nil then return false; end
	for k,v in pairs(data) do
		local t = v.diySkill.skill
		if t.name == skillData.name and t.id == skillData.id and t.iconId == skillData.iconId then
			return true
		end
	end
	return false
end

--获取我分享技能的个数
function i3k_game_context:getMyShareSkillCount(data)
	local count = 0
	if data and next(data) then
		for k,v in ipairs(data) do
			if v.roleName == self:GetRoleName() then
				count = count + 1
			end
		end
	end
	return count
end

--设置自创武功和借用武功
function i3k_game_context:setDiySkillAndBorrowSkill(diySkillData, borrowSkillData)
	self._diySkills = diySkillData
	self._borrowSkill = borrowSkillData
end

--得到自创武功和借用武功
function i3k_game_context:getDiySkillAndBorrowSkill()
	return self._diySkills, self._borrowSkill
end

--坐骑系统相关
function i3k_game_context:setAllSteedInfo(info)
	self._steedInfo = info
end

function i3k_game_context:getAllSteedInfo()
	return self._steedInfo
end

function i3k_game_context:setSteedShowInfo(info)
	self._steedShowInfo = info
end

function i3k_game_context:setSteedShowIDs(showIDs)
	self._steedShowInfo.showIDs = showIDs
end

function i3k_game_context:getAllSteedStar()
	local lvl = 0
	for _,v in pairs(self:getAllSteedInfo()) do
		lvl = lvl + v.star
	end
	return lvl
end

--获得当前坐骑突破等级信息
function i3k_game_context:GetSteedBreakInfo(id)
	if self._steedInfo[id] then
		return self._steedInfo[id].breakLvl
	else
		return -1
	end
end

--获得当前坐骑星级信息
function i3k_game_context:GetSteedStarInfo(id)
	if self._steedInfo[id] then
		return self._steedInfo[id].star
	else
		return -1
	end
end
--获取该坐骑战力(将坐骑的逻辑整合到context)
function i3k_game_context:GetSteedPowerById(id)
	local steedInfo = g_i3k_game_context:getAllSteedInfo()
	local info
	if steedInfo[id] then
		info = steedInfo[id]
	else
		return 0
	end
	local starLvl = info and info.star or 0
	local breakLvl = info and info.breakLvl or 0
	local starCfg = i3k_db_steed_star[id][starLvl]
	local attrTable = {}
	for i = 1 , g_STEED_STAR_VALUE_NUM do
		if breakLvl <= 0 then
			if starCfg["attrId"..i] > 0 then
				table.insert(attrTable,{id = starCfg["attrId"..i], value = starCfg["attrValue"..i]})
			end
		else
			local breakCfg = i3k_db_steed_breakCfg[id][breakLvl]
			if breakCfg["attrId"..i] > 0 and breakCfg["attrId"..i] == starCfg["attrId"..i] then
				table.insert(attrTable,{id = breakCfg["attrId"..i], value = breakCfg["attrValue"..i] + starCfg["attrValue"..i]})
			end 
		end
	end
	if info then
		for i,v in pairs(info.enhanceAttrs) do
			isHaveAttr = false
			for j,t in pairs(attrTable) do
				if t.id==v.id then
					isHaveAttr = true
					t.value = t.value + v.value
					break
				end
			end
			if not isHaveAttr and v.id > 0 then
				table.insert(attrTable, {id = v.id, value = v.value})
			end
		end
	end
	local power = g_i3k_game_context:getSteedPower(attrTable)
	local skillPower =g_i3k_game_context:AppraiseEquestrianSkill(id) --根据坐骑id 统计附加骑术战力
	return power + skillPower
end
--改变当前坐骑突破等级
function i3k_game_context:SetSteedBreakInfo(id, nextbreakLvl)
	self._steedInfo[id].breakLvl = nextbreakLvl
end

-- 当前所拥有的坐骑皮肤信息
function i3k_game_context:getSteedShowIDs()
	return self._steedShowInfo and self._steedShowInfo.showIDs or {}
end

function i3k_game_context:setSteedCurShowID(showID)
	self._steedShowInfo.curShowID = showID
	self:setRideCurShowID()
end

-- 当前坐骑皮肤id（幻化id）
function i3k_game_context:getSteedCurShowID()
	return self._steedShowInfo.curShowID or 0
end

function i3k_game_context:getSteedInfoBySteedId(id)
	return self._steedInfo[id] or nil
end

function i3k_game_context:setSteedInfo(info)
	self._steedInfo[info.id] = info
end

-- 根据坐骑幻化配置属性转化为map
function i3k_game_context:getSteedSkinProperty(attrTb)
	local data = {}
	for _, e in ipairs(attrTb) do
		if e.id ~= 0 then
			if data[e.id] then
				data[e.id] = data[e.id] + e.count
			else
				data[e.id] = e.count
			end
		end
	end
	return data
end

-- 根据坐骑幻化配置获取皮肤战力
function i3k_game_context:getSteedSkinPower(cfg)
	if cfg.skinType == g_HS_TRADITIONAL then --传统皮肤
		return 0
	end
	return g_i3k_db.i3k_db_get_battle_power(self:getSteedSkinProperty(cfg.attrTb), true)
end

-- 坐骑追加皮肤附加属性
function i3k_game_context:getAllSteedSkinProperty()
	local data = {}
	local propTb = {}
	for k, v in pairs(self:getSteedShowIDs()) do
		local cfg = i3k_db_steed_huanhua[k]
		if cfg.skinType ~= g_HS_TRADITIONAL and (v > i3k_game_get_time() or v == -1) then
			table.insert(data, cfg.attrTb)
		end
	end
	for _, e in ipairs(data) do
		for __, ee in ipairs(e) do
			if ee.id ~= 0 then
				if propTb[ee.id] then
					propTb[ee.id] = propTb[ee.id] + ee.count
				else
					propTb[ee.id] = ee.count
				end
			end
		end
	end
	return propTb
end

function i3k_game_context:setSteedFightData(fightData)
	self._steedFightData = fightData
end

function i3k_game_context:getSteedFightData()
	return self._steedFightData
end

function i3k_game_context:setSteedFightShowIDs(fightShowIDs)
	if not self._steedFightData.fightShowIDs then
		self._steedFightData.fightShowIDs = {}
	end
	self._steedFightData.fightShowIDs = fightShowIDs
end

function i3k_game_context:getSteedFightShowIDs(fightShowIDs)
	return self._steedFightData.fightShowIDs or {}
end

-- 获取可骑战数量
function i3k_game_context:getSteedFightShowCount()
	return self._steedFightData.fightShowIDs and table.nums(self._steedFightData.fightShowIDs) or 0
end

-- 获取骑战激活奖励属性
function i3k_game_context:getSteedFightActivateProp()
	local propData = {}
	local activateCount = self:getSteedFightShowCount()
	for _, e in ipairs(i3k_db_steed_fight_award_prop) do
		if activateCount >= e.needUnlockCount then
			local activatePorp = e.propTb
			for __, ee in ipairs(activatePorp) do
				if ee.propID ~= 0 then
					propData[ee.propID] = (propData[ee.propID] or 0) + ee.propValue
				end
			end
		end
	end
	return propData
end

--坐骑精通经验
function i3k_game_context:setSteedFightExp(exp)
	self._steedFightData.exp = exp;
end

function i3k_game_context:getSteedFightExp()
	return self._steedFightData.exp or {}
end

--坐骑精通等级
function i3k_game_context:setSteedFightLevel(level)
	self._steedFightData.level = level;
end

function i3k_game_context:getSteedFightLevel()
	return self._steedFightData.level or {}
end

--坐骑精通属性激活
function i3k_game_context:setSteedFightMasters(lvl, Index)
	if not self._steedFightData.masters[lvl] then
		self._steedFightData.masters[lvl] = {}
		self._steedFightData.masters[lvl].unLocks = {}
	end
	self._steedFightData.masters[lvl].unLocks[Index] = true;
end

function i3k_game_context:getSteedFightMasters(lvl)
	return self._steedFightData.masters[lvl] or {}
end

function i3k_game_context:fightSteedIsMaxLvl()
	if self._steedFightData.level == #i3k_db_steed_fight_up_prop then
		return true;
	end
	return false;
end

function i3k_game_context:canfightSteedRed()
	if self:GetLevel() >= i3k_db_steed_fight_base.openLvl then
		if self:getUseSteed() ~= 0 and self:getSteedFightShowCount() ~= 0 then
			if self._steedFightData and self._steedFightData.masters then
				for i, e in ipairs(i3k_db_steed_fight_up_prop) do
					for k,v in ipairs(e.propTb) do
						if self:isShowRedByIndex(i, k) then
							return true;
						end
					end
					if not self:fightSteedIsMaxLvl() then
						for i,v in ipairs(e.upLvlItem) do
							if self:GetCommonItemCanUseCount(v) ~= 0 then
								return true;
							end
						end
					end
					if i <= g_i3k_game_context:getSteedFightLevel() and not self:isHavaUnLocks(i) then
						return true;
					end
				end
			end
		end
	end
	return false;
end

function i3k_game_context:isHavaUnLocks(lvl)
	if self._steedFightData and self._steedFightData.masters[lvl] and self._steedFightData.masters[lvl].unLocks then
		for k,v in pairs(self._steedFightData.masters[lvl].unLocks) do
			if v then
				return true;
			end
		end
	end
	return false;
end

function i3k_game_context:havaUnLocksCount(lvl)
	local count = 0;
	if self._steedFightData and self._steedFightData.masters[lvl] and self._steedFightData.masters[lvl].unLocks then
		for k,v in pairs(self._steedFightData.masters[lvl].unLocks) do
			if v then
				count = count + 1;
			end
		end
	end
	return count;
end

function i3k_game_context:isShowRedByIndex(lvl, index)
	if self._steedFightData and self._steedFightData.masters[lvl] and self._steedFightData.masters[lvl].unLocks then
		local havaUnLocks = self:havaUnLocksCount(lvl);
		if havaUnLocks > 0 and not self._steedFightData.masters[lvl].unLocks[index] then
			local item = i3k_db_steed_fight_up_prop[lvl].needItem[havaUnLocks];
			local count = 0;
			for i,e in ipairs(item) do
				if g_i3k_game_context:GetCommonItemCanUseCount(e.itemID) >= e.itemCount then
					count = count + 1;
				end
			end
			if count == #item then
				return true;
			end
		end
	end
	return false;
end

function i3k_game_context:isUnLocksByIndex(lvl, index)
	if self._steedFightData and self._steedFightData.masters[lvl] and self._steedFightData.masters[lvl].unLocks then
		if self._steedFightData.masters[lvl].unLocks[index] then
			return true;
		end
	end
	return false;
end

function i3k_game_context:getSteedFightProperty()
	local data = {}
	local propTb = {}
	if self:GetLevel() >= i3k_db_steed_fight_base.openLvl then
		if self:getUseSteed() ~= 0 and self:getSteedFightShowCount() ~= 0 then
			if self._steedFightData and self._steedFightData.masters then
				for i, e in ipairs(i3k_db_steed_fight_up_prop) do
					if self._steedFightData.masters[i] and self._steedFightData.masters[i].unLocks then
						for k,v in pairs(self._steedFightData.masters[i].unLocks) do
							if e.propTb[k] then
								table.insert(data, e.propTb[k])
							end
						end
					end
				end
			end
			for _, e in ipairs(data) do
				for __, ee in ipairs(e) do
					if ee.propID ~= 0 then
						if propTb[ee.propID] then
							propTb[ee.propID] = propTb[ee.propID] + ee.propValue
						else
							propTb[ee.propID] = ee.propValue
						end
					end
				end
			end
		end
	end
	return propTb
end

function i3k_game_context:getSteedFightMastersPower()
	return g_i3k_db.i3k_db_get_battle_power(self:getSteedFightProperty(), true)
end

-- 更新正在使用的坐骑是否可进行骑战状态
function i3k_game_context:updateRideIsCanFight()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:updateRideIsCanFight()
	end
end

------------------------ 良驹之灵 began ------------------------
function i3k_game_context:setUpLevelSteedSpiritData(lvl)
	if lvl >= i3k_db_steed_fight_base.spiritOpenLvl and self:getSteedSpiritStar() <= 0 and self:getUseSteed() ~= 0 and self:getSteedFightShowCount() ~= 0 then
		self:setSteedSpiritStar(0)
		self:setSteedSpiritAutoChange(1)
		self:UpdateSteedSpiritShow()
	end
end

-- 登录同步良驹之灵数据
function i3k_game_context:setSteedSpiritInfo(steedSpirit)
	self._steedSpirit = steedSpirit
end

function i3k_game_context:getSteedSpiritInfo()
	return self._steedSpirit
end

-- 星级
function i3k_game_context:setSteedSpiritStar(star)
	self._steedSpirit.star = star
end

function i3k_game_context:getSteedSpiritStar()
	return self._steedSpirit and self._steedSpirit.star or 0
end

function i3k_game_context:getSteedSpiritRank()
	return math.modf(self:getSteedSpiritStar() / i3k_db_steed_fight_base.rankStarCount)
end

function i3k_game_context:addSteedSpiritUpStarTimes()
	self._steedSpirit.upStarTimes  = self._steedSpirit.upStarTimes + 1
end

function i3k_game_context:setSteedSpiritUpStarTimes()
	self._steedSpirit.upStarTimes = 0
end

function i3k_game_context:getSteedSpiritUpStarTimes()
	return self._steedSpirit and self._steedSpirit.upStarTimes or 0
end

-- 新增良驹之灵形象
function i3k_game_context:addSteedSpiritShowIDs(showID)
	if not self._steedSpirit.showIDs then
		self._steedSpirit.showIDs = {}
	end
	self._steedSpirit.showIDs[showID] = -1
end

function i3k_game_context:getSteedSpiritShowIDs()
	return self._steedSpirit and self._steedSpirit.showIDs or {}
end

function i3k_game_context:setSteedSpiritCurShowID(showID)
	self._steedSpirit.curShowID = showID
end

function i3k_game_context:getSteedSpiritCurShowID()
	return self._steedSpirit and self._steedSpirit.curShowID or 1
end

function i3k_game_context:UpdateSteedSpiritShow()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateSteedSpiritShow(not self:getSteedSpiritIsHide())
	end
end
function i3k_game_context:setSteedSpiritIsHide(hide)
	self._steedSpirit.hide = hide
end

function i3k_game_context:getSteedSpiritIsHide()
	return self._steedSpirit and self._steedSpirit.hide == 1 or false
end

-- 升阶自动替换坐骑外显
function i3k_game_context:setSteedSpiritAutoChange(isAuto)
	self._steedSpirit.autoChange = isAuto
end

function i3k_game_context:getSteedSpiritIsAutoChange()
	return self._steedSpirit and self._steedSpirit.autoChange == 1 or false
end

function i3k_game_context:autoChangeSteedSpiritModel(showID)
	if self:getSteedSpiritIsAutoChange() then
		self:setSteedSpiritCurShowID(showID)
	end
	self:UpdateSteedSpiritShow()
end

function i3k_game_context:setSteedSpiritSkillsLvl(skillID, lvl)
	if self._steedSpirit.skills[skillID] then
		self._steedSpirit.skills[skillID].level = lvl
	else
		self._steedSpirit.skills[skillID] = {}
		self._steedSpirit.skills[skillID].id = skillID
		self._steedSpirit.skills[skillID].level = lvl
	end
end

function i3k_game_context:getSteedSpiritSkills()
	local skills = {}
	if self._steedSpirit then
		for k, v in pairs(i3k_db_steed_fight_spirit_skill) do
			if self._steedSpirit.skills and self._steedSpirit.skills[k] then
				skills[k] = {id = self._steedSpirit.skills[k].id, level = self._steedSpirit.skills[k].level}
			else
				skills[k] = {id = k, level = 0}
			end
		end
	end
	return skills
end

function i3k_game_context:getIsUnlockSteedSpirit()
	if self:GetLevel() >= i3k_db_steed_fight_base.spiritOpenLvl then
		if self:getUseSteed() ~= 0 and self:getSteedFightShowCount() ~= 0 and self:getSteedSpiritStar() >= 0  then
			return true
		end
	end
	return false
end

function i3k_game_context:getSteedSpiritProperty()
	local propData = {}
	if self:GetLevel() >= i3k_db_steed_fight_base.spiritOpenLvl then
		if self:getUseSteed() ~= 0 and self:getSteedFightShowCount() ~= 0 and self:getSteedSpiritStar() > 0  then
            local data = i3k_db_steed_fight_spirit[self:getSteedSpiritStar()].propTb
            for _, e in ipairs(data) do
				local propID = self:dealXingHunPropId(e.propID)
                if propID ~= 0 then
                    propData[propID] = (propData[propID] or 0) + e.propValue
                end
            end
        end
	end
	return propData
end

-- 良驹之灵战力
function i3k_game_context:getSteedSpiritPower()
	return g_i3k_db.i3k_db_get_battle_power(self:getSteedSpiritProperty(), true)
end

-- 骑战红点，包含马术精通,良驹之灵
function i3k_game_context:getIsShowSteedFightRed()
	return self:canfightSteedRed() or self:getIsShowSteedSpiritRed() or self:getSteedEquipRed()
end

function i3k_game_context:getIsShowSteedSpiritRed()
	return self:getCanUpSteedSpiritStar() or self:getCanUpSteedSpiritSkill() or self:canUnlockNewSpirit()
end

-- 是够可激活升级技能
function i3k_game_context:getCanUpSteedSpiritSkill()
	if self:getIsUnlockSteedSpirit() then
		for i, e in ipairs(self:getSteedSpiritSkills()) do
			if self:getCanUpSteedSpiritSkillID(i, e) then
				return true
			end
		end
	end
	return false
end

function i3k_game_context:getCanUpSteedSpiritSkillID(skillID, skillInfo)
	local dbCfg = i3k_db_steed_fight_spirit_skill[skillID]
	local lvl = skillInfo.level
	if lvl + 1 <= #dbCfg then
		local nextCfg = dbCfg[lvl+1]
		return self:getSteedSpiritRank() >= nextCfg.needRank and g_i3k_db.i3k_db_get_item_is_enough_up(nextCfg.needItems), nextCfg.needRank
	end

	return false, 1
end

-- 是够可锤炼
function i3k_game_context:getCanUpSteedSpiritStar()
	if self:getIsUnlockSteedSpirit() then
		local spiritDB = i3k_db_steed_fight_spirit
		local star = self:getSteedSpiritStar()
		if star + 1 <= #spiritDB then
			return g_i3k_db.i3k_db_get_item_is_enough_up(spiritDB[star + 1].consumeItems)
		end
	end
	return false
end

-- 神兵变身下改变速度
function i3k_game_context:getSteedSpiritChangeSpeed()
	if self:getIsUnlockSteedSpirit() then
		for i, e in ipairs(self:getSteedSpiritSkills()) do
			local dbCfg = i3k_db_steed_fight_spirit_skill[e.id]
			if dbCfg[e.level] and e.level > 0 and dbCfg[e.level].addSpeed ~= 0 then
				return dbCfg[e.level].addSpeed
			end
		end
	end
	return 0
end

function i3k_game_context:UpdateSteedSpiritSpeed()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateSteedSpiritSpeed(self:IsInSuperMode())
	end
end

-- 是否有追加良驹之灵可解锁
function i3k_game_context:canUnlockNewSpirit()
	for k, v in pairs(i3k_db_steed_fight_spirit_show) do
		if v.spiritType == 2 then
			if not self._steedSpirit.showIDs or not self._steedSpirit.showIDs[k] then
				if g_i3k_game_context:GetCommonItemCanUseCount(v.needItem) >= v.needItemCount then
					return true
				end
			end
		end
	end
	return false
end

------------------------ 良驹之灵 end ------------------------

--可装备的骑术集合
function i3k_game_context:setAllSteedSkills(skills)
	for k, v in pairs(skills) do
		self._allSteedSkill[k] = true
	end
end

function i3k_game_context:getAllSteedSkills()
	return self._allSteedSkill
end

function i3k_game_context:setUseSteed(id)
	self._useSteed = id
	self:RefreshRideProps()
	self:setUseRide()
end

function i3k_game_context:getUseSteed()
	return self._useSteed
end

function i3k_game_context:haveSteed()
	if self:IsOnMulRide() then
		return true
	end
	if i3k_db_common.debugswitch.rideopen ~= 0 then
		local guardState = self:GetIsGuard()
		if g_i3k_db.i3k_db_get_is_can_ride_frome_mapType() and not self:IsInMissionMode() and not guardState then
			return self._useSteed ~= 0
		end
	end
	return false;
end

-- 设置坐骑id
function i3k_game_context:setUseRide()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UseRide(g_i3k_game_context:getUseSteed())
	end
end

-- 设置坐骑皮肤
function i3k_game_context:setRideCurShowID()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:setRideCurShowID(g_i3k_game_context:getSteedCurShowID())
	end
end

function i3k_game_context:setSteedAttrInfo(id, attrTable)
	self._steedAttrInfo[id] = attrTable
end

function i3k_game_context:updateSteedAttrInfo(id)
	local starInfo = self._steedStarAttr[id] or {}
	local pracInfo = self._steedPracAttr[id] or {}
	if not self._steedAttrInfo[id] then
		self._steedAttrInfo[id] = {}
	end
	for i,v in pairs(starInfo) do
		self._steedAttrInfo[id][v.attrId] = {attrId = v.attrId, attrValue = v.attrValue}
		for j,t in pairs(pracInfo) do
			if not starInfo[t.attrId] then
				self._steedAttrInfo[id][t.attrId] = {attrId = t.attrId, attrValue = t.attrValue}
			end
			if t.attrId==v.attrId then
				self._steedAttrInfo[id][t.attrId] = {attrId = t.attrId, attrValue = t.attrValue + v.attrValue}
				break
			end
		end
	end
end

function i3k_game_context:getSteedAttrInfo(id)
	return i3k_clone(self._steedAttrInfo[id] or {})
end

--坐骑的战斗力
function i3k_game_context:getSteedPower(attrTable)
	local hero = i3k_game_get_player_hero()
	if not hero then
		return
	end
	local property = {}
	for i,v in ipairs(attrTable or {}) do
		if v.id > 0 then
			if property[v.id] then
				property[v.id] = v.value + property[v.id]
			else
				property[v.id] = v.value
			end
		end
	end
	return g_i3k_db.i3k_db_get_battle_power(property,true)
end

--坐骑升星属性
function i3k_game_context:setSteedStarAttr(id, attrTable)
	self._steedStarAttr[id] = attrTable
end

function i3k_game_context:getSteedStarAttr(id)
	return self._steedStarAttr[id] or {}
end

--坐骑洗练属性
function i3k_game_context:setSteedPracAttr(id, attrTable)
	local tmpTable = {}
	for i,v in pairs(attrTable) do
		tmpTable[i] = {}
		tmpTable[i].attrId = i
		tmpTable[i].attrValue = v
	end
	self._steedPracAttr[id] = tmpTable
	--self:updateSteedAttrInfo(id)
end

function i3k_game_context:getSteedPracAttr(id)
	return self._steedPracAttr[id] or {}
end

function i3k_game_context:setSavePracticeData(_oldPartTable ,needValue)
	local info = self:getSteedInfoBySteedId(needValue.id)
	info.enhanceAttrs = needValue.attrs
	--self:setSteedAttrInfo(needValue.id, needValue.attrTable)
	self:setSteedInfo(info)
	self:RefreshRideProps()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SteedPractice, "setSavePracticeData",needValue, info)
	--g_i3k_ui_mgr:RefreshUI(eUIID_SteedPractice, needValue.id, info, needValue.power)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Steed, "setData",needValue.id)--
end


--坐骑是否可以驯化
function i3k_game_context:isEnougCollectSteed(id)
	local allSteed = self:getAllSteedInfo()
	if not allSteed[id] then
		local _tmp_need = i3k_db_steed_cfg[id].tameNeedId
		local _tmp_need_count = i3k_db_steed_cfg[id].tameNeedCount
		return self:GetCommonItemCanUseCount(_tmp_need) >= _tmp_need_count
	end
end

--坐骑是否满足洗炼/升星/骑术
function i3k_game_context:isEnoughUpSteedPractice(steedId)
	local needId1 = i3k_db_steed_cfg[steedId].practiceId1
	local needCount1 = i3k_db_steed_cfg[steedId].practiceCount1
	local needId2 = i3k_db_steed_cfg[steedId].practiceId2
	local needCount2 = i3k_db_steed_cfg[steedId].practiceCount2
	local itemCount1 = g_i3k_game_context:GetCommonItemCanUseCount(needId1)
	local itemCount2 = g_i3k_game_context:GetCommonItemCanUseCount(needId2)
	local cur_level = g_i3k_game_context:GetLevel()
	local need_level = i3k_db_common.functionOpen.steedfunction
	if cur_level >= need_level then
		return needCount1<=itemCount1 and needCount2<=itemCount2
	end
end

function i3k_game_context:isEnoughUpSteedStar(id,info)
	if not i3k_db_steed_star[info.id][info.star+1] then
		return false
	end
	local needId1 = i3k_db_steed_star[info.id][info.star+1].starNeedId1
	local needCount1 = i3k_db_steed_star[info.id][info.star+1].starNeedCount1
	local itemCount1 = g_i3k_game_context:GetCommonItemCanUseCount(needId1)
	local needId2 = i3k_db_steed_star[info.id][info.star+1].starNeedId2
	local needCount2 = i3k_db_steed_star[info.id][info.star+1].starNeedCount2
	local itemCount2 = g_i3k_game_context:GetCommonItemCanUseCount(needId2)
	local cur_level = g_i3k_game_context:GetLevel()
	local need_level = i3k_db_common.functionOpen.steedfunction
	if cur_level >= need_level then
		return needCount1<=itemCount1 and needCount2<=itemCount2
	end
end

function i3k_game_context:isEnoughUpSteedSkill(id,info)
	local canUseCount = i3k_db_steed_star[info.id][info.star].canUseRideCount
	local curSkillCount = #info.curHorseSkills
	local cur_level = g_i3k_game_context:GetLevel()
	local need_level = i3k_db_common.functionOpen.steedfunction
	if cur_level >= need_level then
		return canUseCount > curSkillCount
	end
end

--判断是否可以突破
function i3k_game_context:isEnoughUpBreakLevel(id,info)
	local cfg = i3k_db_steed_breakCfg[info.id][info.breakLvl + 1]
	if cfg and not i3k_db_steed_star[info.id][info.star+1]then
		local needId1 = cfg.itemId1
		local needCount1 = cfg.itemCount1
		local itemCount1 = g_i3k_game_context:GetCommonItemCanUseCount(needId1)
		local needId2 = cfg.itemId2
		local needCount2 = cfg.itemCount2
		local itemCount2 = g_i3k_game_context:GetCommonItemCanUseCount(needId2)
		return needCount1 <= itemCount1 and needCount2 <= itemCount2
	else
		return false
	end
end

--坐骑-骑术是否可激活
function i3k_game_context:isEnoughUpSteedSkillToAct(id,info) --info 单独坐骑的数据信息  坐骑id
	self.canUse = 0
	local isUp  = {}
	local bIsLoop = false
	if info.star >= 2 then
		local allSkill = g_i3k_game_context:getAllSteedSkills()
		local cur_level = g_i3k_game_context:GetLevel()
		local need_level = i3k_db_common.functionOpen.steedfunction
		local levelData = g_i3k_game_context:getSteedSkillLevelData()

		if cur_level >= need_level then
			for i,v in ipairs(i3k_db_steed_skill) do
				if not allSkill[v.skillId] then
					if v.skillType==2 then
						local needId = v.actNeedId
						local needCount = v.actNeedCount
						local itemCount = g_i3k_game_context:SearchHorseBook(needId)

						if needCount<=itemCount then
							self.canUse = 1
						end
					end
				end
				local state = self:isShowUpLevel(id,info, i,v.skillId)
				if state~=0 then
					isUp[i] = self:isUpSteedSkillEnough(v.skillId,levelData[v.skillId], state~=5)  --jxw 判断是否可以升级
					if i3k_db_steed_skill[v.skillId].skillType == 1 then
						if v.skillId ~= i3k_db_steed_cfg[id].equitationId then
							isUp[i] = false
						end
					end
					----stateId:1先天骑术 2可激活 3装备中 4 可装备 5 未激活
				end
			end
		end
	end

	local _canUp =false
	for i,v in pairs(isUp) do
		if v then
			_canUp = true
		end
	end

	return self.canUse == 1 or _canUp
end

function i3k_game_context:isShowUpLevel(id,info ,index,skillid)
	local stateId = 0
	if not i3k_db_steed_skill[index] then
		return stateId
	end

	local data = i3k_db_steed_skill[index]
	local _skillTable = {}
	if data.skillType==2 then
		local needId = data.actNeedId
		local needCount = data.actNeedCount
		local itemCount = g_i3k_game_context:SearchHorseBook(needId)
		if needCount<=itemCount then
			stateId = 2--可以激活
		else
			stateId = 5--未激活
		end
	end
	local rideSkill = i3k_db_steed_cfg[id].equitationId--先天骑术ID
	if skillid == rideSkill then
		stateId = 1--1先天骑术
	end

	local allSkill = g_i3k_game_context:getAllSteedSkills()
	--skillCfg { skillId = 14, skillName = '正义之师', skillType = 2, actNeedId = 65872, actNeedCount = 1, iconID = 1909 },
	local stateTable = {[1] = {}, [2] = {}, [3] = {}, [4] = {}, [5] = {},}
	if info.curHorseSkills ==data.skillId then
		stateId = 3
	elseif allSkill[data.skillId] and rideSkill~= data.skillId then
		stateId = 4
	end
	return stateId
	----stateId:1先天骑术 2可激活 3装备中 4 可装备 5 未激活
end

----------------------------判断是否有坐骑满足驯化/洗炼/升星/骑术/突破----------------------------
function i3k_game_context:canBetterSteed()
	return self:steedTameRedPoint()
end

function i3k_game_context:steedStarRedPoint()--升星红点
	local steedInfo = self:getAllSteedInfo()--已经解锁的坐骑
	if next(steedInfo) ~= nil then
		for i,v in ipairs(steedInfo) do
			if i3k_db_steed_cfg[i].justEquitation~=1 then
				if self:isEnoughUpSteedStar(i,v) then
					return true
				end
			end
		end
	end
	return false
end
function i3k_game_context:steedBreakRedPoint() --突破红点
	local steedInfo = self:getAllSteedInfo()--已经解锁的坐骑
	if next(steedInfo) ~= nil then
		for i,v in ipairs(steedInfo) do
			if i3k_db_steed_cfg[i].justEquitation~=1 then
				if self:isEnoughUpBreakLevel(i,v) then
					return true
				end
			end
		end
	end
	return false
end

function i3k_game_context:steedTameRedPoint()--是否有坐骑满足条件
	local allSteed = self:getAllSteedInfo()
	for i = 1, #i3k_db_steed_cfg do
		if next(allSteed) ~= nil and allSteed[i] and allSteed[i].id == i then
			if i3k_db_steed_cfg[i].justEquitation~=1 then
				if self:steedPracticeRedPoint() or self:steedStarRedPoint() or self:steedActSkillRedPoint() or self:steedBreakRedPoint() then
					return true
				end
			end
		else
			if self:isEnougCollectSteed(i) then
				return true
			end
		end
	end
	return false
end

function i3k_game_context:steedPracticeRedPoint()--洗炼红点
	for i = 1, #i3k_db_steed_cfg do
		if self:isEnoughUpSteedPractice(i) then
			return true
		end
	end
	return false
end

function i3k_game_context:steedSkillRedPoint()--骑术红点
	local steedInfo = self:getAllSteedInfo()
	if next(steedInfo) ~= nil then
		for i,v in pairs (steedInfo) do
			if self:isEnoughUpSteedSkill(i,v) then
				return true
			end
		end
	end
	return false
end

function i3k_game_context:steedActSkillRedPoint()--骑术红点（是否可以激活）
	local steedInfo = self:getAllSteedInfo()
	if next(steedInfo) ~= nil then
		for i,v in pairs (steedInfo) do
			if self:isEnoughUpSteedSkillToAct(i,v) then
				return true
			end
		end
	end
	return false
end
-------------------------------------------------------------------------------------
-- 判断单个骑术是否可以升级  add by jxw 16.9.27

-------骑术红点---- ---
function i3k_game_context:isUpSteedSkillEnough(skillID, skill_lv ,isAct)
	--激活后方可升级 isAct 已激活 --最高等级 不再处理
	--stateId:1先天骑术 2可激活 3装备中 4 可装备 5 未激活
	if not skill_lv then
		return false
	end

	if isAct then
		local _skill_data1 = i3k_db_steed_skill_cfg[skillID]
		if not _skill_data1[skill_lv + 1] then
			return false
		end
		local need_item = {}
		local tab = {}
		if  _skill_data1[skill_lv + 1].useBookId == 0 then
			for i =1,2 do
				local usePropId = string.format("usePropId%s",i)
				local usePropCount = string.format("usePropCount%s",i)
				local tab = {itemID = _skill_data1[skill_lv + 1][usePropId] ,itemCount = _skill_data1[skill_lv + 1][usePropCount] }
				if _skill_data1[skill_lv + 1][usePropId]~= 0 then
					table.insert(need_item ,tab)
				end
			end
			for i=1, #need_item do
				local itemID = need_item[i].itemID
				local canUseCount = g_i3k_game_context:GetCommonItemCanUseCount(itemID)
				local needUseCount =need_item[i].itemCount
				if canUseCount >= needUseCount then
					tab[i] = true
				else
					tab[i] = false
				end
			end
		elseif  _skill_data1[skill_lv + 1].useBookId ~= 0 then
			if _skill_data1[skill_lv + 1].usePropCount1 <= g_i3k_game_context:GetCommonItemCanUseCount(_skill_data1[skill_lv + 1].usePropId1) then
				tab[1] = true
			else
				tab[1] = false
			end

			if _skill_data1[skill_lv + 1].useBookCount <= g_i3k_game_context:SearchHorseBook(_skill_data1[skill_lv + 1].useBookId) then
				tab[2] = true
			else
				tab[2] = false
			end
		end
		local index = 0
		for i,v in ipairs(tab) do
			if v then
				index = index +1
			end
		end
		return index ==#tab
	else
		return false
	end
end

--设置骑术等级数据 add by jxw 16.9.27
function i3k_game_context:setSteedSkillLevelData(info)
	for i,v in ipairs(i3k_db_steed_skill_cfg) do --skillID lv
		self._steedSkillLevel[i] = 1
		if info[i] then
			self._steedSkillLevel[i] = info[i]
		end
	end
end

function i3k_game_context:getSteedSkillLevelData()
	return self._steedSkillLevel
end

--设置单独某个骑术的等级
function i3k_game_context:setAnySteedSkillLevelData(skillId ,level)
	self._steedSkillLevel[skillId] = level
end

--计算单独坐骑的战力
function i3k_game_context:getSteedFightPower(info)
	local starLvl = info and info.star or 0
	local breakLvl = info and info.breakLvl or 0
	local starCfg = i3k_db_steed_star[info.id][starLvl]
	local attrTable = {}
	local function caclPorp(cfg)
	for i = 1 , 9 do
			local propID = cfg["attrId"..i]
			if propID > 0 then
				local propValue = cfg["attrValue"..i]
				attrTable[propID] = attrTable[propID] and attrTable[propID] + propValue or propValue
			end
		end
	end

	if breakLvl <= 0 then
		caclPorp(starCfg)
	else
		local breakCfg = i3k_db_steed_breakCfg[info.id][breakLvl]
		caclPorp(starCfg)
		caclPorp(breakCfg)
				end

	local enhanceAttrs = info and info.enhanceAttrs or {}
	for _, v in pairs(enhanceAttrs) do
		attrTable[v.id] = attrTable[v.id] and attrTable[v.id] + v.value or v.value
			end

	local power = g_i3k_db.i3k_db_get_battle_power(attrTable, true)
	local skillPower = self:AppraiseEquestrianSkill(info.id) --根据坐骑id 统计附加骑术战力

	return power + skillPower
end

-- 获取自己所有的坐骑皮肤总战力
function i3k_game_context:getAllSteedSkinPower()
   local skinPower = 0
    for k, v in pairs(self:getSteedShowIDs()) do
        local cfg = i3k_db_steed_huanhua[k]
        if v > i3k_game_get_time() or v == -1 then
            skinPower = skinPower + self:getSteedSkinPower(cfg)
        end
    end
    return skinPower
end

----------------------------------------------------------------------------------
--活动完成、进入记录
function i3k_game_context:setActivityLogs(logs)
	self._activityLogs = logs
	self._activityKillLog = logs
end

function i3k_game_context:getActivityDayEnterTime(actId)
	return self._activityLogs[actId] and self._activityLogs[actId].dayEnterTimes or 0
end

function i3k_game_context:getActivityMapIsFinished(actId, dungeonId)
	return self._activityLogs[actId] and self._activityLogs[actId].enterMaps[dungeonId]
end

function i3k_game_context:addActivityDayEnterTime(dungeonId,count)
	local times = count or 1
	if i3k_db_activity_cfg[dungeonId] then
		local actId = i3k_db_activity_cfg[dungeonId].groupId
		if self._activityLogs[actId]  then
			if self._activityLogs[actId].dayEnterTimes then
				self._activityLogs[actId].dayEnterTimes = self._activityLogs[actId].dayEnterTimes + times
				self._activityLogs[actId].enterMaps[dungeonId] = true
			else
				self._activityLogs[actId].dayVIPBuyTimes = 0
				self._activityLogs[actId].dayItemAddTimes = 0
				self._activityLogs[actId].dayEnterTimes = times
				self._activityLogs[actId].enterMaps = {}
				self._activityLogs[actId].enterMaps[dungeonId] = true
			end
		else
			self._activityLogs[actId] = {}
			self._activityLogs[actId].dayItemAddTimes = 0
			self._activityLogs[actId].dayVIPBuyTimes = 0
			self._activityLogs[actId].dayEnterTimes = times
			self._activityLogs[actId].enterMaps = {}
			self._activityLogs[actId].enterMaps[dungeonId] = true
		end
	end
end

function i3k_game_context:setActivityMapFinish(dungeonId)
	if i3k_db_activity_cfg[dungeonId] then
		local actId = i3k_db_activity_cfg[dungeonId].groupId
		if self._activityLogs[actId] then
			self._activityLogs[actId].enterMaps[dungeonId] = true
		end
	end
end

function i3k_game_context:GetActivityKillMaxCount(actId,lvl)
	if self._activityKillLog[actId] then
		if self._activityKillLog[actId].records then
			return self._activityKillLog[actId].records[lvl] or 0
		else
			return 0
		end
	end
	return 0
end

function i3k_game_context:SetActivityKillMaxCount(actId,lvl,count)
	if self._activityKillLog[actId] then
		if self._activityKillLog[actId].records then
			if self._activityKillLog[actId].records[lvl] then
				if (actId==1 or actId==2) and self._activityKillLog[actId].records[lvl] < count then
					self._activityKillLog[actId].records[lvl]= count
				elseif actId~=1 and actId~=2 and self._activityKillLog[actId].records[lvl] > count then
					self._activityKillLog[actId].records[lvl]= count
				end
			else
				self._activityKillLog[actId].records[lvl] = count
			end
		else
			self._activityKillLog[actId].records = {}
			self._activityKillLog[actId].records[lvl] = count
		end
	else
		self._activityKillLog[actId] = {}
		self._activityKillLog[actId].records = {}
		self._activityKillLog[actId].records[lvl] = count
	end
end

function i3k_game_context:setKillCount(count)
	local world = i3k_game_get_world()
	--if world and world._mapType == g_ACTIVITY then
		self._killcount = count
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_KillCount, "showInfo",self._killcount)
	--end
end

function i3k_game_context:getKillCount()
	return self._killcount;
end

function i3k_game_context:addActivityDayBuyTimes(actId, actCount)
	self._activityLogs[actId].dayVIPBuyTimes = self._activityLogs[actId].dayVIPBuyTimes + actCount
end

function i3k_game_context:getActDayBuyTimes(actId)
	return self._activityLogs[actId] and self._activityLogs[actId].dayVIPBuyTimes or 0
end

--道具加的次数
function i3k_game_context:getActDayItemAddTimes()
	local _, log = next(self._activityLogs)
	return log and log.dayItemAddTimes or 0
end
function i3k_game_context:GetActivityDungeonNormalEnterTimes(actId)
	return i3k_db_activity[actId].times + self:getActDayBuyTimes(actId) + self:getActDayItemAddTimes(actId)
end

function i3k_game_context:getActMapRecord(actId, mapId)
	local logs = self._activityLogs
	local log = self._activityLogs[actId]
	return log and log.records and log.records[mapId] or 0
end

function i3k_game_context:setActMapRecord(actId, mapId,process)
	if self._activityLogs[actId] then
		if self._activityLogs[actId].records then
			self._activityLogs[actId].records[mapId] = process
		else
			self._activityLogs[actId].records = {}
			self._activityLogs[actId].records[mapId] = process
		end
	else
		self._activityLogs[actId] = {}
		self._activityLogs[actId].records = {}
		self._activityLogs[actId].records[mapId] = process
	end
end

function i3k_game_context:IsFirstEnterActivity()
	for k,v in pairs(self._activityLogs) do
		return false
	end
	return true
end

function i3k_game_context:onBattleTimeChangeHandle(ntime,color)
	if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleFuben, "updateTimeElapse",ntime,color)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleFubenDesert, "updateOutCountTime", ntime, color)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_DesertBattleWatchWar, "updateOutCountTime", ntime, color)
	end
end

function i3k_game_context:SetActivityPercent(percent)
	self._activityPercent = percent
end

function i3k_game_context:GetActivityPercent()
	return self._activityPercent
end

----------背包物品每日限制使用次数相关---------------
function i3k_game_context:GetDayUseItemsTimesData()
	return self._roleData.curChar._dayUseItemsTimes
end

function i3k_game_context:ResetDayUseItemsTimesData()
	self._roleData.curChar._dayUseItemsTimes = {}
end

function i3k_game_context:GetDayUseItemTimes(id)
	return self._roleData.curChar._dayUseItemsTimes[id] or 0
end

function i3k_game_context:AddDayUseItemTiems(id, count)
	if self._roleData.curChar._dayUseItemsTimes[id] then
		self._roleData.curChar._dayUseItemsTimes[id] = self._roleData.curChar._dayUseItemsTimes[id] + count
	else
		self._roleData.curChar._dayUseItemsTimes[id] = count
	end
end

--操作使用道具数据
function i3k_game_context:SetUseItemData(id, count, chest,reason)
	self:UseBagMiscellaneous(id, count)
	if g_i3k_db.i3k_db_get_bag_item_limitable(id) then--每日限制使用道具数据操作
		self:AddDayUseItemTiems(id, count)
	end
	if g_i3k_db.i3k_db_get_other_item_cfg(id) then
		local needItemId, needItemCount = g_i3k_db.i3k_db_get_day_use_consume_info(id)
		if needItemId ~= 0 and needItemCount ~= 0 then
			self:UseCommonItem(needItemId, needItemCount * count,reason)
		end
	end
	local items = chest == nil and g_i3k_db.i3k_db_get_use_item_gain_item(id, count) or chest
	if next(items) then
		g_i3k_ui_mgr:ShowGainItemInfo(items, nil, reason == AT_BATCH_USE_ITEM_AS_VIT)
	end
end

--赠花相关
function i3k_game_context:SetGiveFlowerData(count, name)
	local flowerID = g_i3k_db.i3k_db_get_common_cfg().give_flower.flowerID
	self:UseBagMiscellaneous(flowerID, count)
	local str = string.format("赠送%s朵%s成功", count, g_i3k_db.i3k_db_get_common_item_name(flowerID))
	g_i3k_ui_mgr:PopupTipMessage(str)
end

--魅力值相关
function i3k_game_context:SetCharmData(giveFlower, acceptFlower, refresh)
	if not refresh then
		g_i3k_ui_mgr:OpenUI(eUIID_Charm)
		g_i3k_ui_mgr:RefreshUI(eUIID_Charm, giveFlower, acceptFlower)
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_Charm, "refreshCharmScroll", giveFlower, acceptFlower)
	end
end

function i3k_game_context:SetCharm(count)
	self._roleData.curChar._charm = count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Friends, "updateCharm")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Charm, "updateData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy, "updatePropertyLabel")
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_RoleLy2, "updatePropertyLabel")
end

function i3k_game_context:GetCharm()
	return self._roleData.curChar._charm
end

----------时装数据相关---------------
function i3k_game_context:SetFashionData(curFashions, allFashions)
	self._fashionData.curFashions = curFashions
	self._fashionData.allFashions = allFashions  --vector
end
--获取当前穿着时装的ID
function i3k_game_context:GetCurFashion()
	return self._fashionData.curFashions and self._fashionData.curFashions[2]
end

--是否显示时装
function i3k_game_context:GetIsShwoFashion()
	if self._fashionData and self:getCurWearShowType() == g_WEAR_FASHION_SHOW_TYPE then
		return true;
	end
	return false;
end

--是否显示时装武器
function i3k_game_context:GetIsShowWeapon()
	if self:getCurWeaponShowType() == g_FASTION_SHOW_TYPE then
		return true;
	end
	return false;
end

--所有已激活的时装
function i3k_game_context:GetAllFashions()
	return self._fashionData.allFashions
end

--使用时装道具
function i3k_game_context:SetUseFashionData(id)
	self:UseBagMiscellaneous(id, 1)
	local itemCfg = g_i3k_db.i3k_db_get_other_item_cfg(id)
	local fashionID = itemCfg.args1

	local fashionTb = i3k_sbean.DBFashion.new()
	fashionTb.id = fashionID
	fashionTb.enhanceProps = {}
	fashionTb.enhanceTimes = 0
	fashionTb.isInWardrobe = 0
	table.insert(self._fashionData.allFashions, fashionTb)

	local info = g_i3k_db.i3k_db_get_fashion_cfg(fashionID)
	local iconShow, redShow = self:TestBagShowState()
	self:OnBagShowStateChangedHandler(iconShow, redShow)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDressTips, "updateUseTips", info.getPathway, info.sex)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDress, "updateScroll")

end

--合并非绑定道具
local function combineItem(self, id)
	local haveCount = self:GetBagMiscellaneousCount(-math.abs(id))
	local haveCount1 = self:GetBagMiscellaneousCount(math.abs(id))
	self:UseBagMiscellaneous(-math.abs(id), haveCount)
	self:UseBagMiscellaneous(math.abs(id), haveCount1)
	local count = haveCount > haveCount1 and haveCount or haveCount1
	self:AddBagMiscellaneous(math.abs(id), count)
end

--批量合并非绑定道具
function i3k_game_context:combineItemFromIDs(ids)
	if not ids then return end

	for _, id in ipairs(ids) do
		combineItem(self, id);
	end

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateBag", self:GetBagInfo())
end

--独立合并非绑定道具
function i3k_game_context:combineItemFromID(id)
	combineItem(self, id)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateBag", self:GetBagInfo())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Blood_Pool, "loadScroll")
	g_i3k_ui_mgr:RefreshUI(eUIID_BaGuaSacrificeCheck)
end

--一生限制使用道具
function i3k_game_context:setOneTimesItemData(id, count)
	self.oneTimeItems[id] = (self.oneTimeItems[id] or 0) + count
	local hero = i3k_game_get_player_hero();
	if hero then
		hero:UpdateOneTimeItemProps()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "updateRolePower")

end

function i3k_game_context:getOneTimesItemData()
	return self.oneTimeItems
end

function i3k_game_context:setOneTimesItem(data)
	self.oneTimeItems = data
end

function i3k_game_context:setOneTimesItemAllCountData(data)
	for k,v in pairs(data) do
		self.oneIimeItemsAllCount[k] = (self.oneIimeItemsAllCount[k] or 0) + v
	end
end

function i3k_game_context:getOneTimesItemLvlForId(itemId)
	local infoCfgs = {}--id对应的类型信息 和 分组信息
	local isContain = false
	local types = {} --记录有几种类型的丹药
	local item  = {}
	for i0, v0 in ipairs(i3k_db_medicine_cfg) do
		for k, v in ipairs(v0.items) do
			infoCfgs[v.id] = {type = v.type, group = i0}
			if not types[v.type] then
				types[v.type] = v.type
				item[v.type] = {}
			end
			isContain = v.id == itemId
			if isContain then
				break
			end
		end
	end
	if not isContain and itemId then return true end

	------↑ 不带阶数的丹药跳过
	for _,v in pairs(i3k_db_new_item) do
		if v.type == UseItemOneTimes and infoCfgs[v.id] then
			if types[infoCfgs[v.id].type] then
				item[infoCfgs[v.id].type][v.args5] = v
			end
		end
	end

	local temp = {}
	local useCount = {}
	local isUseData = g_i3k_game_context:GetOneTimesItemAllCountData()
	if next(item) then
		for i,_ in pairs(types) do
			if item[i] then
				local fCount = 0
				for k, v in ipairs(item[i]) do
					if isUseData[v.id] then
						if isUseData[v.id] < v.useCount then
							temp[i] = {item = v, lvlIsFull = false}
							useCount[i] = isUseData[v.id]
							break
						elseif isUseData[v.id] == v.useCount then
							fCount = k
							temp[i] = {item = v, lvlIsFull = true}
							useCount[i] = 0
						end
					else
						if fCount == 0 then
							temp[i] = {item = item[i][1], lvlIsFull = false}
							useCount[i] = 0
							break
						else
							temp[i] = {item = v, lvlIsFull = false}
							useCount[i] = 0
							break
						end
					end
				end
			end
		end
	end
	if itemId then
		local cfg = g_i3k_db.i3k_db_get_other_item_cfg(itemId)
		if not temp[infoCfgs[cfg.id].type].lvlIsFull then
			return temp[infoCfgs[cfg.id].type].item.args5 == cfg.args5
		else
			return false
		end
	else
		return temp, useCount
	end
end

function i3k_game_context:getOneTimesItemAllCountDataForId(id)
	local cfg = g_i3k_db.i3k_db_get_other_item_cfg(id)
	local canUseCount = self:GetBagItemCanUseCount(id)
	if self.oneIimeItemsAllCount[id] then
		if cfg.useCount - self.oneIimeItemsAllCount[id] > 0 then
			return canUseCount > cfg.useCount - self.oneIimeItemsAllCount[id] and cfg.useCount - self.oneIimeItemsAllCount[id] or canUseCount
		else
			return 0
		end
	else
		return canUseCount > cfg.useCount and cfg.useCount or canUseCount
	end
end

function i3k_game_context:GetOneTimesItemAllCountData()
	return self.oneIimeItemsAllCount
end

--穿戴时装
function i3k_game_context:SetWearFashionData(fashionID)
	local cfg = g_i3k_db.i3k_db_get_fashion_cfg(fashionID)
	local hero = i3k_game_get_player_hero();
	if hero then
		if cfg.fashionType == g_FashionType_Weapon then
			if not (self._fashionData.curFashions[g_FashionType_Weapon] and self._fashionData.curFashions[g_FashionType_Weapon] ~= 0) then
				g_i3k_game_context:setCurWeaponShowType(g_FASTION_SHOW_TYPE)
				hero:setWeaponShowType(g_FASTION_SHOW_TYPE)
				hero:AttachFashion(fashionID, self:GetIsShowWeapon(), g_FashionType_Weapon)
			else
				hero:AttachFashion(fashionID, self:GetIsShowWeapon(), g_FashionType_Weapon)
			end
			self._fashionData.curFashions[cfg.fashionType] = fashionID
		elseif cfg.fashionType == g_FashionType_Dress then
			if self._fashionData.curFashions[cfg.fashionType] == nil then
				self:updateCurWearShowType(g_WEAR_FASHION_SHOW_TYPE)
				hero:setWearShowType(g_WEAR_FASHION_SHOW_TYPE)
			end
			self._fashionData.curFashions[cfg.fashionType] = fashionID
			--self._curWearType = g_WEAR_FASHION_SHOW_TYPE
			hero:AttachFashion(fashionID, self:getCurWearShowType() == g_WEAR_FASHION_SHOW_TYPE, g_FashionType_Dress)
		end
	else
		self._fashionData.curFashions[cfg.fashionType] = fashionID
	end

	local iconShow, redShow = self:TestBagShowState()
	self:OnBagShowStateChangedHandler(iconShow, redShow)
	g_i3k_ui_mgr:PopupTipMessage(string.format("穿戴成功"))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDress, "updateScroll")
	local heirloom = g_i3k_game_context:getHeirloomData()
	if cfg.fashionType == g_FashionType_Weapon and self:getCurWeaponShowType() ~= g_HEIRHOOM_SHOW_TYPE then --如果传家宝显示 需要脱掉
		local name = string.format("hero_skin_%s_%d", hero._guid, 1);
		hero._entity:DetachHosterSkin(name);
	end
end

--时装试穿
function i3k_game_context:SetTestFashionData(fashionID)
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:SetTestFationID(fashionID)
	end
end

--时装还原
function i3k_game_context:ResetTestFashionData()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:ResetTestFashion()
	end
end

--获取正在穿戴的时装信息
function i3k_game_context:GetWearFashionData()
	return self._fashionData.curFashions
end
function i3k_game_context:get_hero_skin_info(hero)
	local usefashion = {}
	for k2, v2 in pairs(hero._Usefashion) do
		if not hero._TestfashionID[k2] then
			for k4,v4 in pairs(v2.dressInfo) do
				usefashion[k4] = {}
				for k5,v5 in pairs(v4) do
					local name = "ui_"..v5.name
					local info = {name = name,path = v5.path,effectID = v5.effectID}
					table.insert(usefashion[k4], info)
				end
			end
		end
	end
	for k2, v2 in pairs(hero._TestfashionID) do
		local cfg = i3k_db_fashion_dress[v2]
		for k,v in pairs(cfg.fashionReflect) do
			local argsname = "skin"..hero._id..hero._gender
			local skincfg = i3k_db_fashion_dress_skin[v][argsname]
			local partID = i3k_db_fashion_dress_skin[v].partid
			usefashion[partID] = {}
			for k1, v1 in ipairs(skincfg) do
				local scfg = i3k_db_skins[v1]
				local name = string.format("hero_Fashionskin_%s_%d_%d_%d_%d", hero._guid,hero._TestfashionID[cfg.fashionType], cfg.fashionType,partID, k1);
				local info = {name = name,path = scfg.path,effectID = scfg.effectID}
				table.insert(usefashion[partID], info)
			end
		end
	end
	return usefashion
end

function i3k_game_context:needShowHeirloom(hero)
	if hero and hero:GetIsBeingHomeLandEquip() then
		return false
	end
	if hero then
		hero:changeWeaponShowType()
	end
	--[[local name = string.format("hero_skin_%s_%d", hero._guid, eEquipWeapon);
	local equip = hero._equips[eEquipWeapon];
	local isHave = false;
	if hero._Usefashion and hero._Usefashion[g_FashionType_Weapon] then
		isHave = true;
	else
		isHave = false;
	end
	hero:DetachFlyingEquip()
	if self:getCurWeaponShowType() ~= g_HEIRHOOM_SHOW_TYPE then --不显示神器，显示本来的装备
		hero._entity:DetachHosterSkin(name);
		if self:getCurWeaponShowType() == g_WEAPON_SHOW_TYPE then
		if equip and equip._skin and equip._skin.valid then
			if (not isHave) or (isHave and not (self:GetIsShowWeapon())) then
				for k, v in ipairs(equip._skin.skins) do
					hero._entity:AttachHosterSkin(v.path, v.name, not hero._syncCreateRes);
					hero:AttachSkinEffect(eEquipWeapon,v.effectID)
				end
			end
		elseif not (self:GetIsShowWeapon()) then
			hero:CreateFashion(hero._fashion, eEquipWeapon);
		end
		end
		if self:getCurWeaponShowType() == g_FLYING_SHOW_TYPE then
			local flyEquip = hero._equips[eEquipFlying]
			if flyEquip and flyEquip._model and flyEquip._model.valid then
				hero:AttachFlyingWeapon(flyEquip._model.models)
			end
		end
	else -- 脱下自身的装备 显示神器
		if equip and equip._skin and equip._skin.valid then
			for k, v in ipairs(equip._skin.skins) do
				hero._entity:DetachHosterSkin(v.name);
			end
			hero:DetachSkinEffect(eEquipWeapon);
		else
			hero:ReleaseFashion(hero._fashion, eEquipWeapon);
		end

		local scfg = i3k_db_skins[g_i3k_game_context:getHeirloomSkinID(hero._cfg.id)];
		if scfg then
			if  (not isHave) or (isHave and not (self:GetIsShowWeapon())) then
				hero._entity:AttachHosterSkin(scfg.path, name, not hero._syncCreateRes);
				if scfg.effectID then
					hero:AttachSkinEffect(eEquipWeapon, scfg.effectID)
				end
			end
		end
	end--]]
end

-- 显示/隐藏时装,武器时装已经不会走此逻辑了
function i3k_game_context:SetFashionIsShowData(fashionShow)
	local hero = i3k_game_get_player_hero();
	if hero then
		self._curWearType = fashionShow
		hero:SetFashionVisiable(fashionShow == g_WEAR_FASHION_SHOW_TYPE, g_FashionType_Dress)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDress, "onChangeSkinShowHandler")
end

function i3k_game_context:GetFashionIsShowData()
	return self:getCurWearShowType()
end

--获取已激活时装的数量
function i3k_game_context:GetAllActivationFashionsCount()
	local count = 0
	local allFashion = g_i3k_game_context:GetAllFashions()
	for i, v in ipairs(allFashion) do
		local cfg = g_i3k_db.i3k_db_get_fashion_cfg(v.id)
		if cfg and cfg.fashionType == 2 then  --是否是时装形象
			count = count + 1
		end
	end
	return count
end

--将时装放入衣橱
function i3k_game_context:PutFashionInWardrobe(fashionID)
	for i, v in ipairs(self._fashionData.allFashions) do
		if v.id == fashionID then
			v.isInWardrobe = 1
		end
	end
end

--将时装从衣橱取出
function i3k_game_context:TakeFashionFromWardrobe(fashionID)
	for i, v in ipairs(self._fashionData.allFashions) do
		if v.id == fashionID then
			v.isInWardrobe = 0
		end
	end
end

--获取衣橱里时装属性的总和
function i3k_game_context:GetFashionPropInWardrobe()
	local prop_Tb = {}
	for _, v in ipairs(self._fashionData.allFashions) do
		if v.isInWardrobe > 0 then
			if #v.enhanceProps ~= 0 then
				for _, e in ipairs(v.enhanceProps) do
					if e.id > 0 then
						table.insert(prop_Tb, {id = e.id, value = e.value})
					end
				end
			else
				local prop = g_i3k_db.i3k_db_get_fashion_property(v.id)
				for k, v in pairs(prop) do
					table.insert(prop_Tb, {id = k, value = v})
				end
			end
		end
	end
	local property = {}
	for i, v in ipairs(prop_Tb or {}) do
		property[v.id] = (property[v.id] or 0) + v.value
	end
	return property
end

--判断该时装是否在衣橱存放
function i3k_game_context:GetFashionInStorage(fashionID)
	local allFashion = g_i3k_game_context:GetAllFashions()
	for i, v in ipairs(allFashion) do
		if v.id == fashionID then
			return v.isInWardrobe > 0
		end
	end
	return false
end

--获取所有在衣橱的时装
function i3k_game_context:GetAllFashionInStorage()
	local allFashion = g_i3k_game_context:GetAllFashions()
	local tmpTb = {}
	for i, v in ipairs(allFashion) do
		if v.isInWardrobe > 0 then
			table.insert(tmpTb, v)
		end
	end
	return tmpTb
end

function i3k_game_context:CheckStorageOpen(index)
	local cfg =  i3k_db_fashion_wardrobe[index] 
	if cfg then
		return CheckStorageIsOpen[cfg.type]( cfg.arg1, cfg.arg2)
	else
		return false
	end
end
--判断衣橱是否已满
function i3k_game_context:GetStorageIsMax()
	local allFashion = g_i3k_game_context:GetAllFashions()
	local charm = g_i3k_game_context:GetCharm()  --魅力值or守护值
	local roleLvl = g_i3k_game_context:GetLevel()  --角色等级
	local capacity = 0  --满足条件的衣橱空间
	for i, v in ipairs(i3k_db_fashion_wardrobe) do
		local needCharm = v.needCharm
		local needLvl = v.needLvl
		if charm >= needCharm or roleLvl >= needLvl then
			capacity = capacity + 1
		end
	end
	local curFashionNum = 0 --当前衣橱里时装的数量
	for i, v in ipairs(allFashion) do
		if v.isInWardrobe > 0 then
			curFashionNum = curFashionNum + 1
		end
	end
	if curFashionNum >= capacity then
		return true
	end
	return false
end

--判断该时装是否精纺
function i3k_game_context:GetFashionIsSpinning(fashionID)
	local allFashion = g_i3k_game_context:GetAllFashions()
	for i, v in ipairs(allFashion) do
		if v.id == fashionID then
			return v.enhanceTimes > 0
		end
	end
	return false
end

--精纺次数
function i3k_game_context:GetFashionSpinningTimes(fashionID)
	local allFashion = g_i3k_game_context:GetAllFashions()
	for i, v in ipairs(allFashion) do
		if v.id == fashionID then
			return v.enhanceTimes
		end
	end
	return 0
end

--增加精纺次数
function i3k_game_context:SetFashionSpinningTimes(fashionID)
	for i, v in ipairs(self._fashionData.allFashions) do
		if v.id == fashionID then
			v.enhanceTimes = v.enhanceTimes + 1
		end
	end
end

--根据时装ID获得属性（返回一个vector，防止合并属性）
function i3k_game_context:GetPropertyByFashionId(fashionID)
	local prop = {}  --vector
	local allFashion = g_i3k_game_context:GetAllFashions()
	local isHave = g_i3k_db.i3k_db_get_fashion_is_have(fashionID)
	if isHave then
		for _, v in ipairs(allFashion) do
			if v.id == fashionID then
				if #v.enhanceProps > 0 then
					prop = v.enhanceProps
				else
					local propertyTb = g_i3k_db.i3k_db_get_fashion_property(fashionID)
					for k, v in pairs(propertyTb) do
						table.insert(prop, {id = k, value = v})
					end
				end
				break
			end
		end
	else
		local propertyTb = g_i3k_db.i3k_db_get_fashion_property(fashionID)
		for k, v in pairs(propertyTb) do
			table.insert(prop, {id = k, value = v})
		end
	end
	return prop
end

--将vector格式属性转换为map格式属性
function i3k_game_context:ConvertVectorToMap(property)
	local tmp = {}
	for _, e in ipairs(property) do
		if e.id ~= 0 and e.value ~= 0 then
			tmp[e.id] = (tmp[e.id] or 0) + e.value
		end
	end
	return tmp
end

--获取精纺后时装属性
function i3k_game_context:GetFashionSpinningProp(fashionID)
	local prop = self:GetPropertyByFashionId(fashionID)
	local property = self:ConvertVectorToMap(prop)
	return property
end

--保存时装精纺属性
function i3k_game_context:SaveFashionEnhanceProps(fashionID, enhanceProps)
	for i, v in ipairs(self._fashionData.allFashions) do
		if v.id == fashionID then
			v.enhanceProps = enhanceProps  --vector
		end
	end
end

-- 刷新时装属性
function i3k_game_context:RefreshFashionProps()
	local hero = i3k_game_get_player_hero()
	if hero then
		self:SetPrePower()
		hero:UpdateFashionProps()
		self:ShowPowerChange()
	end
end

--获取一件装备的战力（基础属性）
function i3k_game_context:GetEquipBaseProperty(propertyData)
	local tmp = {}
	for i, e in ipairs(propertyData) do
		tmp[e.id] = (tmp[e.id] or 0) + e.value
	end
	return g_i3k_db.i3k_db_get_battle_power(tmp)
end

-- 脱离卡死设置
function i3k_game_context:SetBreakDeathData(time)
	self._roleData.curChar._nextLeaveWrongPosTime = time
end




--藏宝图相关
--江湖客栈

--npc相关信息操作
function i3k_game_context:setAllNpcInfo(npcs)
	self._hostelNpcInfo = npcs
end

function i3k_game_context:setNpcInfo(id, info)
	self._hostelNpcInfo[id] = info
end

function i3k_game_context:getNpcInfoById(id)
	return self._hostelNpcInfo and self._hostelNpcInfo[id]
end

--已完成地图相关操作
--[[function i3k_game_context:setTreasureFinishMap(finishMaps)
	self._treasureFinishMaps = finishMaps
end

function i3k_game_context:getTreasureFinishMaps()
	return self._treasureFinishMaps
end

function i3k_game_context:isChipHasFinished(chipId)
	return i3k_db_treasure_chip[chipId] and self._treasureFinishMaps[i3k_db_treasure_chip[chipId].treasureID]
end--]]

-- 仿背包，做一个map，存当前拥有的藏宝图碎片和个数
function i3k_game_context:setTreasureChipOwnCounts(pieces)
	self._treasureChipOwn = pieces
end

function i3k_game_context:addTreasureChipOwnCounts(id, counts)
	if not self._treasureChipOwn then
		self._treasureChipOwn = {}
	end
	if not self._treasureChipOwn[id] then
		self._treasureChipOwn[id] = counts
	else
		self._treasureChipOwn[id] = self._treasureChipOwn[id] + counts
	end
end
-- 通过id，来索引数量
function i3k_game_context:getTreasureChipOwnCounts(id)
	if not self._treasureChipOwn then
		return 0
	end
	return self._treasureChipOwn[id] or 0
end


--已经购买过的碎片标记
function i3k_game_context:setHasBuyedChips(chips)
	self._buyedChips = chips
end

function i3k_game_context:addHasBuyedChips(chipId)
	if not self._buyedChips[chipId] then
		self._buyedChips[chipId] = true
	end
end

function i3k_game_context:getChipsIsHasBuyed(chipId)
	return self._buyedChips[chipId]
end

--当前拥有的藏宝图信息
function i3k_game_context:setTreasureMapInfo(mapInfo)
	self._curMapInfo = mapInfo
end

function i3k_game_context:getTreasureMapInfo()
	return self._curMapInfo
end

function i3k_game_context:setIsHaveMapCanExplore(isHave)
	self._isHaveMap = isHave
end

function i3k_game_context:getIsHaveMapCanExplore()
	return self._isHaveMap
end

--当前拥有的收藏品相关
function i3k_game_context:addCollection(collectId, isMount, isEdge)
	local collection = i3k_clone(i3k_db_collection[collectId])
	if isMount then
		collection.isMount = isMount
	end
	if isEdge then
		collection.isEdge = isEdge
	end
	self._collection[collectId] = collection
end

function i3k_game_context:getAllCollection()
	return self._collection
end

function i3k_game_context:getCollectionWithId(id)
	return self._collection[id]
end

function i3k_game_context:mountCollection(collectionId)
	local collection = self._collection[collectionId]
	if collection then
		self._collection[collectionId].isMount = true
	else
		self:addCollection(collectionId, true)
	end
end
--镶边
function i3k_game_context:edgeCollection(collectionId)
	local collection = self._collection[collectionId]
	if collection then
		self._collection[collectionId].isEdge = true
	else
		self:addCollection(collectionId, true, true)
	end
end

function i3k_game_context:testCollectionIsMounted(id)
	local collection = self:getCollectionWithId(id)
	return collection and collection.isMount or false
end

function i3k_game_context:setIsFirstTreasure(isFirst)
	self._isFirstTreasure = isFirst
end

function i3k_game_context:getIsFirstTreasure()
	return self._isFirstTreasure
end

----------------------------------------------------
--势力战jxw组队房间相关startsynForceWarRoom

function i3k_game_context:syncForceWarRoom(id, leader, members, roomType)
	--self._forceWar_room = {id = 0, leader = 0, grade = 0, members ={}, membersProfile = {}, state = {}, roomType = 0}
	self._forceWar_room.id = id
	self._forceWar_room.leader = leader
	--self._forceWar_room.grade =grade
	self._forceWar_room.members = members
	self._forceWar_room.roomType = roomType
	for i,v in pairs(members) do
		i3k_sbean.war_sync_members_profile(v)
	end
end

function i3k_game_context:syncWarMembersProfile(profile, state)
	local isFirst = false
	if #self._forceWar_room.membersProfile==0 then
		isFirst = true
	end
	local isContain = false
	for i, v in ipairs(self._forceWar_room.membersProfile) do
		if v.id == profile.id then
			self._forceWar_room.membersProfile[i] = profile
			isContain = true
			break
		end
	end
	if not isContain then
		table.insert(self._forceWar_room.membersProfile, profile)
		self._forceWar_room.state[profile.id] = state>0
	end
	if isFirst then
		if self._isOpenForceWarRoom then
			if self._forceWar_room.roomType ~= g_CHANNEL_COMBAT then
				g_i3k_ui_mgr:OpenUI(eUIID_War_Team_Room)
			else
				g_i3k_ui_mgr:OpenUI(eUIID_CreateCombatTeam)
			end
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_War_Team_Room, "aboutMyRoom", self._forceWar_room.leader, self._forceWar_room.membersProfile)
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_CreateCombatTeam, "loaMembersProfile", self._forceWar_room.leader, self._forceWar_room.membersProfile)
		else
			self._isOpenForceWarRoom = true
		end
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_War_Team_Room, "addRoomMember", profile)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_CreateCombatTeam, "loaMembersProfile", self._forceWar_room.leader, self._forceWar_room.membersProfile)
	end
end


function i3k_game_context:quitForceWarRoom()
	self._forceWar_room = {id = 0, leader = 0, grade = 0, members ={}, membersProfile = {}, state = {}, roomType = 0}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
	g_i3k_ui_mgr:CloseUI(eUIID_War_Team_Room)
	g_i3k_ui_mgr:CloseUI(eUIID_CreateCombatTeam)
end


function i3k_game_context:memberLeaveForceWarRoom(roleId)
	for i,v in ipairs(self._forceWar_room.members) do
		if v==roleId then
			table.remove(self._forceWar_room.members, i)
			break
		end
	end
	for i,v in ipairs(self._forceWar_room.membersProfile) do
		if v.id==roleId then
			table.remove(self._forceWar_room.membersProfile, i)
			break
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_War_Team_Room, "roomMemberLeave", roleId)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_CreateCombatTeam, "loaMembersProfile", self._forceWar_room.leader, self._forceWar_room.membersProfile)
end



function i3k_game_context:getForceWarRoomLeader()
	return self._forceWar_room.leader
end

function i3k_game_context:getForceWarMemberProfiles()
	return self._forceWar_room.membersProfile
end

function i3k_game_context:getForceWarRoomType()
	return self._forceWar_room.roomType
end

function i3k_game_context:addForceWarRoomMember(id)
	table.insert(self._forceWar_room.members, id)
	i3k_sbean.war_sync_members_profile(id)
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_TournamentRoom, "addRoomMember", id)
end
function i3k_game_context:changeForceWarRoomLeader(roleId)
	self._forceWar_room.leader = roleId
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_War_Team_Room, "aboutMyRoom", roleId, self._forceWar_room.membersProfile)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_CreateCombatTeam, "loaMembersProfile", self._forceWar_room.leader, self._forceWar_room.membersProfile)
end

function i3k_game_context:setIsOpenForceWarRoom(isOpen)
	self._isOpenForceWarRoom = isOpen
end

function i3k_game_context:changeForceWarRoomMemberState(roleId, state)
	self._forceWar_room.state[roleId] = state>0
end


function i3k_game_context:getForceWarMemberIsConect(roleId)
	return self._forceWar_room.state[roleId]
end



--势力战组队房间相关end

----------------------------------------------------
--会武相关
function i3k_game_context:syncTournamentRoom(id, leader, grade, members, roomType)
	self._tournament_room.id = id
	self._tournament_room.leader = leader
	self._tournament_room.grade =grade
	self._tournament_room.members = members
	self._tournament_room.roomType = roomType
	for i,v in pairs(members) do
		i3k_sbean.sync_members_profile(v)
	end
end

function i3k_game_context:syncMembersProfile(profile, state)
	local isFirst = false
	if #self._tournament_room.membersProfile==0 then
		isFirst = true
	end
	local isContain = false
	for i, v in ipairs(self._tournament_room.membersProfile) do
		if v.id == profile.id then
			self._tournament_room.membersProfile[i] = profile
			isContain = true
			break
		end
	end
	if not isContain then
		table.insert(self._tournament_room.membersProfile, profile)
		self._tournament_room.state[profile.id] = state>0
	end
	if isFirst then
		if self._isOpenTournamentRoom then
			g_i3k_ui_mgr:OpenUI(eUIID_TournamentRoom)
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_TournamentRoom, "aboutMyRoom", self._tournament_room.leader, self._tournament_room.membersProfile)
		else
			self._isOpenTournamentRoom = true
		end
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_TournamentRoom, "addRoomMember", profile)
	end
end

function i3k_game_context:addTournamentRoomMember(id)
	table.insert(self._tournament_room.members, id)
	i3k_sbean.sync_members_profile(id)
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_TournamentRoom, "addRoomMember", id)
end

function i3k_game_context:changeTournamentRoomLeader(roleId)
	self._tournament_room.leader = roleId
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_TournamentRoom, "aboutMyRoom", roleId, self._tournament_room.membersProfile)
end

function i3k_game_context:quitTournamentRoom()
	self._tournament_room = {id = 0, leader = 0, grade = 0, members = {}, membersProfile = {}, state = {}, roomType = 0, }
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
	g_i3k_ui_mgr:CloseUI(eUIID_TournamentRoom)
end

function i3k_game_context:memberLeaveTournamentRoom(roleId)
	for i,v in ipairs(self._tournament_room.members) do
		if v==roleId then
			table.remove(self._tournament_room.members, i)
			break
		end
	end
	for i,v in ipairs(self._tournament_room.membersProfile) do
		if v.id==roleId then
			table.remove(self._tournament_room.membersProfile, i)
			break
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_TournamentRoom, "roomMemberLeave", roleId)
end

function i3k_game_context:GetRoomType()
	return self._tournament_room.roomType
end

function i3k_game_context:getTournameRoomLeader()
	return self._tournament_room.leader
end

function i3k_game_context:getTournameMemberProfiles()
	return self._tournament_room.membersProfile
end

function i3k_game_context:setIsOpenTournamentRoom(isOpen)
	self._isOpenTournamentRoom = isOpen
end

function i3k_game_context:IsInRoom()
	local room = {}
	if self._tournament_room.id~=0 then
		room.type = gRoom_Tournament
		room.id = self._tournament_room.id
		return room
	elseif self._roomData.roomid~=0 then
		room.type = self._roomData.mtype
		room.id = self._roomData.roomid
		return room
	elseif self._forceWar_room.id~=0 then
		room.type = gRoom_Force_War
		room.id = self._forceWar_room.id
		return room
	else
		return nil
	end
end

function i3k_game_context:addTournamentWeekHonor(count)
	self._tournament_week_honor = self._tournament_week_honor + count
end

function i3k_game_context:addTournamentHistoryHonor(count)
	self._tournament_history_honor = self._tournament_history_honor + count
end

function i3k_game_context:getTournamentWeekHonor()
	return self._tournament_week_honor
end

function i3k_game_context:getTournamentHistoryHonor()
	return self._tournament_history_honor
end

function i3k_game_context:syncTournamentPoint(points)
	self._tournament_point = points
end

function i3k_game_context:addTournamentPoint(count)
	self._tournament_point = self._tournament_point + count
end

function i3k_game_context:getTournamentPoints()
	return self._tournament_point
end

function i3k_game_context:changeTournamentRoomMemberState(roleId, state)
	self._tournament_room.state[roleId] = state>0
end

function i3k_game_context:setTournamentEnemies(enemies)
	self._tournament_enemies = enemies
end

function i3k_game_context:getTournamentEnemies()
	return self._tournament_enemies
end

function i3k_game_context:getTournamentMemberIsConect(roleId)
	return self._tournament_room.state[roleId]
end

-- 会武神器乱战
function i3k_game_context:SetTournamentWeaponsInfo(scores, weaponInfo, skillInfo)
	--self.scores:		map[int32, int32]
	--self.weaponInfo:		vector[WeaponChangeInfo]
	--self.skillInfo:		map[int32, int32]
	self._tournamentWeaponsInfo.scores = scores
	self._tournamentWeaponsInfo.weaponInfo = weaponInfo
	self._tournamentWeaponsInfo.skillInfo = skillInfo
end

function i3k_game_context:SetTournamentWeaponScores(forceType, score)
	if self._tournamentWeaponsInfo.scores then
		self._tournamentWeaponsInfo.scores[forceType] = score
	end
end

function i3k_game_context:GetTournamentWeaponScores()
	return self._tournamentWeaponsInfo.scores or {}
end

function i3k_game_context:ReduceTournamentWeaponsChangeTimes(idx)
	if self._tournamentWeaponsInfo.weaponInfo then
		if self._tournamentWeaponsInfo.weaponInfo[idx] and self._tournamentWeaponsInfo.weaponInfo[idx].changeTimes > 0 then
			self._tournamentWeaponsInfo.weaponInfo[idx].changeTimes = self._tournamentWeaponsInfo.weaponInfo[idx].changeTimes - 1
		end
	end
end

function i3k_game_context:GetTournamentWeaponsInfo()
	return self._tournamentWeaponsInfo.weaponInfo or {}
end

function i3k_game_context:ReduceTournamentWeaponSkillUseTimes(skillID)
	if self._tournamentWeaponsInfo.skillInfo then
		if self._tournamentWeaponsInfo.skillInfo[skillID] then
			self._tournamentWeaponsInfo.skillInfo[skillID] = self._tournamentWeaponsInfo.skillInfo[skillID] - 1
		end
	end
end

function i3k_game_context:GetTournamentWeaponSkillInfo()
	return self._tournamentWeaponsInfo.skillInfo or {}
end


--正邪道场相关
function i3k_game_context:addTaoistPets(id, maxCount)
	local isHave = false
	for i,v in ipairs(self._taoistPets) do
		if v==id then
			table.remove(self._taoistPets, i)
			isHave = true
			break
		end
	end
	if not isHave then
		local count = #self._taoistPets
		if count==maxCount then
			table.remove(self._taoistPets, 1)
		end
		table.insert(self._taoistPets, id)
	end
end

function i3k_game_context:setTaoistPets(pets)
	self._taoistPets = pets
end

function i3k_game_context:getTaoistPets()
	return self._taoistPets
end

function i3k_game_context:setTaoistRank(rank)
	self._taoistRank =rank
end

function i3k_game_context:getTaoistRank()
	return self._taoistRank
end


--设置特效显示等级
function i3k_game_context:SetEffectFilter(lvl)
	g_i3k_game_handler:ClearCache();

	g_i3k_mmengine:SetEffectPriority(lvl);
	g_i3k_mmengine:SetMaxEffectNode(i3k_db_common.engine.maxEffectLimit[lvl]);
	--i3k_log("set max effect limit to " .. i3k_db_common.engine.maxEffectLimit[lvl]);
end

function i3k_game_context:RefreshMissionEffect()
	local world = i3k_game_get_world()
	if world then
		world:RefreshMissionEffect()
	end
	return true;
end

--获取玩家设置同屏人数设置
function i3k_game_context:GetSetUpPlayerNum()
	local cfg = g_i3k_game_context:GetUserCfg()
	if cfg then
		return cfg:GetFilterPlayerNum()
	end
end

-- 根据任务状态，刷新小地图中NPC显隐
function i3k_game_context:RefreshMiniMapNpc()
	local world = i3k_game_get_world()
	if world then
		world:RefreshMiniMapNpc()
	end
	return true;
end

function i3k_game_context:SetPrePower()
	local hero = i3k_game_get_player_hero()
	if self._prepower == 0 and hero then
		self._prepower = math.modf(hero:Appraise())
	end
end

function i3k_game_context:ShowPowerChange()
	local hero = i3k_game_get_player_hero()
	if hero then
		local nowpower = math.modf(hero:Appraise())
		if nowpower ~= self._prepower then
			local changepower = nowpower - self._prepower;
			g_i3k_ui_mgr:PopupPowerChange(self._prepower,changepower)

			DCEvent.onEvent("战力",{["战力"] = i3k_get_power_desc(nowpower)})
		end
	end
	self._prepower = 0;
end

function i3k_game_context:IsHeroMove()
	local hero = i3k_game_get_player_hero()
	if hero and hero._behavior then
		return hero._behavior:Test(eEBMove)
	end
	return false;
end
------------------------引导相关------------------------
function i3k_game_context:InitLeadData(data)
	self._leadData = {}
	local leadcfg = i3k_db_leadtrigger
	for k,v in pairs(leadcfg) do
		local step = -1;
		for k1 , v1 in pairs(v) do
			if v1.preid == -1 then
				step = k1;
			end
		end
		local info = {groupid = k , finish = false ,step = step, info = v,times = 0}
		self._leadData[k] = info;
	end
	for k1, v1 in pairs(data) do
		if self._leadData[k1] then
			self._leadData[k1].finish = true;
		end
	end
end

function i3k_game_context:GetLeadData()
	return self._leadData;
end


--判断是否可以进引导
function i3k_game_context:IsOpenLead()
	if i3k_db_common.debugswitch.leadopen ~= 0 then

		local logic = i3k_game_get_logic();
		if not logic then
			return false;
		end

		local world = logic:GetWorld();
		if not world then
			return false;
		end

		if not g_i3k_game_context:GetMapEnter() then
			return false;
		end

		local hero = i3k_game_get_player_hero()
		if not hero then
			return false;
		end
		if not self._roleData.curChar then
			return false
		end

		local leadData = g_i3k_game_context:GetLeadData();
		local guidUI = g_i3k_ui_mgr:GetUI(eUIID_GuideUI)
		if not  guidUI then
			for k ,v in ipairs(leadData) do
				if not v.finish and (self._leadingID < 0 or self._leadingID == k) then
					local trig = true;
					local pretrig = false;

					trig,pretrig = self:AllConditionCheck(v.info,v.step,args)
					if trig or pretrig then
						return true
					end
				end

			end

		end





	end

end

function i3k_game_context:LeadCheck(EventID,args)
	if i3k_db_common.debugswitch.leadopen ~= 0 then
		local logic = i3k_game_get_logic();
		if not logic then
			return false;
		end

		local world = logic:GetWorld();
		if not world then
			return false;
		end

		if not g_i3k_game_context:GetMapEnter() then
			return false;
		end

		local hero = i3k_game_get_player_hero()
		if not hero then
			return false;
		end
		if not self._roleData.curChar then
			return false
		end
		self._eventID = EventID
		local leadData = g_i3k_game_context:GetLeadData();
		local guidUI = g_i3k_ui_mgr:GetUI(eUIID_GuideUI)
		if not  guidUI then

			for k ,v in ipairs(leadData) do
				if not v.finish and (self._leadingID < 0 or self._leadingID == k) then
					local trig = true;
					local pretrig = false;
					trig,pretrig = self:AllConditionCheck(v.info,v.step,args)
					if trig or pretrig then
						self._isInLeadMode = true
						self._leadingID = v.groupid
						local groupId = tostring(self._leadingID)
						local isfinish = true
						if trig then
							g_i3k_game_handler:RoleBreakPoint("Game_Role_Guide_Start", groupId.."_"..v.step)
							self:AllAction(v.info,v.step,v.groupid)
							--判断是否指引全部完成，否则指向当前组指引的下一步
							for k2,v2 in pairs(v.info) do
								if v2.preid == v.step then
									v.step = k2;--指向下一步
									isfinish = false;
									break;
								end
							end
						else
							isfinish = false;
							--当前步指引条件不满足，上一步指引的条件满足，执行上一步指引的行为
							for k1,v1 in pairs(v.info[v.info[v.step].preid].bid) do
								self:LeadTriBehaviou(v1,v.step,v.groupid);
							end
						end


						if isfinish then
							--发消息给服务器
							g_i3k_game_handler:RoleBreakPoint("Game_Role_Guide_End", groupId)
							i3k_sbean.send_lead_info(v.groupid,1)
							self._isInLeadMode = false;
							self._leadingID = -1;
							v.finish = true;
							self:LeadCheck()
							break
						end
					end
				end
			end
			self._eventID = -1;
		end
		--i3k_log("not trig:LeadCheck end")
	end
end

--判断当前步指引的条件是否全部符合
function i3k_game_context:AllConditionCheck(info,step,args)
	local trig = true;
	local pretrig = false;
	for k1,v1 in pairs(info[step].tid) do
		if not self:LeadCheckTri(v1,args) then
			trig = false;
			--如果当前步指引的条件不满足，判断当前指引是否为该组的第一步，否则判断前一步是否满足
			if info[step].preid ~= -1 then
				pretrig = true
				for k2,v2 in pairs(info[info[step].preid].tid) do
					if not self:LeadCheckTri(v2,args) then
						pretrig = false;
						break;
					end
				end
			end
			break
		end
	end
	return trig,pretrig
end
--当当前指引的判断条件符合的时候，执行当前指引的行为
function i3k_game_context:AllAction(info,step,groupID)
	for k1,v1 in pairs(info[step].bid) do
		self:LeadTriBehaviou(v1,step,groupID);
	end

end


function i3k_game_context:ResetLeadMode()
	local hero = i3k_game_get_player_hero()
	if g_i3k_game_context:IsInLeadMode() then
		local leadData = g_i3k_game_context:GetLeadData();
		if leadData[self._leadingID] and not leadData[self._leadingID].finish then
			local step = -1;
			for k,v in pairs(leadData[self._leadingID].info) do
				if v.preid == -1 then
					step = k
				end
			end
			if step ~= -1 then
				leadData[self._leadingID].step = step;
				self._leadingID = -1
				self._isInLeadMode = false;
			end
		end
	end
	g_i3k_ui_mgr:CloseGuideUI()
end

function i3k_game_context:IsInLeadMode()
	if i3k_db_common.debugswitch.leadopen == 0 then
		return false;
	end
	return self._isInLeadMode,self._leadingID
end

function i3k_game_context:LeadCheckTri(id,args,flag)

	local tcfg = i3k_db_leadtrigger_event[id];
	if flag == 1 then
		tcfg = i3k_db_leadplot_event[id];
	elseif flag == 2 then
		tcfg = i3k_db_function_open[id]
	elseif flag == 3 then
		tcfg = i3k_db_preView_event[id]
	end
	if tcfg.tid == eLTFuncFinishMission then
		local tritaskId = tcfg.args[2]
		local curtaskId,value = g_i3k_game_context:getMainTaskIdAndVlaue()
--[[		local main_cfg = g_i3k_db.i3k_db_get_main_task_cfg(curtaskId)
		local arg1 = main_cfg.arg1
		local arg2 = main_cfg.arg2
		local taskType = main_cfg.type
		local is_ok = g_i3k_game_context:IsTaskFinished(taskType,arg1,arg2,value)--]]
		if tcfg.args[1] == 1 then--完成
			if curtaskId == tritaskId then
				return true;
			end
		elseif tcfg.args[1] == 2 then--未完成
			if curtaskId < tritaskId then
				return true;
			end
		elseif tcfg.args[1] == 3 then--进行
			if curtaskId == tritaskId then
				return true;
			end
		end

	elseif tcfg.tid == eLTFuncOpenUI then
		return g_i3k_ui_mgr:GetUI(tcfg.args[1])
	elseif tcfg.tid == eLTFuncCloseUI then
		return not g_i3k_ui_mgr:GetUI(tcfg.args[1])
	elseif tcfg.tid == eLTFuncMapType then
		local world = i3k_game_get_world()
		if world then
			if #tcfg.args[2] > 0 then
				for k ,v in pairs(tcfg.args[2]) do
					if world._cfg.id == v then
						return true;
					end
				end
			else
				for k ,v in pairs(tcfg.args[1]) do
					if world._mapType == v then
						if v == g_FIELD and self:GetIsSpringWorld() then
							return false
						end
						return true;
					end
				end
			end
		end
	elseif tcfg.tid == eLTFuncDead then
		local hero = i3k_game_get_player_hero()
		if hero then
			if hero:IsDead() == (tcfg.args[1] == 1) then
				return true;
			end
		end
	elseif tcfg.tid == eLTFuncRoleLevel then
		local herolevel = g_i3k_game_context:GetLevel()
		if tcfg.args[1] == 1 then
			return herolevel >= tcfg.args[2]
		elseif tcfg.args[1] == 2 then
			return herolevel < tcfg.args[2]
		elseif tcfg.args[1] == 3 then
			return herolevel == tcfg.args[2]
		end
	elseif tcfg.tid == eLTFuncSkillLevel then
		local role_all_skill = g_i3k_game_context:GetRoleSkills()
		local havetrig = false
		if tcfg.args[1] == 1 then
			havetrig = true;
			for k,v in pairs(tcfg.args[2]) do
				local trig = false
				for k1,v1 in pairs(role_all_skill) do
					if v1.id == tonumber(v) then
						trig = true
						break;
					end
				end
				if not trig then
					havetrig = false;
					break;
				end
			end
		elseif tcfg.args[1] == 2 then
			havetrig = true;
			for k,v in pairs(tcfg.args[2]) do
				local trig = false
				for k1,v1 in pairs(role_all_skill) do
					if v1.id == tonumber(v) then
						trig = true
						break;
					end
				end
				if trig then
					havetrig = false;
					break;
				end
			end
		elseif tcfg.args[1] == 3 then
			for k,v in pairs(tcfg.args[2]) do
				local trig = false
				for k1,v1 in pairs(role_all_skill) do
					if v1.id == tonumber(v) then
						trig = true
						break;
					end
				end
				if trig then
					havetrig = true;
					break;
				end
			end
		end
		return havetrig;
	elseif tcfg.tid == eLTFuncEquipLevel then
		local equips = g_i3k_game_context:GetWearEquips();
		local havetrig = false
		if equips then
			local trig = true;
			if tcfg.args[1] == 1 then

				for k,v in pairs(tcfg.args[2]) do
					if equips[v] and equips[v].eqGrowLvl < tcfg.args[3] then
						trig = false;
						break;
					end
				end
			elseif tcfg.args[1] == 2 then
				for k,v in pairs(tcfg.args[2]) do
					if equips[v] and equips[v].eqGrowLvl >= tcfg.args[3] then
						trig = false;
						break;
					end
				end
			elseif tcfg.args[1] == 3 then
				trig = false;
				for k,v in pairs(tcfg.args[2]) do
					if equips[v] and equips[v].eqGrowLvl >= tcfg.args[3] then
						trig = true;
						break;
					end
				end
			end
			if trig then
				havetrig = true;
			end
		end
		return havetrig;
	elseif tcfg.tid == eLTFuncClickTri then
		if eLTEventClickTri == self._eventID or eLTEventClickTri == self._ploteventID or self.funOpenId == eLTEventClickTri then
			return true;
		end
	elseif tcfg.tid == eLTFuncMercenaryLevel then
		local petcount = g_i3k_game_context:GetPetCount()
		local havetrig = false
		if tcfg.args[1] == 1 then
			if petcount ~= 0 then
				local all_pet = g_i3k_game_context:GetAllYongBing()
				local trig = true;
				if tcfg.args[2] == 1 then

					for k,v in pairs(all_pet) do
						if v.level < tcfg.args[3] then
							trig = false;
							break;
						end
					end
				elseif tcfg.args[2] == 2 then
					for k,v in pairs(all_pet) do
						if v.level >= tcfg.args[3] then
							trig = false;
							break;
						end
					end
				elseif tcfg.args[2] == 3 then
					trig = false;
					for k,v in pairs(all_pet) do
						if v.level >= tcfg.args[3] then
							trig = true;
							break;
						end
					end
				elseif tcfg.args[2] == 4 then
					trig = false;
					if eLTEventMercenaryLvlUp == self._eventID or eLTEventMercenaryLvlUp == self._ploteventID or self.funOpenId == eLTEventClickTri then
						if all_pet[args.petId] and all_pet[args.petId].level >= tcfg.args[3] then
							trig = true;
						end
					end
				end
				if trig then
					havetrig = true;
				end


			end
		elseif tcfg.args[1] == 2 then
			if petcount == 0 then
				havetrig = true;
			end
		end
		return havetrig;
	elseif tcfg.tid == eLTFuncXinfaLevel then
		local xinfa = g_i3k_game_context:GetXinfa()
		local havetrig = false
		if xinfa then
			local trig = true;
			if tcfg.args[1] == 1 then
				for k2,v2 in pairs(tcfg.args[2]) do
					local txinfa = xinfa._zhiye[v2] or xinfa._jianghua[v2] or xinfa._paibie[v2]
					if not txinfa or txinfa < tcfg.args[3] then
						trig = false;
						break;
					end
				end
			elseif tcfg.args[1] == 2 then
				for k2,v2 in pairs(tcfg.args[2]) do
					local txinfa = xinfa._zhiye[v2] or xinfa._jianghua[v2] or xinfa._paibie[v2]
					if txinfa and txinfa >= tcfg.args[3] then
						trig = false;
						break;
					end
				end
			elseif tcfg.args[1] == 3 then
				trig = false;
				for k2,v2 in pairs(tcfg.args[2]) do
					local txinfa = xinfa._zhiye[v2] or xinfa._jianghua[v2] or xinfa._paibie[v2]
					if txinfa and txinfa >= tcfg.args[3] then
						trig = true;
						break;
					end
				end
			end
			if trig then
				havetrig = true;
			end
		end
		return havetrig;
	elseif tcfg.tid == eLTFuncWeaponLevel then
		local weapons = g_i3k_game_context:GetShenbingData()
		local havetrig = false
		if weapons then
			local trig = true;
			if tcfg.args[1] == 1 then
				for k2,v2 in pairs(tcfg.args[2]) do
					if not weapons[v2] or weapons[v2].qlvl < tcfg.args[3] then
						trig = false;
						break;
					end
				end
			elseif tcfg.args[1] == 2 then
				for k2,v2 in pairs(tcfg.args[2]) do
					if weapons[v2] and weapons[v2].qlvl >= tcfg.args[3] then
						trig = false;
						break;
					end
				end
			elseif tcfg.args[1] == 3 then
				trig = false;
				for k2,v2 in pairs(tcfg.args[2]) do
					if weapons[v2] and weapons[v2].qlvl >= tcfg.args[3] then
						trig = true;
						break;
					end
				end
			end
			if trig then
				havetrig = true;
			end
		end
		return havetrig;
	elseif tcfg.tid == eLTFuncEquipStar then
		local equips = g_i3k_game_context:GetWearEquips();
		local havetrig = false
		if equips then
			local trig = true;
			if tcfg.args[1] == 1 then

				for k,v in pairs(tcfg.args[2]) do
					if equips[v] and equips[v].eqEvoLvl < tcfg.args[3] then
						trig = false;
						break;
					end
				end
			elseif tcfg.args[1] == 2 then
				for k,v in pairs(tcfg.args[2]) do
					if equips[v] and equips[v].eqEvoLvl >= tcfg.args[3] then
						trig = false;
						break;
					end
				end
			elseif tcfg.args[1] == 3 then
				trig = false;
				for k,v in pairs(tcfg.args[2]) do
					if equips[v] and equips[v].eqEvoLvl >= tcfg.args[3] then
						trig = true;
						break;
					end
				end
			end
			if trig then
				havetrig = true;
			end
		end
		return havetrig;
	elseif tcfg.tid == eLTFuncEquipStatus then
		local equips = g_i3k_game_context:GetWearEquips();
		local havetrig = false
		if equips then
			local trig = true;
			if tcfg.args[1] == 3 then
				trig = false;
			end
			for k,v in pairs(tcfg.args[2]) do
				if equips[v].equip then
					if tcfg.args[1] == 3 then
						trig = true;
						break;
					elseif tcfg.args[1] == 2 then
						trig = false;
						break;
					end
				else
					if tcfg.args[1] == 1 then
						trig = false;
						break;
					end
				end
			end
			if trig then
				havetrig = true;
			end
		else
			--if tcfg.args[1] == 2 and
		end
		return havetrig;
	elseif tcfg.tid == eLTFuncItemRequest then
		local havetrig = false
		if tcfg.args[1] == 1 then
			havetrig = true;
		end
		for k,v in pairs(tcfg.args[2]) do
			local haveItemCount = g_i3k_game_context:GetCommonItemCanUseCount(v)
			if haveItemCount >= tcfg.args[3] then
				if tcfg.args[1] == 2 then
					havetrig = true;
					break;
				end
			else
				if tcfg.args[1] == 1 then
					havetrig = false;
				end
			end
		end
		return havetrig;
	elseif tcfg.tid == eLTFuncEquipSlot then
		local equips = g_i3k_game_context:GetWearEquips();
		local havetrig = false
		if equips then
			local trig = true;
			if tcfg.args[1] == 1 then
				for k,v in pairs(tcfg.args[2]) do
					if equips[v] and equips[v].slot then
						for k1,v1 in pairs(equips[v].slot) do
							if v1 ~= 0 then
								trig = false;
								break;
							end
						end
						if not trig then
							break;
						end
					end
				end
			end
			if trig then
				havetrig = true;
			end
		end
		return havetrig;
	elseif tcfg.tid == eLTFuncRoleTransLvl then
		if eLTEventTransLvlChange == self._eventID or eLTEventTransLvlChange == self._ploteventID or self.funcOpenId == eLTEventTransLvlChange then
			local transfromLvl = self:GetTransformLvl()
			local bwType = self:GetTransformBWtype()
			if tcfg.args[1] == transfromLvl then
				if tcfg.args[1] < 2 or tcfg.args[2] == 0 then
					return true;
				else
					if bwType and bwType == tcfg.args[2] then
						return true;
					end
				end
			end
		end
		return false;
	elseif tcfg.tid == eLTFuncLoginDays then
		local havetrig = false
		local logindays = self:GetLoginDays()
		local trig = false;
		if logindays then
			if tcfg.args[1] <= logindays then
				trig = true;
				if tcfg.args[2] == 2 then
					if tcfg.args[1] ~= logindays then
						trig = false;
					end
				end
			end
			if trig then
				havetrig = true;
			end
		end
		return havetrig;
	elseif tcfg.tid == ePreposeGroupId then
		local leadData = g_i3k_game_context:GetLeadData()
		if not leadData[tcfg.args[1]].finish then
			return true
		else
			return false
		end
	elseif tcfg.tid == eLTFactionLevel then
		--local mapId = g_i3k_game_context:GetWorldMapID()
		--if i3k_db_activity_cfg[mapId] then
		--	return self:IsFirstEnterActivity()
		--end
		if tcfg.args[1] == 1 then
			if self:getSectFactionLevel() >= tcfg.args[2] then
				return true
			end
		elseif tcfg.args[1] == 2 then
			if self:getSectFactionLevel() < tcfg.args[2] then
				return true
			end
		end
	end
	return false;
end

function i3k_game_context:LeadTriBehaviou(id,step,groupID)
	local bcfg = i3k_db_leadtrigger_behavior[id];
	if bcfg then
		if bcfg.bid == eLTBehaviorUIControl then
			if bcfg.args[1] == 1 then
				if bcfg.args[2] == eUIID_BattleBase then
					g_i3k_ui_mgr:CloseAllOpenedUI()
					g_i3k_logic:OpenBattleUI()
				elseif bcfg.args[2] == eUIID_Main then
					g_i3k_logic:OpenMainUI()
				elseif bcfg.args[2] == eUIID_BattleTask then
					g_i3k_logic:OpenBattleTaskUI()
				else
					g_i3k_ui_mgr:OpenUI(bcfg.args[2]);
				end
			elseif bcfg.args[1] == 2 then
				if g_i3k_ui_mgr:GetUI(bcfg.args[2]) then
					g_i3k_ui_mgr:CloseUI(bcfg.args[2])
				end
			end
		-- elseif bcfg.bid == eLTBehaviorLeadIcon then

		-- elseif bcfg.bid == eLTBehaviorTouchControl then
		-- 	if bcfg.args[1] == 1 then
		-- 		g_i3k_ui_mgr:InvokeUIFunction(bcfg.args[2], "enableTouch", true)
		-- 	else
		-- 		g_i3k_ui_mgr:InvokeUIFunction(bcfg.args[2], "enableTouch", false)
		-- 	end
		-- elseif bcfg.bid == eLTBehaviorSetClick then

		-- elseif bcfg.bid == eLTBehaviorSetFinshi then
		-- 	--g_i3k_ui_mgr:CloseGuideUI()
		elseif bcfg.bid == eLTBehaviorShowCommonLead then
			if bcfg.args[1] == 1 then
				local Cfg = i3k_db_leadtriggerUI[bcfg.args[2]]
				local ui = g_i3k_ui_mgr:GetUI(Cfg.winID)
				if ui then
					--g_i3k_ui_mgr:CloseGuideUI()
					local widget = nil;
					local poswidget = nil;
					if Cfg.widgettype == 1 then
						widget = ui:GetChildByVarName(Cfg.widgetname)
					elseif Cfg.widgettype == 2 then
						local scroll = ui:GetChildByVarName(Cfg.scrollviewname)
						local child = scroll and scroll:getChildAtIndex(Cfg.index);
						if child then
							widget = child.vars[Cfg.widgetname]
						end
					elseif Cfg.widgettype == 3 then
						widget = ui:GetChildByVarName(Cfg.widgetname)
						poswidget = ui:GetChildByVarName(Cfg.poswidget)
					elseif Cfg.widgettype == 4 then
						local rootwidget = ui:GetChildByVarName(Cfg.rootname)
						local childs = rootwidget and rootwidget:getAddChild()
						local child = childs and childs[1]
						if child then
							widget = child.vars[Cfg.widgetname]
						end
					elseif Cfg.widgettype == 5 then
						local scroll = ui:GetChildByVarName(Cfg.scrollviewname)
						local child = scroll and scroll:getChildAtIndex(Cfg.index);
						if child then
						widget = child.vars[Cfg.widgetname]
							poswidget = child.vars[Cfg.poswidget]
						end
					elseif Cfg.widgettype == 6 then
						local rootwidget = ui:GetChildByVarName(Cfg.rootname)
						local srollwidget = rootwidget and rootwidget:getAddChild()
						local scrollChid = srollwidget and srollwidget[1]
						local wid = scrollChid and scrollChid.vars[Cfg.scrollviewname]	
						if wid then
							local child = wid:getChildAtIndex(Cfg.index);
							widget = child and child.vars[Cfg.widgetname]
						end
					end
					if not widget then
						if self._leadData[self._leadingID].times >= 3 then
							self._leadData[self._leadingID].finish = true
							g_i3k_ui_mgr:CloseGuideUI()
							g_i3k_game_context:LeadCheck()
						else
							self._leadData[self._leadingID].times = self._leadData[self._leadingID].times+ 1;
							self:ResetLeadMode()
						end
						return
					end

					local Pos = widget:getParent():convertToWorldSpace(widget:getPosition())
					if poswidget then
						 Pos = poswidget:getParent():convertToWorldSpace(poswidget:getPosition())
					end
					local text = i3k_db_lead_text[bcfg.args[4]].txt or ""
					g_i3k_ui_mgr:ShowGuideUI(Pos, 50, function ()
						self:LeadTouch(Cfg,widget,step,groupID)
					end,text,step,groupID)
				end
			elseif bcfg.args[1] == 2 then
				g_i3k_ui_mgr:CloseGuideUI()
			end
		end
	end
end

function i3k_game_context:LeadTouch(Cfg,widget,step,groupID)
	if Cfg.trigbase then
		for k,v in pairs(Cfg.trigbase) do
			g_i3k_game_context:LeadTriBehaviou(v,step,groupID)
		end
	end
	if Cfg.touchclick then
		widget:sendTouchClick();
	elseif Cfg.touchclick == 1 then
		--不做任何处理
	else
		widget:sendClick();
	end

end

----------------------------------------------------------------------------------------------------
function i3k_game_context:CreateMissionNPC(mssnID, mapId, isOpen)
	local id = i3k_db_npc[mssnID].convoyID
	if id == 0 then
		return
	end

	local mapIds = i3k_db_missionnpcs[id].MapIDs
	local now_mapID = self:GetWorldMapID()
	now_mapID = mapId or now_mapID
	for k,v in pairs(mapIds) do
		if now_mapID == v then
			local hero = i3k_game_get_player_hero()
			if hero then
				hero:CreateMissionNPC(id)
			end
			self._convoyState = isOpen
		end
	end
end

function i3k_game_context:ClearMissionNPC()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:ClearMissionNPC()
	end
end

------------------------------------------------------------------------------------------------------
function i3k_game_context:PlaySocialAction(id)
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:PlaySocialAction(id)
	end
end

function i3k_game_context:GetFindWayStatus()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetFindWayStatus()
	end
end

function i3k_game_context:SetFindWayStatus(tipsState)
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:SetFindWayStatus();
		self:openFindwayTipsUI(tipsState)
	end
end

function i3k_game_context:ClearFindWayStatus()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:ClearFindwayStatus();
	end
	self:SetFindPathData()
end

--没用到的方法
function i3k_game_context:RefreshRoleEquipEffect()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:AttachEquipEffect()
	end
end

function i3k_game_context:AttachRoleEquipEffectByPartID(partID, effectids)
	--if self:getCurWeaponShowType() ~= g_FLYING_SHOW_TYPE then
	local hero = i3k_game_get_player_hero()
	if hero then
		local weaponDisplay, skinDisplay = i3k_get_soaring_display_info(hero._soaringDisplay)
		if weaponDisplay ~= g_FLYING_SHOW_TYPE then
		hero:AttachEquipEffectByPartID(partID, effectids)
		end
	end
	--end
end

--没用到的方法
function i3k_game_context:CheckCanRefreshEquipEffect()
	local hero = i3k_game_get_player_hero()
	if hero then
		if (self:IsInMissionMode() and (hero._missionMode.type == 1 or hero._missionMode.type == 2)) or self:IsInSuperMode() then
			return false;
		end
		return true
	end
	return false
end

function i3k_game_context:ChangedRoleHeadIcon(RoleID,HeadIconID)
	local world = i3k_game_get_world()
	if world then
		for k,v in pairs(world._entities[eGroupType_O]) do
			if v:GetEntityType() == eET_Player then
				if v:GetGuidID() == RoleID then
					v:SetHeadIcon(HeadIconID)
				end
			end
		end
	end
end

function i3k_game_context:SetClanAttrData(attriAddition)
	self._clan_data.attriAddition = attriAddition;
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateClanChildProps()
	end
end

function i3k_game_context:GetClanAttrData()
	return self._clan_data.attriAddition
end

function i3k_game_context:IsHeroFashionShow()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:IsFashionShow()
	end
	return false
end
-------延迟信息相关
function i3k_game_context:SetPingMode(pingMode)
	--i3k_log("SetPingMode:")
	self._pingMode = pingMode
	local net_log = i3k_get_net_log()
	local text = pingMode == true and "true" or "false"
	net_log:Add("i3k_game_context:SetPingMode()"..text)
end

function i3k_game_context:ClearPingticks()
	--i3k_log("ClearPingticks:"..self._pingdenyticks)
	self._pingdenyticks = 0;
end

function i3k_game_context:AddPingtick()
	--i3k_log("AddPingtick:"..self._pingdenyticks)
	self._pingdenyticks = self._pingdenyticks + 1;
	if self._pingdenyticks > 10 then
		self:SetPingMode(true);
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(499))
		self._pingdenyticks = 0;
	end
end

function i3k_game_context:ClearPingStatus()
	i3k_sbean.client_role_sync_map()
	self:ClearPingticks()
	g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(500))
	self._pingMode = false;
	local net_log = i3k_get_net_log()
	net_log:Add("i3k_game_context:ClearPingStatus()")
end

function i3k_game_context:IsInPingMode()
	return self._pingMode;
end

function i3k_game_context:SetCurPlotId(id)
	self._plot.curPlot = id
	--self._plot = {curPlot = -1,PlotTick = 0,activedList = {},PlotList = {}}
end

function i3k_game_context:GetCurPlotId(id)
	return self._plot;
end

function i3k_game_context:AddListPlot(id)--------------
	table.insert(self._plot.activedList,id);
end

function i3k_game_context:IsActivedPlot(id)--------
	for k,v in ipairs(self._plot.activedList) do
		if v == id then
			return true;
		end
	end
	return false;
end

function i3k_game_context:IsInPlotMode()--
	if not g_i3k_game_context:IsInLeadMode() then
		local plot = g_i3k_game_context:GetPlotData()
		if plot and #plot.activedList >0 then
			if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
				return true;
			end
		end
	end
	return false;
end

function i3k_game_context:RefreshPlotMode()--
	if self._plot.curPlot ~= -1 then
		self._plot.curPlot = -1;
		table.remove(self._plot.activedList,1)
		g_i3k_game_context:UpdatePlotTick(0);
	end
end

function i3k_game_context:UpdatePlotTick(tick)---------------
	if i3k_game_context:IsInPlotMode() then
		if not g_i3k_ui_mgr:GetUI(eUIID_LeadPlot) then
			g_i3k_ui_mgr:OpenUI(eUIID_LeadPlot)
			if self._plot.curPlot ~= -1 then
				local cfg = self._plot.PlotList[self._plot.curPlot].info
				local text = cfg.dalog[self._plot.PlotList[self._plot.curPlot].step].text
				local headiconID = cfg.dalog[self._plot.PlotList[self._plot.curPlot].step].headiconID
				g_i3k_ui_mgr:RefreshUI(eUIID_LeadPlot, headiconID, text)
			end
		end
		self._plot.PlotTick = self._plot.PlotTick + tick;
		if self._plot.curPlot == -1 and #self._plot.activedList > 0 then
			self._plot.curPlot = self._plot.activedList[1]
			local cfg = self._plot.PlotList[self._plot.activedList[1]].info
			self._plot.PlotTick = 0;
			self._plot.PlotList[self._plot.activedList[1]].step = 1;
			local text = cfg.dalog[1].text
			local headiconID = cfg.dalog[1].headiconID
			g_i3k_ui_mgr:RefreshUI(eUIID_LeadPlot, headiconID, text)
		end
		if self._plot.PlotTick > i3k_db_common.mission.PlotTime then
			-- Something happened
			local cfg = self._plot.PlotList[self._plot.curPlot].info
			self._plot.PlotTick = 0;
			self._plot.PlotList[self._plot.curPlot].step = self._plot.PlotList[self._plot.curPlot].step + 1;
			if cfg.dalog[self._plot.PlotList[self._plot.curPlot].step] then
				local text = cfg.dalog[self._plot.PlotList[self._plot.curPlot].step].text
				local headiconID = cfg.dalog[self._plot.PlotList[self._plot.curPlot].step].headiconID
				g_i3k_ui_mgr:RefreshUI(eUIID_LeadPlot, headiconID, text)
			else
				self._plot.PlotList[self._plot.curPlot].curtimes = self._plot.PlotList[self._plot.curPlot].curtimes + 1;
				self._plot.PlotList[self._plot.curPlot].step = -1;
				--send success
				i3k_sbean.send_lead_plot_set(self._plot.curPlot,self._plot.PlotList[self._plot.curPlot].curtimes)
				--
				if self._plot.PlotList[self._plot.curPlot].curtimes >= self._plot.PlotList[self._plot.curPlot].maxtimes then
					self._plot.PlotList[self._plot.curPlot].finish = true;
				end
				g_i3k_game_context:RefreshPlotMode()
			end
		end
	else--if not g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
		if g_i3k_ui_mgr:GetUI(eUIID_LeadPlot) then
			g_i3k_ui_mgr:CloseUI(eUIID_LeadPlot);
		end
	end
end

function i3k_game_context:onFinishPlot()
	if i3k_game_context:IsInPlotMode() then
		self._plot.PlotList[self._plot.curPlot].curtimes = self._plot.PlotList[self._plot.curPlot].maxtimes
		self._plot.PlotList[self._plot.curPlot].step = -1;
		i3k_sbean.send_lead_plot_set(self._plot.curPlot,self._plot.PlotList[self._plot.curPlot].curtimes)
		self._plot.PlotList[self._plot.curPlot].finish = true;
		g_i3k_game_context:RefreshPlotMode()
	end
end

function i3k_game_context:InitPlotData(data)---------------
	self._plot = {curPlot = -1,PlotTick = 0,activedList = {},PlotList = {}}
	local leadcfg = i3k_db_leadplot
	for k,v in pairs(leadcfg) do
		local info = {finish = false ,step = -1,odds = v.odds,curtimes = 0, maxtimes = v.times, info = v}
		self._plot.PlotList[k] = info;
	end
	if data then
		for k1, v1 in pairs(data) do
			if self._plot.PlotList[k1] then
				self._plot.PlotList[k1].curtimes = v1;
				if v1 >= self._plot.PlotList[k1].maxtimes then
					self._plot.PlotList[k1].finish = true;
				end
			end
		end
	end
end

function i3k_game_context:GetPlotData()----------
	return self._plot;
end

function i3k_game_context:PlotCheck(EventID,args)---------
	if i3k_db_common.debugswitch.plotopen ~= 0 then
		local logic = i3k_game_get_logic();
		if not logic then
			return false;
		end

		local world = logic:GetWorld();
		if not world then
			return false;
		end

		local hero = i3k_game_get_player_hero()
		if not hero then
			return false;
		end
		self._ploteventID = EventID
		local plotData = g_i3k_game_context:GetPlotData();
		for k ,v in pairs(plotData.PlotList) do
			if not v.finish and not g_i3k_game_context:IsActivedPlot(k) then
				local trig = true;
				if v.info.odds < 10000 then
					local odd = i3k_engine_get_rnd_u(0, 10000);
					if odd > v.info.odds then
						trig = false;
						--i3k_log("not trig:"..k.."|odd|"..odd.."|"..v.info.odds)
					end
				end
				if trig then
					for k1,v1 in pairs(v.info.tid) do
						if not self:LeadCheckTri(v1,args,1) then
							trig = false;
							--i3k_log("not trig:"..k.."|"..k1)
							break;
						end
					end
				end
				if trig then
					g_i3k_game_context:AddListPlot(k);
				end
			end
		end
		self._ploteventID = -1;
	end
	self:funcOpenCheck(EventID,args)
end
--------功能开启时间戳------------
function i3k_game_context:setFuncOpenTime(time)
	self._funcOpenTime = time
end

function i3k_game_context:getFuncOpenTime()
	return self._funcOpenTime
end

function i3k_game_context:checkOpenIdIsExist(id)
	local usercfg = self:GetUserCfg()
	local data = usercfg:GetFuncOpenDate()
	for k,v in ipairs(data) do
		if v == id then
			return true
		end
	end
end

function i3k_game_context:addOpenIdTousercfg(id)
	local usercfg = self:GetUserCfg()
	local data = usercfg:GetFuncOpenDate()
	table.insert(data,id)
	usercfg:SetFuncOpenData(data)
end

function i3k_game_context:funcOpenCheck(EventID,args)---------
		local logic = i3k_game_get_logic();
		if not logic then
			return false;
		end

		local world = logic:GetWorld();
		if not world then
			return false;
		end

		local hero = i3k_game_get_player_hero()
		if not hero then
			return false;
		end
		self.funcOpenId = EventID
		for k,v in pairs(i3k_db_function_open_cfg) do
			if self:LeadCheckTri(v.conditionId,args,2) then
				if not self:checkOpenIdIsExist(v.id)then
					if g_i3k_logic:IsRootUIBattle() then
						g_i3k_ui_mgr:OpenUI(eUIID_BattleFuncPrompt)
						g_i3k_ui_mgr:RefreshUI(eUIID_BattleFuncPrompt,k)
						self:addOpenIdTousercfg(v.id)
					end
				end
				break;
			end
		end
		self.funcOpenId = -1;
	self:updatePreviewId()
end
-----提示开启-----------
function i3k_game_context:getFuncPreviewId()
	return self:GetNowPreviewId()
end

function i3k_game_context:updatePreviewId()
	local id = self:getFuncPreviewId()
	if id < #i3k_db_preView_cfg then

			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance,"onUpdatePreview")

	elseif id == #i3k_db_preView_cfg then
		local conditionId = i3k_db_preView_cfg[id].endId
		local isPass = self:LeadCheckTri(conditionId,args,3)
		if isPass then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance,"IsShowPreViewUI",false)
		else
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance,"onUpdatePreview")
		end
	end
end

--计算当前开启的功能id
function i3k_game_context:GetNowPreviewId()
	local id = 0
	local conditionId = i3k_db_preView_cfg[1].openId
	local isPass = self:LeadCheckTri(conditionId,args,3)
	if isPass then
		for i,v in ipairs(i3k_db_preView_cfg) do
			id = i
			local isPass = self:LeadCheckTri(v.endId,args,3)
			if not isPass then
				break
			end
		end
	end

	return id
end





--封测运营活动红点
function i3k_game_context:setFengceRedCache(boolSurvey, boolLogin, boolLevel, boolUserdata, boolSprint, boolTimeReward, boolStrenglevel)
	self._fengceRedCache = {
		[1] = boolSurvey or false,
		[2] = boolLogin or false,
		[3] = boolLevel or false,
		[4] = boolUserdata or false,
		[5] = boolSprint or false,
		[6] = boolTimeReward or false,
		[7] = boolStrenglevel or false
	}
	self:testFengceAnis()
end

function i3k_game_context:startFengceCoroutine(isStart)
	self:stopFengceCoroutine()
	if isStart then
		self.co = g_i3k_coroutine_mgr:StartCoroutine(function ()
			while true do
				g_i3k_coroutine_mgr.WaitForSeconds(10)
				local endString = i3k_db_fengce.timeReward.endTime
				local timeStamp = g_i3k_get_GMTtime(i3k_game_get_time())
				local year = os.date("%Y", timeStamp )
				local month = os.date("%m", timeStamp )
				local day = os.date("%d", timeStamp)
				local close = string.split(endString, ":")
				local closeTimeStamp = os.time({year = year, month = month, day = day, hour = close[1], min = close[2], sec = close[3]})
				if timeStamp >closeTimeStamp then
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_Fengce, "hideRedPoint", 6)
					g_i3k_game_context:setFengceTimeRewardRedCache(false)
					g_i3k_game_context:stopFengceCoroutine()
				end
			end
		end)
	end
end

function i3k_game_context:stopFengceCoroutine()
	if self.co then
		g_i3k_coroutine_mgr:StopCoroutine(self.co)
		self.co = nil
	end
end

function i3k_game_context:getFengceRedCache()
	return self._fengceRedCache
end

function i3k_game_context:setFengceSurveyRedCache(isShow)
	self._fengceRedCache[1] = isShow
	self:testFengceAnis()
end

function i3k_game_context:setFengceLoginRedCache(isShow)
	self._fengceRedCache[2] = isShow
	self:testFengceAnis()
end

function i3k_game_context:setFengceLevelRedCache(isShow)
	self._fengceRedCache[3] = isShow
	self:testFengceAnis()
end

function i3k_game_context:setFengceUserdataRedCache(isShow)
	self._fengceRedCache[4] = isShow
	self:testFengceAnis()
end

function i3k_game_context:setFengceSprintRedCache(isShow)
	self._fengceRedCache[5] = isShow
	self:testFengceAnis()
end

function i3k_game_context:setFengceTimeRewardRedCache(isShow)
	self._fengceRedCache[6] = isShow
	self:testFengceAnis()
end

function i3k_game_context:setFengceStrenglevelRedCache(isShow)
	self._fengceRedCache[7] = isShow
	self:testFengceAnis()
end

function i3k_game_context:testFengceAnis()
	local iconShow, redShow = self:TestFengCeShowState()
	self:OnFengCeShowStateChangedHandler(iconShow, redShow)
end

function i3k_game_context:setIsUpdateFengce(isUpdate)
	self._isUpdateFengce = isUpdate
end

function i3k_game_context:getIsUpdateFengce()
	return self._isUpdateFengce
end

function i3k_game_context:setIsFirstLogin(isFirst)
	self._isFirstLogin = isFirst
end

function i3k_game_context:getIsFirstLogin()
	return self._isFirstLogin
end

function i3k_game_context:setIsShowFengceBtn(isTrue)
	self._isShowFence = isTrue
end

function i3k_game_context:getIsShowFengceBtn()
	return self._isShowFence
end

function i3k_game_context:setIsShowFengceWebLink(bValue)
	self._isShowFengceWebLink = bValue
end

function i3k_game_context:getIsShowFengceWebLink()
	return self._isShowFengceWebLink
end

-------------------任务场景动画播放------------------
function i3k_game_context:setPlayFlashState(state)
	self._playFlashState = state
end

function i3k_game_context:getPlayFlashState()
	return self._playFlashState
end

function i3k_game_context:setFlashId(id)
	if id then
		table.insert(self._flashArray,id)
	end
end

function i3k_game_context:getFlashId(id)
	if self._flashArray then
		for i,e in ipairs(self._flashArray) do
			if e == id then
				return true
			end
		end
	end
	return false
end

function i3k_game_context:mainTaskPlayFlash(id)
	if g_i3k_logic:IsRootUIBattle() then
		local main_task_cfg = g_i3k_db.i3k_db_get_main_task_cfg(id)
		local flashID = main_task_cfg.flashID
		if flashID ~= 0 then
			local isHave = self:getFlashId(flashID)
			if not isHave then
				self:setFlashId(flashID)
				i3k_game_play_scene_ani(flashID)
			else
				self:setPlayFlashState(false)
			end
		end
	end
end

function i3k_game_context:ChangeRoleTitle()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:ChangeHonorTitle();
	end
end

function i3k_game_context:SetjoystickMoveState(enable)
	self._joystickMove = enable
end

function i3k_game_context:GetjoystickMoveState()
	return self._joystickMove
end

function i3k_game_context:OnEntityPosChanged(entity)
	local world = i3k_game_get_world();
	if world then
		world:UpdateGrid(entity);
		if i3k_game_get_map_type()==g_FORCE_WAR then--势力战正邪成员移动
			local open = string.split( entity._guid, "|")
			local superClass = open[1]
			local rId = tonumber(open[2])
			local location = self:GetForceWarMemberPosition(rId)
			if superClass=="i3k_hero" then-- and not location
				self:setForceWarMemberPosition(rId,entity._curPos, world._cfg.id)---设置势力战成员位置
				self:setForceWarMemberInfo(rId, entity._forceType or 0)
			end
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_ForceWarKillNumber, "SetMemberLocation", rId, entity._forceType or 0)
		end
	end
end

function i3k_game_context:SetMoveState(isMove)
	self._nosendstopmove = isMove
end

function i3k_game_context:GetMoveState()
	return self._nosendstopmove
end

--劫镖
function i3k_game_context:SetRobState(state)
	local hero = i3k_game_get_player_hero()
	if hero then
		local oldState = hero:GetRobState()
		if state == 0 and oldState == 1 then
			hero:OnStopAction()
		end
		hero:SetRobState(state)
	end
	local world = i3k_game_get_world()
	if world then
		world:ChangeCarShowState()
	end
end
--运镖
function i3k_game_context:SetTransportState(state)
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:SetTransportState(state)
	end
end

function i3k_game_context:GetTransportState()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetTransportState()
	end
end

--是否处于劫镖状态
function i3k_game_context:SetEscortRobState(state)
	self._faction_escort_rob_state = state
end

function i3k_game_context:GetEscortRobState()
	return self._faction_escort_rob_state
end

--运镖次数
function i3k_game_context:SetFactionEscortAccTimes(count)
	self._faction_escort_acc_times = count
end

--取消帮派运镖的响应

function i3k_game_context:CancelEscortRes()
	g_i3k_game_context:SetTransportState(0)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EscortAction,"hideAllLayer")
	g_i3k_game_context:SetFactionEscortPathId(0)
	g_i3k_game_context:SetFactionEscortTaskId(0)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"RemoveFactionEscortTaskItem")
	self:removeTaskData(TASK_CATEGORY_ESCORT)
	g_i3k_game_context:ClearFindWayStatus()
	g_i3k_game_context:SetTransportState(0)
	g_i3k_game_context:EscortCarMoveSync()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleMiniMap,"updateMapInfo")
end

function i3k_game_context:GetFactionEscortAccTimes()
	return self._faction_escort_acc_times
end

function i3k_game_context:AddFactionEscortAccTimes(count)
	self._faction_escort_acc_times = self._faction_escort_acc_times + count
end

--劫镖次数
function i3k_game_context:SetFactionEscortRobTimes(count)
	self._faction_rob_times = count
end

function i3k_game_context:GetFactionEscortRobTimes()
	return self._faction_rob_times
end

function i3k_game_context:AddFactionEscortRobTimes(count)
	self._faction_rob_times =self._faction_rob_times + count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEscortRobStore,"updateRobTimes")
end

--镖车停止移动同步
function i3k_game_context:EscortCarStopMoveSync()
	local mapid,pos = g_i3k_game_context:GetEscortCarLocation()

	local logic	= i3k_game_get_logic()
	local player = logic:GetPlayer()
	local rolePos = player:GetHeroPos()

	local roleMap = self:GetWorldMapID()

	local pos1 = {x = pos.x/100,y = pos.y/100,z = pos.z/100}
	local pos2 = {x = rolePos.x/100,y = rolePos.y/100,z = rolePos.z/100 }

	if mapid ~= -1 and mapid ~= roleMap then
			g_i3k_coroutine_mgr:StopCoroutine(self._faction_escort_co)
			self._faction_escort_co = g_i3k_coroutine_mgr:StartCoroutine(function()
			while true do
				local id = g_i3k_game_context:GetFactionEscortTaskId()
				if id ~= 0 then
					g_i3k_coroutine_mgr.WaitForSeconds(5) --延时
					local tmp_str = i3k_get_string(550)
					g_i3k_ui_mgr:PopupTipMessage(tmp_str)
				else
					g_i3k_coroutine_mgr:StopCoroutine(self._faction_escort_co)
				end
			end
		end)
	else

		--人和镖车的距离
		local tmp = i3k_vec3_dist(pos1, pos2)
			g_i3k_coroutine_mgr:StopCoroutine(self._faction_escort_co)
			self._faction_escort_co = g_i3k_coroutine_mgr:StartCoroutine(function()
			while true do
				local mapid,pos = g_i3k_game_context:GetEscortCarLocation()

				local logic	= i3k_game_get_logic()
				local player = logic:GetPlayer()
				if player then
					local rolePos = player:GetHeroPos()
					local pos1 = {x = pos.x/100,y = pos.y/100,z = pos.z/100}
					local pos2 = {x = rolePos.x/100,y = rolePos.y/100,z = rolePos.z/100 }

					g_i3k_coroutine_mgr.WaitForSeconds(5) --延时
					local tmp = i3k_vec3_dist(pos1, pos2)
					local a = i3k_db_escort.escort_args.distance/100
					if i3k_vec3_dist(pos1, pos2) > i3k_db_escort.escort_args.distance/100 then
						local id = g_i3k_game_context:GetFactionEscortTaskId()
						if id ~= 0 then
							g_i3k_coroutine_mgr.WaitForSeconds(5) --延时
							local tmp_str = i3k_get_string(550)
							g_i3k_ui_mgr:PopupTipMessage(tmp_str)
						else
							g_i3k_coroutine_mgr:StopCoroutine(self._faction_escort_co)
						end
					end
				end
			end
		end)


	end



end

--镖车移动
function i3k_game_context:EscortCarMoveSync()
	g_i3k_coroutine_mgr:StopCoroutine(self._faction_escort_co)
end

--运镖商店货币
function i3k_game_context:SetEscortStoreMoney(count)
	self._escort_rob_money = count
end

function i3k_game_context:GetEscortStoreMoney()
	return self._escort_rob_money
end

function i3k_game_context:AddEscortStoreMoney(count)
	self._escort_rob_money = self._escort_rob_money + count
end

function i3k_game_context:UseEscortStoreMoney(count,reason)
	self._escort_rob_money = self._escort_rob_money - count
	DCItem.consume(g_BASE_ITEM_ESCORTT_MONEY, "赏金点", count, reason)
end

--添加求援信息
function i3k_game_context:AddEscortForHelpStr(name,location,id,line)

	for k,v in ipairs(self._escort_for_help_str) do
		if v.id == id then
			table.remove(self._escort_for_help_str,k)
			break
		end
	end
	local t = {name = name,location = location,id = id,line = line}
	if #self._escort_for_help_str == 5 then
		table.remove(self._escort_for_help_str,1)
	end

	table.insert(self._escort_for_help_str,t)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EscortHelpTips,"updateVisible")
end

function i3k_game_context:GetEscortForHelpStr()
	return self._escort_for_help_str
end

function i3k_game_context:RemoveAllEscortForHelpStr()
	self._escort_for_help_str = {}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EscortHelpTips,"updateVisible")
end



function i3k_game_context:RemoveEscortForHelpById(id)
	for k,v in ipairs(self._escort_for_help_str) do
		if v.id == id then
			table.remove(self._escort_for_help_str,k)
			break
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_EscortHelpTips,"updateVisible")
end

--求援信息的时间
function i3k_game_context:SetEscortForHelpTime(value)
	self._escort_for_help_time = value
end

function i3k_game_context:GetEscortForHelpTime()
	return self._escort_for_help_time
end

--是否投保
function i3k_game_context:SetEsortIsProtect(value)
	self._escort_is_protect = value
end

function i3k_game_context:GetEsortIsProtect()
	return self._escort_is_protect
end

function i3k_game_context:SetEscortQuickCard(num)
	self._escort_quick_num = num
end
function i3k_game_context:GetEscortQuickCard()
	return self._escort_quick_num
end
function i3k_game_context:SetFactionQq(str)
	self._faction_data.faction_qq = str
end

function i3k_game_context:GetFactionQq()
	return self._faction_data.faction_qq
end

function i3k_game_context:SetFactionKickTimes(value)
	self._faction_data.faction_day_kick = value
end

function i3k_game_context:AddFactionKickTimes(count)
	self._faction_data.faction_day_kick = self._faction_data.faction_day_kick + count
end

function i3k_game_context:GetFactionKickTimes()
	return self._faction_data.faction_day_kick
end

-------------------------------帮派夺旗战数据begin------------------
--帮派旗子占领信息
function i3k_game_context:SetFactionFlagData(data)
	--self.mapId:		int32
	--self.curSect:		MapFlagSectOverView
	--self.occupyTime:		int32
	--self.lastRoleRewardTime:		int32
	--self.lastSectRewardTime:		int32
	--self.cantake:		int8
	self._faction_rob_flag.base_data = data
end

function i3k_game_context:GetFactionFlagData()
	return self._faction_rob_flag.base_data
end

--修改旗子模型
function i3k_game_context:ChangeFactionFlagModle(id)
	local wolrd = i3k_game_get_world()
	wolrd:ChangeFactionFlag(id)
end

--保存当前地图旗子的占领帮派的id
function i3k_game_context:SetCurrentMapFlagId(id)
	self._faction_rob_flag.current_map_flag_id = id
end

function i3k_game_context:GetCurrentMapFlagId()
	return self._faction_rob_flag.current_map_flag_id
end

function i3k_game_context:SetCurrentMapFlagName(name)
	self._faction_rob_flag.current_map_flag_name = name
end

function i3k_game_context:GetCurrentMapFlagName()
	return self._faction_rob_flag.current_map_flag_name
end




-------------------------------帮派夺旗战数据end------------------


function i3k_game_context:getPingInfoImg(ping)
	if ping < 400 then
		return g_i3k_db.i3k_db_get_icon_path(2384)
	elseif ping < 1000 then
		return g_i3k_db.i3k_db_get_icon_path(2385)
	else
		return g_i3k_db.i3k_db_get_icon_path(2386)
	end
end

-- 解锁技能提示动画的显隐
function i3k_game_context:getUnlockSkillStatus()
	return self._unlockSkillStatus
end

function i3k_game_context:setUnlockSkillStatus(value)
	self._unlockSkillStatus = value -- true or false
end

function i3k_game_context:getVipBloodPercent(viphppool)
	local hppoolmax = i3k_db_common.drug.viplimited
	local hero = i3k_game_get_player_hero()
	if hero then
		hppoolmax = hppoolmax + hero:GetPropertyValue(ePropID_MeridianHPUpper)
	end
	return viphppool/hppoolmax * 100
end

-- 检查有无可以解锁的技能
function i3k_game_context:haveUnlockSkills()
	local skillList = g_i3k_game_context:GetRoleSelectSkills()
	local roleType = g_i3k_game_context:GetRoleType()
	local defaultSkills = g_i3k_db.i3k_db_get_character_default_skills(roleType)
	local needLvl = g_i3k_db.i3k_db_get_skill_unlock_level(defaultSkills)
	local hero = i3k_game_get_player_hero()
	if hero then
		local level = hero._lvl
		for i,v in ipairs(skillList) do
			if v==0 and level >= needLvl[i] then
				return true
			end
		end
	end
	return false
end

-- debug values
function i3k_game_context:setDebugOnUpdateUI(bValue)
	self.onDebugOnUpdateUI = bValue
end

function i3k_game_context:getDebugOnUpdateUI()
	return self.onDebugOnUpdateUI
end

function i3k_game_context:setDebugOnUpdateLogic(bValue)
	self.onDebugOnUpdateLogic = bValue
end

function i3k_game_context:getDebugOnUpdateLogic()
	return self.onDebugOnUpdateLogic
end


-- 技能道具
function i3k_game_context:checkSkillItemType(id)
	local cfg = g_i3k_db.i3k_db_get_common_item_cfg(id)
	return cfg and cfg.type == UseItemSkill
end

function i3k_game_context:getSkillItems()
	if not next(self._skillItems) then
		-- 只有第一次初始化时，才遍历一遍背包
		for k, v in pairs(self._bagData.items) do
			-- 技能道具
			if self:checkSkillItemType(v.id) then
				table.insert(self._skillItems, v)
			end
		end
	end
	-- 每次获取的时候，刷新一次当前拥有的技能道具，若个数为0则移除
	for i = #self._skillItems, 1, -1 do
		if self._skillItems[i].count == 0 then
			table.remove(self._skillItems, i)
		end
	end
	return self._skillItems
end

function i3k_game_context:addSkillItems(id, count)
	local data = self._bagData.items[id]
	local is_new =  true
	for k,v in pairs(self._skillItems) do
		if v.id == id  then
			v.count = data.count
			is_new = false
			break
		end
	end
	if is_new then
		table.insert(self._skillItems, data)
	end
end

function i3k_game_context:checkAddSkillItems(id, count)
	if self:checkSkillItemType(id) then
		self:addSkillItems(id, count)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateAllSkills")
	end
end

-- 七日留存活动相关
function i3k_game_context:SetKeepActivityPos(pos)
	self._keepActivityPos = pos
end

function i3k_game_context:GetKeepActivityPos()
	return self._keepActivityPos
end

function i3k_game_context:SetKeepActivityData(pos, cfg)
	self:SetKeepActivityPos(pos)
	local roleType = self:GetRoleType()
	local items = {}
	for i = 1 ,6 do
		if cfg["itemCount"..i] and cfg["itemCount"..i] > 0 then
			local t = {id = cfg["rewardItem"..i][roleType], count = cfg["itemCount"..i]}
			table.insert(items, t)
		end
	end
	g_i3k_ui_mgr:ShowGainItemInfo(items)
	if i3k_db_seven_keep_activity[pos+1] then
		g_i3k_ui_mgr:RefreshUI(eUIID_KeepActivity, true)
	else
		g_i3k_ui_mgr:CloseUI(eUIID_KeepActivity)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "updateKeepUI")
end

function i3k_game_context:isShowLoginReward()
	local pos = self:GetKeepActivityPos()
	local heirloom = self:getHeirloomData()
	if pos >= i3k_db_chuanjiabao.cfg.activityID and heirloom.isOpen ~= 1 then
		pos = i3k_db_chuanjiabao.cfg.activityID - 1
	end

	local isShow = true
	if not i3k_db_seven_keep_activity[pos + 1] then
		isShow = false
	end
	return isShow
end

-- 道具提示使用相关
function i3k_game_context:checkItemTipLimitConditions(type,item_id)
	if type == 3 then -- type 3 经验丹
		local level_limit = g_i3k_db.i3k_db_get_other_item_cfg(item_id).args2;
		if self:GetLevel() >= #i3k_db_exp or self:GetLevel() > level_limit then
			return false
		end
	elseif type == 8 then -- type 8 vip 药品
		if self:GetMaxVipBloodPoolCount(item_id) <= 0 then
			return false
		end
	elseif type == 16 then -- type 16 体力包
		if self:GetVit() >= self:GetVitMax() then
			return false
		end
	elseif type == 21 then -- type 21 月卡
		local endTime = self:GetMonthlyCardEndTime()
		local nowTime = i3k_game_get_time()
		if endTime ~= 0 and endTime < nowTime then
			return false
		end
	elseif type == 22 then -- type 22 vip体验卡
		if self:GetVipLevel() > 0 or self:GetVipExperienceLevel() > 0 then
			return false
		end
	elseif type == 26 then -- 信件
		return self:checkItemMailType(item_id)
	elseif type == 33 then -- 属性增强道具
		return self:getOneTimesItemAllCountDataForId(item_id) ~= 0 and self:getOneTimesItemLvlForId(item_id)
	end
	return true
end

function i3k_game_context:checkItemTipLevelRequire(item)
	local level = self:GetLevel()
	local vipLevel = self:GetVipLevel()
	if level < item.levelReq then
		return false
	end
	if vipLevel < item.vip_need_level then
		return false
	end
	return true
end

function i3k_game_context:checkShowTipNeedItem(item)
	if item.args2 == 0 then
		return true
	end
	if item.type == 4 or item.type == 9 then
		return self:GetCommonItemCount(item.args2) > 0
	end
	return true
end

function i3k_game_context:checkShowTipJumpUI(item)
	return item.isShowTip == 1
end

function i3k_game_context:checkShowTipItemUseTimes(item)
	return g_i3k_db.i3k_db_get_day_use_item_day_use_times(item.id) ~= 0
end

function i3k_game_context:checkShowTipItemType(itemId)
	local item = g_i3k_db.i3k_db_get_other_item_cfg(itemId)
	if item then
		if self:checkShowTipJumpUI(item) then
			return true
		end
		if gShowTipItems[item.type] and self:checkItemTipLevelRequire(item) then
			if self:GetIsInHomeLandZone() then
				if item.type == UseItemFurniture or item.type == UseItemHouseSkin then
					return true
				else
					return false
				end
			end
			return self:checkItemTipLimitConditions(item.type,item.id) and self:checkShowTipNeedItem(item) and self:checkShowTipItemUseTimes(item)
		end
	end
	return false
end

-- 维护一个table
function i3k_game_context:addNewItemCheckList(itemId)
	if self._itemCheckList == nil then
		self._itemCheckList = {}
	end
	for _, v in ipairs( self._itemCheckList ) do
		if v == itemId then
			return ;
		end
	end
	if self:checkShowTipItemType(itemId) then
		table.insert(self._itemCheckList, itemId)
		if not self:GetBatterEquipStatus() then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onItemTipsShow")
		end
	end
end

function i3k_game_context:getNewItemCheckId()
	if self._itemCheckList == nil or next(self._itemCheckList) == nil then
		return nil
	end
	return self._itemCheckList[#self._itemCheckList]
end

function i3k_game_context:tryRemoveNewItemCheck()
	if self._itemCheckList then
		table.remove(self._itemCheckList)
	end
end

function i3k_game_context:clearItemCheckList()
	self._itemCheckList = nil
end

-- 添加道具为信件
function i3k_game_context:checkItemMailType(id)
	local MailItemTab = g_i3k_db.i3k_db_get_other_item_cfg(id)
	if MailItemTab.type ~= UseItemMail then
		return false
	end
	local task = self:isMainItemGetSubLineTask(id)  --是否可接取支线任务
	if MailItemTab and MailItemTab.args2 ~=0 and task then --非普通信件 并且可接取支线任务
		--todo显示读取框
		return true
	end
	return false
end

-- 进入新手关引导场景（这部分可以放到logic中）
function i3k_game_context:enterPlayerLeadMap()
	releaseSchedule()
	local logic = i3k_game_get_logic();
	local world = nil
	if logic then
		world = logic:GetWorld()
		local player = logic:GetPlayer();
		if player and player:GetHero() then
			player:ResetCameraEntity()
			local hero = player:GetHero();
			if hero then
				g_i3k_game_context:setCameraAngle(0)
			end
		end
	end

	i3k_game_stop_scene_ani()
	if world then
		world:Release();
	end
	local player = logic:GetPlayer();
	local hero = nil
	if player and player:GetHero() then
		hero = player:GetHero();
		hero:TitleColorTest();
	end
	g_i3k_game_context:ResetLeadMode()
	-- TODO load data from excel
	local r = i3k_vec3_angle2(i3k_vec3(0.08, 0, 0.9), i3k_vec3(1, 0, 0));
	local stage = self:getPlayerLeadStage()
	local position = i3k_db_new_player_guide_lead[stage].spawnPos
	g_i3k_game_context:ChangeZone(100, i3k_vec3(position.x * 100, position.y * 100, position.z * 100), r);
	g_i3k_game_context:SetCurrentLine(1)
	g_i3k_game_context:SetMoveState(true)
end

function i3k_game_context:isOnSprog()
	if not self.playerLeadStage then
		return false
	end
	return self.playerLeadStage ~= 0
end

-- 新手关断线重连标志位
function i3k_game_context:setPlayerLeadSyncFlag()
	self._playerLeadSyncFlag = true
end
function i3k_game_context:resetPlayerLeadSyncFlag()
	self._playerLeadSyncFlag = nil
end

function i3k_game_context:getPlayerLeadSyncFlag()
	return self._playerLeadSyncFlag
end

function i3k_game_context:setPlayerLeadStage(iValue)
	if iValue == 0 then
		return
	end
	self.playerLeadStage = iValue
	local logic = i3k_game_get_logic();
	if logic then
		logic:OnPlayerLead()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updatePlayerLead")
end

-- 新手关，初始到触发新怪的阶段
function i3k_game_context:addFirstPlayerLeadStage()
	if not self._firstLeadStage then
		self._firstLeadStage = true
		-- i3k_sbean.save_playerLead_mapcopy(2)
		g_i3k_game_context:setPlayerLeadStage(2)
	end
end

-- 新手关，初始到触发第二波新怪的阶段
function i3k_game_context:addSecondPlayerLeadStage()
	if not self._firstLeadStage2 then
		self._firstLeadStage2 = true
		-- i3k_sbean.save_playerLead_mapcopy(3)
		g_i3k_game_context:setPlayerLeadStage(3)
	end
end

-- 新手关，初始到触发第3波新怪的阶段
function i3k_game_context:addThirdPlayerLeadStage()
	if not self._firstLeadStage3 then
		self._firstLeadStage3 = true
		-- i3k_sbean.save_playerLead_mapcopy(4)
		g_i3k_game_context:setPlayerLeadStage(4)
	end
end

function i3k_game_context:addPlayerLeadStage()
	local nextStage = self:getPlayerLeadStage() + 1
	if nextStage == 4 then
		return
	end
	-- i3k_sbean.save_playerLead_mapcopy(nextStage)
	g_i3k_game_context:setPlayerLeadStage(nextStage)
end

function i3k_game_context:getPlayerLeadStage()
	return self.playerLeadStage
end

function i3k_game_context:addLeaveDialogue()
	g_i3k_ui_mgr:CloseUI(eUIID_Dialogue1)
	g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
	local desc = i3k_db_dialogue[906][1].txt
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dialogue1, "playerLead", desc, -1)
end

function i3k_game_context:leavePlayerLeadImpl()
	local logic = i3k_game_get_logic();
	if logic then
		logic:OnLeavePlayerLead() -- 这里面会调用context中的leave函数
	end
end

-- 离开新手关入口，待收到changeMap协议的时候，判断是否在新手关，如果在那么切换状态机并清理数据
function i3k_game_context:sendLeavePlayerLeadProtocol()
	i3k_sbean.save_playerLead_mapcopy(0)
end

-- 此函数不需要手动调用
function i3k_game_context:leavePlayerLead()
	self.playerLeadStage = 0
	-- self:resetPlayerLeadSyncFlag()
	self._playerLeadSyncFlag = false
	self._firstLeadStage = false
	self._firstLeadStage2 = false -- delete
	self._firstLeadStage3 = false -- delete
end

-- 新手关完成标志
function i3k_game_context:onKillLastPlayerLeadBoss()
	self._playLeadLeaveFlag = true
end

function i3k_game_context:getPlayLeadFlag()
	return self._playLeadLeaveFlag
end

function i3k_game_context:clearPlayLeadFlag()
	self._playLeadLeaveFlag = false
end

-- 新手关完成，进入场景之前播放动画的标志位
function i3k_game_context:setLeavePlayerLeadPlayAnisFlag(bValue)
	self._playerLeadLeaveAnis = bValue
end
function i3k_game_context:getLeavePlayerLeadPlayAnisFlag()
	return self._playerLeadLeaveAnis
end

function i3k_game_context:getMonsterDeny_db(index)
	if self:isOnSprog() then
		return 0
	end
	return i3k_db_common.skill.monsterdeny[index]
end

function i3k_game_context:getSpawnLoadArgsByStage(stage)
	local id = 9900 -- TODO
	local args = {}
	for i = 1, stage - 1 do
		local spawn = i3k_db_spawn_area[id + i]
		local point = spawn.spawnPoints
		for _, e in ipairs(point) do
			args[e] = { killedCount = 1 }
		end
	end
	return args
end

function i3k_game_context:resumePausedGame()
	g_i3k_game_handler:ResumeAllEntities()
	i3k_game_resume()
end

function i3k_game_context:setStartJumpState(bValue)
	self._startJumpState = bValue
	if not bValue then
		g_i3k_game_handler:ResumeAllEntities()
		i3k_game_resume()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "showGundongBtn", not bValue)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_PlayerLead, "setAddAnisAfterJump", true)
end

function i3k_game_context:getStartJumpState(bValue)
	return self._startJumpState
end

function i3k_game_context:resetStartJumpStage()
	self._startJumpState = nil
end

function i3k_game_context:setPlaySceneAnisCallback(callback)
	self._sceneAnisCallback = callback
end
function i3k_game_context:callPlaySceneAnisCallback()
	if self._sceneAnisCallback then
		local func = self._sceneAnisCallback
		func()
		self._sceneAnisCallback = nil
	end
end

function i3k_game_context:setSyncPlayerLeadFlag(bValue)
	self._syncPlayerLeadFlag = bValue
end

function i3k_game_context:getSyncPlayerLeadFlag()
	return self._syncPlayerLeadFlag
end

-- 在背包中使用物品时，移除掉提示
function i3k_game_context:useItemAtBagRemoveTip(itemId)
	if self:getNewItemCheckId() == itemId then
		self:tryRemoveNewItemCheck()
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onItemTipsShow")
	end
end

function i3k_game_context:openFindwayTipsUI(tipsState)
	if g_i3k_logic:IsRootUIBattle() then --and not self:IsInMissionMode()
		if g_i3k_ui_mgr:GetUI(eUIID_transportProcessBar) then
			self.findwayco = g_i3k_coroutine_mgr:StartCoroutine(function()
				while true do
					g_i3k_coroutine_mgr.WaitForSeconds(0.5)
					g_i3k_ui_mgr:OpenUI(eUIID_FindwayStateTips)
					g_i3k_ui_mgr:RefreshUI(eUIID_FindwayStateTips)
					if not g_i3k_ui_mgr:GetUI(eUIID_transportProcessBar)then
						if not g_i3k_game_context:GetFindWayStatus() then
							g_i3k_ui_mgr:CloseUI(eUIID_FindwayStateTips)
						end
						return
					end
				end
			end)
		else
			if g_i3k_ui_mgr:GetUI(eUIID_DesertBattleFindWayTips) or tipsState == g_FindWayTips_State then
			    g_i3k_ui_mgr:OpenUI(eUIID_DesertBattleFindWayTips)
				g_i3k_ui_mgr:RefreshUI(eUIID_DesertBattleFindWayTips) --前往安全区
			else
				g_i3k_ui_mgr:OpenUI(eUIID_FindwayStateTips)
				g_i3k_ui_mgr:RefreshUI(eUIID_FindwayStateTips)
			end

		end
	end
end

function i3k_game_context:updateTransferBtnShow()
	if g_i3k_ui_mgr:GetUI(eUIID_FindwayStateTips) then
		local cur_mapId = self:GetWorldMapID()
		local data = g_i3k_game_context:GetFindPathData()
		if data and cur_mapId == data.mapid then
			local hero = i3k_game_get_player_hero()
			local rolepos = hero._curPos
			rolepos = i3k_vec3_div2(rolepos,100)
			if self:Caculator(rolepos,data.pos,20) then
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_FindwayStateTips,"TransferBtnIsShow",false)
			end
		end
	end
end

function i3k_game_context:GetReviveCost()
	local vipLevel = self:GetVipLevel()
	local reviveDecline = i3k_db_kungfu_vip[vipLevel].reviveDecline
	local ratio = 1 - reviveDecline / 10000
	if g_i3k_db.i3k_db_get_is_pve_maptype() then
		return math.ceil(i3k_db_common.rolerevive.pveReviveCost * ratio)
	end
	return math.ceil((self._reviveTimes * i3k_db_common.rolerevive.reviveAdd + i3k_db_common.rolerevive.revivecost) * ratio)
end

function i3k_game_context:SetRevieTimes(times, cprTimes)
	self._reviveTimes = times
	self:SetCprReviveTimes(cprTimes)
end

function i3k_game_context:AddRevieTimes()
	self._reviveTimes = self._reviveTimes + 1
end
function i3k_game_context:SetCprReviveTimes(cprTimes)
	self._cprReviveTimes = cprTimes
	g_i3k_ui_mgr:RefreshUI(eUIID_PlayerRevive)
end
function i3k_game_context:AddCprReviveTimes()
	self._cprReviveTimes = self._cprReviveTimes + 1
end
function i3k_game_context:getCprReviveTimes()
	return self._cprReviveTimes or 0
end

function i3k_game_context:setUsercfgUsePetPool(bValue)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SetBlood, "setPetRegImgStatus", bValue)
	local cfg = g_i3k_game_context:GetUserCfg()
	cfg:setIsPetCanUsePool(bValue)
end

function i3k_game_context:remmberMineTaskType(mtype)
	self._mtype = mtype
end

function i3k_game_context:getMineTaskType()
	return self._mtype
end

function i3k_game_context:remmberMineTaskInfo(taskPointId, index)
	self._mineTaskInfo = {taskPointId = taskPointId, index = index}
end

function i3k_game_context:getMineTaskInfo()
	return self._mineTaskInfo
end

function i3k_game_context:clearMineTaskInfo()
	self._mineTaskInfo = nil
end

local ErrorCode = {
	[g_MULHORSE_ERROR] 			= 1584,
	[g_MULHORSE_OFFLINE]		= 1585,
	[g_MULHORSE_INVALID]		= 1584,
	[g_MULHORSE_SELF_FULL]		= 1586,
	[g_MULHORSE_OTHER_FULL]		= 1587,
	[g_MULHORSE_SELF_RIDE]		= 1588,
	[g_MULHORSE_OTHER_RIDE]		= 1589,
	[g_MULHORSE_SELF_UNRIDE]	= 1590,
	[g_MULHORSE_OTHER_UNRIDE]	= 1591,
	[g_MULHORSE_TIME_OUT]		= 1592,
	[g_MULHORSE_TOO_FAR]		= 1593,
	[g_MULHORSE_IN_FIGHT]		= 1594,
	[g_MULHORSE_LEAD]			= 1595,
	[g_MULHORSE_BUSY]			= 1596,
	[g_MULHORSE_METAMORPHOSIS]	= 1568,
	[g_MULHORSE_WAS_BANED]		= 17733,
}

--多人坐骑相关错误码提示
function i3k_game_context:MulHorseErrorCode(result)
	if ErrorCode[result] then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(ErrorCode[result]))
	else
		g_i3k_ui_mgr:PopupTipMessage("无效错误码")
	end
end

function i3k_game_context:CheckMulHorse(func, isMember, tipsID)
	if self:GetIsSpringWorld() then
		if self:IsOnRide() then
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(3166))
			return true
		end
	end
	local textID = tipsID or 672
	if self:IsLeaderMemberState() and not isMember then
		local function callback(isOk)
			if isOk then
				self:UnRide(func)
			end
		end
		g_i3k_ui_mgr:ShowMessageBox2(i3k_get_string(textID), callback)
	elseif self:IsMulMemberState() then
		local function callback(isOk)
			if isOk then
				i3k_sbean.mulhorse_leave_requst(func)
			end
		end
		g_i3k_ui_mgr:ShowMessageBox2(i3k_get_string(textID), callback)
		return true
	else
		self:CheckHugMode(func, isMember)
		--return false
	end
end

--内甲同步数据
function i3k_game_context:setUnderWearData(curArmor, allArmorsData, runeBag, curResetTalentTimes, runeLangLvls, hideEffect, castIngots)
	self._curArmor = curArmor
	self._allArmorsData = allArmorsData
	self._runeBag=runeBag   --是符文背包、一个是当前重置天赋次数
	self._curResetTalentTimes=curResetTalentTimes
	self._runeLangLvls = runeLangLvls or {}
	self._hideEffect = hideEffect
	self._castIngots = castIngots
	-- for i,v in ipairs(allArmorsData) do
	-- 	self._allArmorsData[i].id = v.id
	-- 	self._allArmorsData[i].level = v.level
	-- 	self._allArmorsData[i].rank = v.rank
	-- 	self._allArmorsData[i].unlocked = v.unlocked
	-- 	self._allArmorsData[i].exp = v.exp
	-- 	self._allArmorsData[i].useTalentPoint = v.useTalentPoint
	-- 	self._allArmorsData[i].wishPoint = v.wishPoint
	-- 	self._allArmorsData[i].talentPoint = v.talentPoint     --map 使用的明细
	-- 	self._allArmorsData[i].soltGroupData = v.soltGroupData  --插槽内装备符文
	-- end
end

function i3k_game_context:getAllUnderWearMaxLvl()
	local lvl = 0
	local curUnderWear =  self:getUnderWearData()

	if curUnderWear == 0 then
		return lvl
	end

	for i,v in ipairs(self._allArmorsData) do
		if v.level > lvl then
			lvl = v.level
		end
	end
	return lvl
end

--获取内甲最大阶位
function i3k_game_context:getAllUnderWearMaxRank()
	local rank = 0

	local curUnderWear =  self:getUnderWearData()

	if curUnderWear == 0 then
		return rank
	end

	for i,v in ipairs(self._allArmorsData) do
		if v.rank > rank then
			rank = v.rank
		end
	end

	return rank
end

--获取符文之语最大阶位
function i3k_game_context:getruneLangMaxRank()
	local rank = 0

	for i,v in pairs(self._runeLangLvls) do
		if v > rank then
			rank = v
		end
	end

	return rank
end

--更新内甲单项数据_curArmor 内甲id，当前等级，当前品阶，当前装备符文,当前投放天赋点
function i3k_game_context:setNowUnderWeariD(curArmor,tab)
	self._curArmor =curArmor
	--todo lannan
	local runeTab = self:getAnyUnderWearAnyData(curArmor,"soltGroupData")
	local talentPoint = self:getAnyUnderWearAnyData(curArmor,"talentPoint")
	local hero = i3k_game_get_player_hero()
	local talentPointData = {}
	for i,v in pairs(talentPoint) do
		table.insert(talentPointData,i,v)
	end
	hero:AttachArmor(curArmor, tab[curArmor].underwear_level, tab[curArmor].underwear_stage, i3k_clone(runeTab), i3k_clone(talentPointData))
	hero:OnPowerChangeByArmor();
end

--更新内甲单项数据curResetTalentTimes
function i3k_game_context:setResetTalentTimes(curResetTalentTimes)
	self._curResetTalentTimes =curResetTalentTimes
end

--更新内甲单项数据_allArmorsData
function i3k_game_context:setAnyUnderWearAnyData(curArmor,AnyData,Data)
	self._allArmorsData[curArmor][AnyData] =Data
end

--更新内甲单项数据_hideEffect
function i3k_game_context:setArmorHideEffect( hideEffect )
	self._hideEffect = hideEffect and 1 or 0
end

function i3k_game_context:setArmorUpLevel(curArmor,level)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Under_Wear_update, "updateModule",curArmor)
	g_i3k_ui_mgr:PopupTipMessage("升级成功")
	--todo lannan
	local hero = i3k_game_get_player_hero()
	hero:ArmorLevelUp(curArmor,level)
	hero:OnPowerChangeByArmor();
end

--符文镶嵌/卸载/替换 后数据整理 --前四个位需要参数，第五位为是卸载标记 后两个标记 是否为替换镶嵌
function i3k_game_context:setRuneSoltData(curArmor,soltGroupIndex ,soltIndex , runeId,runeEquipId ,bool ,id ,isPopTip)
	local data = self._allArmorsData[curArmor].soltGroupData
	if data then
		if data[soltGroupIndex].unlocked ==1 then
			data[soltGroupIndex].solts[soltIndex] =runeId
		end
	end
	--设置符文背包
	if bool then   --替换  背包里少了一个runeid  多了一个id
		if self._runeBag[id] then       --背包加符文
			self._runeBag[id] = self._runeBag[id] +1
		else
			self._runeBag[id] = 1
		end
		if  self._runeBag[runeId] then    --背包减符文
			 if  self._runeBag[runeId]==1 then
				 self._runeBag[runeId] = nil
			else
				 self._runeBag[runeId] =  self._runeBag[runeId] -1
			end
		end
		if isPopTip then
			g_i3k_ui_mgr:PopupTipMessage("装备成功")
		end
		return
	else --单纯的卸载 或 镶嵌
		if  runeId == 0 then --卸载
			if self._runeBag[runeEquipId] then
				self._runeBag[runeEquipId] = self._runeBag[runeEquipId] +1
			else
				self._runeBag[runeEquipId] = 1
			end
			if isPopTip then
				g_i3k_ui_mgr:PopupTipMessage("成功卸下")
			end
			return
		else
			if  self._runeBag[runeId] then    --背包减符文
				 if  self._runeBag[runeId]==1 then
					 self._runeBag[runeId] = nil
				else
					 self._runeBag[runeId] =  self._runeBag[runeId] -1
				end
			end
			if isPopTip then
				g_i3k_ui_mgr:PopupTipMessage("装备成功")
			end
			return
		end
	end
end

function i3k_game_context:setSoltGroupData(curArmor,soltTag)
	if self._allArmorsData[curArmor] then
		self._allArmorsData[curArmor].soltGroupData[soltTag].unlocked = 1
	end
end

--获取内甲单项数据
function i3k_game_context:getAnyUnderWearAnyData(curArmor,AnyData)
	return self._allArmorsData[curArmor][AnyData]
end
--获取符文之语的等级
function i3k_game_context:getRuneLangLevel(id)
	return self._runeLangLvls[id] or 0
end

function i3k_game_context:setRuneLangLevel(id, lvl)
	self._runeLangLvls[id] = lvl
end

--获取内甲符文信息
function i3k_game_context:GetRuneBagInfo()
	local bagSize = 0
	for k ,v in pairs(self._runeBag) do
		bagSize = bagSize+v
	end
	return bagSize,self._runeBag
end

function i3k_game_context:runeLangIsGet(curArmor, currSlotIndex, equipRuneId, equipIdIndex, equipTable)
	local allRunes = self._allArmorsData[curArmor].soltGroupData
	local currRunes = {}

	if equipRuneId then
		for idx, rId in ipairs(allRunes[currSlotIndex].solts) do
			if rId ~= 0 and idx ~= equipIdIndex then
				currRunes[math.abs(rId)] = 1
			end
		end
		currRunes[math.abs(equipRuneId)] = 1
		if table.nums(currRunes) < 6 then
			return false
		end
	else
		for _, rId in ipairs(equipTable) do
			if rId ~= 0 then
				currRunes[math.abs(rId)] = 1
			end
		end
	end
	local count = 0
	for slotIndex,v in ipairs(allRunes) do
		count = 0
		local langId = g_i3k_db.i3k_db_get_rune_word(v.solts)
		if slotIndex ~= currSlotIndex and langId ~= 0 then
			for _,rune_id in ipairs(v.solts) do
				if rune_id ~= 0 and currRunes[math.abs(rune_id)] then
					count = count + 1
				else
					break
				end
			end
		end
		if count == 6 then
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(997, i3k_db_under_wear_rune_lang[langId].runeLangName))
			return true
		end
	end

	return false
end

--获取内甲信息
function i3k_game_context:getUnderWearData()
	return self._curArmor,self._allArmorsData ,self._curResetTalentTimes,self._runeBag ,self._hideEffect, self._castIngots
end
--获取内甲符语铸锭等级
function i3k_game_context:getFuYuZhudingData()
	return self._castIngots
end
function i3k_game_context:getFuYuZhuDingLevel(id)
	return self._castIngots[id] and self._castIngots[id].level or 0
end
function i3k_game_context:setFuYuZhudingData(runeID, exp, level)
	self._castIngots[runeID] = self._castIngots[runeID] and self._castIngots[runeID] or {}
	self._castIngots[runeID].exp = exp
	self._castIngots[runeID].level = level
end

--获取是否屏蔽了自己的内甲特效
function i3k_game_context:getArmorHideEffect( )
	return self._hideEffect == 1
end

--获取是否显示自己的特效
function i3k_game_context:getIsShowArmor(  )
	return not( self:GetUserCfg():GetIsHideAllArmorEffect() or self:getArmorHideEffect())
end

--设置内甲祝福值
function i3k_game_context:setArmorWishPoint(id ,rank,ok)
	if ok ==1 then --成功即清零
		self:setAnyUnderWearAnyData(id,"wishPoint",0)
		return
	end
	local addWish  = i3k_db_under_wear_upStage[id][rank].addWish
	local wishPoint = self:getAnyUnderWearAnyData(id,"wishPoint")
	local newWishPoint = addWish+wishPoint
	self:setAnyUnderWearAnyData(id,"wishPoint",newWishPoint)
end

--设置某内甲投入总天赋点数  --投入
function i3k_game_context:setArmorUseTalentPoint(id ,talentid,Point)
	local useTalentPoint = self:getAnyUnderWearAnyData(id,"useTalentPoint")
	local newUseTalentPoint = Point+useTalentPoint
	self:setAnyUnderWearAnyData(id,"useTalentPoint",newUseTalentPoint)
	----
	--设置某天赋 投入个数
	local Talent = self:getAnyUnderWearAnyData(id,"talentPoint")
	local talentInputPoint =0
	if Talent and  Talent[talentid] then
		talentInputPoint = Talent[talentid]
	end
	local newUseTalentInputPoint =Point+talentInputPoint
	self._allArmorsData[id].talentPoint[talentid]= newUseTalentInputPoint
end

--设置天赋重置次数
function i3k_game_context:setResetTalentPoint(id)
	local _,_,tiems = self:getUnderWearData()
	local newTimes = tiems +1
	self:setResetTalentTimes(newTimes)
	self:setAnyUnderWearAnyData(id,"useTalentPoint",0)
	self._allArmorsData[id].talentPoint= {}

end

--设置存入符文背包 +
function i3k_game_context:setRuneBagAddData(id ,count,bool)
	if self._runeBag[id] then
		 self._runeBag[id] =  self._runeBag[id] +count
	else
		self._runeBag[id] = count
	end
	if bool then
		g_i3k_ui_mgr:PopupTipMessage("成功存入符文背包")
	end
end

--设置符文背包提取到背包 -
function i3k_game_context:setRuneBagSubData(id ,count,bool)
	if self._runeBag[id] then
		if self._runeBag[id] == count then
			self._runeBag[id] = nil
		else
			self._runeBag[id] = self._runeBag[id] - count
		end
		if bool then
			g_i3k_ui_mgr:PopupTipMessage("成功提取到背包")
		end
	end
end
--优先减绑定的
function i3k_game_context:subRuneBag(id, count)
	local hasCount = self._runeBag[id]
	if not hasCount then
		return self:setRuneBagSubData(-id, count, false)
	end
	if hasCount >= count then
		return self:setRuneBagSubData(id, count, false)
	end
	count = count - hasCount
	self:setRuneBagSubData(id, hasCount, false)
	self:setRuneBagSubData(-id, count, false)
end

--符文许愿 临时数据self._runeBagData	= {item = {} ,itemSize = 0};
function i3k_game_context:setRuneWishData()
	self._runeBagData	= {item = {} ,itemSize = 0}
	for k,v in pairs(self._runeBag) do
		self._runeBagData.item[k] = v
		self._runeBagData.itemSize = self._runeBagData.itemSize+v
	end
end

--获取符文许愿临时数据
function i3k_game_context:getRuneWishData()
	return self._runeBagData.itemSize,self._runeBagData.item
end

function i3k_game_context:setRuneWishChangeData(id ,count,up)

	if up then --装上 --数据减少
		if self._runeBagData.item[id] == count then
			self._runeBagData.item[id] = nil
		else
			self._runeBagData.item[id] = self._runeBagData.item[id] - count
		end
		self._runeBagData.itemSize = self._runeBagData.itemSize -count
	else --卸下 数据加
		if self._runeBagData.item[id] then
			self._runeBagData.item[id] =  self._runeBagData.item[id] +count
		else
			self._runeBagData.item[id] = count
		end
		self._runeBagData.itemSize = self._runeBagData.itemSize +count
	end
end

--获取符文背包内某符文数量
function i3k_game_context:GetRuneItemCount(id)
	local item = 0
	if self._runeBag and self._runeBag[id] then
		item = self._runeBag[id]
	end
	return item
end

--减少符文背包内某符文数量
function i3k_game_context:SetRuneItemCount(id, count)
	if self._runeBag and self._runeBag[id] then
		if count == 0 then
			self._runeBag[id] = nil
		else
			self._runeBag[id] = count
		end
	end
end
function i3k_game_context:getUpLangRuneEnough(runeId, nextLvl, items)
	local cfg = i3k_db_rune_lang_upgrade[runeId][nextLvl]
	if not cfg then
		return false
	end
	local bag = self._runeBag
	local expendNum = cfg.expendNum
	local enough = true
	for i= 1 , #items do
		local id = items[i]
		local hasCount = (bag[id] or 0) + (bag[-id] or 0)
		if hasCount< expendNum then
			enough = false
			break
		end
	end
	return enough
end

--内甲各ui是否打开统一判断
function i3k_game_context:isCanOpenUI(UIId)
	local btnOpenTab = {
		[1] = i3k_db_under_wear_alone.underWearUpStageOpenLvl,
		[2] = i3k_db_under_wear_alone.underWearTalentOpenLvl,
		[3]	= i3k_db_under_wear_alone.underWearRuneOpenLvl,
	}

	if g_i3k_game_context:GetLevel()< btnOpenTab[UIId] then
		return false,btnOpenTab[UIId]
	else
		return true	,btnOpenTab[UIId]
	end
end

--内甲一键升级jxw
function i3k_game_context:isEnoughUpArmorLevel(id)

	local lvl = g_i3k_game_context:getAnyUnderWearAnyData(id ,"level")  --获取该内甲等级
	if lvl ==0 then
		lvl =1
	end
	local now_exp = g_i3k_game_context:getAnyUnderWearAnyData(id ,"exp")    --获取该内甲经验
	local uplvl_cfg =  i3k_db_under_wear_update[id][lvl]
	if not uplvl_cfg then
		return false
	end
	local itemTab = uplvl_cfg.updateProp
	local total_exp = now_exp
	local _lvl = self:GetLevel()
	local has_least_one = false
	for i,v in ipairs(itemTab) do
		if self:GetCommonItemCanUseCount(v) > 0 then
			has_least_one = true
			break
		end
	end
	if has_least_one == false then
		return false
	end
	local up_lvl = lvl
	local need_exp = 0
	local is_ok = false     --是否升级参数1
	local is_break = false
	local last_item_count = 0
	local temp = {}
	local totalLvl =#i3k_db_under_wear_update[id]
	local items
	for k=lvl,totalLvl do
		is_ok = false
		if not i3k_db_under_wear_update[id][k+1] then
			is_notLvl = true
			break
		end
		uplvl_cfg = i3k_db_under_wear_update[id][k+1] --当前等级可用于升级的道具列表
		items = uplvl_cfg.updateProp

		need_exp = i3k_db_under_wear_update[id][k+1].needExp -- 升级需要的经验值
		local totalItem = #items
		for i,v in ipairs(items) do
			local count = self:GetCommonItemCanUseCount(v)
			if temp[v] then
				count = count - temp[v]
			end
			for j=1 ,count do
				local item_cfg = g_i3k_db.i3k_db_get_common_item_cfg(v)
				total_exp = item_cfg.args1 + total_exp--现在所拥有的全部的经验
				if total_exp>= need_exp then
					k = k+1
					up_lvl = k
					total_exp = total_exp -need_exp
					is_ok = true
					last_item_count = j
					break
				end
			end
			if is_ok then
				if temp[v] then
					temp[v] = temp[v]+ last_item_count
				else
					temp[v] = last_item_count
				end
				break
			else
				if i== totalItem then
					is_break = true
				end
				if temp[v] then
					temp[v] = temp[v]+ count
				else
					temp[v] = count
				end
			end

		end
		if is_break then
			break
		end
	end

	local compare_lvl = {isUpLvl= false,before_lvl=0}
	if up_lvl ~= lvl then
		compare_lvl.isUpLvl = true
		compare_lvl.before_lvl = lvl
	end
	local need_items = {}
	for k, v in pairs(temp) do
		if v~=0 then
			if self:GetCommonItemCount(k) >= v then
				need_items[k] = v
			else
				if self:GetCommonItemCount(k) > 0 then
					need_items[k] = self:GetCommonItemCount(k)
				end
				need_items[-k] = v - self:GetCommonItemCount(k)
			end
		end
 	end
	if not next(need_items) then
		return false
	end
	return need_items, up_lvl, total_exp, compare_lvl
end

function i3k_game_context:GetRoleArmorValue()
	local hero = i3k_game_get_player_hero()
	local curValue = hero:GetPropertyValue(ePropID_armorCurValue)
	local maxValue = hero:GetPropertyValue(ePropID_armorMaxValue)
	return curValue, maxValue
end
--计算解锁内甲符文属性战力
function i3k_game_context:getArmorFuWenPower()
	local curWearID, allWearData = g_i3k_game_context:getUnderWearData()
	local info = allWearData[curWearID]
	--铸锭属性
	local zhuDingData = g_i3k_game_context:getFuYuZhudingData()
	local power = 0
	local property = {}
	local addProp = function(id, value)
		if property[id] then
			property[id] = value + property[id]
		else
			property[id] = value
		end
	end

	if info and info.unlocked ~= 0 then  --只计算已解锁的内甲
			--符文属性
			local r_cfg = i3k_db_under_wear_rune
			for _,v in ipairs(info.soltGroupData) do
				for _,rune_id in ipairs(v.solts) do
					if rune_id ~= 0 then
						power = power + r_cfg[math.abs(rune_id)].addPower
					end
				end
				local rune_word_id = g_i3k_db.i3k_db_get_rune_word(v.solts)
				if rune_word_id~=0 then
					local attr = g_i3k_db.i3k_db_get_rune_lang_attr(rune_word_id, self:getRuneLangLevel(rune_word_id))
					for i=1, #attr do
						if attr[i].id~=0 then
							addProp(attr[i].id, attr[i].value)
					end
				end
				--铸锭属性
				if zhuDingData[rune_word_id] and zhuDingData[rune_word_id].level > 0 then
					for i,v in ipairs(i3k_db_rune_zhuDing[rune_word_id][zhuDingData[rune_word_id].level].attribute) do
						if v.id ~= 0 then
							addProp(v.id, v.value)
						end
					end
				end
			end
		end
	end
	return g_i3k_db.i3k_db_get_battle_power(property,true) + power
end
--计算单个内甲的战力
function i3k_game_context:getArmorFightPower(info)
	local id = info.id
	local stage = info.rank
	local level = info.level
	local updateCfg = i3k_db_under_wear_update[id][level]
	local upStageCfg = i3k_db_under_wear_upStage[id][stage]
	local property = {}
	local addProp = function(id, value)
		if property[id] then
			property[id] = value + property[id]
		else
			property[id] = value
		end
	end
	--锻造增加的属性
	for i = 1, 4 do
		local attrId = upStageCfg["attrId"..i]
		local attrValue = upStageCfg["attrValue"..i]
		if attrId > 0 then
			addProp(attrId, attrValue)
		end
	end

	--升级属性*锻造提升百分比
	for i = 1, 10 do
		local attrId = updateCfg["attrId"..i]
		local attrValue = updateCfg["attrValue"..i]*(upStageCfg["attrUpPro"]/10000 + 1)  --百分比除以10000
		if attrId > 0 then
			addProp(attrId, attrValue)
		end
	end

	--天赋属性
	local otherPower = 0
	for i,v in pairs(info.talentPoint) do
		local talentCfg = i3k_db_under_wear_upTalent[id][i]
		if talentCfg.talentEffectType == 1 then
			otherPower = otherPower + talentCfg.addPowerNums[v]
		end
	end
	--符文属性
	local r_cfg = i3k_db_under_wear_rune
	for _,v in ipairs(info.soltGroupData) do
		for _,rune_id in ipairs(v.solts) do
			if rune_id ~= 0 then
				otherPower = otherPower + r_cfg[math.abs(rune_id)].addPower
			end
		end
		local rune_word_id = g_i3k_db.i3k_db_get_rune_word(v.solts)
		if rune_word_id~=0 then
			local attr = g_i3k_db.i3k_db_get_rune_lang_attr(rune_word_id, self:getRuneLangLevel(rune_word_id))
			for i=1, #attr do
				if attr[i].id~=0 then
					addProp(attr[i].id, attr[i].value)
				end
			end
			--符文之语铸锭属性
			local level = g_i3k_game_context:getFuYuZhuDingLevel(rune_word_id)
			if level > 0 then
				local attr2 = i3k_db_rune_zhuDing[rune_word_id][level].attribute
				for i,v in ipairs(attr2) do
					if v.id ~= 0 then
						addProp(v.id, v.value)
					end
				end
			end
		end
	end

	return g_i3k_db.i3k_db_get_battle_power(property,true) + otherPower  --内甲总属性换算战力 + 天赋战力
end

-------------------------------------------------------------------
--结婚系统start
--记录进入结婚系统的入口处
function i3k_game_context:setEnterProNum(num)
	--1 代表从ncp说明出进入 2 代表从姻缘出进入 -- 从npc第一个按钮处进入
	self.marryEnterPro = num
end

--获取进入结婚系统的入口处
function i3k_game_context:getEnterProNum()
	return self.marryEnterPro
end

--点击姻缘按钮 记录结婚数据
function i3k_game_context:setMarryData(data, lastTransformTime)
	self:SetMarriageId(data.marriageId)
	self.marry.marriageType = data.marriageType --1   --婚礼级别
	self.marry.marriageExp = data.marriageExp   --0  --姻缘值
	self.marry.marriageLevel = data.marriageLevel --1  --姻缘等级   --根据姻缘值计算？？？
	self.marry.marriageSkill = data.marriageSkill --[]   --姻缘技能 [1]={skillUpTimes = 0,skillLevel = 1,skillId = 1}
	self.marry.marriageTime = data.marriageTime --1474455864 --结婚时间
	self.marry.marriageStep = data.marriageStep --0		--结婚步骤
	self.marry.marriageRole = data.marriageRole --[]    --结婚对象
	self.marry.marriageTask = data.marriageTask--[id1 value]  --结婚任务
	self.marry.marriageAchieve = data.marriageAchieve --姻缘成就
	self.marry.marriageReward = data.marriageReward --姻缘成就累积奖励
	if data.marriageAchieve then
		self.marry.marriageAchieve.tasks[4] = data.marriageSkill[i3k_db_marry_achievement[4][1].args].skillLevel
		self.marry.marriageAchieve.tasks[3] = data.marriageLevel
	end
	self.marry.lastTransformTime = lastTransformTime
end

function i3k_game_context:setMarryType(marriageType)
	self.marry.marriageType = marriageType
end

function i3k_game_context:getMarryType()
	return self.marry.marriageType
end

function i3k_game_context:setMarryTransFromTime(lastTransformTime)
	self.marry.lastTransformTime = lastTransformTime
end

function i3k_game_context:getMarryTransFromTime()
	return self.marry.lastTransformTime
end

--保存结婚对象数据
function i3k_game_context:setMarryRoleId(id)
	self.marriageRoleId = id
end

function i3k_game_context:getMarryRoleId()
	return self.marriageRoleId
end

function i3k_game_context:setMarryRoleName(name)
	self.marriageRoleName = name
end

function i3k_game_context:getMarryRoleName()
	return self.marriageRoleName
end

function i3k_game_context:GetMarryLevel()
	return self.marry.marriageLevel
end

function i3k_game_context:setDivorcTime(time)
	self.divorcTime = time
end

function i3k_game_context:SetMarriageId(marriageId)
	self.marriageId = marriageId
end

function i3k_game_context:GetMarriageId()
	return self.marriageId
end

function i3k_game_context:cleanMarryReserveData()
	for i=#self.marry.reserveData, 1, -1 do
		table.remove(self.marry.reserveData, i)
	end
end

--预约婚礼数据
function i3k_game_context:setMarryReserveData(reserveData)
	table.insert(self.marry.reserveData, reserveData)
end

function i3k_game_context:getMarryReserveData()
	return self.marry.reserveData
end

function i3k_game_context:setMarryTimeIndex(timeIndex)
	self.marry.timeIndex = timeIndex
end

function i3k_game_context:getMarryTimeIndex()
	return self.marry.timeIndex
end

--判断当前是否处于预约时间
function i3k_game_context:GetNowCanMarry()
	local canMarry = false
	if self.marryStep == 1 and self.marry.timeIndex ~= 0 and self.marry.isReserveCue then
		for i, e in ipairs(i3k_db_marry_reserve) do
			if self.marry.timeIndex == i then
				local serverTime = i3k_integer(i3k_game_get_time())
				local nowM = os.date("%M", g_i3k_get_GMTtime(serverTime))
				local nowH = os.date("%H", g_i3k_get_GMTtime(serverTime))
				local time = string.split(e.marryTime, ";")
				local needTime1 = string.split(time[1], ":")
				local needTime2 = string.split(time[2], ":")
				if tonumber(needTime1[1]) < tonumber(nowH) and tonumber(needTime2[1]) > tonumber(nowH)then
					canMarry = true
				elseif tonumber(needTime2[1]) == tonumber(nowH) and tonumber(needTime2[2]) > tonumber(nowM) then
					canMarry = true
				elseif tonumber(needTime1[1]) == tonumber(nowH) and tonumber(needTime1[2]) < tonumber(nowM) then
					canMarry = true
				end
			end
		end
	end
	return canMarry
end

function i3k_game_context:SetMarryReserveCueState(state)
	self.marry.isReserveCue = state
end

--保存婚姻单项数据
function i3k_game_context:setMarryEveryData(types, data)
	self.marry[types] = data
end

--获取婚姻单项数据
function i3k_game_context:getMarryEveryData(types)
	return self.marry[types]
end

--判断是否为队长
function i3k_game_context:getLeaderToHandle()

	local myTeamLeader = g_i3k_game_context:GetTeamLeader()
	local myId= g_i3k_game_context:GetRoleId()
	return myTeamLeader ==myId
end

--记录当前执行到哪一步
function i3k_game_context:setRecordSteps(index)
	if index ==1 then
		local other = g_i3k_game_context:GetTeamOtherMembersProfile() --除了自己以外的其他人
		local otherUesrId
		if next(other) then
			otherUesrId = other[1].overview.id
			self:setMarryRoleId(otherUesrId)
		end
	end
	self.marryStep =index
end

function i3k_game_context:getRecordSteps()
	return self.marryStep
end

--记录结婚时间戳
function i3k_game_context:setRecordMarryTime(time)
	self.marryTime=time
end

function i3k_game_context:getRecordMarryTime()
	return self.marryTime
end

--超过结婚时长 不再开放游街 宴席等界面功能
function i3k_game_context:selectEnderModel()
	local MarryTimes =self:getRecordMarryTime()
	local curtime = math.modf(i3k_game_get_time())
	if self:getRecordSteps() ~=0 and  self:getRecordSteps() ~=-1 then
		if curtime -MarryTimes >i3k_db_marry_rules.marryDuration and MarryTimes~=0 then
			g_i3k_game_context:setRecordSteps(0)
		end
	end
end

--结婚升级技能后计算
function i3k_game_context:setMarrySkillsUpgradeData(skillid,skillsLevel,times)
	--根据次数
	local level = self.marry.marriageSkill[skillid].skillLevel
	local time = self.marry.marriageSkill[skillid].skillUpTimes
	--self.marry.marriageSkill = data.marriageSkill --[]   --姻缘技能 [1]={skillUpTimes = 0,skillLevel = 1,skillId = 1}
	local num = 0
	for i ,v in ipairs(i3k_db_marry_skills[skillid])  do
		if i<=level then
			num = num +v.skillsUpgradeNeedTimes
		end
	end
	local lastNum = num+time --身为level时 所持有的全部投入次数

	local totalNum = lastNum + times   ----身为skillsLevel时 现在一共投入的次数
	local newNum = 0
	for i ,v in ipairs(i3k_db_marry_skills[skillid])  do
		if i<=skillsLevel then
			newNum = newNum +v.skillsUpgradeNeedTimes  --身为skillsLevel时 skillsLevel以前所全部投入次数
		end
	end
	local upTimes = totalNum - newNum  --身为skillsLevel时 剩余投入次数

	----------------开始计算
	self.marry.marriageSkill[skillid].skillLevel = skillsLevel
	self.marry.marriageSkill[skillid].skillUpTimes = upTimes

	local needUseMoneyNum = i3k_db_marry_rules.everyTimeUseMoney  * times
	self:UseMoney(needUseMoneyNum, false,AT_MARRIAGE_SKILL_LEVEL_UP)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Marry_Marryed_skills, "initSkillsIcon" )
 	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Marry_Marryed_skills, "showSkillsDetails" ,skillid)
end

function i3k_game_context:marryTitleRed()
	if self.marriageRoleId == 0 then
		return false
	end

	local hadTitle = self:GetAllRoleTitle()
	local marryTime = self:getRecordMarryTime()
	local nowTime = i3k_game_get_time()
	for _, v in ipairs(i3k_db_marry_title) do
		if nowTime >= marryTime + v.time and not hadTitle[v.id] then
			return true
		end
	end
	return false
end

function i3k_game_context:gotoYueLaoNpc()
	--但前在月老处不需要处理
	--寻路到月老
	--if g_i3k_game_context:getEnterProNum() == 1 then
	--	g_i3k_ui_mgr:PopupTipMessage("当前即为月老所在处，无须传送")
	--	return
	--end
	self:GotoNpc(i3k_db_marry_rules.marryYueLaoId, function( )
		self:OpenNormalNpcDialogue(i3k_db_marry_rules.marryYueLaoId)
	end)
end

function i3k_game_context:GotoOpenMrgTaskNpc()
	local npcID = i3k_db_marryTaskCfg.openTasnNpc
	local pos  = g_i3k_db.i3k_db_get_npc_pos(npcID)
	local mapId = g_i3k_db.i3k_db_get_npc_map_id(npcID)
	g_i3k_game_context:SeachPathWithMap(mapId, pos, nil,nil, {flage = g_TRANSPORT_TO_NPC, mapId = mapId, areaId = npcID, pos = pos},nil,nil,
			function( )
				self:OpenNormalNpcDialogue(npcID)
			end
		)
end

--判断两个人是否为夫妻
function i3k_game_context:checkIsLover(otherId)
	local otherInfo = self.marry.marriageRole
	local othersID =  self:getMarryRoleId()
	if next(otherInfo) then
		if otherInfo.id and otherInfo.id == otherId then
			return true
		else
			return false
		end
	elseif othersID and othersID == otherId then
		return true
	else
		return false
	end
end

--姻缘值计算
--根据接取玩家等级选取。
--实际获得的姻缘值=任务奖励姻缘值×当前姻缘等级系数+当前姻缘等级固定值，其中等级系数和姻缘等级固定值为特殊表单中设定。
function i3k_game_context:setMarriageExp(bean)
	--当前姻缘等级固定值
	self.marry.marriageLevel = bean.level or self.marry.marriageLevel --1  --姻缘等级   --根据姻缘值计算？？
	--local  fixedValue =
	-- local cfg = i3k_db_marry_attribute
	-- local marryData = self.marry
	-- local mrgLvl = marryData.marriageLevel
	-- marryData.marriageExp = marryData.marriageExp + cfg[mrgLvl].lvlLoverValue + rewardCount

	-- for i = mrgLvl+1 , #cfg do
	-- 	if marryData.marriageExp >= cfg[i].marriageValues then
	-- 		mrgLvl = mrgLvl + 1
	-- 	else
	-- 		break
	-- 	end
	-- end
	-- marryData.marriageLevel = mrgLvl
	local hero = i3k_game_get_player_hero()
	if hero then
		g_i3k_game_context:SetPrePower()
		hero:UpdateMarryProps()
		g_i3k_game_context:ShowPowerChange()
	end
end
--结婚系统end
-------------------------------------------------------------------
function i3k_game_context:getMapNameImgIDs()
	local mapId = self:GetWorldMapID()
	return i3k_db_dungeon_base[mapId].nameImgID
end

function i3k_game_context:TestNilShowState()
	return true,false
end

function i3k_game_context:TestStoreShowState()
	return true,false
end

function i3k_game_context:OnStoreShowStateChangedHandler(iconShow, redShow)  --商城
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 3,iconShow,redShow)
end

function i3k_game_context:TestBagShowState()
	local isShow = g_i3k_game_context:bagPointForLongYin() or
		g_i3k_game_context:GetLongYinRedpoint() or
		g_i3k_game_context:GetLongYinRedpoint2() or
		g_i3k_game_context:getFashionRedPoint() or g_i3k_game_context:heirloomRedPoint() or g_i3k_game_context:getMetamorphosisRedPoint()
	return true, isShow, self:GetBagIsFull()
end

function i3k_game_context:OnBagShowStateChangedHandler(iconShow, redShow, isFull)   --背包
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 2, iconShow, redShow, isFull)
end

function i3k_game_context:TestFuLiShowState()
	return true, self:testNotice(g_NOTICE_TEST_BENEFIT)
end

function i3k_game_context:TestWorldCupShowState(  )
	return  self._notice[g_NOTICE_TYPE_CAN_WORLD_CUP]
end

function i3k_game_context:OnFuLiShowStateChangedHandler(iconShow, redShow)   --福利(移动到了充值，id改为7)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 5,iconShow,redShow)
end

function i3k_game_context:TestEmailShowState()
	return true, self:testNotice(g_NOTICE_TYPE_CAN_RECEIVE_NEW_MAIL)
end

function i3k_game_context:OnEmailShowStateChangedHandler(iconShow, redShow)  --邮件
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 4,iconShow,redShow)
end

function i3k_game_context:OnGroupBuyShowStateChangedHandler(iconShow, redShow)   --限时团购
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 12,iconShow,redShow)
end

function i3k_game_context:OnFlashsaleShowStateChangedHandler(iconShow, redShow)   --限时特卖
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 13,iconShow,redShow)
end

function i3k_game_context:OnFightNpcStateChangedHandler(iconShow, redShow) --约战NPC
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 16, iconShow, redShow)
end

function i3k_game_context:OnFiveEndActiveStateChangedHandler(iconShow, redShow) --五绝秘藏
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", g_NOTICE_TYPE_FIVE_END_ACT, iconShow, redShow)
end

function i3k_game_context:TestScheduleShowState()
	local iconShow,redShow = false,false
	local havedDailyTasks = false
	local haveWeekTasks = false
	local heroLvl = self:GetLevel()
	local marryFlag = (self:getRecordSteps() ~= -1) and 1 or 0
	if heroLvl >= i3k_db_common.schedule.openLvl then
		havedDailyTasks= g_i3k_game_context:testNotice(g_NOTICE_TYPE_CAN_REWARD_DAILY_TASK)
		haveWeekTasks = g_i3k_game_context:testNotice(g_NOTICE_TYPE_CAN_REWARD_WEEK_TASK)
		iconShow = true
		if self._scheduleInfo then
			local  canReward = false
			for k,v in ipairs(i3k_db_schedule.actRewards) do
				if self._scheduleInfo.activity >= v.actValue and not self._scheduleInfo.rewards[k] then
					canReward = true
					break
				end
			end
			if canReward then
				redShow = true
			else
				local totalDay = g_i3k_get_day(i3k_game_get_time())
				local week = math.mod(g_i3k_get_week(totalDay), 7)
				for _,v in ipairs(i3k_db_schedule.cfg) do
					if heroLvl >= v.lvlLimit and v.groupID == 2 and marryFlag >= v.marryFlag then
						if week == 1 then
							table.sort( v.actDay, function (a,b)
								return a < b
							end )
						end
						for _,e in ipairs(v.actDay) do
							if e == week or (e + 1 == week) or (e == 6 and week == 0) then
								local checkFlag = self:CheckScheduleTime(v.actTime,e,week)
								if checkFlag then
									v.canEnterTimes = v.canActNum
									if v.typeNum == g_SCHEDULE_TYPE_ACT then
										v.finishTimes = self:getActivityDayEnterTime(v.mapID) and self:getActivityDayEnterTime(v.mapID) or 0
										v.canEnterTimes = v.canEnterTimes + self:getActDayBuyTimes(v.mapID)
									elseif v.typeNum == g_SCHEDULE_TYPE_GROUP or v.typeNum == g_SCHEDULE_TYPE_COMMON or v.typeNum == g_SCHEDULE_TYPE_HARD then
										v.finishTimes = self:getDungeonDayEnterTimes(v.mapID)
										v.canEnterTimes = v.canEnterTimes + self:GetNormalMapDayBuyTimes(v.mapID)
									else
										v.finishTimes = self._scheduleInfo.task2num[v.typeNum * 65536 + v.mapID] or 0
									end
									if v.finishTimes < v.canEnterTimes or v.canEnterTimes == -1 then
										redShow = true
										break
									end
								end
							end
						end
					end
				end
			end
		end
	end
	return iconShow, redShow or havedDailyTasks or haveWeekTasks
end

function i3k_game_context:CheckScheduleTime( timeStr, cfgDay, day )
	-- body
	local timeNow = i3k_game_get_time()
	local dateTab = os.date("*t",i3k_game_get_time() - 8 * 60 * 60)
	local todaySec = dateTab.hour * 60 * 60 + dateTab.min * 60 + dateTab.sec

	local checkFlag = false
	if timeStr == "-1.0" then
		if cfgDay == day  and todaySec >= (5 * 60 * 60) then
			checkFlag = true
		elseif (cfgDay + 1 == day or (cfgDay == 6 and day == 0)) and ( todaySec < 5 * 60 * 60) then
			checkFlag = true
		end
	else
		local timeStrTab = string.split(timeStr,";")
		for i=1,#timeStrTab,2 do
			local startTimeNumTab = string.split(timeStrTab[i], ":")
			local endTimeNumTab = string.split(timeStrTab[i+1], ":")
			local startSec = tonumber(startTimeNumTab[1]) * 60 * 60 + tonumber(startTimeNumTab[2]) * 60 + tonumber(startTimeNumTab[3])
			local endSec = tonumber(endTimeNumTab[1]) * 60 * 60 + tonumber(endTimeNumTab[2]) * 60 + tonumber(endTimeNumTab[3])
			if cfgDay == day and startSec <= todaySec and ( startSec >= endSec or todaySec < endSec) then
				checkFlag = true
				break
			elseif (cfgDay + 1 == day or (cfgDay == 6 and day == 0)) and (startSec >= endSec and todaySec < endSec) then
				checkFlag = true
				break
			end
		end
	end
	return checkFlag
end

function i3k_game_context:SetScheduleInfo(info)
	self._scheduleInfo = info
	self:setChessTaskFinishTimes(info.task2num[g_SCHEDULE_TYPE_CHESS_TASK * 65536 + 60053])
end

function i3k_game_context:GetScheduleInfo()
	return self._scheduleInfo or {}
end

function i3k_game_context:GetScheduleActivity()
	return self._scheduleInfo and self._scheduleInfo.activity or 0
end
function i3k_game_context:ChangeScheduleActivity(typeNum, mapID, count) -- 配置表中的index
	local cfg = i3k_db_schedule.cfg
	local times = count or 1
	for _,v in ipairs(cfg) do
		if v.typeNum == typeNum and v.mapID == mapID then
			local infoIndex = v.typeNum * 65536 + v.mapID
			if self._scheduleInfo then
				if self._scheduleInfo.task2num[infoIndex] then
					if self._scheduleInfo.task2num[infoIndex] < v.actNum then
						local addCount = math.min(v.actNum - self._scheduleInfo.task2num[infoIndex], times)
						self._scheduleInfo.task2num[infoIndex] = self._scheduleInfo.task2num[infoIndex] + times
						self._scheduleInfo.activity = self._scheduleInfo.activity + v.actValue * addCount
						if self:isWujueOpen() then
							self:addWujueExp(g_i3k_db.i3k_db_get_wujue_active_exp(self._scheduleInfo.activity - v.actValue * addCount, self._scheduleInfo.activity), true)
						end
					end
				else
					local addCount = math.min(v.actNum, times)
					self._scheduleInfo.task2num[infoIndex] = times
					self._scheduleInfo.activity = self._scheduleInfo.activity + v.actValue * addCount
					if self:isWujueOpen() then
						self:addWujueExp(g_i3k_db.i3k_db_get_wujue_active_exp(self._scheduleInfo.activity - v.actValue * addCount, self._scheduleInfo.activity), true)
					end
				end
			end
		end
	end
end

function i3k_game_context:SetScheduleRewards( rewardID )
	if self._scheduleInfo then
		self._scheduleInfo.rewards[rewardID] = true
		self:OnScheduleTimerTest()
	end
end

function i3k_game_context:OnScheduleShowStateChangedHandler(iconShow, redShow)   --日程表
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 9,iconShow,redShow)
end

function i3k_game_context:TestFengCeShowState()
	local id, value = self:getMainTaskIdAndVlaue()
	local openDay = i3k_game_get_server_open_day()
	local nowDay = g_i3k_get_day(i3k_game_get_time())
	local dayIndex = nowDay - openDay + 1
	local isShow = self:getIsShowFengceBtn()
	local isShowRoot = id>=i3k_db_fengce.baseData.taskId+1 and dayIndex<=#i3k_db_fengce.juxian and self:GetLevel()>=i3k_db_fengce.baseData.needLvl --and isShow

	local isShowRed = false
	if isShowRoot then
		for i=1, #i3k_db_fengce_name do
			if self._fengceRedCache[i] then
				isShowRed = true
				break
			end
		end
	end

	return isShowRoot, isShowRed
end

function i3k_game_context:OnScheduleTimerTest()
	local iconShow,redShow = self:TestScheduleShowState()
	self:OnScheduleShowStateChangedHandler(iconShow,redShow)
end

function i3k_game_context:OnFengCeShowStateChangedHandler(iconShow, redShow)   --封测
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 8,iconShow,redShow)
end

function i3k_game_context:TestFirstPayShowState()
	return self._isFirstPay, self:GetNoticeState(g_NOTICE_TYPE_CAN_REWARD_FIRST_PAYGIFT)
end

function i3k_game_context:OnFirstPayShowStateChangedHandler(iconShow, redShow)    --首冲
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 6,iconShow,redShow)
end

function i3k_game_context:TestPayShowState()
	local iconShow
	if self._isFirstPay then
		iconShow = false
	else
		iconShow = true
	end
	local redPoint = self:testNotice(g_NOTICE_TYPE_CAN_PAY_ACTIVITY)
	return iconShow, redPoint or self:getSpecialCardRedPoint()
end

function i3k_game_context:OnPayShowStateChangedHandler(iconShow, redShow)    --新的充值入口  与首充互斥
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 7,iconShow,redShow)
end



function i3k_game_context:TestKeJuShowState()
	return false, false
end

function i3k_game_context:TestRewardTestState()
	return self:GetNoticeState(g_NOTICE_TYPE_CAN_REWARD_TEST), true -- 有图标即有红点self:GetNoticeState(g_NOTICE_TYPE_CAN_REWARD_TEST)
end



function i3k_game_context:TestStrengthenSelfShowState(inProfile)
	local iconShow,redShow = false,false
	local heroLvl = self:GetLevel()
	if inProfile then
		if heroLvl >= i3k_db_want_improve_otherRules.improveBtnShowLevel then
			iconShow = true
		end
	else
		if heroLvl >= i3k_db_want_improve_otherRules.improveBtnShowLevel and heroLvl < i3k_db_want_improve_otherRules.improveBtnHideLevel then
			iconShow = true
		end
	end
	return iconShow, redShow
end

function i3k_game_context:TestGroupBuyState()
	local iconShow,redShow = false,false
	if self._notice[g_NOTICE_TYPE_CAN_GROUPBUY_RED] then
		redShow =  true
	else
		redShow = false
	end

	if self._notice[g_NOTICE_TYPE_CAN_GROUPBUY] then
		iconShow =  true
	else
		iconShow = false
	end
	return iconShow, redShow
end

function i3k_game_context:TestFlashSaleState()
	local iconShow,redShow = false,false
	if self._notice[g_NOTICE_TYPE_CAN_FALSHSALE_RED] then
		redShow =  true
	else
		redShow = false
	end

	if self._notice[g_NOTICE_TYPE_CAN_FALSHSALE] then
		iconShow =  true
	else
		iconShow = false
	end
	return iconShow, redShow
end

function i3k_game_context:TestGoodLuckState()
	local iconShow,redShow = false,false
	redShow =  true
	if self._notice[g_NOTICE_TYPE_CAN_LUCK] then
		iconShow =  true
	else
		iconShow = false
	end
	return iconShow, redShow
end
function i3k_game_context:TestGoodLuckStateNew()
	if self._notice[g_NOTICE_TYPE_LOTTERY] then
		iconShow =  true
	else
		iconShow = false
	end
	return iconShow, false
end

function i3k_game_context:TestGoldenEggState()
	local iconShow,redShow = false,false
	redShow =  false
	if self._notice[g_NOTICE_TYPE_GOLDEN_EGG] then
		iconShow =  true
	else
		iconShow = false
	end
	return iconShow, redShow
end

function i3k_game_context:TestSpringRoll()
	local lvl = self:GetLevel()
	return self:checkSpringRollOpen() and lvl >= i3k_db_spring_roll.baseConfig.openLevel
end

function i3k_game_context:OnTestStrengthenSelf()
	local iconShow,redShow = self:TestStrengthenSelfShowState()
	self:OnStrengthenSelfStateChangedHandler(iconShow, redShow)
end

function i3k_game_context:OnStrengthenSelfStateChangedHandler(iconShow, redShow)    --我要变强(nothing for the time being )
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 10,iconShow,redShow)
end

-- 老虎机(12亿回馈)  保存一下id
function i3k_game_context:setOneArmBanditIDType(id, type)
	self._oneArmBanditID = id
	self._oneArmBanditType = type
end
function i3k_game_context:getOneArmBanditIDType()
	return self._oneArmBanditID, self._oneArmBanditType
end

function i3k_game_context:setOneArmBanditRedPoint(bValue)
	self._oneArmBanditRedPoint = bValue
end
function i3k_game_context:getOneArmBanditRedPoint()
	return self._oneArmBanditRedPoint
end



--世界BOSS伤害主界面数据
function i3k_game_context:SyncBossDamageData(datas, bossId, selfDamage)
	self._bossFightId = bossId
	self._bossDamageData = datas
	self._bossSelfDamage = selfDamage
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBoss, "updateDamageData", datas, bossId, selfDamage)
end

function i3k_game_context:ClearBossDamageData()
	self._bossDamageData = {}
	self._bossSelfDamage = nil
end

function i3k_game_context:GetBossDamageData()
	return self._bossDamageData, self._bossFightId, self._bossSelfDamage
end

function i3k_game_context:ShowBossDamageBtn(bValue)
	if bValue == self._isShowBossDamageBtn then
		return
	end
	self._isShowBossDamageBtn = bValue
	if bValue then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "showBossBtn")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTeam, "showBossBtn")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBoss, "showBossBtn")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_DemonHolesummary, "showBossBtn")
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "hideBossBtn")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTeam, "hideBossBtn")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBoss, "hideBossBtn")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_DemonHolesummary, "hideBossBtn")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
	end
end

function i3k_game_context:getIsShowBossDamageBtn()
	return self._isShowBossDamageBtn
end

function i3k_game_context:GetIconIsHide()
	return self._iconIsHide
end

function i3k_game_context:SetIconIsHide(isTrue)
	self._iconIsHide = isTrue
end

function i3k_game_context:GetPingTaskID()
	return self._ping_task.id;
end

function i3k_game_context:NewPingTask()
	local task = { id = self._ping_task.id, clock = os.clock() };
	self._ping_task.tasks[self._ping_task.id] = task;
	self._ping_task.id = (self._ping_task.id + 1) % 99999;

	--i3k_log("new ping task id = " .. self._ping_task.id .. " clock = " .. self._ping_task.tasks[self._ping_task.id - 1].clock);

	return task;
end

local ping_pool = { idx = 1, tbl = { } };
function ping_pool:push(p)
	self.tbl[self.idx] = p;

	self.idx = self.idx + 1;
	if self.idx > 10 then
		self.idx = 1;
	end

	local ping = 0;
	for k, v in ipairs(self.tbl) do
		ping = ping + v;
	end

	return i3k_integer(ping / #self.tbl);
end

function ping_pool:reset()
	self.idx = 0;
	self.tbl = { };
end

function i3k_game_context:UpdatePingTask(pid)
	local ping = 0;

	local task = self._ping_task.tasks[pid];
	if task then
		ping = ping_pool:push(i3k_integer((os.clock() - task.clock) * 500));

		--i3k_log("update ping task ping = " .. ping);

		if ping > 0 then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updatePingInfo", ping);
		end
		i3k_game_set_server_ping(ping);

		if ping > 1000 then
			if not self:IsInPingMode() then
				self:AddPingtick();
			else
				g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(499));
			end
		else
			if not self:IsInPingMode() then
				self:ClearPingticks();
			else
				self:ClearPingStatus();
			end
		end
	end

	self._ping_task.tasks[pid] = nil;

	return ping;
end

------------------------------------
-- 推送消息
function i3k_game_context:getPushServiceData()
	local db = i3k_db_push_service
	local cfg = g_i3k_game_context:GetUserCfg()
	local t = cfg:GetBanPushServices()
	local data = {}
	for i,v in ipairs(db) do
		if not self:vectorContain(t, i) then
			table.insert(data, db[i])
		end
	end
	local jsonString = JSON4LUA.encode(data)
	return jsonString
end

function i3k_game_context:getDayString(days)
	if #days == 7 then
		return "每天"
	else
		local result = ""
		for i,v in ipairs(days) do
			result = result .. g_week_days[v]
			if i ~= #days then
				result = result .. "、"
			end
		end
		return result
	end
end

function i3k_game_context:getDayTableByInt32(iValue)
	local times = 0
	local result = {}
	while(iValue ~= 0) do
		if iValue % 2 == 1 then
			table.insert(result, times)
		end
		iValue = math.modf(iValue / 2)
		times = times + 1
	end
	table.sort(result, function(a,b) return a < b end)
	if result[1] == 0 then
		table.remove(result, 1)
		table.insert(result, 0)
	end
	return result
end

function i3k_game_context:vectorContain(list, iValue)
	for i=1, #list do
		if list[i] == iValue then
			return true
		end
	end
	return false
end

function i3k_game_context:removeDuplicate(list)
	local res = {}
	for k, v in ipairs(list) do
		if not self:vectorContain(res, v) then
			table.insert(res, v)
		end
	end
	return res
end

-- 遍历当前的禁用列表，将新加的类型冲突的，也放到禁用列表中
function i3k_game_context:getInitNeedBanServices()
	local cfg = g_i3k_game_context:GetUserCfg()
	local list = cfg:GetBanPushServices()
	local temp = {} -- 保存类型的map，已经出现的类型加到这个表里
	for i, v in ipairs(i3k_db_push_service) do
		-- 如果不在ban表里，也不在temp中，那么加入到temp里面
		if not temp[v.type] and not self:vectorContain(list, i) then
			temp[v.type] = true
		elseif temp[v.type] and not self:vectorContain(list, i) then
			table.insert(list, i)
		end
	end
	list = self:removeDuplicate(list)
	cfg:SetBanPushServices(list)

	-- 通知到android/ios层
	local data = g_i3k_game_context:getPushServiceData()
    g_i3k_game_handler:SetPushServiceData(data)
end

-- 获取相同类型的其它推送活动的id  default: return {}
function i3k_game_context:getPushServiceSameTypeIDs(id)
	local db = i3k_db_push_service
	local typeID = db[id].type
	local result = {}
	for k, v in ipairs(db) do
		if v.type == typeID and k ~= id then
			table.insert(result, k)
		end
	end
	return result
end

-- 将相同类型的id加到ban表里
function i3k_game_context:getCheckPushServices(banServices, id)
	local others = self:getPushServiceSameTypeIDs(id) -- 同类型的id列表
	for k, v in ipairs(others) do
		if not self:vectorContain(banServices, v) then
			table.insert(banServices, v)
		end
	end
	return banServices
end
--------------------------------------------------------------------
--同步Npc兑换收藏
function i3k_game_context:SyncCollectExchangeInfo(collect)
	self.collectExchangeInfo = collect
	self:SortExchangeCollects()
end
--判断当前Npc兑换是否收藏
function i3k_game_context:IsExchangeCollected(npcId, exchangeId)
	return (self.collectExchangeInfo[npcId] and self.collectExchangeInfo[npcId].exchanges[exchangeId]) ~= nil
end
--设置Npc兑换收藏状态
function i3k_game_context:SetExchangeCollectState(npcId, exchangeId, state)
	if not self.collectExchangeInfo[npcId] then
		self.collectExchangeInfo[npcId] = {exchanges = {}}
	end
	self.collectExchangeInfo[npcId].exchanges[exchangeId] = state and i3k_game_get_time() or nil
	self:SortExchangeCollects()
end
function i3k_game_context:GetExchangeCollectCount()
	return self.sortedCollectExchangeInfo and #self.sortedCollectExchangeInfo or 0
end
--获取收藏的npc兑换
function i3k_game_context:SortExchangeCollects()
	local tb = {}
	for npcId, exchanges in pairs(self.collectExchangeInfo) do
		local npcCfg = i3k_db_npc[npcId]
		local haveExchangeFunc = false
		for i, v in ipairs(npcCfg and npcCfg.FunctionID or {}) do
			if v == TASK_FUNCTION_NPCEXCHANGE then
				haveExchangeFunc = true
				break
			end
		end
		if haveExchangeFunc then
			for exchangeId, time in pairs(exchanges.exchanges) do
				local have = false
				for i, v in ipairs(npcCfg.exchangeId or {}) do
					if exchangeId == v then
						have = true
					end
				end
				table.insert(tb, {npcId = npcId, exchangeId = exchangeId, time = time, valid = have})
			end
		else--npc不在了 或者 功能Id没有了 这个npc的全部无效
			for exchangeId, time in pairs(exchanges.exchanges) do
				table.insert(tb, {npcId = npcId, exchangeId = exchangeId, time = time, valid = false})
			end
		end
	end
	table.sort(tb, function(a,b) return a.time < b.time end)
	self.sortedCollectExchangeInfo = tb
end
function i3k_game_context:GetExchangeCollects()
	return self.sortedCollectExchangeInfo
end
function i3k_game_context:SyncRecordExchangeTimes(times)
	for i,v in ipairs(i3k_db_npc_exchange) do
		self.recordExchangeTimes[i] = {id = i,limit_time = 0}
	end
	for i,v in pairs(times) do
		self.recordExchangeTimes[i] = {id = i, limit_time = v}
	end
end

function i3k_game_context:SetRecordExchangeTimes(id, count)
	self.recordExchangeTimes[id].limit_time = self.recordExchangeTimes[id].limit_time + count
end

function i3k_game_context:GetRecordExchangeTimes()
	return self.recordExchangeTimes
end

function i3k_game_context:RefreshRecordExchangeTimes()
	for k,v in pairs(self.recordExchangeTimes or {}) do
		v.limit_time = 0
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_npcExchange)
end
function i3k_game_context:SetRecoardDebug(isTrue)
	self._isRecoardDebug = isTrue
end

function i3k_game_context:GetRecoardDebug()
	return self._isRecoardDebug
end

function i3k_game_context:SetCloseAllUiDebug(isTrue)
	self._isCloseAllUiDebug = isTrue
end

function i3k_game_context:GetCLoseAllUiDebug()
	return self._isCloseAllUiDebug
end

function i3k_game_context:SetMapImageContentsize(node,size)
	if g_i3k_ui_mgr:JudgeIsPad() then
		node.vars.image:setContentSize(size.width*0.75, size.height*0.75)
	else
		node.vars.image:setContentSize(size.width, size.height)
	end
end

--神兵技能升级
function i3k_game_context:SetShenBingUpSkillData(weaponId,skillId,skillLvl)
	if weaponId and skillId and skillLvl then
		if self.shenbing_upskill[weaponId] then
			self.shenbing_upskill[weaponId][skillId] = skillLvl
		else
			self.shenbing_upskill[weaponId] = {}
			self.shenbing_upskill[weaponId][skillId] = skillLvl
		end
	end
end

function i3k_game_context:GetShenBingUpSkillData()
	return self.shenbing_upskill
end

--神兵天赋
function i3k_game_context:SetShenBingTalentData(weaponId,talentId,talentPoint)
	if weaponId and talentId and talentPoint then
		if self.shenbing_talent[weaponId] then
			self.shenbing_talent[weaponId][talentId] = talentPoint
		else
			self.shenbing_talent[weaponId] = {}
			self.shenbing_talent[weaponId][talentId] = talentPoint
		end
	end
end

function i3k_game_context:SetInputShenBingTalent(weaponId,talentId)
	self.shenbing_talent[weaponId][talentId] = self.shenbing_talent[weaponId][talentId] + 1
end

function i3k_game_context:GetShenBingTalentData()
	return self.shenbing_talent
end

function i3k_game_context:SetShenBingCanUseTalentPoint(weaponId,canUseTalentPoint)
	self.canUseTalentPoint[weaponId] = canUseTalentPoint
end

function i3k_game_context:SetShenBingCanUseTalentPointIfInput(weaponId)      --投入 - 1
	self.canUseTalentPoint[weaponId] = self.canUseTalentPoint[weaponId] - 1
end

function i3k_game_context:SetShenBingCanUseTalentPointIfBuy(weaponId)
	self.canUseTalentPoint[weaponId] = self.canUseTalentPoint[weaponId] + 1  --购买 + 1
end

function i3k_game_context:GetShenBingCanUseTalentPoint(weaponId)
	if not self.canUseTalentPoint[weaponId] then
		self.canUseTalentPoint[weaponId] = 0
	end
	return self.canUseTalentPoint[weaponId]
end


--初始化神兵天赋总投入总数
function i3k_game_context:InitShenBingAllTalentPoint()
	local talentData = self:GetShenBingTalentData()
	for k,v in pairs(talentData) do
		local weaponIdPoint = 0
		for i,s in ipairs(v) do
			if not self.allPoint[k] then
				self.allPoint[k] =  s
			else
				self.allPoint[k] = self.allPoint[k] + s
			end
		end
	end
end
--合成神兵时的特殊情况--重置
function i3k_game_context:SetShenBingAllTalentPointIfHecheng(weaponId)
	self.allPoint[weaponId] = 0
end
--设置神兵天赋总投入点数
function i3k_game_context:SetShenBingAllTalentPoint(weaponId)
	self.allPoint[weaponId] = self.allPoint[weaponId] + 1
end

function i3k_game_context:GetShenBingAllTalentPoint(weaponId)
	return self.allPoint[weaponId]
end

--初始化
function i3k_game_context:SetHaveBuyShenBingTalentPoint(weaponId,Point)
	self.haveBuy[weaponId] = Point
end

--购买
function i3k_game_context:SetHaveBuyShenBingTalentPointIfBuy(weaponId)
	-- if not self.haveBuy[weaponId] then
	-- 	self.haveBuy[weaponId] = 0
	-- else
		self.haveBuy[weaponId] = self.haveBuy[weaponId] + 1
	-- end
end

function i3k_game_context:GetHaveBuyShenBingTalentPoint(weaponId)
	if not self.haveBuy[weaponId] then
		self.haveBuy[weaponId] = 0
	end
	return self.haveBuy[weaponId]
end

function i3k_game_context:IsShenBingCanInput(id)
	if not self.canUseTalentPoint[id] then
		return true
	end
	if self.canUseTalentPoint[id] > 0 then
		return true
	else
		return false
	end
end

function i3k_game_context:SetShenbingTalentRedPointRecord(weaponId,isTrue)
	self.shenbingTalentRedPoint[weaponId] = isTrue
end

function i3k_game_context:GetShenbingTalentRedPointRecord(weaponId)
	return self.shenbingTalentRedPoint[weaponId]
end

--添加神兵兵魂技能加经验数
function i3k_game_context:AddShenbingBinghunSkillExp(nums)
	self._ShenbingBinghunSkillExp = self._ShenbingBinghunSkillExp + nums
end
	
--
function i3k_game_context:GetShenbingBinghunSkillExp(nums)
	return self._ShenbingBinghunSkillExp
end

--------------神兵绝技相关----------------- aaa
function i3k_game_context:SetShenBingUniqueSkillData(shenbingId,isOpen,mastery,form) -- form是新添的神兵显示形态1默认2升级就是激活绝技
	-- if shenbingId and isOpen and mastery then
	-- 	self.uniqueSkillData[shenbingId] = {isOpen = isOpen , mastery = mastery}
	-- elseif shenbingId and isOpen and not mastery then
	-- 	self.uniqueSkillData[shenbingId].isOpen = isOpen
	-- elseif shenbingId and mastery and not isOpen then
	-- 	self.uniqueSkillData[shenbingId].mastery = mastery
	-- end
	if shenbingId then
		self.uniqueSkillData[shenbingId] = self.uniqueSkillData[shenbingId] or {}
		self.uniqueSkillData[shenbingId].isOpen = isOpen or self.uniqueSkillData[shenbingId].isOpen
		self.uniqueSkillData[shenbingId].mastery = mastery or self.uniqueSkillData[shenbingId].mastery
		self.uniqueSkillData[shenbingId].form = form or self.uniqueSkillData[shenbingId].form
	end
end

--获取神兵形态
function i3k_game_context:GetShenBingForm(shenbingId)
	if shenbingId and self.uniqueSkillData and self.uniqueSkillData[shenbingId] then
		return self.uniqueSkillData[shenbingId].form
	end
	return 1
end

function i3k_game_context:setPromptlyWead(isPromptly)
	self._isPromptlyMode = isPromptly
end

function i3k_game_context:getPromptlyWead()
	return self._isPromptlyMode;
end

function i3k_game_context:GetTotalSuperTime()
	local isOpen = self:GetShenBingUniqueSkillData(self:GetSelectWeapon())
	if isOpen == 1 then
		for _,v in pairs(i3k_db_shen_bing_unique_skill[self:GetSelectWeapon()]) do
			if v.uniqueSkillType == 14 then--立即变身
				local curparameters = v.parameters
				if self:isMaxWeaponStar(self:GetSelectWeapon()) then
					curparameters = v.manparameters
				end
				return curparameters[1];
			end
		end
	end
	return false;
end

function i3k_game_context:isPromptlySuper()
	local hero = i3k_game_get_player_hero();
	if hero then
		return hero:isCanPromptlySuper()
	end
end

function i3k_game_context:GetShenBingUniqueSkillData(shenbingId)
	if self.uniqueSkillData[shenbingId] then
		return self.uniqueSkillData[shenbingId].isOpen,self.uniqueSkillData[shenbingId].mastery,self.uniqueSkillData[shenbingId].form
	end
end
function i3k_game_context:getShenBingUniqueSkillMasteryByID(shenbingId)
	return self.uniqueSkillData[shenbingId].mastery
end
function i3k_game_context:setShenBingUniqueSkillMastery(shenbingId, mastery)
	self.uniqueSkillData[shenbingId].mastery = mastery
end

--判断神兵熟练度是否已满
function i3k_game_context:JudgeShenBingUniqueSkillMasteryIsMax(shenbingId)
	local maxMastery = i3k_db_shen_bing[shenbingId].proficinecyMax
	local isOpen,nowMastery = g_i3k_game_context:GetShenBingUniqueSkillData(shenbingId)
	if isOpen and nowMastery then
		if nowMastery < maxMastery then
			return false
		else
			return true
		end
	end
end

function i3k_game_context:GetShenBingUniqueRedPointState(shenbingId)

	local isOpen = g_i3k_game_context:GetShenBingUniqueSkillData(shenbingId)
	local judgeMastery = g_i3k_game_context:JudgeShenBingUniqueSkillMasteryIsMax(shenbingId)
	if isOpen == 0 and judgeMastery then
		return true
	else
		return false
	end
end

-- 神兵绝技数据处理
function i3k_game_context:setShenBingUniqueTrigger()
	local isOpen = self:GetShenBingUniqueSkillData(self:GetSelectWeapon())
	if isOpen == 1 then
		local hero = i3k_game_get_player_hero()
		local tids = {}
		for k,v in pairs(i3k_db_shen_bing_unique_skill[self:GetSelectWeapon()]) do
			if v.uniqueSkillType == 9 then--挂载AI触发公式神兵特技-彼岸花-濒死时回血--神兵特技-彼岸花-变身&变身结束时，满血
				local curparameters = v.parameters
				if self:isMaxWeaponStar(self:GetSelectWeapon()) then
					curparameters = v.manparameters
				end
				table.insert(tids,curparameters[1])
			elseif hero and v.uniqueSkillType == 15 then
				hero:AddWeaponTicks();
			end
		end
		local mgr = hero._triMgr;
		if mgr then
			for k,tri in pairs(hero._shenbinguniquetids) do
				mgr:UnregTrigger(tri);
			end
			hero._shenbinguniquetids = {}
			for i = 1 , #tids do
				local tcfg = i3k_db_ai_trigger[tids[i]];
				if tcfg then
					local TRI = require("logic/entity/ai/i3k_trigger");
					local tri = TRI.i3k_ai_trigger.new(hero);
					if tri:Create(tcfg, nil, tids[i]) then
						local tid = mgr:RegTrigger(tri, hero);
						table.insert(hero._shenbinguniquetids,tid)
					end
				end
			end
		end
	end
end

-- 删除彼岸花挂ai触发公式
function i3k_game_context:releaseShenBingUniqueTrigger()
	local hero = i3k_game_get_player_hero()
	local mgr = hero._triMgr;
	if mgr then
		for k,tri in pairs(hero._shenbinguniquetids) do
			mgr:UnregTrigger(tri);
		end
		hero._shenbinguniquetids = {}
	end
end

-------------------首充设置--------------------------
function i3k_game_context:SetIsFirstPay(isTrue)
	if self._isFirstPay ~= nil then
		g_i3k_game_context:OnFirstPayShowStateChangedHandler(false, false)
		g_i3k_game_context:OnPayShowStateChangedHandler(true, true)
	end
	if isTrue == 0 then
		self._isFirstPay = true
	else
		self._isFirstPay = false
	end
end

--设置打开的是否是首冲界面      aaa
function i3k_game_context:SetIsOpenFirstPayUI(isTrue)
	self._isFirstPayUI = isTrue
end

function i3k_game_context:GetIsOpenFirstPayUI()
	return self._isFirstPayUI
end

function i3k_game_context:SetPayRewards(rewards)
	self._payRewards = rewards
end

function i3k_game_context:SetPayRedStateIfPay(vipLevel)
	if self._payRewards[vipLevel] then
	else
		self._payRewards[vipLevel] = false
	end
	g_i3k_game_context:SetPayRedState()
end

function i3k_game_context:SetPayRedStateIfReward(vipLevel)
	self._payRewards[vipLevel] = true
	g_i3k_game_context:SetPayRedState()
end


function i3k_game_context:SetPayRedState()
	local vipLvl = g_i3k_game_context:GetVipLevel()
	local redShow,iconShow = false,false
	for i=1, vipLvl do
		if not self._payRewards[i] then
			redShow = true
			break
		end
	end
	if redShow then
		self._notice[g_NOTICE_TYPE_CAN_PAY] = true
	else
		self._notice[g_NOTICE_TYPE_CAN_PAY] = false
	end
end
---------------------------------------------------------------------

function i3k_game_context:setSkillPresetData(skillPreset)
	self._skillPreset = skillPreset
end

function i3k_game_context:getSkillPresetData()
	return self._skillPreset or {}
end

function i3k_game_context:setSpiritsPresetData(spiritsPreset)
	self._spiritsPreset = spiritsPreset
end

function i3k_game_context:getSpiritsPresetData()
	return self._spiritsPreset or {}
end

function i3k_game_context:setSkillPresetTime(skillTime)
	self._skillTime = skillTime
end

function i3k_game_context:getSkillPresetTime()
	return self._skillTime or 0
end

function i3k_game_context:setSpiritsPresetTime(spiritsTime)
	self._spiritsTime = spiritsTime
end

function i3k_game_context:getSpiritsPresetTime()
	return self._spiritsTime or 0
end

function i3k_game_context:checkSkillPrePassive()
	local passiveSkill = self:GetRolePassiveSkills()
	local role_all_skill ,role_all_skill_use= self:GetRoleSkills()
	local skillTab = {}
	local changeSkill = {}
	local skillPre = i3k_clone(self:getSkillPresetData())
	for _,v in ipairs(skillPre) do
		skillTab = {}
		for k,_ in pairs(role_all_skill) do
			local suitFlag = true
			for _,j in ipairs(v.skillPreset) do
				if k == j then
					suitFlag = false
					break
				end
			end
			if suitFlag and not self:GetIsNotDrag(k) then
				table.insert(skillTab,k)
			end
		end
		local function checkSuit(j)
			local suitFlag = true
			for k,v in ipairs(v.skillPreset) do
				if j == v then
					suitFlag = false
					break
				end
			end
			if passiveSkill[j] then
				suitFlag = false
			end
			return suitFlag
		end
		for i,j in ipairs(v.skillPreset) do
		 	if passiveSkill[j] then
		 	 	table.insert(changeSkill,j)
		 		while not checkSuit(j) do
		 			j = self:getRandomSkillID(skillTab)
		 		end
				v.skillPreset[i] = j
		 	end
		end
	end
	if #changeSkill > 0 then
		local nameStr
		for _,v in ipairs(changeSkill) do
			local skill_data = i3k_db_skills[v]
			if nameStr then
				nameStr = nameStr..","..skill_data.name
			else
				nameStr = skill_data.name
			end
		end
		g_i3k_ui_mgr:ShowMessageBox1(string.format("更换气功导致%s变为被动,技能预设中该技能已被随机替换",nameStr))
		i3k_sbean.save_all_skill_preset(skillPre)
	end
end

-- 被动和光环技能类型不能拖拽
function i3k_game_context:GetIsNotDrag(skillID)
	local skillType = g_i3k_db.i3k_db_get_skill_type(skillID)
	return skillType == eSE_PASSIVE or skillType == eSE_AURA
end

function i3k_game_context:checkSkillPassive()
	local passiveSkill = self:GetRolePassiveSkills()
	local role_all_skill,role_all_skill_use= self:GetRoleSkills()
	local skillTab = {}
	local pos,skillID
	for k,v in ipairs(role_all_skill_use) do
		for i,_ in pairs(role_all_skill) do
			local suitFlag = true
			for _,j in ipairs(role_all_skill_use) do
				if i == j then
					suitFlag = false
					break
				end
			end
			if suitFlag and not self:GetIsNotDrag(i) then
				table.insert(skillTab,i)
			end
		end
		local function checkSuit(j)
			local suitFlag = true
			for k,v in ipairs(role_all_skill_use) do
				if j == v then
					suitFlag = false
					break
				end
			end
			if passiveSkill[j] then
				suitFlag = false
			end
			return suitFlag
		end
	 	if passiveSkill[v] then
	 		while not checkSuit(v) do
	 			v = self:getRandomSkillID(skillTab)
	 		end
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(282))
			i3k_sbean.goto_skill_select(k, v, g_CHANGE_SKILL_PASSIVE);
			break
	 	end
	end
end

function i3k_game_context:getRandomSkillID(randTab)
	--math.randomseed(tostring(os.time()):reverse():sub(1, 6))
	local randomNum = math.random(#randTab)
	return randTab[randomNum]
end

function i3k_game_context:checkDiyPreFlag(pos)
	local skillPre = i3k_clone(self:getSkillPresetData())
	for _,v in ipairs(skillPre) do
		if v.diySkill == pos then
			return true
		end
	end
	return false
end

function i3k_game_context:setDiscardDiyPos(pos)
	self._diyPos = pos
end

function i3k_game_context:getDiscardDiyPos()
	return self._diyPos or 0
end

function i3k_game_context:changeDiyPre()
	local pos = self:getDiscardDiyPos()
	local changeFlag = false
	local skillPre = i3k_clone(self:getSkillPresetData())
	for k,v in ipairs(skillPre) do
		if v.diySkill == pos then
			skillPre[k].diySkill = 0
			changeFlag = true
		elseif v.diySkill > pos then
			skillPre[k].diySkill = skillPre[k].diySkill - 1
			changeFlag = true
		end
	end
	if changeFlag then
		i3k_sbean.save_all_skill_preset(skillPre)
	end
end

-- zhangbing: 势力战,会武,武道会,跨服组队匹配状态相关
-- joinTime 	匹配开始时间
-- matchType	匹配类型,见i3k_global --匹配类型
-- actType 势力战会武为配置表类型; 武道会为海选和几强; 跨服组队为匹配参数(参见globalmap_join_req param1参数说明)
function i3k_game_context:InMatchingState(joinTime, matchType, actType)
	self._matchState.matchType = matchType
	self._matchState.actType = actType
	self._matchState.joinTime = joinTime
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "startMatching", joinTime, matchType, actType)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Activity, "startActivityMatching", joinTime, matchType, actType)
end

function i3k_game_context:StopMatchingState()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "stopMatching", self._matchState.matchType, self._matchState.actType)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Activity, "stopActivityMatching", self._matchState.matchType, self._matchState.actType)
	self._matchState = { matchType = 0, actType = 0, joinTime = 0 }
	g_i3k_ui_mgr:CloseUI(eUIID_SignWait)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoomData")
end

function i3k_game_context:getMatchState()
	local matchType = self._matchState.matchType
	return self._matchState.matchType, self._matchState.actType, self._matchState.joinTime
end

--相依相偎相关
function i3k_game_context:IsOnHugMode()
	local hero = i3k_game_get_player_hero()
	return hero:IsOnHugMode()
end

function i3k_game_context:OnHugChangedHandler()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateHugbtnState")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateBattleTreasure")
end

function i3k_game_context:IsHugMemberMode()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:IsHugMemberMode()
	end
	return false
end

function i3k_game_context:IsHugLeaderMode()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:IsHugLeaderMode()
	end
	return false
end

function i3k_game_context:UnHug(func)
	if self:IsOnHugMode() then
		i3k_sbean.staywith_leave(func)
	else
		if func then
			func()
		end
	end
end

function i3k_game_context:CheckHugMode(func, condition)
	local function func1()
		local msg = "您当前处于相依相偎状态，确定脱离相依相偎状态前往？"
		local function callback(isOk)
			if isOk then
				self:UnHug(func)
			end
		end
		g_i3k_ui_mgr:ShowMessageBox2(msg, callback)
	end

	if self:IsHugLeaderMode() and not condition then
		func1()
	elseif self:IsHugMemberMode() then
		func1()
		return true
	else
		if func then
			func()
		end
		return false
	end
end

-- 播放烟花特效 TODO 重构
function i3k_game_context:playFirework(id)
	g_i3k_ui_mgr:CloseUI(eUIID_Firework1)
	g_i3k_ui_mgr:CloseUI(eUIID_Firework2)
	g_i3k_ui_mgr:CloseUI(eUIID_Firework3)
	g_i3k_ui_mgr:CloseUI(eUIID_Firework4)
	g_i3k_ui_mgr:CloseUI(eUIID_Firework5)
	if id == 66088 then
		g_i3k_ui_mgr:OpenUI(eUIID_Firework1)
	elseif id == 66089 then
		g_i3k_ui_mgr:OpenUI(eUIID_Firework2)
	elseif id == 66090 then
		g_i3k_ui_mgr:OpenUI(eUIID_Firework3)
	elseif id == 66091 then
		g_i3k_ui_mgr:OpenUI(eUIID_Firework4)
	elseif id == 66092 then
		g_i3k_ui_mgr:OpenUI(eUIID_Firework5)
	else
		g_i3k_ui_mgr:OpenUI(eUIID_Firework1)
	end
end

---------我要提升start------------------------------
--获得装备基础战力
function i3k_game_context:getEquipPartPowerBare()
	local wEquips = g_i3k_game_context:GetWearEquips()
	local totalPower = 0
	for k,v in pairs(wEquips) do
		local equip = v.equip
		if equip then
			totalPower = totalPower + g_i3k_game_context:GetBagEquipPower(equip.equip_id, equip.attribute, 0, {}, {}, {})
		end
	end
	return totalPower
end
--计算参悟进度
function i3k_game_context:getGraspLvSum()
	local canwuLv = self:GetCanLevelWuInfo()
	local levelSum = 0
	for _,v in pairs(canwuLv) do
		levelSum = levelSum + v.lvl
	end
	return levelSum
end
--计算藏书进度
function i3k_game_context:getRarebookLvSum()
	local cheats = self:GetCheatsInfo()
	local levelSum = 0
	for _,v in pairs(cheats) do
		levelSum = levelSum + v
	end
	return levelSum
end
--计算乾坤购买总点数进度
function i3k_game_context:getDmgtransferPointSum()
	local qianKun = self:getQiankunInfo()
	return qianKun.totalPoints
end
--获得已穿戴装备平均升级等级，平均强化等级，平均宝石等级
function i3k_game_context:getwEquipsNum()
	local wEquips = self:GetWearEquips()
	local num = 0    			     --装备数量
	local eqGrowLvlSum = 0 			 --装备升级等级
	local eqEvoLvlSum = 0 			 --装备强化等级
	local eqDiamondLvlSum = 0        --宝石等级总和
	local stoneNum = 0 				 --装备宝石数量
	local growValue = 0				 --装备升级返回参数
	local evoValue = 0				 --装备强化返回参数
	local stoneValue = 0		     --装备宝石返回参数
	for i = 1, eEquipNumber do
		local equipValue = wEquips[i]
		if equipValue.equip then
			num = num + 1
			--统计装备强化等级
			eqEvoLvlSum = eqEvoLvlSum + equipValue.eqEvoLvl
			eqGrowLvlSum = eqGrowLvlSum + equipValue.eqGrowLvl
			for _, v in pairs(equipValue.slot) do
		    	--拿到已经镶嵌的宝石
				if v ~= 0 then
					local stone = g_i3k_db.i3k_db_get_common_item_cfg(v)
					if stone then
						eqDiamondLvlSum = eqDiamondLvlSum + stone.level
						stoneNum = stoneNum + 1
					end	
				end
			end
		end
	end
	if num ~= 0 then
		growValue =  eqGrowLvlSum / num
		evoValue = eqEvoLvlSum / num
	end
	if stoneNum ~= 0 then
		stoneValue = eqDiamondLvlSum / stoneNum
	end
	return growValue, evoValue, stoneValue
end
--已穿戴装备平均升级等级
function i3k_game_context:getEquipsGrowlvAvg()
	local eqGrowLvl = self:getwEquipsNum()
	return eqGrowLvl
end
--已穿戴装备平均强化等级
function i3k_game_context:getEquipsEvoLvlAvg()
	local _,eqEvoLvlSum = self:getwEquipsNum()
	return eqEvoLvlSum
end
--已穿戴装备平均宝石等级
function i3k_game_context:getDiamondLvlAvg()
	local _,_,stoneNum = self:getwEquipsNum()
	return stoneNum
end
--已穿戴装备的锤炼星级总和
function i3k_game_context:getEquipTemperTotalStarsSum()
	local chuiLianStarLv = 0		 --锤炼星级统计
	local wEquips = self:GetWearEquips()
	for k,v in pairs(wEquips) do
		--锤炼星级统计
		chuiLianStarLv = chuiLianStarLv + g_i3k_game_context:GetEquipTemperTotalStars(k)
	end
	return chuiLianStarLv
end
--魂玉战力
function i3k_game_context:getHunyuPower()
    --魂玉升级和洗脸战力汇总
	local hero = i3k_game_get_player_hero()
	local sum = hero:getPowerByProperty("_valueLY") + hero:AppraiseLongyinKong() 
	return sum	
end
--神器战力
function i3k_game_context:getShenqiPower()
	--local power = math.modf(g_i3k_db.i3k_db_get_battle_power(self:getHeirloomProps()))
	local power = g_i3k_game_context:GetHeirloomFightPower()
	return power
end
--宠物按照战力降序排序
function i3k_game_context:SortPetByPower()
	local petData = self:GetAllYongBing()
	local newPetData = {}
	for _,v in pairs(petData) do
		table.insert(newPetData, v)
	end
	local function sortPower(a,b)
		local powerA = g_i3k_game_context:getBattlePower(a.id)
		local powerB = g_i3k_game_context:getBattlePower(b.id)
		return powerB < powerA 
	end
	table.sort(newPetData,sortPower)
	self._mercenariesSortPowerData = newPetData
end
--得到宠物战力降序列表
function i3k_game_context:GetSortPetByPower()
	return self._mercenariesSortPowerData
end
--得到宠物等级平均，星级平均，突破技能等级平均，心法等级平均
function i3k_game_context:getPetLvStarBreakAvg()
	local petNumLogic = 0--宠物逻辑数量 
	local petLvlSum = 0 --宠物等级总和
	local petStarLvlSum = 0 --宠物星级总和
	local petBreakLvlSum = 0 --宠物突破技能 	
	local petXinFaLvlSum = 0 --宠物心法等级和
	local db_num = g_i3k_db.i3k_db_get_WantImprove_LevelParam(g_pet_num) --当前等级配置的宠物数量
	local petData = self:GetSortPetByPower()
	for _,v in ipairs(petData) do
		petNumLogic = petNumLogic + 1
		if petNumLogic > db_num then
			petNumLogic = db_num
			break
		else
			petLvlSum = petLvlSum + v.level
			petStarLvlSum = petStarLvlSum + v.starlvl
			for k,_ in pairs(v.breakSkill) do
				local skilllvl = v.breakSkill[k]	
				petBreakLvlSum = petBreakLvlSum + skilllvl
			end
			for _,v2 in pairs(v.spirits) do
				petXinFaLvlSum = petXinFaLvlSum + v2.level
			end
		end
	end
	if petNumLogic == 0 then
		return 0,0,0,0,0
	end
	return petLvlSum / petNumLogic, 
		   petStarLvlSum / petNumLogic, 
		   petBreakLvlSum / petNumLogic, 
		   petXinFaLvlSum / petNumLogic
end
--得到宠物技能等级平均
function i3k_game_context:getPetSkillsLvAvg()
	local lvlSum = self:GetPetSkillLvlSum()
	local num = self:getPetNum()
	return num == 0 and 0 or lvlSum / num
end
--得到宠物数量
function i3k_game_context:getPetNum()
	local petData = self:GetSortPetByPower()
	local num = 0 
	num = table.nums(petData)
	return num
end 
--平均宠物等级平均
function i3k_game_context:getPetLvAvg()
	local lvAvg = self:getPetLvStarBreakAvg()
	return lvAvg
end
--平均宠物星级平均
function i3k_game_context:getPetStarAvg()
	local _,starAvg = self:getPetLvStarBreakAvg()
	return starAvg
end
--均宠物突破等级平均
function i3k_game_context:getPetBreakAvg()
	local _,_,breakAvg = self:getPetLvStarBreakAvg()
	return breakAvg
end
--得到心法等级平均
function i3k_game_context:getXinfaLvAvg()
	local _,_,_,lvlAvg = self:getPetLvStarBreakAvg()
	return lvlAvg
end
--宠物试炼技能等级总和
function i3k_game_context:getPetTrainSkillsLvlSum()
	local petTrainSkillsLvlSum = 0   
	local petData = self:GetAllYongBing()
	for k,v in pairs(petData) do
		local petSkills = g_i3k_game_context:GetPetTrainSkillsData(v.id)
		for _,lv in pairs(petSkills) do
			petTrainSkillsLvlSum = petTrainSkillsLvlSum + lv
		end
	end
	return petTrainSkillsLvlSum
end
--守护灵兽平均等级
function i3k_game_context:getPetGuardLvAvg()
	local petGuardLvlSum = 0
	local petGuardCount = 0
	local petGuards = self:GetActivePetGuards()
	for _,v in pairs(petGuards) do
		petGuardLvlSum = petGuardLvlSum + v.lvl
		petGuardCount = petGuardCount + 1
	end
	return petGuardCount == 0 and 0 or petGuardLvlSum / petGuardCount
end
--守护灵兽潜能激活平均数量
function i3k_game_context:getPetGuardPotential()
	local petGuardLatentSum = 0
	local count = 0
	local petGuards = self:GetActivePetGuards()
	for _,v in pairs(petGuards) do
	    --统计潜能个数
		petGuardLatentSum = petGuardLatentSum + table.nums(v.latents)
		count = count + 1
	end
	return count == 0 and 0 or petGuardLatentSum / count
end
--获取神兵数量，星级平均值，升阶平均值
function i3k_game_context:getShenBingNumAndAvgData()
	local shenbingData = self:GetShenbingData()
	if next(shenbingData) == nil then
		return 0,0,0
	end
	local shenbingNum = 0 --神兵数量
	local strLvlSum = 0   --神兵星级
	local qLvlSum = 0     --神兵阶数
	for _,v in pairs(shenbingData) do
		shenbingNum = shenbingNum + 1
		strLvlSum = strLvlSum + v.slvl
		qLvlSum = qLvlSum + v.qlvl
	end
	return shenbingNum, strLvlSum / shenbingNum, qLvlSum / shenbingNum
end
--得到神兵数量
function i3k_game_context:GetShenBingNumSum()
	local sum = self:getShenBingNumAndAvgData()
	return sum
end
--得到神兵星级平均值
function i3k_game_context:GetShenbingStarAvg()
	local _,avg = self:getShenBingNumAndAvgData()
	return avg
end
--得到神兵升阶平均值
function i3k_game_context:GetShenbingLvAvg()
	local _,_,avg = self:getShenBingNumAndAvgData()
	return avg
end
--神兵天赋已分配点数平均
function i3k_game_context:getShenBingPonitAvg()
	local shenbingNum = self:GetShenBingNumSum()
	local talent = self:GetShenBingTalentData()
	local tianFu = 0
	for _,points in pairs(talent) do
		for _,v in pairs(points) do
			tianFu = tianFu + v
		end
	end
	return shenbingNum == 0 and 0 or tianFu / shenbingNum
end
--当前装备的神兵技能等级和
function i3k_game_context:getShenBingSkillLvSum()
	local curShenBing = self:GetCurWearShenbing()
	if curShenBing == 0 then
		return 0
	end
	local shenBingSkillLvSum = 0
	local lvlData = self:GetShenBingUpSkillData()
	local shenBingLv = lvlData[curShenBing.id]
	if shenBingLv then
		for _,v in pairs(shenBingLv) do
			shenBingSkillLvSum = shenBingSkillLvSum + v
		end
		return shenBingSkillLvSum
	else
		return 0
	end
end
--得到当前装备的神兵
function i3k_game_context:GetCurWearShenbing()
	local shenbingData = self:GetShenbingData()
	return shenbingData[self:GetSelectWeapon()] and shenbingData[self:GetSelectWeapon()] or 0
end
--统计已觉醒兵魂等级均值
function i3k_game_context:GetShenbingHun()
	local shenbingData = self:GetShenbingData()
	local lvlSum = 0
	local count = 0
	for k,v in pairs(shenbingData) do 
		local isJueXing = self:IsShenBingAwake(v.id)
		if isJueXing then
			local lvls = self:GetBingHunLevels(v.id)
			for _,v2 in pairs(lvls) do
				lvlSum = lvlSum + v2
			end
			count = count + 1
		end
	end
	return count == 0 and 0 or lvlSum / count
end
--器灵修炼总等级
function i3k_game_context:GetQilingLvSum()
	local lvlSum = 0
	local qiling = self:getQilingData()
	for _,v in pairs(qiling) do
		for _,_ in pairs(v.activitePoints) do
			lvlSum = lvlSum + 1
		end
		if (v.rank - 1) >= 0 then
			lvlSum = lvlSum + (v.rank - 1) * 10
		end
	end
	return lvlSum
end
--得到坐骑数量，洗练，星级，突破等级
function i3k_game_context:GetSteedDatas()
	local allSteed = self:getAllSteedInfo()
	local steedNum = 0 			--数量
	local cleanLvlSum = 0 		--洗练等级
	local starSum = 0 			--星级
	local breakSum = 0          --突破等级
	for k,v in pairs(allSteed) do
		steedNum = steedNum + 1
		cleanLvlSum = cleanLvlSum + v.enhanceLvl
		starSum = starSum + v.star
		breakSum = breakSum + v.breakLvl
	end
	if steedNum == 0 then
		return 0,0,0,0
	else
		return steedNum, cleanLvlSum / steedNum, starSum / steedNum, breakSum / steedNum
	end
end
--得到坐骑数量
function i3k_game_context:GetSteedNum()
	local num = self:GetSteedDatas()
	return num
end
--得到洗练等级平均值
function i3k_game_context:GetSteedCleanLvAvg()
	local _,avg =  self:GetSteedDatas()
	return avg
end
--已拥有坐骑的平均星级
function i3k_game_context:GetSteedStarAvg()
	local _,_,avg =  self:GetSteedDatas()
	return avg
end
--已拥有坐骑的平均突破等级
function i3k_game_context:GetBreakLvAvg()
	local _,_,_,avg =  self:GetSteedDatas()
	return avg
end
--检查该坐骑骑术是否开启
function i3k_game_context:CheckCurSteedSkillState(id)
	local isOpen = false
    local starLvl = self:GetSteedStarInfo(id)
	local cur_level = self:GetLevel()
	local need_level = i3k_db_common.functionOpen.steedfunction
	if cur_level >= need_level and starLvl >= g_HS_SKILL_OPEN_STAR then
		isOpen = true
	end
	return isOpen
end
--统计骑术均值
--规则: （当前出战坐骑的先天骑术等级 + 所有已激活的后天骑术等级总和）/ (已激活后天骑术个数 + 1)
function i3k_game_context:GetSteedSkillSum()
	local curSteedID = self:getUseSteed() 										  --拿到当前坐骑ID
	if curSteedID == 0 or not self:CheckCurSteedSkillState(curSteedID) then 	  --如果没有坐骑 或者  没有开启骑术  返回0
		return 0
	end
	local levelData = self:getSteedSkillLevelData() 		  				      --拿到所有骑术等级信息
	local canUseData = self:getAllSteedSkills()	   							 	  --拿到所有已有的骑术ID
	local houTianIds = {}                          								  --后天骑术id列表
	local curXianTianLv = levelData[i3k_db_steed_cfg[curSteedID].equitationId]    --先天骑术等级
	local houTianLvSum = 0 														  --后天骑术等级总和
	local houTianNum = 0 														  --已激活后天骑术个数
	for id,_ in pairs(canUseData) do
		if i3k_db_steed_skill[id] and i3k_db_steed_skill[id].skillType ~= g_HS_SKILL_BORN then  --是后天骑术
			houTianLvSum = houTianLvSum + levelData[id]
			houTianNum = houTianNum + 1
		end
	end
	return (curXianTianLv + houTianLvSum) / (houTianLvSum + 1) 					  --加1是吧先天骑术统计进去
end
--统计马术激活的属性条数
function i3k_game_context:GetSteedMasterSum()
	local steedData = self:getSteedFightData()
	local count = 0
	for _,v in pairs(steedData.masters) do 
		for _,_ in pairs(v.unLocks) do
			count = count + 1
		end
	end
	return count
end
--良驹之灵星级(处理star为—1 的情况)
function i3k_game_context:GetSteedSpriteStar()
	local star = self:getSteedSpiritStar()
	return star == -1 and 0 or star 
end
--良驹之灵技能等级和
function i3k_game_context:GetSteedSkillLvSum()
	local skills = self:getSteedSpiritSkills()
	local sum = 0
	for _,v in pairs(skills) do
		sum = sum + v.level
	end
	return sum
end
--得到当前装备的内甲
function i3k_game_context:GetCurUnderWear()
	local curWearID, allWearData = g_i3k_game_context:getUnderWearData()
	local curWearData = allWearData[curWearID]
	return curWearData
end
--得当当前装备的内甲等级
function i3k_game_context:GetCurUnderWearLv()
	local curWearData = self:GetCurUnderWear()
	return curWearData and curWearData.level or 0
end
--得到当前你装备的内甲锻造等级
function i3k_game_context:GetCurUnderWearDuanZao()
	local curWearData = self:GetCurUnderWear()
	return curWearData and curWearData.rank or 0
end
--得到当前装备的内甲已分配的点数
function i3k_game_context:GetCurUnderWearPoint()
	local curWearData = self:GetCurUnderWear()
	return curWearData and curWearData.useTalentPoint or 0
end
--当前装备的内甲符文总等级（3页）
function i3k_game_context:GetCurUnderWearFuWen()
	local curWearData = self:GetCurUnderWear()
	local soltsLvlSum = 0
	if not curWearData or next(curWearData) == nil then
		return 0
	end
	for	_,v in ipairs(curWearData.soltGroupData) do
		if v.unlocked == 1 then
			for _,v2 in ipairs(v.solts) do
				soltsLvlSum = soltsLvlSum + v2
			end
		end
	end
	return soltsLvlSum 
end
--得到暗器数量，平均品阶，平均等级
function i3k_game_context:GetHideWeaponData()
	local weapons = self:getHideWeaponInfo().weapons
	local weaponCount = 0
	local rankValueSum = 0 				--品阶
	local levelSum = 0
	for k,v in pairs(weapons) do
		weaponCount = weaponCount + 1
		rankValueSum = rankValueSum + v.rankValue + 1  --这里品阶数值从0开始，所以在这里+1 作为从1开始
		levelSum =  levelSum + v.level
	end
	if weaponCount == 0 then
		return 0,0,0
	else
		return weaponCount, rankValueSum / weaponCount, levelSum / weaponCount
	end
end
--暗器数量
function i3k_game_context:GetHideWeaponNum()
	local num = self:GetHideWeaponData()
	return num
end 
--已拥有暗器平均品阶
function i3k_game_context:GetHideWeaponPinjieAvg()
	local _,avg = self:GetHideWeaponData()
	return avg
end 
--已拥有暗器的平均等级
function i3k_game_context:GetHideWeaponLvAvg()
	local _,_,avg = self:GetHideWeaponData()
	return avg
end 
--武魂8个方位的等级和
function i3k_game_context:GetMartialSoulLvSum()
	local parts = self:GetWeaponSoulParts()
	local levelSum = 0 		
	for k,v in ipairs(parts) do
		levelSum = levelSum + v.level
	end
	return levelSum
end
--武魂阶数
function i3k_game_context:GetMartialSoulPinJie()
	local weaponSoul = self:GetWeaponSoulData()
	return weaponSoul.grade == -1 and 0 or weaponSoul.grade
end
--神斗总星级
function i3k_game_context:GetWeaponSoulGodStarLv()
	local suolStarLv = self:GetWeaponSoulGodStar().curLevel
	return suolStarLv
end
--神斗技能等级总和
function i3k_game_context:GetWeaponSoulGodStarSkillsLvSum()
	local sulSkillLvSum = 0
	local soulSkills = g_i3k_game_context:GetWeaponSoulGodStarSkills()
	for _,v in pairs(soulSkills) do
		sulSkillLvSum = sulSkillLvSum + v
	end
	return sulSkillLvSum
end
--得到已装备八卦的战力和（基础+套装）
function i3k_game_context:GetBaGuaPower()
	local power = math.modf(g_i3k_db.i3k_db_get_battle_power(self:getBaGuaProps()))
	return power
end
--已装备八卦的平均强化等级
function i3k_game_context:GetBaGuaQiangHuaLv()
	local levelSum = 0
	local count = 0
	local levelData = self:getBaGuaFinalStrength()
	local curEquip = self:getEquipDiagrams()
	for id,_ in pairs(curEquip) do
		count = count + 1
		levelSum = levelSum + levelData[id]
	end	
	return count == 0 and 0 or levelSum / count
end
--气海值总和
function i3k_game_context:GetQiHaiData()
	local meridians = g_i3k_game_context:getMeridians()
	local geaSeaSum = 0
	local cfg = i3k_db_meridians
	for k,v in pairs(meridians) do
		local geaSea = 0
		local meridiansCfg = cfg.meridians[k]
		local acupIds = meridiansCfg.acupuncturePointIds
		for k2,v2 in ipairs(acupIds) do
			if k2 == #acupIds then
				geaSea = geaSea + v.holes[v2].energy * v.holes[acupIds[1]].energy
			else
				geaSea = geaSea + v.holes[v2].energy * v.holes[acupIds[k2 + 1]].energy
			end
		end
		geaSea = math.floor( math.sqrt(geaSea) * cfg.common.areasFactor)
		geaSeaSum = geaSeaSum + geaSea
	end
	return geaSeaSum
end
--我要提升
local getProgressValue = {
	[g_skillLv_sum] = function() 						 --武功总等级进度
		return g_i3k_game_context:GetRoleSkillsNum()
	end,
	[g_uniqueSkill_sum] = function() 					 --武功境界等级进度
		return g_i3k_game_context:GetRoleUniqueSkillsNum()
	end,
	[g_spirits_num] = function() 						 --气功激活数量进度
		return g_i3k_game_context:GetXinfaJiHuoNum()
	end,
	[g_spiritsLv_sum] = function()						 --已激活气功平均等级进度
		return g_i3k_game_context:GetRoleSpiritsLvlSum()
	end,
	[g_qiHaiZhi_sum] = function()						 --经脉气海值
		return g_i3k_game_context:GetQiHaiData()
	end,
	[g_potentialLv_sum] = function() 					 --经脉潜能等级
		return g_i3k_game_context:GetMeridianPotentialLvlSum()
	end,
	[g_skillFormula_Lv] = function()					 --武诀等级
		return g_i3k_game_context:getWujueLevel()
	end,
	[g_skillFormula_Jie_sum] = function()				 --武诀阶数
		return g_i3k_game_context:getWujueRank()
	end,
	[g_skillFormula_skillLv_sum] = function()			 --武诀技能能级总和
		return g_i3k_game_context:getWuJueSkillsLvSum() + g_i3k_game_context:getWujueSoulRankSum()
	end,
	--历练部分
	[g_graspLv_sum] = function() 						 --参悟等级总和
		return g_i3k_game_context:getGraspLvSum()
	end,
	[g_rarebookLv_sum] = function()						 --藏书等级总和
		return g_i3k_game_context:getRarebookLvSum()
	end,
	[g_dmgtransferPoint_sum] = function() 		    	 --乾坤总购买点数		
		return g_i3k_game_context:getDmgtransferPointSum()
	end,
	--装备部分
	[g_equip_BasePower_sum] = function(arg)			     --装备基础战力
		return g_i3k_game_context:getEquipPartPowerBare()--getEquipPartPower(g_equip_bare)--
	end, 
	[g_equip_Lv_avg] = function() 				  	     --已穿戴装备的平均升级等级进度
		return g_i3k_game_context:getEquipsGrowlvAvg()
	end,
	[g_equip_Grow_avg] = function() 				     --已穿戴装备的平均强化等级进度
		return g_i3k_game_context:getEquipsEvoLvlAvg()
	end,
	[g_equip_Diamond_avg] = function() 			  		 --已穿戴装备的平均宝石等级进度
		return g_i3k_game_context:getDiamondLvlAvg()
	end,
	[g_equip_ChuiLian_sum] = function() 				 --锤炼星级总和
		return g_i3k_game_context:getEquipTemperTotalStarsSum()
	end,
	[g_jadePower_sum] = function() 						 --魂玉
	    return g_i3k_game_context:getHunyuPower()
	end,
	[g_shenqiPower_sum] = function()  					 --神器战力
		return g_i3k_game_context:GetHeirloomFightPower()
	end,
	--宠物部分
	[g_pet_num] = function() 							 --宠物数量
		return g_i3k_game_context:getPetNum()
	end,
	[g_pet_skillLv_avg] = function() 					 --平均技能等级
		return g_i3k_game_context:getPetSkillsLvAvg()
	end,
	[g_pet_Lv_avg] = function() 						 --宠平均宠物等级
		return g_i3k_game_context:getPetLvAvg()
	end,
	[g_pet_starLv_avg] = function() 					 --平均宠物星级
		return g_i3k_game_context:getPetStarAvg()
	end,
	[g_pet_break_avg] = function() 						 --平均宠物突破等级
		return g_i3k_game_context:getPetBreakAvg()
	end,
	[g_pet_xinFa_avg] = function() 						 --平均宠物心法等级
		return g_i3k_game_context:getXinfaLvAvg()
	end,
	[g_pet_weiYang_sum] = function() 					 --已拥有宠物喂养总等级
		return g_i3k_game_context:GetPetFriendLvlSum()
	end,
	[g_pet_equip_power_avg] = function() 				 --4类装备的平均战力
		return g_i3k_game_context:GetPetEquipPowerAvg()
	end,
	[g_pet_equip_UpLv_avg] = function() 				 --宠物所有已穿戴装备升级平均值
		return g_i3k_game_context:GetPetEquipsLvlAvg()
	end,
	[g_pet_shiLianSkill_sum] = function() 				 --宠物7个试练技能等级总和
		return g_i3k_game_context:getPetTrainSkillsLvlSum()
	end,
	[g_pet_guardLv_avg] = function() 					 --守护灵兽平均等级
		return g_i3k_game_context:getPetGuardLvAvg()
	end,
	[g_pet_guardPotential_sum] = function() 			 --守护灵兽潜能激活数量
		return g_i3k_game_context:getPetGuardPotential()
	end,
	--神兵部分
	[g_shenBing_num] = function() 						 --神兵数量N
		return g_i3k_game_context:GetShenBingNumSum()
	end,
	[g_shenBing_star_avg] = function() 					 --神兵星级平均（已拥有神兵平均）
		return g_i3k_game_context:GetShenbingStarAvg()
	end,
	[g_shenBing_lv_avg] = function() 					 --神兵升阶等级平均（已拥有神兵平均）
		return g_i3k_game_context:GetShenbingLvAvg()
	end,
	[g_shenBing_point_avg] = function() 				 --神兵天赋已分配点数平均（已拥有神兵平均）
		return g_i3k_game_context:getShenBingPonitAvg()
	end,	
	[g_shenBing_skill_sum] = function() 				 --当前装备的神兵技能等级和
		return g_i3k_game_context:getShenBingSkillLvSum()
	end,
	[g_shenBing_hun_sum] = function() 					 --兵魂
		return g_i3k_game_context:GetShenbingHun()
	end,
	[g_shenBing_qiLing_sum] = function() 				 --器灵修炼总等级
		return g_i3k_game_context:GetQilingLvSum()
	end,
	--坐骑部分
	[g_steed_num] = function() 							 --坐骑数量N
		return g_i3k_game_context:GetSteedNum()
	end,
	[g_steed_clean_avg] = function()				     --已拥有坐骑的平均洗练等级
		return g_i3k_game_context:GetSteedCleanLvAvg()
	end,
	[g_steed_star_avg] = function() 					 --已拥有坐骑的平均星级
		return g_i3k_game_context:GetSteedStarAvg()
	end,
	[g_steed_break_avg] = function() 					 --已拥有坐骑的平均突破等级
		return g_i3k_game_context:GetBreakLvAvg()
	end,
	[g_steed_skill_sum] = function() 					 --已装备骑术技能等级和（先天和后天都算）
		return g_i3k_game_context:GetSteedSkillSum()
	end,
	[g_steed_skin] = function() 						 --坐骑皮肤：无参数，不显示进度条
		return -1
	end,
	[g_steed_master_sum] = function() 					 --马术精通：激活的属性条数
		return g_i3k_game_context:GetSteedMasterSum()
	end,
	[g_steed_spriteStar_sum] = function() 				 --良驹之灵总星级
		return g_i3k_game_context:GetSteedSpriteStar()
	end,
	[g_steed_skillLv_sum] = function() 					 --良驹之灵技能等级和
		return g_i3k_game_context:GetSteedSkillLvSum()
	end,
	[g_steed_equipPower_sum] = function() 				 --骑战装备战力
		return g_i3k_game_context:GetSteedEquipFightPower()
	end,
	--内甲部分
	[g_underWear_lv] = function() 						 --当前装备的内甲等级
		return g_i3k_game_context:GetCurUnderWearLv()
	end,
	[g_underWear_duanZao] = function() 					 --当前装备的内甲锻造等级
		return g_i3k_game_context:GetCurUnderWearDuanZao()
	end,
	[g_underWear_point] = function() 					 --当前装备的内甲已分配的点数
		return g_i3k_game_context:GetCurUnderWearPoint()
	end,
	[g_underWear_fuWen_sum] = function() 				 --当前装备的内甲符文总等级（3页）
		return g_i3k_game_context:getArmorFuWenPower()
	end,
	--暗器部分
	[g_hideWeapon_num] = function() 					 --暗器数量
		return g_i3k_game_context:GetHideWeaponNum()
	end,
	[g_hideWeapon_pinjie_avg] = function() 				 --已拥有暗器的平均品阶
		return g_i3k_game_context:GetHideWeaponPinjieAvg()
	end,
	[g_hideWeapon_fourSkill_sum] = function() 			 --暗器4个技能等级之和
		return g_i3k_game_context:getCurWeaponFourSkillLvl()
	end,
	[g_hideWeapon_lv_avg] = function() 				     --已拥有暗器的平均等级
		return g_i3k_game_context:GetHideWeaponLvAvg()
	end,
	[g_hideWeapon_huanHua_sum] = function() 			 --暗器幻化：无参数，不显示进度条
		return -1
	end,
	--武魂部分
	[g_martialSoul_lv_sum] = function() 				 --武魂8个方位的等级和
		return g_i3k_game_context:GetMartialSoulLvSum()
	end,
	[g_martialSoul_jieShu_sum] = function() 			 --武魂阶数
		return g_i3k_game_context:GetMartialSoulPinJie()
	end,
	[g_starFlare_sum] = function() 						 --已装备星耀的战力
		return g_i3k_game_context:GetCurStarPower()
	end,
	[g_shendou_star_sum] = function() 					 --神斗总星级
		return g_i3k_game_context:GetWeaponSoulGodStarLv()
	end,
	[g_shendou_skill_sum] = function() 					 --神斗技能等级总和
		return g_i3k_game_context:GetWeaponSoulGodStarSkillsLvSum()
	end,
	--八卦部分
	[g_baGua_power] = function() 						 --已装备八卦的战力和
		return g_i3k_game_context:GetBaGuaPower()
	end,
	[g_baGua_qiangHuaLv_sum] = function() 			     --已装备八卦的平均强化等级
		return g_i3k_game_context:GetBaGuaQiangHuaLv()
	end,
	[g_baGua_yiluePoint] = function() 			    	 --易略购买点数
		return g_i3k_game_context:GetBaguaByPointSum()
	end,
	--飞升部分
	[g_feisheng_upLv_avg] = function() 					 --飞升装备平均升级等级
		return g_i3k_game_context:getFeishengUpLvAvg()
	end,
	[g_feisheng_qiangH_avg] = function() 			     --飞升装备平均强化等级
		return g_i3k_game_context:getFeishengQianghuaAvg()
	end,
	[g_feisheng_stoneLv_avg] = function() 				 --飞升装备镶嵌宝石平均等级
		return g_i3k_game_context:getFeishengBaoshiAvg()
	end,
	[g_feisheng_shufuLv_avg] = function() 				 --飞升装备镶嵌宝石祝福平均等级
		return g_i3k_game_context:getFeishengZhufuAvg()
	end,
	[g_feisheng_sharpen_score] = function()
		return g_i3k_game_context:getFlyingPromoteScore() --飞升装备淬锋和精锻的平均增长战力
	end,
	--秘祝
	[g_miZhu_power] = function()
		return g_i3k_game_context:getArrayStonePower()	--秘祝战力
	end
}
--获取我要提升进度条接口  传入id 成功返回值 不成功返回与不显示进度条-1
function i3k_game_context:GetWantImproveProgress(param)
	local max = g_i3k_db.i3k_db_get_WantImprove_LevelParam(param)
	local returnValue = nil
	local value = 0
	if getProgressValue[param] then
		value = getProgressValue[param]()
		if value then
			if value~= -1 then
				if max == 0 then
					returnValue = value > 0 and 1 or 0
				else
					local progress = value / max
					local name = i3k_db_want_improve_strongChild[param].name
					local net_log = i3k_get_net_log()
					returnValue = progress >= 1 and 1 or progress
				end
			end
		end
	end
	return returnValue, value, max
end
---------我要提升end------------------------------
--我要变强
local function getEquipPartPower(typeNum)             -- g_equip_bare 0 g_equip_grow 1 g_equip_evo 2 g_equip_slot 3
	local wEquips = g_i3k_game_context:GetWearEquips()
	local totalPower = 0
	for k,v in pairs(wEquips) do
		local equip = v.equip
		local slot = v.slot
		if equip then
			if typeNum == g_equip_bare then
				totalPower = totalPower + g_i3k_game_context:GetBagEquipPower(equip.equip_id, equip.attribute, equip.naijiu, equip.refine, equip.legends, equip.smeltingProps)
			elseif typeNum == g_equip_grow then
			elseif typeNum == g_equip_evo then
				totalPower = totalPower + g_i3k_game_context:GetBodyEquipPower(equip.equip_id, equip.attribute, equip.naijiu,v.eqGrowLvl,0,{}, equip.refine, equip.legends, v.gemBless) - g_i3k_game_context:GetBagEquipPower(equip.equip_id, equip.attribute, equip.naijiu,equip.refine,equip.legends,equip.smeltingProps)
				totalPower = totalPower + g_i3k_game_context:GetBodyEquipPower(equip.equip_id, equip.attribute, equip.naijiu,0,v.eqEvoLvl,{}, equip.refine,equip.legends, v.gemBless) - g_i3k_game_context:GetBagEquipPower(equip.equip_id, equip.attribute, equip.naijiu,equip.refine,equip.legends,equip.smeltingProps)
			elseif typeNum == g_equip_slot then
				totalPower = totalPower + g_i3k_game_context:GetBodyEquipPower(equip.equip_id, equip.attribute, equip.naijiu,0,0,v.slot,equip.refine, equip.legends, v.gemBless) - g_i3k_game_context:GetBagEquipPower(equip.equip_id, equip.attribute, equip.naijiu,equip.refine, equip.legends,equip.smeltingProps)
			end
		end
	end
	return totalPower
end

local function getPetPartPower(typeNum)      -- g_pet_lvl = 1	g_pet_star = 2 g_pet_break = 3 g_pet_fix = 4
	local petData = g_i3k_game_context:GetAllYongBing()
	local maxHP,atkN,defN,atr,ctr,acrN,tou = 0,0,0,0,0,0,0
	local finc,tdec,xinfa_inc,weapon_inc = 0,0,0,0

	for k,v in pairs(petData) do
		local petSkills = i3k_game_context:GetCurPetGuard()
			if typeNum == g_pet_lvl then
				local yongbingCfg = g_i3k_db.i3k_db_get_pet_cfg(k)
				if g_i3k_game_context:getPetIsWaken(k) then
					yongbingCfg = i3k_db_mercenariea_waken_property[k];
				end
				local level = v.level
				local function get_attr(base,inc1,inc2)
					local value = (level -1)*(level -1)*inc1 + (level - 1)*inc2 + base
					value = math.modf(value)
					return value
				end
					maxHP = maxHP + get_attr(yongbingCfg.hpOrg, yongbingCfg.hpInc1, yongbingCfg.hpInc2)
					atkN = atkN + get_attr(yongbingCfg.atkNOrg, yongbingCfg.atkNInc1, yongbingCfg.atkNInc2)
					defN = defN + get_attr(yongbingCfg.defNOrg, yongbingCfg.defNInc1, yongbingCfg.defNInc2)
					atr = atr + get_attr(yongbingCfg.atrOrg, yongbingCfg.atrInc1, yongbingCfg.atrInc2)
					ctr = ctr + get_attr(yongbingCfg.ctrOrg, yongbingCfg.ctrInc1, yongbingCfg.ctrInc2)
					acrN = acrN + get_attr(yongbingCfg.acrNOrg, yongbingCfg.acrNInc1, yongbingCfg.acrNInc2)
					tou = tou + get_attr(yongbingCfg.touOrg, yongbingCfg.touInc1, yongbingCfg.touInc2)
					xinfa_inc = xinfa_inc + yongbingCfg.atkCOrg*100
					weapon_inc = weapon_inc + yongbingCfg.atkWOrg*100
			elseif typeNum == g_pet_star then
				local starlvl = v.starlvl
				finc = finc + i3k_db_suicong_upstar[k][starlvl].hurtIncrease / 100
				tdec = tdec + i3k_db_suicong_upstar[k][starlvl].hurtAvoid / 100
				xinfa_inc = xinfa_inc + i3k_db_suicong_upstar[k][starlvl].xinfaIncrease * 100
				weapon_inc = weapon_inc + i3k_db_suicong_upstar[k][starlvl].weaponIncrease * 100
			elseif typeNum == g_pet_break then
					for i,j in pairs(v.breakSkill) do
						local skilllvl = v.breakSkill[i]
						if skilllvl >0 then
							local skill = i3k_db_suicong_breakdata[i][skilllvl]
							if skill.skillType == 1 then
								finc = finc + skill.increaseCount / 100
							elseif skill.skillType == 2 then
								tdec = tdec + skill.increaseCount / 100
							elseif skill.skillType == 3 then
								xinfa_inc = xinfa_inc + skill.increaseCount * 100
							elseif skill.skillType == 4 then
								weapon_inc = weapon_inc + skill.increaseCount * 100
							end
						end
					end
			elseif typeNum == g_pet_fix then
					if g_i3k_game_context:getIsCompletePetLifeTaskFromID(k) then
						local propertyID,propertyCount = g_i3k_game_context:getHexiuProperty(k)
						for i=1, #propertyID do
							if propertyID[i] ~= 0 then
								if propertyID[i] == 1001 then
									maxHP = maxHP + propertyCount[i]
								elseif propertyID[i] == 1002 then
									atkN = atkN + propertyCount[i]
								elseif propertyID[i] == 1003 then
									defN = defN + propertyCount[i]
								elseif propertyID[i] == 1004 then
									atr = atr + propertyCount[i]
								elseif propertyID[i] == 1005 then
									ctr = ctr + propertyCount[i]
								elseif propertyID[i] == 1006 then
									acrN = acrN + propertyCount[i]
								elseif propertyID[i] == 1007 then
									tou = tou + propertyCount[i]
								elseif propertyID[i] == 1043 then
									finc = finc + propertyCount[i] / 100
								elseif propertyID[i] == 1044 then
									tdec = tdec + propertyCount[i] / 100
								end
							end
						end
					end
			end
	end
	local prop_tb = {
		[1001] = maxHP,
		[1002] = atkN,
		[1003] = defN,
		[1004] = atr,
		[1005] = ctr,
		[1006] = acrN,
		[1007] = tou,
		[1043] = finc / 100,
		[1044] = tdec / 100
	}
	return math.modf((g_i3k_db.i3k_db_get_battle_power(prop_tb,false,true) + 73 * xinfa_inc + 118 * weapon_inc)*0.5)
end

local function getShenbingPartPower(typeNum) --g_shenbing_lvl = 1 ,g_shenbing_star = 2
	local shenbingData = g_i3k_game_context:GetShenbingData()
	local prop_tb = {}
	for k,v in pairs(shenbingData) do
		for i=1,4 do
			local temp_attribute = "attribute"..i
			local temp_value = "value"..i
			local lvl,attribute,value
			if typeNum == g_shenbing_lvl then
				lvl = g_i3k_game_context:GetShenBingQlvl(v.id)
				attribute = i3k_db_shen_bing_uplvl[v.id][lvl][temp_attribute]
				value = i3k_db_shen_bing_uplvl[v.id][lvl][temp_value]
				prop_tb[attribute] = (prop_tb[attribute] or 0) + value
			else
				lvl = g_i3k_game_context:GetShenbingStarLvl(v.id)
				attribute = i3k_db_shen_bing_upstar[v.id][lvl][temp_attribute]
				value = i3k_db_shen_bing_upstar[v.id][lvl][temp_value]
				prop_tb[attribute] = (prop_tb[attribute] or 0) + value
			end
		end
	end
	return g_i3k_db.i3k_db_get_battle_power(prop_tb,true)
end

local function getSteedPartPower(typeNum)
	local aaa =  g_i3k_game_context:getSteedFightData()
	local allSteed = g_i3k_game_context:getAllSteedInfo()
	local attrTable = {}
	for _,v in pairs(allSteed) do
		if typeNum == g_steed_star then
			local starCfg = i3k_db_steed_star[v.id][v.star]
			for i=1,9 do
				local attrId = starCfg[string.format("attrId%s",i)]
				local attrValue = starCfg[string.format("attrValue%s",i)]
				if attrTable[attrId] then
					attrTable[attrId] = attrTable[attrId] + attrValue
				else
					attrTable[attrId] =  attrValue
				end
			end
		else
			for i,j in pairs(v.enhanceAttrs) do
				if attrTable[j.id] then
					attrTable[j.id] = attrTable[j.id] + j.value
				else
					attrTable[j.id] = j.value
				end
			end
		end
	end


	return g_i3k_db.i3k_db_get_battle_power(attrTable,true)
end

local function GetExperiencePartPower(typeNum)
	local cangshuinfo = g_i3k_game_context:GetCheatsInfo();
	local canwuinfo = g_i3k_game_context:GetCanLevelWuInfo()
	local props = {}
	local canwuadd = 10000
	if canwuinfo then
		for k,v in pairs(canwuinfo) do
			local cfg
			for i,j in ipairs(i3k_db_experience_canwu) do
				if k == j[v.lvl].canwuID then
					cfg = j[v.lvl]
				end
			end
			if cfg then
				if cfg.libraryPromote ~= 0 then
					canwuadd = canwuadd + cfg.libraryPromote
				end
				if cfg.propertyId ~= 0 and typeNum == g_experience_truth then
					local propID = cfg.propertyId
					local propValue = cfg.propertyCount
					if props[propID] then
						props[propID] = props[propID] + propValue
					else
						props[propID] = propValue
					end
				end
			end
		end
	end

	if cangshuinfo and typeNum == g_experience_books then
		for k,v in pairs(cangshuinfo) do
			local cfg
			for i,j in ipairs(i3k_db_experience_library) do
				if k == j[v].libraryID then
					cfg = j[v]
				end
			end
			if cfg then
				local i = 1;
				while cfg[string.format("propertyId%s",i)] do
					if cfg[string.format("propertyId%s",i)] ~= 0 then
						local propID = cfg[string.format("propertyId%s",i)]
						local propValue = cfg[string.format("propertyCount%s",i)]
						if props[propID] then
							props[propID] = props[propID] + propValue * canwuadd / 10000
						else
							props[propID] = propValue * canwuadd / 10000
						end
					end
					i = i+1
				end
			end
		end
	end
	return g_i3k_db.i3k_db_get_battle_power(props)
end

local getPower = {
		[g_lvl_up_power] = function(arg)	--级别部分:根据武将表配置与当前级别，算出角色本体属性，及属性获取的战力
			return arg:getPowerByProperty("_valueB")				-- 返回的战力
		end,
		[g_fac_skill_power] = function(arg)  --帮派技能:加入帮派后才计算，得出所有帮派技能属性对应的战力
			return arg:getPowerByProperty("_valueFS")
		end,
		[g_dress_smock_power] = function(arg)  --披风:得出所有披风的属性总和，计算对应战力
			return arg:getPowerByProperty("_valueFD")
		end,
		[g_role_title_power] = function(arg)  --称号:得出生效称号的属性总和，计算对应战力
			return arg:getPowerByProperty("_valueTI")
		end,
		[g_get_equip_power] = function(arg)  --装备本体:全身所有装备的基础属性与附加属性综合起来，计算对应战力（不计强化和升星部分）
			return getEquipPartPower(g_equip_bare)
		end,
		[g_role_streng_power] = function(arg)  --强化部分:全身所有装备的强化增加属性汇总起来，计算对应战力（部位无装备则此部位无强化战力）
			return getEquipPartPower(g_equip_grow)
		end,
		[g_up_star_power] = function(arg)   --升星部分:每个部位升星属性=（基础属性+强化属性）*升星百分比+升星固定值。将6个部位升星属性汇总起来，计算对应战力（部位无装备则此部位无升星战力）
			return getEquipPartPower(g_equip_evo)
		end,
		[g_precious_stone_power] = function(arg)	--宝石:将所有部位已镶嵌的宝石属性汇总，计算对应战力
			return getEquipPartPower(g_equip_slot)
		end,
		[g_jade_up_power] = function(arg)  --魂玉升级:计算魂玉升阶属性对应的战力
			return arg:getPowerByProperty("_valueLY")
		end,
		[g_jade_clean_power] = function(arg)  --魂玉洗练:计算魂玉洗练属性对应的战力（此部分可查看魂玉文档，或找王朝阳确定）
			return arg:AppraiseLongyinKong()
		end,
		[g_skill_up_power] = function(arg)  --技能升级:计算所有已获得技能的技能级别所产生的战力（魂玉加持的级别需计入其中）
			return arg:AppraiseSkill()
		end,
		[12] = function(arg)  --技能境界:计算所有已获得技能的技能境界所产生的战力    (这个去掉了)
			return 0
		end,
		[g_mental_up_power] = function(arg)  --心法战力:将所有已解锁心法书的属性汇总，计算对应战力
			return arg:getPowerByProperty("_valueT")
		end,
		[g_unique_up_power] = function(arg)   --绝技战力:计算所有已获得的绝技的级别与境界，所产生的总战力
			return arg:AppraiseUniqueSkill()
		end,
		[g_accompany_up_power] = function(arg)	--随从升级:所有已召唤随从，其升级属性汇总起来，计算对应战力
			return getPetPartPower(g_pet_lvl)
		end,
		[g_accompany_star_power] = function(arg)  --随从升星:所有已召唤随从，其升星属性汇总起来，计算对应战力
			return getPetPartPower(g_pet_star)
		end,
		[g_accompany_break_power] = function(arg)  --随从突破:所有已召唤随从，其突破属性汇总起来，计算对应战力
			return getPetPartPower(g_pet_break)
		end,
		[18] = function(arg)  ---------------随从成就:随从成就的属性，汇总起来计算对应战力(去掉了)
			return 0
		end,
		[g_accompany_fix_power] = function(arg)  --随从合修:所有已召唤随从，其合修属性汇总起来，计算对应战力
			return getPetPartPower(g_pet_fix)
		end,
		[g_divine_up_power] = function(arg)  --神兵升级:所有已解锁神兵，其级别属性汇总起来，计算对应战力
			return getShenbingPartPower(g_shenbing_lvl)
		end,
		[g_divine_star_power] = function(arg)   --神兵升星:所有已解锁神兵，其升星属性汇总起来，计算对应战力
			return getShenbingPartPower(g_shenbing_star)
		end,
		[g_horse_clean_power] = function(arg)   --坐骑洗练:所有已驯服的坐骑，其洗练属性汇总起来，计算对应战力
			return getSteedPartPower(g_steed_clean)
		end,
		[g_horse_star_power] = function(arg)   --坐骑升星:所有已驯服的坐骑，其升星属性汇总起来，计算对应战力
			return getSteedPartPower(g_steed_star)
		end,
		[g_collect_book] = function(arg)   --藏书:计算所有已解锁藏书附加属性产生的总战力
			return GetExperiencePartPower(g_experience_books)
		end,
		[g_see_truth] = function(arg)   --参悟:计算所有参数条目附加属性产生的总战力
			return GetExperiencePartPower(g_experience_truth)
		end,
}

function i3k_game_context:formateStrengthenCfg()

	if self:GetLevel() < i3k_db_strengthen_self.comCfg.openLvl then
		return
	end
	self._strengthenCfg = {}
	self._reCfg = {}
	local reIDs = {}
	local roleLvl = self:GetLevel()
	local detCfg = i3k_clone(i3k_db_strengthen_self.detCfg)
	for k,v in ipairs(i3k_db_strengthen_self.modCfg) do
		local cfg = {}
		cfg.id = v.id
		cfg.name = v.name
		cfg.modFightNow = 0
		cfg.detCfg = {}
		local reFlag = 0
		for i,j in ipairs(detCfg[k]) do
			if roleLvl >= j.openLvl then
				local detCfgDetail = {}
				detCfgDetail = j
				if j.funcNum ~= 0 and getPower[j.funcNum] then
					local power = math.max(getPower[j.funcNum](i3k_game_get_player_hero()),1)
					detCfgDetail.detFightNow = power
					cfg.modFightNow = cfg.modFightNow + power
				else
					detCfgDetail.detFightNow = 0
				end
				detCfgDetail.detFightPercent = detCfgDetail.detFightNow / i3k_db_exp[roleLvl].detFight[j.id]
				if j.reFlag ~= 0 then
					local reCfg = {}
					reCfg.fightPercent = detCfgDetail.detFightPercent
					reCfg.name = j.name
					reCfg.desc = j.desc
					reCfg.id = j.id
					table.insert(self._reCfg,reCfg)
				end
				detCfgDetail.reFlag = reFlag
				table.insert(cfg.detCfg,detCfgDetail)
			end
		end
		cfg.reFlag = reFlag
		cfg.fightPercent = cfg.modFightNow / i3k_db_exp[roleLvl].modFight[k]
		table.insert(self._strengthenCfg,cfg)
	end
	local function sortReTab(a,b)
		return a.fightPercent < b.fightPercent
	end
	table.sort(self._reCfg,sortReTab)
	for i=1,i3k_db_strengthen_self.comCfg.reNum do
		local cfg = self._reCfg[i]
		if cfg then
			reIDs[cfg.id] = cfg.id
		end
	end
	for k,v in ipairs(self._strengthenCfg) do
		for i,j in ipairs(v.detCfg) do
			if reIDs[j.id] then
				self._strengthenCfg[k].reFlag = 1
				self._strengthenCfg[k].detCfg[i].reFlag = 1
			end
		end
	end
end

function i3k_game_context:getStrengthenCfg()
	self:formateStrengthenCfg()
	return  self._strengthenCfg or {}
end

function i3k_game_context:getReCfg()
	self:formateStrengthenCfg()
	return self._reCfg or {}
end

-- 设置小地图寻路终点的位置
function i3k_game_context:setMiniMapTargetPos(data)
	self._miniMapTargetPos = data
	if data then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_SceneMap, "createTargetPosWithoutSize", data)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_DungeonMap, "createTargetPosWithoutSize", data)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_DesertBattleMiniMap, "createTargetPosWithoutSize", data) --决战荒漠
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_CatchSpiritMap, "createTargetPosWithoutSize", data)
	else
		clearTargetImg()
	end
end
function i3k_game_context:getMiniMapTargetPos()
	return self._miniMapTargetPos
end
function i3k_game_context:setMiniMapTargetPosMapID(id)
	self._miniMapTargetPosMapID = id
end
function i3k_game_context:getMiniMapTargetPosMapID()
	return self._miniMapTargetPosMapID
end

-- 设置一个表，来存当前那些npc需要隐藏
function i3k_game_context:setMiniMapNPC(data)
	self._miniMapNPCs = data
end

function i3k_game_context:getMiniMapNPC()
	return self._miniMapNPCs
end

function i3k_game_context:SetFameLevel(lvl)
	self._fameLevel = lvl or 0
end

function i3k_game_context:GetFameLevel(lvl)
	return self._fameLevel
end

function i3k_game_context:setTempFameIndex( idx )
	self.fameIndex =  idx
end
function i3k_game_context:getTempFameIndex()
	return self.fameIndex
end
function i3k_game_context:GetFameNpcDialogueLvl(fameLvlList)
	for i = 1 , #fameLvlList do
		if self._fameLevel < fameLvlList[i] then
			if i == 1 then
				return 0
			else
				return fameLvlList[i-1]
			end
		end
	end
	return fameLvlList[#fameLvlList]
end

function i3k_game_context:setHeirloomData( info )
--[[
	isOpen --是否取出
	dayWipeTimes -- 每天擦拭次数
	wipeTimes --
	perfectDegree --完美度
	padding1
	padding2
]]	if info.heirloomStrength and info.heirloomStrength.props then
		self._heirloomStrength.StrengthPro = info.heirloomStrength.props;
	end
	self._heirloomStrength.PropIndex = info.heirloomStrength.curStrengthPropIndex;
	self._heirloomStrength.curStrengthIndex = info.heirloomStrength.curStrengthIndex
	self._heirloomStrength.layer = info.heirloomStrength.rank;
	self._heirloomStrength.dayStrengthTime = info.heirloomStrength.dayStrengthTime;
	self.heirloom = info
end

function i3k_game_context:getHeirloomData(  )
	return self.heirloom
end
function i3k_game_context:setHeirloomOpen( )
	self.heirloom.isOpen = 1
	g_i3k_game_context:LeadCheck()
	g_i3k_game_context:SetPrePower()
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	g_i3k_game_context:ShowPowerChange()
end

--[[function i3k_game_context:setHeirloomDisPlay(value)
	self.heirloom.display = value or 1
end--]]

function i3k_game_context:setHeirloomDataInfo( value )
	self.heirloom.perfectDegree = self.heirloom.perfectDegree + value
	if self.heirloom.perfectDegree > i3k_db_chuanjiabao.cfg.topcount then
		self.heirloom.perfectDegree = i3k_db_chuanjiabao.cfg.topcount
	end
	self.heirloom.dayWipeTimes =  self.heirloom.dayWipeTimes + 1
	g_i3k_game_context:SetPrePower()
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	g_i3k_game_context:ShowPowerChange()
end

function i3k_game_context:setStrengthPropIndex(index)
	self._heirloomStrength.curStrengthIndex = 0;
	self._heirloomStrength.PropIndex = index;
end

function i3k_game_context:setCurStrengthIndex(Index)
	self._heirloomStrength.curStrengthIndex = Index;
end

function i3k_game_context:setStrengthPercent(percent)
	self._heirloomStrength.percent = percent;
end

function i3k_game_context:RefreshDayStrengthTime()
	self._heirloomStrength.dayStrengthTime = 0;
end

function i3k_game_context:setHeirloomStrengthData()
	local hero = i3k_game_get_player_hero()
	self._heirloomStrength.dayStrengthTime = self._heirloomStrength.dayStrengthTime + 1;
	self:UpdateStrengthPro();
	g_i3k_game_context:SetPrePower()
	hero:UpdateHeirloomStrength();
	g_i3k_game_context:ShowPowerChange()
end

function i3k_game_context:getHeirloomStrengthData()
	return self._heirloomStrength;
end

function i3k_game_context:CheckHeirloomStrengMax()
	local strengthData = i3k_db_chuanjiabao_strength.strength[self._heirloomStrength.layer];
	if self._heirloomStrength.StrengthPro and self._heirloomStrength.StrengthPro[ePropID_atkN] and self._heirloomStrength.StrengthPro[ePropID_defN] and self._heirloomStrength.StrengthPro[ePropID_maxHP] then
		if self._heirloomStrength.layer <= #i3k_db_chuanjiabao_strength.strength then
			if self._heirloomStrength.StrengthPro[ePropID_atkN] >= strengthData.pro1 and self._heirloomStrength.StrengthPro[ePropID_defN] >= strengthData.pro2 and self._heirloomStrength.StrengthPro[ePropID_maxHP] >= strengthData.pro3 then
				return true;
			end
		end
	end
	return false;
end

function i3k_game_context:UpdateStrengthPro()
	local pro = i3k_db_chuanjiabao_strength.strength[self._heirloomStrength.layer];
	local colorBet = i3k_db_chuanjiabao_strength.colorBet[self._heirloomStrength.curStrengthIndex].rate
	local pros = i3k_db_chuanjiabao_strength.pros[self._heirloomStrength.PropIndex];
	local value = nil;
	local checkNum = nil;
	local curProTotal = nil;
	value = pros.value * colorBet;
	if self._heirloomStrength.percent then
		value = value * self._heirloomStrength.percent;
	end
	if self._heirloomStrength.PropIndex == g_ATK then
		curProTotal = pro.pro1;
	elseif self._heirloomStrength.PropIndex == g_DEF then
		curProTotal = pro.pro2;
	elseif self._heirloomStrength.PropIndex == g_HP then
		curProTotal = pro.pro3;
	end
	if self._heirloomStrength.StrengthPro and self._heirloomStrength.StrengthPro[pros.proID] then
		checkNum = i3k_check_heirloom_strength(self._heirloomStrength.StrengthPro[pros.proID], value, curProTotal);
	else
		checkNum = i3k_check_heirloom_strength(0, value, curProTotal);
	end
	if checkNum then
		value = checkNum
	end

	if self._heirloomStrength.StrengthPro and self._heirloomStrength.StrengthPro[pros.proID] then
		self._heirloomStrength.StrengthPro[pros.proID] = self._heirloomStrength.StrengthPro[pros.proID] + value
	else
		self._heirloomStrength.StrengthPro[pros.proID] = value
	end
end

function i3k_game_context:HeirloomStrengthTotal(props)
	local hpPro = 0;
	local defPro = 0;
	local atkPro = 0;
	local strengthData = nil;
	local isMax = false;
	local isLayer = false;
	if not i3k_db_chuanjiabao_strength then
		return
	end
	if self._heirloomStrength.layer > #i3k_db_chuanjiabao_strength.strength  then
		isMax = true;
	end

	if self._heirloomStrength.layer == #i3k_db_chuanjiabao_strength.strength then
		if g_i3k_game_context:CheckHeirloomStrengMax() then
			isLayer = true;
		end
	end

	if isMax then
		strengthData = i3k_db_chuanjiabao_strength.strength[self._heirloomStrength.layer - 1];
	else
		strengthData = i3k_db_chuanjiabao_strength.strength[self._heirloomStrength.layer];
	end

	for k,v in ipairs(i3k_db_chuanjiabao_strength.strength) do
		if k == self._heirloomStrength.layer then
			break;
		end
		atkPro = atkPro + v.pro1;
		defPro = defPro + v.pro2;
		hpPro = hpPro + v.pro3;
	end

	if (not isMax and self._heirloomStrength.StrengthPro[ePropID_atkN]) or isLayer  then
		atkPro = atkPro + self._heirloomStrength.StrengthPro[ePropID_atkN];
	end

	if (not isMax and self._heirloomStrength.StrengthPro[ePropID_defN]) or isLayer then
		defPro = defPro + self._heirloomStrength.StrengthPro[ePropID_defN];
	end

	if (not isMax and self._heirloomStrength.StrengthPro[ePropID_maxHP]) or isLayer  then
		hpPro = hpPro + self._heirloomStrength.StrengthPro[ePropID_maxHP];
	end
	for k,v in pairs(i3k_db_chuanjiabao_strength.pros) do
		if ePropID_atkN == v.proID then
			self._heirloomStrength.StrengthProTotal[v.proID] = atkPro;
		end
		if ePropID_defN == v.proID then
			self._heirloomStrength.StrengthProTotal[v.proID] = defPro;
		end
		if ePropID_maxHP == v.proID then
			self._heirloomStrength.StrengthProTotal[v.proID] = hpPro;
		end
	end
end

function i3k_game_context:getHeirloomStrengthProps()
	self:HeirloomStrengthTotal();
	local props = {}
	if self.heirloom.isOpen == 1 and self._heirloomStrength then
		for k,v in pairs(i3k_db_chuanjiabao_strength.pros) do
			for k1,v1 in pairs(self._heirloomStrength.StrengthProTotal) do
				if v.proID == k1 then
					if v.proID and v.proID > 0 and v1 > 0 then
						if not props[v.proID] then
							props[v.proID] = v1
						else
							props[v.proID] = props[v.proID] + v1
						end
					end
				end
			end
		end
	end
	return props
end

function i3k_game_context:ClearHeirloomStrengthData()
	if self._heirloomStrength.layer < #i3k_db_chuanjiabao_strength.strength  then
		self._heirloomStrength.layer = self._heirloomStrength.layer + 1;
		self._heirloomStrength.StrengthPro = {};
	end
end

function i3k_game_context:getHeirloomProps()
	local cfg = {}
	local props = {}
	if self.heirloom and self.heirloom.isOpen == 1 then
		for i = #i3k_db_chuanjiabao.props , 1 , -1 do
			if self.heirloom.perfectDegree >= i3k_db_chuanjiabao.props[i].wanmeidu  then
				cfg = i3k_db_chuanjiabao.props[i]
				break
			end
		end
		for i = 1, 5 do
			local id = cfg["property"..i.."id"]
			local value = cfg["property"..i.."value"]

			if id and id > 0 and value > 0 then
				if not props[id] then
					props[id] = value
				else
					props[id] = props[id] + value
				end
			end
		end
	end
	return props
end

function i3k_game_context:getHeirloomIconID()
	return i3k_db_chuanjiabao.cfg["iconid"..self:GetRoleType()]
end

function i3k_game_context:getHeirloomSkinID(roletype)
	local mtype = roletype or self:GetRoleType()
	return i3k_db_chuanjiabao.cfg["pengpiId"..mtype]
end

function i3k_game_context:getNeijiaImgIds(iValue)
	local integer = math.floor(iValue)
	local result = {}
	while(integer >= 1) do
		table.insert(result, integer % 10)
		integer = math.floor(integer / 10)
	end
	return result
end

-- 根据一个内甲值，返回一个需要显示图片数字的id
function i3k_game_context:getNeijiaImgIdByValue(type, iValue)
	local imgID = NEIJIA_MAOZI_IMG[type]
	local result = {}
	table.insert(result, imgID)
	local integers = self:getNeijiaImgIds(iValue)
	for i = #integers, 1, -1 do
		local intImgId = imgID + 1 + integers[i]
		table.insert(result, intImgId)
	end
	return result
end

function i3k_game_context:setFirstCreateRoleFlag(bValue)
	self._firstCreateRoleFlag = bValue
end

function i3k_game_context:getFirstCreateRoleFlag()
	return self._firstCreateRoleFlag
end

function i3k_game_context:SetRetrieveActData(info)
	self._retrieveActData.lastTimes = info.lastTimes
	self._retrieveActData.dayBuyTimes = info.dayBuyTimes
end

function i3k_game_context:GetRetrieveActData()
	return self._retrieveActData
end

function i3k_game_context:ChangeRetrieveActData(groupId, times)
	local rdb = self._retrieveActData
	rdb.lastTimes[groupId] = rdb.lastTimes[groupId] - 1
	if rdb.dayBuyTimes[groupId] then
		rdb.dayBuyTimes[groupId] = rdb.dayBuyTimes[groupId] + 1
	else
		rdb.dayBuyTimes[groupId] = 1

	end
end

function i3k_game_context:IsRetrieveActExist()
	local exist = false
	local canShowDay = false
	local canShowHour = false
	local notShowDay = 0

	local nowDay = g_i3k_get_day(i3k_game_get_time()) or 0
	local timeStamp = g_i3k_get_GMTtime(i3k_game_get_time())
	local hour = tonumber(os.date("%H", timeStamp))
	if hour >= gDay_Refresh_Time then--当前时间大于活动刷新时间
		canShowHour = true
	end
	for k,v in pairs(self._retrieveActData.lastTimes) do
		if v > 0 then
			exist =  true
			break
		end
	end

	local cfg = g_i3k_game_context:GetUserCfg()
	if cfg then
		notShowDay = cfg:GetNotShowDay()
	end
	if nowDay - notShowDay >= 1 then
		canShowDay = true
	end

	if exist and canShowDay and canShowHour then
		g_i3k_ui_mgr:OpenUI(eUIID_RetrieveActivityTip)
	else
		g_i3k_ui_mgr:CloseUI(eUIID_RetrieveActivityTip)
	end
	return exist and canShowDay and canShowHour
end

------------下载资源分包相关-------------------
-- function i3k_game_context:setExtPackId(id)
-- 	self._extPackId = id
-- end
-- function i3k_game_context:getExtPackId()
-- 	return self._extPackId
-- end
-- function i3k_game_context:setExtPackState(state)
-- 	self._extPackState = state
-- end
-- function i3k_game_context:getExtPackState()
-- 	return self._extPackState
-- end
--
-- function i3k_game_context:setExtPackCurSize(cur)
-- 	self._extPackCurSize = cur
-- end
-- function i3k_game_context:setExtPackTotalSize(total)
-- 	self._extPackTotalSize = total
-- end
-- function i3k_game_context:getExtpackPercent()
-- 	local cur = self._extPackCurSize or 0
-- 	local total = self._extPackTotalSize or 100
-- 	return cur / total * 100
-- end
------------------------------------------------
-- 判断神兵能量是否在增加
function i3k_game_context:setWeaponRisingStatus(percent)
	if self:IsInSuperMode() then
		local hero = i3k_game_get_player_hero()
		if not hero:IsDead() then
			self._weaponRisingStatus = false
		end
	else
		if percent >= 100 then
			self._weaponRisingStatus = false
		else
			self._weaponRisingStatus = true
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "stopWeaponFullAnis")
		end
	end
	-- 可以做成在变身结束之后，来设置状态，这样就不会出现点击时变成绿色的了
	if percent <= 1 then
		-- self._weaponRisingStatus = true
		self:clearWeaponStatus()
	end
end
-- 切地图，神兵状态必然清空
function i3k_game_context:clearWeaponStatus()
	self._weaponRisingStatus = true
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "setWeaponImg")
end

function i3k_game_context:getWeaponRisingStatus()
	return self._weaponRisingStatus
end

function i3k_game_context:buyEquipUseCredit(price, count, type)
	local needCreditTypes = i3k_db_common.aboutAuction.needCreditTypes
	if needCreditTypes[type] then
		return math.ceil(i3k_db_common.aboutAuction.consumeHonor * price * count)
	end
	return 0
end

function i3k_game_context:SetMapCopyDamageRank(damageRank)
	self._damageRank = damageRank
end

function i3k_game_context:GetMapCopyDamageRank()
	return self._damageRank
end

-- 单机副本输出变化更新
function i3k_game_context:OnDamageChangedHandler(damageRank)
	self:SetMapCopyDamageRank(damageRank)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleFuben, "updateOutPut")
end

-- 特权卡
function i3k_game_context:setRoleSpecialCardsReward(cardType, value)
	self._specialCards[cardType].reward = value
end
function i3k_game_context:setRoleSpecialCards(cards)
	self._specialCards = cards
	if cards[WEEK_CARD].reward == 0 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PayActivity, "updateSpecialCardBoth")
	elseif cards[MONTH_CARD].reward == 0 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PayActivity, "updateSpecialCardBoth")
	elseif cards[SUPER_MONTH_CARD].reward == 0 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PayActivity, "updateSpecialCardBoth")
	end
	self:RefreshSpecialCardProps()
end

function i3k_game_context:getRoleSpecialCards(cardType)
	if self._specialCards then
		return self._specialCards[cardType]
	end
end

function i3k_game_context:getRoleSpecialCardsEndTime(cardType)
	if self._specialCards and self._specialCards[cardType] then
		return self._specialCards[cardType].cardEndTime
	end
	return 0
end
function i3k_game_context:checkSpecialCardConditionImpl(cardType)
	local weekCard = self:getRoleSpecialCards(cardType)
	if weekCard then
		if weekCard.cardEndTime then
			local nowtime = i3k_game_get_time()
			return nowtime < weekCard.cardEndTime
		else
			return false
		end
	else
		return false
	end
end

-- 直购礼包，检查特权卡是否满足条件
function i3k_game_context:checkSpecialCardCondition(cardRequire)
	if cardRequire == SPECIAL_CARD_NOT_NEED then
		return true
	end
	if cardRequire == SPECIAL_CARD_WEEK then
		return self:checkSpecialCardConditionImpl(WEEK_CARD)
	end
	if cardRequire == SPECIAL_CARD_MONTH then
		return self:checkSpecialCardConditionImpl(MONTH_CARD)
	end
	if cardRequire == SPECIAL_CARD_EIGHTER then
		local week = self:checkSpecialCardConditionImpl(WEEK_CARD)
		local month = self:checkSpecialCardConditionImpl(MONTH_CARD)
		return week or month
	end
	if cardRequire == SPECIAL_CARD_BOTH then
		local week = self:checkSpecialCardConditionImpl(WEEK_CARD)
		local month = self:checkSpecialCardConditionImpl(MONTH_CARD)
		return week and month
	end
end

-- 获取特权卡红点（包括月卡和逍遥月卡）
function i3k_game_context:getSpecialCardRedPoint()
	local month = self:getRoleSpecialCards(MONTH_CARD).reward == 0
	local superMonth = self:getRoleSpecialCards(SUPER_MONTH_CARD).reward == 0

	local monthEndtime = g_i3k_game_context:getRoleSpecialCards(MONTH_CARD).cardEndTime
	local superMonthEndtime = g_i3k_game_context:getRoleSpecialCards(SUPER_MONTH_CARD).cardEndTime

	local nowtime  = i3k_game_get_time()
	if nowtime >= monthEndtime then
		month = false
	end
	if nowtime >= superMonthEndtime then
		superMonth = false
	end
	return month or superMonth
end

-- 获取特权卡附加属性
function i3k_game_context:GetRoleSpecialCardsProps()
	local props = {}
	local roleLvl = self:GetLevel()
	for i, e in ipairs(i3k_db_special_card) do
		if self._specialCards[i] and self._specialCards[i].cardEndTime - i3k_game_get_time() > 0 then
			for _, b in ipairs(e.attr) do
				if not props[b.attr] then
					props[b.attr] = b.value * roleLvl
				else
					props[b.attr] = props[b.attr] > b.value * roleLvl and props[b.attr] or b.value * roleLvl
				end
			end
		end
	end
	return props
end

-- 刷新特权卡属性
function i3k_game_context:RefreshSpecialCardProps()
	local hero = i3k_game_get_player_hero()
	if hero and not i3k_game_get_player_real_hero() then
		g_i3k_game_context:SetPrePower()
		hero:UpdateSpecialCardProps()
		g_i3k_game_context:ShowPowerChange()
	end
end

--太玄碑文
function i3k_game_context:setStelaData(info, stlType, canMineral)
	self._stelaData.index = info.index
	self._stelaData.allFinish = info.allFinish
	self._stelaData.card = info.card
	self._stelaData.receiveTime = info.receiveTime
	self._stelaData.stlType = stlType
	self._stelaData.canContinue = canMineral or self._stelaData.canContinue
end

function i3k_game_context:NotCanMineralStela()
	if self._stelaData.canContinue == 1 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"removeStelaTaskItem")
		self:removeTaskData(TASK_CATEGORY_STELA)
		self._stelaData.canContinue = 0
	end
end

function i3k_game_context:updateSteleCard(card)
	g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(896,(card - self._stelaData.card)))
	self._stelaData.card = card
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateStelaCard", card or 0)
end

function i3k_game_context:addStelaMineCount()
	self._stelaData.index = self._stelaData.index + 1
	if self._stelaData.index > 1 then
		self:ChangeScheduleActivity(g_SCHEDULE_TYPE_STELE, 0)
	end
	local oneD = i3k_db_steleAct.stale[self._stelaData.stlType]
	if self._stelaData.index > #oneD then
		self._stelaData.allFinish = 1
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"removeStelaTaskItem")
		self:removeTaskData(TASK_CATEGORY_STELA)
		i3k_sbean.stele_sync_req_send()
	elseif self._stelaData.index == 1 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"insertStelaItem")
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateStelaTask")
	end
end

function i3k_game_context:clearStelaAct()
	self._stelaData.index = 0
	self._stelaData.allFinish = 0
	self._stelaData.card = 0
	self._stelaData.receiveTime = 0
	self._stelaData.stlType = 0
	self._stelaData.canContinue = 1
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"removeStelaTaskItem")
end

function i3k_game_context:getStelaActivityDB()
	local stlCfg = nil
	local oneD = i3k_db_steleAct.stale[self._stelaData.stlType]
	if oneD and self._stelaData.index >=1  and self._stelaData.index <= #oneD then
		stlCfg = oneD[self._stelaData.index]
	end
	return stlCfg
end

function i3k_game_context:getStelaActivityData()
	return self._stelaData
end

function i3k_game_context:setRightHeartEnterTimes(times)
	self._rightHeartEnterTimes  = times or 0
end
function i3k_game_context:updateRightHeartEnterTimes()
	self._rightHeartEnterTimes  = self._rightHeartEnterTimes + 1
end
function i3k_game_context:getRightHeartNowHadEnterTimes()
	return i3k_db_rightHeart.daytimes - self._rightHeartEnterTimes
end
function i3k_game_context:getRightHeartEnterTimes()
	return self._rightHeartEnterTimes
end

function i3k_game_context:setNpcDungeonEnterTimes(times)
	self._npdDungeonEnterTimes = times
end

function i3k_game_context:addNpcDungeonEnterTimes(groupId, count)
	local et = self._npdDungeonEnterTimes
	if et[groupId] then
		et[groupId] = et[groupId] + (count or 1)
	else
		et[groupId] = (count or 1)
	end
end

function i3k_game_context:getNpcDungeonEnterTimes(groupId)
	return self._npdDungeonEnterTimes[groupId] or 0
end
------------------------------伏魔洞start----------------------------
function i3k_game_context:SetDemonHoleInfo(curFloor, grade)
	self._demonholeData = {}
	self._demonholeData.curFloor = curFloor
	self._demonholeData.grade = grade
end

function i3k_game_context:GetDemonHoleFloorGrade()
	return self._demonholeData.curFloor, self._demonholeData.grade
end

function i3k_game_context:SetDemonHoleBossState(state)
	self._demonholeBossState = state
end

function i3k_game_context:GetDemonHoleBossState()
	return self._demonholeBossState
end
------------------------------伏魔洞end----------------------------

function i3k_game_context:GetAnnunciateData()
	return self._annunciate
end

function i3k_game_context:SetAnnunciatePrestige(prestige)
	self._annunciate.prestige = prestige or self._annunciate.prestige
end

function i3k_game_context:getAnnunciateMaxTime()
	local endTime = 0
	local nowTime = math.mod(i3k_game_get_time(),86400)
	for i,v in ipairs(i3k_db_annunciate.time) do
		if nowTime > v.startTime and nowTime < v.endTime then
			for _,v1 in ipairs(v.actIdList) do
				if v1 == self._annunciate.actId then
					endTime = v.endTime
					break
				end
			end
			if v.endTime > 0 then
				break
			end
		end
	end
	return endTime - math.mod(i3k_game_get_time(),86400)
end

function i3k_game_context:SetAnnunciateActIdfromMapID(mapId)
	for i,v in ipairs(i3k_db_annunciate.activity) do
		if v.actMapId == mapId then
			self._annunciate.actId = i
			break
		end
	end
end

function i3k_game_context:SetAnnunciateCoolTime(time)
	self._annunciate.cooltime = time or 0
end

function i3k_game_context:IsInAnnunciateCoolTime()
	return (i3k_game_get_time() - self._annunciate.cooltime) > 10
end

----------约战npc相关start----------------------------------------
function i3k_game_context:SetFightNpcInfo(info)
	self._fightNpc = info
end

function i3k_game_context:GetFightNpcInfo()
	return self._fightNpc
end

function i3k_game_context:GetFightNpcId()
	return (self._fightNpc.group and i3k_db_fight_npc[self._fightNpc.group][self._fightNpc.curIndex]) and i3k_db_fight_npc[self._fightNpc.group][self._fightNpc.curIndex].npcId or 0
end

function i3k_game_context:ChangeFightNpcCurIndex(coolTime)
	local cfg = i3k_db_fight_npc[self._fightNpc.group]
	self._fightNpc.coolTime = coolTime
	if cfg[self._fightNpc.curIndex + 1] then
		self._fightNpc.curIndex = self._fightNpc.curIndex + 1
	else
		self._fightNpc.curIndex = -1
	end
	self._fightNpc.state = 0
	self:OnFightNpcStateChangedHandler(self:TestFightNpcState())
end

function i3k_game_context:SetFightNpcState(state)
	self._fightNpc.state = state
end

function i3k_game_context:TestFightNpcState()
	local condition = self:GetFightNpcCondition()
	local isShowIcon = condition > 0 and i3k_game_get_time() > self._fightNpc.coolTime
	return isShowIcon, isShowIcon
end

function i3k_game_context:GetFightNpcCondition()
	local fightInfo = self._fightNpc
	if not self._fightNpc.group then
		return 0
	end
	local cfg = i3k_db_fight_npc[fightInfo.group][fightInfo.curIndex]
	if not cfg then
		return 0
	end
	if fightInfo.state == 1 then --已经击败npc
		return f_CONDITION_STATE_FIININSH
	end

	if self:GetFightNpcIsAccord(cfg.openType, cfg.openTypeArg) then
		return f_CONDITION_STATE_OPEN
	end

	if self:GetFightNpcIsAccord(cfg.triggerType, cfg.triggerTypeArg) then
		return f_CONDITION_STATE_TRIGGER
	end
	return 0
end

function i3k_game_context:GetFightNpcDesc()
	local fightInfo = self._fightNpc
	if not self._fightNpc.group then
		return 0
	end
	local cfg = i3k_db_fight_npc[fightInfo.group][fightInfo.curIndex]
	if not cfg then
		return 0
	end
	if fightInfo.state == 1 then --已经击败npc
		return i3k_get_string(cfg.taskRewardTxt)
	end

	if self:GetFightNpcIsAccord(cfg.openType, cfg.openTypeArg) then
		return i3k_get_string(cfg.openTxt,g_i3k_make_color_string(cfg.openTypeArg[1], g_i3k_get_green_color()))
	end

	if self:GetFightNpcIsAccord(cfg.triggerType, cfg.triggerTypeArg) then
		roleValue = self:GetNowArgByCondition(cfg.triggerType,cfg.openTypeArg[1])
		return i3k_get_string(cfg.triggerTxt, roleValue)
	end
	return 0
end

function i3k_game_context:getFightNpcTrgetValue(target)
	local roleValue = 0
	if target == f_CONDITION_LVL then
		roleValue = self:GetLevel()
	elseif target == f_CONDITION_POWER then
		roleValue = self:GetRolePower()
	elseif target == f_CONDITION_XINFA then
		roleValue = self:GetXinfaTotalLvl()
	elseif target == f_CONDITION_SHENBING then
		roleValue = self:GetShenbingTotalStartLvl()
	elseif target == f_CONDITION_STEEDALLSTART then
		roleValue = self:getAllSteedStar()
	elseif target == f_CONDITION_CANGSHU then
		roleValue = self:GetAllBooksLevel()
	elseif target == f_CONDITION_UNDERWEAR then
		roleValue = self:getAllUnderWearMaxLvl()
	end
	return roleValue
end

function i3k_game_context:GetFightNpcIsAccord(condition, conditionArg)
	local isAccord = 0
	for i, e in ipairs(condition) do
		local argValue = conditionArg[i]
		local roleValue = self:getFightNpcTrgetValue(e)
		isAccord = roleValue >= argValue and isAccord + 1 or isAccord
	end
	return isAccord == #condition
end
function i3k_game_context:GetNowArgByCondition(condition, targetValue)
	local roleValue = 0
	for i, e in ipairs(condition) do
		roleValue = self:getFightNpcTrgetValue(e)
	end
	if roleValue >= targetValue then
		roleValue = g_i3k_make_color_string(roleValue, g_i3k_get_green_color())
		return roleValue
	elseif roleValue < targetValue then
		local desc = "(".. tostring(roleValue).. "/"..tostring(targetValue).. ")"
		desc = g_i3k_make_color_string(desc, g_i3k_get_red_color())
		return desc
	end
end
-- 获取心法总等级
function i3k_game_context:GetXinfaTotalLvl()
	local allXinfa =  g_i3k_game_context:GetXinfa()
	local totalLvl = 0
	for _, v in pairs(allXinfa._zhiye) do
		totalLvl = totalLvl + v
	end

	for _, v in pairs(allXinfa._jianghua) do
		totalLvl = totalLvl + v
	end

	for _, v in pairs(allXinfa._paibie) do
		totalLvl = totalLvl + v
	end

	return totalLvl
end
--获取气功总激活个数
function i3k_game_context:GetXinfaJiHuoNum()
	local count = 0
	local allXinfa = g_i3k_game_context:GetXinfa()
 	for _,_ in pairs(allXinfa._zhiye) do
		count = count + 1
	end
	return count
end

-- 获取神兵总星级
function i3k_game_context:GetShenbingTotalStartLvl()
	local allShenbing = self._shenBing.all
	local totalStarLvl = 0
	for _, v in pairs(allShenbing) do
		totalStarLvl = totalStarLvl + v.slvl
	end
	return totalStarLvl
end

--获取满星神兵数量
function i3k_game_context:getMaxStartShenbingNum()
	local num = 0

	for _, v in pairs(self._shenBing.all) do
		local maxNum = #i3k_db_shen_bing_upstar[v.id]

		if maxNum <= v.slvl then
			num = num + 1
		end
	end

	return num
end
----------约战npc相关end----------------------------------------

function i3k_game_context:GotoNpc(npcId, callBack, isNeedTrans)
	local tips = self:GetNotEnterTips() or self:GetNotEnterMapIdTips()
	if tips then
		return g_i3k_ui_mgr:PopupTipMessage(tips)
	end

	local pos = self:getNPCRandomPos(npcId)
	local mapId = g_i3k_db.i3k_db_get_npc_map_id(npcId)
	local tbl = {flage = g_TRANSPORT_TO_NPC, mapId = mapId, areaId = npcId, npcPos = g_i3k_db.i3k_db_get_npc_pos(npcId)}
	if isNeedTrans and self:doTransport(tbl) then
		return
	end
	self:SeachPathWithMap(mapId, pos, nil,nil, tbl, nil, nil, callBack)
end

function i3k_game_context:GotoMonsterPos(monsterId, callBack)
	local mapId = g_i3k_db.i3k_db_get_monster_map_id(monsterId)
	local pos = g_i3k_db.i3k_db_get_monster_pos(monsterId)
	local tbl = {flage = g_TRANSPORT_TO_MONSTER, mapId = mapId, areaId = monsterId}
	self:SeachPathWithMap(mapId, pos, nil,nil, tbl, nil, nil, callBack)
end

function i3k_game_context:GotoTaskTriggerMonsterPos(mapId, pos, pointID, callBack)
	local tbl = {flage = g_TRANSPORT_TO_SPAWNMONSTER, areaId = pointID, mapId = mapId}
	self:SeachPathWithMap(mapId, pos, nil,nil, tbl, nil, nil, callBack)
end
-- 寻路到某个点
function i3k_game_context:GotoPos(mapId, pos, callBack, force)
	local tbl = {flage = g_TRANSPORT_TO_JUBILEE, mapId = mapId}
	self:SeachPathWithMap(mapId, pos, nil, nil, tbl, nil, nil, callBack, nil, nil, force)
end

function i3k_game_context:setOpenTaskState(state)
	self._isOpenTask = state
end

function i3k_game_context:getOpenTaskState()
	return self._isOpenTask
end

--幸运星
function i3k_game_context:SetLuckyStarData(info)
	self._luckyStar.dayRecvTimes = info.dayRecvTimes 	 --接收幸运星的次数
	self._luckyStar.dayRewardTimes = info.dayRewardTimes --接受奖励的次数
	self._luckyStar.lastGiftTimes = info.lastGiftTimes   --发送奖励的次数
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB,"updateFriendRed")
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_Friends,"updateLuckStarRed")
end

function i3k_game_context:GetLuckyStarData()
	return self._luckyStar
end

function i3k_game_context:subtractGiveGiftTimes()
	self._luckyStar.lastGiftTimes = self._luckyStar.lastGiftTimes - 1
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB,"updateFriendRed")
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_Friends,"updateLuckStarRed")
end

function i3k_game_context:IsUpdateLuckStart()
	return self._luckyStar.lastGiftTimes > 0
end

function i3k_game_context:GetLuckyStarDB()
	local reward
	local selfLvl = self:GetLevel()
	for i,v in ipairs(i3k_db_luckyStar.rewards) do
		if selfLvl >= v.lvlFloor then
			reward = v
		end
	end

	return reward.items
end

function i3k_game_context:SetWarnEffectCache(info)
	self._WarnEffect[info.warnID] = {warnID = info.warnID, logicTick = info.logicTick, manager = info.manager, warnTime = info.warnTime}
end

function i3k_game_context:GetWarnEffectCache()
	if self._WarnEffect then
		return self._WarnEffect;
	end
end

function i3k_game_context:ClearWarnEffectCache(warnID)
	self._WarnEffect[warnID] = nil;
end

function i3k_game_context:SetOnlineVoiceRoomId(RoomId)
	-- self._onlineVoiceId = RoomId
	-- g_i3k_game_handler:YayaChatEnterRoom(RoomId)
end

function i3k_game_context:clearOnlineVoiceRoomId()
	-- if self._onlineVoiceId then
	-- 	self._onlineVoiceId = nil
	-- 	g_i3k_game_handler:YayaChatLeaveRoom()
	-- end
end

function i3k_game_context:SetLoginServerName(name)
	self._loginQueue.serverName = name
end

function i3k_game_context:SetLoginQueuePos(pos)
	self._loginQueue.pos = pos
end

function i3k_game_context:GetLoginQueueData()
	return self._loginQueue
end

function i3k_game_context:SetMulHorseCallbackFunc(func)
	self._mulHorseCallbackFunc = func
end

function i3k_game_context:GetMulHorseCallbackFunc(func)
	return self._mulHorseCallbackFunc
end

function i3k_game_context:setWoodManDamage(guid, monsterId, damage)
	if g_i3k_ui_mgr:GetUI(eUIID_woodManShare) then
		return
	end

	local wmd = self._woodManDamage
	local isNew = false
	if wmd.lastTime ~= 0 and i3k_game_get_time() - wmd.lastTime > i3k_db_common.woodMan.finishTime then
		wmd.guid = ""
		isNew = true
	elseif wmd.guid ~= "" and wmd.guid ~= guid then
		return
	end

	if wmd.guid ~= guid then
		wmd.damageCnt = 0
		wmd.guid = guid
		wmd.startTime = i3k_game_get_time()
		wmd.monsterId = monsterId
	end

	wmd.damageCnt = wmd.damageCnt + damage
	wmd.lastTime = i3k_game_get_time()

	if not g_i3k_logic:IsRootUIBattle() then
		return
	end

	if not g_i3k_ui_mgr:GetUI(eUIID_woodMan) then
		g_i3k_ui_mgr:OpenUI(eUIID_woodMan)
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_woodMan, wmd.damageCnt, monsterId, isNew)
end

function i3k_game_context:GeyWoodManDamage()
	return self._woodManDamage
end

function i3k_game_context:clearWoodManDamage()
	local wmd = self._woodManDamage
	wmd.damageCnt = 0
	wmd.startTime = 0
	wmd.lastTime = 0
	wmd.monsterId = 0
	wmd.guid = ""
end

function i3k_game_context:CheckOpenWoodMan()
	local wmd = self._woodManDamage
	if wmd.lastTime == 0 or i3k_game_get_time() - wmd.lastTime > i3k_db_common.woodMan.finishTime then
		g_i3k_game_context:clearWoodManDamage()
		return
	end
	if not g_i3k_ui_mgr:GetUI(eUIID_woodMan) then
		g_i3k_ui_mgr:OpenUI(eUIID_woodMan)
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_woodMan, wmd.damageCnt, wmd.monsterId)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_woodMan, "InitTimeStart", wmd.lastTime - wmd.startTime, wmd.damageCnt)
end

function i3k_game_context:GetPrayTimes( prayId )
	return (self._prayTimes[prayId] == nil and 0 ) or self._prayTimes[prayId]
end

function i3k_game_context:SetPrayTimes( prayId, times )
	self._prayTimes[prayId] = times
end

function i3k_game_context:SetCurrMapCanReward(canRew)
	self._currMapCanGetRewards = canRew
end

function i3k_game_context:GetCurrMapCanReward()
	return self._currMapCanGetRewards
end

function i3k_game_context:initFPSLimitValue()
	local cfg = g_i3k_game_context:GetUserCfg()
	local limitLevel = cfg:GetFPSLimit()
	if limitLevel > 0 then
		self:setFPSLimitValue(limitLevel)
		i3k_fps_limit(FPS_LIMIT[limitLevel])
	end
end
-- value = -1/1/2/3
function i3k_game_context:setFPSLimitValue(value)
	self._fpsLimitValue = value
end

function i3k_game_context:getFPSLimitValue()
	return self._fpsLimitValue or #FPS_LIMIT
end

function i3k_game_context:initAutoFightRadius()
	local cfg = g_i3k_game_context:GetUserCfg()
	local value = cfg:GetAutoFightRadius()
	if value > 0 then
		self:setAutoFightRadius(value)
	end
end

function i3k_game_context:setAutoFightRadius(value)
	self._autoFightRadius = value;
end

function i3k_game_context:getAutoFightRadius()
	if self._autoFightRadius then
		return self._autoFightRadius;
	end
end
-- 返回是否在省电模式
function i3k_game_context:getIsOnPowerSaveMode()
	local cfg = self:GetUserCfg()
	local list = cfg:GetPowerSave()
	return #list ~= 0
end
-- 守护副本相关
function i3k_game_context:setTowerDefenceLogs(logs)
	self._towerDefenceLogs = logs
end

function i3k_game_context:getTowerDefenceDayEnterTimes(mapId)
	return self._towerDefenceLogs[mapId] and self._towerDefenceLogs[mapId].dayEnterTimes or 0
end

function i3k_game_context:addTowerDefenceDayEnterTimes(mapId)
	if self._towerDefenceLogs[mapId] then
		self._towerDefenceLogs[mapId].dayEnterTimes = self._towerDefenceLogs[mapId].dayEnterTimes + 1
	else
		self._towerDefenceLogs[mapId] = {}
		self._towerDefenceLogs[mapId].dayEnterTimes = 0
		self._towerDefenceLogs[mapId].dayEnterTimes = self._towerDefenceLogs[mapId].dayEnterTimes + 1
	end
end

function i3k_game_context:ResetTowerDefenceDayEnterTimes()
	for _, v in pairs(self._towerDefenceLogs) do
		v.dayEnterTimes = 0
	end
end

-- 获取守护活动是否还可进入
function i3k_game_context:getTowerDefenceIsCanEnter(mapId)
	return i3k_db_defend_cfg[mapId].enterTimes > self:getTowerDefenceDayEnterTimes(mapId)
end

--记录守护副本临时数据
function i3k_game_context:setTowerDefenceTmpInfo(score, count)
	self._towerDefenceTmpInfo.score = score
	self._towerDefenceTmpInfo.count = count
end

function i3k_game_context:getTowerDefenceTmpInfo()
	return self._towerDefenceTmpInfo
end

function i3k_game_context:setTowerDefenceTargetHp(curHp, maxHp)
	self._towerDefenceTmpInfo.curHp = curHp
	self._towerDefenceTmpInfo.maxHp = maxHp
end

function i3k_game_context:getTowerDefenceTargetHp()
	return self._towerDefenceTmpInfo.curHp, self._towerDefenceTmpInfo.maxHp
end

function i3k_game_context:getMissionId()
	local hero =  i3k_game_get_player_hero()
	if hero then
	    return hero._missionMode.id
	end
	return 0 ;
end

-- 正邪道场对手信息
function i3k_game_context:setTaoistEnemy(enemies)
	self._taoistEnemies = enemies
end

function i3k_game_context:getTaoistEnemy()
	return self._taoistEnemies
end


--------------------------  师徒相关处理函数 BEGIN ----------------------
function i3k_game_context:SetMasterInfo(data)
--data is i3k_sbean.master_info_res
	self._masterData.masterId = data.masterRoleID
	self._masterData.apptcNum = data.apprenticeCount
	self._masterData.dismiss_time  = data.lastDismissTime
	self._masterData.rebel_time = data.lastBetrayTime
	self._masterData.apply_grad_time = data.lastReqGraduateTime
	self._masterData.announce = data.masterAnnounce
	self._masterData.memInfo = { }
	self._masterData.reputation = data.reputation
	if data.members~=nil then
		for i=1,#data.members do
			local m = data.members[i]
			table.insert(self._masterData.memInfo,{role=m.overView, online=m.online, point=m.point})
		end
	end
end

-- 获得师傅的roleid
function i3k_game_context:GetMasterRoleId()
	return self._masterData.masterId
end

-- 判断玩家是否是师傅
function i3k_game_context:CheckIsMaster(roleID)
	if self._masterData and self._masterData.masterId and self._masterData.masterId == roleID then
		return true
	elseif self._master_brief.masterId and self._master_brief.masterId == roleID then
		return true
	else
		return false
	end
end

-- 判断玩家是否是徒弟
function i3k_game_context:CheckIsStudent(roleID)
	local mem = self:GetMasterMemberList()
	if mem then
		for index, info in ipairs(mem) do
			if info.role.id == roleID then
				return true
			end
		end
	end
	return false
end

-- 设置获取收徒轩辕
function i3k_game_context:SetMasterAnnounce(ann)
	self._masterData.announce = ann
end

function i3k_game_context:GetMasterAnnounce()
	return self._masterData.announce
end

function i3k_game_context:checkClearMasterMessageRedPoint()
	if not self:getMasterMessageRedPoint() then
		self:clearMasterRedPoint()
	end
end

function i3k_game_context:getMasterMessageRedPoint()
	local msgList = self:GetMasterMsgList()
	if not msgList then
		return false
	end
	local msgSize = #msgList.applyList + #msgList.betrayList + #msgList.graduateReqList
	return msgSize > 0
end

-- 获得师徒成员列表
function i3k_game_context:GetMasterMemberList()
	return self._masterData.memInfo
end

-- 获得玩家的师徒关系状态
function i3k_game_context:GetMasterRelationState()
	if self._masterData==nil then
		return e_State_Master_Unknown
	end
	if self._masterData.masterId>0 then
		return e_State_Apprtc
	end
	if self._masterData.apptcNum>0 then
		return e_State_Master
	end
	if self:GetLevel()>=i3k_db_master_cfg.cfg.master_min_lvl then
	-- can be master
		return e_State_BeMaster_NoApptc
	else
	-- can be apprentice
		return e_State_BeApptc_NoMaster
	end
end

-- 设置师傅的消息列表,res is i3k_sbean.master_msg_list_res
function i3k_game_context:SetMasterMsgList(res)
	local serverTime = i3k_game_get_time()
	serverTime = i3k_integer(serverTime)
	self._master_msgs.timestamp = serverTime

	if res.applyList~=nil then
		self._master_msgs.applyList = res.applyList
	else
		self._master_msgs.applyList = { }
	end

	if res.betrayList~=nil then
		self._master_msgs.betrayList = res.betrayList
	else
		self._master_msgs.betrayList = { }
	end

	if res.graduateReqList~=nil then
		self._master_msgs.graduateReqList = res.graduateReqList
	else
		self._master_msgs.graduateReqList = { }
	end
end
-- 获取师傅的消息列表
function i3k_game_context:GetMasterMsgList()
	return self._master_msgs
end
-- 徒弟叛师成功，记录叛师冷区时间
function i3k_game_context:ApprtcBetrayCoolDown()
	local now = i3k_game_get_time()
	now = i3k_integer(now)
	self._masterData.rebel_time = now
end
function i3k_game_context:IsApprtcBetrayCooling()
	local now = i3k_game_get_time()
	now = i3k_integer(now)
	if now - self._masterData.rebel_time < g_i3k_db.i3k_db_master_cfg.cfg.rebel_cooltime then
		return true
	else
		return false
	end
end
-- 师傅开除徒弟，记录冷却时间
function i3k_game_context:MasterDismissCoolDown()
	local now = i3k_game_get_time()
	now = i3k_integer(now)
	self._masterData.dismiss_time = now
end

function i3k_game_context:IsMasterDismissCooling()
	local now = i3k_game_get_time()
	now = i3k_integer(now)
	if now - self._masterData.dismiss_time < g_i3k_db.i3k_db_master_cfg.cfg.dismiss_cooltime then
		return true
	else
		return false
	end
end
-- 申请出师，记录冷却时间
function i3k_game_context:ApprtcApplyGradCoolDown()
	local now = i3k_game_get_time()
	now = i3k_integer(now)
	self._masterData.apply_grad_time = now
end

function i3k_game_context:IsApprtcApplyGradCooling()
	local now = i3k_game_get_time()
	now = i3k_integer(now)
	if now - self._masterData.apply_grad_time < g_i3k_db.i3k_db_master_cfg.cfg.apply_grad_cooltime then
		return true
	else
		return false
	end
end
-- 申请拜师冷却
function i3k_game_context:ApprtcApplyEnrollCoolDown(masterId)
	local now = i3k_game_get_time()
	now = i3k_integer(now)
	self._masterData.apply_time[masterId] = now
end
function i3k_game_context:IsApprtcApplyEnrollCooling(masterId)
	local applyTime = self._masterData.apply_time[masterId]
	if applyTime==nil then
		return false
	end
	local now = i3k_game_get_time()
	now = i3k_integer(now)
	if now - applyTime < g_i3k_db.i3k_db_master_cfg.cfg.apply_cooltime then
		return true
	else
		return false
	end
end

-- 设置师徒点
function i3k_game_context:SetMasterPoint(point)
	self._masterData.point = point
end
--  获取师徒点
function i3k_game_context:GetMasterPoint()
	return self._masterData.point
end
-- 增加师徒点
function i3k_game_context:AddMasterPoint(point)
	self._masterData.point = self._masterData.point + point
end
-- 减少师徒点
function i3k_game_context:UseMasterPoint(point)
	self._masterData.point = self._masterData.point - point
end
-- 设置师傅的良师值
function i3k_game_context:SetMasterReputation(rpt)
	self._masterData.reputation = rpt
end
-- 获得师傅的良师值
function i3k_game_context:GetMasterReputation()
	return self._masterData.reputation
end
-- 设置师徒关系摘要信息, data is i3k_sbean.master_brief_info_notice
function i3k_game_context:SetMasterBriefInfo(data)
	self._master_brief.masterId = data.master
	self._master_brief.apprtcList = data.apprentices
	self._master_brief.dismiss_time = data.lastDismissTime
	self._master_brief.betray_time = data.lastBetrayTime
end

function i3k_game_context:checkHasMaster()
	return self._master_brief.masterId and self._master_brief.masterId ~= 0
end

-- 获得师徒关系摘要信息
function i3k_game_context:GetMasterBriefInfo()
	return self._master_brief
end
-- 根据基本信息判断自己能否收徒，用于头像菜单显示，返回bool
function i3k_game_context:CanMasterEnrollByBrief()
	local cfg = i3k_db_master_cfg.cfg
	if self:GetLevel()<cfg.master_min_lvl then
		return false
	end
	if self._master_brief.masterId>0 then  -- 没出师
		return false
	end
	if self._master_brief.apprtcList and #self._master_brief.apprtcList>=cfg.max_apptc_num then -- 徒弟数量到上限
		return false
	end
	return true
end
-- 根据基本信息判断自己能否拜师，用于头像菜单显示，返回BOOL
function i3k_game_context:CanApplyMasterByBrief()
	local cfg = i3k_db_master_cfg.cfg
	if self:GetLevel()<cfg.apptc_min_lvl or self:GetLevel()>cfg.apptc_max_lvl then
		return false
	end
	if self._master_brief.masterId>0 then -- 已经有师傅
		return false
	end
	return true
end
--------------------------  师徒相关处理函数 END ----------------------

-- 设置当日首次登陆状态
function i3k_game_context:setDayFirstLogin(value)
	self.day_first_login = value
end
function i3k_game_context:getDayFirstLogin()
	return self.day_first_login
end

-- 首次登陆显示 首冲和 1/3/6礼包红点
function i3k_game_context:setDayFirstLoginFuliRedPoint(position, value)
	if not self.day_first_login_fuli then
		self.day_first_login_fuli = {}
	end
	self.day_first_login_fuli[position] = value
end
function i3k_game_context:getDayFirstLoginFuliRedPoint(position)
	if not self.day_first_login_fuli then
		return false
	end
	return self.day_first_login_fuli[position]
end

-- 获取对战类型
function i3k_game_context:GetForceType()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetForceType()
	end
	return 0
end

-------------魂玉二期紧制需求begin------------------
function i3k_game_context:setRoleSealAwaken(data)
	self._role_seal_awaken = data
end
function i3k_game_context:getRoleSealAwaken()
	return self._role_seal_awaken
end
-- 温养结束，升到下一阶的时候清空
function i3k_game_context:clearRoleSealAwaken()
	local newRank = self._role_seal_awaken.rank + 1
	self._role_seal_awaken.rank = newRank
	self._role_seal_awaken.allAwakenTime = 0
	self._role_seal_awaken.padding1 = 0
	self._role_seal_awaken.awaken = {}
	self._role_seal_awaken.clientProp = nil
end
-- 解锁成功后，客户端也要加一下
function i3k_game_context:addRoleSealAwakenId(id)
	self._role_seal_awaken.awaken[id] = true
end
function i3k_game_context:setAllAwakenTime()
	local nowtime  = i3k_game_get_time()
	if self._role_seal_awaken.allAwakenTime == 0 then
		self._role_seal_awaken.allAwakenTime = nowtime
	end
end
-- 加速温养
function i3k_game_context:speedUpAwaken(time)
	if self._role_seal_awaken.allAwakenTime then
		self._role_seal_awaken.allAwakenTime = self._role_seal_awaken.allAwakenTime - time
	end
end
-- 判断全部封印是否已经解封，如果解封则刷新下时间
function i3k_game_context:checkAllAwakenUnlock()
	local rank = self._role_seal_awaken.rank
	local cfg = g_i3k_db.i3k_db_get_longyin_ban(rank)
	for k, v in ipairs(cfg.items) do
		if not self._role_seal_awaken.awaken[v] then
			return false
		end
	end
	return true
end
--判断是否可以精修
function i3k_game_context:jingxiuUnlock()
	local info = self:getRoleSealAwaken()
	if not g_i3k_db.i3k_db_get_longyin_ban(info.rank) then return false end
	local allAwakenTime = info.allAwakenTime
	if  self:checkAllAwakenUnlock() and allAwakenTime > 0 then
		local nowTime = i3k_game_get_time()
		local cfg = g_i3k_db.i3k_db_get_longyin_ban(info.rank)
		local targetTime = allAwakenTime + cfg.allUnlockTime
		local deltTime = targetTime - nowTime
		if deltTime <= 0 then
			return true
        end
	end
	return false
end
---- 分开属性 ----
-- 增加的禁制属性 显示用---
-- 刷新接口
function i3k_game_context:refreshAwakenBanProp()
	self:clearAwakenBanProp()
	local awaken = self:getRoleSealAwaken()
	local curRank = awaken.rank - 1
	-- 先加上前面解封过的层的属性
	for i = 1, curRank do
		-- 每层禁制属性
		local cfg = g_i3k_db.i3k_db_get_longyin_ban(i)
		for k , v in ipairs(cfg.items) do
			local fengyinCfg = g_i3k_db.i3k_db_get_longyin_lock(v)
			if fengyinCfg.propValue ~= 0 then
				self:addAwakenBanProp(fengyinCfg.propID, fengyinCfg.propValue)
			end
		end
		-- 每层祝福属性
		for k, v in ipairs(cfg.wish) do
			if v.value ~= 0 then
				self:addAwakenBanProp(v.type, v.value)
			end
		end
	end
	-- 再加上当前层已经的属性
	for k, v in pairs(awaken.awaken) do
		local fengyinCfg = g_i3k_db.i3k_db_get_longyin_lock(k)
		if fengyinCfg.propValue ~= 0 then
			self:addAwakenBanProp(fengyinCfg.propID, fengyinCfg.propValue)
		end
	end
	-- 紧制属性刷新完成，马上刷新所有魂玉二期相关属性
	self:refreshAwakenProp()
end

function i3k_game_context:clearAwakenBanProp()
	self._role_seal_awaken.clientBanProp = nil
end
function i3k_game_context:addAwakenBanProp(key, value)
	if not self._role_seal_awaken.clientBanProp then
		self._role_seal_awaken.clientBanProp = {}
	end
	if not self._role_seal_awaken.clientBanProp[key] then
		self._role_seal_awaken.clientBanProp[key] = value
	else
		self._role_seal_awaken.clientBanProp[key] = self._role_seal_awaken.clientBanProp[key] + value
	end
end
function i3k_game_context:getAwakenBanProp()
	return self._role_seal_awaken.clientBanProp or {}
end

------总属性  实际增加的属性----
function i3k_game_context:refreshAwakenProp()
	self:clearAwakenProp()
	local prop = self:getAwakenBanProp()
	for k, v in pairs(prop) do
		self:addAwakenProp(k, v)
	end
	-- 在加上百分比的属性
	local lvl = self:GetIsHeChengLongYin()
	local rank = self:getRoleSealAwaken().rank - 1
	local totalPercent = 0
	for i = 1, rank do
		local cfg = g_i3k_db.i3k_db_get_longyin_ban(i)
		if cfg then
			totalPercent = totalPercent + cfg.propPercent
		end
	end
	if totalPercent > 0 then
		if lvl ~= 0 then
			for k=1, 6 do
				local propertyId	 = i3k_db_LongYin_UpLvl[lvl]["propertyId" .. k]
				local propertyCount = i3k_db_LongYin_UpLvl[lvl]["propertyCount" .. k]
				if propertyCount ~= 0 then
					self:addAwakenProp(propertyId, propertyCount * totalPercent / 10000)
				end
			end
		end
	end
	self:RefreshLongyinProps()
end
function i3k_game_context:clearAwakenProp()
	self._role_seal_awaken.clientProp = nil
end
function i3k_game_context:addAwakenProp(key, value)
	if not self._role_seal_awaken.clientProp then
		self._role_seal_awaken.clientProp = {}
	end
	if not self._role_seal_awaken.clientProp[key] then
		self._role_seal_awaken.clientProp[key] = value
	else
		self._role_seal_awaken.clientProp[key] = self._role_seal_awaken.clientProp[key] + value
	end
end
-- 获取属性
function i3k_game_context:getAwakenProp()
	return self._role_seal_awaken.clientProp or {}
end
----------
--------------------------  红利 START ----------------------
function i3k_game_context:GetDividendCount()
	return self._bagData._dividend
end

function i3k_game_context:AddDividend(count)
	self._bagData._dividend = self._bagData._dividend + count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_VipStore, "updateHongLi", self:GetDividendCount())
end

function i3k_game_context:UseDividend(count, reason)
	self._bagData._dividend = self._bagData._dividend - count
	DCItem.consume(g_BASE_ITEM_DIVIDEND, "红利", count, reason)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_VipStore, "updateHongLi", self:GetDividendCount())
end
--------------------------  红利 END ----------------------

--------------------------  龙魂币 START ----------------------
function i3k_game_context:GetDragonCoinCount()
	return self._bagData._dragonCoin
end

function i3k_game_context:AddDragonCoin(count)
	self._bagData._dragonCoin = self._bagData._dragonCoin + count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bid, "setNeedItem", g_BASE_ITEM_DRAGON_COIN)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Fuli, "updateDragonCoinCount")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_PigeonPostSend, "setCurrency")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_VipStore, "updateLongHun", self:GetDragonCoinCount())
end

function i3k_game_context:UseDragonCoin(count, reason)
	self._bagData._dragonCoin = self._bagData._dragonCoin - count
	DCItem.consume(g_BASE_ITEM_DRAGON_COIN, "龙魂币", count, reason)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bid, "setNeedItem", g_BASE_ITEM_DRAGON_COIN)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Fuli, "updateDragonCoinCount")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_PigeonPostSend, "setCurrency")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_VipStore, "updateLongHun", self:GetDragonCoinCount())
end
--------------------------  龙魂币 END ----------------------

-------------------------武林声望 -------------------------
function i3k_game_context:GetFameCount()
	return self._bagData._fame
end

function i3k_game_context:AddFameCount(count)
	self._bagData._fame = self._bagData._fame + count
end

function i3k_game_context:UseFame(count, reason)
	self._bagData._fame = self._bagData._fame - count
	DCItem.consume(g_BASE_ITEM_FAME, "武林声望", count, reason)
end

---------------------------------------------------------------
--兑换/幸运大转盘是否需要显示提示
function i3k_game_context:IsExcNeedShowTip(exchangeType)
	local canShowDay = false
	local notShowDay = 0

	local nowDay = g_i3k_get_day(i3k_game_get_time()) or 0

	local cfg = g_i3k_game_context:GetUserCfg()
	if cfg then
		notShowDay = cfg:GetTipNotShowDay(exchangeType)
	end
	if nowDay - notShowDay >= 1 then
		canShowDay = true
	end
	return canShowDay
end

--------------------------  经验果树 START ----------------------
function i3k_game_context:setWatchingTimes(watchingTimes)
	self._userExpTreeData.watchingTimes = watchingTimes;
end
function i3k_game_context:getWatchingTimes()
	return self._userExpTreeData.watchingTimes;
end
function i3k_game_context:setWateringTimes(wateringTimes)
	self._userExpTreeData.wateringTimes = wateringTimes;
end
function i3k_game_context:getWateringTimes()
	return self._userExpTreeData.wateringTimes
end
function i3k_game_context:setHarvestTimes(harvestTimes)
	self._userExpTreeData.harvestTimes = harvestTimes;
end
function i3k_game_context:getHarvestTimes()
	return self._userExpTreeData.harvestTimes;
end

function i3k_game_context:setExpTreeInfo(info)
	self._expTreeData = info
end

function i3k_game_context:getExpTreeInfo()
	return self._expTreeData;
end

function i3k_game_context:setExpTreeLevel(level)
	if not self._expTreeData then
		self._expTreeData = {}
	end
	self._expTreeData.level = level
end
-- 经验果树等级
function i3k_game_context:getExpTreeLevel()
	return self._expTreeData and self._expTreeData.level or 0
end
function i3k_game_context:UpdateExpTreeState()
	local level = self:getExpTreeLevel()
	local world = i3k_game_get_world()
		if world then
			local entity = world:GetNPCEntityByID(eExpTreeId)
			if entity then
			local cfg = i3k_db_exptree_common
				for i = 3,1,-1 do
				if level >= cfg["level"..i] then
					entity:Play(cfg['flowerAction'..i], -1, true)
						break
				end
			end
		end
	end
end
--------------------------  经验果树 END ----------------------

-- 设置map同步当前出战佣兵
function i3k_game_context:setRoleFightPets(pets)
	self._roleFightPets = pets
end

-- 获取map同步当前出战佣兵
function i3k_game_context:getRoleFightPets()
	return self._roleFightPets
end

function i3k_game_context:getRuneRedTip( )
	return self._underwearRuneRed
end

function i3k_game_context:setFiveEndActState(state)
	self._fiveEndAct = state
end

function i3k_game_context:fiveEndActivityState()
	if self._fiveEndAct == 0 or self:GetLevel() < i3k_db_fiveEnd_activity.openlvl then
		return false, false
	end

	return true, self:testNotice(g_NOTICE_TYPE_FIVE_END_ACT)
end

-- 光环技能，被动ai
function i3k_game_context:UpdatePassiveAuraProp()
	local hero = i3k_game_get_player_hero()
	local world = i3k_game_get_world()
	if hero and not world._syncRpc then
		hero:UpdatePassiveProp() --被动技能，触发ai属性
		hero:UpdateAuraAddBuff(hero)
	end
end

function i3k_game_context:setRoleReturnInfo(data)
	self._roleReturnInfo = data.info
	self._roleReturnCode = data.code
end

function i3k_game_context:getRoleReturnInfo()
	return self._roleReturnInfo, self._roleReturnCode
end

function i3k_game_context:setIsRoleReturn(data)
	self._regressionLogin = data
end

function i3k_game_context:getIsRoleReturn()
	return self._regressionLogin
end

function i3k_game_context:testRoleReturnState()
	local isShow = false
	if i3k_db_role_return.common.limit_lvl <= g_i3k_game_context:GetLevel() then
		isShow = true
	end
	return isShow, false
end

function i3k_game_context:testReturnFuli()
	local isShow = self:getIsRoleReturn()
	if isShow > 0 then
		local timeState = i3k_game_get_time()
		if timeState - isShow < i3k_db_role_return.common.maxTime then
			return true, false
		end
	end
	return false, false
end

function i3k_game_context:yqmsr_check(keycode)
	return string.len(keycode) == 16 and string.find(keycode, "^[%d%a]+$")
end

function i3k_game_context:setDriftBottleTimes(time)
	self._driftBottleTimes = time
end

function i3k_game_context:getDriftBottleTimes()
	return self._driftBottleTimes
end

---------------------------------------------
-- 设置宠物赛跑使用道具cd时间
function i3k_game_context:setPetRaceUseSkillTime(maxCDTime)
	self._petRaceUseSkillTime = maxCDTime
end
function i3k_game_context:updatePetRaceSkillTime(dTime)
	if self._petRaceUseSkillTime and self._petRaceUseSkillTime > 0 then
		self._petRaceUseSkillTime = self._petRaceUseSkillTime - dTime
	end
end

function i3k_game_context:getPetRaceUseSkillLeftTime()
	if self._petRaceUseSkillTime and self._petRaceUseSkillTime < 0 then
		self._petRaceUseSkillTime = 0
	end
	return self._petRaceUseSkillTime or 0
end

function i3k_game_context:setPetRaceShopData(data)
	self._petRaceShopData = data
end
function i3k_game_context:getPetRaceShopData()
	return self._petRaceShopData
end
function i3k_game_context:getPetRaceShopRefreshTimes()
	return self._petRaceShopData.refreshTimes
end

-- 宠物赛跑类型货币
function i3k_game_context:SetPetRaceCoin(value)
	self._petRaceCoin = value
end
function i3k_game_context:GetPetRaceCoin()
	return self._petRaceCoin or 0
end
function i3k_game_context:AddPetRaceCoin(value)
	if self._petRaceCoin then
		self._petRaceCoin = self._petRaceCoin + value
	end
end
function i3k_game_context:UsePetRaceCoin(value, reason)
	if self._petRaceCoin then
		self._petRaceCoin = self._petRaceCoin - value
		DCItem.consume(g_BASE_ITEM_PETCOIN, "龟龟币", value, reason)
	end
end

-- 宠物赛跑
function i3k_game_context:throwToRacePet()
	local world = i3k_game_get_world()
	local selEntity = i3k_game_get_select_entity()
	if world and selEntity then
		for k, v in pairs(world:GetAllRacePet()) do
			if selEntity._guid == k then
				local hitEffect = i3k_db_common.petRace.hitEffect
				selEntity:PlayHitEffect(hitEffect)
			end
		end
	end
end

-- 是否可以扔道具
function i3k_game_context:getCanThrowItem()
	local selEntity = i3k_game_get_select_entity()
	if not selEntity then
		return false
	else
		if selEntity:GetEntityType() ~= eET_PetRace then
			return false
		end
		local hero = i3k_game_get_player_hero()
		local radius = selEntity:GetRadius() + hero:GetRadius()
		local dist = i3k_vec3_dist(selEntity._curPos, hero._curPos) - radius
		local meters = i3k_db_common.petRace.throwDist
		if dist > meters * 100 then
			g_i3k_ui_mgr:PopupTipMessage("您距离小龟太远")
			return false
		end
	end
	return self:getPetRaceUseSkillLeftTime() == 0
end

--温泉数据
function i3k_game_context:setSpringData(data)
	self._spring = data
	g_i3k_ui_mgr:RefreshUI(eUIID_SpringAct)
	g_i3k_ui_mgr:RefreshUI(eUIID_SpringBuff)
end

function i3k_game_context:getSpringData()
	return self._spring
end
function i3k_game_context:singleAct(type)
	if type == 1 then
		self._spring.molestCnt = self._spring.molestCnt + 1
	elseif type == 2 then
		self._spring.soapCnt = self._spring.soapCnt + 1
	else
		self._spring.rubCnt = self._spring.rubCnt + 1
	end
end
--温泉buff
function i3k_game_context:setSpringBuff (data)
	self._springBuff = data
	g_i3k_ui_mgr:RefreshUI(eUIID_SpringBuff)
end
function i3k_game_context:getSpringBuff ()
	return self._springBuff
end
function i3k_game_context:setSectBuff()
	self._spring.sectBuffCnt = self._spring.sectBuffCnt + 1
end
function i3k_game_context:setServerBuff ()
	self._spring.serverBuffCnt = self._spring.serverBuffCnt + 1
end
-- return 0  1 水域 2 陆地
function i3k_game_context:getSpringPos (curPos)
	local waterArea = i3k_db_spring.waterArea
	local landArea = i3k_db_spring.landArea
	--检测水域
    for k, v in ipairs(waterArea) do
        local pos = string.split(v.pos, ";")
        local posVec = i3k_vec3(pos[1], pos[2], pos[3])
        local distance = i3k_vec3_dist(posVec, curPos)
        if distance <= v.radius then
            return SPRING_TYPE_WATER
        end
    end
    --检测陆地
    for k, v in ipairs(landArea) do
        local pos = string.split(v.pos, ";")
        local posVec = i3k_vec3(pos[1], pos[2], pos[3])
        local distance = i3k_vec3_dist(posVec, curPos)
        if distance <= v.radius then
            return SPRING_TYPE_LAND
        end
    end

	return SPRING_TYPE_OTHER
end

function i3k_game_context:springBuffIsMax()
	local data = self:getSpringBuff()
	if not data then
		return false
	end
    local sectBuff = data.sectBuff
    local serverBuff = data.serverBuff
    local doubleActBuff = data.doubleActBuff
    local fationBuff = data.fashionBuff
	local total = 10000 +  sectBuff + serverBuff + doubleActBuff + fationBuff
	if total >= i3k_db_spring.common.expLimit then
		return true
	end
	return false
end

function i3k_game_context:GetIsSpringWorld()
	return self:GetWorldMapID() == i3k_db_spring.common.mapId
end

----------------------buff药数据
function i3k_game_context:SetBuffDrugData(data, fightLineData)
	self._buffDrug = data and data or {}
	self._fight_line_buff_drug = fightLineData and fightLineData or {}
end

--获取所有buff药
function i3k_game_context:GetBuffDrugData()
	return self._buffDrug
end

function i3k_game_context:SetOtherPlayerBuffDrugData(data)
	self._otherBuffDrug = data and data or {}
end

--获取有效buff药,isOther = true表示是周围玩家
function i3k_game_context:GetValidBuffDrugData(isOther)
	local tmp = {} --当前有效buff药
	local curTime = i3k_game_get_time()

	local buffDrug = isOther and self._otherBuffDrug or self._buffDrug
	for _, v in ipairs(buffDrug) do
		if isOther or v.endTime > curTime then
			local buffSlot = i3k_db_buff[v.id].buffSlot
			local buffSlotLvl = i3k_db_buff[v.id].buffSlotLvl

			if buffSlot and (not tmp[buffSlot] or (tmp[buffSlot] and buffSlotLvl > tmp[buffSlot].lvl)) then  --没有或者比当前有的buff槽等级配置高
				tmp[buffSlot] = {id = v.id , endTime = v.endTime, lvl = buffSlotLvl}
			end
		end
	end

	return tmp
end

function i3k_game_context:UpdateBuffDrugData(data, buffType)
	if buffType == g_NORMAL_BUFF_DRUG then
		self:UpdateNoramlBuffDrug(data, buffType)
	elseif buffType == g_FIGHT_LINE_BUFF_DRUG then
		self:UpdateFightLineBuffDrug(data, buffType)
	end
end

function i3k_game_context:UpdateNoramlBuffDrug(data, buffType)
	local newBuffID = data.id
	local newEndTime = data.endTime

	local tmpBuffDrug = {} --map

	for _, v in ipairs(self._buffDrug) do
		tmpBuffDrug[v.id] = v.endTime
	end
	tmpBuffDrug[newBuffID] = newEndTime

	self._buffDrug = {}
	for k, v in pairs(tmpBuffDrug) do
		table.insert(self._buffDrug, {id = k, endTime = v})
	end

	self:UpdateHeroBuffDrug()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateselfbuff")
end

function i3k_game_context:IsShowBuffDrugIcon(isOther)
	return self:GetUseBuffDrugTypeCount(isOther) > 0
end

--获取当前可使用buff药的次数
function i3k_game_context:GetBuffDrugLimit(buffID)
	local cfg = i3k_db_buff[buffID]
	local overlays = cfg.overlays
	local loopTime = cfg.loopTime * 0.001  --毫秒->秒

	local timeNow = i3k_game_get_time()
	local endTime = timeNow
	for i, v in ipairs(self._buffDrug) do
		if v.id == buffID then
			endTime = v.endTime
			break
		end
	end
	local remainTime = endTime - timeNow > 0 and endTime - timeNow or 0
	local curLays = math.ceil(remainTime / loopTime)
	local limit = overlays - curLays
	return limit > 0 and limit or 0
end

-- 单机本刷新buff药
function i3k_game_context:UpdateHeroBuffDrug()
	local hero = i3k_game_get_player_hero()
	if hero and i3k_game_get_map_type() == g_BASE_DUNGEON then
		hero:UpdateHeroBuffDrug()
	end
end

--获取同类型buff药的槽等级
function i3k_game_context:GetUseBuffDrugSlotLvl(buffID)
	local cfg = i3k_db_buff[buffID]
	local buffDrugData = self:GetValidBuffDrugData()

	local buffDrug = buffDrugData[cfg.buffSlot]
	local slotLvl = buffDrug and buffDrug.lvl or 0

	if slotLvl == 0 then
		return g_USE_SAME_SLOTLVL
	end

	if cfg.buffSlotLvl > slotLvl then
		return g_USE_HIGH_SLOTLVL
	elseif cfg.buffSlotLvl < slotLvl then
		return g_USE_LOW_SLOTLVL
	end

	return g_USE_SAME_SLOTLVL
end

--获取当前所有buff药的类型数
function i3k_game_context:GetUseBuffDrugTypeCount(isOther)
	local buffDrugData = self:GetValidBuffDrugData(isOther)
	return table.nums(buffDrugData)
end

--该类型buff是否已存在
function i3k_game_context:IsBuffDrugTypeExist(buffID)
	local cfg = i3k_db_buff[buffID]
	local buffDrugData = self:GetValidBuffDrugData()
	return buffDrugData[cfg.buffSlot] and true or false
end

----------------------争夺线buff药数据
--获取争夺线buff药
function i3k_game_context:GetFightLineBuffDrugData()
	return self._fight_line_buff_drug
end

function i3k_game_context:UpdateFightLineBuffDrug(data, buffType)
	local newBuffID = data.id
	local newEndTime = data.endTime
	local newValue = data.value

	local tmpBuffDrug = {} --map

	for _, v in ipairs(self._fight_line_buff_drug) do
		tmpBuffDrug[v.id] = {endTime = v.endTime, value = v.value}
	end
	tmpBuffDrug[newBuffID] = {endTime = newEndTime, value = newValue}

	self._fight_line_buff_drug = {}
	for k, v in pairs(tmpBuffDrug) do
		table.insert(self._fight_line_buff_drug, {id = k, endTime = v.endTime, value = v.value})
	end

	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateselfbuff")
end

--获取争夺线有效buff药
function i3k_game_context:GetFightLineValidBuffDrugData()
	local tmp = {} --当前有效buff药
	local curTime = i3k_game_get_time()

	local buffDrug = self._fight_line_buff_drug

	local fight_line_exp_max = i3k_db_common.fight_line_exp_max  --最大经验加成

	for _, v in ipairs(buffDrug) do
		local affectType = i3k_db_fight_line_buff[v.id].affectType
		local affectValue = i3k_db_fight_line_buff[v.id].affectValue
		local buffSlot = i3k_db_fight_line_buff[v.id].buffSlot

		if affectType == g_FIGHT_LINE_CONTINUE_TIME then
			if v.endTime > curTime then
				if not tmp[affectType] then
					tmp[affectType] = {id = v.id , endTime = v.endTime, value = v.value, buffSlot = buffSlot, affectValue = affectValue}
				else
					if buffSlot ~= tmp[affectType].buffSlot then
						tmp[affectType].affectValue = tmp[affectType].affectValue + affectValue
						tmp[affectType].affectValue = tmp[affectType].affectValue < fight_line_exp_max and tmp[affectType].affectValue or fight_line_exp_max
					end
					if v.endTime < tmp[affectType].endTime then
						tmp[affectType].endTime = v.endTime
					end
				end
			end
		elseif affectType == g_FIGHT_LINE_KILL_MOSNTER_COUNT then
			if v.value > 0 then
				if not tmp[affectType] then
					tmp[affectType] = {id = v.id , endTime = v.endTime, value = v.value, buffSlot = buffSlot, affectValue = affectValue}
				else
					if buffSlot ~= tmp[affectType].buffSlot then
						tmp[affectType].affectValue = tmp[affectType].affectValue + affectValue
						tmp[affectType].affectValue = tmp[affectType].affectValue < fight_line_exp_max and tmp[affectType].affectValue or fight_line_exp_max
					end
					if v.value < tmp[affectType].value then
						tmp[affectType].value = v.value
					end
				end
			end
		end
	end
	return tmp
end

--使用道具后获得的加成效果
function i3k_game_context:GetBuffAffectValue(buffID)
	local buffDrugData = self:GetFightLineValidBuffDrugData()
	local affectType = i3k_db_fight_line_buff[buffID].affectType
	local addAffectValue = i3k_db_fight_line_buff[buffID].affectValue
	local oldAffectValue = buffDrugData[affectType] and buffDrugData[affectType].affectValue or 0
	return addAffectValue + oldAffectValue
end

--该buff药是否正在生效
function i3k_game_context:IsFightLineBuffTypeExist(buffID)
	for _, v in ipairs(self._fight_line_buff_drug) do
		if v.value > 0 and v.id == buffID then
			return true
		end
	end
	return false
end

function i3k_game_context:IsShowFightLineBuff()
	local buffDrugData = self:GetFightLineValidBuffDrugData()
	return table.nums(buffDrugData) > 0
end

function i3k_game_context:SetBuffKillMonsterCnt(count)
	if self:GetCurrentLine() == g_WORLD_KILL_LINE then
		local buffDrugData = self:GetFightLineValidBuffDrugData()
		if buffDrugData[g_FIGHT_LINE_BUFF_DRUG] then
			for _, v in ipairs(self._fight_line_buff_drug) do
				v.value = v.value - count
			end
		end
	end
end
----------------------

--狼神兵数据
function i3k_game_context:setWolfData (data)
	if data then
		self._wolfData = data
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updateWolfWeapon");
	end
end

function i3k_game_context:getWolfData ()
	return self._wolfData
end

--表情包数据
function i3k_game_context:setEmojiData(data)
	if data then
		self._emoji = data
	end
end

function i3k_game_context:getEmojiData()
	local emoji = {}
	local timeStamp = i3k_game_get_time()
	for k, v in pairs(self._emoji) do
		if v > timeStamp then
			emoji[k] = v
		end
	end
	self._emoji = emoji
	return self._emoji
end

function i3k_game_context:addEmojiData(emojiId, emojiTime)
	local emojiData = self:getEmojiData()
	local timeStamp = i3k_game_get_time()
	if emojiData[emojiId] then
		self._emoji[emojiId] = self._emoji[emojiId] + emojiTime
	else
		self._emoji[emojiId] = emojiTime + timeStamp
	end
end

--------------神兵 器灵 begin--------------------
function i3k_game_context:setQilingData(info)
	self._qiling = info
end

function i3k_game_context:getQilingData()
	return self._qiling
end

function i3k_game_context:equipQiling(qilingID, weaponID)
	for k, v in ipairs(self._qiling) do -- 一个神兵只能装备一个器灵
		if v.equipWeaponId == weaponID then
			v.equipWeaponId = 0
		end
	end
	self._qiling[qilingID].equipWeaponId = weaponID
end

function i3k_game_context:activeQiling(qilingID, pointID)
	self._qiling[qilingID].activitePoints[pointID] = true
end

function i3k_game_context:upRankQiling(qilingID, rank)
	-- TODO 满级处理
	self._qiling[qilingID].activitePoints = {}
	self._qiling[qilingID].rank = rank
	if rank >= self._qiling[qilingID].rank then
		if 0 == self._qiling[qilingID].skillLevel then
			self._qiling[qilingID].skillLevel = 1
		end
	end
end

function i3k_game_context:updateQilingLevel(qilingID, level)
	self._qiling[qilingID].skillLevel = level
end

--升级红点
function i3k_game_context:upLevelRedPoint(qilingID)
	local rank = self._qiling[qilingID].rank
	return self._qiling[qilingID].skillLevel < i3k_db_qiling_trans[qilingID][rank].skillUpLevel
end

--获取当前特技等级升级所需的阶级
function i3k_game_context:getUpNeedRank(id, level)
	for k, v in ipairs(i3k_db_qiling_trans[id]) do
		if level + 1 <= v.skillUpLevel then
			return k >= i3k_db_qiling_type[id].transUpLevel + 1 and i3k_db_qiling_type[id].transUpLevel + 1 or k
		end
	end
	return i3k_db_qiling_type[id].transUpLevel + 1
end

-- 更新器灵属性
function i3k_game_context:UpdateQilingProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateQilingProp()
	end
end

-- 更新器灵变身属性
function i3k_game_context:UpdateQilingTransProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateQilingTransProp()
	end
end

-- 获取当前激活的永久属性
function i3k_game_context:getActiveForeverProp()
	return self:getActivePropByName("foreverAttr")
end

-- 获取当前激活的变身属性
function i3k_game_context:getActiveTransProp()
	if self:IsInSuperMode() then
		local selectWeapon = self:GetSelectWeapon()
		local qilingID = 0
		for k, v in ipairs(self:getQilingData()) do
			if v.equipWeaponId == selectWeapon then
				qilingID = k
				break
			end
		end
		if qilingID ~= 0 then
			return self:getActivePropImpl(qilingID, "transAttr")
		else
			return {}
		end
	else
		return {}
	end
end

-- 获取变身/永久属性，"transAttr"/"foreverAttr"
function i3k_game_context:getActivePropByName(name)
	local result = {}
	local data = self:getQilingData()
	if not data then
		return result
	end
	local addProp = function(list)
		for _, v in ipairs(list) do
			if not result[v.id] then
				result[v.id] = v.count
			else
				result[v.id] = result[v.id] + v.count
			end
		end
	end

	for k, v in ipairs(data) do
		-- 前面已经都解锁的层的(rank - 1表示不包括当前rank这层)
		for i = 1, v.rank - 1 do
			local cfg = i3k_db_qiling_nodes[k][i]
			for n, m in ipairs(cfg) do
				addProp(m[name])
			end
		end
		-- 当前层的节点
		for i, _ in pairs(v.activitePoints) do
			local cfg = i3k_db_qiling_nodes[k][v.rank]
			for n, m in ipairs(cfg) do
				if i == m.id then
					addProp(m[name])
				end
			end
		end
	end
	return result
end

-- 分开获取，单个器灵的永久/变身属性 ，"transAttr"/"foreverAttr"
function i3k_game_context:getActivePropImpl(qilingID, name)
	local result = {}
	local data = self:getQilingData()
	if not data then
		return result
	end
	local addProp = function(list)
		for _, v in ipairs(list) do
			if not result[v.id] then
				result[v.id] = v.count
			else
				result[v.id] = result[v.id] + v.count
			end
		end
	end
	local v = data[qilingID]
	-- 前面已经都解锁的层的(rank - 1表示不包括当前rank这层)
	for i = 1, v.rank - 1 do
		local cfg = i3k_db_qiling_nodes[qilingID][i]
		for n, m in ipairs(cfg) do
			addProp(m[name])
		end
	end
	-- 当前层的节点
	for i, _ in pairs(v.activitePoints) do
		local cfg = i3k_db_qiling_nodes[qilingID][v.rank]
		for n, m in ipairs(cfg) do
			if i == m.id then
				addProp(m[name])
			end
		end
	end

	return result
end


-- 是否可以激活器灵
function i3k_game_context:checkCanActiveQiling()
	local expect = i3k_db_qiling_cfg.weaponStar
	local all = self:GetShenbingData()
	for i = 1, #i3k_db_shen_bing do
		if all[i] then
			local stars = self:GetShenbingStarLvl(i)
			if stars >= expect then
				return true
			end
		end
	end
	return false
end

-- 获取所有神兵星级总和
function i3k_game_context:getAllWeaponStars()
	local count = 0
	local all = self:GetShenbingData()
	for i = 1, #i3k_db_shen_bing do
		if all[i] then
			local stars = self:GetShenbingStarLvl(i)
			count = count + stars
		end
	end
	return count
end

function i3k_game_context:getCurWeaponActivitePoints(id)
	local info = self:getQilingData()
	if not info then return 0 end
	return table.nums(info[id].activitePoints)
end
-- 校验函数，返回boolean类型
function i3k_game_context:checkQilingPromoteLevel(cfg)
	local expect = cfg.needLevel
	return self:GetLevel() >= expect
end
function i3k_game_context:checkQilingPromotePower(cfg)
	local expect = cfg.needPower
	return self:GetRolePower() >= expect
end
function i3k_game_context:checkQilingPromoteWeapon(cfg)
	local expect = cfg.needStars
	return self:getAllWeaponStars() >= expect
end
function i3k_game_context:checkQilingPromoteActivitePoints(cfg, id)
	local expect = cfg.myActivitePoints
	return self:getCurWeaponActivitePoints(id) >= expect
end

--获取最大器灵等级
function i3k_game_context:getMaxQilingLevel()
	local value = 0

	for _, vin in pairs(self._qiling) do
		if value < vin.rank then
			value = vin.rank
		end
	end

	return value
end

-----------------器灵 end------------------------

--------------------寻宝 大富翁begin-----------------------------
function i3k_game_context:testDiceState()
	local diceActivityID =  g_i3k_db.i3k_db_open_dice_activity_id()
	-- return checkTime and checkDate, false
	return true, true
end
-- 空事件
function i3k_game_context:handleDiceEventNil(args)
	-- Do Nothing
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "updateDiceEventStatus", DICE_STATUS_FINISH)
end
-- 直接获取经验
function i3k_game_context:handleDiceEventExp(args)
	local roleLevel = self:GetLevel()
	local perExp = g_i3k_db.i3k_db_get_level_cfg(roleLevel).diceActivityExp
	local item ={id = 1000, count = math.ceil(args * perExp) }
	g_i3k_ui_mgr:ShowGainItemInfo({item})
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "updateDiceEventStatus", DICE_STATUS_FINISH)
end
-- 直接获得物品
function i3k_game_context:handleDiceEventItem(args)
	local cfg = i3k_db_dice_get[args]
	local item = {id = cfg.itemID, count = cfg.itemCount}
	g_i3k_ui_mgr:ShowGainItemInfo({item})
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "updateDiceEventStatus", DICE_STATUS_FINISH)
end
-- 物物兑换支持元宝购买
function i3k_game_context:handleDiceEventTrade(args, groupID)
	g_i3k_ui_mgr:OpenUI(eUIID_DiceExchange)
	g_i3k_ui_mgr:RefreshUI(eUIID_DiceExchange, groupID)
end
-- 击杀怪物得奖励
function i3k_game_context:handleDiceEventMonster(args, groupID, info)
	g_i3k_ui_mgr:OpenUI(eUIID_DiceMonster)
	g_i3k_ui_mgr:RefreshUI(eUIID_DiceMonster, groupID, info, false)
end
-- 赠送玫瑰花
function i3k_game_context:handleDiceEventFlower(args, groupID, info)
	g_i3k_ui_mgr:OpenUI(eUIID_DiceFlower)
	g_i3k_ui_mgr:RefreshUI(eUIID_DiceFlower, groupID, info, true)
end
-- 获得额外投掷次数
function i3k_game_context:handleDiceEventThrow(args)
	-- local msg = "恭喜获得额外投掷次数："..args.."次"
	local msg = i3k_get_string(16399, args)
	-- g_i3k_ui_mgr:ShowMessageBox1(msg, callback)
	g_i3k_ui_mgr:OpenUI(eUIID_DiceEventThrow)
	g_i3k_ui_mgr:RefreshUI(eUIID_DiceEventThrow, msg)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "addThrowCount", args)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "setTimesLabel")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "updateDiceEventStatus", DICE_STATUS_FINISH)
end
-- debuff行走变为1点
function i3k_game_context:handleDiceEventSlow(args)
	-- local msg = "获得减速buff，后面".. args.."次内投掷点数为1"
	local msg = i3k_get_string(16397, args)
	-- g_i3k_ui_mgr:ShowMessageBox1(msg, callback)

	g_i3k_ui_mgr:OpenUI(eUIID_DiceEventSlow)
	g_i3k_ui_mgr:RefreshUI(eUIID_DiceEventSlow, msg)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "setFastBuff", 0)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "updateDiceEventStatus", DICE_STATUS_FINISH)
end
-- debuff投掷骰子为3个，3-18点
function i3k_game_context:handleDiceEventThree(args)
	-- local msg = "获得debuff，下次投掷股子为"..args.."个"
	local msg = i3k_get_string(16400, args)
	-- g_i3k_ui_mgr:ShowMessageBox1(msg, callback)
	g_i3k_ui_mgr:OpenUI(eUIID_DiceEventFast)
	g_i3k_ui_mgr:RefreshUI(eUIID_DiceEventFast, msg)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "setFastBuff", args)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "updateDiceEventStatus", DICE_STATUS_FINISH)
end
-- 扣除一次投掷次数
function i3k_game_context:handleDiceEventDeduct(args)
	-- local msg = "扣除"..args.."次投掷次数"
	local msg = i3k_get_string(16398, args)
	-- g_i3k_ui_mgr:ShowMessageBox1(msg, callback)
	g_i3k_ui_mgr:OpenUI(eUIID_DiceEventDeduct)
	g_i3k_ui_mgr:RefreshUI(eUIID_DiceEventDeduct, msg)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "addThrowCount", - args)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "setTimesLabel")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "updateDiceEventStatus", DICE_STATUS_FINISH)
end

-- 直接获得绑定铜钱
function i3k_game_context:handleDiceEventMoney(args)
	local item ={id = 2, count = math.ceil(args) }
	g_i3k_ui_mgr:ShowGainItemInfo({item})
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "updateDiceEventStatus", DICE_STATUS_FINISH)
end
-- 直接获得体力
function i3k_game_context:handleDiceEventVit(args)
	local item ={id = 10, count = math.ceil(args) }
	g_i3k_ui_mgr:ShowGainItemInfo({item})
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Dice, "updateDiceEventStatus", DICE_STATUS_FINISH)
end

--------------------大富翁 end---------------------------
--------------------玩家召回入口begin-----------------------------
function i3k_game_context:testCallBackState()
	local isShow = true
	local config = i3k_db_call_back_common.config
	local level = g_i3k_game_context:GetLevel()
	--判断等级
	if level < config.level then
		isShow = false
	end
	--判断服务器开始时间
	if i3k_game_get_server_opened_days() < config.limitDays then
		isShow = false
	end
	--判断开始时间
	local startTick = config.startDay + config.startTime
	local endTick = config.endDay + config.endTime
	local now = g_i3k_get_GMTtime(i3k_game_get_time())
	if now < startTick or now > endTick then
		isShow = false
	end
	return isShow, self:testNotice(g_NOTICE_TYPE_SWORN)
end

--------------------玩家召回入口 end---------------------------
--------------------游乐场活动入口begin-----------------------------
function i3k_game_context:testGameEntranceState()
	local findFalg = false
	local diceFlag = false
	for k, v in ipairs(i3k_db_findMooncake) do
		local checkDate = g_i3k_db.i3k_db_check_findMooncake_date(k)
		if checkDate then
			findFalg = true
		end
	end
	for k, v in ipairs(i3k_db_dice_cfg) do
		local checkDate = g_i3k_db.i3k_db_check_dice_date(k)
		local checkWeek = g_i3k_db.i3k_db_check_dice_week(k)
		if checkDate and checkWeek then
			diceFlag = true
		end
	end
	if findFalg or diceFlag then
		return true, false
	else
	    return false, false
	end
end

--------------------游乐场活动入口 end---------------------------
--------------------定时活动入口begin--------------------------
--定时活动数据
function i3k_game_context:setTimingActivityinfo(info)
  self._timingactivityinfo = info
end

--获取
function i3k_game_context:getTimingActivityinfo()
  return self._timingactivityinfo
end

--设置兑换
function i3k_game_context:setExchange(id)
	local cfginfo = self._timingactivityinfo
	if not cfginfo or cfginfo.id <= 0 then return end
	local cfgExchange = i3k_db_timing_activity_exchange[cfginfo.id][id]
	if cfginfo.exchange then
		if cfginfo.exchange[id] then
			cfginfo.exchange[id] = cfginfo.exchange[id] + 1
		else
			cfginfo.exchange[id] =  1
		end
	end
	cfginfo.usedScore = cfginfo.usedScore + cfgExchange.require_goods_count1
	self._timingactivityinfo = cfginfo
end

--设置宝箱
function i3k_game_context:setTimingActivityRewards(id)
	if self._timingactivityinfo and id then
		self._timingactivityinfo.reward[id] = true
	end
end

--图标显示
function i3k_game_context:testGameTimingActivityState()
	return false, false
end

--设置积分
function i3k_game_context:setTimingActivityTotalScore(id,count)
	local info =  self._timingactivityinfo
	info.totalScore = info.totalScore + g_i3k_db.i3k_db_get_other_item_cfg(id).args2 * count
	self._timingactivityinfo = info
end
--红点图标
function i3k_game_context:checkTimingActivity(dTime)
	local heroLvl = g_i3k_game_context:GetLevel()
	local showState = g_i3k_db.i3k_db_get_timing_activity_state() ~= g_TIMINGACTIVITY_STATE_NONE
	showState = showState and self:openTimingActivityLevel()
	local red = self:getTimingAcitivitRed() or self:getTimingAcitivitExchangeRed()
	self:onTimingActivityStateChangeHandler(showState,red)
end

--开启级别
function i3k_game_context:openTimingActivityLevel()
	local heroLvl = self:GetLevel()
	local cfgId = g_i3k_db.i3k_db_get_timing_activity_id()
	if not cfgId then return false end
	if heroLvl >= i3k_db_timing_activity.openday[cfgId].needlevel then return true end
	return false
end

function i3k_game_context:onTimingActivityStateChangeHandler(showState,red)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 32, showState, red )
end
--图标
function i3k_game_context:getTimingActivityIcon()
end

--活动红点
function i3k_game_context:getTimingAcitivitRed()
	local cfginfo = self:getTimingActivityinfo()
	if not cfginfo or cfginfo.id == 0  then return false end
	for k,v in ipairs(i3k_db_timing_activity.actRewards[cfginfo.id]) do
		local  state = REWARD_STATE_NOT
		if cfginfo.totalScore >= v.actValue then
			state = REWARD_STATE_READY
			if cfginfo.reward[k] then
				state = REWARD_STATE_FINISH
			else
				return true
			end
		end
	end
	return false
end

--兑换红点
function i3k_game_context:getTimingAcitivitExchangeRed()
	local cfginfo = self:getTimingActivityinfo()
	if not cfginfo or cfginfo.id == 0  then return false end
	local exchangeCfg = i3k_db_timing_activity_exchange[cfginfo.id]
	for i, v in ipairs(exchangeCfg) do
        local exchangeInfo = v
        local redflat = true
		local add_goods_count = cfginfo.totalScore -  cfginfo.usedScore
		if    add_goods_count  < exchangeInfo.require_goods_count1 then
			redflat = false
		end
		for j,item in ipairs(exchangeInfo.needItems) do
			local add_goods_count= self:GetCommonItemCount(item.id) + self:GetCommonItemCount(-item.id)
			if add_goods_count < item.count then

				redflat = false
			end
		end
		if cfginfo.exchange and cfginfo.exchange[i] and cfginfo.exchange[i] >= exchangeInfo.limit_times then
			redflat = false --次数不足按钮置灰
		end
		if redflat then return true end
	end
	return false
end

--定期活动 祈愿相关信息
function i3k_game_context:setTimingActivityPrayInfo(info)
	self.timeingActivityPrayInfo = info
end
function i3k_game_context:getTimingActivityPrayInfo()
	return self.timeingActivityPrayInfo
end
--修改自己的祈愿
function i3k_game_context:setTimingActivityPrayTxt(str)
	if self.timeingActivityPrayInfo then
		self.timeingActivityPrayInfo.selfPray.content = str
		if self.timeingActivityPrayInfo.selfPray.firstPrayTime == 0 then
			self.timeingActivityPrayInfo.selfPray.firstPrayTime = i3k_game_get_time()
		end
	end
end
--修改自己领奖时间
function i3k_game_context:updateTimingActivityTakeAwardTime()
	if self.timeingActivityPrayInfo then
		self.timeingActivityPrayInfo.selfPray.rewardCount = self.timeingActivityPrayInfo.selfPray.rewardCount + 1
	end
end
--还愿领奖红点
function i3k_game_context:getTimingActivityReturnWishRed()
	local info = self:getTimingActivityPrayInfo()
	if not info then
		i3k_sbean.regular_pray_open(function()
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_TimingActivity, "refreshRed")
		end)
		return false
	else
		local prayinfo = info.selfPray
		if prayinfo.rewardCount < i3k_db_timing_activity_pray_common_cfg.maxTimes
		 	and prayinfo.firstPrayTime ~= 0 
		 	and i3k_game_get_time() - info.selfPray.firstPrayTime > i3k_db_timing_activity_pray_common_cfg.rewardTimeOffset then
			return true
		else
			return false
		end
	end
end
--------------------定时活动入口end----------------------------
--------------------帮派红包 ---------------------------
function i3k_game_context:setRedEnvelopeSend(times)
	self.redEnvelopeSend = times --已经变成元宝数了
end

function i3k_game_context:getRedEnvelopeSend()
	return self.redEnvelopeSend or 0
end

function i3k_game_context:addRedEnvelopeSend(times)
	self.redEnvelopeSend = self.redEnvelopeSend + times
end

function i3k_game_context:setRedEnvelopeReward(times)
	self.redEnvelopeReward = times
end

function i3k_game_context:getRedEnvelopeReward()
	return self.redEnvelopeReward or 0
end

function i3k_game_context:addRedEnvelopeReward(times)
	self.redEnvelopeReward = self.redEnvelopeReward + times
end

--设置帮派龙运之柱的数据
function i3k_game_context:setSectDestiny(data)
	self._sectDestinyData = data
	local world  = i3k_game_get_world()
	if world then
		for k, v in ipairs(i3k_db_faction_dragon.dragonCfg.dragonIDs) do
			local id = v
			local resourcePoint = world:GetResourcePointFormCfgID(id)
			local curPower = data[k] or 0
			if resourcePoint then
				resourcePoint:UpdateBarPercent(curPower / i3k_db_faction_dragon.dragonCfg.maxPoint )
			end
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionGarrisonSummary, "updateScroll")
end

function i3k_game_context:getSectDestiny()
	return self._sectDestinyData
end

function i3k_game_context:getPosInStarDish()
	return self._partMinPosInStarDish
end
function i3k_game_context:clearPosInStarDish()
	self._partMinPosInStarDish = {}
	return self._partMinPosInStarDish
end

function i3k_game_context:getChatBubbleCurrId()
	return self.chatBubbleCurrId
end

function i3k_game_context:setChatBubbleCurrId(currId)
	self.chatBubbleCurrId = currId
end

-- 江洋大盗begin
function i3k_game_context:setRobberDayRefreshTimes(count)
	self._robberDayRefreshTimes = count
end

function i3k_game_context:getRobberDayRefreshTimes()
	return self._robberDayRefreshTimes
end

function i3k_game_context:addRobberDayRefreshTimes()
	self._robberDayRefreshTimes = self._robberDayRefreshTimes + 1
end

function i3k_game_context:resetRobberDayRefreshTimes()
	self._robberDayRefreshTimes = 0
end
-- 返回刷新江洋大盗所需元宝和描述
-- return arg1 获取刷新所需元宝数量，为零则为免费次数; arg2 返回提示文本
function i3k_game_context:getRefreshRobberInfo()
	local needDiamondCount = 0
	local needDiamonds = i3k_db_robber_monster_base.condition.needDiamonds
	local dayRefreshTimes = self:getRobberDayRefreshTimes()
	local freeTimes = i3k_db_robber_monster_base.condition.freeRefreshTimes
	local nextTimes = dayRefreshTimes - freeTimes + 1
	if nextTimes > 0 then
		needDiamondCount = nextTimes > #needDiamonds and needDiamonds[#needDiamonds] or needDiamonds[nextTimes]
	end
	local msg = nextTimes > 0  and i3k_get_string(16821, needDiamondCount) or i3k_get_string(16820, freeTimes)
	return needDiamondCount, msg
end
--江洋大盗end
function i3k_game_context:setBackstageBtn(state)
	self.backstageState = state
end

function i3k_game_context:getBackstageBtn()
	return self.backstageState
end


-------------------等级封印解除-----------------

---判断等级封印是否解除
function i3k_game_context:isSealBreak()
	if self._roleData.curChar._isSealBreak and self._roleData.curChar._isSealBreak > 0 then
		return true
	else
		return false
	end
end

---设置等级封印信息
function i3k_game_context:setSealBreak(isBreak)
	self._roleData.curChar._isSealBreak = isBreak
end


-- 客户端检测角色名字无效字符弹框提示，协程处理
function i3k_game_context:startRoleNameInvalidRemind()
	g_i3k_coroutine_mgr:StopCoroutine(self._role_name_invalid_remind)
		self._role_name_invalid_remind = g_i3k_coroutine_mgr:StartCoroutine(function()
		while true do
			g_i3k_coroutine_mgr.WaitForSeconds(5) --延时
			if i3k_game_get_role_name_invalid_flag() and i3k_game_get_map_type() == g_FIELD then
				g_i3k_coroutine_mgr.WaitForSeconds(60) --提醒间隔
				if not g_i3k_ui_mgr:GetUI(eUIID_Loading) and i3k_game_get_role_name_invalid_flag() and i3k_game_get_map_type() == g_FIELD then
					local callback = function ()
		 				g_i3k_logic:OpenMyUI()
		 			end
		 			g_i3k_ui_mgr:ShowMessageBox1(i3k_get_string(1160), callback)
		 		end
			-- else
			-- 	g_i3k_coroutine_mgr:StopCoroutine(self._role_name_invalid_remind)
			end
		end
	end)
end

function i3k_game_context:stopRoleNameInvalidRemind()
	g_i3k_coroutine_mgr:StopCoroutine(self._role_name_invalid_remind)
end

function i3k_game_context:setLuckyStarState(state)
	self.openLuckyStarState = state
end

function i3k_game_context:LuckyStarState()
	if self.openLuckyStarState == 1 then
		g_i3k_ui_mgr:OpenUI(eUIID_LuckyStarTip)
	end
end

function i3k_game_context:setSectHonor(honor)
	self.sectHonor = honor
end

function i3k_game_context:getSectHonor()
	return self.sectHonor
end

function i3k_game_context:UseSectHonor(count, reason)
	self.sectHonor = self.sectHonor - count
	DCItem.consume(g_BASE_ITEM_SECT_HONOR, "帮派荣誉", count, reason)
end

function i3k_game_context:AddSectHonor(count)
	self.sectHonor = self.sectHonor + count
end

-- return void
function i3k_game_context:setBidTime(gid)
	if not self._bidTime then
		self._bidTime = {}
	end
	local curTime = i3k_game_get_time()
	self._bidTime[gid] = curTime
end
-- return boolean value
function i3k_game_context:checkBidTime(gid)
	if not self._bidTime or not self._bidTime[gid] then
		return true
	end
	local curTime = i3k_game_get_time()
	return curTime - self._bidTime[gid] >= i3k_db_bid_cfg.bidTime
end

---角色武功  for我要提升--------
--计算玩家武功等级总和
function i3k_game_context:GetRoleSkillsNum()
	local sum = 0
	for k,v in pairs(self:GetRoleSkills()) do
		if v then
			sum = sum + v.lvl
		end
	end
	return sum
end
--计算玩家武功境界等级总和
function i3k_game_context:GetRoleUniqueSkillsNum()
	local sum = 0
	for k,_ in pairs(self:GetRoleSkills()) do
		local cfg = self:GetRoleSkillsCfg(k)
		if cfg then
			sum = sum + cfg.state
		end
	end
	return sum
end
--计算玩家气功激活等级总和
function i3k_game_context:GetRoleSpiritsLvlSum()
	local levelSum = self:GetXinfaTotalLvl()
	local count = g_i3k_game_context:GetXinfaJiHuoNum()
	if not levelSum then
		return 0
	else
		return count == 0 and 0 or levelSum / count
	end
end
--计算经脉潜能总等级
function i3k_game_context:GetMeridianPotentialLvlSum()
	local sum = 0
	local cfg = g_i3k_game_context:getMeridianPotential()
	if cfg then
		for _,v in pairs(cfg) do
			sum = sum + v
		end
	end
	return sum
end
--------------------------------------------武道会 begin--------------------------------------------
-- 登录时同步武道会战队信息
function i3k_game_context:setFightTeamIdName(id, name, leaderID)
	if not self._fightTeamInfo then
		self._fightTeamInfo = {}
	end
	self._fightTeamInfo.id = id
	self._fightTeamInfo.name = name
	self._fightTeamInfo.leader = leaderID
end

function i3k_game_context:getFightTeamID()
	if self._fightTeamInfo and self._fightTeamInfo.id then
		return self._fightTeamInfo.id
	end
	return 0
end

--登录同步武道会结束时间
function i3k_game_context:setFightTeamEndTime(time)
	self._fightTeamEndTime = time
end

function i3k_game_context:getFightTeamEndTime()
	return self._fightTeamEndTime
end

-- 武道会战队信息
function i3k_game_context:setFightTeamInfo(info)
	self._fightTeamInfo = info
end

function i3k_game_context:getFightTeamInfo()
	return self._fightTeamInfo
end

-- 自己是否是战队队长
function i3k_game_context:getIsFightTeamLeader()
	if self._fightTeamInfo then
		local roleID = self:GetRoleId()
		return roleID == self._fightTeamInfo.leader
	end
	return false
end

function i3k_game_context:getFightTeamLeaderID()
	return self._fightTeamInfo.leader
end

function i3k_game_context:getFightTeamEvents()
	if self._fightTeamInfo then
		return self._fightTeamInfo.events
	end
	return false
end

function i3k_game_context:fightTeamKickMember(memberID)
	if self._fightTeamInfo and self._fightTeamInfo.members then
		if self._fightTeamInfo.members[memberID] then
			self._fightTeamInfo.members[memberID] = nil
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "loadFightTeamInfo", self._fightTeamInfo)
	end
end

function i3k_game_context:fightTeamJoinMember(member)
	if self._fightTeamInfo then
		if not self._fightTeamInfo.members then
			self._fightTeamInfo.members = {}
		end
		self._fightTeamInfo.members[member.overview.id] = member
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "loadFightTeamInfo", self._fightTeamInfo)
	end
end

function i3k_game_context:updateFightTeamMemberOnline(roleID, online)
	if self._fightTeamInfo and self._fightTeamInfo.members and self._fightTeamInfo.members[roleID] then
		self._fightTeamInfo.members[roleID].online = online
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "updateMemberOnline", roleID, online)
	end
end

function i3k_game_context:updateFightTeamMemberState(roleID, state)
	if self._fightTeamInfo and self._fightTeamInfo.members then
		self._fightTeamInfo.members[roleID].state = state
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "updateMemberState", roleID, state)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "updateGroupSignIcon")
	end
end

-- 重置队员签到状态
function i3k_game_context:resetFightTeamMemberState()
	if self._fightTeamInfo and self._fightTeamInfo.members then
		for k, v in pairs(self._fightTeamInfo.members) do
			v.state = 0
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "updateMemberState", k, 0)
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "updateGroupSignIcon")
	end
end

-- 获取锦标赛自己是否签到
function i3k_game_context:getIsSelfSign()
	if self._fightTeamInfo and self._fightTeamInfo.members then
		local roleID = self:GetRoleId()
		return self._fightTeamInfo.members[roleID].state == g_FIGHTTEAM_TOURNAMENT_MATCH
	end
	return false
end

-- 获取是否有队员签到，签到按钮状态
function i3k_game_context:getFightTeamMemberIsSign()
	if self._fightTeamInfo and self._fightTeamInfo.members then
		for _, v in pairs(self._fightTeamInfo.members) do
			if v.state == g_FIGHTTEAM_TOURNAMENT_MATCH then
				return true
			end
		end
	end
	return false
end

-- 服务器通知刷新对手签到状态
function i3k_game_context:updateEnemySignState(state)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "reloadEnemySignState", state)
end

function i3k_game_context:setFightTeamHonor(honor)
	self._fightTeamHonor = honor
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArenaList, "loadFightTeamHonor")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FightTeamSummary, "reloadSelfHonor")
end

function i3k_game_context:getFightTeamHonor()
	return self._fightTeamHonor
end

function i3k_game_context:addFightTeamJoinTimes()
	self._fightTeamJoinTimes = self._fightTeamJoinTimes + 1
end

-- 战队服役次数
function i3k_game_context:setFightTeamJoinTimes(joinTimes)
	self._fightTeamJoinTimes = joinTimes
end

function i3k_game_context:getFightTeamJoinTimes()
	return self._fightTeamJoinTimes
end

-- 赛事时间信息
function i3k_game_context:setFightTeamSchedule(season)
	self._fightTeamSchedule = {
		season.startTime,
		season.qualifying,
		season.sixtyfour,
		season.thirtytwo,
		season.sixteen,
		season.quarter,
		season.semi,
		season.finals,
	}
end

function i3k_game_context:getFightTeamSchedule()
	return self._fightTeamSchedule
end
--是否显示我的战队
function i3k_game_context:isShowMyTeamBtn()
	if self:getScheduleStage() > 1 then
		if not self:getFightTeamGroup() then
			if self:getFightTeamInfo() then
				return true
			end
		end
	end
	return false
end

--获取赛事阶段
function i3k_game_context:getScheduleStage()
	local stage = 1
	local seasons = self._fightTeamSchedule
	for k,v in ipairs(seasons) do
		if k ~= 1 then
			if i3k_game_get_time() >= v.resultTime then
				stage = k
			end
		end
	end
	return stage
end

-- 获取锦标赛时间信息, arg1 签到, arg2 开始战斗，arg3 结束时间
function i3k_game_context:getFightTeamStartTime()
	local stage = self:getScheduleStage()
	local nowTime = i3k_game_get_time()
	if stage > f_FIGHTTEAM_STAGE_QUALIFY then
		stage = stage < #self._fightTeamSchedule and stage + 1 or #self._fightTeamSchedule
		local timeInfo = self._fightTeamSchedule[stage]
		return timeInfo.startJoinTime, timeInfo.startFightTime, timeInfo.resultTime
	end
	return 0, 0, 0
end

-- 对手
function i3k_game_context:setFightTeamGroup(group)
	self._fightTeamGroup = group
end

function i3k_game_context:getFightTeamGroup()
	return self._fightTeamGroup
end

function i3k_game_context:setFightTeamResult(result)
	self._fightTeamResult = result
end

function i3k_game_context:getFightTeamResult()
	return self._fightTeamResult
end

function i3k_game_context:getTeamReward()
	self._fightTeamResult.teamReward = 1
end
function i3k_game_context:getRoleReward()
	self._fightTeamResult.roleReward = 1
end
-- 队伍包含自己的信息(overview,lives等等)
function i3k_game_context:setFightTeamMapInfo(members)
	self._fightTeamMapInfo = members
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FightTeamSummary, "reloadTeamScroll")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FightTeamSummary, "reloadOwnLives")
end

function i3k_game_context:getFightTeaemMapInfo()
	return self._fightTeamMapInfo
end

function i3k_game_context:updateFightTeamMapInfo(roleID, lives)
	if self._fightTeamMapInfo and #self._fightTeamMapInfo > 0 then
		for _, e in ipairs(self._fightTeamMapInfo) do
			local profile = e.profile
			if roleID == profile.overview.id then
				e.lives = lives
			end
		end
	end
	if self:GetRoleId() == roleID then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FightTeamSummary, "reloadOwnLives")
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FightTeamSummary, "onLivesChanged", roleID)
	end
	self:updateFightTeamGuardInfo(roleID, lives)
end

function i3k_game_context:getDefaultGroupID()
	local default = g_FIGHT_TEAM_WUHUANG
	if g_i3k_game_context:getScheduleStage() > f_FIGHTTEAM_STAGE_QUALIFY then
		local group = g_i3k_game_context:getFightTeamGroup()
		if group then
			default = group.group
		else
			local info = self:getFightTeamInfo()
			if info then
				for k, v in ipairs(info.events) do
					if v.eventID == g_FIGHT_TEAM_EVENTID then
						if i3k_db_fightTeam_group_name[v.iArg1] then -- 排除掉可能为0的情况，否则返回默认值
							return v.iArg1
						end
					end
				end
			end
		end
	end
	return default
end
function i3k_game_context:getFightTeamMemberLives(roleID)
	local lives = 0
	for _, e in ipairs(self:getFightTeaemMapInfo()) do
		if roleID == e.profile.overview.id then
			lives = e.lives
		end
	end
	return lives
end

-- 敌我双方的复活数
function i3k_game_context:setFightTeamLives(selfLives, enemyLives)
	self._fightTeamLives.self = selfLives
	self._fightTeamLives.enemy = enemyLives
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FightTeamSummary, "reloadLivesInfo")
end

function i3k_game_context:getFightTeamLives()
	return self._fightTeamLives
end

-- 观战者数据相关
function i3k_game_context:SetFightTeamGuardData(bean)
	local ids = {}
	for _, e in ipairs(bean.team1Members) do
		ids[e.profile.overview.id] = true
	end
	for _, e in ipairs(bean.team2Members) do
		ids[e.profile.overview.id] = true
	end
	g_i3k_game_context:SetListenedCustomRoles(ids)
	self._fightTeamGuard.team1Name = bean.team1Name
	self._fightTeamGuard.team2Name = bean.team2Name
	self._fightTeamGuard.team1Members = bean.team1Members
	self._fightTeamGuard.team2Members = bean.team2Members
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FightTeamGuard, "reladTeamName")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FightTeamGuard, "reloadTeamScroll")
end

-- 观战者 双方对战team数据
function i3k_game_context:GetFightTeamGuardData()
	return self._fightTeamGuard.team1Members, self._fightTeamGuard.team2Members
end

function i3k_game_context:GetFightTeamGuardTeamName()
	return self._fightTeamGuard.team1Name, self._fightTeamGuard.team2Name
end

-- 是否为观战者状态，线下势力战，线下武道会
function i3k_game_context:GetIsGuard()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetIsGuard()
	end
	return false
end

function i3k_game_context:updateFightTeamGuardInfo(roleID, lives)
	if self._fightTeamGuard and self._fightTeamGuard.team1Members and self._fightTeamGuard.team1Members then
		for i=1, 2 do
			local data = self._fightTeamGuard["team"..i.."Members"]
			for _, e in ipairs(data) do
				if roleID == e.profile.overview.id then
					e.lives = lives
				end
			end
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FightTeamGuard, "onLivesChanged", roleID)
	end
end

function i3k_game_context:getGuardMemberLives(roleID)
	for i=1, 2 do
		local data = self._fightTeamGuard["team"..i.."Members"]
		for _, e in ipairs(data) do
			if roleID == e.profile.overview.id then
				return e.lives
			end
		end
	end
	return 0
end
-- 观战者end
--------------------------------------------武道会end--------------------------------------------
-- 登录同步经脉
function i3k_game_context:setMeridians(meridians)
	self._meridians = meridians
end
function i3k_game_context:getMeridians()
	return self._meridians or {}
end
-- 刷新脉象
function i3k_game_context:resetMeridianPulse(meridianID, holes)
	if self._meridians and self._meridians[meridianID] then 
		self._meridians[meridianID].holes = holes
	end
end
-- 经脉冲穴
function i3k_game_context:addMeridianEnergy(meridianID, addEnergy)
	local point = i3k_db_meridians.acupuncturePoint
	for i, e in ipairs(addEnergy) do
		local PointIds = i3k_db_meridians.meridians[meridianID].acupuncturePointIds
		local pointID = PointIds[i]
		local energy = self._meridians[meridianID].holes[pointID].energy
		if energy < point[i].upperLimit then
			self._meridians[meridianID].holes[pointID].energy = self._meridians[meridianID].holes[pointID].energy + e.add + e.buffAdd
			if self._meridians[meridianID].holes[pointID].energy > point[i].upperLimit then
				self._meridians[meridianID].holes[pointID].energy = point[i].upperLimit
			end
		end
	end
end

function i3k_game_context:setMeridianPotential(potential)
	self.meridianPotential = potential
end

function i3k_game_context:changPotentialValue(potentialId)
	if not self.meridianPotential[potentialId] then
		self.meridianPotential[potentialId] = 0
	end
	self.meridianPotential[potentialId] = self.meridianPotential[potentialId] + 1
end

function i3k_game_context:getMeridianPotentialLvl(id)
	return self.meridianPotential[id] or 0
end

function i3k_game_context:getMeridianPotential()
	return self.meridianPotential
end

function i3k_game_context:getMeridianPotentialAttr()
	local cfg = i3k_db_meridians.potentia
	local attrs = {}
	for k,v in pairs(self.meridianPotential) do
		if cfg[k][v].talentType == eMP_AddProertyType then
			for _,attr in ipairs(cfg[k][v].attr) do
			 	if attr.id > 0 then
			 		if not attrs[attr.id] then
			 			attrs[attr.id] = attr.value
			 		else
			 			attrs[attr.id] = attr.value + attrs[attr.id]
			 		end
			 	end
			end
		end
	end
	return attrs
end

function i3k_game_context:GetIsMeridianRed()
	if self:GetLevel() >=  i3k_db_meridians.common.openLvl then
		local cfg = g_i3k_game_context:GetUserCfg();
		if cfg then
			local tiem = cfg:GetIsMeridianRed() - cfg:GetIsMeridianRed() % 86400;
			local timeNow = i3k_game_get_time() - i3k_game_get_time() % 86400;
			if tiem and timeNow - tiem   >= 86400 or tiem == 0 then
				return true;
			end
		end
	end

	return false;
end

function i3k_game_context:SetIsMeridianRed(Value)
	if self:GetLevel() >=  i3k_db_meridians.common.openLvl then
		local cfg = g_i3k_game_context:GetUserCfg();
		if cfg then
			return cfg:SetIsMeridianRed(Value);
		end
	end
end

function i3k_game_context:updateMeridianPotentialAttr()
	-- body
end

-- 获取装备等级降低属性值。必须达到二转，最大值不能超过40（暂时写死）
function i3k_game_context:getRoleEquipLevel()
	local transform = self:GetTransformLvl()
	if transform < 2 then
		return 0
	end
	local hero = i3k_game_get_player_hero()
	local equipLevelProp = hero:GetPropertyValue(ePropID_EquipLevel)
	return math.min(40, equipLevelProp)
end

function i3k_game_context:setBeRobbedTimes(time)
	self.beRobbedTimes = time
end

function i3k_game_context:getBeRobbedTimes()
	return self.beRobbedTimes
end

function i3k_game_context:setEscortCarblood(curBlood, maxBlood)
	if curBlood then
		self.escortCarCurBlood = curBlood
	end
	if maxBlood then
		self.escortCarMaxBlood = maxBlood
	end
	if self.escortCarCurBlood and self.escortCarMaxBlood then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_EscortAction, "setBlood", self.escortCarCurBlood, self.escortCarMaxBlood)
	end
end

function i3k_game_context:getEscortCarblood()
	return self.escortCarCurBlood, self.escortCarMaxBlood
end

-- 活动通用公告入口
function i3k_game_context:testActivityShow()
	-- return true
	local list = g_i3k_db.i3k_db_get_activity_show_list()
	return #list == 1 and i3k_db_activity_show[list[1]].isShowButton == 1
end

--宠物武库书包
function i3k_game_context:SetPetBooks(petBooks)
	self.petBooks = petBooks
end

function i3k_game_context:getPetBooks()
	return self.petBooks
end

function i3k_game_context:getPetBooksWithId(id)
	local cnt = 0
	if self.petBooks[id] then
		cnt = self.petBooks[id] + cnt
	end

	if self.petBooks[-id] then
		cnt = self.petBooks[-id] + cnt
	end
	-- cnt = self.petBooks[id] and (self.petBooks[id] + cnt) or 0
	-- cnt = self.petBooks[-id] and (self.petBooks[-id] + cnt) or 0
	return cnt
end

function i3k_game_context:getPetBooksInBag()
	local sort_items = {}

	for k,v in pairs(self._bagData.items) do
		if g_i3k_db.i3k_db_get_common_item_cfg(v.id).type == UseItemPetBook then
			sort_items[k] = v.count
		end
	end
	return sort_items
end

function i3k_game_context:subPetBook(k,v)

	if self.petBooks[k] then
		if self.petBooks[k] > v then
			self.petBooks[k] = self.petBooks[k] - v
			v = 0
		else
			v = v - self.petBooks[k]
			self.petBooks[k] = nil
		end
	end

	if v > 0 then
		self.petBooks[-k] = self.petBooks[-k] - v
		if self.petBooks[-k] == 0 then
			self.petBooks[-k] = nil
		end
	end
end

function i3k_game_context:addPetBook(items)
	for k,v in pairs(items) do
		if not self.petBooks[k] then
			self.petBooks[k] = v
		else
			self.petBooks[k] = self.petBooks[k] + v
		end
	end
end

function i3k_game_context:havePetBooksInBag()
	for k,v in pairs(self._bagData.items) do
		if g_i3k_db.i3k_db_get_common_item_cfg(v.id).type == UseItemPetBook then
			return true
		end
	end
	return false
end

-- 我的圣诞卡片信息
function i3k_game_context:SetMyChristmasCardInfo(info)
	self._christmasCardInfo = info
end

function i3k_game_context:GetMyChristmasCardInfo()
	return self._christmasCardInfo
end

function i3k_game_context:UpdateMyChristmasCardInfo(wishUpdateTime, overview)
	self._christmasCardInfo.wishUpdateTime = wishUpdateTime
	self._christmasCardInfo.overview = overview
end

--打开福利界面
function i3k_game_context:OpenUpgradepurchaseTip(lvl)
	for _, v in ipairs(i3k_db_upgrade_purcharse_cfg) do
		if v.actLevel == lvl then
			g_i3k_ui_mgr:OpenUI(eUIID_UpgradePurchaseTip)
			g_i3k_ui_mgr:RefreshUI(eUIID_UpgradePurchaseTip, v.actName, v.actIcon)
			break
		end
	end
end

--记录砸金蛋每个模型的id
function i3k_game_context:SetEggModelId(i, id)
	self._eggModelId[i] = id
end

--得到砸金蛋每个模型的id
function i3k_game_context:GetEggModelId()
	if not self._eggModelId then
		self._eggModelId = {}
	end
	return self._eggModelId
end

--清空砸金蛋每个模型id信息
function i3k_game_context:RemoveEggModelId()
	self._eggModelId = {}
end

--武道币
function i3k_game_context:SetBudoCount(count)
	self._budoCount = count
end

function i3k_game_context:GetBudoCount()
	return self._budoCount
end

function i3k_game_context:AddBudoCount(count)
	self._budoCount = self._budoCount + count
end

function i3k_game_context:UseBudoCount(count)
	self._budoCount = self._budoCount - count
end

--获取传家宝总战力（基础属性+强化属性+星魂属性）
function i3k_game_context:GetHeirloomFightPower()
	local baseProp = g_i3k_game_context:getHeirloomProps()
	local strengthProp = g_i3k_game_context:getHeirloomStrengthProps()
	local starProp = g_i3k_game_context:getXingHunProps()

	local tmp = {}
	for k, v in pairs(baseProp) do
		tmp[k] = (tmp[k] or 0) + v
	end
	for k, v in pairs(strengthProp) do
		tmp[k] = (tmp[k] or 0) + v
	end
	for k, v in pairs(starProp) do
		tmp[k] = (tmp[k] or 0) + v
	end

	return g_i3k_db.i3k_db_get_battle_power(tmp, true)
end

--星魂升阶
function i3k_game_context:addXingHunStage()
	local starSpirit = g_i3k_game_context:getHeirloomData().starSpirit
	starSpirit.rank = starSpirit.rank + 1
	local starStage = i3k_db_chuanjiabao.starStage[starSpirit.rank]
	if starStage then
		local unloclSubStarNum = starStage.unloclSubStarNum
		local roleType = g_i3k_game_context:GetRoleType()
		local starConfig = i3k_db_chuanjiabao.star[roleType]
		for i=1,unloclSubStarNum,1 do
			--添加解锁的辅星
			if not starSpirit.miniStars[starConfig.subStars[i]] then
				starSpirit.miniStars[starConfig.subStars[i]] = {
					id = starConfig.subStars[i],
					level = 1,
					exp = 0
				}
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_XingHun,"playUnloclAni",starConfig.subStars[i])
			end
		end

		local hero = i3k_game_get_player_hero()
		if hero then
			g_i3k_game_context:SetPrePower()
			hero:UpdateXingHunProp()
			g_i3k_game_context:ShowPowerChange()
		end
	end
end

--增加副星经验
function i3k_game_context:addXingHunSubsStarExp(starsData)
	for k,v in pairs(starsData) do
		self:addXingHunSubStarExp(k,v)
	end
end

function i3k_game_context:addXingHunSubStarExp(id,exp)
	local subStarData = self:getHeirloomData().starSpirit.miniStars[id]
	local subStarLevelConfig = i3k_db_chuanjiabao.subStarLevel
	local maxLevel = g_i3k_db.xinghun_getSubStarMaxLevel()
	local function getLevelConfig(level)
		if level > maxLevel then
			return nil
		end
		for k,v in ipairs(subStarLevelConfig) do
			if v.id == id and v.level == level then
				return v
			end
		end
		return nil
	end
	local isLevelUp = false
	local function addExp()
		local levelConfig = getLevelConfig(subStarData.level+1)
		if not levelConfig then
			return
		end
		if subStarData.exp >= levelConfig.exp then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_XingHun,"playLevelUpAni",id)
			subStarData.level = subStarData.level + 1
			isLevelUp = true
			subStarData.exp = subStarData.exp - levelConfig.exp
			if subStarData.exp > 0 then
				addExp()
			end
		else
			return
		end
	end

	subStarData.exp = subStarData.exp + exp
	addExp()

	if isLevelUp then
		local hero = i3k_game_get_player_hero()
		if hero then
			g_i3k_game_context:SetPrePower()
			hero:UpdateXingHunProp()
			g_i3k_game_context:ShowPowerChange()
		end
		g_i3k_ui_mgr:RefreshUI(eUIID_OpenArtufact1)
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XingHun,"playExpAni",id,exp)
end

function i3k_game_context:checkXinHunUpStageLevel(level)
	return self:GetCurSubStarMaxLvl() >= level
end

function i3k_game_context:checkXinHunUpStageCnt(count)
	return self:GetCurSubStarCnt() >= count
end

function i3k_game_context:GetCurSubStarMaxLvl()
	local starSpirit = g_i3k_game_context:getHeirloomData().starSpirit
	local maxLevel = 1
	for k,v in pairs(starSpirit.miniStars) do
		maxLevel = maxLevel > v.level and maxLevel or v.level
	end
	return maxLevel
end

function i3k_game_context:GetCurSubStarCnt()
	local starSpirit = g_i3k_game_context:getHeirloomData().starSpirit
	return table.nums(starSpirit.miniStars)
end

function i3k_game_context:GetSubStarCntWithLevel(level)
	local count = 0
	for k,v in pairs(g_i3k_game_context:getHeirloomData().starSpirit.miniStars) do
		if v.level >= level then
			count = count + 1
		end
	end
	return count
end

--获取装备的灵符类型(默认 水系)
function i3k_game_context:getLingFuType(amuletId)
	local equipId
	if amuletId then
		if amuletId ~= 0 then
			equipId = amuletId
		end
	else
		local equips = self:GetWearEquips()
		if equips[7] and equips[7].equip then
			equipId = equips[7].equip.equip_id
		end
	end

	if equipId then
		local equip_t = g_i3k_db.i3k_db_get_equip_item_cfg(equipId)
		return equip_t.properties[1].type, equip_t.properties[2].type
	end

	return ePropID_WindDamage, ePropID_WindDefence
end

function i3k_game_context:dealXingHunPropId(id, amuletId)
	local propId = id

	local isHaveSpecialProp = false

	local damageId,defenseId = self:getLingFuType(amuletId)
	if id == 1103 then
		propId = damageId
		isHaveSpecialProp = true
	end

	if id == 1104 then
		propId = defenseId
		isHaveSpecialProp = true
	end

	return propId, isHaveSpecialProp
end

function i3k_game_context:getXingHunProps()
	local _props = {}
	local starSpirit = g_i3k_game_context:getHeirloomData().starSpirit
	if starSpirit then
		for k,v in pairs(starSpirit.miniStars) do
			local props = g_i3k_db.xinghun_getSubStarConfig(v.id, v.level).props
			for i,v in ipairs(props) do
				if v.value > 0 then
					local propId = self:dealXingHunPropId(v.id)

					if not _props[propId] then
						_props[propId] = v.value
					else
						_props[propId] = _props[propId] + v.value
					end
				end
			end
		end

		local roleType = self:GetRoleType()
		local cfg = g_i3k_db.i3k_db_get_main_star_up_cfg(roleType, starSpirit.mainStarLvl)
		if cfg then
			for k,_ in pairs(starSpirit.mainStarProp or {}) do
				if k > 0 then
					if not _props[k] then
						_props[k] = cfg.propValue
					else
						_props[k] = _props[k] + cfg.propValue
					end
				end
			end
		end
	end
	return _props
end

function i3k_game_context:xingHunSetProps(props)
	local itemTb = {}
	for i = 1, #props do
		local prop = props[i]
		if prop.id > 0 and prop.value > 0 then
			local ui = require("ui/widgets/xinghunjdt")()
			local id = self:dealXingHunPropId(prop.id)
			ui.vars.propertyName:setText(g_i3k_db.i3k_db_get_property_name(id))
			ui.vars.propertyIcon:setImage(g_i3k_db.i3k_db_get_icon_path(g_i3k_db.i3k_db_get_property_icon(id)))
			ui.vars.propertyValue:setText(i3k_get_prop_show(id, prop.value))
			itemTb[i] = ui
		end
	end
	if #itemTb == 0 then
		local ui = require("ui/widgets/xinghunjdt2")()
		ui.vars.propertyName:setText("暂无属性")
		itemTb[1]= ui
	end
	return itemTb
end
--判断星魂红点
function i3k_game_context:xingHunIsShowRedPoint()
	if not self:getIsNeedShowXinghunRedPoint() then
		return false
	end
	return self:xingHunIsCanUpStage()
end
--判断星魂是否能升阶
function i3k_game_context:xingHunIsCanUpStage()
	local _curStage = self:getHeirloomData().starSpirit.rank  --当前星魂阶数
	if _curStage >= #i3k_db_chuanjiabao.starStage then
		return false
	end
	local _cfg = g_i3k_db.i3k_db_get_one_star_up_stage_cfg(_curStage + 1)
	return self:GetSubStarCntWithLevel(_cfg.condition.subStarLevel) >= _cfg.condition.subStarNum
end

function i3k_game_context:UpdateXinHunMainStarLvl()
	if self:getHeirloomData() then
		self:getHeirloomData().starSpirit.mainStarLvl = self:getHeirloomData().starSpirit.mainStarLvl + 1
	end
end

--星魂主星属性
function i3k_game_context:SetXinHunMainStarProps(props)
	if self:getHeirloomData() then
		self:getHeirloomData().starSpirit.mainStarProp = props

		local hero = i3k_game_get_player_hero()
		if hero then
			g_i3k_game_context:SetPrePower()
			hero:UpdateXingHunProp()
			g_i3k_game_context:ShowPowerChange()
		end
	end
end

function i3k_game_context:GetXinHunMainStarProps()
	return self:getHeirloomData().starSpirit.mainStarProp
end

--星魂主星临时属性
function i3k_game_context:SetXinHunMainStarTmpProps(props)
	if self:getHeirloomData() then
		self:getHeirloomData().starSpirit.mainStarPropTmp = props
	end
end

function i3k_game_context:GetXinHunMainStarTmpProps()
	return self:getHeirloomData().starSpirit.mainStarPropTmp
end

--获取当前未满级的辅星个数
function i3k_game_context:GetXingHunSubStatNotFullExpNum()
	local starSpirit = g_i3k_game_context:getHeirloomData().starSpirit
	local _cfg = i3k_db_chuanjiabao.starStage[starSpirit.rank]
	local num = 0
	if starSpirit then
		for k,v in pairs(starSpirit.miniStars) do
			if v.level >= _cfg.subStarLevelLimit then
				num = num + 1
			end
		end
	end
	return num
end

--龙穴任务相关
function i3k_game_context:SetDragonHoleTask(data)
	self._dragonHoleTask = data
end

function i3k_game_context:GetDragonHoleTask()
	return self._dragonHoleTask
end

function i3k_game_context:DelDragonHoleTask(id)
	self._dragonHoleTask[k] = nil
end

function i3k_game_context:GetAcceptDragonHoleTask()
	return self._getDragonHoleTask
end

function i3k_game_context:isAcceptDragonHoleTask(id)
	for _, v in ipairs(self._getDragonHoleTask) do
		if v.id == id then
			return v, true
		end
	end
	return {}, false
end

function i3k_game_context:AddAcceptDragonHoleTask(id, value, receiveTime, state)
	table.insert(self._getDragonHoleTask, {id = id, value = value, receiveTime = receiveTime, state = state})
end

function i3k_game_context:UpdateDragonHoleValue(taskType, id)
	local dragonCfg = {}
	for _, v in ipairs(self._getDragonHoleTask) do
		local cfg = g_i3k_db.i3k_db_get_dragon_task_cfg(v.id)
		if cfg.type == taskType and cfg.arg1 == id then
			local value = v.value
			local isFinished = self:IsTaskFinished(taskType, cfg.arg1, cfg.arg2, value)
			if not isFinished then
				value = value + 1
				self:ChangeAcceptDragonTaskValue(v.id, value)
				isFinished = self:IsTaskFinished(taskType, cfg.arg1, cfg.arg2, value)
				if i3k_game_get_map_type() == g_FIELD then
					if isFinished then
						g_i3k_game_context:RefreshMissionEffect()
						self:SetAutoFight(false)
					end
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateDragonHoleTask", isFinished, v.id)
				end
				table.insert(dragonCfg, {isThis = cfg.arg1 == id, isFinished = isFinished})
			end
		end
	end
	return dragonCfg
end

function i3k_game_context:ChangeAcceptDragonTaskValue(taskId, value)
	for _, v in ipairs(self._getDragonHoleTask) do
		if v.id == taskId then
			v.value = value
		end
	end
end

function i3k_game_context:DelAcceptDragonHoleTask(id)
	for k, v in ipairs(self._getDragonHoleTask) do
		if v.id == id then
			table.remove(self._getDragonHoleTask, k)
			return
		end
	end
end

function i3k_game_context:DelAllAcceptDragonHoleTask()
	self._getDragonHoleTask = {}
end

function i3k_game_context:updateDragonHoleResponse(taskId)
	local task, isAccept = self:isAcceptDragonHoleTask(taskId)
	if isAccept then
		local value = task.value
		local cfg = g_i3k_db.i3k_db_get_dragon_task_cfg(taskId)
		local isFinished = self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, value)
		--[[g_TASK_KILL				= 1;--杀怪
		g_TASK_COLLECT 			= 2;--采集
		g_TASK_USE_ITEM 			= 7;--提交道具
		g_TASK_NEW_NPC_DIALOGUE	= 12;--新npc对话--]]
		if cfg.type == g_TASK_KILL then
		elseif cfg.type == g_TASK_COLLECT then
			self:TaskCollect(cfg.arg1)
		elseif cfg.type == g_TASK_USE_ITEM then
			self:taskSubItem(TASK_CATEGORY_DRAGON_HOLE, cfg.arg1, cfg.arg2, taskId)
		elseif cfg.type == g_TASK_NEW_NPC_DIALOGUE then
			self:OpenDragonTaskFinishDialogue(taskId)
		end
	end
end

function i3k_game_context:OpenDragonTaskFinishDialogue(taskId)
	local dialogueList = g_i3k_db.i3k_db_get_dragon_task_finish_desc(taskId)
	local cfg = g_i3k_db.i3k_db_get_dragon_task_cfg(taskId)
	local fun
	if cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		fun = (function()
			local callBack = function()
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow") --检测有没有新加入背包的物品
			end
			local data = i3k_sbean.task_dialog_req.new()
			data.npcId = cfg.arg1
			data.dialogId = cfg.arg2
			data.taskCat = TASK_CATEGORY_DRAGON_HOLE
			data.__callback = callBack
			i3k_game_send_str_cmd(data,i3k_sbean.task_dialog_res.getName())
		end)
	end
	if #dialogueList ~= 0 then
		if (not g_i3k_logic:IsRootUIBattle()) then
			return
		end
		local motable = {}
		for i=1,#dialogueList do
			local keyName = "finishTaskDialogue" .. i .. "Icon"
			table.insert(motable,cfg[keyName])
		end
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,dialogueList,motable,fun,TASK_CATEGORY_DRAGON_HOLE)
	end
end

--设置弹幕数据
function i3k_game_context:initShootMsgData()
	self._shootMsgData = {}
end

function i3k_game_context:getShootMsgData()
	return self._shootMsgData
end

function i3k_game_context:updateShootMsg(roleId,msg)
	local isUpdate = false
	for k,v in ipairs(self._shootMsgData) do
		if v.roleId == roleId then
			isUpdate = true
			v.msg = msg
		end
	end
	if not isUpdate then
		table.insert(self._shootMsgData,{roleId = roleId,msg = msg})
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionMain,"showOneShootMsg")
	end
end

function i3k_game_context:getMyShootMSg()
	local ret = nil
	for k,v in ipairs(self._shootMsgData) do
		if v.roleId == self:GetRoleId() then
			ret = v.msg
		end
	end
	return ret
end

function i3k_game_context:setShootMsgSendTime()
	self._shootMsgSendTime = i3k_game_get_time()
end

function i3k_game_context:isCanSendShootMsg(shootType)
	local sendTime = 0
	local shootMsgCd = 0
	if shootType == g_SHOOT_MSG_TYPE_FACTION then
		sendTime = self._shootMsgSendTime
		shootMsgCd = i3k_db_common.shootMsg.cd
	elseif shootType == g_SHOOT_MSG_TYPE_HEGEMONY then
		sendTime = g_i3k_game_context:getHegemonyShootMsgSentTime()
		shootMsgCd = i3k_db_five_contend_hegemony.shootMsg.shootMsgCd
	end
	if sendTime then
		local now = i3k_game_get_time()
		return now - sendTime >= shootMsgCd
	else
		return true
	end
end

function i3k_game_context:getAdventure()
	return self._adventure
end

function i3k_game_context:getAdventureTask()
	return self._adventure.task
end

function i3k_game_context:setAdventure(data)
	local d = self._adventure
	d.adventureValue = data.adventureValue
	d.trigID = data.trigID
	d.trigEndTime = data.trigEndTime
	d.task = data.task
	d.finished = data.finished
	self:setQiyun(data.adventureValue)
end

function i3k_game_context:InitAdventureTask(taskId)
	self._adventure.trigEndTime = 0
	if taskId > 0 then
		local cfg = i3k_db_adventure.tasks[taskId]
		local taskValue = g_i3k_game_context:InitTaskValue(cfg.type, cfg.arg1, cfg.arg2)
		local state = cfg.getTaskNpcID == 0 and 1 or 0
		self:setAdventureTask(taskValue, state, taskId)
		self:RefreshMissionEffect()
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateAdventureTask")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_DailyTask,"updateAdventureState", self._adventure.trigID)
	else
		local trigID = self._adventure.trigID
		self._adventure.trigID = 0
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_DailyTask,"updateAdventureState", trigID)
		self:removeAdventureTask()
	end
end

function i3k_game_context:removeAdventureTask()
	self:removeTaskData(TASK_CATEGORY_ADVENTURE)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateAdventureTask")
end

function i3k_game_context:addAdventureValue(value)
	self._adventure.adventureValue = self._adventure.adventureValue + value
end

function i3k_game_context:setAdventureId(id, time)
	local d = self._adventure
	d.trigID = id
	d.trigEndTime = i3k_game_get_time() + i3k_db_adventure.cfg.limitTime
end

function i3k_game_context:setAdventureTask(value, state, id)
	local task = self._adventure.task
	if id then
		task.id = id
	end

	if value then
		task.value = value
	end

	if state then
		task.state = state
	end
end

function i3k_game_context:nextAdventureTask(chooseNextId)
	local task = self._adventure.task
	local db = i3k_db_adventure

	local circuit = db.circuit[task.id]
	local nextId = db.circuit[task.id].nextId[1]

	table.insert(task.taskIDs, task.id)
	if circuit.rewardId > 0 then
		task.rewards[circuit.rewardId] = circuit.rewardCnt
	end
	if nextId == 0 then
		task.id = 0
		task.value = 0
		task.state = 0
		local d = self._adventure
		d.finished[d.trigID] = {isTake = 0, rewards = task.rewards, taskIDs = task.taskIDs}
		--if table.nums(task.rewards) == 0 then
			--d.finished[d.trigID].isTake = 1
		--end
		task.rewards = {}
		task.taskIDs = {}
		self:removeAdventureTask()
		g_i3k_logic:OpenAdventrue()
	else
		local cfg = db.tasks[task.id]
		self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.finish)
		if cfg.type == g_TASK_SHAPESHIFTING then	--护送NPC
			g_i3k_game_context:setConvoyNpcState(false)
		end
		task.id = nextId
		cfg = db.tasks[nextId]
		self:RefreshMissionEffect()
		g_i3k_game_context:AddTaskToDataList(TASK_CATEGORY_ADVENTURE)
		task.value = g_i3k_game_context:InitTaskValue(cfg.type, cfg.arg1, cfg.arg2)
		task.state = cfg.getTaskNpcID == 0 and 1 or 0
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateAdventureTask")
		if cfg.getTaskNpcID == 0 then
		 	g_i3k_game_context:OpenGetTaskDialogue(cfg, TASK_CATEGORY_ADVENTURE)
		end
	end
end

function i3k_game_context:finishAdventureTask(trigID)
	self._adventure.finished[trigID].isTake = 1
end

function i3k_game_context:isFinishCurrAdventureTask()
	local d = self._adventure
	if d.trigID == 0 then
		return false
	elseif not d.finished[d.trigID] then
		return false
	elseif d.finished[d.trigID].isTake == 1 then
		return false
	end
	return true
end

--[[function i3k_game_context:OpenAdventureFinishDialogue(task)
	local t = g_i3k_db.i3k_db_get_faction_task_finish_desc(task)
	local fun
	if task.type == g_TASK_NEW_NPC_DIALOGUE then
		fun = (function()
			local callBack = function()
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow") --检测有没有新加入背包的物品
			end
			local data = i3k_sbean.task_dialog_req.new()
			data.npcId = task.arg1
			data.dialogId = task.arg2
			data.taskCat = TASK_CATEGORY_ADVENTURE
			data.__callback = callBack
			i3k_game_send_str_cmd(data,i3k_sbean.task_dialog_res.getName())
		end)
	end

	if #t ~= 0 then
		if (not g_i3k_logic:IsRootUIBattle()) then
			return
		end
		local motable = {}
		for i=1,#t do
			local keyName = "finishTaskDialogue" .. i .. "Icon"
			table.insert(motable,task[keyName])
		end
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun,TASK_CATEGORY_ADVENTURE)
	end
end--]]

function i3k_game_context:setDragonTaskScore(score)
	if score then
		self._dragonTaskScore = score
	end
end

function i3k_game_context:getDragonTaskScore()
	return self._dragonTaskScore
end

function i3k_game_context:resetXinghunRedPoint(isEnable)
	self._isNeedShowXinghunRedPoint = isEnable
end
function i3k_game_context:getIsNeedShowXinghunRedPoint()
	return self._isNeedShowXinghunRedPoint
end

function i3k_game_context:setNewYearRedGetNpcid(npcIds)
	self.newYearRedGetNpcid = npcIds or {}
end

function i3k_game_context:getNewYearRedGetNpcid()
	return self.newYearRedGetNpcid
end

function i3k_game_context:addNewYearRedGetNpcid(npcId)
	table.insert(self.newYearRedGetNpcid, npcId)
end

--新春福袋入口显示
function i3k_game_context:TestLuckyPackState()
	local isShowIcon = g_i3k_db.i3k_db_check_lucky_pack_is_open()
	local isShowRed = false
	return isShowIcon, isShowRed
end

function i3k_game_context:GetNowPackID()
	return self._packId
end

function i3k_game_context:SetNowPackID(packId)
	self._packId = packId
end

function i3k_game_context:setLimitTimeTask(data)
	self.limitTimeTask.taskID = data.taskID
	self.limitTimeTask.receiveTime = data.receiveTime
end

function i3k_game_context:getLimitTimeTask()
	return self.limitTimeTask
end

function i3k_game_context:initLimitTask(addTaskId)
	local d = self.limitTimeTask
	d.taskID = addTaskId
	d.receiveTime = i3k_game_get_time()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "initLimitTask")
end

function i3k_game_context:nextLimitTimeTask(addTaskId, finishTaskId)
	local d = self.limitTimeTask
	if d.taskID == 0 then
		if addTaskId ~= 0 then
			self:initLimitTask(addTaskId)
		end
	else
		if d.taskID == finishTaskId then
			self:initLimitTask(addTaskId)
		end
	end
end

function i3k_game_context:TestDengmi()
	local level = self:GetLevel()
	local isShowTime = g_i3k_db.i3k_db_check_dengmi_is_open()
	if level >= i3k_db_dengmi_common.level and isShowTime then
		return true
	end
	return false
end

function i3k_game_context:setHitDiglettInfo(info)
	self._diglettInfo = info
end

function i3k_game_context:getHitDiglettInfo()
	return self._diglettInfo
end

--八卦能量
function i3k_game_context:SetBaguaEnergy(energy)
	self._baguaEnery = energy
end
function i3k_game_context:GetBaguaEnergy()
	return self._baguaEnery
end

function i3k_game_context:AddBaguaEnergy(count)
	self._baguaEnery = self._baguaEnery + count
end

function i3k_game_context:UseBaguaEnergy(count, reason)
	self._baguaEnery = self._baguaEnery - count
	DCItem.consume(g_BASE_ITEM_BAGUA_ENERGY, "八卦能量", count, reason)
end

--八卦装备信息
function i3k_game_context:setEquipDiagrams(data)
	self._bagua.equipDiagrams = data
end

function i3k_game_context:getEquipDiagrams()
	return self._bagua.equipDiagrams or {}
end

function i3k_game_context:wearEquipDiagrams(equipId, partId)
	if equipId and partId then
		self._bagua.equipDiagrams[partId] = self._bagua.bagDiagrams[equipId]
	end
end

function i3k_game_context:unwearEquipDiagrams(partId)
	if partId then
		self._bagua.equipDiagrams[partId] = nil
	end
end

--八卦强化信息
function i3k_game_context:setPartStrength(data)
	self._bagua.partStrength = data
end

function i3k_game_context:getPartStrength()
	return self._bagua.partStrength or {}
end
--设置八卦技能装备状态（skillid = 0 为卸载装备）
function i3k_game_context:setBaguaJinengID(partID, skillId)
	self._bagua.partStrength[partID].changeInfo.equipSkill = skillId
end
function i3k_game_context:getYilueUpTaoZhuangCount(suitID, changeSkills, equipDiagrams, partStrength)
	if equipDiagrams and changeSkills then
		local count = 0
		for i,v in pairs(equipDiagrams) do
			if equipDiagrams[i] then
				local equipSkillID = 0
				if partStrength then
					if partStrength[i].changeInfo then
						equipSkillID = partStrength[i].changeInfo.equipSkill 
					else
						equipSkillID = equipDiagrams[i].yilue.equipSkill
					end
				else
					equipSkillID = equipDiagrams[i].yilue.equipSkill
				end
				if equipSkillID ~= 0 then
					local upType, param1, param2 = self:getYilueSkillTypeID(equipSkillID, changeSkills)
					if upType == 3 and param1 == suitID then
						count = count + param2
					end
				end
			end
		end
		return count
	end
	return 0
end
--易略是否开启
function i3k_game_context:isYilueOpen()
	return next(self._bagua.partStrength[1].changeInfo.propPoints) ~= nil
end
--判断易略是否为初始状态
function i3k_game_context:yiluePointIsInit(points)
	for _,v in ipairs(points) do
		if v > 1 then
			return false
		end
	end
	return true
end
--获取对应易略的专精等级
function i3k_game_context:GetYilueZhuanjingLv(partId)
	local min = nil
	if partId then
		for i,v in ipairs(partId) do
			if min == nil then
				min = v
			end
			if min > v then
				min = v
			end
		end
	end
	return min
end
--获取八卦的类型
function i3k_game_context:GetYilueType(pointTable)
	local maxTable = {}
	local max = nil
	local typeID = 0
	if pointTable then
		for i,v in ipairs(pointTable) do
			if max == nil then
				max = v
				typeID = i
				table.insert(maxTable, max)
			elseif max < v then
				maxTable = {}
				max = v
				typeID = i
				table.insert(maxTable, max)
			elseif max == v then
				table.insert(maxTable, max)
			end
		end
	end
	if #maxTable == 1 then
		return typeID
	else
		return 4
	end
end
--八卦易略信息（购买次数，已用点数，装备易略技能）
function i3k_game_context:SetBaguaYilue(data)
	self._bagua.yilue = data
end

function i3k_game_context:AddBaguaYilueUsePoint(point)
	self._bagua.yilue.usedChangePoint = self._bagua.yilue.usedChangePoint + point
end
function i3k_game_context:GetBaguaYilue()
	return self._bagua.yilue or {}
end
--激活或升级易略技能
function i3k_game_context:JihuoBaguaYilieSkill(id)
	if self._bagua.yilue.changeSkills[id] then
		self._bagua.yilue.changeSkills[id] = self._bagua.yilue.changeSkills[id] + 1
	else
		self._bagua.yilue.changeSkills[id] = 1
	end
end
--得到八卦易略技能等级
function i3k_game_context:GetBaguaYilueSkillLevel(id)
	local lv = self._bagua.yilue.changeSkills[id] and self._bagua.yilue.changeSkills[id] or 0
	return lv
end
--得到当前易略已购买点数的次数
function i3k_game_context:GetBaguaYilueBuyPointTimes()
	local time = self._bagua.yilue.buyChangePointNum and self._bagua.yilue.buyChangePointNum or 0
	return time
end
function i3k_game_context:SetBaguaYilueBuyPointTimes(time)
	self._bagua.yilue.buyChangePointNum = time
end
--拿到当前已购买的易略点数
function i3k_game_context:GetBaguaByPointSum()
	local pointNum = 0
	local time = self:GetBaguaYilueBuyPointTimes()
	if time > 0 then
		pointNum = i3k_db_bagua_yilue_pointCfg[time].point
	end
	return pointNum
end
--初始化易略信息
function i3k_game_context:InitYilueData()
	for i=1,#i3k_db_bagua_part do
		for j=1,3 do
			self._bagua.partStrength[i].changeInfo.propPoints[j] = 1
		end
	end
end
--保存易略点
function i3k_game_context:SaveYilueAddPoint(partId, points)
	self._bagua.partStrength[partId].changeInfo.propPoints = points
end
function i3k_game_context:GetYiuePointsByPartId(partId)
	return self._bagua.partStrength[partId].changeInfo.propPoints
end
--重置易略点数操作
function i3k_game_context:ResetYiluePoint(partId)
	local returnPoint = 0
	for i,v in ipairs(self._bagua.partStrength[partId].changeInfo.propPoints) do
		returnPoint = returnPoint + v - 1
	end
	self:AddBaguaYilueUsePoint(-returnPoint)
	self._bagua.partStrength[partId].changeInfo.propPoints = {1,1,1}
	return self._bagua.partStrength[partId].changeInfo.propPoints
end

--八卦背包信息
function i3k_game_context:SetBagDiagrams(data)
	self._bagua.bagDiagrams = data
end

function i3k_game_context:GetBagDiagrams()
	return self._bagua.bagDiagrams or {}
end

function i3k_game_context:DelBagDiagrams(equipId)
	if equipId then
		self._bagua.bagDiagrams[equipId] = nil
	end
end

function i3k_game_context:AddBagDiagrams(equipInfo)
	self._bagua.bagDiagrams[equipInfo.id] = equipInfo
end

--刷新八卦属性
function i3k_game_context:refreshBaguaProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		g_i3k_game_context:SetPrePower()
		hero:UpdateBaGuaProp()
		g_i3k_game_context:ShowPowerChange()
	end
end

local function initZeroTable(tab,key)
	if not tab[key] then
		tab[key] = 0
	end
end

--设置词缀属性
function i3k_game_context:updateBaguaAffixInfo(bagDiagram, prop, addStrength)
	for _,additionPropId in ipairs(bagDiagram.additionProp) do
		local additionPropData = i3k_db_bagua_affix[additionPropId]
		if additionPropData then
			--普通属性
			if additionPropData.affixType == 1 then
				for i = 1,5,2 do
					if additionPropData["args" .. i] ~= 0 then
						initZeroTable(prop,additionPropData["args" .. i])
						prop[additionPropData["args" .. i]] = prop[additionPropData["args" .. i]] + additionPropData["args" .. (i + 1)]
					end
				end
			end
			--强化等级
			if additionPropData.affixType == 2 then
				initZeroTable(addStrength,bagDiagram.part)
				addStrength[bagDiagram.part] = addStrength[bagDiagram.part] + additionPropData.args1
			end
		end
	end
end

--设置套装属性
function i3k_game_context:updateBaguaSuitInfo(bagDiagram, prop, addStrength, equipDiagrams, skills, partStrength)
	local suitData = {}
	for part,bagDiagram in pairs(equipDiagrams) do
		for _,additionPropId in ipairs(bagDiagram.additionProp) do
			local additionPropData = i3k_db_bagua_affix[additionPropId]
			if additionPropData and additionPropData.affixType == 3 then
				initZeroTable(suitData,additionPropData.args1)
				suitData[additionPropData.args1] = suitData[additionPropData.args1] + 1
			end
		end
	end
	--处理套装信息
	for suitKey,suitNum in pairs(suitData) do
		local oneSuitData  = {}
		for _,v in ipairs(i3k_db_bagua_suit_prop) do
			--这里添加一个易略技能加成判断
			local count = self:getYilueUpTaoZhuangCount(v.id, skills, equipDiagrams, partStrength)
			local newNeed = v.needCnt - count < 0 and 0 or v.needCnt - count
			if v.id == suitKey and suitNum >= newNeed then
				table.insert(oneSuitData,v)
			end
		end

		for _,v in ipairs(oneSuitData) do
			--套装基础属性
			if v.propType == 1 then
				for i = 1,5,2 do
					if v["args" .. i] ~= 0 then
						initZeroTable(prop,v["args" .. i])
						prop[v["args" .. i]] = prop[v["args" .. i]] + v["args" .. (i + 1)]
					end
				end
			end
			--套装强化等级
			if v.propType == 2 then
				for i = 1,8 do
					initZeroTable(addStrength,i)
					addStrength[i] = addStrength[i] + v.args1
				end
			end
		end
	end
end

--设置强化后的基础属性
function i3k_game_context:updateBaguaStrengthInfo(bagDiagram, prop, addStrength)
	local strength = addStrength[bagDiagram.part]
	local attrUpPer = 0
	if strength >= 1 then
		attrUpPer = i3k_db_bagua_streng[strength].attrUpPer
	end
	--获取基础属性
	for _,baseProp in ipairs(bagDiagram.baseProp) do
		initZeroTable(prop,baseProp.id)
		prop[baseProp.id] = prop[baseProp.id] + baseProp.value + math.floor(baseProp.value * attrUpPer / 10000)
	end
end

--计算八卦属性
function i3k_game_context:getBaGuaProps()
	local prop = {} 			--总属性

	local addStrength = {} 		--部位强化等级
	--获取基础强化信息
	for _,bagDiagramStrength in pairs(self:getPartStrength()) do
		addStrength[bagDiagramStrength.partId] = bagDiagramStrength.level
	end

	for _,bagDiagram in pairs(self:getEquipDiagrams()) do
		self:updateBaguaAffixInfo(bagDiagram, prop, addStrength)
	end

	self:updateBaguaSuitInfo(bagDiagram, prop, addStrength, self:getEquipDiagrams(), self:GetBaguaYilue().changeSkills, self:getPartStrength())
	--获取易略加成属性
	for i,yilueData in pairs(self:getPartStrength()) do
		if self:getEquipDiagrams()[i] then
			self:updateBaguaYilueInfo(i, yilueData.changeInfo, prop, addStrength, self:GetBaguaYilue().changeSkills)
		end 
	end

	--计算强化后的基础属性
	self._bagua.strength = addStrength

	for _,bagDiagram in pairs(self:getEquipDiagrams()) do
		self:updateBaguaStrengthInfo(bagDiagram, prop, addStrength)
	end

	return prop
end
--拿到易略技能的加成效果类型以及参数
function i3k_game_context:getYilueSkillTypeID(skillId, changeSkills)
	local addType = 0
	local param1 = 0
	local param2 = 0
	if skillId ~= 0 then
		local data = i3k_db_bagua_yilue_skill[skillId].skillJie[changeSkills[skillId]]
		addType = data.typeID
		param1 = data.param1
		param2 = data.param2
	end
	return addType, param1, param2
end
--统计易略属性
function i3k_game_context:updateBaguaYilueInfo(partId, data, prop, addStrength, changeSkills)
	--根据技能和技能等级确定加成类型
	local addType = self:getYilueSkillTypeID(data.equipSkill, changeSkills) 
	--计算点数的基础和附加属性
	for i,v in ipairs(data.propPoints) do
		local valueData = i3k_db_bagua_yilue_Attr[partId][i][v]
		--基础属性
		initZeroTable(prop, valueData.baseID)
		prop[valueData.baseID] = prop[valueData.baseID] + valueData.baseValue
		--附加属性
		if addType == g_Yilue_SKILL_TYPE_1 then 	--按易略技能效果							 
			initZeroTable(prop, valueData.upID)
			prop[valueData.upID] = prop[valueData.upID] + valueData.upValue
		else 					--按类型								 
			local yilueType = self:GetYilueType(data.propPoints)
			if yilueType == i then
				initZeroTable(prop, valueData.upID)
				prop[valueData.upID] = prop[valueData.upID] + valueData.upValue
			end
		end
	end
	if addType == g_Yilue_SKILL_TYPE_2 then
		initZeroTable(addStrength,partId)
		addStrength[partId] = addStrength[partId] + i3k_db_bagua_yilue_skill[data.equipSkill].skillJie[changeSkills[data.equipSkill]].param1
	end
end

--计算单个八卦总战力(只适用于已装备的八卦)
function i3k_game_context:getBaGuaPower(bagDiagram, partStrength, equipDiagrams)
	if bagDiagram then
		local prop = {}    		--基础属性

		local addStrength = {}
		local partId = bagDiagram.part

		--获取基础强化信息
		addStrength[partId] = partStrength[partId].level

		self:updateBaguaAffixInfo(bagDiagram, prop, addStrength)
		self:updateBaguaSuitInfo(bagDiagram, {}, addStrength, equipDiagrams, bagDiagram.yilue.changeSkills, partStrength)
		self:updateBaguaStrengthInfo(bagDiagram, prop, addStrength)

		self:updateBaguaYilueInfo(partId, bagDiagram.yilue, prop, addStrength, bagDiagram.yilue.changeSkills)
		--partStrength[partId].changeInfo
		return g_i3k_db.i3k_db_get_battle_power(prop, true)
	end
	return 0
end

--计算单个八卦基础战力(基础属性+词缀基础属性)
function i3k_game_context:getBaGuaBasePower(bagDiagram)
	if bagDiagram then
		local prop = {}
		--获取基础属性
		for _,baseProp in ipairs(bagDiagram.baseProp) do
			initZeroTable(prop,baseProp.id)
			prop[baseProp.id] = prop[baseProp.id] + baseProp.value
		end
		self:updateBaguaAffixInfo(bagDiagram, prop, {})

		return g_i3k_db.i3k_db_get_battle_power(prop, true)
	end
	return 0
end

function i3k_game_context:getBaGuaFinalStrength()
	return self._bagua.strength
end

--品质+部位排序
function i3k_game_context:sortBaguaItems(items)
	local result = {}
	for _, v in pairs(items) do
		table.insert(result, v)
	end
	table.sort(result, function(a, b)
		local sortA = g_i3k_db.i3k_db_get_bagua_rank(a.additionProp) * 10 + (#i3k_db_bagua_part - a.part)
        local sortB = g_i3k_db.i3k_db_get_bagua_rank(b.additionProp) * 10 + (#i3k_db_bagua_part - b.part)
        return sortA > sortB
	end)

	return result
end

function i3k_game_context:SetFactionTakeRewardCnt(count)
	self._takeRewardCnt = count
end

function i3k_game_context:GetFactionTakeRewardCnt()
	return self._takeRewardCnt or 0
end

function i3k_game_context:setFactionBusinessTask(taskID, curValue, receiveTime)
	local d = self._factionBusinessTask
	d.id = taskID or d.id
	d.value = curValue or d.value
	d.receiveTime = receiveTime or d.receiveTime
end

function i3k_game_context:initFactionBusinessTask(id)
	self:AddTaskToDataList(TASK_CATEGORY_FCBS)
	local d = self._factionBusinessTask
	d.id = id
	local cfg = i3k_db_factionBusiness_task[id]
	d.value = g_i3k_game_context:InitTaskValue(cfg.type, cfg.arg1, cfg.arg2)
end

function i3k_game_context:getFactionBusinessTask()
	return self._factionBusinessTask
end

function i3k_game_context:setFactionBusinessHonor(honor)
	self._factionBusinessHonorLvl = honor
end

function i3k_game_context:getFactionBusinessHonor(Honor)
	return self._factionBusinessHonorLvl
end

----------跨服PVE 幽冥密令 相关 ---------
function i3k_game_context:setPveBattleKey(key)
	self._battleKey = key
end

function i3k_game_context:addPveBattleKey(adds)
	self._battleKey = self._battleKey + adds
end

function i3k_game_context:getPveBattleKey()
	return self._battleKey
end
-----------------------------------------
-- 拼多多入口控制龙魂币购买
function i3k_game_context:setPinduoduoDragonCoinOpen(flag)
	self._dragonCoinOpenFlag = flag
end
function i3k_game_context:getPinduoduoDragonCoinOpen()
	return self._dragonCoinOpenFlag
end

function i3k_game_context:getBaguaCountBySuitId(suitId)
	local count = 0
	for i = 1,8 do
		if self:getBaguaCountBySuitIdAndPartId(suitId,i) > 0 then
			count = count + 1
		end
	end
	return count
end

function i3k_game_context:getBaguaAffixBySuit(suitId)
	local ret = {}
	for k,affix in pairs(i3k_db_bagua_affix) do
		if affix.affixType == 3 and affix.args1 == suitId then
			affix.partId = k % 10
			table.insert(ret,affix)
		end
	end
	return ret
end

function i3k_game_context:getBaguaCountBySuitIdAndPartId(suitId,partId)
	local count = 0
	for _,bagDiagram in pairs(self:getEquipDiagrams()) do
		if bagDiagram.part == partId then
			for _,additionPropId in ipairs(bagDiagram.additionProp) do
				local additionPropData = i3k_db_bagua_affix[additionPropId]
				if additionPropData and additionPropData.affixType == 3 then
					if additionPropData.args1 == suitId then
						count = count + 1
					end
				end
			end
		end
	end
	--这里根据新需求屏蔽掉计算背包套装数量
	--[[
	for _,bagDiagram in pairs(self:GetBagDiagrams()) do
		if bagDiagram.part == partId then
			for _,additionPropId in ipairs(bagDiagram.additionProp) do
				local additionPropData = i3k_db_bagua_affix[additionPropId]
				if additionPropData and additionPropData.affixType == 3 then
					if additionPropData.args1 == suitId then
						count = count + 1
					end
				end
			end
		end
	end
	]]
	return count
end

function i3k_game_context:setQiyun(count)
	self._qiyun = count
end

function i3k_game_context:getQiyun()
	return self._qiyun
end

function i3k_game_context:addQiyun(count)
	self._qiyun = self._qiyun + count
end

function i3k_game_context:useQiyun(count)
	self._qiyun = self._qiyun - count
end

--记录拼图是否完成
function i3k_game_context:setPusslePicIsFinish(state)
	self._pusslePic = state
end

function i3k_game_context:getPusslePicIsFinish()
	return self._pusslePic
end




function i3k_game_context:checkMillionsAnswerTipsState()
	local role_lvl = self:GetLevel()
	if not self:GetUserCfg():GetIsShowAnswerTips() or (role_lvl < i3k_db_millions_answer_cfg.needLvl) or not g_i3k_db.i3k_db_get_millions_answer_is_open() then
		return
	end
	local openTime = g_i3k_get_day_time(i3k_db_millions_answer_cfg.openTime)
	local curTime = i3k_game_get_time()
	local preTime = i3k_db_millions_answer_cfg.answerTipsTime or 60
	if openTime - curTime == preTime then
		if i3k_game_get_map_type() == g_FIELD and self:GetWorldMapID() ~= i3k_db_spring.common.mapId then
			local co = g_i3k_coroutine_mgr:StartCoroutine(function ()
				g_i3k_coroutine_mgr.WaitForNextFrame()
				local desc = string.format("距离百万答题开始还有%s分钟", math.modf(preTime / 60))
		        local fun = (function(ok)
		            if ok then
						i3k_sbean.million_answer_sync()
		            end
		        end)
		        g_i3k_ui_mgr:ShowMessageBox2(desc, fun)
		        g_i3k_coroutine_mgr:StopCoroutine(co)
				co = nil
			end)
		end
	end
end

--设置百万答题选择状态
function i3k_game_context:setMillionsAnswerSelectOption(questionId, selectOption)
	self._selectOption[questionId] = selectOption
end

function i3k_game_context:getMillionsAnswerSelectOption(questionId)
	return self._selectOption[questionId]
end

function i3k_game_context:clearMillionsAnswerSelectOption()
	self._selectOption = {}
end

--挂签

function i3k_game_context:setDivinationInfo(info)
	self._divinationInfo = info
end

function i3k_game_context:getDivinationCount()
	return self._divinationInfo and self._divinationInfo.divinationCount or 1
end

--end

------------ 五转之路 --------------
function i3k_game_context:setFiveTrans(info)
	self._fiveTrans = info

	if self._setUseXinfaData then
		self:doUseXinfaData()
	end
end
function i3k_game_context:getFiveTrans()
	return self._fiveTrans
end

-- 临时保存一些数据，因为客户端收到协议同步的顺序会有一些问题
function i3k_game_context:setUseXinfaData(data)
	self._setUseXinfaData = data
end
function i3k_game_context:doUseXinfaData()
	if self._setUseXinfaData then
		local curSpirits = self._setUseXinfaData
		local count  = #curSpirits--args:pop_int()
		for i=1 ,count do
			local id = curSpirits[i]--args:pop_int()
			g_i3k_game_context:SetUseXinfa(id)
		end
		self._setUseXinfaData = nil
	end
end

function i3k_game_context:setFiveTransLevel(level)
	self._fiveTrans.level = level
end

function i3k_game_context:goToFiveTransNpc()
	local npcID = i3k_db_five_trans_other.npcID
	self:GotoNpc(npcID)
end

function i3k_game_context:addDestinyRollPoint(id)
	self._fiveTrans.liftWheel[id] = true
end

function i3k_game_context:resetDestinyRollPoint()
	for i, v in pairs(self._fiveTrans.liftWheel) do
		self._fiveTrans.liftWheel[i] = false
	end
end

function i3k_game_context:getDestinyRollProps()
	local _props = {}
	if self._fiveTrans then
	for i,v in pairs(self._fiveTrans.liftWheel) do
		if v then
			for k,s in pairs(i3k_db_destiny_roll[i].props) do
				if s.id ~= 0 then
					if _props[s.id] then
						_props[s.id] = _props[s.id] + s.count
					else
						_props[s.id] = s.count
						end
					end
				end
			end
		end
	end
	return _props
end

-------------------------------

function i3k_game_context:setRollSendTime(time)
	self._rollSendTime = time
end

function i3k_game_context:getRollSendTime()
	return self._rollSendTime
end

function i3k_game_context:setMoodDiaryDecorate(data)
	self.moodDiaryDecorate = data
end

function i3k_game_context:getMoodDiaryDecorate()
	return self.moodDiaryDecorate
end

function i3k_game_context:isHaveMoodDiaryDecorate(id)
	if id == 1 then
		return true
	end
	if self.moodDiaryDecorate then
		for k, v in ipairs(self.moodDiaryDecorate) do
			if v == id then
				return true
			end
		end
	end
end

function i3k_game_context:addMoodDiaryDecorate(id)
	if not self.moodDiaryDecorate then
		self.moodDiaryDecorate = {}
	end
	table.insert(self.moodDiaryDecorate, id)
end

function i3k_game_context:updatePigeonPost(data)
	self.pigeonPost = data
	if data then
		self.pigeonPost.time = i3k_game_get_time()
	end
end

function i3k_game_context:getPigeonPost()
	return self.pigeonPost
end


------幻灵部分
function i3k_game_context:getWeaponEquip()
	local equips = self:GetWearEquips()
	return equips[eEquipWeapon]
end


--获取强化等级未设置的话则使用当前装备等级（默认值）
function i3k_game_context:getEffectEvoLvl()
	local effectInfo = self:GetEquipWeaponEffectInfo()
	local curEvoLvl = effectInfo.evoLvl
	if not curEvoLvl or curEvoLvl < 0 then
		local weaponEquip = self:getWeaponEquip()
		curEvoLvl = weaponEquip.eqEvoLvl
	end
	return curEvoLvl
end

function i3k_game_context:updatePlayerHeirloomShow()
	local hero = i3k_game_get_player_hero();
	g_i3k_game_context:needShowHeirloom(hero)
	--[[local usefashion = g_i3k_game_context:get_hero_skin_info(hero);
	if usefashion[1] and  g_i3k_game_context:GetIsShwoFashion() then
	else
		g_i3k_game_context:needShowHeirloom(hero)
	end--]]
end

--暂时写死的特效名字
function i3k_game_context:getWeaponEffectName(evoLvl)

	local strId = 0
	if not evoLvl or evoLvl >= 16 then
		strId = 17170
    else
		strId = 17169
	end
	return i3k_get_string(strId)
end

--获得单人闯关信息
function i3k_game_context:getSingleChallengeInfo()
	return self._singleChallengeId, self._singleChallengenpcGroupId
end

function i3k_game_context:setSingleChallengeInfo(id, npcGroupId)
	self._singleChallengeId = id
	self._singleChallengenpcGroupId = npcGroupId
end

function i3k_game_context:SetSingleChallengePets(pets)
	self._singleChallengePets = {}
	for k, v in pairs(pets) do
		table.insert(self._singleChallengePets, i3k_db_mercenaries[k])
	end
end

function i3k_game_context:AddSingleChallengePets(pets, count)
	local isAdd = true
	for i = #self._singleChallengePets, 1, -1 do
		if self._singleChallengePets[i].id == pets.id then
			table.remove(self._singleChallengePets, i)
			isAdd = false
		end
	end
	if isAdd then
		if #self._singleChallengePets >= count then
			table.remove(self._singleChallengePets, 1)
		end
		table.insert(self._singleChallengePets, pets)
	end
end

function i3k_game_context:GetSingleChallengePets()
	return self._singleChallengePets
end

----------------魂玉 龙印 附灵----------------------
function i3k_game_context:setFulingInfo(data)
	self._fuling = data
	self:RefreshLongyinProps()
end
function i3k_game_context:getFulingInfo()
	return self._fuling
end
function i3k_game_context:getFulingCurLevel()
	local info = self:getFulingInfo()
	return info.curLvl + 1 -- 服务器从0开始计数
end

function i3k_game_context:fulingUpLevel()
	self._fuling.curLvl = self._fuling.curLvl + 1
end

-- 获取当前等级附灵的属性 map
function i3k_game_context:getFulingProps()
	local level = self._fuling.curLvl
	local props = g_i3k_db.i3k_db_get_fuling_props(level)
	return props
end
-- 获取当前等级附灵的属性 map
function i3k_game_context:getFulingNextLevelProps()
	local level = self._fuling.curLvl
	local props = g_i3k_db.i3k_db_get_fuling_nextLevel_props(level)
	return props
end
-- 获取当前等级附灵消耗
function i3k_game_context:getFulingConsumes()
	local level = self:getFulingCurLevel()
	local consumes = g_i3k_db.i3k_db_get_fuling_consumes(level)
	return consumes
end

function i3k_game_context:getWuxingAllCount()
	local level = self._fuling.curLvl
	local haveBuyPoints = self:GetFulingHaveBuyPoints()
	return g_i3k_db.i3k_db_get_fuling_available_points(level) + haveBuyPoints
end

function i3k_game_context:getWuxingNextLevelAllCount()
	local level = self._fuling.curLvl
	return g_i3k_db.i3k_db_get_fuling_available_points(level + 1)
end

function i3k_game_context:addFulingUpTimes()
	self._fuling.curUpTimes = self._fuling.curUpTimes + 1
end
function i3k_game_context:resetFulingUpTimes()
	self._fuling.curUpTimes = 0
end
function i3k_game_context:getFulingUpTimes()
	return self._fuling.curUpTimes
end

-- 五行相生相关
function i3k_game_context:getWuxingUsedPoints()
	local count = 0
	for k, v in pairs(self._fuling.addPoints) do
		count = count + v
	end
	return count
end
function i3k_game_context:getWuxingPoint(id)
	return self._fuling.addPoints[id] or 0
end
function i3k_game_context:addWuxingPoint(id, value)
	if not self._fuling.addPoints[id] then
		self._fuling.addPoints[id] = value
	else
		self._fuling.addPoints[id] = self._fuling.addPoints[id] + value
	end
end

--是否显示魂玉洗炼红点
function i3k_game_context:setLongYinPracticeRedPoint(isShow)
	self._isShowLongYinPracticeRedPoint = isShow
end

function i3k_game_context:getLongYinPracticeRedPoint()
	return self._isShowLongYinPracticeRedPoint
end

-- 相生
function i3k_game_context:getXiangshengPoint(id)
	return self._fuling.upEachOther[id] or 0
end
function i3k_game_context:addXiangshengPoint(id, value)
	if not self._fuling.upEachOther[id] then
		self._fuling.upEachOther[id] = value
	else
		self._fuling.upEachOther[id] = self._fuling.upEachOther[id] + value
	end
end

function i3k_game_context:getFulingResetTimes()
	return self._fuling.resetAddPointCnt
end
function i3k_game_context:addFulingResetTimes()
	self._fuling.resetAddPointCnt = self._fuling.resetAddPointCnt + 1
end

function i3k_game_context:resetFulingAll()
	self._fuling.upEachOther = {}
	self._fuling.addPoints = {}
end

function i3k_game_context:getWuxingProps()
	local result = {}
	for k, v in pairs(self._fuling.addPoints) do
		local cfg = i3k_db_longyin_sprite_addPoint[k]
		local props = cfg[v].props
		for i, e in ipairs(props) do
			local id = e.id
			local count = e.count
			if not result[id] then
				result[id] = count
			else
				result[id] = result[id] + count
			end
		end
	end
	return result
end

function i3k_game_context:getXiangshengProps()
	local result = {}
	local wuxingProps = self:getWuxingProps()
	for k, v in pairs(self._fuling.upEachOther) do
		local cfg = i3k_db_longyin_sprite_born[k]
		local type = cfg[v].effectType -- 这种类型的，对应 i3k_db_longyin_sprite_addPoint 表中的属性
		local percent = cfg[v].effectCount / 10000
		local level = self._fuling.addPoints[type] -- 可能为空
		if level then
			local props = i3k_db_longyin_sprite_addPoint[type][level].props
			if props then
				for i, e in ipairs(props) do
					local id = e.id
					local count = e.count
					if not result[id] then
						result[id] = math.floor(count * percent)
					else
						result[id] = result[id] + math.floor(count * percent)
					end
				end
			end
		end
	end
	return result
end

-- 百分比 0 ~ 1
function i3k_game_context:getXiangshengPercent(id)
	local value = self._fuling.upEachOther[id]
	if not value then
		return 0
	end
	local cfg = i3k_db_longyin_sprite_born[id]
	return cfg[value].effectCount / 10000
end


-- 计算附灵所有的属性
function i3k_game_context:getAllFulingProps()
	if not self._fuling then
		return {}
	end
	local fulingProps = self:getFulingProps()
	local wuxingProps = self:getWuxingProps()
	local percentProps = self:getXiangshengProps()

	local m1 = g_i3k_db.i3k_db_merge_props(fulingProps, wuxingProps)
	local m2 = g_i3k_db.i3k_db_merge_props(m1, percentProps)
	return m2
end

function i3k_game_context:getFulingResetGetItems()
	local res = {}
	for k, v in pairs(self._fuling.upEachOther) do
		local cfg = i3k_db_longyin_sprite_born[k][v]
		local id = cfg.resetBackItemID
		local count = cfg.resetBackItemCount
		if id ~= 0 then
			if not res[id] then
				res[id] = count
			else
				res[id] = res[id] + count
			end
		end
	end

	local items = {}
	for k, v in pairs(res) do
		table.insert(items, {id = k, count = v})
	end
	return items
end

-- 附灵红点
function i3k_game_context:getFulingRedPoint()
	local lvlNow = g_i3k_game_context:GetIsHeChengLongYin()
	local levelCfg = g_i3k_db.i3k_db_get_hunyu_fuling_level()
	local roleLevel = g_i3k_game_context:GetLevel()
	if lvlNow < levelCfg.openState or roleLevel < levelCfg.openLevel then return false end
	-- 有可分配点数
	local usedPoints = g_i3k_game_context:getWuxingUsedPoints()
	local allPoints = g_i3k_game_context:getWuxingAllCount()
	if allPoints - usedPoints > 0 then
		return true
	end
	-- 有道具可以升阶的
	local items = g_i3k_game_context:getFulingConsumes()
	if #items == 0 then -- 圆满了，消耗这里不判断了
		return false
	end
	for k, v in ipairs(items) do
		local haveCount = g_i3k_game_context:GetCommonItemCanUseCount(v.id)
		if v.count > haveCount then
			return false
		end
	end
	return true
end

function i3k_game_context:updateFulingReadPoint()
	g_i3k_ui_mgr:RefreshUI(eUIID_RoleLy, "refreshLongYinRedPoint")
	g_i3k_ui_mgr:RefreshUI(eUIID_RoleLy2, "refreshLongYinRedPoint")
	g_i3k_ui_mgr:RefreshUI(eUIID_Bag, "refreshLongYinRedPoint")
	g_i3k_ui_mgr:RefreshUI(eUIID_LongYin, "updateFulingRedPoint")
end

-- 根据五行相生等级，获取附灵动画（特效）的id
function i3k_game_context:getFulingEffectID()
	local res = {}
	for i = 1, 5 do
		local preID = g_i3k_db.i3k_db_get_wuxing_pre_index(i)
		local key = g_i3k_db.i3k_db_get_wuxing_index(preID, #i3k_db_longyin_sprite_addPoint)
		local level =  self._fuling.upEachOther[key]
		if level then
			local effectID = i3k_db_longyin_sprite_born[key][level].effectID
			table.insert(res, effectID)
		else
			table.insert(res, 0)
		end
	end
	return res
end

--获得附灵购买分配点次数
function i3k_game_context:GetFulingBuyPointsCnt()
	return self._fuling.buyPointsCnt
end
function i3k_game_context:AddFulingBuyPointsCnt()
	self._fuling.buyPointsCnt = self._fuling.buyPointsCnt + 1
end
function i3k_game_context:GetFulingHaveBuyPoints()
	local haveBuyPointsCnt = self:GetFulingBuyPointsCnt()
	return g_i3k_db.i3k_db_fuling_have_buy_points(haveBuyPointsCnt)
end
---------------------------------------------------
--获取背包里可以使用的体力道具
function i3k_game_context:getCanUseVitItems(isRefresh)
	--没有物品更新过的话可以考虑使用上次保存的数据提高效率
	if not self._vitItems or isRefresh then
		local playerLvl = g_i3k_game_context:GetLevel()
		local vitItems = {}
		local _, bagItems = self:GetBagInfo()
		for id, bagItem in pairs(bagItems) do
			local item_cfg = g_i3k_db.i3k_db_get_other_item_cfg(id)
			if item_cfg and item_cfg.type == UseItemVit and playerLvl >= item_cfg.levelReq then
				local dayTimes = g_i3k_db.i3k_db_get_day_use_item_day_use_times(id) or math.huge
				if dayTimes > 0 then
					vitItems[id] = bagItem
				end
			end
		end
		self._vitItems = vitItems
	end
	return self._vitItems
end

function i3k_game_context:clearCanUseVitItems()
	self._vitItems = nil
end

function i3k_game_context:simpleBagItemSort(items)
	local sort_items = {}
	local bagSize = 0
	for k,v in pairs(items) do
		if (v.id and v.id ~= 0) or (v.itemID and v.itemID ~= 0) then
			local item_cfg = g_i3k_db.i3k_db_get_other_item_cfg(v.id or v.itemID)
			bagSize = bagSize + 1
			local guids = {}
			if v.equips then
				for kk, vv in pairs(v.equips) do
					table.insert(guids, kk)
				end
			end
			local value = item_cfg and item_cfg.args1 or 1
			table.insert(sort_items, { value = value, sortid = g_i3k_db.i3k_db_get_bag_item_order(k), id = v.id or v.itemID, count = v.count or v.itemCount, guids = guids})
		end
	end
	table.sort(sort_items,function (a,b)
		if a.value == b.value then
			return a.sortid < b.sortid
		else
			return a.value > b.value
		end
	end)
	return bagSize, sort_items
end

-------------------------------------------
-- <家园系统> ---------------------------------

-- 是否可以进入传送，寻路等功能
-- 帮派驻地,家园可打开主ui的副本，后续可添加，可策划改为配置
function i3k_game_context:GetNotEnterTips()
	local mapType = i3k_game_get_map_type()
	local notEnterMap = {
		[g_FACTION_GARRISON]	= i3k_get_string(16613),
		[g_HOME_LAND]			=  i3k_get_string(5092),
		[g_HOMELAND_HOUSE]		= "房屋内禁止寻路",
	}
	return notEnterMap[mapType]
end

--如果有特殊的mapId要屏蔽某些入口，加在下面这个方法里
function i3k_game_context:GetNotEnterMapIdTips()
	if self:GetIsSpringWorld() then
		return i3k_get_string(17285)
	end
	if self:GetIsGlodCoast() then
		return i3k_get_string(5582)--"黄金海岸不允许打开"
	end
end

--寻路前检测npc是否显示
function i3k_game_context:GetNpcNotShow(npcId)
	if not g_i3k_db.i3k_db_get_npc_is_show(npcId) then
		return i3k_get_string(19027)
	end
end
-- 获取当前地图的所有玩家数据
function i3k_game_context:setHomeLandPlayers(players)
	self._homeLandPlayers = players
end

function i3k_game_context:getHomeLandPlayers()
	return self._homeLandPlayers
end

-- 获取对应等级家园的土地数量
function i3k_game_context:getHomeLandGroundNum(level)
	local cfg = i3k_db_home_land_lvl[level]
	local num = 0
	if cfg then
		for index, groundTypes in ipairs(cfg.landPosIDs) do
			num = num + #groundTypes
		end
	end
	return num
end


-- 进入家园系统，如果传入ID等于玩家自己的id或者没有传入则进入自己的家园
function i3k_game_context:gotoPlayerHomeLand(playerId)
	local forbidStr
	local mapType = i3k_game_get_map_type()
	if self:GetLevel() < i3k_db_home_land_base.baseCfg.visitLvl then
		forbidStr = string.format("需要达到%s级才可进入家园", i3k_db_home_land_base.baseCfg.openLvl)
	elseif self:IsInFightTime() then
		forbidStr = "只有在非战斗状态方可进入" -- 战斗状态的判断估计是后端返回错误码
	--[[elseif not self:isRoleSelf(playerId) then
		local friend = self:GetFriendsDataByID(playerId)
		if not friend then
			forbidStr = i3k_get_string(5095)
		elseif friend.eachFriend == 0 then
			forbidStr = i3k_get_string(5096)
		end--]]
	end
	if forbidStr then
		g_i3k_ui_mgr:PopupTipMessage(forbidStr)
		return
	end
	i3k_sbean.homeland_enter(playerId)
end

function i3k_game_context:gotoPlayerHomeLandError(playerId)
	local forbidStr
	local mapType = i3k_game_get_map_type()
	if (mapType ~= g_FIELD or self:GetIsSpringWorld()) then
		forbidStr = i3k_get_string(5093)
	elseif self:IsInRoom() or self:getMatchState() ~= 0 then
		forbidStr = i3k_get_string(5094)
	end
	if forbidStr then
		g_i3k_ui_mgr:PopupTipMessage(forbidStr)
	end
end

-- 类型和地块索引做位运算
function i3k_game_context:getGroundKey(typeId, groundIndex)
	return (typeId * 65536 + groundIndex)
end

-- 类型和地块索引做位运算
function i3k_game_context:getGroundTypeAndIndexByKey(groundKey)
	return math.floor(groundKey / 65536), (groundKey % 65536) -- 2^16
end

function i3k_game_context:GetIsInHomeLandZone()
	return i3k_game_get_map_type() == g_HOME_LAND --g_FACTION_GARRISON
end

function i3k_game_context:GetHomelandStealTimes(homeland)
	local homelandData = homeland or self:GetHomeLandData()
	if homelandData.plantData then
		local max = i3k_db_home_land_base.baseCfg.stealMaxTimes
		local left = max - homelandData.plantData.dayStealTime
		return left.."/"..max, left
	end
	return 0
end

-- 设置家园当前装备数据
function i3k_game_context:SetHomeLandCurEquip(curEquips)
	self._homeLandCurEquip = curEquips
end

function i3k_game_context:GetHomeLandCurEquip()
	return self._homeLandCurEquip
end

-- 穿上家园装备
function i3k_game_context:WearHomeLandCurEquip(equipType, equip)
	self._homeLandCurEquip[equipType] = equip
end

-- 脱下家园装备
function i3k_game_context:DownWearHomeLandCurEquip(equipType)
	if self._homeLandCurEquip and self._homeLandCurEquip[equipType] then
		self._homeLandCurEquip[equipType] = nil
	end
end

-- 使用当前家园装备，消耗次数, 次数为零时刷新场景模型
function i3k_game_context:UseHomeLandCurEquip(equipType)
	if self._homeLandCurEquip and self._homeLandCurEquip[equipType] then
		if self._homeLandCurEquip[equipType].canUseTime > 0 then
			self._homeLandCurEquip[equipType].canUseTime = self._homeLandCurEquip[equipType].canUseTime -1
		end
		if self._homeLandCurEquip[equipType].canUseTime == 0 then
			local confId = self._homeLandCurEquip[equipType].confId
			local cfg = g_i3k_db.i3k_db_get_homeLandEquipCfg(confId)
			local hero = i3k_game_get_player_hero()
			if hero and cfg.skinID ~= 0 and cfg.skinID == hero:GetHomeLandEquipSkinID() then
				hero:DetachHomeLandEquip()
			end
			self:DownWearHomeLandCurEquip(equipType)
		end
	end
end

-- 家园当前装备是否可以钓鱼，钓鱼需要鱼竿和鱼饵
function i3k_game_context:GetHomeLandCurEquipCanFish()
	local fishPole = false -- 鱼竿
	local fishBait = false -- 鱼饵
	for k, v in pairs(self._homeLandCurEquip) do
		local cfg = g_i3k_db.i3k_db_get_homeLandEquipCfg(v.confId)
		if k == g_HOMELAND_WEAPON_EQUIP then
			if cfg.isCanFish == 1 then
				fishPole = true
			end
		elseif k == g_HOMELAND_WEAPON_BAIT then
			fishBait = true
		end
	end
	return fishPole and fishBait
end

-- 获取当前装备的钓鱼精通加成
function i3k_game_context:GetHomeLandCurEquipFishMaster()
	local fishPolePoint = 0
	local fishBaitPoint = 0
	for k, v in pairs(self._homeLandCurEquip) do
		local cfg = g_i3k_db.i3k_db_get_homeLandEquipCfg(v.confId)
		if k == g_HOMELAND_WEAPON_EQUIP then
			if cfg.isCanFish == 1 then
				fishPolePoint = cfg.propTb[1].propValue
			end
		elseif k == g_HOMELAND_WEAPON_BAIT then
			fishBaitPoint = cfg.propTb[1].propValue
		end
	end
	return fishPolePoint + fishBaitPoint, fishPolePoint, fishBaitPoint
end

-- 获取当前装备的种植精通加成
function i3k_game_context:GetHomeLandCurEquipPlantMaster()
	local flag, v, cfg = self:GetHomeLandCurEquipCanPlant()
	if flag and cfg then
		return cfg.propTb[1].propValue
	end
	return 0
end

-- 家园当前装备是否可以种植，需要装备可以种植类型装备
function i3k_game_context:GetHomeLandCurEquipCanPlant()
	for k, v in pairs(self._homeLandCurEquip) do
		local cfg = g_i3k_db.i3k_db_get_homeLandEquipCfg(v.confId)
		if k == g_HOMELAND_WEAPON_EQUIP and cfg.isCanPlant == 1 then
			return true, v, cfg
		end
	end
	return false
end

-- 使用钓鱼装备
function i3k_game_context:UseHomeLandFishEquip()
	self:UseHomeLandCurEquip(g_HOMELAND_WEAPON_EQUIP)
	self:UseHomeLandCurEquip(g_HOMELAND_WEAPON_BAIT)
	self:SetHomeLandFishTime(0)
	self:setHomeLandFishCount(self._homelandFishCount + 1)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_HomeLandFish, "updateFishBtnState", true)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_HomeLandFish, "updateFishBtnImage", g_THROW_STATE)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_HomeLandFish, "finishFish")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_HomeLandFish, "loadFishEquipInfo")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_HomeLandFish, "refreshFishAndExpCount")
end

-- 设置钓鱼朝向点
function i3k_game_context:SetHomeLandFishPos(pos)
	self._homeLandFacePos = pos
end

-- 获取钓鱼朝向点
function i3k_game_context:GetHomeLandFishPos()
	return self._homeLandFacePos
end

function i3k_game_context:onUpdateFishPromptHandler(isPrompt)
	local prompt = isPrompt and not g_i3k_game_context:GetHomeLandFishStatus()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateFishPrompt", prompt)
end

-- 家园装备信息
function i3k_game_context:SetHomeLandEquip(homelandEquip)
	self._homeLandData.homelandEquip = homelandEquip
end

-- 添加到临时背包中
function i3k_game_context:AddHomeLandEquipBag(guid, equip)
	if self._homeLandData.homelandEquip then
		if not self._homeLandData.homelandEquip.equipBag then
			self._homeLandData.homelandEquip.equipBag = {}
		end
		self._homeLandData.homelandEquip.equipBag[guid] = equip
	end
end

-- 从临时背包中移除
function i3k_game_context:RemoveHomeLandEquipBag(guid)
	if self._homeLandData.homelandEquip then
		if self._homeLandData.homelandEquip.equipBag[guid] then
			self._homeLandData.homelandEquip.equipBag[guid] = nil
			local hero = i3k_game_get_player_hero()
			if hero then
				hero:DetachHomeLandEquip()
				hero:UnloadHomeLandFishModel()
			end
		end
	end
end

function i3k_game_context:GetHomeLandEquip()
	return self._homeLandData.homelandEquip and self._homeLandData.homelandEquip.equipBag or {}
end

-- 鱼漂时间
function i3k_game_context:SetHomeLandFishTime(time)
	self._startFishTime = time or 0
end

function i3k_game_context:GetHomeLandFishTime()
	return self._startFishTime or 0
end

-- 是否在钓鱼区域
function i3k_game_context:GetIsInFishArea()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetIsInFishArea()
	end
	return false
end

-- 钓鱼状态
function i3k_game_context:SetHomeLandFishStatus(status, bean)
	self._homeLandFishStatus = status == 1
	self:setHomeLandFishCount(bean.dayFishTime)
	self:setHomeLandFishExpCount(bean.dayFishExpTime)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_HomeLandFish, "refreshFishAndExpCount")
end

-- 是否正在钓鱼状态，重连服务器同步，需要重新打开钓鱼UI
function i3k_game_context:GetHomeLandFishStatus()
	return self._homeLandFishStatus
end

function i3k_game_context:ClearHomeLandFishStatus()
	self._homeLandFishStatus = false
end

function i3k_game_context:SetHomeLandLevel(level)
	self._homeLandData.level = level
end

function i3k_game_context:GetHomeLandLevel()
	return self._homeLandData.level or 0
end

function i3k_game_context:SetHomeLandHouseLevel(level)
	self._homeLandData.houseData.houseLevel = level
	self._homeLandData.houseLevel = level
end

function i3k_game_context:SetCurHomeLandHouseLevel(level)
	if self:isInMyHomeLand() then
		self._homeLandData.houseData.houseLevel = level
		self._homeLandData.houseLevel = level
	else
		self._homeLandMapData.houseLevel = level
	end
end

function i3k_game_context:GetHomeLandHouseLevel()
	return self._homeLandData.houseData.houseLevel or 0
end

function i3k_game_context:hasHomeLand(showTips)
	local flag = self:GetHomeLandLevel() > 0
	if not flag and showTips then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5077))
	end
	return flag
end

function i3k_game_context:SetHomeLandPlantLevel(plantLevel)
	if not self._homeLandData.plantData then
		self._homeLandData.plantData = {}
	end
	self._homeLandData.plantData.plantLevel = plantLevel
	self._homeLandData.plantLevel = plantLevel
end

-- 获取自己的家园种植等级
function i3k_game_context:GetHomeLandPlantLevel()
	return self._homeLandData.plantData and self._homeLandData.plantData.plantLevel or 1
end

-- 获取自己的池塘等级
function i3k_game_context:GetHomeLandPoolLevel()
	return self._homeLandData and self._homeLandData.poolLevel or 0
end

-- 自己家园的数据
function i3k_game_context:SetHomeLandData(homeland)
	self._homeLandData = homeland
	self._homeLandData.houseLevel = self._homeLandData.houseData.houseLevel
end

function i3k_game_context:GetHomeLandData()
	return self._homeLandData
end

function i3k_game_context:GetExtraHarvestTimes(petId)
	return self._homeLandData.wizzardRewards[petId] or 0
end

function i3k_game_context:AddExtraHarvestTimes(petId)
	if not self._homeLandData.wizzardRewards[petId] then
		self._homeLandData.wizzardRewards[petId] = 0
	end
	self._homeLandData.wizzardRewards[petId] = self._homeLandData.wizzardRewards[petId] + 1
end

function i3k_game_context:ClearExtraHarvestTimes()
	if self._homeLandData and self._homeLandData.wizzardRewards then
		for k, v in pairs(self._homeLandData.wizzardRewards) do
			self._homeLandData.wizzardRewards[k] = 0
		end
	end
end

-- 保存当前副本家园的信息（可能是自己的也可能是别人的家园）
function i3k_game_context:setHomelandMapData(homeland, roleId)
	self._homeLandMapData = homeland
	self._homeLandRoleId = roleId

	-- 如果是在自己家园的副本里面则更新玩家自己数据
	if self:isInMyHomeLand() then
		local oldData = self:GetHomeLandData()
		oldData.grounds = homeland.grounds
	end
end

function i3k_game_context:getHomeLandRoleId()
	return self._homeLandRoleId
end
function i3k_game_context:getHomelandMapData()
	if self:isInMyHomeLand() then
		-- 在自己家园里面就优先使用自己数据而暂时不维护家园地图数据
		return self._homeLandData
	else
		return self._homeLandMapData
	end
end

function i3k_game_context:getHomeLandPlantLvl()
	local homeland = self:GetHomeLandData()
	return (homeland and homeland.plantData) and homeland.plantData.plantLevel or 1
end

function i3k_game_context:checkHomeLandStealTimes()
	local homeland = self:GetHomeLandData()
	return (homeland and homeland.plantData) and homeland.plantData.dayStealTime < i3k_db_home_land_base.baseCfg.stealMaxTimes
end

function i3k_game_context:onHomelandSteal()
	local homeland = self:GetHomeLandData()
	homeland.plantData.dayStealTime = homeland.plantData.dayStealTime + 1
end

function i3k_game_context:getHomelandGroundLvlUpCondition(targetGroundLevel)
	for index, cfg in ipairs(i3k_db_home_land_lvl) do
		if targetGroundLevel >= cfg.landLvlLimit then
			local nextCfg = i3k_db_home_land_lvl[index + 1]
			if nextCfg and targetGroundLevel <= nextCfg.landLvlLimit then
				return index + 1
			end
		end
	end
	return nil
end

-- 判断现在是否在自己家园里面
function i3k_game_context:isInMyHomeLand()
	if self:GetIsInHomeLandZone() then
		return self:isRoleSelf(self._homeLandRoleId)
	end
end

-- 更新获取玩家自己家园数据的时候的操作
function i3k_game_context:updateMyHomeLandData(homeland)
	self:SetHomeLandData(homeland)

--[[	if self:isInMyHomeLand() then
		-- 如果在自己家园里面就更新地图
		self:updateHomelandMap(homeland, self:GetRoleId())
	end--]]
end

-- 更新获取家园地图数据的时候的操作
function i3k_game_context:updateHomelandMap(homeland, roleId)
	-- 保存家园地图信息
	self:setHomelandMapData(homeland, roleId)

	local groundInfo = self:setHomelandGroundInfoByNetwork(homeland.grounds, homeland.level)
	if groundInfo and self:GetIsInHomeLandZone() then
		local world = i3k_game_get_world()
		if world then
			world:UpdateItemCrops(groundInfo, homeland.level, roleId)
		end
	end
end

function i3k_game_context:setHomelandGroundInfoByNetwork(pGrounds, homelandLevel)
	local landPosCfg = i3k_db_home_land_lvl[homelandLevel].landPosIDs
	-- 读取本地家园地块的配置表，和后端数据比对补充转换前端所需要的数据
	local groundInfo = {}
	local pGround = nil
	local groundIndex = nil -- 同一个类型的索引
	local key = nil
	for typeId, groundIds in ipairs(landPosCfg) do
		groundIndex = 0
		for i, groundId in pairs(groundIds) do
			groundIndex = groundIndex + 1
			key = self:getGroundKey(typeId, groundIndex)
			pGround = pGrounds[key]
			if not pGround then  -- 后端没有这个地块的数据说明还没有解锁
				pGround = {level = 0}
			elseif pGround.curPlant then
				pGround._plantCfg = i3k_db_home_land_corp[pGround.curPlant.id] -- 把植物配置表的引用挂载到数据上方便后续查找（只读）
			end

			pGround.key = key
			pGround.groundType = typeId
			pGround.groundId = groundId
			pGround.groundIndex = groundIndex
			groundInfo[groundId] = pGround -- 保存处理过的引用到临时table里面
		end
	end
	return groundInfo
end

-- 获取已经浇水的次数
function i3k_game_context:getWaterTimes(plant, plantState)
	return plant.waterTimes[plantState] or 0
end

function i3k_game_context:addWaterTimes(plant, plantState)
	if not plant.waterTimes then
		plant.waterTimes = {}
	end

	if not plant.waterTimes[plantState] then
		plant.waterTimes[plantState] = 0
	end

	plant.waterTimes[plantState] = plant.waterTimes[plantState] + 1
end

-- 是否可以浇水
function i3k_game_context:homelandCheckCanWater(ground, state, needNotice)
	local str = ""
	if state ~= g_CROP_STATE_SEED and state ~= g_CROP_STATE_STRONG then
		str = i3k_get_string(5097)
	elseif not g_i3k_db.i3k_db_checkCanWaterCrop(ground) then -- 浇水冷却时间
		str = i3k_get_string(5098)
	elseif i3k_db.i3k_db_checkWaterCropTimesLimit(ground, state) then -- 浇水次数上限
		str = i3k_get_string(5099)
	else
		return true
	end

	if needNotice then
		g_i3k_ui_mgr:PopupTipMessage(str)
	end
	return false
end

-- 是否可以护理
function i3k_game_context:homelandCheckCanCare(ground, state, needNotice)
	local str = ""
	if state ~= g_CROP_STATE_STRONG  then
		str = i3k_get_string(5100)
	elseif not g_i3k_db.i3k_db_checkCanCareCrop(ground)  then -- 护理冷却时间
		str = i3k_get_string(5101)
	elseif g_i3k_db.i3k_db_checkCareFinished(ground) then
		str = i3k_get_string(5102)
	else
		return true
	end

	if needNotice then
		g_i3k_ui_mgr:PopupTipMessage(str)
	end
	return false
end

-- 种子是否解锁
function i3k_game_context:homelandCheckCropIsLock(groundLevel, cropCfg, needNotice)
	local flag, str = false
	if g_i3k_game_context:getHomeLandPlantLvl() < cropCfg.plantLvlLimit then
		str = i3k_get_string(5103, cropCfg.plantLvlLimit)
		flag = true
	elseif groundLevel and groundLevel < cropCfg.groundLvlLimit then
		str = i3k_get_string(5104, cropCfg.groundLvlLimit)
		flag = true
	end

	if needNotice and str then
		g_i3k_ui_mgr:PopupTipMessage(str)
	end
	return flag, str
end

-- 前端初始化新的植物数据
function i3k_game_context:initPlantData(ground, plantId, plantLevel)
	local plantCfg = i3k_db_home_land_corp[plantId]
	local curPlant = {}
	curPlant.id = plantId
	curPlant.plantTime = i3k_game_get_time()
	curPlant.lastWaterTime = 0
	curPlant.waterTimes = {}
	curPlant.lastStealTime = 0
	curPlant.lastNurseTime = 0
	curPlant.nurseTimes = 0
	curPlant.lastHarvestTime = 0
	curPlant.harvestTimes = 0
	-- local _, _, fishEquipCfg = self:GetHomeLandCurEquipCanPlant()
	curPlant.plantLevel = plantLevel -- ground.level + self:GetHomeLandPlantLevel() + fishEquipCfg.propTb[1].propValue
	ground._plantCfg = plantCfg
	ground.curPlant = curPlant
end

-- </家园系统> --------------------------------------------

--通知刷新扫荡界面
function i3k_game_context:refreshSweepCountFlag()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_sweepActivity,"refreshSweepCountFlag")
end

function i3k_game_context:refineIsGroupTypeActivity(mapID)
	local cfg = i3k_db_new_dungeon[mapID]

	if cfg then
		return cfg.difficulty == -1
	end

	return false
end

--心情日记人气值
function i3k_game_context:setPopularity(count)
	self._popularity = count
end

function i3k_game_context:getPopularity()
	return self._popularity
end

----------登陆节日活动同步--------------------
function i3k_game_context:TestRoleFestival()
	return g_i3k_db.i3k_db_get_is_activity_world_open(1), false
end
function i3k_game_context:setRoleFestivalInfo(gifts, belss)
	self._festivalGifts = gifts or {}
	self._festivalBelss = belss or {}
end

function i3k_game_context:getRoleFestivalGifts(id)
	return self._festivalGifts[id]
end
function i3k_game_context:setRoleFestivalGifts(id)
	if not self._festivalGifts[id] then
		self._festivalGifts[id] = {}
	end
	self._festivalGifts[id].isTake = 1 -- 1表示领过奖了
end
function i3k_game_context:getRoleFestivalBless(id)
	return self._festivalBelss[id]
end

function i3k_game_context:checkRoleFestivalGiftsCanGet(id)
	if self._festivalGifts[id] then
		return self._festivalGifts[id].isTake == 0
	else
		return true
	end
	return false
end

-- 红点
function i3k_game_context:checkRoleFestivalGIftsRedPoint()
	local gift = self:checkRoleFestivalGiftsCanGet(g_activity_show_perfect)
	local open = g_i3k_db.i3k_db_get_is_activity_perfect_open(g_activity_show_perfect)
	local checkDayTime = g_i3k_db.i3k_db_get_is_activity_perfect_can_get_reward(g_activity_show_perfect)
	local isMarried = self:getRecordSteps() ~= -1  -- -1为未婚
	return gift and open and checkDayTime and isMarried
end

function i3k_game_context:addRoleFestivalBless(id)
	if not self._festivalBelss[id] then
		self._festivalBelss[id] = {}
		self._festivalBelss[id].dayBlessTimes = 1
		return
	end
	self._festivalBelss[id].dayBlessTimes = self._festivalBelss[id].dayBlessTimes + 1
end

function i3k_game_context:clearRoleFestival()
	for k, v in pairs (self._festivalGifts) do
		v.isTake = 0
	end
	for k, v in pairs (self._festivalBelss) do
		v.dayBlessTimes = 0
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Marry_Marryed_Yinyuan, "checkGiftRedPoint")
end

--------------------------------------珍珑棋局

function i3k_game_context:setChessTask(task, state)
	self._chessTask = task
	self._chessTask.state = state
end

function i3k_game_context:getChessTask()
	return self._chessTask
end

function i3k_game_context:setChessTaskFinishTimes(time)
	self.chessTaskFinish = time or 0
end

function i3k_game_context:getChessTaskFinishTimes()
	return self.chessTaskFinish
end

function i3k_game_context:updateChessTaskFinishTimes(time)
	self.chessTaskFinish = self.chessTaskFinish + time
	self:ChangeScheduleActivity(g_SCHEDULE_TYPE_CHESS_TASK, 60053)
end

function i3k_game_context:updateChessTask(taskId, receiveTime, state)
	self._chessTask.curTaskID = taskId
	self._chessTask.curReceiveTime = receiveTime
	self._chessTask.state = state
	self._chessTask.curValue = 0
end

function i3k_game_context:deleteChessTask()
	self._chessTask.curTaskID = 0
	g_i3k_game_context:removeTaskData(TASK_CATEGORY_CHESS)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "stopChessTaskTimer")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateTaskInfo")
end

function i3k_game_context:setChessTaskValue(value)
	self._chessTask.curValue = value
end

function i3k_game_context:tellSeverChessTaskFinished(isExtra, task_type, target)
	i3k_sbean.chess_game_notice_task_finished(isExtra)
	self:updateChessTaskValue(task_type, target)
end

function i3k_game_context:updateChessTaskValue(task_type, target)
	local data = self:getChessTask()
	if not data or not data.curTaskID or data.state == 0 or data.curTaskID == 0 then
		return
	end
	local cfg = i3k_db_chess_task[data.curTaskID]
	if cfg.type ~= task_type then
		return
	end
	local is_true, is_finish, targetValue, shouldUpdateUI
		= self:updateCommonTaskValue(TASK_CATEGORY_CHESS, task_type, cfg.arg1, cfg.arg2, data.curValue, target)
	if targetValue > data.curValue then
		self:LogTaskValue(TASK_CATEGORY_CHESS, targetValue)
	end
	if shouldUpdateUI then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateChessTask", is_finish)
	end
	return is_true, is_finish
end

function i3k_game_context:updateChessTaskResponse()
	local task = self:getChessTask()
	local cfg = i3k_db_chess_task[task.curTaskID]
	local isFinished = self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, task.curValue)
	--[[g_TASK_KILL				= 1;--杀怪
	g_TASK_COLLECT 			= 2;--采集
	g_TASK_USE_ITEM 			= 7;--提交道具
	g_TASK_NEW_NPC_DIALOGUE	= 12;--新npc对话--]]
	if taskType == g_TASK_USE_ITEM_AT_POINT and not isFinished then
		if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip)
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip, cfg.arg1, TASK_CATEGORY_CHESS)
		end
	elseif cfg.type == g_TASK_COLLECT then
		self:TaskCollect(cfg.arg1)
	elseif cfg.type == g_TASK_USE_ITEM then
		self:taskSubItem(TASK_CATEGORY_CHESS, cfg.arg1, cfg.arg2)
	elseif cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		if isFinished then
			self:OpenFinishTaskDialogue(cfg, TASK_CATEGORY_CHESS)
		else
			self:OpenNewNpcDialogue(cfg, TASK_CATEGORY_CHESS, task.curTaskID)
		end
	--[[elseif cfg.type == g_TASK_FIND_DIFFERENCE then
		g_i3k_ui_mgr:OpenUI(eUIID_ChessTaskFindDiff)
		g_i3k_ui_mgr:RefreshUI(eUIID_ChessTaskFindDiff, cfg.arg1)
	elseif cfg.type == g_TASK_PUZZLE_PICTURE then
		g_i3k_ui_mgr:OpenUI(eUIID_ChessTaskPuzzle)
		g_i3k_ui_mgr:RefreshUI(eUIID_ChessTaskPuzzle, cfg.arg1)
	elseif cfg.type == g_TASK_SORT_VERSE then
		g_i3k_ui_mgr:OpenUI(eUIID_ChessTaskVerse)
		g_i3k_ui_mgr:RefreshUI(eUIID_ChessTaskVerse, cfg.arg1)
	elseif cfg.type == g_TASK_PLAY_SOCIALACT then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(17253, i3k_db_social[cfg.arg1].name))
	elseif cfg.type == g_TASK_LUCKYCHANCE then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(17254))--]]
	else
		if isFinished then
			g_i3k_game_context:OpenFinishTaskDialogue(cfg, TASK_CATEGORY_CHESS)
		end
	end
end

function i3k_game_context:finishChessTaskDialogue(cfg)
	local dialogueList = {}
	for i = 1, 4 do
		local tmp_desc = string.format("finishTaskDialogue%s", i)
		local finishTaskDialogue = cfg[tmp_desc]
		if finishTaskDialogue ~= 0 then
			table.insert(dialogueList, finishTaskDialogue)
		end
	end
	local fun
	if cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		fun = (function()
			local callBack = function()
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow") --检测有没有新加入背包的物品
			end
			local data = i3k_sbean.task_dialog_req.new()
			data.npcId = cfg.arg1
			data.dialogId = cfg.arg2
			data.taskCat = TASK_CATEGORY_CHESS
			data.__callback = callBack
			i3k_game_send_str_cmd(data, "task_dialog_res")
		end)
	end
	if #dialogueList ~= 0 then
		if (not g_i3k_logic:IsRootUIBattle()) then
			return
		end
		local motable = {}
		for i=1,#dialogueList do
			local keyName = "finishTaskDialogue" .. i .. "Icon"
			table.insert(motable,cfg[keyName])
		end
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,dialogueList,motable,fun,TASK_CATEGORY_CHESS)
	end
end



---------------------------------------- 势力声望
function i3k_game_context:syncPowerRep(fame, tasks, donate)
	self:cleanPowerRepAndRefresh()
	self._powerRep = {fame = fame, tasks = tasks, donate = donate}
	self:syncPowerRepTask()
	g_i3k_logic:SetPowerRepNpcTitleByInfo()
end

-- 第二天刷新的逻辑
function i3k_game_context:cleanPowerRepAndRefresh()
	if self._powerRep and self._powerRep.tasks then
		for k, v in pairs(self._powerRep.tasks) do
			v.state = g_POWER_REP_TASK_STATE_REWARDED -- 设置为完成
		end
	end
	if self._powerRepTasks then
		for k, v in pairs(self._powerRepTasks) do
			v.state = g_POWER_REP_TASK_STATE_REWARDED -- 设置为完成
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateTaskInfo")
end

function i3k_game_context:getPowerRep()
	return self._powerRep
end

-- 根据接取任务的状态，返回所有接取了任务的npc，就是需要隐藏的
function i3k_game_context:getPowerRepHideTitleNpcs()
	local npcs = {}
	if self._powerRep then
		for k, v in pairs(self._powerRep.tasks) do -- 接取1， 0未接取，2完成，3领过奖了
			local npcID, openLevel = g_i3k_db.i3k_db_power_rep_get_npcID_by_group(k)
			local checkLevel = openLevel <= self:GetLevel()
			if v.state == g_POWER_REP_TASK_STATE_ACCEPT or v.state == g_POWER_REP_TASK_STATE_FINISHED or v.state == g_POWER_REP_TASK_STATE_REWARDED then
				table.insert(npcs, {npcID = npcID, show = false and checkLevel })
			else
				table.insert(npcs, {npcID = npcID, show = true and checkLevel })
			end
		end
	end
	return npcs
end

-- 增加势力声望点
function i3k_game_context:addPowerRep(powerSide, value)
	if not self._powerRep.fame[powerSide] then
		self._powerRep.fame[powerSide] = 0
	end
	self._powerRep.fame[powerSide] = self._powerRep.fame[powerSide] + value
	local max = i3k_db_power_reputation_level[#i3k_db_power_reputation_level].max
	if self._powerRep.fame[powerSide] > max then
		self._powerRep.fame[powerSide] = max
	end

	local againstID = g_i3k_db.i3k_db_power_rep_get_against_powerSide(powerSide)
	if self._powerRep.fame[againstID] then
		self._powerRep.fame[againstID] = self._powerRep.fame[againstID] - value
		if self._powerRep.fame[againstID] < 0 then
			self._powerRep.fame[againstID] = i3k_db_power_reputation_level[1].min -- 最小不能为负值
		end
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "addPowerRepShow", value)
end

function i3k_game_context:getPowerRepAddRepRate(powerSide)
	local curValue = self._powerRep.fame[powerSide] or 0
	local curLevel = g_i3k_db.i3k_db_power_rep_get_level(curValue)
	local rate = i3k_db_power_reputation_level[curLevel].rate  -- 10000
	return rate
end


function i3k_game_context:syncPowerRepTask()
	local tasks = self._powerRep.tasks
	for k, v in ipairs(tasks) do
		if v.state == 1 or v.state == 2 then -- 接取1， 0未接取，2完成，3领过奖了
			local taskCfg = i3k_db_power_reputation_task[k][v.id]
			self:addPowerRepTask(k, v.id, v.receiveTime, v.value)
		end
	end
end

-- 手动接取时候需要添加进去
function i3k_game_context:receivePowerRepTask(groupID, id)
	local curTime = g_i3k_get_GMTtime(i3k_game_get_time())
	self:addPowerRepTask(groupID, id, curTime, 0)
	self._powerRep.tasks[groupID].state = g_POWER_REP_TASK_STATE_ACCEPT    -- 接取1， 0未接取，2完成，3领过奖了
end

-- 登陆同步和手动接取，都要调用这个接口添加进去
function i3k_game_context:addPowerRepTask(groupID, id, receiveTime, value) -- value可选
	if not self._powerRepTasks then
		self._powerRepTasks = {}
	end
	local hash = g_i3k_db.i3k_db_get_power_rep_task_hash_id(groupID, id)
	self._powerRepTasks[hash] = { receiveTime = receiveTime, value = value, state = g_POWER_REP_TASK_STATE_ACCEPT}

	self:AddTaskToDataList(hash, receiveTime)
end

function i3k_game_context:setPowerRepTask(hash, value)
	self._powerRepTasks[hash].value = value
end

function i3k_game_context:setPowerRepTaskState(hash, state)
	self._powerRepTasks[hash].state = state -- unknow
	local groupID, id = g_i3k_db.i3k_db_get_power_rep_task_real_id(hash)
	self._powerRep.tasks[groupID].state = state
end

-- function i3k_game_context:removePowerRepTask(hash)
-- 	self._powerRepTasks[hash] = nil
-- end

function i3k_game_context:getAllPowerRepTasks()
	return self._powerRepTasks or {}
end

function i3k_game_context:getPowerRepTask(hash)
	return self._powerRepTasks[hash]
end

function i3k_game_context:updatePowerRepTaskValue(type, id)
	local list = self:getAllPowerRepTasks()
	local finishedCfg = {}
	for k, v in pairs(list) do
		local taskCfg = g_i3k_db.i3k_db_power_rep_get_taskCfg_by_hash(k)
		if taskCfg.taskConditionType == type and taskCfg.args[1] == id then
			local value = v.value
			local isFinished = self:IsTaskFinished(type, taskCfg.args[1], taskCfg.args[2], value)
			if not isFinished then
				value = value + 1
				self:setPowerRepTask(k, value)
				isFinished = self:IsTaskFinished(type, taskCfg.args[1], taskCfg.args[2], value)
				if i3k_game_get_map_type() == g_FIELD then
					if isFinished then
						g_i3k_game_context:RefreshMissionEffect()
						self:SetAutoFight(false)
					end
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updatePowerRepTask", k, value, isFinished)
				end
				table.insert(finishedCfg, {isThis = taskCfg.args[1] == id, isFinished = isFinished})
			end
		end
	end
	return finishedCfg
end

function i3k_game_context:updatePowerRepTaskResponse(hash)
	local taskCfg = g_i3k_db.i3k_db_power_rep_get_taskCfg_by_hash(hash)
	local cfg = g_i3k_db.i3k_db_power_rep_convert_db(taskCfg)
	local curTask = self:getPowerRepTask(hash)
	local isFinished = self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, curTask.value)
	--[[g_TASK_KILL				= 1;--杀怪
	g_TASK_COLLECT 			= 2;--采集
	g_TASK_USE_ITEM 			= 7;--提交道具
	g_TASK_NEW_NPC_DIALOGUE	= 12;--新npc对话--]]
	if cfg.type == g_TASK_COLLECT then
		self:TaskCollect(cfg.arg1)
	elseif cfg.type == g_TASK_USE_ITEM then
		self:taskSubItem(TASK_CATEGORY_POWER_REP, cfg.arg1, cfg.arg2)
	elseif cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		self:finishPowerRepTaskDiaglogure(cfg)
	else
		if isFinished then
			--g_i3k_game_context:OpenFinishTaskDialogue(cfg, TASK_CATEGORY_POWER_REP)
			-- TODO
		end
	end
end



function i3k_game_context:finishPowerRepTaskDiaglogure(cfg)
	local dialogueList = g_i3k_db.i3k_db_get_faction_task_finish_desc(cfg)
	local fun
	if cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		fun = (function()
			local callBack = function()
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow") --检测有没有新加入背包的物品
			end
			local data = i3k_sbean.task_dialog_req.new()
			data.npcId = cfg.arg1
			data.dialogId = cfg.arg2
			data.taskCat = TASK_CATEGORY_POWER_REP
			data.__callback = callBack
			i3k_game_send_str_cmd(data, "task_dialog_res")
		end)
	end
	if #dialogueList ~= 0 then
		if (not g_i3k_logic:IsRootUIBattle()) then
			return
		end
		local motable = {}
		for i=1,#dialogueList do
			local keyName = "finishTaskDialogue" .. i .. "Icon"
			table.insert(motable,cfg[keyName])
		end
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,dialogueList,motable,fun,TASK_CATEGORY_POWER_REP)
	end
end

-- 势力声望捐赠
function i3k_game_context:getPowerRepCommit(powerSide)
	return self._powerRep.donate[powerSide].donateTimes -- 这里是个map
end
function i3k_game_context:addPowerRepCommit(powerSide, index, times)
	self._powerRep.donate[powerSide].donateTimes[index] = self._powerRep.donate[powerSide].donateTimes[index] + times
end

function i3k_game_context:getPowerRepMaxCommitPoints(powerSide)
	local value = 0
	for k, _ in pairs(self._powerRep.donate[powerSide].donateTimes) do
		local cfg = g_i3k_db.i3k_db_power_rep_get_commit_cfg(powerSide, k)
		value = value + cfg.maxCommitCount * cfg.reputation
	end
	return value
end

function i3k_game_context:getPowerRepCurrentCommitPoints(powerSide)
	local value = 0
	for k, v in pairs(self._powerRep.donate[powerSide].donateTimes) do
		local cfg = g_i3k_db.i3k_db_power_rep_get_commit_cfg(powerSide, k)
		value = value + v * cfg.reputation
	end
	return value
end

-- 保存些临时数据，不重要的临时数据
function i3k_game_context:setPowerRepUselessInfo(data)
	self._powerRep.uselessInfo = data
end
function i3k_game_context:getPowerRepUselessInfo()
	return self._powerRep.uselessInfo
end

-- 获取当前势力声望，对应的道具，还可以捐赠多少次
function i3k_game_context:getCurrentPowerRepCommitCount(powerSide, itemID)
	for k, v in pairs(self._powerRep.donate[powerSide].donateTimes) do
		local cfg = g_i3k_db.i3k_db_power_rep_get_commit_cfg(powerSide, k)
		if cfg.id == itemID then
			return v
		end
	end
	return 0
end

-- 根据势力，和道具，获取组里的id
function i3k_game_context:getCurrentPowerRepCommitKey(powerSide, itemID)
	for k, v in pairs(self._powerRep.donate[powerSide].donateTimes) do
		local cfg = g_i3k_db.i3k_db_power_rep_get_commit_cfg(powerSide, k)
		if cfg.id == itemID then
			return k
		end
	end
end

-- 根据itemID来查找对应的道具可以捐赠的最大数量
function i3k_game_context:getPowerRepMaxCommitCount(itemID)
	local tempInfo = self:getPowerRepUselessInfo()
	local max = self:getPowerRepMaxCommitPoints(tempInfo.powerSide)
	local cur = self:getPowerRepCurrentCommitPoints(tempInfo.powerSide)
	local cfg = tempInfo.items[itemID]
	local last = max - cur
	local cal =  math.floor(last / cfg.reputation)
	local curItemCount = self:getCurrentPowerRepCommitCount(tempInfo.powerSide, itemID)
	return math.min(cal,  cfg.maxCommitCount - curItemCount)
end

----------------------世界杯竞猜-------------------
--设置世界杯信息
function i3k_game_context:setWorldCup(table)
	if not table then return; end
	self._worldCup = {}
	for i = 1,#table.roleCountryInfo do
		local cid = table.roleCountryInfo[i].countryId
		self._worldCup[cid] = table.roleCountryInfo[i]
		self._worldCup[cid].guessInfo = g_i3k_db.i3k_db_get_state_of_country(cid, table.countryInfo)
	end
	self:setWorldCupPicture(table.gameCountryInfo)
end

--设置世界杯赛程图
function i3k_game_context:setWorldCupPicture(table)
	self._worldCupPicture = table
end

--获取一个国家世界杯信息
function i3k_game_context:getWorldCupCountry(countryId)
	return self._worldCup and self._worldCup[countryId]
end

--获取整个世界杯信息
function i3k_game_context:getWorldCup()
	return self._worldCup
end

--获取世界杯赛程信息
function i3k_game_context:getWorldCupPicture()
	return self._worldCupPicture
end

--获取已经押注的次数
function i3k_game_context:getWorldCupBetCount()
	local i = 0
	for k,v in pairs(self._worldCup) do
		i = i + 1
	end
	return i
end

--图钉--
--获取图钉可插入索引
function i3k_game_context:getThumbtackTaBleIndex(mapID)
	local info = self._thumbtack[mapID]
	if info == nil then return 1 end
	local num = #info

	for i = 1, num do
		if info[i] == 0 or info[i] == nil then
			return i
		end
	end

	return num + 1
end

--获取图钉需要VIP等级
function i3k_game_context:getThumbtackVipLevel(level)
	for i = level, #i3k_db_kungfu_vip do
		if i3k_db_kungfu_vip[i].useTuDingCount ~= 0 then
			return i
		end
	end

	return #i3k_db_kungfu_vip
end

--是否打开图钉传送界面
function i3k_game_context:setThumbtackVipFlag(value)
	self._thumbtackVip = value
end

function i3k_game_context:getThumbtackVipFlag()
	return self._thumbtackVip
end

function i3k_game_context:setThumbtackNomalFlag(value)
	self._thumbtackNomal = value
end

function i3k_game_context:getThumbtackNomalFlag()
	return self._thumbtackNomal
end

--图钉传送
function i3k_game_context:doThumbtackTransfer(index, mapID)
	local info = self._thumbtack[mapID][index]
	if info == nil then return end
	g_i3k_game_context:TransportCallBack(info.mapId, info.index, 33)
end

function i3k_game_context:setThumbtack(index, mapid, value)
	if self._thumbtack[mapid] == nil then
		self._thumbtack[mapid] = {}
	end

	self._thumbtack[mapid][index] = value
end

function i3k_game_context:getThumbtack()
	return self._thumbtack
end

function i3k_game_context:getThumbtackOrderTable()
	local allData = {}
	if self._thumbtack == nil then return allData end

	for k, v in pairs(self._thumbtack) do
		if v ~= nil then
			for _, n in pairs(v) do
				if n ~= nil then
					table.insert(allData, n)
				end
			end
		end
	end

	table.sort(allData, function(a, b) return a.thumbAddTime < b.thumbAddTime end)
	return allData
end

-----------------------------------------------------------------
--温泉周入场次数，只用于日程表显示
function i3k_game_context:setSpringWeeklyTimes(count)
	self._springWeeklyTimes = count
end

function i3k_game_context:getSpringWeeklyTimes()
	return self._springWeeklyTimes or 0
end

---------------------心决------------------------------------------
--设置心决
function i3k_game_context:setRoleXinjueInfo(info)
	self._xinjue = {
		grade = info.grade,
		breakTimes= info.breakTimes,
		props = info.props,
		levelMapping = g_i3k_db.i3k_db_get_xinjue_monster_level_map(),
	}
end

--获取心决阶数
function i3k_game_context:getXinjueGrade()
	return self._xinjue.grade
end
--获取心决突破次数
function i3k_game_context:getXinjueBreakTimes()
	return self._xinjue.breakTimes
end

--设置心决突破次数
function i3k_game_context:setXinjueBreakTimes(times)
	self._xinjue.breakTimes = times
end
--增加突破的次数
function i3k_game_context:addXinjueBreakTimes()
	self._xinjue.breakTimes = self._xinjue.breakTimes + 1
end
--清空突破的次数
function i3k_game_context:clearXinjueBreakTimes()
	self._xinjue.breakTimes = 0
end
--获取心决属性
function i3k_game_context:getXinjueProps()
	return self._xinjue.props
end
--设置心决属性
function  i3k_game_context:setXinjueProps(props)
	self._xinjue.props = props
end
--增加心决等级
function i3k_game_context:addXinjueGrade()
	if self._xinjue.grade < #i3k_db_xinjue_level then
		self._xinjue.grade = self._xinjue.grade + 1
	end
end

function i3k_game_context:getXinjueLevelMapping()
	return self._xinjue.levelMapping
end

--扣除突破所用材料
function i3k_game_context:consumeXinjueBreak()
	local grade = g_i3k_game_context:getXinjueGrade() + 1
	local consume = i3k_db_xinjue_level[grade].breakConsume
	for k, v in ipairs(consume) do
		g_i3k_game_context:UseCommonItem(v.id, v.count, AT_SOULSPELL_BREAK)
	end
end
--扣除修心所用材料
function i3k_game_context:consumeXinjueFix()
	local grade = g_i3k_game_context:getXinjueGrade()
	local consume = i3k_db_xinjue_level[grade].fixConsume
	for k, v in ipairs(consume) do
		g_i3k_game_context:UseCommonItem(v.id, v.count, AT_SOULSPELL_PROPS)
	end
end

--刷新战力
function i3k_game_context:RefreshXiuxinProps()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateXiuXinProp()
	end
end
--心决红点
function i3k_game_context:checkXinjueRedpoint()
	local xinjueGrade = self:getXinjueGrade()
	if xinjueGrade == 0 then return false end
	local isAllPropMax = true
	local props = g_i3k_game_context:getXinjueProps()
	for i, v in ipairs(i3k_db_xinjue_level[xinjueGrade].props) do
		if not(props[v.id] and props[v.id] == v.max) then
			isAllPropMax = false
			break
		end
	end
	if not isAllPropMax then
		return g_i3k_db.i3k_db_check_xinjue_consume_fix()
	elseif xinjueGrade == #i3k_db_xinjue_level then
		return false
	else
		if i3k_db_xinjue_level[xinjueGrade + 1] then
			local needLv = i3k_db_xinjue_level[xinjueGrade + 1].needLevel
			local roleLv = self:GetLevel()
			return g_i3k_db.i3k_db_check_xinjue_consume_break() and roleLv >= needLv
		end
	end
end
-------------------------------------------------------

function i3k_game_context:setBackRoleDoubleDropFlag(value)
	self._BackRoleDoubleDrop = value
end
function i3k_game_context:getBackRoleDoubleDropFlag()
	return self._BackRoleDoubleDrop
end

--传世大酬宾
function i3k_game_context:setLegendmakeFlag(value)
	self._legendmakeFlag = value
end

function i3k_game_context:getLegendmakeFlag()
	return self._legendmakeFlag
end

--判断是否打开了新手登陆界面
function i3k_game_context:getIsShowFirstLoginUI()
	return false
--[[
	local roleLvl = self:GetLevel()
	local isFirstLogin = self:getDayFirstLogin()

	local cond1 = g_i3k_ui_mgr:GetUI(eUIID_FirstLoginShow)  --新手拍脸界面是否打开
	local cond2 = roleLvl == 1 and isFirstLogin  --是否首次登陆

	return cond1 or cond2
	]]
end

--------------------------------------------------------
-- 暗器 begin
function i3k_game_context:syncHideWeaponInfo(info)
	self._hideWeapon = info
end

function i3k_game_context:getHideWeaponInfo()
	return self._hideWeapon
end

function i3k_game_context:getHideWeaponByID(id)
	return self._hideWeapon and self._hideWeapon.weapons[id]
end

function i3k_game_context:setHideWeapon(id, info)
	self._hideWeapon.weapons[id] = info
end

function i3k_game_context:getHideWeaponIsEquiped(id)
	return self._hideWeapon.curWeapon == id
end

function i3k_game_context:addHideWeaponRankValue(id)
	self._hideWeapon.weapons[id].rankValue = self._hideWeapon.weapons[id].rankValue + 1
end

function i3k_game_context:getHideWeaponExp(id)
	return self._hideWeapon.weapons[id].exp
end

function i3k_game_context:getHideWeaponLevel(id)
	return self._hideWeapon.weapons[id].level
end

-- TODO 这里改一下，经验和等级都要重新算一个，保持外面的接口不变
function i3k_game_context:addHideWeaponExp(id, addExp)
	local exp, level = g_i3k_db.i3k_db_get_anqi_level_by_exp(id, addExp)
	self._hideWeapon.weapons[id].exp = exp
	self._hideWeapon.weapons[id].level = level
end

function i3k_game_context:equipHideWeapon(id)
	self._hideWeapon.curWeapon = id
end

function i3k_game_context:updateHideweaponLianxie(id)
	local dwID =  self._hideWeapon.deputyWeapon
	if dwID > 0 and dwID == id and self._hideWeapon.curWeapon ~= id then
		self._hideWeapon.deputyWeapon = self._hideWeapon.curWeapon
	end
end
-- 获取当前暗器装备的装备技能等级和
function i3k_game_context:getCurWeaponFourSkillLvl()
	if self._hideWeapon == nil or self._hideWeapon.curWeapon == 0 then
		return 0
	end
	local lvlSum = 0
	local curWeapon = self._hideWeapon.curWeapon
	local skillSlot = self:GetSkillSlot(curWeapon)
	--主动技能等级
	lvlSum = lvlSum + g_i3k_game_context:GetHideWeaponFinalActiveSkillLvl(curWeapon)
	--被动技能等级
	for _, skillID in ipairs(skillSlot) do
		if skillID ~= 0 then
			local skillLvl = self:GetSkillLib(curWeapon)[skillID]
			lvlSum = lvlSum + skillLvl
		end
	end
	return lvlSum
end
-- 获取暗器装备的主动技能
function i3k_game_context:getEquipedHideWeaponSkill()
	if self._hideWeapon == nil or self._hideWeapon.curWeapon == 0 then
		return nil
	end
	local curWeapon = self._hideWeapon.curWeapon
	local skillID = i3k_db_anqi_base[curWeapon].skillID
	local res =
	{
		skillID = skillID,
		level = self._hideWeapon.weapons[curWeapon].aSkillLevel
	}

	return res
end

-- 获取当前所有暗器的主动技能列表，如果没有返回一个空table
function i3k_game_context:getHideWeaponSkills()
	local res = {}

	if self._hideWeapon == nil then
		return res
	end

	for k, v in pairs(self._hideWeapon.weapons) do
		local skillID = i3k_db_anqi_base[k].skillID
		table.insert(res, {skillID = skillID, level = v.aSkillLevel})
	end

	return res
end


--获取被动技能库
function i3k_game_context:GetSkillLib(wid)
	local cfg = self:getHideWeaponByID(wid)
	if cfg then
		local skillLib = cfg.skillLib
		return g_i3k_db.i3k_db_get_one_anqi_all_skill_by_skillLib(wid, skillLib)
	end
	return {}
end

-- 获取被动技能的等级
function i3k_game_context:getHideWeaponSkillLevel(wid, skillID)
	local cfg = self:getHideWeaponByID(wid)
	if not cfg then
		return 1 -- 返回一个任意值，反正会隐藏的
	end
	local weapons = cfg.skillLib
	return weapons[skillID] or 1
end

--更新被动技能库
function i3k_game_context:UpdatetSkillLib(wid, skillID)
	local cfg = self:getHideWeaponByID(wid)
	if cfg then
		local skillLib = cfg.skillLib
		if skillLib[skillID] then
			skillLib[skillID] = skillLib[skillID] + 1
		else
			skillLib[skillID] = 1
		end
	end
end

--获取装备的被动技能槽
function i3k_game_context:GetSkillSlot(wid)
	local cfg = self:getHideWeaponByID(wid)
	if cfg then
		return cfg.slots
	end
	return {0, 0, 0}
end

--获取暗器的加值
function i3k_game_context:GetHideWeaponRankValue(wid)
	local cfg = self:getHideWeaponByID(wid)
	if cfg then
		return cfg.rankValue
	end
	return 0
end

--更新暗器的主动技能等级
function i3k_game_context:SetHideWeaponActiveSkillLvl(wid)
	local cfg = self:getHideWeaponByID(wid)
	if cfg then
		cfg.aSkillLevel = cfg.aSkillLevel + 1
	end
end

--获取暗器的主动技能等级
function i3k_game_context:GetHideWeaponActiveSkillLvl(wid)
	local cfg = self:getHideWeaponByID(wid)
	if cfg then
		return cfg.aSkillLevel
	end
	return 1
end

--获取加成后的暗器主动技能等级
function i3k_game_context:GetHideWeaponFinalActiveSkillLvl(wid)
	local cfg = self:getHideWeaponByID(wid)
	if cfg then
		local gradeCfg = g_i3k_db.i3k_db_get_one_anqi_skill_up_grade_cfg(wid)
		local skillAddLevel = 0
		if gradeCfg then
			skillAddLevel = gradeCfg.skillAddLevel
		end
		return cfg.aSkillLevel + skillAddLevel
	end
	return 1
end

--获取暗器的等级
function i3k_game_context:GetHideWeaponLvl(wid)
	local cfg = self:getHideWeaponByID(wid)
	if cfg then
		return cfg.level
	end
	return 1
end

--刷新暗器属性
function i3k_game_context:refreshHideWeaponProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateTalentEffector()
		hero:UpdateHideWeaponProp()
	end
end

--所有暗器附加属性
function i3k_game_context:getHideWeaponProps()
	local prop = {}
	if self._hideWeapon then
		local weapons = self._hideWeapon.weapons
		if weapons then
	for wid, _ in pairs(weapons) do
		self:getOneHideWeaponProp(wid, prop)
			end
		end
	end
	return prop
end

--所有暗器附加战力
function i3k_game_context:getHideWeaponAddFightPower()
	local power = 0
	if not self._hideWeapon then
		return power
	end

	local weapons = self._hideWeapon.weapons
	for wid, _ in pairs(weapons) do
		local addPower = self:getOneHideWeaponAddFightPower(wid)
		power = power + addPower
	end
	return power
end

--单个暗器属性
function i3k_game_context:getOneHideWeaponProp(wid, prop)
	--升品附加属性
	local upGradeCfg = g_i3k_db.i3k_db_get_one_anqi_skill_up_grade_cfg(wid)
	for _, v in ipairs(upGradeCfg.props) do
		initZeroTable(prop, v.id)
		prop[v.id] = prop[v.id] + v.count
	end

	--升级附加属性
	local level = self:GetHideWeaponLvl(wid)
	local levelCfg = i3k_db_anqi_level[wid][level]
	if levelCfg then
	for _, v in ipairs(levelCfg.props) do
		initZeroTable(prop, v.id)
		prop[v.id] = prop[v.id] + v.count
		end
	end
end

--单个暗器附加战力
function i3k_game_context:getOneHideWeaponAddFightPower(wid)
	local power = 0

	--升品附加战力
	local upGradeCfg = g_i3k_db.i3k_db_get_one_anqi_skill_up_grade_cfg(wid)
	if upGradeCfg then
		power = power + upGradeCfg.power
	end

	--主动技能加的战力
	local skillID = i3k_db_anqi_base[wid].skillID

	local finalSkillLvl = self:GetHideWeaponFinalActiveSkillLvl(wid)
	local cfg = i3k_db_skill_datas[skillID][finalSkillLvl]
	if cfg then
		power = power + cfg.skillpower
	end

	--装备的被动技能附加战力
	local skillSlot = self:GetSkillSlot(wid)
	for _, skillID in ipairs(skillSlot) do
		if skillID ~= 0 then
			local skillLvl = self:GetSkillLib(wid)[skillID]
			local skillCfg = g_i3k_db.i3k_db_get_one_anqi_skill(wid, skillID, skillLvl)
			power = power + skillCfg.power
		end
	end

	--暗器幻化的战力
	local skinLib = self:GetAnqiSkinLib(wid)
	for skinID, v in pairs(skinLib) do
		if v then
			local skinCfg = g_i3k_db.i3k_db_get_anqi_skin_by_skinID(skinID)
			power = power + skinCfg.fightPower
		end
	end
	return power
end

--单个暗器总战力
function i3k_game_context:getOneHideWeaponFightPower(wid)
	--属性战力
	local prop = {}
	self:getOneHideWeaponProp(wid, prop)
	local propPower = g_i3k_db.i3k_db_get_battle_power(prop, true)

	--附加战力
	local addPower = self:getOneHideWeaponAddFightPower(wid)

	return propPower + addPower
end

-- 获取暗器的所有暗器的战力（属性+其它部分战力）
function i3k_game_context:getAllHideWeaponFightPower()
	local power = 0
	if not self._hideWeapon then
		return power
	end
	local weapons = self._hideWeapon.weapons
	for wid, _ in pairs(weapons) do
		local single = self:getOneHideWeaponFightPower(wid)
		power = power + single
	end
	return power
end
--获得暗器的心法效果
function i3k_game_context:getHideWeaponXinfa()
	local xinfa = {}
	if self._hideWeapon then
		local wid = self._hideWeapon.curWeapon
		if wid ~= 0 then
			local slot = self:GetSkillSlot(wid)
			for _, skillID in ipairs(slot) do
				if skillID ~= 0 then
					local skillLvl = self:GetSkillLib(wid)[skillID]
					local skillData = g_i3k_db.i3k_db_get_one_anqi_skill(wid, skillID, skillLvl)
					for _, xinfaID in ipairs(skillData.xinfa) do
						table.insert(xinfa, xinfaID)
					end
				end
			end
			local skinLib = self:GetAnqiSkinLib(wid)
			for skinID, v in pairs(skinLib) do
				if v then
					local skinCfg = g_i3k_db.i3k_db_get_anqi_skin_by_skinID(skinID)
					if skinCfg.xinfaType == g_HIDE_WEAPON_SKIN_XINFA_EQUIPMENT then
						for _, xinfaID in ipairs(skinCfg.skinXinfa) do
							table.insert(xinfa, xinfaID)
						end
					end
				end
			end
		end
	end
	return xinfa
end
--获得暗器皮肤心法id
function i3k_game_context:getHideWeaponSkinXinfaPermanent()
	local xinfa = {}
	local info = g_i3k_game_context:getHideWeaponInfo()
	if not info or not  info.weapons then return xinfa end
	for id, _ in pairs(info.weapons) do
		local skinLib = self:GetAnqiSkinLib(id)
		for skinID, v in pairs(skinLib) do
			if v then
				local skinCfg = g_i3k_db.i3k_db_get_anqi_skin_by_skinID(skinID)
				if skinCfg.xinfaType == g_HIDE_WEAPON_SKIN_XINFA_PERMANENT then
					for _, xinfaID in ipairs(skinCfg.skinXinfa) do
						table.insert(xinfa, xinfaID)
					end
				end
			end
		end
	end
	return xinfa
end

--能否合成
function i3k_game_context:CanMakeHideWeapon(wid)
	local lvl = self:GetLevel()
	local needLvl = i3k_db_anqi_common.openLevel
	if lvl < needLvl then
		return false
	end
	local cfg = self:getHideWeaponByID(wid)
	if cfg then
		return false
	end
	local itemID = i3k_db_anqi_base[wid].itemID
	local itemCount = i3k_db_anqi_base[wid].itemCount
	local haveCount = self:GetCommonItemCanUseCount(itemID)
	if haveCount >= itemCount then
		return true
	end
	return false
end

--能否升品(不计算可代替物品)
function i3k_game_context:CanHideWeaponUpRank(wid)
	local cfg = self:getHideWeaponByID(wid)
	if not cfg then
		return false
	end
	local nextLvlCfg = i3k_db_anqi_grade[wid][cfg.rankValue + 1]
	if not nextLvlCfg then
		return false
	end
	local haveCount = self:GetCommonItemCanUseCount(nextLvlCfg.itemID)
	if haveCount >= nextLvlCfg.itemCount then
		return true
	end
	return false
end

--能否升级
function i3k_game_context:CanHideweaponUpLevel(wid)
	local haveItem = false
	local levelEnough = false
	local cfg = self:getHideWeaponByID(wid)
	if not cfg then
		return false
	end

	local level = cfg.level
	if not i3k_db_anqi_level[wid][level + 1] then
		return false
	end

	local roleNeedLevel = i3k_db_anqi_level[wid][level + 1].roleLevel
	if roleNeedLevel <= self:GetLevel() then
		levelEnough = true
	end

	local items = i3k_db_anqi_common.items
	for i,v in ipairs(items) do
		if g_i3k_game_context:GetCommonItemCanUseCount(v) > 0 then
			haveItem = true
	  end
	end

	return levelEnough and haveItem
end

--主动技能能否升级
function i3k_game_context:CanHideWeaponUpASkill(wid)
	local cfg = self:getHideWeaponByID(wid)
	if not cfg then
		return false
	end
	local skillID = i3k_db_anqi_base[wid].skillID
	local skillInfo = i3k_db_skill_datas[skillID]
	local skillLvl = cfg.aSkillLevel
	if not skillInfo[skillLvl + 1] then
		return false
	end
	if not i3k_db_anqi_common.levelLimit[skillLvl + 1] or i3k_db_anqi_common.levelLimit[skillLvl + 1].value > cfg.level then
		return false
	end
	local needCoin = skillInfo[skillLvl + 1].needCoin
	local needItemID = skillInfo[skillLvl + 1].needItemID
	local needItemCount = skillInfo[skillLvl + 1].needItemNum
	local canUseCoin = self:GetMoneyCanUse(false)
	local haveItemCount = self:GetCommonItemCanUseCount(needItemID)
	if canUseCoin >= needCoin and haveItemCount >= needItemCount then
		return true
	end
	return false
end

--已装备被动技能能否升级
function i3k_game_context:CanHideWeaponUpPSkill(wid, index)
	local cfg = self:getHideWeaponByID(wid)
	if not cfg then
		return false
	end
	local skillID = cfg.slots[index]
	local level = cfg.skillLib[skillID]
	if not level then
		return false
	end
	local skillCfg = i3k_db_anqi_skill[wid][skillID]
	if not skillCfg[level + 1] then
		return false
	end
	for i,v in pairs(skillCfg[level + 1].props) do
		local haveCount = self:GetCommonItemCanUseCount(v.id)
		if haveCount < v.count then
			return false
		end
	end
	return true
end

function i3k_game_context:CanHideWeaponBetter(wid)
	return self:CanMakeHideWeapon(wid) or self:CanHideWeaponUpRank(wid) or self:CanHideweaponUpLevel(wid)
end

function i3k_game_context:CanHaveHideWeaponBetter()
	for i, v in pairs(i3k_db_anqi_base) do
		if self:CanHideWeaponBetter(i) then
			return true
		end
	end
	return false
end

function i3k_game_context:getRoleAnqiSkillCoolLeftTime()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetAnqiSkillCoolLeftTime()
	end
end

function i3k_game_context:getAnqiSkillIsCanUse()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:GetAnqiSkillIsCanUse()
	end
end

--刷新装备的暗器技能（战斗界面）
function i3k_game_context:refreshAnqiSkillInBattle()
	local currentID = g_i3k_game_context:getEquipedHideWeaponSkill()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:InitSkills()
		if hero._AutoFight then
			hero:InitPlayerAttackList()
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updataRoleAnqiSkill", self:getEquipedHideWeaponSkill())
	end
end

--获取暗器当前皮肤
function i3k_game_context:GetAnqiCurSkin(wid)
	local weapons = self._hideWeapon.weapons
	if weapons[wid] then
		return weapons[wid].skin.curSkin
	end
	return 0
end

--获取暗器已解锁的皮肤
function i3k_game_context:GetAnqiSkinLib(wid)
	local weapons = self._hideWeapon.weapons
	if weapons[wid] then
		return weapons[wid].skin.skinLib
	end
	return {}
end

--获取暗器皮肤是否已解锁
function i3k_game_context:GetAnqiSkinIsActivate(wid)
	local skinLib = self:GetAnqiSkinLib(wid)
	local count = 0
	for _, v in pairs(skinLib) do
		if v then
			count = count + 1
		end
	end
	return count > 0
end

--设置当前暗器皮肤
function i3k_game_context:SetAnqiCurSkin(wid, curSkin)
	local weapons = self._hideWeapon.weapons
	if weapons[wid] then
		weapons[wid].skin.curSkin = curSkin
	end
end

--更新已解锁的暗器皮肤
function i3k_game_context:UpdateAnqiSkinLib(wid, skinID)
	local weapons = self._hideWeapon.weapons
	if weapons[wid] then
		weapons[wid].skin.skinLib[skinID] = true
	end
end

-- 暗器 end
--------------------------------------------------------
--帮派互助
function i3k_game_context:setFactionData(value)
	self._factionDonate = value
end

function i3k_game_context:getFactionData()
	return self._factionDonate
end

function i3k_game_context:getFactionDonate()
	return self._roleData.curChar._sectDonationHonor
end
--帮派互助end

--巨灵攻城

-----------------------开始巨灵攻城时的倒计时-------------------------
function i3k_game_context:StartSpiritCoolTime()
	g_i3k_ui_mgr:OpenUI(eUIID_BattleFight)
	g_i3k_ui_mgr:RefreshUI(eUIID_BattleFight)
end

function i3k_game_context:setSpiritBossBuffTime(nextBuffTime)
	self._spiritBoss.nextBuffTime = nextBuffTime
end

function i3k_game_context:setSpiritBossData(rewards, nextBuffTime, bossId, bossBlood, curBossIndex)
	self._spiritBoss = {bossId = bossId, rewards = rewards, nextBuffTime = nextBuffTime, bossBlood = bossBlood, curBossIndex = curBossIndex}
end

function i3k_game_context:getSpiritBossData()
	return self._spiritBoss
end

function i3k_game_context:GetBossBloodNeedUpdate()
	local mapId = g_i3k_game_context:GetWorldMapID()
	local mapType = g_i3k_game_context:GetWorldMapType()
	local notUpdateMapId = {[i3k_db_crossRealmPVE_cfg.battleMapID] = true}
	local notUpdateMapType = {[g_SPIRIT_BOSS] = true}
	return notUpdateMapId[mapId] or notUpdateMapType[mapType]
end

--巨灵攻城货币
function i3k_game_context:setSpiritBossCurrency(count)
	self._spiritBossCurrency = count
end

function i3k_game_context:getSpiritBossCurrency()
	return self._spiritBossCurrency
end

function i3k_game_context:addSpiritBossCurrency(count)
	self._spiritBossCurrency = self._spiritBossCurrency + count
end

function i3k_game_context:useSpiritBossCurrency(count)
	self._spiritBossCurrency = self._spiritBossCurrency - count
end


------------------------城战 begin----------------------------
-- 城战权限检查
function i3k_game_context:getDefenceWarPermission()
	if g_i3k_game_context:IsInRoom() or g_i3k_game_context:getMatchState() ~= 0 then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5322))-- "您正在报名其他活动，不能参与此活动")
		return false
	end

	local factionID = g_i3k_game_context:GetFactionSectId()
	if factionID == 0 then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5323))
		return false
	end

	local permission = g_i3k_game_context:getDefenceWarSectPermission(g_DEFENCE_WAR_PERMISSION_SIGN)
	if not permission then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5165))
		return false
	end

	local sectLevel = g_i3k_game_context:GetFactionLevel()
	local config = i3k_db_defenceWar_cfg
	if sectLevel < config.factionLvl then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5324, config.factionLvl))
		return false
	end

	local roleLevel = g_i3k_game_context:GetLevel()
	if roleLevel < config.playerLvl then
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(5325, config.playerLvl))
		return false
	end

	return true
end


--是否处于城战变身状态
function i3k_game_context:defenceWarTransformState()
	local hero = i3k_game_get_player_hero()

	if hero and hero._missionMode.valid then
		return hero._missionMode.type == g_TASK_TRANSFORM_STATE_CAR
	end

	return false
end

--获取城战工程车最大血量
function i3k_game_context:getDefenceWarCarMaxHP()
	local factionSkillData = g_i3k_game_context:GetFactionSkillData()
	local carID = i3k_db_defenceWar_cfg.carFactionSkillID
	local towerID = i3k_db_defenceWar_cfg.towerFactionSkillID
	local car_data = factionSkillData[carID]
	local tower_data = factionSkillData[towerID]
	local carSkillData
	local towerSkillData
	local maxhp = 0

	if car_data and car_data.level then
		carSkillData = g_i3k_db.i3k_db_get_defence_war_ShowID(carID, car_data.level)
	end

	if tower_data and tower_data.level then
		towerSkillData = g_i3k_db.i3k_db_get_defence_war_ShowID(towerID, tower_data.level)
	end


	if carSkillData then
		maxhp = carSkillData.baseBlood
	end

	if towerSkillData then
		local hp = towerSkillData.baseBlood
		maxhp = maxhp > hp and maxhp or hp
	end

	if maxhp ~= 0 then
		return maxhp
	end

	return i3k_db_defenceWar_cfg.transformBaseHp
end

function i3k_game_context:getDefenceWarPlayerForceType()
	local hero = i3k_game_get_player_hero()

	return hero:GetForceType()
end


-- 城战 帮派权限
function i3k_game_context:getDefenceWarSectPermission(powerType)
	-- g_DEFENCE_WAR_PERMISSION_SIGN 		= "defenceWarSign"      -- 城战报名
	-- g_DEFENCE_WAR_PERMISSION_SIGN_CITY  = "defenceWarSignCity"  -- 城战 夺城报名
	-- g_DEFENCE_WAR_PERMISSION_TRANS 		= "defenceWarTrans"		-- 城战 兵工厂变身
	-- g_DEFENCE_WAR_PERMISSION_REPAIR		= "defenceWarRepair"	-- 城战修复箭塔
	-- g_DEFENCE_WAR_PERMISSION_CITY_LIGHT	= "defenceWarCityLight"	-- 城主之光
	return self:ishaveFactionFightGroupPower(powerType)
end

-- 城战战斗数据
function i3k_game_context:setDefenceWarInfo(score, killMonsters, totalMonsters, reviveTime)
	self._defenceWar.score = score
	self._defenceWar.killMonsters = killMonsters
	self._defenceWar.totalMonsters = totalMonsters
	self._defenceWar.reviveTime = reviveTime
end

-- 更新城战积分
function i3k_game_context:setDefenceWarScore(score)
	self._defenceWar.score = score
end

function i3k_game_context:getDefenceWarScore()
	return self._defenceWar.score
end

-- 更新城战目标计数
function i3k_game_context:setDefenceWarMonsterCount(monsterType, killCount)
	self._defenceWar.killMonsters[monsterType] = killCount
end

function i3k_game_context:getDefenceWarKillInfo()
	return self._defenceWar.killMonsters, self._defenceWar.totalMonsters
end

-- 城战复活的时间戳（毫秒）
function i3k_game_context:getDefenceWarReviveTime()
	return self._defenceWar.reviveTime
end

-- 同步城主之光
function i3k_game_context:setDefenceWarCityLight(endTime, lastCity, addRate, dayCityLight)
	self._defenceWar.lastCityLightTime = endTime
	self._defenceWar.lastCityCity = lastCity
	self._defenceWar.addRate = addRate
	self._defenceWar.dayCityLight = dayCityLight --set[int32]
end

function i3k_game_context:getDefenceWarCityLightTime()
	return self._defenceWar.lastCityLightTime or 0
end

function i3k_game_context:getDefenceWarCityCity()
	return self._defenceWar.lastCityCity or 0
end

function i3k_game_context:getDefenceWarDayCityLight()
	return self._defenceWar.dayCityLight or {}
end
function i3k_game_context:getDefenceWarExpAddRate()
	return self._defenceWar.addRate or 0
end

function i3k_game_context:isOpenCityLight()
	local lightTime = self:getDefenceWarCityLightTime()
	local isOpen = i3k_game_get_time() < lightTime
	return isOpen
end

-- 城战入口
function i3k_game_context:TestDefenceWarShowState()
	local warState = g_i3k_db.i3k_db_get_defence_war_state()
	if warState == g_DEFENCE_WAR_STATE_PVE or warState == g_DEFENCE_WAR_STATE_PVP then
		return true, false
	end
	return false, false
end



-- 龙晶接口
function i3k_game_context:setDragonCrystal(dragonCrystal)
	if dragonCrystal < 0 then
		dragonCrystal = 0 -- 初始时为-1
	end
	self._dragonCrystal = dragonCrystal
end

function i3k_game_context:useDragonCrystal(count)
	self._dragonCrystal = self._dragonCrystal - count
end

function i3k_game_context:getDragonCrystal()
	return self._dragonCrystal or 0
end

--城池延迟信息
function i3k_game_context:setDelayInfo(delayInfo)
	self._delayInfo = delayInfo
end

function i3k_game_context:getDelayInfo()
	return self._delayInfo
end

--城池签到信息
function i3k_game_context:setCitySign(citySign)
	self._citySign = citySign
end

function i3k_game_context:getCitySign()
	return self._citySign
end

--城池竞标信息
function i3k_game_context:setCityBid(cityBid)
	self._cityBid = cityBid
end

function i3k_game_context:getCityBid()
	return self._cityBid
end

--获取本帮派占据的城池ID
function i3k_game_context:getDefenceWarOnwerCityID(kings)
	local factionID = self:GetFactionSectId()
	for k, v in pairs(kings) do
		if v.sectId == factionID then
			return k
		end
	end
	return nil
end

-- 设置pve帮派占城ID
function i3k_game_context:setDefenceWarPveCity(cityID)
	self._defenceWarPveCity = cityID
end

function i3k_game_context:getDefenceWarPveCity()
	return self._defenceWarPveCity
end

-- 设置帮派占城ID
function i3k_game_context:setDefenceWarCurrentCityState(cityID)
	self._curDefenceWarCity = cityID
end

function i3k_game_context:getDefenceWarCurrentCityState()
	return self._curDefenceWarCity
end
function i3k_game_context:setDefenceWarKings(kings)
	self._defenceWarKings = kings
end
function i3k_game_context:getDefenceWarKings()
	return self._defenceWarKings
end
--通知开启城战之光界面刷新
function i3k_game_context:refreshDefenceWarExpFlag()
	self._defenceWar.dayCityLight = {}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_CityWarExp, "havaRefresh")
end

-------------------------城战 end--------------------------------

------------------------- <外传副本> ------------------------------
function i3k_game_context:getOutCastItemsInfo()
	local groundItemInfo = {}
	for index, cfg in ipairs(i3k_db_out_cast) do
		if not groundItemInfo[cfg.groupID1] then
			groundItemInfo[cfg.groupID1] = {}
		end
		local groupInfo = {cfg = cfg, info = {state = 1}}
		local info = {_title_name = cfg.name, _data = groupInfo, _children = nil, _groupID = cfg.id}
		table.insert(groundItemInfo[cfg.groupID1], info)
	end
	local infos = {}
	for index, itemInfos in ipairs(groundItemInfo) do
		table.insert(infos, {_title_name = string.format("副本%s", index), _data = nil, _children = itemInfos, _groupID = 0})
	end
	return infos
end

function i3k_game_context:getOutCastCondition(unlockType, unlockNum, con)
	local isOk = true
	local curNum = con[unlockType]
	local cfg = i3k_db_out_cast_base.outCastType[unlockType]
	if curNum then
		isOk = curNum >= unlockNum
	end
	return isOk, cfg and cfg.str or "无条件限制"
end

function i3k_game_context:setOutCastInfo(biography)
	self._biography = biography
end

function i3k_game_context:getOutCastInfo()
	return self._biography
	--self.curUnlockID:		int32
	--self.lastUnlockID:		int32
	--self.curTaskID:		int32
	--self.curTaskValue:		int32
	--self.curTaskReward:		int32
	--self.dayReward:		int32
	--self.rewards           vector
end

function i3k_game_context:getCurOutCastID()
	return self._biography.curUnlockID
end

function i3k_game_context:setOutCastCurUnlockID(curUnlockID)
	self._biography.curUnlockID = curUnlockID
	local cfg = i3k_db_out_cast
	-- self._biography.curTaskID = cfg[curUnlockID].taskID
	self._biography.curTaskID = 0 -- 置零
	self._biography.curTaskValue = 0
	self._biography.curTaskReward = 0
end

-- 外传副本当前任务的index
function i3k_game_context:getOutCastTaskIndexByID(id, taskID)
	local cfg = i3k_db_out_cast[id]
	if cfg then
		return taskID - cfg.taskID + 1
	end
	return 0
end

-- 外传副本的所有任务数量
function i3k_game_context:getOutCastTaskCountByID(id)
	local count = 0
	for index, cfg in pairs(i3k_db_out_cast_task) do
		if cfg.outCastID == id then
			count = count + 1
		end
	end
	return count
end

function i3k_game_context:getOutCastTskIdAndValueById()
	return self._biography.curTaskID, self._biography.curTaskValue, self._biography.curTaskReward
end

-- 外传副本领取状态
function i3k_game_context:setOutCastReward(id, flag)
	self._biographyRewards[id] = flag
end

function i3k_game_context:isOutCastReward(id)
	return self._biographyRewards[id]
end

function i3k_game_context:clearOutCastReward()
	self._biographyRewards = {}
end

-- 进入外传副本条件
function i3k_game_context:checkEnterOutCast(showTips)
	local forbidStr
	local mapType = i3k_game_get_map_type()
	if (mapType ~= g_FIELD or self:GetIsSpringWorld()) then
		forbidStr = i3k_get_string(5093)
	elseif self:IsInRoom() or self:getMatchState() ~= 0 then
		forbidStr = i3k_get_string(5094)
	end
	if showTips and forbidStr then
		g_i3k_ui_mgr:PopupTipMessage(forbidStr)
	end
	return forbidStr == nil
end

-- 外传副本页签显示条件
function i3k_game_context:checkOutCastShow()

end

--外传任务接取对话
function i3k_game_context:GetOutCastTaskDialogue(outCastID, taskID, items, tagDesc)
	if (not g_i3k_logic:IsRootUIBattle()) then
		return
	end
	local t,motable = g_i3k_db.i3k_db_get_out_cast_task_get_desc(taskID)
	local callfunc = (function()
		i3k_sbean.biography_take_task(taskID)
	end)

	local fun = (function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue3)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue3,t[last_index],items,tagDesc,motable[last_index],callfunc)
	end)
	local cfg = i3k_db_out_cast_task[taskID]
	self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.get)
	if #t == 0 then
		i3k_sbean.biography_take_task(taskID)
	elseif #t == 1 then
		fun()
	elseif #t > 1 then
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun)
	end
end

--完成外任务对话
function i3k_game_context:FinishOutCastDialogue(outCastID,taskID,is_enough,items)
	local t,motable = g_i3k_db.i3k_db_get_out_cast_task_finish_desc(taskID)
	local task_cfg = i3k_db_out_cast_task[taskID]
	local outCastID = task_cfg.outCastID
	local npcID = task_cfg.completeNpcID
	local npcid = task_cfg.replActionNpcId

	if npcid > 0 then
		local npc = self:GetNPCbyID(npcid)
		if npc then
			npc:ResetActName(i3k_db_common.engine.defaultStandAction)
		end
	end
	local callfunc = function()
		self:CheckSceneTriggerEffect(task_cfg, SCENE_EFFECT_CONDITION.finish)
		g_i3k_ui_mgr:CloseUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
	end
	local func = (function()
		if task_cfg.type == g_TASK_NPC_DIALOGUE then
			g_i3k_game_context:mainTaskPlayFlash(taskID)
		end
		i3k_sbean.biography_finish_task(taskID, callfunc)
	end)
	if task_cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		func = i3k_sbean.dialogue_req
	end
	local fun = (function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue4,t[last_index],func,is_enough,items,motable[last_index], outCastID, taskID, task_cfg.arg1, task_cfg.arg2)
	end)
	if #t == 0 then
		if task_cfg.type == g_TASK_NEW_NPC_DIALOGUE then
			i3k_sbean.dialogue_req(TASK_CATEGORY_OUT_CAST, task_cfg.arg1, task_cfg.arg2, taskID, outCastID)
		else
			i3k_sbean.biography_finish_task(taskID)
		end
	else
		if #t == 1 then
			fun()
		elseif #t > 1 then
			g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
			g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1,t,motable,fun, 0, outCastID, taskID, task_cfg.arg1, task_cfg.arg2)
		end
	end
	if npcID ~= 0 then
		self:playNPCSound(npcID)
	end
end

--获取外传任务奖励
function i3k_game_context:getOutCastTaskAward(taskID)
	local cfg = i3k_db_out_cast_task[taskID]
	local all_items = {}
	for index, value in ipairs(cfg.awards) do
		if value.itemID ~= 0 and value.itemCount ~= 0 then
			all_items[value.itemID] = value.itemCount
		end
	end
	return all_items
end

--判断是否完成外传任务
function i3k_game_context:getIsCompleteOutCastTaskFromID(id)
	local fromID, value, reward = self:getOutCastTskIdAndValueById()
	local cfg = i3k_db_out_cast_task[fromID]
	if cfg and cfg.afterTaskID == 0 and reward == 1 then
		return true
	end
	return false
end

-- 外传任务刚刚完成
function i3k_game_context:OnCompleteOutCastTask(id)
	local info = self:getOutCastInfo()
	info.completeID = id or info.curUnlockID
end

-- 优先打开的外传副本id
function i3k_game_context:getOutCastFirstShowID()
	local info = self:getOutCastInfo()
	local indexID
	-- if info.completeID then
	-- 	indexID = info.completeID
	-- 	info.completeID = nil
	-- else
	for id = 1, info.lastUnlockID do
		if not g_i3k_game_context:isOutCastReward(id) then
			indexID = id
			break
		end
	end
	-- end
	return indexID or info.lastUnlockID + 1
end

-- 进入地图自动开启外传
function i3k_game_context:checkAutoOpenOutCast()
	local info = self:getOutCastInfo()
	if not info or not info.completeID then
		return
	end
	g_i3k_logic:OpenOutCast()
	if self._biography.completeID then -- 完成一个副本后重置
		self._biography.completeID = nil
	end
end

-- 本副本最后一个任务
function i3k_game_context:getOutCastLastTask(id)
	local cfg = i3k_db_out_cast[id]
	local taskID = cfg.taskID
	local taskCfg = i3k_db_out_cast_task[taskID]
	while(taskCfg.afterTaskID ~= 0) do
		taskID = taskCfg.afterTaskID
		taskCfg = i3k_db_out_cast_task[taskID]
	end
	return taskID
end
--------------------</外传副本>-end--------------------

 ------------------------- 伙伴系统 begain ------------------------------
-- 伙伴绑定时间
function i3k_game_context:SetPartnerBindTime(bindTime)
	self._partnerBindTime =  bindTime
end

function i3k_game_context:GetPartnerBindTime()
	return self._partnerBindTime
end
-- 解绑时间
function i3k_game_context:SetPartnerUnBindTime(bindTime, upperUnbindTime)
	self._partnerUnBindTime = bindTime
	self._partnerUpperUnbindTime = upperUnbindTime --上家解绑时间
end
function i3k_game_context:GetPartnerUnBindTime()
	return self._partnerUnBindTime or 0, self._partnerUpperUnbindTime or 0
end

--伙伴领取(icon上改为不显示红点)
function i3k_game_context:TestHuobanRedPoint()
	return false
	--return g_i3k_game_context:testNotice(g_NOTICE_TYPE_CAN_PARTNER_HUOBAN);
end

------------------------- 伙伴系统 end ------------------------------

--折扣礼包购买权
function i3k_game_context:TestDiscountBuyPowerState()
	return self._notice[g_NOTICE_TYPE_CAN_PAY_DISCOUNT_GIFT]
end

--家园善缘值
function i3k_game_context:sethomelandReleaseValue(value)
	self._homelandReleaseValue = self._homelandReleaseValue + value
end

function i3k_game_context:gethomelandRelease()
	return self._homelandReleaseValue
end
--end
-----------------------装备锤脸-----------------------
--设置装备的锤炼属性
function i3k_game_context:SetEquipTemperProps(partID, props)
	local wEquip = self:GetWearEquips()[partID]
	if wEquip and wEquip.equip then
		wEquip.equip.smeltingProps = props
	end
	self:UpdateTemperPropAndForce()
end

--获取装备的锤炼属性
function i3k_game_context:GetEquipTemperProps(partID)
	local wEquips = self:GetWearEquips()
	return wEquips[partID].equip and wEquips[partID].equip.smeltingProps
end

--临时的千锤属性 用于保存前的
function i3k_game_context:SetTempEquipQianChuiProps(props, partID)
	local userCfg = self:GetUserCfg()
	-- local cloneTemperProps = {} --克隆锤炼属性
	-- local temperProps = self:GetEquipTemperProps(partID)
	-- for i, v in ipairs(temperProps) do
	-- 	cloneTemperProps[i] = v
	-- 	for j, k in ipairs(props) do
	-- 		if v.id == k.id then
	-- 			cloneTemperProps[i] = k --用千锤之后的属性替换原来的属性
	-- 		end
	-- 	end
	-- end
	userCfg:SetEquipTempQianChuiProps(props)
end

--获取装备的临时千锤属性
function i3k_game_context:GetTempEquipQianChuiProps()
	local userCfg = self:GetUserCfg()
	return userCfg:GetEquipTempQianChuiProps()
end

--临时的百炼属性 用于保存前的
function i3k_game_context:SetTempEquipBaiLianProps(props)
	local userCfg = self:GetUserCfg()
	userCfg:SetEquipTempBaiLianProps(props)
end

--获取装备临时的百炼属性
function i3k_game_context:GetTempEquipBaiLianProps()
	local userCfg = self:GetUserCfg()
	return userCfg:GetEquipTempBaiLianProps()
end

--设置装备的锤炼技能
function i3k_game_context:SetEquipTemperSkill(partID, skillID, level)
	local wEquip = self:GetWearEquips()[partID]
	if not wEquip.equip.hammerSkill then
		wEquip.equip.hammerSkill = {}
	end
	if wEquip and wEquip.equip then
		wEquip.equip.hammerSkill[skillID] = level
	end
end

--获取装备激活的锤炼技能
function i3k_game_context:GetEquipiTemperSkill(partID)
	local wEquips = self:GetWearEquips()
	return wEquips[partID].equip and wEquips[partID].equip.hammerSkill
end

--将临时存储的千锤炼属性转成正式的 用来保存
function i3k_game_context:MoveTempEquipQianChuiPropsToFormal(partID)
	local userCfg = self:GetUserCfg()
	local temp = userCfg:GetEquipTempQianChuiProps()
	self:SetEquipTemperProps(partID, temp)
	self:ClearTempEquipProps()
end

--将临时存储的百炼属性转成正式的 用来保存
function i3k_game_context:MoveTempEquipBaiLianPropsToFormal(partID)
	local userCfg = self:GetUserCfg()
	local temp = userCfg:GetEquipTempBaiLianProps()
	self:SetEquipTemperProps(partID, temp)
	self:ClearTempEquipProps()
end

--清空临时的锤炼属性 --都要清空
function i3k_game_context:ClearTempEquipProps()
	local userCfg = self:GetUserCfg()
	userCfg:SetEquipTempQianChuiProps(nil)
	userCfg:SetEquipTempBaiLianProps(nil)
	userCfg:SetDefaultBaiLianPartID(0)
end

--重置默认选择的装备位置
function i3k_game_context:ResetDefaultTemperSelectEquip()
	self:SetDefaultTemperSelectEquip(0)
end

--设置默认的选中的装备位置
function i3k_game_context:SetDefaultTemperSelectEquip(partID)
	local usercfg = self:GetUserCfg()
	usercfg:SetDefaultTemperSelectEquip(partID)
end

--判断锤炼的属性是否都是增加的或者都是减少的 1 -1 0
function i3k_game_context:checkTempPropsAllIncOrDec(partID)
	local tempProps = g_i3k_game_context:GetTempEquipQianChuiProps()
	local props = g_i3k_game_context:GetEquipTemperProps(partID or self.partID)
	local flag_Inc, flag_Dec = true, true
	if tempProps and next(tempProps) and props and next(props) then
		for i = 1, #tempProps do
			if tempProps[i].value > props[i].value and flag_Dec then
				flag_Dec = false
			elseif tempProps[i].value < props[i].value and flag_Inc then
				flag_Inc = false
			end
		end
		if flag_Inc and not flag_Dec then return 1 end
		if not flag_Inc and flag_Dec then return -1 end
	end
	return 0
end

--获取默认的选中的装备位置
function i3k_game_context:GetDefaultTemperSelectEquip()
	local usercfg = self:GetUserCfg()
	return usercfg:GetDefaultTemperSelectEquip()
end
--装备锤炼红点
function i3k_game_context:temperRedPoint()
	local wEquips = self:GetWearEquips()
	for i, v in ipairs(wEquips) do
		if self:SingleEquipTemperRed(i) then
			return true
		end
	end
	return false
end
--更新锤炼的战力 和 属性
function i3k_game_context:UpdateTemperPropAndForce()
	self:SetPrePower()
	local hero = i3k_game_get_player_hero()
	hero:UpdateEquipProps()
	self:ShowPowerChange()
end

--单个部位装备红点
function i3k_game_context:SingleEquipTemperRed(partID)
	if not g_i3k_db.i3k_db_get_part_can_temper(partID) then return false end
	local isMatEnough = function(consume)
		for i, v in ipairs(consume) do
			if g_i3k_game_context:GetCommonItemCanUseCount(v.itemId) < v.count then
				return false
			end
		end
		return true
	end--判断材料是否够
	local wEquips = self:GetWearEquips()
	local v = wEquips[partID]
	if not v.equip then return false end
	local equip_cfg = g_i3k_db.i3k_db_get_equip_item_cfg(v.equip.equip_id)
	local part_Skills = i3k_db_equip_temper_base.partDetail[partID].hammerSkill
	if g_i3k_db.i3k_db_get_equip_can_temper(v.equip.equip_id)  then --如果该装备可以锤炼
		if v.equip.smeltingProps and next(v.equip.smeltingProps) then --如果已经解锁锤炼功能
			if not self:IsAllTemperPropMax(partID) and isMatEnough(i3k_db_equip_temper_base.qianchuiConsume) then --如果没有到最大属性并且可以千锤
				return true
			end
			local skill_count = 0
			for k, v in pairs(v.equip.hammerSkill or {}) do
				skill_count = skill_count + 1
			end
			if not(skill_count == 2) then --如果有技能没解锁了
				for j, k in ipairs(part_Skills) do
					local isContain = false
					for m, n in pairs(v.equip.hammerSkill or {}) do
						if m == k then
							isContain = true
						end
					end
					if not isContain then --这个技能没解锁
						if isMatEnough(i3k_db_equip_temper_skill[k][equip_cfg.temperSkillsLevel[j].min].activeConsume) then
							return true
						end
					end
				end
			end
		else--未解锁锤炼功能
			local consume = g_i3k_db.i3k_db_get_equip_temper_unlock_consume_by_id(v.equip.equip_id)
			if isMatEnough(consume) then
				return true
			end
		end
	end
	return false
end

--获取装备锤炼总星数
function i3k_game_context:GetEquipTemperTotalStars(partID)
	local wEquip = self:GetWearEquips()[partID]
	local count = 0
	if wEquip.equip and wEquip.equip.smeltingProps then
		for i, v in ipairs(wEquip.equip.smeltingProps) do
			count = count + g_i3k_db.i3k_db_get_equip_temper_prop_star(v.id, v.value)
		end
	end
	return count
end

--判断这个部位的装备的所有锤炼属性是否达到了最大值
function i3k_game_context:IsAllTemperPropMax(partID)
	local wEquips = g_i3k_game_context:GetWearEquips()[partID]
	local equip_id = wEquips.equip.equip_id
	local props = props or g_i3k_game_context:GetEquipTemperProps(partID)
	if props and next(props) then
		for i, v in ipairs(props) do
			if not self:isMaxOfEquipProp(equip_id, i, v.id, v.value) then
				return false
			end
		end
	else
		return false
	end
	return true
end

--判断这个部位的单个属性是否达到了最大值
function i3k_game_context:isMaxOfEquipProp(equip_id, prop_index, prop_id, prop_value)
	local propStarThreshold = i3k_db_equip_temper_base.propStarThreshold
	local equip_cfg = g_i3k_db.i3k_db_get_equip_item_cfg(equip_id)
	local maxStar = equip_cfg.temperPropsStarLimit[prop_index].max
	local maxValue = propStarThreshold[prop_id][maxStar].max
	return prop_value == maxValue
end

------锤炼 技能 相关---------------
--获取武器装备上宝石强化属性提升系数 (没有加过1 不可以直接乘)  不涉及装备的时候可以用
function i3k_game_context:GetIncreaseRatioOfGemBlessOnEquip(partID)
	local hammerSkill = self:GetEquipiTemperSkill(partID)
	return g_i3k_db.i3k_db_get_equip_bless_increase_ratio_by_skill_set(hammerSkill)
end
--获取激活的武器祝福技能ID 和 等级
function i3k_game_context:GetActiveWeaponBlessID()
	local active = self:GetHammerSkillByTypeOnWearEquip(g_EQUIP_SKILL_TYPE_WEAPON_BLESS)
	for k, v in pairs(active) do
		return k,v
	end
end
--根据技能类型获取身上所有锤炼技能 没有类型的时候返回所有的技能ID
function i3k_game_context:GetHammerSkillByTypeOnWearEquip(skillType)
	local wEquips = self:GetWearEquips()
	local temp = {}
	for i, v in ipairs(wEquips) do
		if v.equip and v.equip.hammerSkill then
			for i2, v2 in pairs(v.equip.hammerSkill) do
				if not temp[i2] then
					if skillType then
						if i3k_db_equip_temper_skill[i2][v2].skillType == skillType then
							temp[i2] = v2
						end
					else
						temp[i2] = v2
					end
				end
			end
		end
	end
	return temp
end
--更新武器祝福技能相关参数
function i3k_game_context:GetWeaponBlessArgs()
	local weaponBlessID,weaponBlessLevel = self:GetActiveWeaponBlessID()
	if weaponBlessID then
		local hero = i3k_game_get_player_hero()
		hero:SetWeaponBless(weaponBlessID, weaponBlessLevel)
		local skillCfg = i3k_db_equip_temper_skill[weaponBlessID][weaponBlessLevel]
		local args = skillCfg.args
		self._weaponBless = self._weaponBless or {}
		self._weaponBless.skill_id = weaponBlessID
		self._weaponBless.upCD =  args[1] --造成伤害时获得1层祝福能量的间隔时间(毫秒)
		self._weaponBless.trigger_need_level = args[2] --触发buff所需祝福层数
		self._weaponBless.ratio_per_level = args[3] --每层可提升全属性的万分比
		self._weaponBless.downCount = args[4] --祝福状态下造成x次伤害后衰减1层祝福
		self._weaponBless.downCD = args[5] --祝福衰减的触发间隔（毫秒）
		local fixSkills = self:GetHammerSkillByTypeOnWearEquip(g_EQUIP_SKILL_TYPE_REVISE_WEAPON_BLESS_ARGUMENT) --所有修正武器祝福参数的技能
		for i, v in ipairs(fixSkills) do
			local fixArgs = i3k_db_equip_temper_skill[v].args
			self._weaponBless.upCD 					= self._weaponBless.upCD 				+ args[1]
			self._weaponBless.trigger_need_level 	= self._weaponBless.trigger_need_level 	+ args[2]
			self._weaponBless.ratio_per_level 		= self._weaponBless.ratio_per_level 	+ args[3]
			self._weaponBless.downCount 			= self._weaponBless.downCount 			+ args[4]
			self._weaponBless.downCD 				= self._weaponBless.downCD 				+ args[5]
		end
	else
		self._weaponBless = nil
	end
	return self._weaponBless
end
------------------------------end----------------------------


--家园房屋家具
function i3k_game_context:setInWallType(state)
	self._wallAreaId = state
end

function i3k_game_context:getInWallType()
	return self._wallAreaId
end

function i3k_game_context:GetIsInHomeLandHouse()
	return self:GetWorldMapType() == g_HOMELAND_HOUSE
end

function i3k_game_context:GetIsInMyHouse()
	if self._houseInfo then
		return self._houseInfo.roleId == self:GetRoleId()
	end
end

function i3k_game_context:setIsInPlaceState(state)
	self._isInPlace = state
end

function i3k_game_context:getIsInPlaceState()
	return self._isInPlace
end

function i3k_game_context:setHomeLandHouseInfo(info)
	self._houseInfo = info
end

function i3k_game_context:getCurHouseLevel()
	return self._houseInfo.homeland.houseLevel
end

function i3k_game_context:getHomeLandHouseInfo()
	return self._houseInfo
end

function i3k_game_context:setCurHouseBag(info)
	self._curHouseBag = info
end

function i3k_game_context:getCurHouseBag()
	return self._curHouseBag
end

function i3k_game_context:getHouseBuildValue()
	return self._houseInfo.homeland.buildValue
end

function i3k_game_context:addHouseBuildValue(value)
	self._houseInfo.homeland.buildValue = self._houseInfo.homeland.buildValue + value
	if self._houseInfo.homeland.buildValue > self._houseInfo.homeland.maxBuildValue then
		self._houseInfo.homeland.maxBuildValue = self._houseInfo.homeland.buildValue
	end
end

function i3k_game_context:subHouseBuildValue(value)
	self._houseInfo.homeland.buildValue = self._houseInfo.homeland.buildValue - value
end

function i3k_game_context:changeCurHouseSkin(id)
	self._houseInfo.homeland.curSkin = id
end

function i3k_game_context:isHaveFurnitureById(furnitureType, id)
	if self._curHouseBag then
		if furnitureType == g_HOUSE_FLOOR_FURNITURE then
			return self._curHouseBag.landFurniture[id] or 0
		elseif furnitureType == g_HOUSE_WALL_FURNITURE then
			return self._curHouseBag.wallFurniture[id] or 0
		elseif furnitureType == g_HOUSE_HANG_FURNITURE then
			return self._curHouseBag.additionFurniture[id] or 0
		elseif furnitureType == g_HOUSE_CARPET_FURNITURE then
			return self._curHouseBag.floorFurniture[id] or 0
		end
	end
end

function i3k_game_context:useFurniture(id, num, furnitureType)
	if self._curHouseBag then
		if furnitureType == g_HOUSE_FLOOR_FURNITURE then
			if self._curHouseBag.landFurniture[id] then
				self._curHouseBag.landFurniture[id] = self._curHouseBag.landFurniture[id] - num
			end
		elseif furnitureType == g_HOUSE_WALL_FURNITURE then
			if self._curHouseBag.wallFurniture[id] then
				self._curHouseBag.wallFurniture[id] = self._curHouseBag.wallFurniture[id] - num
			end
		elseif furnitureType == g_HOUSE_HANG_FURNITURE then
			if self._curHouseBag.additionFurniture[id] then
				self._curHouseBag.additionFurniture[id] = self._curHouseBag.additionFurniture[id] - num
			end
		elseif furnitureType == g_HOUSE_CARPET_FURNITURE then
			if self._curHouseBag.floorFurniture[id] then
				self._curHouseBag.floorFurniture[id] = self._curHouseBag.floorFurniture[id] - num
			end
		end
	end
end

function i3k_game_context:addFurniture(id, num, furnitureType)
	if self._curHouseBag then
		if furnitureType == g_HOUSE_FLOOR_FURNITURE then
			if self._curHouseBag.landFurniture[id] then
				self._curHouseBag.landFurniture[id] = self._curHouseBag.landFurniture[id] + num
			else
				self._curHouseBag.landFurniture[id] = num
			end
		elseif furnitureType == g_HOUSE_WALL_FURNITURE then
			if self._curHouseBag.wallFurniture[id] then
				self._curHouseBag.wallFurniture[id] = self._curHouseBag.wallFurniture[id] + num
			else
				self._curHouseBag.wallFurniture[id] = num
			end
		elseif furnitureType == g_HOUSE_HANG_FURNITURE then
			if self._curHouseBag.additionFurniture[id] then
				self._curHouseBag.additionFurniture[id] = self._curHouseBag.additionFurniture[id] + num
			else
				self._curHouseBag.additionFurniture[id] = num
			end
		elseif furnitureType == g_HOUSE_CARPET_FURNITURE then
			if self._curHouseBag.floorFurniture[id] then
				self._curHouseBag.floorFurniture[id] = self._curHouseBag.floorFurniture[id] + num
			else
				self._curHouseBag.floorFurniture[id] = num
			end
		end
	end
end

function i3k_game_context:setHouseSkinInfo(info)
	self._houseSkin = info
end

function i3k_game_context:getHouseSkinInfo()
	return self._houseSkin
end

function i3k_game_context:unlockHouseSkin(id)
	self._houseSkin[id] = true
end

function i3k_game_context:isHaveHouseSkin(id)
	if id == 1 then
		return true
	end
	return self._houseSkin[id]
end

function i3k_game_context:setHomeLandProduceRedPoint(state)
	self._houseProduceRed = state
end

function i3k_game_context:getHomeLandProduceRedPoint()
	return self._houseProduceRed
end

--家园总览和挂载
function i3k_game_context:setHomelandOverViewStatus(value)
	self._overViewStatus = value
	local logic = i3k_game_get_logic()
	local hero = i3k_game_get_player_hero();
	local level = self:getCurHouseLevel()

	if value and level and i3k_db_home_land_house[level] then
		local cfg = i3k_db_home_land_house[level] --cameraAngle = {x = -23.51, y = -21.43}

		if logic and hero then
			local camera = logic:GetMainCamera()

			if camera then
				g_i3k_ui_mgr:OpenUI(eUIID_HomeLandOverview)
				g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "setChatVisible", false)
				g_i3k_ui_mgr:CloseUI(eUIID_HouseFurniture)
				g_i3k_ui_mgr:CloseUI(eUIID_BattleBossHp)
				camera:UpdateParam(cfg.cameraAngle, cfg.cameraDistance)
				hero:AttachCamera(camera)
				hero:DetachCamera()
				camera:UpdatePos(cfg.cameraRelyPos)
				hero:SetViewDistance(i3k_db_common.cameraClip.PeopleViewDis)
			end
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateHugbtnState")
	else
		local camera = i3k_game_get_logic():GetMainCamera();
		hero:AttachCamera(camera)
		local percent = i3k_get_load_cfg():GetCameraInter() * 100
		g_i3k_game_context:setCameraDistance(percent / 100)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateHugbtnState")
	end
end
--获取是否在总览状态
function i3k_game_context:getHomelandOverViewStatus()
	return self._overViewStatus
end

--家具是否可以挂载
function i3k_game_context:isCanAdditionFurniture(futype, id)
	if not futype or not id then
		return false
	end
	if futype == g_HOUSE_FLOOR_FURNITURE then
		local cfg = i3k_db_home_land_floor_furniture[id]
		return cfg and next(cfg.hangon)
	end
	return false
end

function i3k_game_context:setHomeLandFishCount(value)
	self._homelandFishCount = value
end

function i3k_game_context:getHomeLandFishCount()
	return self._homelandFishCount
end

function i3k_game_context:setHomeLandFishExpCount(value)
	self._homelandFishExpCount = value
end

function i3k_game_context:getHomeLandFishExpCount()
	return self._homelandFishExpCount
end

--end

-----------神兵觉醒-----------
--获取兵魂等级s
function i3k_game_context:GetBingHunLevels(weaponID)
	return self._weaponAwakeData[weaponID] and self._weaponAwakeData[weaponID].skillsLvl or {}
end

--获取兵魂等级
function i3k_game_context:GetBingHunLevel(weaponID, skillID)
	return self._weaponAwakeData[weaponID] and self._weaponAwakeData[weaponID].skillsLvl and self._weaponAwakeData[weaponID].skillsLvl[skillID]
end

--设置神兵兵魂技能等级s --刚解锁的时候用
function i3k_game_context:SetShenBingBingHunLevels(weaponID, levels)
	self._weaponAwakeData[weaponID].skillsLvl = levels
	local hero = i3k_game_get_player_hero()
	hero:UpdateTalentProps(nil, true)
	hero:UpdateWeapon()
end
--升级兵魂等级
function i3k_game_context:UpBingHunLevel(weaponID, skillID)
	self._weaponAwakeData[weaponID].skillsLvl[skillID] = self._weaponAwakeData[weaponID].skillsLvl[skillID] + 1
	local hero = i3k_game_get_player_hero()
	hero:UpdateTalentProps(nil, true)
	hero:UpdateWeapon()
end

--获取神兵是否觉醒
function i3k_game_context:IsShenBingAwake(weaponID)
	return self._weaponAwakeData and self._weaponAwakeData[weaponID] and self._weaponAwakeData[weaponID].awake == 1
end

--设置神兵觉醒相关
function i3k_game_context:SetShenBingAwakeData(weaponID, awakeData)
	--self._weaponAwakeData = self._weaponAwakeData or {}
	if weaponID then
		self._weaponAwakeData[weaponID] = awakeData or {awake = 0}
	end
end

--获取神兵觉醒相关信息
function i3k_game_context:GetShenBingAwakeData(weaponID)
	return self._weaponAwakeData[weaponID]
end

--设置神兵觉醒状态
function i3k_game_context:SetShenBingAwakeState(weaponID, state)
	self._weaponAwakeData[weaponID].awake = state or 1
end

--获取神耀等级
function i3k_game_context:GetShenYaoLevel(shenyaoID)
	local shenYaoCfg = i3k_db_shen_bing_shen_yao[shenyaoID]
	local weapons = shenYaoCfg[1].weapons
	local conditionValues = {
		self:GetAwakeCountOfWeapons(weapons),
		self:GetMinStarOfWeapopns(weapons),
		self:GetTotalStarOfWeapons(weapons),
		self:GetTotalLevelOfWeapons(weapons),
	}
	for i=#shenYaoCfg,1,-1 do
		local cfg = shenYaoCfg[i]
		if breakTag then break end
		local satisfy = true
		for k,v in ipairs(cfg.conditions) do
			if conditionValues[v.conditionType] < v.count then
				satisfy = false
				break
			end
		end
		if satisfy then
			return i
		end
	end
	return 1
end

--获取神兵觉醒数量
function i3k_game_context:GetAwakeCountOfWeapons(weapons)
	local count = 0
	for i, v in pairs(weapons) do
		if self:HaveWeapon(v) and self:IsShenBingAwake(v) then
			count = count + 1
		end
	end
	return count
end

--获取神兵最低星级
function i3k_game_context:GetMinStarOfWeapopns(weapons)
	local min = 999
	local haveAtLeastOne = false
	for i, v in pairs(weapons) do
		if self:HaveWeapon(v) then
			haveAtLeastOne = true
			min = math.min(min,self:GetShenbingStarLvl(v))
		else
			return 0
		end
	end
	return haveAtLeastOne and min or 0
end

--获取神兵总星级
function i3k_game_context:GetTotalStarOfWeapons(weapons)
	local count = 0
	for k, v in pairs(weapons) do
		count = count + (self:HaveWeapon(v) and self:GetShenbingStarLvl(v) or 0)
	end
	return count
end

--获取神兵总等级
function i3k_game_context:GetTotalLevelOfWeapons(weapons)
	local count = 0
	for k, v in pairs(weapons) do
		count = count + (self:HaveWeapon(v) and self:GetShenBingQlvl(v) or 0)
	end
	return count
end

--判断是否有这个神兵
function i3k_game_context:HaveWeapon(id)
	return self._shenBing.all[id] and true or false
end

--判断神兵觉醒红点
function i3k_game_context:GetWeaponAwakeRed(id)
	local isHave = self:HaveWeapon(id)
	if not isHave then return false end
	local openAwake = i3k_db_shen_bing_awake[id] and  i3k_db_shen_bing_awake[id].openAwake == 1
	if not openAwake then return false end
	local isAwake = self:IsShenBingAwake(id)
	if isAwake then
		local levels = self:GetBingHunLevels(id)
		local awakeCfg = i3k_db_shen_bing_awake[id]
		local skillIDs = awakeCfg.showSkills
		local shenYaoID = awakeCfg.shenYaoID
		for i, v in ipairs(skillIDs) do
			local maxLevel = #i3k_db_shen_bing_bing_hun_skill[v]
			if maxLevel > levels[v] then --可以升级
				local skillCfg = i3k_db_shen_bing_bing_hun_skill[v][levels[v] + 1]
				local consume = skillCfg.consume
				local shenYaoCondition = skillCfg.preConditionLvl
				local isMatEnough = true
				for i2, v2 in ipairs(consume) do
					if g_i3k_game_context:GetCommonItemCanUseCount(v2.itemID) < v2.count then
						isMatEnough = false
						break
					end
				end
				if isMatEnough and shenYaoCondition <= self:GetShenYaoLevel(shenYaoID) then --可以升级并且消耗材料足够
					return true
				end
			end
		end
		return false
	else
		local awakeCfg = i3k_db_shen_bing_awake[id]
		return (g_i3k_game_context:GetCommonItemCanUseCount(awakeCfg.needItemID) >= awakeCfg.needItemCount) and (g_i3k_game_context:GetShenBingQlvl(id) >= awakeCfg.needLvl)
	end
end

--计算神兵假的战斗力
function i3k_game_context:GetWeaponAddFightPower(id)--有id就是单个的神兵假战力 没有id就是获取所有的神兵的假战力
	local power = 0
	if id then
		if self:IsShenBingAwake(id) then
			local cfg = i3k_db_shen_bing_awake[id]
			local skillIDs = cfg.showSkills
			local levels = self:GetBingHunLevels(id)
			for k2, v2 in ipairs(skillIDs) do
				local cfg = i3k_db_shen_bing_bing_hun_skill[v2][levels[v2]]
				power = power + cfg.falseForce
			end
		end
		return power
	end
	for k, v in pairs(self._shenBing.all) do
		if self:IsShenBingAwake(k) then
			local cfg = i3k_db_shen_bing_awake[k]
			local skillIDs = cfg.showSkills
			local levels = self:GetBingHunLevels(k)
			for k2, v2 in ipairs(skillIDs) do
				local cfg = i3k_db_shen_bing_bing_hun_skill[v2][levels[v2]]
				power = power + cfg.falseForce
			end
		end
	end
	return power
end

function i3k_game_context:getShenBingAwakeEffectIDs(use, allEffects, isEquip)
		local levels = self:GetBingHunLevels(use)
		local awakeCfg = i3k_db_shen_bing_awake[use]
		local skillIDs = awakeCfg.showSkills
		for i, v in ipairs(skillIDs) do
			local level = levels[v] or 1
			local skillCfg = i3k_db_shen_bing_bing_hun_skill[v][level]
			local effectIDs = skillCfg.xinfaEffectID
		if isEquip then
			for i2, v2 in ipairs(effectIDs) do
				table.insert(allEffects,v2)
			end
		else
			if skillCfg.skillType == g_WEAPON_WALEUP_SKILL_EFFECT_TYPE then
				for i2, v2 in ipairs(effectIDs) do
					table.insert(allEffects, v2)
				end
			end
		end
	end
	return allEffects
end
--获取神兵心法
function i3k_game_context:GetWeaponXinFa()
	local all, useID = self:GetShenbingData()
	local allEffects = {}
	local use = useID or 0
	for _, v in pairs(all) do
		if self:IsShenBingAwake(v.id) then
			allEffects = self:getShenBingAwakeEffectIDs(v.id, allEffects, v.id == use)
		end
	end
	return allEffects
end

function i3k_game_context:GetIsInIllusoryMap()
	return self:GetWorldMapType() == g_ILLUSORY_DUNGEON
end

--杀戮浮动显示
function i3k_game_context:isCanKillTipes()
	local mapType = i3k_game_get_map_type()
	return mapType and i3k_db_common.killTipsCfg.maps[mapType]
end

function i3k_game_context:refreshKillTips(info)
	local mapType = i3k_game_get_map_type()

	if self:isCanKillTipes() and info.deader and info.killer then
		if g_i3k_game_context:GetUserCfg():getIsShowKillTips() == 0 or mapType == g_ARENA_SOLO or mapType == g_TAOIST then
			g_i3k_ui_mgr:OpenUI(eUIID_KillTips)
			g_i3k_ui_mgr:RefreshUI(eUIID_KillTips, info)
		end
	end
end
--end

--采矿气泡
function i3k_game_context:IsMineBubbleCanShow()
	return i3k_game_get_time() - (self._mineBubbleLastTime or 0) >= i3k_db_common.mineBubbleCD
end
--记录最后一次播放气泡的时间
function i3k_game_context:RecordMineBubbleLastTime()
	self._mineBubbleLastTime = i3k_game_get_time()
end

-----------热血情缘-----------
--登录同步整个信息
function i3k_game_context:SetSelfMooddiaryPersonInfo(info)
	self._selfMooddiaryPersonInfo = info
	if info.hasApply == 1 then
		g_i3k_game_context:SetCrossFriendRed(true)
	end
end

function i3k_game_context:GetSelfMooddiaryPersonInfo()
	return i3k_clone(self._selfMooddiaryPersonInfo)
end

--增加跨服好友
function i3k_game_context:AddCrossFriendInfo(friendInfo)
	self._selfMooddiaryPersonInfo.friends[friendInfo.overview.id] = friendInfo
end

--删除跨服好友
function i3k_game_context:DeleteCrossFriendInfo(roleID)
	self._selfMooddiaryPersonInfo.friends[roleID] = nil
end

--是否是跨服好友
function i3k_game_context:GetIsCrossFriend(roleId)
	return self._selfMooddiaryPersonInfo.friends[roleId]
end

--跨服好友红点状态
function i3k_game_context:SetCrossFriendRed(state)
	self._crossFriendRed = state
end

function i3k_game_context:GetCrossFriendRed()
	return self._crossFriendRed
end

--设置星座
function i3k_game_context:SetSelfMooddiaryPersonConstellationInfo(constellationID)
	self._selfMooddiaryPersonInfo.self.constellation = constellationID
end

--设置性别
function i3k_game_context:SetSelfMooddiaryPersonSexInfo(sex)
	self._selfMooddiaryPersonInfo.self.gender = sex
end

--设置系统爱好
function i3k_game_context:SetSelfMooddiaryPersonHobbiesInfo(hobbies)
	self._selfMooddiaryPersonInfo.self.hobbies = {}
	self._selfMooddiaryPersonInfo.self.hobbies = hobbies
end

--设置自定义爱好
function i3k_game_context:SetSelfMooddiaryPersonDiyHobbiesInfo(diyHobbies)
	self._selfMooddiaryPersonInfo.self.diyHobbies = {}
	self._selfMooddiaryPersonInfo.self.diyHobbies = diyHobbies
end

--设置热血情缘分数
function i3k_game_context:SetSelfMooddiaryPersonTestScoreInfo(score, groupID)
	self._selfMooddiaryPersonInfo.self.testScore[groupID] = score
end

--设置好友宣言
function i3k_game_context:SetSelfMooddiaryPersonDeclarationInfo(signature)
	self._selfMooddiaryPersonInfo.self.signature = signature
end

function i3k_game_context:getMarryAchievement()
	return self.marry.marriageAchieve
end

function i3k_game_context:getMarryAchievementTask()
	return self.marry.marriageReward
end

-------------宠物驯养 start--------------------
-- 宠物驯养数据登陆同步
function i3k_game_context:SetPetDomesticationData(data)
	self._petDomestication = data
end

function i3k_game_context:GetPetDomesticationData()
	return self._petDomestication
end

--某个组的宠物装备
function i3k_game_context:GetPetEquipsData(group)
	if not self._petDomestication.equipParts then
		self._petDomestication.equipParts = {}
	end
	if not self._petDomestication.equipParts[group] then
		self._petDomestication.equipParts[group] = {petGroupID = group, equip = {}, upLvls = {}}
	end
	return self._petDomestication.equipParts[group].equip
end

--获取所有宠物装备数据	for 我要提升  (以group为基数)
function i3k_game_context:GetPetEquipPowerAvg()
	if not self._petDomestication.equipParts then
		return 0
	end
	local power = 0
	local count = 0
	for g,v in pairs(self._petDomestication.equipParts) do
		local groupID = g
		count = count + 1
		for p, i in pairs(v.equip) do
			local partID = p 
			local equipid = i
			local lv = v.upLvls[equipid]
			power = power + g_i3k_game_context:GetOnePetEquipTotalFightPower(groupID, equipid, partID, lv)
		end	
	end
	return count == 0 and 0 or power / count	
end
--某个组的宠物装备等级数据
function i3k_game_context:GetPetEquipsLvlData(group)
	if not self._petDomestication.equipParts then
		self._petDomestication.equipParts = {}
	end
	local equipPartData = self._petDomestication.equipParts[group]
	if equipPartData then
		return equipPartData.upLvls
	end
	return {}
end

--获取宠物所有已穿戴装备升级平均值  for 我要提升
function i3k_game_context:GetPetEquipsLvlAvg()
	if not self._petDomestication.equipParts then
		self._petDomestication.equipParts = {}
	end
	local lvlSum = 0
	local count = 0
	for _,upLvls in pairs(self._petDomestication.equipParts) do
		if next(upLvls) == nil then
			return 0
		else 
			for _,v2 in pairs(upLvls.upLvls) do
				count = count + 1
				lvlSum = lvlSum + v2
			end
		end
	end
	return count == 0 and 0 or lvlSum / count
end
--宠物试炼技能数据
function i3k_game_context:GetPetTrainSkillsData(petID)
	if not self._petDomestication.trainSkills then
		self._petDomestication.trainSkills = {}
	end
	if not self._petDomestication.trainSkills[petID] then
		self._petDomestication.trainSkills[petID] = {petID = petID, skills = {}}
	end
	return self._petDomestication.trainSkills[petID].skills
end

--更新宠物试炼技能数据
function i3k_game_context:UpdatePetTrainSkillsData(petID, skillID, skillLvl)
	if petID and skillID then
		local skills = self:GetPetTrainSkillsData(petID)
		skills[skillID] = skillLvl
	end
end

-- 宠物穿上装备
function i3k_game_context:WearPetEquip(group, newEquips)
	local oldEquips = self:GetPetEquipsData(group)
	for partID, id in pairs(newEquips) do
		local oldEqiupID = oldEquips[partID]
		if oldEqiupID then
			oldEquips[partID] = nil
		end
		self:UseCommonItem(id, 1, "")
		oldEquips[partID] = id
		self:refreshPetDungeonProperty(oldEqiupID, id, group)
	end
end

-- 宠物脱下装备
function i3k_game_context:UnwearPetEquip(group, partID)
	local oldEquips = self:GetPetEquipsData(group)
	self:refreshPetDungeonProperty(oldEquips[partID], 0, group)--刷新后再置成nil
	oldEquips[partID] = nil
end

--刷新宠物试炼副本里时的属性
function i3k_game_context:refreshPetDungeonProperty(oldID, newID, groupID)
	local hero = i3k_game_get_player_hero()
	local old = oldID or 0
	local news = newID or 0
	local equip = 0

	if i3k_game_get_map_type() == g_PET_ACTIVITY_DUNGEON and hero then
		local petID = self:getPetDungeonID()
		local cfg = i3k_db_mercenaries[petID]
		local group = cfg.petGroup

		if group ~= groupID then
			return
		end

		reduceTable = {}
		addTable = {}
		local _props = hero._properties;

		if old ~= 0 then
			reduceTable = self:getPetDungeonPropertyData(oldID)

			for k, v in pairs(reduceTable) do
				local prop1 = _props[k];
				prop1:Set(prop1._valueP.Base - v, ePropType_Equip, false, ePropChangeType_Base);
			end
		else
			equip = 1
		end

		if news ~= 0 then
			addTable = self:getPetDungeonPropertyData(newID)

			for k, v in pairs(addTable) do
				local prop1 = _props[k];
				prop1:Set(prop1._valueP.Base + v, ePropType_Equip, false, ePropChangeType_Base);
			end		
		else
			equip = -1
		end	
		
		if equip ~= 0 then
			local upLvls = self:GetPetEquipsLvlData(group)
			local property = {}
			local equipID = old ~= 0 and old or news
			local equipcfg = g_i3k_db.i3k_db_get_pet_equip_item_cfg(equipID)
			
			if equipcfg then
				self:GetOnePetEquipUpLvlProps(group, equipcfg.part, upLvls[equipcfg.part] or 0, property)	
			end
			
			for k, v in pairs(property) do
				local prop1 = _props[k];
				prop1:Set(prop1._valueP.Base + (v * equip), ePropType_Equip, false, ePropChangeType_Base);
			end	
		end
		
		
		hero:OnMaxHpChangedCheck()
	end
end

--获取宠物装备属性
function i3k_game_context:getPetDungeonPropertyData(id)
	local cfg = i3k_db_pet_equips[id]
	local temproperty = {}
			
	if cfg then
		for _, v in ipairs(cfg.baseProp) do
			if v.propID ~= 0 and v.propValue ~= 0 then					
				if temproperty[v.propID] then
					temproperty[v.propID] = temproperty[v.propID] + v.propValue
				else
					temproperty[v.propID] = v.propValue
				end
			end
		end
				
		for _, s in ipairs(cfg.additionalProp) do
			if s.propID ~= 0 and s.propValue ~= 0 then
				if temproperty[s.propID] then
					temproperty[s.propID] = temproperty[s.propID] + s.propValue
				else
					temproperty[s.propID] = s.propValue
				end
			end
		end
	end
	
	return temproperty
end

-- 宠物装备升级
function i3k_game_context:UpdatePetEquipLvl(group, partID, nextLvl)
	local upLvls = self:GetPetEquipsLvlData(group)
	upLvls[partID] = nextLvl
end

--刷新宠物装备属性
function i3k_game_context:RefreshPetEquipProp()
	
end

--宠物装备试炼技能战力
function i3k_game_context:GetPetEquipSkillPower()
	local skillPower = 0

	--所有分组
	for group = 1, #i3k_db_pet_equips_group do
		skillPower = skillPower + self:GetOneGroupPetEquipSkillPower(group)
	end
	return skillPower
end

function i3k_game_context:GetOneGroupPetEquipSkillPower(group)
	local skillPower = 0
	local wEquip = self:GetPetEquipsData(group)
	for partID, id in pairs(wEquip) do
		for _, v in ipairs(self:GetOnePetEquipSkillInfo(id)) do
			if v.skillID ~= 0 then
				skillPower = skillPower + v.skillLvl * i3k_db_pet_equips_cfg.skillPower
			end
		end
	end
	return skillPower
end

--宠物装备基础属性
function i3k_game_context:GetOnePetEquipBaseProps(id, property)
	local equipCfg = g_i3k_db.i3k_db_get_pet_equip_item_cfg(id)
	--基础属性
	if equipCfg then
		for _, v in ipairs(equipCfg.baseProp) do
			property[v.propID] = (property[v.propID] or 0) + v.propValue
		end
	end
end

--宠物装备附加属性
function i3k_game_context:GetOnePetEquipAdditionalProps(id, property)
	local equipCfg = g_i3k_db.i3k_db_get_pet_equip_item_cfg(id)
	--附加属性
	if equipCfg then
		for _, v in ipairs(equipCfg.additionalProp) do
			property[v.propID] = (property[v.propID] or 0) + v.propValue
		end
	end
end

--宠物装备试炼技能
function i3k_game_context:GetOnePetEquipSkillInfo(id)
	local equipCfg = g_i3k_db.i3k_db_get_pet_equip_item_cfg(id)
	--试练技能
	if equipCfg then
		return equipCfg.skills
	end
	return {}
end

-- 获取一件宠物装备的纯战力
function i3k_game_context:GetOnePetEquipFightPower(id)
	local property = {}
	local skillPower = 0
	--基础属性
	self:GetOnePetEquipBaseProps(id, property)
	--附加属性
	self:GetOnePetEquipAdditionalProps(id, property)
	--试练技能
	for _, v in ipairs(self:GetOnePetEquipSkillInfo(id)) do
		if v.skillID ~= 0 then
			skillPower = skillPower + v.skillLvl * i3k_db_pet_equips_cfg.skillPower
		end
	end
	return (g_i3k_db.i3k_db_get_battle_power(property, false, true) + skillPower) * 0.5
end

-- 获取一件宠物装备的装备升级属性
function i3k_game_context:GetOnePetEquipUpLvlProps(group, partID, level, property, otherEquipID)
	local wEquip = self:GetPetEquipsData(group)
	local upGroupID = i3k_db_pet_equips_part[partID].group
	local cfg = g_i3k_db.i3k_db_get_pet_equip_up_lvl_cfg(upGroupID, level)	

	local equipID = otherEquipID and otherEquipID or wEquip[partID]
	local equipCfg = g_i3k_db.i3k_db_get_pet_equip_item_cfg(equipID)

	if cfg and equipCfg then
		--装备升级的属性
		local upLvlProps = {}
		for _, v in ipairs(cfg.props) do
			upLvlProps[v.propID] = (upLvlProps[v.propID] or 0) + v.propValue
		end

		--装备升级加的基础属性
		for _, v in ipairs(equipCfg.baseProp) do
			property[v.propID] = (property[v.propID] or 0) + (upLvlProps[v.propID] or 0)
		end
	end
end

-- 获取一件宠物装备的装备升级战力
function i3k_game_context:GetOnePetEquipUpLvlFightPower(group, partID, level, otherEquipID)
	local property = {}
	self:GetOnePetEquipUpLvlProps(group, partID, level, property, otherEquipID)
	return g_i3k_db.i3k_db_get_battle_power(property, false, true) * 0.5
end

-- 获取一件宠物装备的总战力
function i3k_game_context:GetOnePetEquipTotalFightPower(group, id, partID, level)
	local equipFightPower = self:GetOnePetEquipFightPower(id)
	local upLvlFightPower = self:GetOnePetEquipUpLvlFightPower(group, partID, level)
	return equipFightPower + upLvlFightPower
end

-- 获取宠物装备的属性by宠物ID
function i3k_game_context:GetPetEquipProps(petID)
	local group = i3k_db_mercenaries[petID].petGroup
	local wEquip = self:GetPetEquipsData(group)
	local upLvls = self:GetPetEquipsLvlData(group)

	local property = {}
	for partID, id in pairs(wEquip) do
		--基础属性
		self:GetOnePetEquipBaseProps(id, property)
		--附加属性
		self:GetOnePetEquipAdditionalProps(id, property)
		--升级属性
		self:GetOnePetEquipUpLvlProps(group, partID, upLvls[partID] or 0, property)
	end
	return property
end

-- 获取宠物装备技能战力by宠物ID
function i3k_game_context:GetPetEquipSkillPowerByPetID(petID)
	local group = i3k_db_mercenaries[petID].petGroup
	local skillPower = self:GetOneGroupPetEquipSkillPower(group)
	return skillPower
end

-- 宠物装备精华
function i3k_game_context:GetPetEquipSpiritCount()
	return self._petDomestication.petEquipSpirit
end

function i3k_game_context:AddPetEquipSpiritCount(count)
	self._petDomestication.petEquipSpirit = self._petDomestication.petEquipSpirit + count
end

function i3k_game_context:UsePetEquipSpiritCount(count, reason)
	self._petDomestication.petEquipSpirit = self._petDomestication.petEquipSpirit - count
	DCItem.consume(g_BASE_ITEM_PET_EQUIP_SPIRIT, "宠物装备精华", count, reason)
end

-- 驯养按钮显示条件1
function i3k_game_context:GetPetEquipHeroLvlIsEnough()
	return self:GetLevel() >= i3k_db_pet_equips_cfg.openLvl
end

-- 驯养按钮显示条件2
function i3k_game_context:GetPetEquipPetCntIsEnough()
	local allYongbing = self:GetAllYongBing()
	local haveCount = 0
	for _, v in pairs(allYongbing) do
		if v.level >= i3k_db_pet_equips_cfg.needPetLvl then
			haveCount = haveCount + 1
		end
	end
	return haveCount >= i3k_db_pet_equips_cfg.needPetCnt
end

-- 驯养按钮红点
function i3k_game_context:TestPetEquipRedPoint()
	local isEnoughHeroLvl = self:GetPetEquipHeroLvlIsEnough()
	local isEnoughPetCnt = self:GetPetEquipPetCntIsEnough()
	local isCanUpPetSkill = self:UpdatePetSkillTabPoint()
	local isCanUpPetEquipLvl = self:UpdatePetEquipUpLvlPoint()
	local isPetGuardRed = g_i3k_db.i3k_db_pet_guard_main_red()
	return isEnoughHeroLvl and isEnoughPetCnt and (isCanUpPetSkill or isCanUpPetEquipLvl or isPetGuardRed)
end

-- 获取背包所有的宠物装备
function i3k_game_context:GetAllBagPetEquips()
	local equips = {}
	local _, bagItems = self:GetBagInfo()
	for k, v in pairs(bagItems) do
		if g_i3k_db.i3k_db_get_common_item_type(k) == g_COMMON_ITEM_TYPE_PET_EQUIP then
			table.insert(equips, {id = k, count = v.count, order = g_i3k_db.i3k_db_get_bag_item_order(k)})
		end
	end
	table.sort(equips, function(a, b)
		return a.order < b.order
	end)
	return equips
end

-- 设置所选择的队伍
function i3k_game_context:SetPetEquipGroup(group)
	self._petEquipGroup = group
end

-- 获取所选择的队伍
function i3k_game_context:GetPetEquipGroup()
	return self._petEquipGroup
end

-- 设置所选择的宠物
function i3k_game_context:SetPetEquipPet(petID)
	self._petEquipPet = petID
end

-- 获取所选择的宠物
function i3k_game_context:GetPetEquipPet()
	return self._petEquipPet
end

-- 试炼升级试练技能红点
function i3k_game_context:UpdatePetSkillUpPoint(skillID, skillLvl, petID)
	if not g_i3k_game_context:IsHavePet(petID) then
		return false
	end
	local maxLvl = g_i3k_db.i3k_db_get_pet_equip_skill_max_lvl(skillID)
	if skillLvl >= maxLvl then
		return false
	end

	local upCfg = g_i3k_db.i3k_db_get_pet_equip_skill_up_cfg(skillID, skillLvl + 1)
	local petLvl = g_i3k_game_context:getPetLevel(petID)
	if petLvl < upCfg.needPetLvl then
		return false
	end
	for _, v in ipairs(upCfg.costItem) do
		if g_i3k_game_context:GetCommonItemCanUseCount(v.id) < v.count then
			return false
		end
	end
	return true
end

-- 试炼升级试练技能红点
function i3k_game_context:UpdatePetSkillPetScrollPoint(petID)
	local skillList = i3k_db_mercenaries[petID].skillList
	local skillsData = self:GetPetTrainSkillsData(petID)
	for _, skillID in ipairs(skillList) do
		if self:UpdatePetSkillUpPoint(skillID, skillsData[skillID] or 0, petID) then
			return true
		end
	end
	return false
end

-- 试炼技能页签红点
function i3k_game_context:UpdatePetSkillTabPoint()
	local pets = self:GetAllYongBing()
	for petID, v in pairs(pets) do
		if self:UpdatePetSkillPetScrollPoint(petID) then
			return true
		end
	end
	return false
end

-- 装备升级页签宠物装备部位红点
function i3k_game_context:UpdatePetEquipPartPoint(group, partID)
	local wEquip = self:GetPetEquipsData(group)
	local upGroupID = i3k_db_pet_equips_part[partID].group
	local maxUpLvl = g_i3k_db.i3k_db_get_pet_equip_up_max_lvl(upGroupID)

	local upLvls = self:GetPetEquipsLvlData(group)
	local curLvl = upLvls[partID] or 0
	if curLvl < maxUpLvl then
		local nextUpLvlCfg = g_i3k_db.i3k_db_get_pet_equip_up_lvl_cfg(upGroupID, curLvl + 1)
		local costItem = nextUpLvlCfg.costItem
		--是否满足消耗
		local isEnoughCost = true
		for _, v in ipairs(costItem) do
			if self:GetCommonItemCanUseCount(v.id) < v.count then
				isEnoughCost = false
			end
		end
		local isHaveLimit = g_i3k_db.i3k_db_get_pet_equip_is_have_limit_and_skillCnt(group, partID, curLvl + 1)
		if isEnoughCost and not isHaveLimit then
		 	return true
		end 
	end
	return false
end

-- 装备升级页签宠物分组红点
function i3k_game_context:UpdatePetEquipGroupPoint(group)
	local wEquip = self:GetPetEquipsData(group)
	for partID in pairs(wEquip) do
		if self:UpdatePetEquipPartPoint(group, partID) then
			return true
		end
	end
	return false
end

-- 装备升级页签红点
function i3k_game_context:UpdatePetEquipUpLvlPoint()
	for group = 1, #i3k_db_pet_equips_group do
		if self:UpdatePetEquipGroupPoint(group) then
			return true
		end
	end
	return false
end

-------------宠物驯养 end----------------------
--宠物试炼
function i3k_game_context:getPetDungeonSatisfyCount(needSort)
	local allPets = self:GetAllYongBing()	
	local pets = {}
	local count = 0
	local level = needSort and i3k_db_PetDungeonBase.petBattleNeedLevel or i3k_db_PetDungeonBase.needPetlevel
	local fun = function(a, b)
		return -a.sort < -b.sort
	end
	
	for k, v in pairs(allPets) do
		if v.level >= level then
			count = count + 1
			pets[count] = v
						
			if needSort then
				v.sort = v.level * 100000
				v.sort = v.sort + v.starlvl * 10000
				v.sort = v.sort - v.id 
			end
		end
	end	
	
	if needSort and count > 1 then
		table.sort(pets, fun)
	end
	
	return count, pets
end

function i3k_game_context:setPetDungeonID(value)
	self._curPetDungeonData.petID = value
end

function i3k_game_context:getPetDungeonID()
	return self._curPetDungeonData.petID
end

function i3k_game_context:getPetDungeonTaskCount()
	local info = self._curPetDungeonData.info
	return info and table.nums(info.finishTasks) or 0
end

function i3k_game_context:getPetDungeonGatherCount()
	local info = self._curPetDungeonData.info
	return info and info.dayMineralTimes or 0
end

function i3k_game_context:setPetDungeonInfo(value)
	self._curPetDungeonData.info = value
end

function i3k_game_context:getPetDungeonInfo()
	return self._curPetDungeonData.info
end	

function i3k_game_context:updatePetDungeonGatherCount(value)
	local info = self._curPetDungeonData.info
	
	if info then
		info.dayMineralTimes = info.dayMineralTimes + value
	end
end

--任务已经提交完成
function i3k_game_context:petDungeonIsFinish(id)
	local info = self._curPetDungeonData.info
	
	if info then
		local tasks = info.finishTasks
		
		for k, v in pairs(tasks) do
			if id == k then
				return true
			end
		end
	end
	
	return false
end

function i3k_game_context:getpetDungeonMapIndex(mapId)
	local mapID = self:GetWorldMapID()
	
	if mapId then
		mapID = mapId
	end
		
	for k, v in ipairs(i3k_db_PetDungeonMaps) do
		if mapID == v.mapID then
			return k
		end
	end
	
	return 0
end

-- 宠物试炼根据接取任务的状态，返回所有接取了任务的npc，就是需要隐藏的
function i3k_game_context:getPetDungeonHideTitleNpcs()
	local npcs = {}
	local info = self._curPetDungeonData.info
	local index = self:getpetDungeonMapIndex()
	
	if info then
		for k, v in ipairs(i3k_db_PetDungeonTasks) do 
			if index == v.mapID then
				local npcID = g_i3k_db.i3k_db_get_NpcID_By_TaskID(k)
				
				local flag = true
				
				for _, v in pairs(info.tasks) do
					if v.id == k then
						flag = false
					end
				end
				
				for s, v in pairs(info.finishTasks) do
					if s == k then
						flag = false
					end
				end 
				
				if flag then
					table.insert(npcs, {npcID = npcID, show = true})
				else
					table.insert(npcs, {npcID = npcID, show = false})
				end						
			end
		end
	end
	
	return npcs
end

--返回任务状态
function i3k_game_context:getPetDungeonTaskState(id)
	local info = self._curPetDungeonData.info
	
	if info then
		local tasks = info.tasks
		
		for _, v in pairs(tasks) do
			if v.id == id then
				return v.state, v.value
			end
		end
	end
	
	return 0, 0
end

function i3k_game_context:updatePetDungeonTaskItemInfo(taskID, value)
	local info = self._curPetDungeonData.info
	
	if info then
		local tasks = info.tasks
		
		for _, v in pairs(tasks) do
			if v.id == taskID then
				v.value = value				
				local cfg = i3k_db_PetDungeonTasks[taskID]
				
				if cfg then
					if self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, value) then
						v.state = 2
					else
						v.state = 1
					end
				end			
			end
		end
	end
end

--非提交任务更新
function i3k_game_context:updatePetDungeonTaskInfo(taskType, targetId)
	local finishedCfg = {}
	local index = g_i3k_game_context:getpetDungeonMapIndex()
			
	for k, v in ipairs(i3k_db_PetDungeonTasks) do
		if v.mapID == index and v.type == taskType and v.arg1 == targetId then
			local state, value = self:getPetDungeonTaskState(k) --得到有这个任务目标的任务状态
			local isFinished = self:IsTaskFinished(taskType, v.arg1, v.arg2, value) --已经完成
				
			if not isFinished then
				value = value + 1
				self:updatePetDungeonTaskItemInfo(k, value)
				isFinished = self:IsTaskFinished(taskType, v.arg1, v.arg2, value)
				
				if isFinished then
					self:SetAutoFight(false)
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_PetDungeonBattleBase, "refreshTaskScoll")
				else
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_PetDungeonBattleBase, "updateTaskItemSchedule", k, value)
				end
				
				table.insert(finishedCfg, {isThis = v.arg1 == targetId, isFinished = isFinished})
			end
		end
	end	
	
	return finishedCfg
end

--提交任务更新 state设置为3
function i3k_game_context:updateSubmitPetDungeonTask(taskID)
	local info = self._curPetDungeonData.info
	
	if info then
		local tasks = info.tasks
		
		for _, v in pairs(tasks) do
			if v.id == taskID then
				v.state = 3
				self:updatePetDungeonReward(i3k_db_PetDungeonTasks[taskID].rewards)				
				info.finishTasks[v.id] = true
			end
		end
	end
end

--接受任务更新
function i3k_game_context:updateAcceptPetDungeonTask(taskID) 
	local info = self._curPetDungeonData.info
	
	if info then
		local tasks = info.tasks
		
		for _, v in pairs(tasks) do
			
			if v.id == taskID then
				--todo delete
				g_i3k_ui_mgr:PopupTipMessage("已经接取该任务？")
				return
			end
		end
		
		info.tasks[taskID] = {id = taskID, value = 0, state = 1, takeTime = i3k_game_get_time()}
	end
end

function i3k_game_context:updatePetDungeonReward(rewards) 
	local info = self._curPetDungeonData.info
	
	if info then
		for _, v in pairs(rewards) do
			if v.count ~= 0 and g_i3k_db.i3k_db_get_common_item_type(v.id) ~= g_COMMON_ITEM_TYPE_BASE then
				if info.dayReward[v.id] ~= nil then
					info.dayReward[v.id] = info.dayReward[v.id] + v.count
				else
					info.dayReward[v.id] = v.count
				end				
			end
		end
	end
end

function i3k_game_context:addPetDungeonHavaUseBuffs(isForce, count)
	local info = self:getPetDungeonInfo()

	if info then
		local buffs = info.buffs
		
		for _, v in pairs(buffs) do
			local remain = v.canUseTime - v.useTime
			
			if remain > 0 then -- 有剩余次数才加使用次数
				if v.id == 3 then
					if isForce then
						v.useTime = v.useTime + count
					end
				else			
					v.useTime = v.useTime + count
				end
			end		
		end
	end
end

function i3k_game_context:addPetDungeonCanUseBuffs(id, value)
	local info = self:getPetDungeonInfo()	
	
	if info then
		local buffs = info.buffs
		local flag = false
		
		for _, v in pairs(buffs) do
			if v.id == id then
				v.canUseTime = v.canUseTime + value
				flag = true
			end
		end
		
		if not flag then
			info.buffs[id] = {id = id, canUseTime = value, useTime = 0}
		end
	end
end

function i3k_game_context:getPetDungeonBuffs(buffID)
	local info = self:getPetDungeonInfo()
	
	if info then
		local buffs = info.buffs
		
		for _, v in pairs(buffs) do
			if v.id == buffID then
				local times = v.canUseTime - v.useTime
				return times < 0 and 0 or times
			end
		end
	end
	
	return 0
end

function i3k_game_context:getPetDungeonSkillData(petid)
	for _, v in pairs(self._petDomestication.trainSkills) do
		if v ~= nil then
			if v.petID == petid then
				return v.skills 
			end
		end
	end

	return {}
end

--获取每个试炼技能的等级之和 算上全技能加1事件 不算强制接取 可选择是否算装备技能信息
function i3k_game_context:getPetDungeonSkillLevel(skillID, isAddlucky, isAddEquip)
	local allPets = self:GetAllYongBing()
	local tiems = self:getPetDungeonBuffs(g_ADDALLLEVEL)
	local level =  0
	
	if isAddlucky then
		level = tiems > 0 and 1 or 0
	end
	
	for k, v in pairs(allPets) do
		if v ~= nil then
			local skills = g_i3k_game_context:GetPetTrainSkillsData(k)
			
			if skills then
				local temLevel = skills[skillID] == nil and 0 or skills[skillID]
				level = level + temLevel
			end			
		end
	end
	
	if isAddEquip then
		local petid = self:getPetDungeonID()
		
		if petid ~= 0 then			
			local group = i3k_db_mercenaries[petid].petGroup
			local equips = self:GetPetEquipsData(group) --获取本组宠物装备
		
			if equips then
				for partid, id in pairs(equips) do
					local equipskills = self:GetOnePetEquipSkillInfo(id)
					
					for _, v in ipairs(equipskills) do
						local euqipID = v.skillID
						
						if euqipID ~= 0 and euqipID == skillID then
							level = level + v.skillLvl
						end
					end
				end				
			end
		end
	end
	
	return level 
end

--获取每个采集物的状态 0 不可采集 1 可采集 2 强制采集
function i3k_game_context:getPetDungeonGatherState(gahterID)
	local cfg = i3k_db_PetDungeonGathers[gahterID]
	local flag = true
	local count = 0
	
	for _, v in ipairs(cfg.skills) do
		if v.skillID ~= 0 then
			local level = self:getPetDungeonSkillLevel(v.skillID, true, true) --算装备 算幸运加1
			
			if level < v.skillLevel then
				flag = false
				count = count + 1
			end
		end
	end	
	
	if flag then
		return 1
	end
	
	if count > 1 or self:getPetDungeonBuffs(g_FORCEGATHER) <= 0 then
		return 0
	end
	
	return 2
end

--如果可以采集获取是否需要buff
function i3k_game_context:petDungeonGatherisNeedBuffs(gahterID)
	local buffCount = self:getPetDungeonBuffs(g_ADDALLLEVEL)
	
	if buffCount <= 0 then
		return false, 0
	end
	
	local cfg = i3k_db_PetDungeonGathers[gahterID]
	local flag = false
	
	for _, v in ipairs(cfg.skills) do
		if v.skillID ~= 0 then
			local level = self:getPetDungeonSkillLevel(v.skillID, false, true) --不算幸运事件的技能等级
		
			if level < v.skillLevel then
				flag = true
			end
		end
	end
	
	if flag then 
		return flag, buffCount
	end
	
	return flag, 0
end

--选择地图界面是否满足建议条件
function i3k_game_context:isPetDungeonAllSkillsSatisfy(value)
	for k, v in ipairs(i3k_db_pet_skill) do
		local level = self:getPetDungeonSkillLevel(k, false, false)
		
		if level < value then
			return false
		end
	end
	
	return true
end

function i3k_game_context:isCompleteAllPetDungeonTasks()
	local info = self:getPetDungeonInfo()
	
	if not info then
		return true
	end
	
	local count = table.nums(info.finishTasks)
	
	for _, v in pairs(info.tasks) do
		if v.state ~= 3 then
			count = count + 1
		end
	end
		
	return count >= i3k_db_PetDungeonBase.taskCount
end

--end


----------快速完成任务----------------
--是否满足快速完成任务的条件
function i3k_game_context:isCanQuickFinishTask(taskType, taskID)
	local roleLv = self:GetLevel()
	local quick_cfg = g_i3k_db.i3k_db_get_quick_finish_task_cfg(taskType)
	local task_type
	if taskType == g_QUICK_FINISH_TASK_TYPE_FACTION then
		task_type = g_i3k_db.i3k_db_get_faction_task_cfg(taskID).type
	elseif taskType == g_QUICK_FINISH_TASK_TYPE_LONGXUE then
		task_type = g_i3k_db.i3k_db_get_dragon_task_cfg(taskID).type
	elseif taskType == g_QUICK_FINISH_TASK_TYPE_SHENBING then
		local id ,loop = g_i3k_game_context:getWeaponTaskIdAndLoopType()
		task_type = g_i3k_db.i3k_db_get_weapon_task_cfg(id,loop).type1
	elseif taskType == g_QUICK_FINISH_FIVE_UNIQUE then
		task_type = g_i3k_db.i3k_db_get_five_unique_task_cfg(taskID).type
	end
	local activity = self:GetScheduleInfo().activity
	return roleLv >= quick_cfg.needLevel and quick_cfg.needActivity <= activity and quick_cfg.canQuicklyFinishTaskType[task_type]
end
----------end-------------------------
--------------------------------决战荒漠 begin------------------------------
--观战接口
function i3k_game_context:desertBattleWatchWar(entity)
	local logic = i3k_game_get_logic()
	local camera = logic:GetMainCamera()
	if self._desertViewEntity then
		self._desertViewEntity:DetachCamera()
		--local hero = i3k_game_get_player_hero();
		--if hero._guid ~= self._desertViewEntity._guid then
		local world = i3k_game_get_world();
		world:ReleaseEntity(self._desertViewEntity, true)
		--end
	end
	entity:AttachCamera(camera)
	self:setdesertBattleViewEntity(entity)
end
function i3k_game_context:setdesertBattleViewEntity(entity)
	self._desertViewEntity = entity
end
function i3k_game_context:getdesertBattleViewEntity()
	return self._desertViewEntity
end
--创建玩家头顶积分
function i3k_game_context:refreshDesertBattleScoreTitle()
	local hero = i3k_game_get_player_hero();
	if hero then
		hero:changeScoreText(self:getDesertBattleMapScore())
	end
end
--获取技能
function i3k_game_context:getDesertBattleSkills()
	local hero = i3k_game_get_player_hero()
	local skills = {}
	if hero and hero._inDesertBattle and hero._bindSkills then
		for _, v in pairs(hero._bindSkills) do
			table.insert(skills, v)
		end
	end
	return skills
end
--毒圈信息
function i3k_game_context:setPoisonCircleInfo(info)
	self._battleDesertCircleInfo = info
end
--获取毒圈
function i3k_game_context:getPoisonCircleInfo()
	return self._battleDesertCircleInfo
end
--设置决战荒漠的人物信息
function i3k_game_context:setBattleDesertRoleInfo(data)
	self._battleDesertInfo = data
end
--获取决战荒漠人物信息
function i3k_game_context:getBattleDesertRoleInfo()
	return self._battleDesertInfo
end
--设置出战英雄Id
function i3k_game_context:setBattleDesertCurHero(id)
	if not self._battleDesertInfo then
		self._battleDesertInfo = {}
	end
	self._battleDesertInfo.curHero = id
end
--获得出战英雄Id
function i3k_game_context:getBattleDesertCurHero()
	return self._battleDesertInfo.curHero
end
--获取惩罚时间
function i3k_game_context:getBattleDesertPunishTime()
	return self._battleDesertInfo.punishTime
end
--获取决战荒漠参加次数
function i3k_game_context:getBattleDesertDayEnterTimes()
	return self._battleDesertInfo.log.dayEnterTimes
end
-- 同步荒漠背包
function i3k_game_context:SetDesertBattleBagItems(data)
	self._desertBattleBag = data or {}
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleFubenDesert, "updateQuickUseMedicine")
end
function i3k_game_context:GetDesertBattleBagItems()
	return self._desertBattleBag
end
-- 消耗荒漠背包物品
function i3k_game_context:UseDesertBattleItem(id, count)
	if self._desertBattleBag[id] then
		self._desertBattleBag[id] = self._desertBattleBag[id] - count
		if self._desertBattleBag[id] == 0 then
			self._desertBattleBag[id] = nil
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleDesertBag, "updateBagScroll")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleFubenDesert, "updateQuickUseMedicine")
	end
end
-- 添加荒漠背包物品
function i3k_game_context:AddDesertBattleItem(id, count)
	self._desertBattleBag[id] = (self._desertBattleBag[id] or 0) + count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleDesertBag, "updateBagScroll")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleFubenDesert, "updateQuickUseMedicine")
end
-- 获取荒漠背包物品数量
function i3k_game_context:GetDesertBattleItemCount(id)
	return self._desertBattleBag[id] or 0
end
-- 荒漠背包空间是否足够 参数t是key，value的table，其中key是背包物品的id，value是背包物品的count
function i3k_game_context:IsDesertBagEnough(t)
	local bagMaxSize = g_i3k_db.i3k_db_desert_bag_cell_max_num()
	local useCellSize = self:GetDesertBagUseCellSize()
	local addCellSize = 0
	for k, v in pairs(t) do
		if not self._desertBattleBag[k] then
			addCellSize = addCellSize + 1
		end
	end
	return addCellSize + useCellSize <= bagMaxSize
end
-- 同步荒漠装备
function i3k_game_context:SetDesertBattleEquipData(data)
	self._desertBattleEquip = data or {}
end
function i3k_game_context:GetDesertBattleEquipData()
	return self._desertBattleEquip
end
-- 荒漠穿上装备
function i3k_game_context:WearDesertBattleEquip(newEquips)
	local oldEquips = self:GetDesertBattleEquipData()
	for partID, id in pairs(newEquips) do
		local oldEquipID = oldEquips[partID]
		if oldEquipID then
			oldEquips[partID] = nil
		end
		oldEquips[partID] = id
		self:UseDesertBattleItem(id, 1)
		self:SetDesertBetterEquipStateByPartID(partID, false)
		self:RefreshDesertBattleProperty(oldEquipID, id)
	end
	if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onUpdateDesertBetterEquipShow")
	end
end
-- 荒漠脱下装备
function i3k_game_context:UnwearDesertBattleEquip(partID)
	local oldEquipID = self._desertBattleEquip[partID]
	self:RefreshDesertBattleProperty(oldEquipID, 0)
	self._desertBattleEquip[partID] = nil
end
--刷新荒漠人物的属性
function i3k_game_context:RefreshDesertBattleProperty(oldEquipID, newEquipID)
	local hero = i3k_game_get_player_hero()
	if hero and not hero._inDesertBattle then
		return
	end
	local oldID = oldEquipID or 0
	local newID = newEquipID or 0
	if i3k_game_get_map_type() == g_DESERT_BATTLE and hero then
		local _props = hero._properties
		if oldID ~= 0 then
			local property = self:GetOneDesertEquipProps(oldID)
			for k, v in pairs(property) do
				local prop1 = _props[k]
				prop1:Set(prop1._valueB.Base - v, ePropType_Base, false, ePropChangeType_Base)
			end
		end
		if newID ~= 0 then
			local property = self:GetOneDesertEquipProps(newID)
			for k, v in pairs(property) do
				local prop1 = _props[k]
				prop1:Set(prop1._valueB.Base + v, ePropType_Base, false, ePropChangeType_Base)
			end
		end
		hero:OnMaxHpChangedCheck()
	end
end
-- 获取当前荒漠背包所占格子数
function i3k_game_context:GetDesertBagUseCellSize()
	local size = 0
	local bagItems = self:GetDesertBattleBagItems()
	for _, v in pairs(bagItems) do
		size = size + 1
	end
	return size
end
-- 获取荒漠背包所有药品
function i3k_game_context:GetAllDesertBagDrugs()
	local drugs = {}
	local bagItems = self:GetDesertBattleBagItems()
	for k, v in pairs(bagItems) do
		if g_i3k_db.i3k_db_get_common_item_type(k) == g_COMMON_ITEM_TYPE_DESERT_ITEM then
			if g_i3k_db.i3k_db_get_desert_item_cfg(k).type == UseItemHp then
				table.insert(drugs, {id = k, count = v})
			end
		end
	end
	return drugs
end
-- 获取荒漠背包所有药品的数量
function i3k_game_context:GetDesertBagDrugsCountByID(id)
	local drugs = self:GetAllDesertBagDrugs()
	for _, v in ipairs(drugs) do
		if v.id == id then
			return v.count
		end
	end
	return 0
end
--进地图同步药品使用时间
function i3k_game_context:SetDesertLastUseDrugTime(lastUseDrugTime)
	self._lastUseDrugTime = lastUseDrugTime
end
function i3k_game_context:GetDesertLastUseDrugTime()
	return self._lastUseDrugTime
end
-- 获取荒漠背包所有的装备
function i3k_game_context:GetAllDesertBagEquips()
	local equips = {}
	local bagItems = self:GetDesertBattleBagItems()
	for k, v in pairs(bagItems) do
		if g_i3k_db.i3k_db_get_common_item_type(k) == g_COMMON_ITEM_TYPE_DESERT_EQUIP then
			table.insert(equips, {id = k, count = v})
		end
	end
	return equips
end
-- 获取一件荒漠装备的基础属性
function i3k_game_context:GetOneDesertEquipBaseProps(id, property)
	local equipCfg = g_i3k_db.i3k_db_get_desert_equip_item_cfg(id)
	--基础属性
	if equipCfg then
		for _, v in ipairs(equipCfg.baseProp) do
			property[v.propID] = (property[v.propID] or 0) + v.propValue
		end
	end
end
-- 获取一件荒漠装备的附加属性
function i3k_game_context:GetOneDesertEquipAdditionalProps(id, property)
	local equipCfg = g_i3k_db.i3k_db_get_desert_equip_item_cfg(id)
	--附加属性
	if equipCfg then
		for _, v in ipairs(equipCfg.additionalProp) do
			property[v.propID] = (property[v.propID] or 0) + v.propValue
		end
	end
end
--获取一件荒漠装备的总属性
function i3k_game_context:GetOneDesertEquipProps(id)
	local property = {}
	--基础属性
	self:GetOneDesertEquipBaseProps(id, property)
	--附加属性
	self:GetOneDesertEquipAdditionalProps(id, property)
	return property
end
-- 获取一件荒漠装备的战力
function i3k_game_context:GetOneDesertEquipFightPower(id)
	local property = self:GetOneDesertEquipProps(id)
	return g_i3k_db.i3k_db_get_battle_power(property, true, false, true)
end
-- 获取荒漠玩家战力
function i3k_game_context:GetDesertRoleFightPower()
	local hero = i3k_game_get_player_hero()
	if hero then
		return hero:getPowerByProperty("_valueB", true)
	end
end
function i3k_game_context:ShowDesertPowerChange(prePower)
	local hero = i3k_game_get_player_hero()
	if hero then
		local nowPower = self:GetDesertRoleFightPower()
		if nowPower ~= prePower then
			local changePower = nowPower - prePower
			g_i3k_ui_mgr:PopupPowerChange(prePower, changePower)
		end
	end
end
-- 荒漠装备是否符合角色类型
function i3k_game_context:isEquipEnoughRoleType(equipCfg)
	local myRoleType = self:getBattleDesertCurHero()
	if equipCfg and (equipCfg.roleType == myRoleType or equipCfg.roleType == 0) then
		return true
	end
	return false
end
--获取荒漠战力最大的装备
--bestEquip[equipID] = partID
--equips[partID] = equipID
--replace_count
function i3k_game_context:GetDesertBestEquipInfo()
	local bagEquips = self:GetAllDesertBagEquips()
	local wEquip = self:GetDesertBattleEquipData()
	local bestEquip = {}
	local replace_count = 0
	for i = 1, #i3k_db_desert_battle_equip_part do
		local wPower = 0
		local equipID = wEquip[i]
		if equipID then
			wPower = math.modf(self:GetOneDesertEquipFightPower(equipID))
		end
		local canWearEquips = {}
		for _, v in ipairs(bagEquips) do
			local equipCfg = g_i3k_db.i3k_db_get_desert_equip_item_cfg(v.id)
			local isEnough = self:isEquipEnoughRoleType(equipCfg)
			if isEnough then
				table.insert(canWearEquips, {id = v.id, partID = equipCfg.part})
			end
		end
		table.sort(canWearEquips, function(a, b)
			local powerA = math.modf(self:GetOneDesertEquipFightPower(a.id))
			local powerB = math.modf(self:GetOneDesertEquipFightPower(b.id))
			return powerA > powerB
		end)
		local ePower = 0
		local bagEquipID = 0
		for _, v in ipairs(canWearEquips) do
			if v.partID == i then
				bagEquipID = v.id
				ePower = math.modf(self:GetOneDesertEquipFightPower(v.id))
				break
			end
		end
		if ePower > wPower then
			bestEquip[bagEquipID] = i
			replace_count = replace_count + 1
		end
	end
	local equips = {}
	for k, v in pairs(bestEquip) do
		equips[v] = k
	end
	return bestEquip, equips, replace_count
end
function i3k_game_context:GetDesertBetterEquipInfoByPartID(partID)
	local _, equips = self:GetDesertBestEquipInfo()
	for k in pairs(equips) do
		if k == partID then
			return true
		end
	end
	return false
end
function i3k_game_context:InitDesertBetterEquipState()
	for i = 1, #i3k_db_desert_battle_equip_part do
		self._desertBetterEquips[i] = self:GetDesertBetterEquipInfoByPartID(i)
	end
end

function i3k_game_context:SetDesertBetterEquipStateByPartID(partID, state)
	self._desertBetterEquips[partID] = state
end

function i3k_game_context:GetDesertBetterEquipStateByPartID(partID)
	return self._desertBetterEquips[partID]
end

function i3k_game_context:GetDesertBetterEquipState()
	for i = 1, #i3k_db_desert_battle_equip_part do
		if self:GetDesertBetterEquipStateByPartID(i) then
			return true
		end
	end
	return false
end

function i3k_game_context:setDesertBattleMapinfo(value)
	self._desertBattleMapIndo = value
end

function i3k_game_context:getDesertBattleMapScore()
	return self._desertBattleMapIndo and self._desertBattleMapIndo.score or 0
end

function i3k_game_context:setDesertBattleMapScore(value)
	if self._desertBattleMapIndo then
		self._desertBattleMapIndo.score = value
	end
end

function i3k_game_context:getDesertBattleMapInfo()
	return self._desertBattleMapIndo
end

function i3k_game_context:refreshDesertBattleMemberLifes(id, value)
	if self._desertBattleMapIndo and self._desertBattleMapIndo.lifes then
		self._desertBattleMapIndo.lifes[id] = value
	end
end

--同步吃鸡和总积分信息
function i3k_game_context:SetDesertBattleTotalScore(score, champion)
	self._desertBattleTotalScore = {score = score, champion = champion }
end

--获取总积分和吃鸡次数
function i3k_game_context:GetDesertBattleTotalScore()
	return self._desertBattleTotalScore
end


--设置补给点信息
function i3k_game_context:SetDesertBattleResInfo(data)
	self._desertBattleResInfo = data
end

--获取
function i3k_game_context:GetDesertBattleResInfo()
	return self._desertBattleResInfo
end

--------------------------------决战荒漠 end------------------------------

-- 同步每周宝箱数据
function i3k_game_context:SetWeekLimitData(data)
	self._weekLimitData = data
end

function i3k_game_context:GetWeekLimitData()
	return self._weekLimitData or {}
end

function i3k_game_context:UpdateWeekLimitData(taskID)
	if self._weekLimitData and self._weekLimitData[taskID] then
		if self._weekLimitData[taskID].leftTakeCnt == 1 then
			self._weekLimitData[taskID].leftTakeCnt = 0
		else
			self._weekLimitData[taskID].isTakedReward = 1
		end
	end
end

-- 每周宝箱红点个数
function i3k_game_context:getWeekLimitBoxRedPointNum(boxData)
	local count = 0
	if boxData.leftTakeCnt > 0 then
		count = count + 1
	end
	if boxData.isFinish == 1 and boxData.isTakedReward == 0 and i3k_game_get_time() > boxData.rewardTime then
		count = count + 1
	end
	return count
end

--每周限时宝箱Tab红点
function i3k_game_context:isShowWeekLimitBoxRed()
	if self._weekLimitData then
		for k, v in pairs(self._weekLimitData) do
		if self:getWeekLimitBoxRedPointNum(v) > 0 then
			return true
			end
		end
	end
	return false
end

--进入大地图是否弹获得每周宝箱面板
function i3k_game_context:SetIsShowGetBoxTips(isShow)
	self._isShowGetBoxTips = isShow
end

function i3k_game_context:GetIsShowGetBoxTips()
	return self._isShowGetBoxTips
end

function i3k_game_context:SetBoxTipsData(data)
	self._weekBoxTempData = data
end

function i3k_game_context:GetBoxTipsData()
	return self._weekBoxTempData
end

--设置队伍信息
function i3k_game_context:SetDesertBattleTeamInfo(data)
	self._battleDesertTeamInfo = {}
	for k, v in pairs(data) do
		table.insert(self._battleDesertTeamInfo,k)
	end
end

function i3k_game_context:GetDesertBattleTeamInfo()
	return self._battleDesertTeamInfo
end
--------------------------------结拜
--改变结拜关系
function i3k_game_context:changeSwornFriends(isSworn)
	self._isSworn = isSworn
	if isSworn then
		self:syncData()
	end
end

function i3k_game_context:getSwornFriends()
	return self._isSworn
end

function i3k_game_context:gotoSwornNpc()
	self:GotoNpc(i3k_db_sworn_system.swornNpcId, function( )
		self:OpenNormalNpcDialogue(i3k_db_sworn_system.swornNpcId)
	end)
end


-----------------武诀begin--------------------------
function i3k_game_context:setWujueData(info)
	self._wujue = info
end
function i3k_game_context:getWujueData()
	return self._wujue
end

function i3k_game_context:isWujueOpen()
	return self:getWujueLevel() > 0 and self:getWujueRank() > 0
end

function i3k_game_context:initWujueData()
	self._wujue = {
		rank = 1,
		level = 1,
		exp = 0,
		dayExp = 0,
		skills = {},
		hiddenSoul = {}
	}
end

--获取武诀技能等级总和  skills技能组合id数组
function i3k_game_context:getWuJueSkillsLvSum(skills)
	local wujue = self:getWujueData()
	local levelSum = 0
	if wujue then
		if not skills then
		for _,v in pairs(wujue.skills) do
			levelSum = levelSum + v
			end
		else
			local dict = {}
			for k,v in pairs(skills) do
				dict[v] = true
			end
			for k,v in pairs(wujue.skills) do
				if dict[k] then
					levelSum = levelSum + v
				end
			end
		end
	end
	return levelSum
end
--武决潜魂阶数总合
function i3k_game_context:getWujueSoulRankSum()
	local rank = 0
	for i,v in ipairs(i3k_db_wujue.soulCfg) do
		local lvl = self:getWujueSoulLvl(i)
		if lvl ~= 0 then
			local cfg = i3k_db_wujue_soul[i][lvl]
			rank = rank + cfg.rank
		end
	end
	return rank
end
function i3k_game_context:getWujueLevel()
	return self._wujue and self._wujue.level or 0
end

function i3k_game_context:setWujueLevel(level)
	self._wujue.level = level
end
--武决潜魂
function i3k_game_context:getWujueSoulLvl(soulId)
	return self._wujue and self._wujue.hiddenSoul[soulId] or 0
end
function i3k_game_context:setWujueSoulLvl(soulId, lvl)
	self._wujue.hiddenSoul[soulId] = lvl
end

function i3k_game_context:getWujueSkillLevel(skillID)
	return skillID and (self._wujue.skills[skillID] or 0) or self._wujue.skills
end

function i3k_game_context:setWujueSkillLevel(skillID, skillLevel)
	self._wujue.skills[skillID] = skillLevel
end

function i3k_game_context:getWujueRank()
	return self._wujue and self._wujue.rank or 0
end

function i3k_game_context:setWujueRank(rank)
	self._wujue.rank = rank
end

function i3k_game_context:addWujueExp(exp, isAddtoDayExp)
	local data = self:getWujueData()
	local breakCfg = i3k_db_wujue_break[data.rank]
	local nextBreakCfg = i3k_db_wujue_break[data.rank + 1]
	local levelCfg = i3k_db_wujue_level[data.level]
	local nextLevelCfg =i3k_db_wujue_level[data.level + 1]
	local preExp = data.exp
	local preLevel = data.level
	data.exp = data.exp + exp
	data.level, data.exp = g_i3k_db.i3k_db_get_wujue_level_exp(data.level, data.exp)
	if isAddtoDayExp then
		data.dayExp = data.dayExp + data.exp - preExp
		for i = preLevel + 1, data.level do
			data.dayExp = data.dayExp + i3k_db_wujue_level[i].needExp
		end
	end
	if data.level > preLevel then
		g_i3k_game_context:SetPrePower()
		local hero = i3k_game_get_player_hero()
		hero:UpdateWuJueProp()
		g_i3k_game_context:ShowPowerChange()
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_Wujue)
end

function i3k_game_context:isShowWujueRedPoint()
	if self:isWujueOpen() then
		return self:isHaveWujueAddExpProp() or self:isShowWujueTupoRedPoint() or self:isWujueSkillHasRedPoint()
	else
		return self:GetLevel() >= i3k_db_wujue.openLevel
	end
end

function i3k_game_context:isHaveWujueTupoProps()
	local rank = self:getWujueRank()
	for k,v in pairs(i3k_db_wujue_break[rank + 1].consumes) do
		if self:GetCommonItemCanUseCount(v.id) < v.count then
			return false
		end
	end
	return true
end

function i3k_game_context:isWujueTupoTopRank()
	local rank = self:getWujueRank()
	local maxRank = #i3k_db_wujue_break
	return rank == maxRank
end

function i3k_game_context:isShowWujueTupoRedPoint()
	local rank = self:getWujueRank()
	if self:isWujueTupoTopRank() then
		return false
	elseif not g_i3k_db.i3k_db_wujue_consume_is_enough(i3k_db_wujue_break[rank + 1].consumes) then
		return false
	elseif self:getWujueLevel() < i3k_db_wujue_break[rank + 1].req then
		return false
	end
	return true
end

function i3k_game_context:isWujueSkillHasRedPoint()
	local wujueData = g_i3k_game_context:getWujueData()
	for k,v in ipairs(i3k_db_wujue_skill) do
		if self:isShowWujueSkillRedPoint(k) then
			return true
		end
	end
	for k,v in ipairs(i3k_db_wujue.soulCfg) do
		if self:isShowWujueSoulRedPoint(k) then
			return true
		end
	end
	return false
end

function i3k_game_context:isShowWujueSkillRedPoint(skillID)
	local skillLvl = self:getWujueSkillLevel(skillID)
	local wujueLvl = self:getWujueLevel()
	local last_index = #i3k_db_wujue_skill[skillID]
	if i3k_db_wujue_skill[skillID][last_index].skillLevel == skillLvl then
		return false
	else
		if wujueLvl < i3k_db_wujue_skill[skillID][skillLvl + 1].wujueReq then
			return false
		elseif i3k_db_wujue_skill[skillID][skillLvl + 1].skillReq ~= 0 and self:getWujueSkillLevel(i3k_db_wujue_skill[skillID][skillLvl + 1].skillReq) < i3k_db_wujue_skill[skillID][skillLvl + 1].skillLevelReq then
			return false
		else
			for i, v in ipairs(i3k_db_wujue_skill[skillID][skillLvl + 1].needItems) do
				if g_i3k_game_context:GetCommonItemCanUseCount(v.id) < (v.count) then
					return false
				end
			end
			return true
		end
	end
end

--武决 潜魂 红点
function i3k_game_context:isShowWujueSoulRedPoint(soulId)
	local lvl = self:getWujueSoulLvl(soulId)
	if g_i3k_db.i3k_db_get_wujue_soul_state(soulId, lvl) == g_WUJUE_SOUL_STATE_MAX then
		return false
	end
	local soulCfg = i3k_db_wujue.soulCfg[soulId]
	local nextSoulDataCfg = i3k_db_wujue_soul[soulId][lvl + 1]
	if not nextSoulDataCfg then return false end
	for i, v in ipairs(nextSoulDataCfg.needItems) do
		if g_i3k_game_context:GetCommonItemCanUseCount(v.id) < (v.count) then
			return false
		end
	end
	local skillLvlSum = self:getWuJueSkillsLvSum(soulCfg.upLvLimitSkillGroup)
	if skillLvlSum < nextSoulDataCfg.upLvlNeedSum then
		return false
	end
	return true
end
function i3k_game_context:isHaveWujueAddExpProp()
	if not g_i3k_db.i3k_db_wujue_can_get_exp() then
		return false
	end
	local wujueAddExpProps = {}
	for k, v in pairs(i3k_db_new_item) do
		if v.type == UseItemWuJueExp then
			table.insert(wujueAddExpProps, k)
		end
	end
	for k,v in pairs(wujueAddExpProps) do
		if g_i3k_game_context:GetCommonItemCanUseCount(v) > 0 then
			return true
		end
	end
	return false
end

function i3k_game_context:getWujueForce(level, soulLvlMaps, skillLvlMaps)
	level = level or self:getWujueLevel()
	if level > 0 then
		local soulLvlMaps = soulLvlMaps
		if not soulLvlMaps then
			soulLvlMaps = {}
			for i, v in ipairs(i3k_db_wujue.soulCfg) do
				soulLvlMaps[i] = self:getWujueSoulLvl(i)
			end
		end
		local tempWujueProp = {}
		local wujueProp = g_i3k_db.i3k_db_get_wujue_level_prop(level)
		for i, v in ipairs(wujueProp) do
			tempWujueProp[v.id] = (tempWujueProp[v.id] and tempWujueProp[v.id] or 0) + v.value
		end
		local skillLvlMaps = skillLvlMaps
		if not skillLvlMaps then
			skillLvlMaps = {}
			for i, v in ipairs(i3k_db_wujue_skill) do
				skillLvlMaps[i] = g_i3k_game_context:getWujueSkillLevel(i)
			end
		end
		for i = 1,#i3k_db_wujue_skill do
			local skillProp = g_i3k_db.i3k_db_get_wujue_skill_prop(i,skillLvlMaps[i] or 0) or {}
			if skillProp then
				for i2, v in ipairs(skillProp) do
					tempWujueProp[v.id] = (tempWujueProp[v.id] and tempWujueProp[v.id] or 0) + v.value
				end
			end
		end
		for k,v in pairs(g_i3k_db.i3k_db_get_wujue_all_soul_props(soulLvlMaps)) do
			tempWujueProp[k] = (tempWujueProp[k] or 0) + v
		end
		for soulId,_ in ipairs(i3k_db_wujue.soulCfg) do
			local soulLvl = soulLvlMaps[soulId] or 0
			local soulCfg = i3k_db_wujue_soul[soulId][soulLvl]
			if soulCfg then
				local rank = soulCfg.rank
				local propsValue = i3k_db_wujue.soulCfg[soulId].propsValues[rank] or 0
				for i,v in ipairs(i3k_db_wujue.soulCfg[soulId].propsIds) do
					tempWujueProp[v] = (tempWujueProp[v] or 0) + propsValue / 10000
				end
			end
		end
		return g_i3k_db.i3k_db_get_battle_power(tempWujueProp)
	end
	return 0
end
--------------------武诀end-----------------------
-------------------幻形----------------------

--设置幻形数据
function i3k_game_context:SetMetamorphosisInfo(curTransform, transforms)
	self._metamorphosisInfo.curTransform = curTransform
	self._metamorphosisInfo.transforms = transforms
end

--获取当前装备幻形
function i3k_game_context:GetCurMetamorphosis()
	return self._metamorphosisInfo.curTransform
end

--获取已激活幻形
function i3k_game_context:GetActivationMetamorphosis()
	return self._metamorphosisInfo.transforms
end

--根据幻形ID获得属性（返回一个vector，防止合并属性）
function i3k_game_context:GetPropertyByMetamorphosisId(metamorphosisID)
	local prop = {}  --vector
	local allMetamorphosis = g_i3k_game_context:GetActivationMetamorphosis()
	local isHave = g_i3k_db.i3k_db_get_metamorphosis_is_have(metamorphosisID)
	if isHave then
		for id, v in pairs(allMetamorphosis) do
			if id == metamorphosisID then
				local propertyTb = g_i3k_db.i3k_db_get_metamorphosis_property(metamorphosisID)
				for k, v in pairs(propertyTb) do
					table.insert(prop, {id = k, value = v})
				end
				break
			end
		end
	else
		local propertyTb = g_i3k_db.i3k_db_get_metamorphosis_property(metamorphosisID)
		for k, v in pairs(propertyTb) do
			table.insert(prop, {id = k, value = v})
		end
	end
	return prop
end


--设置幻形
function i3k_game_context:SetWearMetamorphosisData(metamorphosisID)
	local cfg = i3k_db_metamorphosis[metamorphosisID]
	self._metamorphosisInfo.curTransform = metamorphosisID
	local iconShow, redShow = self:TestBagShowState()
	self:OnBagShowStateChangedHandler(iconShow, redShow)
	g_i3k_ui_mgr:PopupTipMessage(string.format("穿戴成功"))
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDress, "updateScroll")
end

--幻形界面红点提示
function i3k_game_context:getMetamorphosisRedPoint()
	local isWearCount = 0
	for i,e in pairs(i3k_db_metamorphosis) do
		if g_i3k_db.i3k_db_get_metamorphosis_is_wear(e.id) then
			isWearCount = isWearCount + 1
		end
	end
	if isWearCount == 0 then
		for i,e in pairs(i3k_db_metamorphosis) do
			local isHave = g_i3k_db.i3k_db_get_metamorphosis_is_have(e.id)
			local isWear = g_i3k_db.i3k_db_get_metamorphosis_is_wear(e.id)
			local isCanDo = not isHave and not isWear and self:GetCommonItemCanUseCount(e.needItemId) > 0
			if isCanDo or isHave then
				return true
			end
		end
	else
		return false
	end
end

--使用幻形道具
function i3k_game_context:SetUseMetamorphosisData(id)
	self:UseBagMiscellaneous(id, 1)
	local itemCfg = g_i3k_db.i3k_db_get_other_item_cfg(id)
	local fashionID = itemCfg.args1

	if not self._metamorphosisInfo.transforms then
		self._metamorphosisInfo.transforms = {}
	end
	self._metamorphosisInfo.transforms[fashionID] = 0

	local info = g_i3k_db.i3k_db_get_fashion_cfg(fashionID)
	local iconShow, redShow = self:TestBagShowState()
	self:OnBagShowStateChangedHandler(iconShow, redShow)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MetamorphosisDressTips, "updateUseTips", fashionID)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FashionDress, "updateScroll")

end

--设置幻形状态
function i3k_game_context:SetMetamorphosisState(state)
	self._metamorphosisUse = state
end

--获取是否幻形
function i3k_game_context:GetMetamorphosisState()
	return  self._metamorphosisUse
end


--判断是否是在幻形变身
function i3k_game_context:IsInMetamorphosisMode()
	local _, missionModetype = g_i3k_game_context:IsInMissionMode()
	local use = g_i3k_game_context:GetMetamorphosisState()
	if missionModetype and missionModetype == g_TASK_TRANSFORM_STATE_METAMORPHOSIS and use == 1 then
		return true
	end
	return false
end
-------------------幻形end------------------

--天魔迷宫
function i3k_game_context:setBattleMazeData(value)
	self._mazeData = value
end
function i3k_game_context:getBattleMazeData()
	return self._mazeData
end

function i3k_game_context:isCanTransferInMaze()
	local count = self._mazeData and self._mazeData.transferItemCnt or 0
	return count >= i3k_db_maze_battle.transferneedNum
end

function i3k_game_context:isCanGatherInMaze()
	if self._mazeData then
		return self._mazeData.zoneMineralTimes  < i3k_db_maze_Area[self._mazeData.curZoneID].resourceTimes
	end
	
	return false
end

function i3k_game_context:addBattleMazeTransferCancelTimeCount(value) 
	self._mazetransferTime = value + self._mazetransferTime
	self._mazetransferTime = self._mazetransferTime > i3k_db_maze_battle.transferLimitTime and i3k_db_maze_battle.transferLimitTime or self._mazetransferTime
	return self._mazetransferTime
end

function i3k_game_context:reSetBattleMazeTransferCancelTimeCount() 
	self._mazetransferTime = 0
end

function i3k_game_context:refeshBattleMazeTransfercount(count)
	if self._mazeData then
		self._mazeData.transferItemCnt = self._mazeData.transferItemCnt +  count
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_MazeBattleInfo, "setTntNumText", self._mazeData)
	end
end

function i3k_game_context:refeshBattleMazeCurZoneID(zoneID)
	if self._mazeData then
		self._mazeData.curZoneID = zoneID
		self._mazeData.zoneMineralTimes = 0
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_MazeBattleInfo, "setMiningNumText", self._mazeData)
	end
end

function i3k_game_context:refeshBattleMazezoneMineralTimes(count)
	if self._mazeData then
		self._mazeData.zoneMineralTimes = self._mazeData.zoneMineralTimes +  count
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_MazeBattleInfo, "setMiningNumText", self._mazeData)
	end
end

function i3k_game_context:getBattleMazeCurZoneId()
	return self._mazeData and self._mazeData.curZoneID or 0 
end
function i3k_game_context:setBattleMazekillTimes(count)
	if self._mazeData then
		self._mazeData.killTimes = count
	end
end
function i3k_game_context:getBattleMazekillTimes()
	return self._mazeData and self._mazeData.killTimes or 0
end
--end


--修炼之门
function i3k_game_context:SetPracticeGateData(info)
	self._practice_gate_buffs = self._practice_gate_buffs or {}
	for k, v in pairs(info.addBuffs) do
		if not self._practice_gate_buffs[k] or v > self._practice_gate_buffs[k] then
			self._practice_gate_buffs[k] = v
		end
	end
	self._practice_round = info.monsterRound
	g_i3k_ui_mgr:RefreshUI(eUIID_DefendSummary)
end

function i3k_game_context:GetPracticeGateData()
	return self._practice_gate_buffs,self._practice_round
end

function i3k_game_context:ResetPracticeGateData()
	self._practice_round = 0
	self._practice_gate_buffs = nil
end
--buff Flag
function i3k_game_context:AddMapBuffFlagInPracticeGate(id)
	if not self._practiceGateMapbuffFlag then
		self._practiceGateMapbuffFlag = {[id] = true}
	else
		self._practiceGateMapbuffFlag[id] = true
	end
end

function i3k_game_context:RemoveMapBuffFlagInPracticeGate(id)
	if self._practiceGateMapbuffFlag then
		self._practiceGateMapbuffFlag[id] = nil
	end
end

function i3k_game_context:GetMapBuffFlagInPracticeGate(id)
	return self._practiceGateMapbuffFlag and self._practiceGateMapbuffFlag[id]
end

function i3k_game_context:ClearMapBuffFlagInPracticeGate()
	self._practiceGateMapbuffFlag = nil
end
--end

--节日限时任务
function i3k_game_context:setFestivalLimitTask(data)
	self._festivalTask = data
	for k, v in pairs(data) do
		if v.curTask then
			if v.curTask.index == 1 and v.curTask.state == 0 then
			else
				g_i3k_game_context:AddTaskToDataList(g_i3k_db.i3k_db_get_festival_task_hash_id(v.curTask.groupId, v.curTask.index))
			end
		else
			--[[local groupId = i3k_db_festival_cfg[festivalId].taskGroupId[lastAcceptIndex + 1]
			if groupId then
				g_i3k_game_context:AddTaskToDataList(g_i3k_db.i3k_db_get_festival_task_hash_id(groupId, 1))
			end--]]
		end
	end
end

function i3k_game_context:getFestivalLimitTask()
	return self._festivalTask
end

function i3k_game_context:clearFestivalTaskTimes()
	for k, v in pairs(self._festivalTask) do
		v.dayAccept = 0
	end
end

function i3k_game_context:startFestivalSeries(festivalId, index)
	if self._festivalTask and self._festivalTask[festivalId] then
		self._festivalTask[festivalId].dayAccept = 1
		self._festivalTask[festivalId].lastAcceptIndex = index
	else
		self._festivalTask[festivalId] = {festivalId = festivalId, dayAccept = 1, lastAcceptIndex = index}
	end
	self:addFestivalLimitTask(festivalId, {groupId = i3k_db_festival_cfg[festivalId].taskGroupId[index], index = 1, value = 0, state = 0})
end

function i3k_game_context:addFestivalAccept(festivalId)
	self._festivalTask[festivalId].dayAccept = 1
end

function i3k_game_context:addFestivalLimitTask(id, curTask)
	for k, v in pairs(self._festivalTask) do
		if v.festivalId == id then
			v.curTask = curTask
			return
		end
	end
end

function i3k_game_context:setFestivalTaskValue(groupID, value)
	local index
	for k, v in pairs(self._festivalTask) do
		if v.curTask and v.curTask.groupId == groupID then
			index = k
			break
		end
	end
	if index then
		self._festivalTask[index].curTask.value = value
	end
end

function i3k_game_context:getFestivalTaskValue(groupId, taskId)
	local taskInfo = {state = 0, value = 0}
	local cfg = i3k_db_festival_task[groupId][taskId]
	for k, v in pairs(self._festivalTask) do
		if v.festivalId == cfg.activityId and v.curTask and v.curTask.groupId == groupId then
			taskInfo.state = v.curTask.state
			taskInfo.value = v.curTask.value
			break
		end
	end
	return taskInfo
end

function i3k_game_context:getFestivalTaskAward(groupId, taskId)
	local cfg = i3k_db_festival_task[groupId][taskId]
	local all_items = {}
	local index = 0
	local awardItemID, awardItemCount
	for i = 1, 4 do
		local tmp_items = string.format("awardItem%s",i)
		local awardItemID = cfg[tmp_items]
		local tmp_count = string.format("awardItem%sCount",i)
		local awardItemCount = cfg[tmp_count]
		if awardItemID and awardItemID ~= 0 then
			if all_items[awardItemID] then
				all_items[awardItemID] = all_items[awardItemID] + awardItemCount
			else
				index = index+1
				all_items[awardItemID] = awardItemCount
			end
		end
	end
	if index < 4 and cfg.awardExp ~= 0 then
		all_items[g_BASE_ITEM_EXP] = cfg.awardExp
	end
	return all_items
end

function i3k_game_context:GetFestivalTaskDialogue(groupId, taskId)
	local items = g_i3k_game_context:getFestivalTaskAward(groupId, taskId)
	local t, motable = g_i3k_db.i3k_db_get_festival_task_get_desc(groupId, taskId)
	local cfg = i3k_db_festival_task[groupId][taskId]
	local tagDesc = g_i3k_db.i3k_db_get_task_desc(cfg.type, cfg.arg1, cfg.arg2, 0, false, nil)
	local callfunc = function()
		local data = self:getFestivalTaskValue(groupId, taskId)
		if data.state == 0 then
			if g_i3k_db.i3k_db_is_in_festival_task(cfg.activityId) then
				i3k_sbean.festival_task_accept(cfg.activityId, groupId, taskId)
			else
				g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(17806))
			end
		end
	end
	local fun = function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue3)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue3, t[last_index], items, tagDesc, motable[last_index], callfunc)
	end
	self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.get)
	if #t == 0 then
		callfunc()
	elseif #t == 1 then
		fun()
	elseif #t > 1 then
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, t, motable, fun)
	end
end

function i3k_game_context:updateFestivalTaskValue(task_type, target, mineIndex)
	local data = self:getFestivalLimitTask()
	local taskCfg = {}
	for k, v in pairs(data) do
		if v.curTask then
			local cfg = i3k_db_festival_task[v.curTask.groupId][v.curTask.index]
			if cfg.type == task_type then
				local is_true, is_finish, targetValue, shouldUpdateUI = self:updateCommonTaskValue(TASK_CATEGORY_FESTIVAL, task_type, cfg.arg1, cfg.arg2, v.curTask.value, target, mineIndex)
				table.insert(taskCfg, {isThis = is_true, isFinished = is_finish})
				if targetValue > v.curTask.value then
					self:LogTaskValue(TASK_CATEGORY_FESTIVAL, targetValue, v.curTask.index, v.curTask.groupId)
				end
				if shouldUpdateUI then
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateFestivalTask", v.curTask.groupId, v.curTask.index, is_finish)
				end
			end
		end
	end
	return taskCfg
end

function i3k_game_context:updateFestivalTaskResponce(index)
	local groupId, taskId = g_i3k_db.i3k_db_get_festival_task_real_id(index)
	local data = self:getFestivalTaskValue(groupId, taskId)
	local cfg = i3k_db_festival_task[groupId][taskId]
	local is_finish = self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, data.value)
	local npcID = cfg.finishTaskNpcID
	local getTalkNpcID = cfg.getTaskNpcID
	local arg1 = cfg.arg1
	if data.state == 0 and getTalkNpcID ~= 0 then
		local taskDesc = g_i3k_db.i3k_db_get_task_desc(cfg.type, cfg.arg1, cfg.arg2, data.value, is_finish, nil)
		g_i3k_game_context:GetFestivalTaskDialogue(groupId, taskId)
		return;
	end
	if cfg.type == g_TASK_USE_ITEM_AT_POINT and not is_finish then
		if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip)
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip, arg1, TASK_CATEGORY_FESTIVAL)
		end
	elseif cfg.type == g_TASK_COLLECT and not is_finish then
		self:TaskCollect(arg1)
	elseif cfg.type == g_TASK_TRANSFER  then
		local now_mapID =  g_i3k_game_context:GetWorldMapID()
		local targetMaps = g_i3k_db.i3k_db_get_all_npcs_map_id_by_funcId(TASK_FUNCTION_TRANSFER)
		local mapID, pos = g_i3k_db.i3k_db_find_nearest_map(now_mapID,targetMaps)
		npcID = g_i3k_db.i3k_db_get_npc_id_by_pos(mapID,pos)
		g_i3k_logic:SelectNPCByID(npcID)
		if is_finish then
			g_i3k_game_context:finishFestivalDialogue(groupId, taskId)
		end
	elseif cfg.type == g_TASK_USE_ITEM  and not is_finish then
		if self:GetCommonItemCanUseCount(arg1) >= cfg.arg2 then
			g_i3k_game_context:finishFestivalDialogue(groupId, taskId)
		elseif cfg.arg4 > 0 then
			self:SetAutoFight(true)
		end
	elseif cfg.type == g_TASK_SCENE_MINE and not is_finish then
		local _, mineId = g_i3k_db.i3k_db_get_scene_mineInfo(arg1, data.value)
		self:TaskCollect(mineId)
	else
		if is_finish then
			g_i3k_game_context:finishFestivalDialogue(groupId, taskId)
		end
	end
end

function i3k_game_context:finishFestivalDialogue(groupId, taskId)
	local t, motable = g_i3k_db.i3k_db_get_festival_task_finish_desc(groupId, taskId)
	local cfg = i3k_db_festival_task[groupId][taskId]
	local npcID = cfg.finishTaskNpcID
	local items = self:getFestivalTaskAward(groupId, taskId)
	local is_enough = self:IsBagEnough(items)
	if cfg.type == g_TASK_USE_ITEM then
		local data = self:getFestivalTaskValue(groupId, taskId)
		if data.value == 0 then
			self:taskSubItem(TASK_CATEGORY_FESTIVAL, cfg.arg1, cfg.arg2, g_i3k_db.i3k_db_get_festival_task_hash_id(groupId, taskId))
			return
		end
	end
	local callfunc = function()
		g_i3k_ui_mgr:CloseUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onUpdateBatterEquipShow")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "playTaskFinishEffect")
		self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.finish)
	end
	local func = (function()
		i3k_sbean.festival_task_finish(cfg.activityId, groupId, taskId, callfunc)
	end)
	local fun = (function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue4, t[last_index], func, is_enough, items, motable[last_index])
	end)
	if #t == 0 then
		i3k_sbean.festival_task_finish(cfg.activityId, groupId, taskId, callfunc)
	else
		if #t == 1 then
			fun()
		elseif #t > 1 then
			g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
			g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, t, motable, fun)
		end
	end
	if npcID ~= 0 then
		self:playNPCSound(npcID)
	end
end

--场景布置结束时恢复角色默认动作
function i3k_game_context:playPlayerStandAction()
	local roleID = self:GetRoleId()
	local world = i3k_game_get_world()
	if world then
		local entityPlayer = world:GetEntity(eET_Player, roleID)
		if entityPlayer then
			entityPlayer:Play(i3k_db_common.engine.defaultStandAction, -1)
		end
	end
end

--布置场景成功播放矿动作
function i3k_game_context:playSceneMineAction(taskPointId, index)
	local sceneMineCfg = i3k_db_scene_mine_cfg[taskPointId]
	local mineID = sceneMineCfg.mineIDs[index]
	local resourcepointID = i3k_db_resourcepoint_area[mineID].ResourcepointID

	local world = i3k_game_get_world()
	if world and resourcepointID then
		local mine = world:GetResourcePointFormCfgID(resourcepointID)
		if mine then
			mine:ShowTitleNode(false)
			mine:playDestroyAction()
			mine:StopMissionEffect()
		end
	end
end

--通知服务器节日限时任务完成
function i3k_game_context:tellSeverFestivalFinish(taskType, param1, param2, addValue)
	i3k_sbean.client_log_task(taskType, param1, param2, addValue)
	g_i3k_game_context:updateFestivalTaskValue(taskType, param1)
end

--节日限时任务npc头顶图片id
function i3k_game_context:getFestivalNpcHeadIcon(npcCfg, str)
	if table.keyof(npcCfg.FunctionID, TASK_FUNCTION_FESTIVAL_LIMIT) then
		local activityId = npcCfg.exchangeId[1]
		if g_i3k_db.i3k_db_is_in_festival_task(activityId) then
			if self._festivalTask and self._festivalTask[activityId] then
				local data = self._festivalTask[activityId]
				if (data.dayAccept == 0 and data.lastAcceptIndex < #i3k_db_festival_cfg[activityId].taskGroupId) or (data.curTask and data.curTask.index == 1 and data.curTask.state == 0) then
					return i3k_db_festival_task[data.lastAcceptIndex + 1][1][str]
				end
			else
				return i3k_db_festival_task[i3k_db_festival_cfg[activityId].taskGroupId[1]][1][str]
			end
		end
	end
end

--选中npcid
function i3k_game_context:SetSelectNpcId(id)
	self._selectNpcId = id
end

function i3k_game_context:GetSelectNpcId()
	return self._selectNpcId
end

--------星君入口-----------------------
function i3k_game_context:checkAnswerState()
	local iconShow, millionRed = self:GetMillionsAnswerState()
	local keJuOpen, red = g_i3k_game_context:GetKeJuOpenAndRed()
	local hegemony, hegemonyRed = g_i3k_game_context:GetFiveHegemonyState()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 11 , iconShow or keJuOpen or hegemony, red or hegemonyRed or millionRed)
end
function i3k_game_context:GetKeJuOpenAndRed()
	local openDay = g_i3k_db.i3k_db_get_open_answer_type() == g_ANSWER_TYPE_KEJU
	if not openDay then
		return false, false
	end
	local curtime = math.modf(i3k_game_get_time())
	local pushTime = g_i3k_get_day_time(i3k_db_answer_questions_activity.startTime) - i3k_db_answer_questions_activity.pushTime
	local openTime = g_i3k_get_day_time(i3k_db_answer_questions_activity.startTime)
	local time = i3k_db_answer_questions_activity.itemCount * i3k_db_answer_questions_activity.limitTime + openTime
	local showTime = time + i3k_db_answer_questions_activity.showTime
	local open, red = false, false
	if curtime >= pushTime and 	curtime <= showTime then
		open = true
		red = true
	end
	if g_i3k_game_context:GetIsExistOnlineGift() == 1  then
		--open = true
		red = false
	end
	if curtime >= openTime and curtime >= time and curtime < showTime then --答题结束
		open = true
		red = false
	end
	return open, red
end
--五绝争霸开始和红点
function i3k_game_context:GetFiveHegemonyState()
	local state = g_i3k_db.i3k_db_get_five_Contend_hegemony_state()
	local isOpen = state ~= g_FIVE_CONTEND_HEGEMONY_NONE
	local red  = state == g_FIVE_CONTEND_HEGEMONY_PRESELECTION
	return isOpen, red
end
--百万答题
function i3k_game_context:GetMillionsAnswerState()
	local open = g_i3k_db.i3k_db_get_millions_answer_is_show()
	return open, false
end
---------------------五绝争霸-------------------------------
--设置弹幕时间
function i3k_game_context:setHegemonyShootMsgSentTime(senTime)
	self._hegemony_shoot_msg_sentTime = senTime
end
function i3k_game_context:getHegemonyShootMsgSentTime()
	return self._hegemony_shoot_msg_sentTime or 0
end
--设置弹幕
function i3k_game_context:setHegemonyShootMsgData(id, data)
	self._hegemonyShootMsgId = id
	self._hegemonyShootMsgData = data
end
--更新弹幕
function i3k_game_context:getHegemonyShootMsgData()
	return self._hegemonyShootMsgData
end
--获取弹幕id
function i3k_game_context:getHegemonyShootMsgId()
	return self._hegemonyShootMsgId  or 0
end
--五绝争霸管理信息
function i3k_game_context:setFiveHegemonyManagerInfo(data)
	self._fiveHegemonyManagerInfo = data
	--self._fiveHegemonyInfo = data.roleInfo
end
function i3k_game_context:getFiveHegemonyManagerInfo()
	return self._fiveHegemonyManagerInfo
end

---------------------五绝争霸end----------------------------

--仓库快捷存取状态
function i3k_game_context:changeQuickStoreState()
	self._quickStore = not self._quickStore
end

function i3k_game_context:getQuickStoreState()
	return self._quickStore
end

---------------------骑战装备start--------------------------
function i3k_game_context:SetSteedEquipData(data)
	self._steedWearEquips = data.curClothes
	self._steedAllSuits = data.allSuits
end

--骑战装备数据
function i3k_game_context:GetSteedWearEquipsData()
	return self._steedWearEquips or {}
end

--穿戴骑战装备
function i3k_game_context:WearSteedEquip(newEquips)
	local oldEquips = self:GetSteedWearEquipsData()
	for partID, id in pairs(newEquips) do
		local oldEqiupID = oldEquips[partID]
		if oldEqiupID then
			oldEquips[partID] = nil
		end
		self:UseCommonItem(id, 1, "")
		oldEquips[partID] = id
	end
end

--脱下骑战装备
function i3k_game_context:UnwearSteedEquip(partID)
	local oldEquips = self:GetSteedWearEquipsData()
	oldEquips[partID] = nil
end

--骑战背包数据
function i3k_game_context:GetSteedBagEquipsData()
	local equips = {}
	local _, bagItems = self:GetBagInfo()
	for k, v in pairs(bagItems) do
		if g_i3k_db.i3k_db_get_common_item_type(k) == g_COMMON_ITEM_TYPE_HORSE_EQUIP then
			table.insert(equips, {id = k, count = v.count, order = g_i3k_db.i3k_db_get_bag_item_order(k)})
		end
	end
	table.sort(equips, function(a, b)
		return a.order < b.order
	end)
	return equips
end

--骑战套装数据
function i3k_game_context:GetSteedAllSuitsData()
	return self._steedAllSuits or {}
end

--激活套装
function i3k_game_context:UpdateSteedAllSuitsData(suitID)
	if self._steedAllSuits then
		self._steedAllSuits[suitID] = true
	end
end

function i3k_game_context:SetSteedForgeData(data)
	self._steedForge = data
end

function i3k_game_context:GetSteedForgeData()
	return self._steedForge
end

-- 增加熔炼值，并从新计算新的熔炉值
function i3k_game_context:AddSteedStoveValue(value)
	local curLevel = self._steedForge.lvl
	local curExp = self._steedForge.exp
	local cfg = g_i3k_db.i3k_db_get_steed_equip_stove_new_cfg(curLevel, curExp, value)
	self._steedForge = cfg
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SteedStove, "setBar")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_steedEquipMake, "setScrollSelect")
end

--骑战装备总属性
function i3k_game_context:GetSteedEquipTotalProps()
	local props = {}
	local equipProps = self:GetSteedWearEquipProps()
	local suitProps = self:GetSteedSuitProps()
	for k, v in pairs(equipProps) do
		props[k] = (props[k] or 0) + v
	end
	for k, v in pairs(suitProps) do
		props[k] = (props[k] or 0) + v
	end
	return props
end

--刷新骑战装备属性属性
function i3k_game_context:RefreshSteedEquipProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		g_i3k_game_context:SetPrePower()
		hero:UpdateHorseEquipProp()
		g_i3k_game_context:ShowPowerChange()
	end
end

--单个骑战装备战力
function i3k_game_context:GetOneSteedEquipPower(equipID)
	local props = self:GetOneSteedEquipBaseProps(equipID)
	return g_i3k_db.i3k_db_get_battle_power(props, true)
end

--单个骑战装备属性
function i3k_game_context:GetOneSteedEquipBaseProps(equipID)
	local property = {}
	local equipCfg = g_i3k_db.i3k_db_get_steed_equip_item_cfg(equipID)
	if equipCfg then
		for _, v in ipairs(equipCfg.props) do
			property[v.id] = (property[v.id] or 0) + v.count
		end
	end
	return property
end

--当前穿戴装备总属性
function i3k_game_context:GetSteedWearEquipProps()
	local props = {}
	local wEquip = self:GetSteedWearEquipsData()
	for _, equipID in pairs(wEquip) do
		local property = self:GetOneSteedEquipBaseProps(equipID)
		for id, count in pairs(property) do
			props[id] = (props[id] or 0) + count
		end
	end
	return props
end

--单个骑战套装属性
function i3k_game_context:GetOneSteedEquipSuitProps(suitID)
	local property = {}
	local suitCfg = i3k_db_steed_equip_suit[suitID]
	if suitCfg then
		for _, v in ipairs(suitCfg.props) do
			property[v.id] = (property[v.id] or 0) + v.count
		end
	end
	return property
end

--已激活套装属性
function i3k_game_context:GetSteedSuitProps()
	local props = {}
	local suitData = self:GetSteedAllSuitsData()
	for suitID in pairs(suitData) do
		--套装属性
		local property = self:GetOneSteedEquipSuitProps(suitID)
		for id, count in pairs(property) do
			props[id] = (props[id] or 0) + count
		end
		--套装装备属性
		local parts = i3k_db_steed_equip_suit[suitID].parts
		for _, equipID in ipairs(parts) do
			local property = self:GetOneSteedEquipBaseProps(equipID)
			for id, count in pairs(property) do
				props[id] = (props[id] or 0) + count
			end
		end
	end
	return props
end

--骑战装备总战力
function i3k_game_context:GetSteedEquipFightPower()
	--当前穿戴装备战力
	local wEquipProps = self:GetSteedWearEquipProps()
	local wEquipPower = g_i3k_db.i3k_db_get_battle_power(wEquipProps, true)
	--已激活套装战力
	local suitProps = self:GetSteedSuitProps()
	local suitPower = g_i3k_db.i3k_db_get_battle_power(suitProps, true)

	return wEquipPower + suitPower
end

--骑战套装所需装备总属性
function i3k_game_context:GetSteedSuitNeedEquipProps(suitID)
	local props = {}
	local suitEquip = i3k_db_steed_equip_suit[suitID].parts
	for _, equipID in pairs(suitEquip) do
		local property = self:GetOneSteedEquipBaseProps(equipID)
		for id, count in pairs(property) do
			props[id] = (props[id] or 0) + count
		end
	end

	local sortProps = {}
	for k, v in pairs(props) do
		table.insert(sortProps, {id = k, count = v})
	end
	table.sort(sortProps, function(a, b)
		return a.id < b.id
	end)
	return sortProps
end

--获得当前最优装备
function i3k_game_context:GetSteedBestEquipsInfo()
	local bagEquips = self:GetSteedBagEquipsData()
	local wEquip = self:GetSteedWearEquipsData()

	local bestEquip = {}
	local replace_count = 0

	for i = 1, g_STEED_EQUIP_PART_COUNT do
		local wPower = 0
		local equipID = wEquip[i]
		if equipID then
			wPower = math.modf(self:GetOneSteedEquipPower(equipID))
		end

		local canWearEquips = {}
		for _, v in ipairs(bagEquips) do
			local equipCfg = g_i3k_db.i3k_db_get_steed_equip_item_cfg(v.id)
			table.insert(canWearEquips, {id = v.id, partID = equipCfg.partID})
		end

		table.sort(canWearEquips, function(a, b)
			local powerA = math.modf(self:GetOneSteedEquipPower(a.id))
			local powerB = math.modf(self:GetOneSteedEquipPower(b.id))
			return powerA > powerB
		end)

		local ePower = 0
		local bagEquipID = 0
		for _, v in ipairs(canWearEquips) do
			if v.partID == i then
				bagEquipID = v.id
				ePower = math.modf(self:GetOneSteedEquipPower(v.id))
				break
			end
		end

		if ePower > wPower then
			bestEquip[i] = bagEquipID
			replace_count = replace_count + 1
		end
	end
	return bestEquip, replace_count
end

--骑战熔炼精华
function i3k_game_context:SetSteedForgeEnergy(energy)
	self._forgeEnergy = energy
end

function i3k_game_context:GetSteedForgeEnergy()
	return self._forgeEnergy
end
-- 这个不需要手动在协议里调用
function i3k_game_context:AddSteedForgeEnergy(count)
	self._forgeEnergy = self._forgeEnergy + count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SteedStove, "setBar")
end

function i3k_game_context:UseSteedForgeEnergy(count, reason)
	self._forgeEnergy = self._forgeEnergy - count
	DCItem.consume(g_BASE_ITEM_STEED_EQUIP_SPIRIT, "熔炼精华", count, reason)
end

function i3k_game_context:getSteedEquipRed()
	if g_i3k_game_context:getUseSteed() == 0 or g_i3k_game_context:getSteedFightShowCount() == 0 then
		return false
	end

	if self:GetLevel() >=  i3k_db_steed_equip_cfg.openLevel then
		local cfg = g_i3k_game_context:GetUserCfg();
		if cfg then
			local time = cfg:GetSteedEquipRed() - cfg:GetSteedEquipRed() % 86400;
			local timeNow = i3k_game_get_time() - i3k_game_get_time() % 86400;
			if time and timeNow - time   >= 86400 or time == 0 then
				return true;
			end
		end
	end

	return false;
end

function i3k_game_context:setDayFirstLoginSteedEquip(Value)
	if self:GetLevel() >=  i3k_db_steed_equip_cfg.openLevel then
		local cfg = g_i3k_game_context:GetUserCfg();
		if cfg then
			return cfg:SetSteedEquipRed(Value);
		end
	end
end

-- 骑战套装红点
function i3k_game_context:getSteedEquipSuitRed()
	return false
end
-- 熔炉红点
function i3k_game_context:getSteedEquipStoveRed()
	return false
end

-- 一键装备对此套装对应的所有装备，不包含已装备的
function i3k_game_context:getAllSteedEquipPerSuit(suitID)
	local needEquip = g_i3k_db.i3k_db_get_steed_equip_suit_need_equip(suitID)

	local bestEquip = {}
	local _, bagItems = self:GetBagInfo()
	local wEquip = self:GetSteedWearEquipsData()
	for partID, equipID in pairs(needEquip) do
		if wEquip[partID] then
			if wEquip[partID] ~= equipID and bagItems[equipID] then
				bestEquip[partID] = equipID
			end
		else
			if bagItems[equipID] then
				bestEquip[partID] = equipID
			end
		end
	end
	return bestEquip
end

-- 获取当前骑战装备数量  背包+装备
function i3k_game_context:getSteedEquipCount(equipID)
	local equipCount = 0
	local oldEquips = self:GetSteedWearEquipsData()
	for partID, id in pairs(oldEquips) do
		if id == equipID then
			equipCount = equipCount + 1
		end
	end
	local _, bagItems = self:GetBagInfo()
	local count = bagItems[equipID] and bagItems[equipID].count or 0
	return equipCount + count
end

function i3k_game_context:setSteedEquipMakeArgs(step, quality, part)
	self._steedEquipMakeArgs =
	{
		step = step,
		quality = quality,
		part = part,
	}
end
function i3k_game_context:getSteedEquipMakeArgs()
	return self._steedEquipMakeArgs
end

---------------------骑战装备end----------------------------
--灵签祈福 次数
function i3k_game_context:SetLingQianUseCount(useCnt)
	self._LingQianQiFuUseCount = useCnt
end
--获取次数
function i3k_game_context:GetLingQianUseCount(id)
	if self._LingQianQiFuUseCount then
		return self._LingQianQiFuUseCount[id] or 0
	else
		return 0
	end
end
--增加次数
function i3k_game_context:AddLingQianUseCount(id)
	self._LingQianQiFuUseCount[id] = self._LingQianQiFuUseCount[id] and self._LingQianQiFuUseCount[id] + 1 or 1
end

--神兵蚩尤破天斧特技
function i3k_game_context:getRoleWeaponManualSkillCoolLeftTime()
	local hero = i3k_game_get_player_hero()
	
	if hero then
		return hero:GetWeaponManualSkillCoolLeftTime()
	end
	
	return 0, 0
end

function i3k_game_context:getWeaponManualSkillIsCanUse()
	local time = i3k_game_get_time()
	return time >= self:getWeaponSpecialCollTime()
end

function i3k_game_context:setWeaponSpecialCollTime(time)
	self._weaponSpecialCollTime = time
end

function i3k_game_context:getWeaponSpecialCollTime()
	return self._weaponSpecialCollTime
end
--end
-----------账号渠道迁移弹窗-------------------
function i3k_game_context:startChannelMigrationTips()
	local channelIdTable = i3k_db_common.channelMigrationID
	
	local curChannelId = i3k_get_login_channel()
	local curUid = i3k_get_login_username()
	
	for _, id in ipairs(channelIdTable) do
		if curChannelId == id then
			if i3k_game_get_map_type() == g_FIELD then
				g_i3k_ui_mgr:OpenUI(eUIID_ChannelMigrationTips)
				g_i3k_ui_mgr:RefreshUI(eUIID_ChannelMigrationTips, curUid)
			end
			break
		end
	end
end

------------------end------------------------

--家园宠物数据
function i3k_game_context:updateHomePetData(id, data)
	if self:isInMyHomeLand() then
		if not self._homeLandData.homelandPetPositions then
			self._homeLandData.homelandPetPositions = {}
		end
		self._homeLandData.homelandPetPositions[id] = data
	else
		self._homeLandMapData.petPositions[id] = data
	end
end

function i3k_game_context:getCurHomePetData()
	if self:isInMyHomeLand() then
		return self._homeLandData.homelandPetPositions or {}
	else
		return self._homeLandMapData.petPositions
	end
end

function i3k_game_context:getHomePetData()
	return self._homeLandData.homelandPetPositions or {}
end

function i3k_game_context:getOtherPetActionTimes()
	return self._homeLandData.dayOtherAcionTimes or 0
end

function i3k_game_context:addOtherPetActionTimes()
	if self._homeLandData.dayOtherAcionTimes < i3k_db_home_pet.common.playOtherTimes then
		self._homeLandData.dayOtherAcionTimes = self._homeLandData.dayOtherAcionTimes + 1
	end
end

function i3k_game_context:addHomePetActTimes(id)
	if self:isInMyHomeLand() then
		if self._homeLandData.homelandPetPositions[id].daySelfActionTime < i3k_db_home_pet.common.masterPlayTimes then
			self._homeLandData.homelandPetPositions[id].daySelfActionTime = self._homeLandData.homelandPetPositions[id].daySelfActionTime + 1
		end
	else
		self:addOtherPetActionTimes()
	end
end

function i3k_game_context:addAllHomePetActTimes()
	for k, v in pairs(self._homeLandData.homelandPetPositions) do
		if v.curPet ~= 0 then
			if v.daySelfActionTime < i3k_db_home_pet.common.masterPlayTimes then
				v.daySelfActionTime = v.daySelfActionTime + 1
			end
		end
	end
end

function i3k_game_context:clearPetsActionTimes()
	if self._homeLandData and self._homeLandData.homelandPetPositions then
		for k, v in pairs(self._homeLandData.homelandPetPositions) do
			if v.curPet ~= 0 then
				v.daySelfActionTime = 0
			end
		end
	end
	if self._homeLandData and self._homeLandData.dayOtherAcionTimes then
		self._homeLandData.dayOtherAcionTimes = 0
	end
end

function i3k_game_context:getPetIsInHome(id)
	if self._homeLandData.homelandPetPositions then
		for k, v in pairs(self._homeLandData.homelandPetPositions) do
			if v.curPet == id then
				return true
			end
		end
	end
	return false
end

function i3k_game_context:isGetHomePetReward(location)
	if self:isInMyHomeLand() then
		local data = self._homeLandData.homelandPetPositions
		return data and data[location] and data[location].curPet ~= 0 and data[location].mood >= i3k_db_home_pet.common.petMaxMood
	end
end

function i3k_game_context:InitCameraShake()
	local cfg = self:GetUserCfg()
	local bValue = cfg:GetCameraShake()
	self._cameraShake = bValue
end

function i3k_game_context:SetCameraShake(bValue)
	local cfg = self:GetUserCfg()
	cfg:SetCameraShake(bValue)
	self._cameraShake = bValue
end

function i3k_game_context:GetCameraShake()
	return self._cameraShake
end
--刚完成随时副本任务返回大地图打开任务完成对话
function i3k_game_context:openTaskFinishDialogues()
	if self._openMainFinish then
		if self._openMainFinish.taskType == TASK_CATEGORY_MAIN then
			self:updateMainTaskResponse(TASK_CATEGORY_MAIN)
		elseif self._openMainFinish.taskType == TASK_CATEGORY_SUBLINE then
			self:updateSubLineTaskResponse(self._openMainFinish.groupId)
		end
		self:setOpenMainTaskFinishDialogue()
	end
end
function i3k_game_context:setOpenMainTaskFinishDialogue(data)
	self._openMainFinish = data
end
function i3k_game_context:getOpenMainTaskFinishDialogue()
	return self._openMainFinish
end
function i3k_game_context:OpenAtAnyMomentDialogue()
	local mapId = self:GetWorldMapID()
	local cfg = i3k_db_MapCopy_Dialogue[mapId]
	local monsterArea = g_i3k_game_context:GetDungeonSpawnID()
	if cfg then
		for m, n in ipairs(cfg) do
			if n.dialogueNode == math.abs(monsterArea) then
				local actionT = {}
				local dia = {}
				local moduleIds = {}
				for i = 1 , 6 do
					local tmp_dialog = string.format("dialogue%d", i)
					local keyName = string.format("diaModel%s",i)
					local action = string.format("action%s",i)
					local dialogId = n[tmp_dialog]
					if dialogId ~= 0 then
						local str = i3k_db_dialogue[dialogId]
						for k,v in ipairs(str) do
							table.insert(dia, v)
							table.insert(actionT, n[action])
							table.insert(moduleIds, n[keyName])
						end
					end
				end
				table.insert(dia, "")
				g_i3k_game_context:SetAutoFight(false)
				local callback = function ()
					g_i3k_game_context:SetAutoFight(true)
				end
				g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
				g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, dia, moduleIds, callback, nil, nil, nil, nil, nil, actionT)
			end
		end
	end
end

function i3k_game_context:setIsNeedLoading(state)
	self._loadingEffect = state
end

function i3k_game_context:getIsNeedLoading()
	return self._loadingEffect
end

function i3k_game_context:addDialogueFinish(index)
	self._dialogueFinish[index] = true
end

function i3k_game_context:getDialogueFinish(index)
	return self._dialogueFinish[index]
end

function i3k_game_context:cleanDialogueFinish()
	self._dialogueFinish = {}
end

--角色飞升
function i3k_game_context:setRoleFlyingData(data)
	self._roleFlying = data
end

function i3k_game_context:getRoleFlyingData()
	return self._roleFlying
end
function i3k_game_context:getFlyingLevel()
	return self._feisheng._level
end

function i3k_game_context:addFindFlyingPos(id)
	if self._roleFlying then
		for k, v in pairs(self._roleFlying) do
			if v.isOpen == 0 then
				if not v.roadMaps then
					self._roleFlying[k].roadMaps = {}
				end
				self._roleFlying[k].roadMaps[id] = true
			end
		end
	end
end

function i3k_game_context:isFindFlyingPos(id)
	if self._roleFlying then
		for k, v in pairs(self._roleFlying) do
			if v.isOpen == 0 then
				if not (v.roadMaps and v.roadMaps[id]) then
					return k
				end
			end
		end
	end
end

function i3k_game_context:addFinishFlyingPos(id)
	if self._roleFlying then
		for k, v in pairs(self._roleFlying) do
			if v.isOpen == 0 then
				if not v.finishMaps then
					self._roleFlying[k].finishMaps = {}
				end
				self._roleFlying[k].finishMaps[id] = true
			end
		end
	end
end

function i3k_game_context:isFinishFlyingPos(id)
	if self._roleFlying then
		for k, v in pairs(self._roleFlying) do
			if v.isOpen == 0 then
				if not (v.finishMaps and v.finishMaps[id]) then
					return k
				end
			end
		end
	end
end

function i3k_game_context:isNeedAddFlyingAI()
	if self._roleFlying then
		for k, v in pairs(self._roleFlying) do
			if v.isOpen ~= 1 then
				for i, j in ipairs(i3k_db_role_flying[k].flyPosId) do
					if not(v.finishMaps and v.finishMaps[j]) then
						if i3k_db_at_any_moment[j].mapId == g_i3k_game_context:GetWorldMapID() then
							return true
						end
					end
				end
			end
		end
	end
	return false
end

function i3k_game_context:setFootEffect(info)
	self._footEffects = info
end

function i3k_game_context:getFootEffect()
	return self._footEffects
end

function i3k_game_context:addFootEffect(id)
	if not self._footEffects then
		self._footEffects = {}
	end
	self._footEffects[id] = true
end

function i3k_game_context:setCurFootEffect(id)
	self._curFootEffect = id
end

function i3k_game_context:getCurFootEffect()
	return self._curFootEffect
end

-- 0为初始，1为神器，2为时装，3为飞升
function i3k_game_context:setCurWeaponShowType(curType)
	self._curWeaponType = curType % g_FLYING_OFFSET
end

function i3k_game_context:getCurWeaponShowType()
	return self._curWeaponType
end
-- 0为初始，2为时装，3为飞升
function i3k_game_context:setCurWearShowType(curType)
	self._curWearType = math.floor(curType / g_FLYING_OFFSET)
end
function i3k_game_context:getCurWearShowType()
	return self._curWearType
end
function i3k_game_context:updateCurWearShowType(showType)
	self._curWearType = showType
end

function i3k_game_context:wearEquipHandler(id, guid, pos, flyEquip)
	local haveWeaponBlessBefore, haveWeaponBlessAfter = false,false
	local equip = g_i3k_game_context:GetWearEquips()[pos].equip
	local hammerSkill = equip and equip.hammerSkill
	local haveReviseArgHammerSkill = false --是否有修改武器祝福参数的技能
	if hammerSkill and next(hammerSkill) then
		for k, v in pairs(hammerSkill) do
			local skillCfg = i3k_db_equip_temper_skill[k][v]
			if skillCfg.skillType == g_EQUIP_SKILL_TYPE_WEAPON_BLESS then
				haveWeaponBlessBefore = true
			elseif skillCfg.skillType == g_EQUIP_SKILL_TYPE_REVISE_WEAPON_BLESS_ARGUMENT then
				haveReviseArgHammerSkill = true
			end
		end
	end
	--如果脱掉了有修改武器祝福参数的技能要刷新武器祝福全属性的值
	if haveReviseArgHammerSkill then
		local hero = i3k_game_get_player_hero()
		hero:UpdateWeaponBlessProp()
	end
	--如果脱掉了未保存锤炼的装备 清空临时数据
	local partID = g_i3k_game_context:GetDefaultTemperSelectEquip()
	if partID ~= 0 and partID == pos then
		g_i3k_game_context:ClearTempEquipProps()
		g_i3k_game_context:ResetDefaultTemperSelectEquip()
	end
	g_i3k_game_context:SetPrePower()
	g_i3k_game_context:SetWearEquip(id, guid, pos, flyEquip)
	g_i3k_game_context:ShowPowerChange()
	g_i3k_game_context:LeadCheck()
	g_i3k_game_context:updatePlayerHeirloomShow()
	local equip = g_i3k_game_context:GetWearEquips()[pos].equip
	local hammerSkill = equip and equip.hammerSkill
	if hammerSkill and next(hammerSkill) then
		for k, v in pairs(hammerSkill) do
			local skillCfg = i3k_db_equip_temper_skill[k][v]
			if skillCfg.skillType == g_EQUIP_SKILL_TYPE_WEAPON_BLESS then
				haveWeaponBlessAfter = true
				break
			end
		end
	end
	if haveWeaponBlessBefore and not haveWeaponBlessAfter then --如果脱之前有武器祝福 脱下之后没有武器祝福 清空
		local hero = i3k_game_get_player_hero()
		hero:ClearWeaponBlessState()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updateRoleWeaponBless", g_i3k_game_context:GetActiveWeaponBlessID())
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updateRoleWeaponBlessEnergy", g_i3k_game_context:GetRoleWeaponBlessEnergy())
end

function i3k_game_context:isFinishFlyingTask(id)
	local flyData = g_i3k_game_context:getRoleFlyingData()
	if flyData and flyData[id] then
		return flyData[id].isOpen == 1
	end
	return false
end

--守护灵兽
--self.petGuard:		DBRolePetGuard
	--self.curPetGuard:		int32
	--self.isShow:		int32
	--self.activePetGuards:		map[int32, DBPetGuard]
		--self.id:		int32
		--self.lvl:		int32
		--self.exp:		int32
		--self.latents:		vector[int32]
function i3k_game_context:SetPetGuardInfo(info)
	self._petGuardInfo = info
end

function i3k_game_context:GetCurPetGuard()
	return self._petGuardInfo and self._petGuardInfo.curPetGuard or 0
end

function i3k_game_context:GetAllPetGuard()
	return self._petGuardInfo and self._petGuardInfo or 0
end
function i3k_game_context:SetCurPetGuard(id)
	if self._petGuardInfo then
		self._petGuardInfo.curPetGuard = id
	end
end

function i3k_game_context:GetPetGuardIsShow()
	return self._petGuardInfo and self._petGuardInfo.isShow == 0 or false
end

function i3k_game_context:SetPetGuardIsShow(isShow)
	self._petGuardInfo.isShow = isShow
end

function i3k_game_context:GetActivePetGuards()
	return self._petGuardInfo and self._petGuardInfo.activePetGuards or {}
end

function i3k_game_context:IsPetGuardActive(id)
	return self:GetActivePetGuards()[id] ~= nil
end

function i3k_game_context:GetPetGuardLevel(id)
	local active = self:GetActivePetGuards()[id]
	return active and active.lvl or 0
end

function i3k_game_context:SetPetGuardLevel(id, level)
	local active = self:GetActivePetGuards()[id]
	if active then
		active.lvl = level
	end
end

function i3k_game_context:GetPetGuardExp(id)
	local active = self:GetActivePetGuards()[id]
	return active and active.exp or 0
end

function i3k_game_context:SetPetGuardExp(id, exp)
	local active = self:GetActivePetGuards()[id]
	if active then
		active.exp = exp
	end
end

function i3k_game_context:GetPetGuardLatents(id)
	local active = self:GetActivePetGuards()[id]
	return active and active.latents
end

function i3k_game_context:UnlockPetGuardLatent(petGuardId, potentialId)
	local active = self:GetActivePetGuards()[petGuardId]
	if active then
		table.insert(active.latents, potentialId)
		local hero = i3k_game_get_player_hero()
		self:SetPrePower()
		hero:UpdatePetGuardProp()
		self:ShowPowerChange()
	end
end

function i3k_game_context:AddPetGuardExp(id, exp)
	local cfg = i3k_db_pet_guard_level[id]
	local exp = g_i3k_game_context:GetPetGuardExp(id) + exp
	local lvl = g_i3k_game_context:GetPetGuardLevel(id)
	local petMaxLvl = g_i3k_game_context:GetPetsMaxLevel()
	local finalLvl = lvl
	for i = lvl + 1, #cfg do
		if petMaxLvl >= cfg[i].maxLvl and exp >= cfg[i].needExp then
			finalLvl = i
			exp = exp - cfg[i].needExp
		end
	end
	self:SetPetGuardLevel(id, finalLvl)
	self:SetPetGuardExp(id, exp)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_PetGuard, "setShengJiNode")
	if finalLvl ~= lvl then
		self:SetPrePower()
		local hero = i3k_game_get_player_hero()
		hero:UpdatePetGuardProp()
		self:ShowPowerChange()
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PetGuard, "updateBattlePower")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PetGuard, "updateScrollInfo")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PetGuard, "updateRedPoint")
	end
end

function i3k_game_context:ActivePetGuard(id)
	self._petGuardInfo.activePetGuards[id] = {
		id = id,
		lvl = 1,
		exp = 0,
		latents = {},
	}
	self:SetPrePower()
	local hero = i3k_game_get_player_hero()
	hero:UpdatePetGuardProp()
	self:ShowPowerChange()
end

----------------图鉴begin---------------------
-- DBCardPacket(info)
--     ├── batch (int32)
--     ├── unlockCard (set[int32])
--     ├── unlockCardBack (set[int32])
--     └── curCardBack (int32)
function i3k_game_context:checkCardPacketOpen()
	local level = self:GetLevel()
	local expect = i3k_db_cardPacket.startLevel
	return level >= expect
end
function i3k_game_context:initCardPacketInfo()
	if not self._cardPacketInfo then
		self._cardPacketInfo =
		{
			unlockCard = {},
			unlockCardBack = {},
			curCardBack = 0,
		}
	end
end
function i3k_game_context:setCardPacketInfo(info)
	self._cardPacketInfo = info
end
function i3k_game_context:getCardPacketInfo()
	return self._cardPacketInfo
end
function i3k_game_context:getCurCardBack()
	self:initCardPacketInfo()
	return self._cardPacketInfo.curCardBack
end
-- 获取 卡/卡背 是否解锁
function i3k_game_context:getCardUnlock(id)
	local info = self._cardPacketInfo
	return info.unlockCard[id]
end
function i3k_game_context:getCardBackUnlock(id)
	if id == 0 then return true end -- 0 默认初始的
	local info = self._cardPacketInfo
	return info.unlockCardBack[id]
end
-- 解锁卡
function i3k_game_context:unlockCard(id)
	self:initCardPacketInfo()
	self._cardPacketInfo.unlockCard[id] = true
end
-- 解锁卡背
function i3k_game_context:unlockCardBack(id)
	self:initCardPacketInfo()
	self._cardPacketInfo.unlockCardBack[id] = true
end
-- 设置卡牌的id，其中id为配置的id，并不是数组的第几个，而是从0开始
function i3k_game_context:setCurCardBack(id)
	self._cardPacketInfo.curCardBack = id
end
function i3k_game_context:getCardPackUnlockCard()
	self:initCardPacketInfo()
	return self._cardPacketInfo.unlockCard
end
-- 根据当前解锁的卡牌，计算属性
function i3k_game_context:getCardPacketProps()
	local props = {} -- id = value
	for k, _ in pairs(self:getCardPackUnlockCard()) do
		local cfg = g_i3k_db.i3k_db_cardPacket_get_card_cfg(k)
		for i, e in ipairs(cfg.props) do
			if props[e.id] then
				props[e.id] = props[e.id] + e.count
			else
				props[e.id] = e.count
			end
		end
	end
	return props
end
function i3k_game_context:refreshCardPacketProps()
	g_i3k_game_context:SetPrePower()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateCardPacketProp()
	end
	g_i3k_game_context:ShowPowerChange()
end
-- 如果是消耗道具解锁，判断道具是否充足
function i3k_game_context:checkCardPacketCanUnlock(cfg)
	if self:getCardUnlock(cfg.id) then -- 已经解锁了
		return false
	end
	if cfg.type == g_CARD_PACKET.UNLOCK_TYPE_ITEM then
		local itemID = cfg.args[1]
		local itemCount = cfg.args[2]
		local have = self:GetCommonItemCanUseCount(itemID)
		return have >= itemCount
	end
	return false
end
-- id  数组的id
function i3k_game_context:checkCardPacketBackCanUnlock(id)
	local cfg = i3k_db_cardPacket_cardBack[id]
	if self:getCardBackUnlock(cfg.id) then
		return false
	end
	local needItems = i3k_db_cardPacket_cardBack[id].needItems
	local canUnlock = true
	for k, v in ipairs(needItems) do
		if g_i3k_game_context:GetCommonItemCanUseCount(v.id) < v.count then
			canUnlock = false
		end
	end
	return canUnlock
end
-- 获取卡背红点
function i3k_game_context:getCardPacketBackRed()
	local db = i3k_db_cardPacket_cardBack
	for k, v in ipairs(db) do
		local canUnlock = self:checkCardPacketBackCanUnlock(k)
		if canUnlock then
			return true
		end
	end
	return false
end
-- 获取一组卡的红点
function i3k_game_context:getCardPackeSheetRed(groupID)
	local cfg = i3k_db_cardPacket_card[groupID]
	if cfg then
	for k, v in pairs(cfg) do
		local singeCardRed = self:checkCardPacketCanUnlock(v)
		if singeCardRed then return true end
		end
	end
	return false
end
-- 获取所有卡片的红点
function i3k_game_context:getAllCardPacketRed()
	for k, v in pairs(i3k_db_cardPacket_card) do
		if self:getCardPackeSheetRed(k) then
			return true
		end
	end
	return false
end
-- 图鉴 总红点，卡牌和卡背
function i3k_game_context:getCardPacketRed()
	local cardsRed = self:getAllCardPacketRed()
	local backRed = self:getCardPacketBackRed()
	return cardsRed or backRed
end
-----------------图鉴end-----------------------------
---------周年舞会-------------
-- function i3k_game_context:onCheckHeroDancePos(pos)
-- 	local mapID = g_i3k_game_context:GetWorldMapID()
-- 	local cfg = i3k_db_dance_map[mapID]
-- 	if not cfg then
-- 		return
-- 	end

-- 	local delayTime = i3k_db_dance_stage.delayTime
-- 	if i3k_game_get_time() - self._danceUpdateTime > delayTime then
-- 		self._danceUpdateTime = i3k_game_get_time()
-- 		if g_i3k_db.i3k_db_check_in_dance_area(pos) then
-- 			-- 在舞台里了
-- 			g_i3k_ui_mgr:PopupTipMessage("in dance area")
-- 		end
-- 	end
-- end

-- 登陆同步
function i3k_game_context:setDanceExp(times, exps)
	self._danceActivity =
	{
		times = times,
		exps = exps,
	}
end

function i3k_game_context:resetDanceExp()
	self._danceActivity =
	{
		times = 0,
		exps = 0,
	}
end
function i3k_game_context:setDanceReward(exp, reward)
	if not self._danceActivity then
		self:resetDanceExp()
	end
	self._danceActivity.times = self._danceActivity.times + 1
	self._danceActivity.exps = self._danceActivity.exps + exp
	if reward then
		local items = {}
		for k, v in pairs(reward) do
			table.insert(items, {id = k, count = v})
		end
		if #items > 0 then
			g_i3k_ui_mgr:ShowGainItemInfo(items)
		end
	end
	if self._danceActivity.times == i3k_db_dance.base.maxExpTimes then
		g_i3k_ui_mgr:OpenUI(eUIID_DanceTip)
		g_i3k_ui_mgr:RefreshUI(eUIID_DanceTip, self._danceActivity.exps)
	end
end

------------------------------
--公主出嫁
function i3k_game_context:setPrincessMarryInfo(info)
	self._princessMarryInfo = info
	self._princessMarryInfo.processID = g_i3k_db.i3k_db_get_princess_marry_getGroupId()
end

function i3k_game_context:getPrincessMarryInfo()
	return self._princessMarryInfo
end

function i3k_game_context:addPrincessMarryScore(num)
	if self._princessMarryInfo then
		self._princessMarryInfo.score = self._princessMarryInfo.score + num
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PrincessMarryBattle, "refreshScoreText")

		if not g_i3k_ui_mgr:GetUI(eUIID_PrincessMarryAddScore) then
			g_i3k_ui_mgr:OpenUI(eUIID_PrincessMarryAddScore)
		end

		g_i3k_ui_mgr:RefreshUI(eUIID_PrincessMarryAddScore, num)
	end
end

function i3k_game_context:getdPrincessMarryScore()
	return self._princessMarryInfo and self._princessMarryInfo.score or 0
end

function i3k_game_context:setPrincessBlood(remain, max)
	if self._princessMarryInfo then
		self._princessMarryInfo.princessCurHP = remain
		self._princessMarryInfo.princessMaxHP = max
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PrincessMarryBattle, "updateBossBlood")
	end
end

function i3k_game_context:getPrincessBlood()
	if self._princessMarryInfo then
		return self._princessMarryInfo.princessCurHP, self._princessMarryInfo.princessMaxHP
	end

	return 0, 0
end

function i3k_game_context:synPrincessTaskValue(num)
	if self._princessMarryInfo then
		self._princessMarryInfo.taskValue = num
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PrincessMarryBattle, "refreshTaskValue")
	end
end

function i3k_game_context:getPrincessGather()
	return self._princessMarryInfo and self._princessMarryInfo.taskValue or 0
end

function i3k_game_context:refreshPrincessMarryStage(eventId)
	if self._princessMarryInfo then
		self._princessMarryInfo.eventID = eventId
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PrincessMarryBattle, "refreshTaskText")
	end
end

function i3k_game_context:invokePrincessMarryEvent()
	if not self._princessMarryInfo then return end
	local info = self._princessMarryInfo
	local cfg = g_i3k_db.i3k_db_get_princess_marry_eventConfig(info.processID, info.eventID)
	if not cfg then return end

	if cfg.effectId == g_PRINCESS_MARRY_EVENT_ANIMATION then
		i3k_game_play_scene_ani(cfg.eventArgs[1])
	elseif cfg.effectId == g_PRINCESS_MARRY_EVENT_DIALOGUE then
		g_i3k_ui_mgr:OpenUI(eUIID_PlotDialogue)
		g_i3k_ui_mgr:RefreshUI(eUIID_PlotDialogue, cfg.eventArgs)
	end
end

function i3k_game_context:getPrincessMarryStage()
	if self._princessMarryInfo then
		return self._princessMarryInfo.processID, self._princessMarryInfo.eventID
	end

	return 0, 0
end

function i3k_game_context:refreshPrincessMarryPosAndRotation(pos)
	if self._princessMarryInfo then
		self._princessMarryInfo.pos = pos
		local hero = i3k_game_get_player_hero()
		
		if hero then
			hero:setdynamicfindwayflag(true)
		end
		
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_PrincessMarryMap, "refreshPrincessMarryPos")
	end
end

function i3k_game_context:gotoPrincessPos()
	local pos = self:getPrincessMarryPosAndRotation()
	local mapId = g_i3k_game_context:GetWorldMapID()
	if not pos or not mapId then return end
	local newPos = i3k_getRandomPos(pos, i3k_db_princess_marry.targetRadius / 100)
	self:setPrincessMarryFindWayState(true)
	g_i3k_game_context:SeachPathWithMap(mapId, newPos)
end
 
function i3k_game_context:getPrincessMarryPosAndRotation()
	if self._princessMarryInfo and self._princessMarryInfo.pos then
		return i3k_vec3_to_engine(i3k_logic_pos_to_world_pos(self._princessMarryInfo.pos))
	end
end

function i3k_game_context:setPrincessMarrySignUpTimeInfo(info)
	self._princessMarrySignUpTimeInfo = info
end

function i3k_game_context:setPrincessMarrySignUpTime(time)
	self._princessMarrySignUpTimeInfo.signTime = time
end

function i3k_game_context:getPrincessMarrySignUpTime()
	return self._princessMarrySignUpTimeInfo and self._princessMarrySignUpTimeInfo.signTime or 0
end

function i3k_game_context:getPrincessMarrydayEnterTimes()
	return self._princessMarrySignUpTimeInfo and self._princessMarrySignUpTimeInfo.dayEnterTimes or 0
end

function i3k_game_context:addPrincessMarryEnterTimes(num)
	self._princessMarrySignUpTimeInfo.dayEnterTimes = self._princessMarrySignUpTimeInfo.dayEnterTimes + num
end

function i3k_game_context:setPrincessMarryFindWayState(value)
	if self._princessMarryInfo then
		self._princessMarryInfo.findway = value
	end
end

function i3k_game_context:getPrincessMarryFindWayState()
	if self._princessMarryInfo then
		return self._princessMarryInfo.findway
	end
end

--end

-- 周年庆活动 begin
function i3k_game_context:TestJubileeActivityState()
	local stageState = g_i3k_db.i3k_db_get_jubilee_stage()
	return self:GetJubileeActivityIconState(stageState), self:GetJubileeActivityRedPoint(stageState)
end

-- 活动入口icon显隐状态
function i3k_game_context:GetJubileeActivityIconState(stageState)
	local showState = stageState > g_JUBILEE_NOT_OPEN and stageState < g_JUBILEE_END
	return showState and self:GetLevel() >= i3k_db_jubilee_base.commonCfg.joinLevel
end

-- 活动入口红点
function i3k_game_context:GetJubileeActivityRedPoint(stageState)
	if self:GetLevel() < i3k_db_jubilee_base.commonCfg.joinLevel then
		return false
	end
	local condition1, condition2, condition3 = self:GetJubileeRedState(stageState)
	return condition1 or condition2 or condition3
end

function i3k_game_context:GetJubileeStep2TaskRedPoint()
	return self:GetJubileeStep2TaskState() == g_TASK_STATE_REWAEDED and not self:GetJubileeStep2TaskReward(g_JUBILEE_TASK_FINISH)
end
-- 阶段二宝箱状态
function i3k_game_context:SetJubileeStep2BoxState(state)
	self._jubileeActivityStep2BoxState = state
end
function i3k_game_context:GetJubileeStep2BoxState()
	return self._jubileeActivityStep2BoxState
end
function i3k_game_context:SetJubileeStep2Info(info)
	self._jubuleeActivityStep2BoxInfo = info
end
function i3k_game_context:GetJubileeStep2Info()
	return self._jubuleeActivityStep2BoxInfo
end
function i3k_game_context:GetJubileeRedState(stageState)
	local notReveiveStep1Award = self:GetJubileeStep1Reward() ~= 1
	local condition1 = self:GetJubileeStep1Activity() >= i3k_db_jubilee_base.stage1.needActivity and notReveiveStep1Award
	local condition2 = self:GetJubileeStep2TaskRedPoint() or self:GetJubileeStep2BoxState()
	local condition3 = false
	if stageState >= g_JUBILEE_COUNTDOWN_END and stageState <= g_JUBILEE_STAGE3 then
		local dayMineralTimes = self:GetubileeStep3MineralTimes()
		condition3 =  dayMineralTimes < i3k_db_jubilee_base.stage3.dayLimitTimes
	end
	return condition1, condition2, condition3
end

function i3k_game_context:checkJubileeActivityState()
	self:ontJubileeActivityStateChangeHandler(self:TestJubileeActivityState())
end

function i3k_game_context:ontJubileeActivityStateChangeHandler(showState, redState)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 33 , showState, redState)
end

-- 登录同步
function i3k_game_context:SetJubileeInfo(info)
	self._jubileeActivity = info
	self:UpdateJubileeTaskShow()
end

-- 更新任务周年庆任务显隐
function i3k_game_context:UpdateJubileeTaskShow()
	if self:GetJubileeStep2TaskID() ~= 0 and self:GetJubileeStep2TaskState() < g_TASK_STATE_REWAEDED then
		local stageState = g_i3k_db.i3k_db_get_jubilee_stage()
		if stageState == g_JUBILEE_STAGE2 then
			g_i3k_game_context:AddTaskToDataList(TASK_CATEGORY_JUBILEE)
		end
	end
end

function i3k_game_context:GetJubileeInfo()
	return self._jubileeActivity
end

-- 阶段1活跃度
function i3k_game_context:SetJubileeStep1Activity(activity)
	self._jubileeActivity.step1Activity = activity
end

function i3k_game_context:GetJubileeStep1Activity()
	return self._jubileeActivity and self._jubileeActivity.step1Activity or 0
end

-- 设置阶段1已领取状态
function i3k_game_context:SetJubileeStep1Reward(state)
	self._jubileeActivity.step1Reward = state
end

function i3k_game_context:GetJubileeStep1Reward()
	return self._jubileeActivity.step1Reward
end

-- 周年庆活动任务数据
function i3k_game_context:GetJubileeStep2Task()
	return self._jubileeActivity.step2Task
end

function i3k_game_context:SetJubileeStep2TaskID(taskID)
	self._jubileeActivity.step2Task.id = taskID
	self:UpdateJubileeTaskShow()
end

function i3k_game_context:GetJubileeStep2TaskID()
	return self._jubileeActivity.step2Task and self._jubileeActivity.step2Task.id or 0
end

function i3k_game_context:SetJubileeStep2TaskValue(value)
	self._jubileeActivity.step2Task.value = value
end

function i3k_game_context:GetJubileeStep2TaskValue()
	return self._jubileeActivity.step2Task and self._jubileeActivity.step2Task.value or 0
end

function i3k_game_context:SetJubileeStep2TaskState(state)
	self._jubileeActivity.step2Task.state = state
end

function i3k_game_context:GetJubileeStep2TaskState()
	return self._jubileeActivity.step2Task and self._jubileeActivity.step2Task.state or 0
end

-- 设置阶段2 任务已领取状态
function i3k_game_context:SetJubileeStep2TaskReward(taskType)
	if not self._jubileeActivity.step2Reward then
		self._jubileeActivity.step2Reward = {}
	end
	self._jubileeActivity.step2Reward[taskType] = true
end

function i3k_game_context:GetJubileeStep2TaskReward(taskType)
	return self._jubileeActivity.step2Reward[taskType]
end

function i3k_game_context:AddJubileeStep3MineralTimes()
	self._jubileeActivity.dayMineralTimes = self._jubileeActivity.dayMineralTimes + 1
end

function i3k_game_context:GetubileeStep3MineralTimes()
	return self._jubileeActivity.dayMineralTimes
end

function i3k_game_context:ResetubileeStep3MineralTimes()
	self._jubileeActivity.dayMineralTimes = 0
end

-- 周年庆任务 begin
function i3k_game_context:updateJubileeTaskResponce()
	local data = self:GetJubileeStep2Task()
	local taskId = data.id
	local cfg = g_i3k_db.i3k_db_get_jubilee_task_cfg(taskId)
	local is_finish = self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, data.value)
	local npcID = cfg.finishTaskNpcID
	local getTalkNpcID = cfg.getTaskNpcID
	local arg1 = cfg.arg1
	if data.state == 0 and getTalkNpcID ~= 0 then
		g_i3k_game_context:GetJubileeTaskDialogue()
		return
	end
	-- 任务类型 1 2 3 7 12 34
	if cfg.type == g_TASK_USE_ITEM_AT_POINT and not is_finish then
		if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip)
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip, arg1, TASK_CATEGORY_JUBILEE)
		end
	elseif cfg.type == g_TASK_COLLECT and not is_finish then
		self:TaskCollect(arg1)
	elseif cfg.type == g_TASK_USE_ITEM  and not is_finish then
		if self:GetCommonItemCanUseCount(arg1) >= cfg.arg2 then
			g_i3k_game_context:finishJubileeDialogue()
		elseif cfg.arg4 > 0 then
			self:SetAutoFight(true)
		end
	elseif cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		if is_finish then
			self:OpenFinishTaskDialogue(cfg, TASK_CATEGORY_JUBILEE)
		else
			self:OpenNewNpcDialogue(cfg, TASK_CATEGORY_JUBILEE, taskId)
		end
	elseif cfg.type == g_TASK_SCENE_MINE and not is_finish then
		local _, mineId = g_i3k_db.i3k_db_get_scene_mineInfo(arg1, data.value)
		self:TaskCollect(mineId)
	else
		if is_finish then
			g_i3k_game_context:finishJubileeDialogue()
		end
	end
end

function i3k_game_context:finishJubileeDialogue()
	local taskId = self:GetJubileeStep2TaskID()
	local t, motable = g_i3k_db.i3k_db_get_jubilee_task_finish_desc(taskId)
	local cfg = g_i3k_db.i3k_db_get_jubilee_task_cfg(taskId)
	local npcID = cfg.finishTaskNpcID
	local items = self:GetTaskAward(cfg)
	local is_enough = self:IsBagEnough(items)
	if cfg.type == g_TASK_USE_ITEM then
		local data = self:GetJubileeStep2Task()
		if data.value == 0 then
			self:taskSubItem(TASK_CATEGORY_JUBILEE, cfg.arg1, cfg.arg2, taskId)
			return
		end
	end
	local callfunc = function()
		g_i3k_ui_mgr:CloseUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "onUpdateBatterEquipShow")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "playTaskFinishEffect")
		self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.finish)
	end
	local func = (function()
		i3k_sbean.jubilee_activity_step2_task_finish(callfunc)
	end)
	local fun = (function()
		local last_index = #t
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue4)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue4, t[last_index], func, is_enough, items, motable[last_index])
	end)
	if #t == 0 then
		i3k_sbean.jubilee_activity_step2_task_finish(callfunc)
	else
		if #t == 1 then
			fun()
		elseif #t > 1 then
			g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
			g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, t, motable, fun)
		end
	end
	if npcID ~= 0 then
		self:playNPCSound(npcID)
	end
end

function i3k_game_context:GetJubileeTaskDialogue()
	local taskId = self:GetJubileeStep2TaskID()
	local cfg = g_i3k_db.i3k_db_get_jubilee_task_cfg(taskId)
	local t, motable = g_i3k_db.i3k_db_get_jubilee_task_get_desc(taskId)
	local callfunc = function()
		local data = self:GetJubileeStep2Task()
		if data.state == 0 then
			if g_i3k_db.i3k_db_get_jubilee_stage() == g_JUBILEE_STAGE2 then
				i3k_sbean.jubilee_activity_step2_task_take(taskId)
			else
				g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(17806))
			end
		end
	end
	local fun = function()
		local tagDesc = g_i3k_db.i3k_db_get_task_desc(cfg.type, cfg.arg1, cfg.arg2, 0, false, nil)
		local last_index = #t
		local items = g_i3k_game_context:GetTaskAward(cfg)
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue3)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue3, t[last_index], items, tagDesc, motable[last_index], callfunc)
	end
	self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.get)
	if #t == 0 then
		callfunc()
	elseif #t == 1 then
		fun()
	elseif #t > 1 then
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, t, motable, fun)
	end
end

function i3k_game_context:GetTaskAward(cfg)
	local all_items = {}
	local index = 0
	local awardItemID, awardItemCount
	for i = 1, 4 do
		local awardItemID = cfg["awardID"..i]
		local awardItemCount = cfg["awardCount"..i]
		if awardItemID and awardItemID ~= 0 then
			if all_items[awardItemID] then
				all_items[awardItemID] = all_items[awardItemID] + awardItemCount
			else
				index = index+1
				all_items[awardItemID] = awardItemCount
			end
		end
	end
	return all_items
end

function i3k_game_context:updateJubileeTaskValue(task_type, target, mineIndex)
	local data = self:GetJubileeStep2Task()
	if not data then
		return
	end
	local cfg = g_i3k_db.i3k_db_get_jubilee_task_cfg(data.id)
	if not cfg or cfg.type ~= task_type or data.state == 0 then
		return
	end
	local is_true, is_finish, targetValue, shouldUpdateUI = self:updateCommonTaskValue(TASK_CATEGORY_JUBILEE, task_type, cfg.arg1, cfg.arg2, data.value, target, mineIndex)
	if targetValue > data.value then
		self:LogTaskValue(TASK_CATEGORY_JUBILEE, targetValue)
	end
	if shouldUpdateUI then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateJubileeTask", is_finish)
	end
	return is_true, is_finish
end

-- TODO 先放到这里
function i3k_game_context:entityFindPath(entity, endPos, callBack, notRemove, fadedistance)
	--是否添加组件，标记是否删除组件或者npc
	if not entity or not endPos then
		return
	end

	local aiFlag = true
	local entityFlag = true
	local ai = entity._aiController._childs

	if ai[eAType_AUTO_MOVE] then
		aiFlag = false
	end

	if entity:GetEntityType() ~= eET_DisposableNPC or notRemove then
		entityFlag = false
	end

	if aiFlag then
		entity:AddAiComp(eAType_AUTO_MOVE)
	end

	if not ai[eAType_CHECK_ARRIVAL_TARGET] then
		entity:AddAiComp(eAType_CHECK_ARRIVAL_TARGET)
	end

	entity:setCallBack(endPos, callBack, entityFlag, aiFlag, fadedistance)
	--这里如果不穿fadedistance参数，就是默认的公用隐藏距离，效果是到距离后一边消失一边隐藏，如果想到地方在隐藏可以传g_MOVE_STOP_DISTANCE或自定义实现
end
-- 周年庆任务 end

-- 周年庆活动 end

--日常试炼 周常宝箱
function i3k_game_context:SetDailyActivityWeekRewardInfo(info)
	self._activityWeekRewardInfo = info
end

function i3k_game_context:GetDailyActivityWeekRewardInfo()
	return self._activityWeekRewardInfo or {weekTimes = 0, rewards = {}}
end

function i3k_game_context:GainDailyActivityReward(id)
	self._activityWeekRewardInfo.rewards[id] = true
end


--楚汉之争特殊头像
function i3k_game_context:SetChuHanFightIcon()
	local hero = i3k_game_get_player_hero();
	if hero then
		local name = g_i3k_game_context:GetRoleName()
		local id = g_i3k_db.i3k_db_chess_get_props_for_model(hero._forceType, hero._forceArm)
		if not id then return name, 0 end
		local martialFlag = i3k_db_chess_generals[id];
		return name, martialFlag.classImg
	end
end

--楚汉所有人信息
function i3k_game_context:SetChuHanFightAllRoleInfo(data)
	self._chuHanAllRoleInfo = data
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTeam, "updataHeadIcon")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Battle4v4, "updataHeadIcon")
end

function i3k_game_context:GetChuHanFightAllRoleInfo()
	return self._chuHanAllRoleInfo
end

--运镖抽奖信息
function i3k_game_context:SetFactionEscortLuckInfo(info)
	self._faction_escort_luck_draw = info
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEscortLuckDraw, "updateRobTimes")
end

--获取运镖抽奖次数
function i3k_game_context:GetFactionEscortLuckTimes()
	local count = 0
	local cfg = i3k_db_escort_luck_draw[g_FACTION_ESCORT_LUAK_ONE].escortTimes
	if self._faction_escort_luck_draw then
		for k, v in ipairs(cfg) do
			if v <= self._faction_escort_luck_draw.deliverTimes and not self._faction_escort_luck_draw.takedTimes[v] then
				count = count + 1
			end
		end
	end
	return  count
end

--获取运镖信息
function i3k_game_context:GetFactionEscortLuckInfo()
	return self._faction_escort_luck_draw
end

--添加运镖次数
function i3k_game_context:AddFactionEscortLuckTimes()
	if self._faction_escort_luck_draw then
		self._faction_escort_luck_draw.deliverTimes = self._faction_escort_luck_draw.deliverTimes + 1
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_FactionEscortLuckDraw, "updateRobTimes")
end

--减少运镖抽奖次数
function i3k_game_context:ReduceFactionEscortLuckTimes()
	if self._faction_escort_luck_draw and self._faction_escort_luck_draw.takedTimes  then
		local cfg = i3k_db_escort_luck_draw[g_FACTION_ESCORT_LUAK_ONE].escortTimes
		self._faction_escort_luck_draw.takedTimes[cfg[table.nums(self._faction_escort_luck_draw.takedTimes) + 1]] = true
	end
end

--获取当前队伍的平均等级
function i3k_game_context:GetTeamLevelAvg()
	local roomData = g_i3k_game_context:GetRoomData()
	local lvlSum = 0
	local count = 0
	for _,v in pairs(roomData) do
		lvlSum = lvlSum + v.lvl
		count = count + 1
	end
	return count == 0 and 0 or lvlSum / count
end
-- 获得是否经验满级
function i3k_game_context:getRoleExpFull()
	local level, exp = g_i3k_game_context:GetLevelExp()
	local outExp = g_i3k_game_context:GetOutExp()
	local value = 0
	if level + 1 <= #i3k_db_exp then
		value = i3k_db_exp[level+1].value
	else
		value = i3k_db_exp[level].value
	end

	local cfg = i3k_db_server_limit
	local isBreak = g_i3k_game_context:isSealBreak()

	if isBreak then
		if cfg.breakSealCfg.newSealLevel <= level then
			return exp + outExp >= value * cfg.multiple
		end
	else
		if cfg.sealLevel <= level then
			return exp + outExp >= value * cfg.multiple
		end
	end
end



			
			
			
			
	
--神机藏海start
--神机藏海报名信息
function i3k_game_context:setMagicMachineSignInfo(info)
	self._magicMachineInfo.signUpInfo = info
end
function i3k_game_context:getMagicMachineJoinTime()
	local info = self._magicMachineInfo.signUpInfo
	return info and info.signTime or 0
end
function i3k_game_context:checkMagicMachineInfo()
	if not self._magicMachineInfo.signUpInfo then
		self._magicMachineInfo.signUpInfo = {}
		self._magicMachineInfo.signUpInfo.dayEnterTimes = 0 
	end
	if not self._magicMachineInfo.battleInfo then
		self._magicMachineInfo.battleInfo = {}	
	end
end
function i3k_game_context:setMagicMachineSignUpTime(time)	
	self:checkMagicMachineInfo()
	self._magicMachineInfo.signUpInfo.signTime = time
end
function i3k_game_context:getmagicMachineEnterTimes()
	local info = self._magicMachineInfo.signUpInfo
	return info and info.dayEnterTimes or 0
end
function i3k_game_context:addMagicMachineEnterTimes(num)
	self:checkMagicMachineInfo()
	self._magicMachineInfo.signUpInfo.dayEnterTimes = self._magicMachineInfo.signUpInfo.dayEnterTimes + num
end
--神机藏海副本信息
function i3k_game_context:setMagicMachineBattleInfo(info)
	self:checkMagicMachineInfo()
	self._magicMachineInfo.battleInfo.scoreInfo = info.scoreInfo
	self._magicMachineInfo.battleInfo.npcDistance = info.npcDistance
	self._magicMachineInfo.battleInfo.route = info.route
	self._magicMachineInfo.battleInfo.npcStartTime = info.npcStartTime
end
function i3k_game_context:getMagicMachineScorInfo()
	local info = self._magicMachineInfo.battleInfo
	return info and info.scoreInfo
end
function i3k_game_context:refreshMagicMachineScore(score)
	self:checkMagicMachineInfo()
	self._magicMachineInfo.battleInfo.scoreInfo = score
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MagicMachineBattle, "refreshScoll")
end
--更新区域id
function i3k_game_context:refreshCurMagicMachineArena(arenaId)
	self:checkMagicMachineInfo()
	self._magicMachineInfo.battleInfo.arenaId = arenaId
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MagicMachineBattle, "refreshInfoTxt")
	local cfg = i3k_db_magic_machine_area[arenaId]
	if cfg and cfg.eventType == g_MAGIC_MACHINE_EVENT_MOVE and self._magicMachineInfo.battleInfo.npcDistance then
		self:creatMagicMachineNpcAndMove()
	end
end
function i3k_game_context:gethCurMagicMachineArena()
	local info = self._magicMachineInfo.battleInfo
	return info and info.arenaId or 0
end
function i3k_game_context:setMagicMachineNpcTimeAndRoute(info)
	self:checkMagicMachineInfo()
	self._magicMachineInfo.battleInfo.npcStartTime = i3k_game_get_time()--用来倒计时
	self._magicMachineInfo.battleInfo.route = info.route
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_MagicMachineBattle, "refreshMachineTime")
end
function i3k_game_context:getMagicMachineRouteId()
	local info = self._magicMachineInfo.battleInfo
	return info and info.route or 0
end
function i3k_game_context:gethMagicMachineInfo()
	return self._magicMachineInfo.battleInfo
end
function i3k_game_context:creatMagicMachineNpcAndMove(posIndex, routeId)
	local world = i3k_game_get_world()
	
	if world then
		world:CreateMagicMachineNPC(posIndex, routeId)
		
		if posIndex and routeId then
			self:notiFyMagicMachineNpcMove(posIndex, routeId, world)
		end
	end
end

function i3k_game_context:notiFyMagicMachineNpcMove(posIndex, routeId, worldArg)
	local world = worldArg or i3k_game_get_world()
	
	if world then
		world:notifyMagicMachineNPCStartMove(posIndex, routeId)
	end
end

function i3k_game_context:loadMagicMachinePahts(routePos, index)
	local world = i3k_game_get_world()
	
	if world then
		world:loadNpcPathEntityPoints(routePos, index)
	end
end

--神机藏海end


----------------------oppo----------------------------


--设置活动id
function i3k_game_context:SetOppoActivityId(id)
	--g_i3k_ui_mgr:PopupTipMessage(id)
	self._oppo_activity_id = id
end

--设置活动id
function i3k_game_context:GetOppoActivityId()
	return self._oppo_activity_id --and self._oppo_activity_id  or -1
end

--是否首次打开
function i3k_game_context:SetOpenOppoActivity()
	self._unfirst_open_oppo = true
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleEntrance, "RefreshItem", 34 , true, false)
end

function i3k_game_context:GetOpenOppoActivity()
	return self._unfirst_open_oppo
end



function i3k_game_context:TestOppoActivityState()
	local channelId = i3k_get_login_channel()
	local red = g_i3k_game_context:GetOpenOppoActivity()
	if channelId == string.format(g_OPPO_CHANNEL) and g_i3k_game_context:GetOppoActivityId() then
		return true, not red
	end
	return false
end

-- 是否是游戏中心打开
function i3k_game_context:SetIsOppoGameCenter(isGameCenter)
	self._is_oppo_game_center = isGameCenter
end

function i3k_game_context:GetIsOppoGameCenter()
	return self._is_oppo_game_center
end
------------------------oppo end------------------
-- 周年庆活动 begin

function i3k_game_context:getStrengthenSelfFirstListInfo()
	local res = {}
	--大类类别：我要变强为1，其他为2
	local isnotStrengthen = 2
	--有子类
	local hasChildren = 1 
	for i,v in ipairs(i3k_db_want_improve_classPage) do
		local children = nil
		if v.pageType == isnotStrengthen and v.hadChild == hasChildren then
			children = {}
			for i2,v2 in ipairs(i3k_db_want_improve_wantResources) do
				if v2.fatherType == v.id and v2.showLevel <= g_i3k_game_context:GetLevel() then
					local secondNodeData = nil
					if v2.outChannelID and (#v2.outChannelID > 1 or v2.outChannelID[1] ~= 0) then
						secondNodeData = v2.outChannelID
					end
					table.insert(children,{_title_name = v2.name,_groupID = v.pageType,_data = secondNodeData})
				end
			end
		end
		local firstNodeData = nil
		if v.outChannel and (#v.outChannel > 1 or v.outChannel[1] ~= 0) then
			firstNodeData = v.outChannel
		end
		local _info = {_title_name = v.pageName,_children = children,_groupID = v.pageType,_data = firstNodeData}
		table.insert(res,_info)
	end
	return res
end

function i3k_game_context:getStrengthenSelfSecondListInfo(recommendMission)
	local res = {}
	for k,v in ipairs(i3k_db_want_improve_strong) do
		local _info = {_title_name = v.typeName,_groupID = g_WANT_STRONG_DETAIL, _children = {}, _data = i3k_db_want_improve_strong[k]}
		for k2,v2 in pairs(i3k_db_want_improve_strongChild) do
			local isShowItem = v2.isHide == 0 or g_i3k_game_context:GetWantImproveProgress(k2) < 1
			if v2.fatherType == k and g_i3k_game_context:GetLevel() >= v2.unlockLevel and  isShowItem then
				table.insert(_info._children,{_title_name = v2.name,_groupID = v.pageType,_data = i3k_db_want_improve_strongChild[k2]})			
			end
		end
		if next(_info._children) then
			table.sort(_info._children,function (a,b)
				return a._data.sort < b._data.sort
			end)
			table.insert(res,_info)
		end
	end
	self:getRecommendMissionInfo(res,recommendMission)
	return res
end

function i3k_game_context:getRecommendMissionInfo(res,recommendMission)
	--推荐选项为二级weight
	local missionHierarchy = 2
	for i = #recommendMission,1,-1 do
		local missionData = i3k_db_want_improve_strongChild[recommendMission[i]]
		local progress = g_i3k_game_context:GetWantImproveProgress(recommendMission[i])
		if progress < 1 then
			local _info = {_title_name = missionData.name ,_data = missionData ,_hierarchy = missionHierarchy}
			table.insert(res,1,_info)
		end
	end
	return res
end

function i3k_game_context:getOtherSecondListInfo(args)
	local res = {}
	for k,v in ipairs(args) do
		if i3k_db_want_improve_outChannel[v].showLevel <= g_i3k_game_context:GetLevel() then
			local _info = {_title_name = i3k_db_want_improve_outChannel[v].name, _data = i3k_db_want_improve_outChannel[v]}
			table.insert(res,_info)
		end
	end
	return res
end

--计算单个技能能否升级。used_item中存放当前已经消耗的物品
function i3k_game_context:canSkillUpgrade(skillID,level,used_item)
	used_item = used_item or {}
	local role_all_skill_clone = i3k_clone(self:GetRoleSkills())
	for k,v in pairs(self:GetRoleUniqueSkills()) do
		role_all_skill_clone[k] = v
	end
	local _skill_data1 = i3k_db_skill_datas[skillID]
	if (not _skill_data1[level+1]) or _skill_data1[level+1].studyLvl > self:GetLevel() then
		return false, used_item
	end
	local needItemID = _skill_data1[level+1].needItemID
	local have_item = self:GetCommonItemCanUseCount(needItemID)
	local usedNeedItem = used_item[needItemID] or 0
	local canUseCoin = self:GetMoneyCanUse(false)
	local usedCoin = used_item[g_BASE_ITEM_COIN] or 0
	if canUseCoin >= _skill_data1[level+1].needCoin + usedCoin and have_item >= _skill_data1[level+1].needItemNum + usedNeedItem then
		used_item[g_BASE_ITEM_COIN] = usedCoin + _skill_data1[level+1].needCoin
		used_item[needItemID] = usedNeedItem + _skill_data1[level+1].needItemNum
		return true, used_item
	else
		return false, used_item
	end
end

function i3k_game_context:getAllSkillUpgradeList()
	--全部技能权重（去除装备技能与预设技能）
	local allSkillsSortNum = 10 ^ 7
	--预设技能权重（去除装备技能）
	local presetSkillsSortNum = 10 ^ 8
	--装备技能权重
	local equipSkillsSortNum = 10 ^ 9
	local skillMap = {}
	local allSkills, useSkills = self:GetRoleSkills()
	local allUniqueSkills, useUniqueSkill = self:GetRoleUniqueSkills()
	local function setSkillMap(skillID, weight)
		local info = g_i3k_game_context:GetRoleSkillsCfg(skillID) or g_i3k_game_context:GetRoleUniqueSkillsCfg(skillID)
		local sortID = skillID + weight
		skillMap[skillID] = {info = info, sortID = sortID}
	end
	local function keySkills(skills,widget)
		for skillID, _ in pairs(skills) do
			setSkillMap(skillID, widget)
		end
	end
	--全部技能
	keySkills(allSkills, allSkillsSortNum)
	--全部绝技
	keySkills(allUniqueSkills, allSkillsSortNum)
	local function valueSkills(skills,widget)
		for _, skillID in ipairs(skills) do
			if skillID ~= 0 then
				setSkillMap(skillID, widget)
			end
		end
	end
	for _, e in ipairs(self:getSkillPresetData()) do
		--预设技能
		valueSkills(e.skillPreset, presetSkillsSortNum)
		if e.uniqueSkill ~= 0 then
			--预设绝技
			setSkillMap(e.uniqueSkill, presetSkillsSortNum)
		end
	end
	--装备技能
	valueSkills(useSkills, equipSkillsSortNum)
	--装备绝技
	if useUniqueSkill ~= 0 then
		setSkillMap(useUniqueSkill, equipSkillsSortNum)
	end
	local skillList = {}
	for _, v in pairs(skillMap) do
		table.insert(skillList, {info = v.info, sortID = v.sortID})
	end
	table.sort(skillList, function (a,b)
		return a.sortID > b.sortID
	end)
	return skillList
end

--所有技能每个升一级，循环到没有技能可以升级为止，将升级结果放到result中
function i3k_game_context:upgradeAllSkill(skillsList)
	local canUpdate, used_item, result = false,{},{}
	local skillsList_clone = i3k_clone(skillsList)
	while #skillsList_clone > 0 do
		--不同类型（装备，预设，其他）权重为10倍，通过5倍确认当前遍历到的元素是否和第一个元素属于同一类型技能
		local widget = 5
		local firstID = 0
		local remove_list = {}
		if skillsList_clone[1].sortID then
			firstID = skillsList_clone[1].sortID / widget
		end
		for k,v in ipairs(skillsList_clone) do
			if not v.sortID or firstID < v.sortID then
				canUpdate,used_item = self:canSkillUpgrade(v.info.id,v.info.lvl,used_item)
				if canUpdate then
					result[v.info.id] = (result[v.info.id] or v.info.lvl) + 1
					v.info.lvl = v.info.lvl + 1
				else
					table.insert(remove_list,k)
				end
			end
		end
		for i = #remove_list, 1, -1 do
			table.remove(skillsList_clone, remove_list[i])
		end
	end
	return result, used_item
end

--会武周奖励---------------------------------------

function i3k_game_context:setTournamentWeekRewardInfo(info)
	self._tournament_week_reward_info = info
end


--会武周奖励
function i3k_game_context:getTournamentWeekRewardInfo()
	return self._tournament_week_reward_info 
end

--领取
function i3k_game_context:useTournamentWeekReward(info)
	if self._tournament_week_reward_info then
		for k, v in pairs(info) do
			self._tournament_week_reward_info.reward[k] = v
		end	
	end
end
--是否设置一键领取
function i3k_game_context:setShowAchievementRewardTips(state)
	self._is_show_achievement_tips_state = state
end
function i3k_game_context:getShowAchievementRewardTips()
	return self._is_show_achievement_tips_state
end

----------
function i3k_game_context:prepareFriendRecommendList(timeNow, flag)
	self:SetRecommendSendTime(timeNow)--时间戳
	self:SetRecommendList1(nil)
	i3k_sbean.recommendFriend(flag)
end
function i3k_game_context:redirectToAddFriend(flag)
	if flag then
		g_i3k_ui_mgr:OpenUI(eUIID_AddFriends)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_AddFriends,"updateMakefrData")
	else
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_Friends,"updateRecommendList")
	end
end
---家园保卫战
function i3k_game_context:SetHomeLandGuardMonsterCount(count)
	self._monsterCount = count
end
function i3k_game_context:GetHomeLandGuardMonsterCount()
	return self._monsterCount
end
function i3k_game_context:IsInHomeLandGuardMap()
	local mapId = g_i3k_game_context:GetWorldMapID()
	return  i3k_db_homeland_guard_base[mapId] and true or false
end
--设置副本相机角度(参数：副本地图类型)
function i3k_game_context:setFubenCameraAngle(mapType)
	local cfg = i3k_db_common.cameraFubenAngleSet[mapType]
	local hero = i3k_game_get_player_hero()
	local logic = i3k_game_get_logic()
	if logic then
		local camera = logic:GetMainCamera()
		if camera then
			camera:UpdateParam(cfg.cameraAngle, cfg.cameraDistance)
			hero:AttachCamera(camera)
		end
	end
end
--坐骑自动洗练功能(通用自动做某件事情)
function i3k_game_context:autoDoWork(count, time, autoType, txt, callBack)
	self._autoDo.count =  count
	self._autoDo.time =  time
	self._autoDo.autoType =  autoType
	self._autoDo.txt =  txt
	self._autoDo.callBack =  callBack
end
function i3k_game_context:stopDoWork()
	self._autoDo = {count = 0, time = 0, autoType = 0, callBack = nil}
	if g_i3k_ui_mgr:GetUI(eUIID_AutoDo) then 
		g_i3k_ui_mgr:CloseUI(eUIID_AutoDo)
	end
end
function i3k_game_context:subAutoCount(count)
	self._autoDo.count = self._autoDo.count - count
end
function i3k_game_context:getAutoCount()
	return self._autoDo.count or 0
end
function i3k_game_context:getAutoType()
	return self._autoDo.autoType or 0
end
function i3k_game_context:getAutoTime()
	return self._autoDo.time or 0
end
function i3k_game_context:getAutoCallBack()
	return self._autoDo.callBack
end
function i3k_game_context:getAutoTxt()
	return self._autoDo.txt or ""
end
function i3k_game_context:doWork()
	if self:getAutoCount() <= 0 or not self:getAutoCallBack() then
		self:stopDoWork()	
		return false
	end
	local reflectUI = 
	{
		[g_AUTO_STEED_REFINE] = eUIID_SteedPractice
	}
	local uiId = reflectUI[self:getAutoType()]
	if uiId and not g_i3k_ui_mgr:GetUI(uiId) then
		self:stopDoWork()
		return
	end
	if g_i3k_ui_mgr:GetUI(eUIID_AutoDo) then 
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_AutoDo, "revert")
	else
		g_i3k_logic:OpenAutoRefhineUI(true)
	end
	return true
end
--end

function i3k_game_context:setFiveElementsInfo(info)
	self._fiveElementsInfo = info or {}
end

function i3k_game_context:ResetFiveElementsInfo()
	self._fiveElementsInfo = self._fiveElementsInfo or {}
	self._fiveElementsInfo.orgIndex = 0
	self._fiveElementsInfo.finishedCnt = 0
	self._fiveElementsInfo.isUnLockLastMap = 0
	self._fiveElementsInfo.dayEnterTimes = 0
end

function i3k_game_context:getFiveElementsStartIndex()
	return self._fiveElementsInfo.orgIndex or 0
end

function i3k_game_context:setFiveElementsStartIndex(index)
	if self._fiveElementsInfo then
		self._fiveElementsInfo.orgIndex = index
	end
end

function i3k_game_context:getFiveElementsFinishCount()
	return self._fiveElementsInfo.finishedCnt or 0
end

function i3k_game_context:getFiveElementsUnlockFlag()
	return self._fiveElementsInfo.isUnLockLastMap or 0
end

function i3k_game_context:setFiveElementsUnlockFlag(flag)
	self._fiveElementsInfo.isUnLockLastMap = flag
end

function i3k_game_context:getFiveElementsEnterTimes()
	return self._fiveElementsInfo.dayEnterTimes or 0
end

function i3k_game_context:addFiveElementsEnterTimes()
	self._fiveElementsInfo.dayEnterTimes = self._fiveElementsInfo.dayEnterTimes + 1
end

function i3k_game_context:fiveElementsWin()
	self._fiveElementsInfo.dayEnterTimes = 0
	self._fiveElementsInfo.finishedCnt = self._fiveElementsInfo.finishedCnt + 1
end

function i3k_game_context:isFiveElementsSelectedOpening(currSelect, openIndex)
	local fullNum = 5
	local unFullNum = 4
	local unlockCount = self:getFiveElementsUnlockFlag() == 1 and fullNum or unFullNum
	local finishCount = self:getFiveElementsFinishCount()
	local flag = (openIndex == 0 or openIndex == currSelect) and self._fiveElementsInfo.dayEnterTimes < i3k_db_five_elements.enterTimes
	return finishCount ~= unlockCount and flag
end


------------------------------------------------


--获取坐骑总战力
function i3k_game_context:getAllSteedPower()
	local allPower = 0
	local allSteed = self:getAllSteedInfo()
	for i , v in pairs(allSteed) do
		allPower = allPower + self:getSteedFightPower(v)
	end
	local steedFightActPower = g_i3k_db.i3k_db_get_battle_power(self:getSteedFightActivateProp(), true)
	allPower = allPower + self:getSteedFightMastersPower() + self:getAllSteedSkinPower() + self:getSteedSpiritPower() + self:GetSteedEquipFightPower() + steedFightActPower
	return allPower
end

--获取宠物总战力
function i3k_game_context:getAllPetPower()
	local allPetPower = 0
	local all_pet = self:GetAllYongBing()
	for i,v in pairs(all_pet) do
		allPetPower = allPetPower + self:getBattlePower(v.id)
	end
	return allPetPower
end

--获取神兵总战力
function i3k_game_context:getAllWeaponPower()
	local allWeaponPower = self:getWeaponPower()
	allWeaponPower = allWeaponPower + self:getQilingPower()
	return allWeaponPower
end
function i3k_game_context:getWeaponPower()
	local allWeaponPower = 0
	local allShenbing  = self:GetShenbingData()--神兵总战力
	for k, v in pairs(allShenbing) do
		allWeaponPower = allWeaponPower + self:updateShenBingPower(v.id)
	end
	return allWeaponPower
end

--计算神兵战力
function i3k_game_context:updateShenBingPower(id)
	local data = self:getPropertyData(id)
	local propTb = {
		[ePropID_maxHP] = data.hp,
		[ePropID_atkW] = data.attack,
		[ePropID_defW] = data.defense,
		[ePropID_acrN] = data.crit,
		[ePropID_tou] = data.tou,
	}
	return g_i3k_db.i3k_db_get_battle_power(propTb)
end

-- 计算下器灵加的属性
function i3k_game_context:getQilingPower()
	local qiling = g_i3k_game_context:getActiveForeverProp()
	return g_i3k_db.i3k_db_get_battle_power(qiling)
end

--检查装备是否实现或开放了特定功能
--g_FACILITY_EQUIP_UPGRADE = 1
--g_FACILITY_EQUIP_ENHANCEMENT = 2
--g_FACILITY_GEM_NESTING = 3
--g_FACILITY_GEM_BLESSING = 4
function i3k_game_context:checkEquipFacility(equipPos, facility)
	local t = self:getEquipType(equipPos)
	if t == g_EQUIP_TYPE_GENERAL then
		return true
	elseif t == g_EQUIP_TYPE_FEISHENG then
		return self:hasFacility(facility)
	end
end

local function checkRange(v, l, r)
	return v >= l and v <= r
end

--判断该部位是否为飞升装备
function i3k_game_context:isFlyEquip(partId)
	return self:getEquipType(partId) == g_EQUIP_TYPE_FEISHENG
end
function i3k_game_context:getEquipType(equipPos)
	if checkRange(equipPos, eEquipWeapon, eEquipArmor) then
		return g_EQUIP_TYPE_GENERAL
	elseif checkRange(equipPos, eEquipFlying, eEquipFlyRing) then
		return g_EQUIP_TYPE_FEISHENG
	else
		error(string.format("Equip type %s not found or not implemented", equipPos))
	end
end
--结拜金兰
function i3k_game_context:syncData(cb, ...)
	local args = {...}
	i3k_sbean.sworn_sync(function(data, roledata)
		self:swornSync(data, roledata)
		if cb then cb(unpack(args)) end
	end)
end
function i3k_game_context:forwardSync(data, roledata)
	self:swornSync(data, roledata)
end
function i3k_game_context:swornSync(data, roledata)
	assert(data and roledata, "can't use sworn manager because player is not a sworn member")
	self._selfJinlanValue = data.swornValue
	self._jinlanCardID = data.id
	self._totalJinlanValue = data.swornValue
	self._mapTime = roledata.swornMapTime
	self._taskArchived = roledata.achievementReward
	self._achiPoint = roledata.achievementPoint
	self._swornSuperAurenaTimes = roledata.swornSuperAurenaTimes
	self._achiPointRewardArchived = roledata.achievementPointReward
	self._activityPoint = data.activity
	self._activityRewardArchived = roledata.dayReward
	self:updateAchievementTask()
end
function i3k_game_context:updateJinlanValueTask()
	local progress = {self._selfJinlanValue, self._mapTime, self._swornSuperAurenaTimes}
	for tp, tasks in pairs(i3k_db_sworn_task) do
		for _, v in ipairs(tasks) do
			if progress[tp] >= v.objective and not self._taskArchived[v.id] then
				self.push = true
				self.taskPush = true
				return true
				--rd:push(v)
			end
		end
	end
	return false
end
function i3k_game_context:updateJinlanAchievementTask()
	for k, v in ipairs(i3k_db_achi_point_reward) do
		if self._achiPoint >= v.objective and not self._achiPointRewardArchived[v.objective] then
			--rd:push(v)
			self.push = true
			self.taskPush = true
			return true
		end
	end
	return false
end
function i3k_game_context:updateActivityPoint()
	for i, v in ipairs(i3k_db_sworn_actRewards) do
		if not self._activityRewardArchived[v.actValue] then
			if v.actValue <= self._activityPoint then
				self.push = true
				return true
			end
		end
	end
	return false
end
--更新金兰任务
function i3k_game_context:updateAchievementTask()	
	self.push = false
	self.taskPush = false
	self:updateJinlanValueTask()
	self:updateJinlanAchievementTask()
	self:updateActivityPoint()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, 'updateSocialRedPoint')
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SwornModify, 'updateReddot')
end
--帮派合照
--获取帮派职位排序
function i3k_game_context:GetFactionMemberSortPosition()
	local chiefId = g_i3k_game_context:GetFactionChiefID()
	local tmp_members = nil
	if chiefId then
		tmp_members = self._faction_data.member_data.members
		if tmp_members then
			tmp_members = g_i3k_db.i3k_db_get_faction_photo_sort(tmp_members)
		else
			tmp_members = {}
		end
	else
		tmp_members = {}
	end
	return tmp_members
end
local function initLvl(self, lvl)
	assert(lvl > 0, "feisheng level can't less than 1")
	self._feisheng._level = lvl
	self._feisheng._cfg = i3k_db_role_flying[lvl]
	self._feisheng._maxRingMission = i3k_db_role_flying[lvl].ringMissionNum
	local nxtLvlCfg =  i3k_db_role_flying[lvl + 1]
	if nxtLvlCfg then
		self._feisheng._upgradeCfg = i3k_db_subline_task[nxtLvlCfg.upgradeMission][1]
	end
end
--获取飞升开放功能
--只影响飞升装备
function i3k_game_context:getFacility()
	local f = setmetatable({}, {__index = function() return false end})
	if self._feisheng._isFeisheng then
		for i = 2, self._feisheng._level do
			table.insert(f, i3k_db_role_flying[i].openFunctionality, true)
		end
	end
	return f
end
--检查飞升功能是否开放
function i3k_game_context:hasFacility(faciID)
	return self:getFacility()[faciID]
end
--飞升升级成功同步
function i3k_game_context:syncLvl(lvl)
	initLvl(self, lvl)
	self._feisheng._isFeisheng = true
	self._feisheng._upgraing = false
	self._feisheng._exp = self._feisheng._exp - self._feisheng._cfg.upgradeNeedExp
	if self._beginRingMissionPush and self._beginRingMissionPush > 0 then
		self:setFSRTaskInfo(self._beginRingMissionPush, 0, 1)
		self._beginRingMissionPush = 0
	end
end
--登陆时的同步
function i3k_game_context:syncWithData(data)
	self._feisheng._isFeisheng = data.soarings[1] and data.soarings[1].isOpen > 0
	if self._feisheng._isFeisheng then
		initLvl(self, data.mainSoaring.level)
		self._feisheng._exp = data.mainSoaring.exp
		self._feisheng._dailyFinished = data.mainSoaring.dayTaskNum
		local taskData = data.mainSoaring.task
		if taskData then
			--self:pushNewRingMission(taskData.id, taskData.value, taskData.state)
			self:setFSRTaskInfo(taskData.id, taskData.value, taskData.state)
		end
		for k, v in pairs(data.soarings) do
			if v.isOpen == 0 then
				self._feisheng._upgraing = true
			end
		end
	end
end
-- 飞升日完成次数
function i3k_game_context:addFeishengDailyTimes()
	self._feisheng._dailyFinished = self._feisheng._dailyFinished + 1
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateFSRTag")
end

function i3k_game_context:getFeishengDailyTimes()
	return self._feisheng._dailyFinished
end

function i3k_game_context:getFeishengMaxRingMissionNum()
	return self._feisheng._maxRingMission
end

--服务器清空当日环任务完成数量时调用
function i3k_game_context:ringMissionDayFinishNumRefresh()
	self._feisheng._dailyFinished = 0
	--self.onRingMissionDayFinishedRefresh(0)
	g_i3k_ui_mgr:RefreshUI(eUIID_BattleTask)
end

function i3k_game_context:getFSRTaskInfo()
	return self._FSRInfo
end

function i3k_game_context:setFSRTaskInfo(id, value, state)
	if id > 0 then
		self._FSRInfo = {id = id, value = value, state = state}
		self:addMissionToDataList(TASK_CATEGORY_RING, i3k_game_get_time())
		g_i3k_ui_mgr:RefreshUI(eUIID_BattleTask)
	end
end

function i3k_game_context:updateFSRTaskValue(taskType, value)
	if self._FSRInfo then
		local cfg = i3k_db_ring_mission[self._FSRInfo.id]
		local tt = cfg.type 
		local needUpdate = false
		if value ~= cfg.arg1 then
			return 
		end
		
		if tt == g_TASK_ANY_MOMENT_DUNGEON  then
			if self._FSRInfo.value == 0 then
				self._FSRInfo.value = 1
				needUpdate = true
			end
		elseif tt == g_TASK_KILL then
			local cur = self._FSRInfo.value
			if cur < cfg.arg2 then
				self._FSRInfo.value = cur + 1
				needUpdate = true
				if self._FSRInfo.value == cfg.arg2 then
					self:SetAutoFight(false)
				end
			end
		end
		if needUpdate then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateFSRTag")
		end
	end
end

function i3k_game_context:setAutoDelData(tp, autoDel)
	self.autoDel = self.autoDel or {}
	self.autoDel[tp] = autoDel
end

function i3k_game_context:getAutoDelState(tp)
	return self.autoDel and self.autoDel[tp] or false
end

function i3k_game_context:isHideOfflineFri()
	return self._hideOfflineFri
end

function i3k_game_context:setHideOfflineFri(hide)
	self._hideOfflineFri = hide
end

function i3k_game_context:getFeishengInfo()
	return self._feisheng
end

function i3k_game_context:getFlyingExp()
	return self._feisheng._exp or 0
end
function i3k_game_context:setFlyingExp(exp)
	self._feisheng._exp = exp
end
function i3k_game_context:getFlyingMaxExp()
	return self._feisheng._cfg.maxExp
end
function i3k_game_context:setFeishengExp(exp)
	local maxExp = self._feisheng._cfg.maxExp
	self._feisheng._exp = self._feisheng._exp + exp
	if self._feisheng._exp > maxExp then
		self._feisheng._exp = maxExp
	end
end
--获取飞升装备相关信息
function i3k_game_context:getFeishengWeaponData()
	--目前只有武器一个部位，宝石平均值除以槽位，目前固定3
	local num = 3
	--升级等级
	local upLevel = 0
	--强化等级
	local strengthLevel = 0
	--宝石平均等级
	local baoshiLvAvg = 0
	local baoshiLvSum = 0
	--祝福平均等级
	local gemBlessLvAvg = 0
	local gemSum = 0 
	local wEquips = g_i3k_game_context:GetWearEquips()
	local flyingLevel = g_i3k_game_context:getFlyingLevel()
	local offsetNum = flyingLevel - 5 < 0 and 0 or flyingLevel - 5
	for i = eEquipFlying, eEquipFlying + offsetNum do
		local weaponData = wEquips[i]
		upLevel = upLevel + weaponData.eqGrowLvl
		strengthLevel = strengthLevel+ weaponData.eqEvoLvl
		for i,v in ipairs(weaponData.slot) do
			if v ~= 0 then
				local cfg = g_i3k_db.i3k_db_get_gem_item_cfg(v)
				baoshiLvSum = baoshiLvSum + cfg.level
			end
		end
		if weaponData.gemBless then
			for k,v in pairs(weaponData.gemBless) do
				gemSum = gemSum + v
			end
		end
	end
	local equipsNum = offsetNum + 1
	local stoneNum = equipsNum * 3
	--baoshiLvAvg =  baoshiLvSum / fenMu
	--gemBlessLvAvg = gemSum / fenMu
	return upLevel / equipsNum, strengthLevel / equipsNum, baoshiLvAvg, gemBlessLvAvg
end
function i3k_game_context:getFeishengUpLvAvg()
	local data = self:getFeishengWeaponData()
	return data
end
function i3k_game_context:getFeishengQianghuaAvg()
	local _,data = self:getFeishengWeaponData()
	return data
end
function i3k_game_context:getFeishengBaoshiAvg()
	local _,_,data = self:getFeishengWeaponData()
	return data
end
function i3k_game_context:getFeishengZhufuAvg()
	local _,_,_,data = self:getFeishengWeaponData()
	return data
end
function i3k_game_context:getFlyingPromoteScore()
	local data, equip_offset = 0, 8
	local equipData = g_i3k_game_context:GetWearEquips()
	for i = 1, #i3k_db_want_improve_otherRules.flyingOffset do
		local equipInfo = equipData[i + equip_offset].equip
		if equipInfo then
			local equipCfg = g_i3k_db.i3k_db_get_equip_item_cfg(equipInfo.equip_id)
			local properties = type(equipCfg.ext_properties) == "table" and equipCfg.ext_properties or {}
			local propDB = {}
			for k, v in ipairs(properties) do
				if v.type == 1 then
					propDB[v.args] = (propDB[v.args] or 0) + equipInfo.attribute[k]
				end
			end
			local power = g_i3k_db.i3k_db_get_battle_power(propDB)
			data = data + power - i3k_db_want_improve_otherRules.flyingOffset[i]
		end
	end
	return data
end

---------------------------江湖侠探---------------
function i3k_game_context:setKnightlyDetectiveData(spy)
	self._spyData = spy
	self._spyMember = g_i3k_db.i3k_db_get_sort_detective_member(self._spyData.boss)
end

function i3k_game_context:getKnightlyDetectiveData()
	return self._spyData
end

function i3k_game_context:getKnightlyDetectiveMember()
	return self._spyMember
end

function i3k_game_context:isKnightlyDetectiveOpen()
	if i3k_get_activity_is_open(i3k_db_knightly_detective_common.actDay) then
		local openTime = string.split(i3k_db_knightly_detective_common.openTime, ":")
		local startTime = i3k_db_knightly_detective_common.openData + tonumber(openTime[1]) * 3600 + tonumber(openTime[2]) * 60 + tonumber(openTime[3])
		local closeTime = string.split(i3k_db_knightly_detective_common.closeTime, ":")
		local endTime = i3k_db_knightly_detective_common.closeData + tonumber(closeTime[1]) * 3600 + tonumber(closeTime[2]) * 60 + tonumber(closeTime[3])
		local timeStamp = i3k_game_get_time()
		if timeStamp >= startTime and timeStamp <= endTime then
			local dayOpenTime = string.split(i3k_db_knightly_detective_common.startTime, ":")
			local dayStartTime = tonumber(dayOpenTime[1]) * 3600 + tonumber(dayOpenTime[2]) * 60 + tonumber(dayOpenTime[3])
			local startStamp = g_i3k_get_day_time(dayStartTime)
			if timeStamp >= startStamp and timeStamp < startStamp + i3k_db_knightly_detective_common.lastTime then
				return startStamp + i3k_db_knightly_detective_common.lastTime - timeStamp
			end
		end
	end
end

function i3k_game_context:spyChasingSuccess(memberId)
	if self._spyData then
		self._spyData.chasingCnt = self._spyData.chasingCnt + 1
		self._spyData.curChasingMember = memberId
		g_i3k_game_context:removeTaskData(TASK_CATEGORY_DETECTIVE)
		g_i3k_game_context:AddTaskToDataList(TASK_CATEGORY_DETECTIVE, i3k_game_get_time())
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateTaskInfo")
		g_i3k_ui_mgr:CloseUI(eUIID_KnightlyDetectiveMember)
		--g_i3k_ui_mgr:InvokeUIFunction(eUIID_KnightlyDetectiveMember, "changeMemberData")
		self:ChangeScheduleActivity(g_SCHEDULE_TYPE_DETECTIVE, 0)
	end
end

function i3k_game_context:spySurveySuccess(memberId)
	if self._spyData then
		if not self._spyData.surveyMembers then
			self._spyData.surveyMembers = {}
		end
		table.insert(self._spyData.surveyMembers, memberId)
		--g_i3k_ui_mgr:RefreshUI(eUIID_KnightlyDetectiveMember)
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_KnightlyDetectiveMember, "changeMemberData")
		self:ChangeScheduleActivity(g_SCHEDULE_TYPE_DETECTIVE, 0)
	end
end

function i3k_game_context:spyExposeBoss(isSuccess)
	if self._spyData then
		self._spyData.findingBossCnt = self._spyData.findingBossCnt + 1
		if isSuccess then
			self._spyData.chasingBoss = g_DETECTIVE_NOT_FIND
			self._spyData.bossFond = g_DETECTIVE_EXPOSED
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateDetectiveTaskTag")
		else
			g_i3k_game_context:removeTaskData(TASK_CATEGORY_DETECTIVE)
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateTaskInfo")
		end
	end
	g_i3k_ui_mgr:OpenUI(eUIID_KnightlyDetectiveAnimate)
	g_i3k_ui_mgr:RefreshUI(eUIID_KnightlyDetectiveAnimate, isSuccess)
	--g_i3k_ui_mgr:CloseUI(eUIID_KnightlyDetectiveLeader)
	g_i3k_ui_mgr:RefreshUI(eUIID_KnightlyDetectiveMember)
end

function i3k_game_context:spyChasingBoss()
	if self._spyData then
		self._spyData.chasingBoss = g_DETECTIVE_CHANSING
		self._spyData.chasingCnt = self._spyData.chasingCnt + 1
		g_i3k_game_context:removeTaskData(TASK_CATEGORY_DETECTIVE)
		g_i3k_game_context:AddTaskToDataList(TASK_CATEGORY_DETECTIVE, i3k_game_get_time())
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateTaskInfo")
	end
	g_i3k_ui_mgr:CloseUI(eUIID_KnightlyDetectiveMember)
end

--获取江湖侠探任务id，第一个返回值为任务id，返回0为可追击，返回-1为不显示任务，第二个返回值表示是否是成员
function i3k_game_context:getKnightlyDetectiveTaskId()
	if self._spyData then
		if self._spyData.curChasingMember ~= 0 then
			return i3k_db_knightly_detective_members[self._spyData.curChasingMember].taskId, true
		else
			if self._spyData.chasingCnt > 0 then
				if self._spyData.chasingCnt < i3k_db_knightly_detective_common.receiveTimes + 1 then
					if self._spyData.chasingCnt == i3k_db_knightly_detective_common.receiveTimes then
						if self._spyData.bossFond == g_DETECTIVE_NOT_EXPOSE and self._spyData.findingBossCnt > 0 then
							return -1
						else
							return 0, false
						end
					else
						return 0, true
					end
				elseif self._spyData.chasingCnt == i3k_db_knightly_detective_common.receiveTimes + 1 then
					if self._spyData.chasingBoss == g_DETECTIVE_NOT_FIND then
						return 0, false
					elseif self._spyData.chasingBoss == g_DETECTIVE_CHANSING then
						return i3k_db_knightly_detective_ringleader[self._spyData.boss].taskId, false
					end
				end
			end
		end
	end
	return -1
end

function i3k_game_context:finishKnightlyDetectiveTask(mapId)
	local taskId, isMember = self:getKnightlyDetectiveTaskId()
	if taskId > 0 then
		local taskCfg = g_i3k_db.i3k_db_get_knightly_detective_task_cfg(taskId)
		if taskCfg.type == g_TASK_ANY_MOMENT_DUNGEON and taskCfg.arg1 == mapId then
			--成员和boss的结构是不一样的
			if isMember then
				local clueType = i3k_db_knightly_detective_members[self._spyData.curChasingMember].clueType
				if clueType ~= 0 then
					g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(18201, clueType))
				end
				if not self._spyData.finishedMembers then
					self._spyData.finishedMembers = {}
				end
				table.insert(self._spyData.finishedMembers, self._spyData.curChasingMember)
				self._spyData.curChasingMember = 0
				self._spyData.chasingSuccessCnt = self._spyData.chasingSuccessCnt + 1
			else
				self._spyData.chasingBoss = g_DETECTIVE_DEAD
				--击杀头目之后返回大地图要弹活动界面
				self:setDetectiveState(true)
			end
			--g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateDetectiveTask")
		end
	end
end

function i3k_game_context:setDetectiveState(state)
	self._spyFinish = state
end

function i3k_game_context:getDetectiveState()
	return self._spyFinish
end

function i3k_game_context:updateDetectiveTaskResponce()
	local taskId, isMember = self:getKnightlyDetectiveTaskId()
	if taskId > 0 then
		local taskCfg = g_i3k_db.i3k_db_get_knightly_detective_task_cfg(taskId)
		if taskCfg.type == g_TASK_ANY_MOMENT_DUNGEON then
			if g_i3k_game_context:IsInRoom() then
				g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(142))
				return
			end
			local func = function ()
			g_i3k_game_context:ClearFindWayStatus()
			g_i3k_game_context:setIsNeedLoading(i3k_db_at_any_moment[taskCfg.arg1].effects)
			i3k_sbean.anywhere_map_enter(TASK_CATEGORY_DETECTIVE, 0, taskId)
			end
			g_i3k_game_context:CheckMulHorse(func)
		end
	end
end
function i3k_game_context:updateFashionTypeID(skinDisplay)
	local hero = i3k_game_get_player_hero()
	hero._soaringDisplay.skinDisplay = skinDisplay
end
function i3k_game_context:isFlyingSharpenHaveRedPoint()
	local equip_num, equip_offset = 6, 8
	local equipData = g_i3k_game_context:GetWearEquips()
	for i = 1, equip_num do
		local equipInfo = equipData[i + equip_offset].equip
		if equipInfo then
			local consume = g_i3k_db.i3k_db_get_equip_sharpen_need_items(i + equip_offset, 0)
			local isNeedItemEnough = true
			for k, v in pairs(consume) do
				if v.count > g_i3k_game_context:GetCommonItemCanUseCount(v.id) then
					isNeedItemEnough = false
					break
				end
			end
			local isSharpenMax = true
			local props = g_i3k_db.i3k_db_get_equip_item_cfg(equipInfo.equip_id)
			for k, v in pairs(props.ext_properties) do
				if v.type == 1 and not g_i3k_db.i3k_db_is_equip_ext_prop_sharpen_max(equipInfo.equip_id, k,  equipInfo.attribute[k]) then
					isSharpenMax = false
					break
				end
			end
			if isNeedItemEnough and not isSharpenMax then
				return true
			end
		end
	end
	return false
end
function i3k_game_context:isFlyingTransHaveRedPoint()
	local equip_num, equip_offset = 6, 8
	local equipData = g_i3k_game_context:GetWearEquips()
	for i = 1, equip_num do
		local equipInfo = equipData[i + equip_offset].equip
		if equipInfo then
			local consume = g_i3k_db.i3k_db_get_equip_trans_need_items(i3k_db_feisheng_misc.jingduanTransGroup, equipInfo.equip_id)
			local isNeedItemEnough = true
			for k, v in pairs(consume) do
				if v > g_i3k_game_context:GetCommonItemCanUseCount(k) then
					isNeedItemEnough = false
					break
				end
			end
			local isSharpenMax = true
			local props = g_i3k_db.i3k_db_get_equip_item_cfg(equipInfo.equip_id)
			for k, v in pairs(props.ext_properties) do
				if v.type == 1 and not g_i3k_db.i3k_db_is_equip_ext_prop_sharpen_max(equipInfo.equip_id, k,  equipInfo.attribute[k]) then
					isSharpenMax = false
					break
				end
			end
			local flyingLevel = g_i3k_game_context:getFlyingLevel()
			local transLevel = i3k_db_role_flying[flyingLevel].jingduanLevel
			if isNeedItemEnough and isSharpenMax and transLevel > i3k_db_equips[equipInfo.equip_id].flyingLevel then
				return true
			end
		end
	end
	return false
end
function i3k_game_context:isFlyingEquipSharpenMax(equipInfo)
	local props = g_i3k_db.i3k_db_get_equip_item_cfg(equipInfo.equip_id)
	for k, v in pairs(props.ext_properties) do
		if v.type == 1 and not g_i3k_db.i3k_db_is_equip_ext_prop_sharpen_max(equipInfo.equip_id, k, equipInfo.attribute[k]) then
			return false
		end
	end
	return true
end
------------------大侠朋友圈--------------------
function i3k_game_context:setSwordsmanCircleData(info)
	self._swordsmanCircle = info
end
function i3k_game_context:getSwordsmanCircleData()
	return self._swordsmanCircle
end
function i3k_game_context:setSwordsmanCircleTask(id, value, state)
	if self._swordsmanCircle then
		self._swordsmanCircle.curTaskId = id
		self._swordsmanCircle.curValue = value
		self._swordsmanCircle.taskStatus = state
	end
end
function i3k_game_context:setSwordsmanCircleTaskValue(value)
	if self._swordsmanCircle then
		self._swordsmanCircle.curValue = value
	end
end
function i3k_game_context:getSwordsmanCircleTask()
	if self._swordsmanCircle then
		return self._swordsmanCircle.curTaskId, self._swordsmanCircle.curValue, self._swordsmanCircle.taskStatus
	end
end
function i3k_game_context:addSwordsmanCircleTaskBuy(count)
	if self._swordsmanCircle and self._swordsmanCircle.dayBuyTaskCnt then
		self._swordsmanCircle.dayBuyTaskCnt = self._swordsmanCircle.dayBuyTaskCnt + count
	end
end
function i3k_game_context:addSwordsmanTaskFinish(taskId)
	if self._swordsmanCircle then
		if self._swordsmanCircle.dayFinishCnt then
			self._swordsmanCircle.dayFinishCnt = self._swordsmanCircle.dayFinishCnt + 1
		end
		if self._swordsmanCircle.dayFinishTasks then
			table.insert(self._swordsmanCircle.dayFinishTasks, taskId)
		end
		--计算情义值的暂时没用到，用的是服务器传过来的值
		local cfg = i3k_db_swordsman_circle_tasks[taskId]
		if self._swordsmanCircle.friendshipExp then
			if self._swordsmanCircle.friendshipLvl + 1 > #i3k_db_swordsman_circle_reward then
			else
				self._swordsmanCircle.friendshipExp = self._swordsmanCircle.friendshipExp + cfg.friendShip
				if self._swordsmanCircle.friendshipExp >= i3k_db_swordsman_circle_reward[self._swordsmanCircle.friendshipLvl + 1].needFriendShip then
					self._swordsmanCircle.friendshipLvl = self._swordsmanCircle.friendshipLvl + 1
					if self._swordsmanCircle.friendshipLvl == #i3k_db_swordsman_circle_reward then
						self._swordsmanCircle.friendshipExp = 0
					else
						self._swordsmanCircle.friendshipExp = self._swordsmanCircle.friendshipExp - i3k_db_swordsman_circle_reward[self._swordsmanCircle.friendshipLvl].needFriendShip
					end
				end
			end
		end
		--完成如果还有剩余次数则跳转去接任务
		if self._swordsmanCircle.dayFinishCnt < self._swordsmanCircle.dayBuyTaskCnt + i3k_db_swordsman_circle_cfg.freeTaskCount then
			local callback = function(isOk)
				if isOk then
					g_i3k_logic:OpenSwordsmanCircle()
				end
			end
			g_i3k_ui_mgr:ShowMessageBox2(i3k_get_string(18344), callback)
		end
	end
end
function i3k_game_context:updateSwordsmanTaskValue(task_type, target, mineIndex)
	local data = self:getSwordsmanCircleData()
	if not data or not data.curTaskId or data.taskStatus == 0 or data.curTaskId == 0 then
		return
	end
	local cfg = i3k_db_swordsman_circle_tasks[data.curTaskId]
	if cfg.type ~= task_type then
		return
	end
	local is_true, is_finish, targetValue, shouldUpdateUI
		= self:updateCommonTaskValue(TASK_CATEGORY_SWORDSMAN, task_type, cfg.arg1, cfg.arg2, data.curValue, target, mineIndex)
	if targetValue > data.curValue then
		self:LogTaskValue(TASK_CATEGORY_SWORDSMAN, targetValue)
	end
	if shouldUpdateUI then
		if is_finish and (cfg.type == g_TASK_SHAPESHIFTING or cfg.type == g_TASK_KILL or cfg.type == g_TASK_CONVOY) then
			self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.doing)
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "udpateSwordsmanTask", is_finish)
	end
	return is_true, is_finish
end
function i3k_game_context:updateSwordsmanTaskResponse()
	local data = self:getSwordsmanCircleData()
	if not data or not data.curTaskId or data.curTaskId == 0 then
		return
	end
	local cfg = i3k_db_swordsman_circle_tasks[data.curTaskId]
	if cfg.getTaskNpcID ~= 0 and data.taskStatus == 0 then
		g_i3k_game_context:OpenGetTaskDialogue(cfg, TASK_CATEGORY_SWORDSMAN)
		return
	end
	local is_finish = self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, data.curValue)
	if is_finish then
		self:OpenFinishTaskDialogue(cfg, TASK_CATEGORY_SWORDSMAN)
	elseif cfg.type == g_TASK_USE_ITEM_AT_POINT then
		if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			self._currTaskCat = TASK_CATEGORY_SWORDSMAN
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip) -- new battle
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip, cfg.arg1, TASK_CATEGORY_SWORDSMAN)
		end
	elseif cfg.type == g_TASK_SHAPESHIFTING then--护送npc
		local data = i3k_sbean.task_conveynpc_req.new()
		data.npcId = cfg.arg1
		data.taskCat = TASK_CATEGORY_SWORDSMAN
		i3k_game_send_str_cmd(data, i3k_sbean.task_conveynpc_res.getName())
	elseif cfg.type == g_TASK_ANSWER_PROBLEME then--回答问题
		local callback = function (rightCount)
			self:FinishAnswerTask(cfg, TASK_CATEGORY_SWORDSMAN, rightCount)
		end
		g_i3k_ui_mgr:OpenUI(eUIID_SwordsmanQuestion)
		g_i3k_ui_mgr:RefreshUI(eUIID_SwordsmanQuestion, cfg, callback, TASK_CATEGORY_SWORDSMAN)
	elseif cfg.type == g_TASK_COLLECT then
		self:TaskCollect(cfg.arg1)
	elseif cfg.type == g_TASK_USE_ITEM then
		if self:GetCommonItemCanUseCount(cfg.arg1) >= cfg.arg2 then
			self:OpenFinishTaskDialogue(cfg, TASK_CATEGORY_SWORDSMAN)
		elseif cfg.arg4 > 0 then
			self:SetAutoFight(true)
		end
	elseif cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		self:OpenNewNpcDialogue(cfg, TASK_CATEGORY_SWORDSMAN, data.curTaskId)
	elseif cfg.type == g_TASK_DELIVER_LETTERS then
		self:openDeliverNpcDialogue(cfg)
	end
end
function i3k_game_context:openDeliverNpcDialogue(cfg)
	local _, value = self:getSwordsmanCircleTask()
	local index, npcId, dialogueId = g_i3k_db.i3k_db_get_deliver_npc_index(cfg.arg1, value)
	local callback = function ()
		i3k_sbean.task_talk_mul_npc(cfg.arg1, index)
	end
	local models = {}
	for k = 1, table.nums(i3k_db_dialogue[dialogueId]) do
		table.insert(models, g_i3k_db.i3k_db_get_npc_modelID(npcId))
	end
	g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
	g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, i3k_db_dialogue[dialogueId], models, callback)
end
--黄金海岸
function i3k_game_context:getGoldCoastMapType()
	local mapId = self:GetWorldMapID()
	return i3k_db_war_zone_map_fb[mapId].fightType
end
function i3k_game_context:GetIsGlodCoast()
	local mapType = i3k_game_get_map_type()
	return mapType == g_GOLD_COAST
end
--end
------------------------战区卡片-------------------------------
function i3k_game_context:SetWarZoneCardLog(data, logType)
	self._warZoneCardLog[logType] = data
end
function i3k_game_context:GetWarZoneCardLog()
	return self._warZoneCardLog
end
function i3k_game_context:SetWarZoneCardInfo(data)
	self._warZoneCardInfo = data
end
function i3k_game_context:GetWarZoneCardInfo()
	return self._warZoneCardInfo
end
function i3k_game_context:ResetDayUseCardData()
	self._warZoneCardInfo.card2DayUseCount = {}		
	self._warZoneCardInfo.card2DaySectDrawCount = {}	
	self._warZoneCardInfo.daySectDonateCount = 0	
end
--设置卡片放弃
function i3k_game_context:SetWarZoneCardInvalid(id)
	self._warZoneCardInfo.card.inUse[id] = nil
end
--设置卡片激活
function i3k_game_context:SetWarZonePersonalCardUse(id)
	local cfg = i3k_db_war_zone_map_card[id]
	if cfg.buffId ~= 0  then
		for k,v in pairs(self._warZoneCardInfo.card.inUse) do
			local curCfg = i3k_db_war_zone_map_card[k]
			if curCfg.mutexGroupId == cfg.mutexGroupId then
				self._warZoneCardInfo.card.inUse[k] = nil
				break
			end
		end
		if not self._warZoneCardInfo.card.inUse[id] then
			self._warZoneCardInfo.card.inUse[id] = i3k_game_get_time() + cfg.buffTime
		end
		local hero = i3k_game_get_player_hero()
		if hero then
			hero:UpdateWarZoneCardProp()
		end
	end
	g_i3k_game_context:SetWarZoneCardRecovery(id)
	self._warZoneCardInfo.card2DayUseCount[id] = self._warZoneCardInfo.card2DayUseCount[id] and self._warZoneCardInfo.card2DayUseCount[id] +1 or 1
end
--卡片回收
function i3k_game_context:SetWarZoneCardRecovery(id)
	self._warZoneCardInfo.card.bag[id] = nil
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setWarZoneCardBtn")
end
--获得卡片
function i3k_game_context:SetWarZoneCardGet(id)
	if not self._warZoneCardInfo.card.bag[id] then
		local cfg = i3k_db_war_zone_map_card[id]
		self._warZoneCardInfo.card.bag[id] = i3k_game_get_time() + cfg.effectTime
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setWarZoneCardBtn")
	end
end
function i3k_game_context:SetWarZoneFactionCardPool(data)
	self._warZoneFactionCardPool = data
end
function i3k_game_context:GetWarZoneFactionCardPool()
	return self._warZoneFactionCardPool
end
function i3k_game_context:SetWarZoneFactionCardGet(cardID)
	self._warZoneFactionCardPool[cardID] = self._warZoneFactionCardPool[cardID] - 1
	self._warZoneCardInfo.card2DaySectDrawCount[cardID] = self._warZoneCardInfo.card2DaySectDrawCount[cardID] and self._warZoneCardInfo.card2DaySectDrawCount[cardID] +1 or 1
end
--获取可增加的属性
function i3k_game_context:GetCurCardCanAddProp()
	local inUse = self._warZoneCardInfo.card.inUse
	local info = {}
	for k,v in pairs(inUse) do
		local cfg = i3k_db_war_zone_map_card[k]
		local isCanUse = i3k_db.i3k_db_get_war_zone_card_buff_is_show(k)
		if cfg.cardType == g_WAR_ZONE_CARD_EFECT_TYPE_PROP_ADD then
			local efectCfg = i3k_db_war_zone_map_efect[cfg.cardType]
			local efectId = cfg.effectArg.arg1
			if efectCfg and efectCfg[efectId] then
				for k,v in ipairs(efectCfg[efectId].idGroup) do
					local value = efectCfg[efectId].values and efectCfg[efectId].values[k] or 0
					infoValue = {
						id = v,
						value = value,
						type = efectCfg[efectId].type
					}
					table.insert(info, infoValue)
				end
			end
		end 
	end
	return info
end
--刷新卡片
function i3k_game_context:WarZoneCardSync(info)
	local useCard = info.bagOrInUse == 0 and self._warZoneCardInfo.card.bag or self._warZoneCardInfo.card.inUse
	if info.addOrRemove == 0 then
		useCard[info.id] = info.time
	else
		useCard[info.id] = nil
	end
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateWarZoneCardProp()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateselfbuff")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_Bag, "setWarZoneCardBtn")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_WarZoneCard, "updateRed")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_WarZoneCard, "updateCardItem", info.id)
end
--卡片特殊操作
function i3k_game_context:WarZoneCardSetData(id)
	local cfg = i3k_db_war_zone_map_card[id]
	local efectAgrs = i3k_db_war_zone_map_efect[cfg.cardType]
	if cfg.cardType == g_WAR_ZONE_CARD_EFECT_TYPE_OFFLINE_EXP then
		local roleLvl = g_i3k_game_context:GetLevel()
		local efectData = efectAgrs[cfg.effectArg.arg1]
		local curIndex = i3k_db.i3k_db_get_card_effect_cur_index(efectData, roleLvl)
		local offlineData = g_i3k_game_context:GetOfflineExpData()
		offlineData.dailyOfflineExp = offlineData.dailyOfflineExp + efectData.values[curIndex]
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"updataOfflineExpProgress", g_i3k_game_context:GetLevelExp())
	end
end
--卡片获取-----------------------------
function i3k_game_context:removeWarZoneCardTip()
	local tipTabke = {}
	for k,v in ipairs(self._warZoneCardTip) do
	  	if k ~= 1 then
	  		table.insert(tipTabke, v)
	  	end
	end 
	self._warZoneCardTip = tipTabke
end
function i3k_game_context:getWarZoneCardTip()
	return self._warZoneCardTip and self._warZoneCardTip[1]
end
function i3k_game_context:onSyncWarZoneCardTip(id)
	if not self._warZoneCardTip then
		self._warZoneCardTip = {}
	end
	table.insert(self._warZoneCardTip, id)
end
function i3k_game_context:clearWarZoneCardTip()
	self._warZoneCardTip = {}
end
--------------------------阵法石系统----------------------
function i3k_game_context:setArrayStoneData(data)
	self._arrayStone = data
end
function i3k_game_context:getArrayStoneData()
	return self._arrayStone
end
--获取装备中的密文
function i3k_game_context:getEquipArrayStone()
	return self._arrayStone and self._arrayStone.equips or {}
end
--获取背包里的密文
function i3k_game_context:getBagArrayStone()
	return self._arrayStone and self._arrayStone.bag or {}
end
function i3k_game_context:refreshArrayStoneFreetimes()
	self._arrayStone.freeTimes = 0
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updatePrayFreeTimes")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_XB, "updateArrayStoneRed")
end
function i3k_game_context:addArrayStoneEnergy(energy, reason)
	self._arrayStone.energy = self._arrayStone.energy + energy
end
function i3k_game_context:useArrayStoneEnergy(energy, reason)
	self._arrayStone.energy = self._arrayStone.energy - energy
end
function i3k_game_context:getArrayStoneEnergy()
	return self._arrayStone.energy or 0
end
--祈言成功加能量或者加石头
function i3k_game_context:arrayStonesPraySuccess(stones)
	if self._arrayStone.freeTimes == 0 then
		self._arrayStone.freeTimes = self._arrayStone.freeTimes + 1
	end
	if self._arrayStone.conversion then
	else
		self:addArrayStones(stones)
	end
	g_i3k_game_context:addArrayStoneExperience(i3k_db_array_stone_common.addExperience)
end
function i3k_game_context:addArrayStones(stones)
	for k, v in ipairs(stones) do
		if not self._arrayStone.bag[v] then
			self._arrayStone.bag[v] = 0
		end
		self._arrayStone.bag[v] = self._arrayStone.bag[v] + 1
	end
end
function i3k_game_context:addArrayStoneExperience(exp)
	local lastLevel = g_i3k_db.i3k_db_get_array_stone_level(self._arrayStone.exp)
	self._arrayStone.exp = math.min(self._arrayStone.exp + exp, i3k_db_array_stone_level[#i3k_db_array_stone_level - 1].needExp)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updatePrayLevel")
	local nextLevel = g_i3k_db.i3k_db_get_array_stone_level(self._arrayStone.exp)
	if lastLevel ~= nextLevel then
		self:RefreshArrayStoneProp()
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updateAmuletRootData")
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updatePrayNode")
		if i3k_db_array_stone_level[nextLevel].equipStoneCount > i3k_db_array_stone_level[lastLevel].equipStoneCount then
			g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "setUnlockAmuletId", i3k_db_array_stone_level[nextLevel].equipStoneCount)
		end
	end
end
function i3k_game_context:changeArrayStoneTransform(state)
	self._arrayStone.conversion = state
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "changeTransformIcon", state)
end
function i3k_game_context:setArrayStoneLock(lock)
	self._arrayStone.locks = lock
end
--获取现在最多装备几个密文
function i3k_game_context:getArrayStoneMaxCountNow()
	local info = self:getArrayStoneData()
	local level = g_i3k_db.i3k_db_get_array_stone_level(info.exp)
	return i3k_db_array_stone_level[level].equipStoneCount
end
--置换 密文 --TODO 修改数量 还有刷新的方法
function i3k_game_context:displaceArrayStone(from, to)
	local bagStones = self:getBagArrayStone()
	if bagStones[from] then
		bagStones[from] = bagStones[from] ~= 1 and bagStones[from] - 1 or nil
		bagStones[to] = bagStones[to] and bagStones[to] + 1 or 1
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updateStonesUncover", {[1] = {id = to, count =1}}, {[1] = {id = from, count = 1}})
	end
end
-- 装备密文
function i3k_game_context:equipArrayStone(id)
	local equips = self:getEquipArrayStone()
	local bags = self:getBagArrayStone()
	local replace = false
	local position = 1
	local adds = {}
	local subs = { [1] = {id = id, count = 1}}
	for i = 1,self:getArrayStoneMaxCountNow(),1 do
		if equips[i] and math.floor(equips[i] / 100) == math.floor(id / 100) then
			replace = true
			bags[equips[i]] = bags[equips[i]] and bags[equips[i]] + 1 or 1
			bags[id] = bags[id] - 1 ~= 0 and bags[id] - 1 or nil
			adds[1] = {id = equips[i], count = 1}
			equips[i] = id
			position = i
		end
	end
	if not replace then
		for i = 1,self:getArrayStoneMaxCountNow(),1 do
			if not equips[i] or equips[i] == 0 then
				equips[i] = id
				position = i
				break
			end
		end
		bags[id] = bags[id] - 1 ~= 0 and bags[id] - 1 or nil
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updateAmuletRootData")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updateStonesAfterUnEquip", adds, subs)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updateEquipAnimate", position)
	self:RefreshArrayStoneProp()
end
--合成密文
function i3k_game_context:synthetiseArrayStone(id, fromEquip)
	local cfg = i3k_db_array_stone_cfg[id]
	local newId = cfg.compoundId
	if fromEquip then
		local equips = self:getEquipArrayStone()
		for k,v in pairs(equips) do
			if v == id then
				equips[k] = newId
			end
		end
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updateAmuletRootData")
		self:RefreshArrayStoneProp()
	else
		local bags = self:getBagArrayStone()
		bags[id] = bags[id] - 1 ~= 0 and bags[id] - 1 or nil
		bags[newId] = bags[newId] and bags[newId] + 1 or 1
		--刷新背包界面
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updateStonesUncover", {[1] = {id = newId, count = 1}}, {[1] = {id = id, count = 1}})
	end
	--扣除道具
	g_i3k_game_context:UseCommonItem(g_BASE_ITEM_STONE_ENERGY, cfg.costEnergy)
	if cfg.compoundItemCount ~= 0 then
		g_i3k_game_context:UseCommonItem(cfg.compoundItemId, cfg.compoundItemCount)
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_ArrayStoneMWInfo, newId)
	g_i3k_ui_mgr:RefreshUI(eUIID_ArrayStoneMWSynthetise, newId)
end
--下阵密文 
function i3k_game_context:unEquipArrayStone(id)
	local equip = self:getEquipArrayStone()
	for i = 1, self:getArrayStoneMaxCountNow() do
		if equip[i] and equip[i] == id then
			equip[i] = 0
		end
	end
	local bag = self:getBagArrayStone()
	bag[id] = bag[id] and bag[id] + 1 or 1
	--刷新装备界面
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updateStonesAfterUnEquip", {[1] = {id = id, count = 1}})
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_ArrayStone, "updateAmuletRootData")
	self:RefreshArrayStoneProp()
end
--阵法石言诀
function i3k_game_context:getArrayStoneSuitGroup(stoneId)
	local group = {}
	for k, v in pairs(i3k_db_array_stone_suit_group) do
		if g_i3k_db.i3k_db_is_in_stone_suit_group(stoneId, k) then
			local stoneList = {}
			for i, j in ipairs(self._arrayStone.equips) do
				if j ~= 0 and g_i3k_db.i3k_db_is_in_stone_suit_group(j, k) then
					table.insert(stoneList, j)
				end
			end
			table.insert(group, {groupId = k, stoneList = stoneList})
		end
	end
	return group
end
function i3k_game_context:addArrayStoneUnlockHole(id)
	self._arrayStone.holeCnt = id
end
--刷新阵法石属性
function i3k_game_context:RefreshArrayStoneProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		g_i3k_game_context:SetPrePower()
		hero:UpdateArrayStoneProp()
		g_i3k_game_context:ShowPowerChange()
	end
end
--红点
function i3k_game_context:getArrayStoneRedPointShow()
	if self:GetLevel() >= i3k_db_array_stone_common.openLvl then
		if self._arrayStone.freeTimes == 0 then
			return true
		else
			local level = g_i3k_db.i3k_db_get_array_stone_level(self._arrayStone.exp)
			for k, v in ipairs(i3k_db_array_stone_level[level].costItems) do
				if self:GetCommonItemCanUseCount(v.id) < v.count then
					return false
				end
			end
			return true
		end
	else
		return false
	end
end
--排行榜获取自己符印战力
function i3k_game_context:getArrayStonePower()
	local level = g_i3k_db.i3k_db_get_array_stone_level(self._arrayStone.exp)
	local props = {}
	local equipSuit = {}
	local suitAdditionAll = {}
	local suitAdditionSelf = {}
	for i, j in pairs(i3k_db_array_stone_suit_group) do
		for m, n in ipairs(j.includeSuit) do
			for k, v in ipairs(self._arrayStone.equips) do
				if v ~= 0 then
					if g_i3k_db.i3k_db_is_in_stone_suit_group(v, i) then
						if not equipSuit[n] then
							equipSuit[n] = {}
						end
						table.insert(equipSuit[n], v)
					end
				end
			end
		end
	end
	for k, v in pairs(equipSuit) do
		local suitCfg = i3k_db_array_stone_suit[k]
		if g_i3k_db.i3k_db_get_is_finish_stone_suit(v, k) then
			local suitLevel = g_i3k_db.i3k_db_get_stone_suit_level(v, k)
			if suitCfg.additionType == g_STONE_SUIT_ADDITION_SELF then
				if not suitAdditionSelf[k] then
					suitAdditionSelf[k] = {}
				end
				for m, n in ipairs(suitCfg.additionProperty) do
					if n.id ~= 0 then
						if not suitAdditionSelf[k][n.id] then
							suitAdditionSelf[k][n.id] = 0
						end
						suitAdditionSelf[k][n.id] = suitAdditionSelf[k][n.id] + n.value[suitLevel]
					end
				end
			elseif suitCfg.additionType == g_STONE_SUIT_ADDITION_ALL then
				for m, n in ipairs(suitCfg.additionProperty) do
					if n.id ~= 0 then
						if not suitAdditionAll[n.id] then
							suitAdditionAll[n.id] = 0
						end
						suitAdditionAll[n.id] = suitAdditionAll[n.id] + n.value[suitLevel]
					end
				end
			end
			for m, n in ipairs(suitCfg.suitProperty) do
				if n.id ~= 0 then
					if not props[n.id] then
						props[n.id] = 0
					end
					props[n.id] = props[n.id] + n.value[suitLevel]
				end
			end
		end
	end
	for i, j in ipairs(self._arrayStone.equips) do
		if j ~= 0 then
			for m, n in ipairs(i3k_db_array_stone_cfg[j].commonProperty) do
				local percent = 1
				for k, v in pairs(equipSuit) do
					if table.indexof(v, j) and suitAdditionSelf[k] and suitAdditionSelf[k][n.id] then
						percent = percent + suitAdditionSelf[k][n.id] / 10000
					end
				end
				if suitAdditionAll[n.id] then
					percent = percent + suitAdditionAll[n.id] / 10000
				end
				if i3k_db_array_stone_level[level].propertyRate ~= 0 then
					percent = percent + i3k_db_array_stone_level[level].propertyRate / 10000
				end
				if not props[n.id] then
					props[n.id] = 0
				end
				props[n.id] = props[n.id] + math.floor(n.value * percent)
			end
			for m, n in ipairs(i3k_db_array_stone_cfg[j].extraProperty) do
				if level >= n.needLvl then
					local percent = 1
					for k, v in pairs(equipSuit) do
						if table.indexof(v, j) and suitAdditionSelf[k] and suitAdditionSelf[k][n.id] then
							percent = percent + suitAdditionSelf[k][n.id] / 10000
						end
					end
					if suitAdditionAll[n.id] then
						percent = percent + suitAdditionAll[n.id] / 10000
					end
					if i3k_db_array_stone_level[level].propertyRate ~= 0 then
						percent = percent + i3k_db_array_stone_level[level].propertyRate / 10000
					end
					if not props[n.id] then
						props[n.id] = 0
					end
					props[n.id] = props[n.id] + math.floor(n.value * percent)
				end
			end
		end
	end
	return g_i3k_db.i3k_db_get_battle_power(props)
end
--------------------------阵法石end-----------------------
--------------------------万寿阁start---------------------
--万寿阁报名信息
function i3k_game_context:setLongevityPavilionSignInfo(info)
	self._longevityPavilionInfo.signUpInfo = info
end
function i3k_game_context:getLongevityPavilionJoinTime()
	local info = self._longevityPavilionInfo.signUpInfo
	return info and info.signTime or 0
end
function i3k_game_context:setLongevityPavilionSignUpTime(time)	
	self._longevityPavilionInfo.signUpInfo.signTime = time
end
function i3k_game_context:getLongevityPavilionSignUpTime()
	return self._longevityPavilionInfo.signUpInfo.signTime or 0
end
function i3k_game_context:getLongevityPavilionEnterTimes()
	local info = self._longevityPavilionInfo.signUpInfo
	return info and info.dayEnterTimes or 0
end
function i3k_game_context:addLongevityPavilionEnterTimes(num)
	self._longevityPavilionInfo.signUpInfo.dayEnterTimes = self._longevityPavilionInfo.signUpInfo.dayEnterTimes + num
end
--万寿阁副本信息
function i3k_game_context:setLongevityPavilionBattleInfo(info)
	self._longevityPavilionInfo.battleInfo.score = info.score
	self._longevityPavilionInfo.battleInfo.stage = info.stage
	self._longevityPavilionInfo.battleInfo.task = info.tasks
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_LongevityPavilionBattle, "refreshScoll")
end
function i3k_game_context:getLongevityPavilionScorInfo()
	local info = self._longevityPavilionInfo.battleInfo
	return info and info.score or 0
end
function i3k_game_context:refreshLongevityPavilionScore(score)
	local curScore = self._longevityPavilionInfo.battleInfo.score
	self._longevityPavilionInfo.battleInfo.score = curScore and curScore + score or score
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_LongevityPavilionBattle, "refreshScoll")
end
--设置当前阶段
function i3k_game_context:setLongevityPavilionStage(stage)	
	self._longevityPavilionInfo.battleInfo.stage = stage
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_LongevityPavilionBattle, "refreshScoll")
end

--设置任务值
function i3k_game_context:setLongevityPavilionTask(info)
	self._longevityPavilionInfo.battleInfo.task[info.taskID] = info.taskValue
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_LongevityPavilionBattle, "refreshScoll")
end

--获取战斗信息
function i3k_game_context:getLongevityPavilionBattleInfo()
	return self._longevityPavilionInfo.battleInfo
end

function i3k_game_context:setLongevityPavilionReset(time)
	self._longevityPavilionInfo.resetTime = time
end

function i3k_game_context:getLongevityPavilionReset()
	return self._longevityPavilionInfo.resetTime or 0
end
--------------------------万寿阁end----------------------------------

function i3k_game_context:getNationalCheerTimes()
	return self._nationalCheerTimes
end

function i3k_game_context:setNationalCheerTimes(times)
	self._nationalCheerTimes = times
end

function i3k_game_context:useNationalCheerTimes(times)
	self._nationalCheerTimes = self._nationalCheerTimes + times

end
---------------------------邀请新机制------------------------------
--获取邀请的列表
function i3k_game_context:getInviteList(filter)
	if not filter then
		return self._inviteList
	else
		local t = {}
		for i,v in ipairs(self._inviteList) do
			if filter == v.type then
				table.insert(t, v)
			end
		end
		return t
	end
end

--添加邀请
function i3k_game_context:addInviteItem(type, bean, acceptFunc, refuseFunc, busyFunc,id, desc, yesName, noName)
	local list = self:getInviteList()
	local count = #list
	for i, v in ipairs(list) do
		if v.id == id and v.type == type then
			if busyFunc then --重复的显示正忙
				busyFunc()
			end
			return
		end
	end
	table.insert(list, 1, {type = type, bean = bean, acceptFunc = acceptFunc, refuseFunc = refuseFunc, time = i3k_game_get_time(), id = id, desc = desc, yesName = yesName, noName= noName})
	if count >= i3k_db_common.maxInviteListCount and count > 0 then
		table.remove(list, #list)--移除最后一个
	end
	g_i3k_ui_mgr:RefreshUI(eUIID_InviteList, type)
	if #list > 0 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateInviteEntranceState")
	end
end

--移除邀请
function i3k_game_context:removeInviteItem(id, type)
	local list = self:getInviteList()
	for i,v in ipairs(list) do
		if v.id == id and v.type == type then
			table.remove(list, i)
			g_i3k_ui_mgr:RefreshUI(eUIID_InviteList, type)
			break
		end
	end
	if #list == 0 then
		g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateInviteEntranceState")
	end
end

function i3k_game_context:clearInvites(type)
	for i = #self._inviteList, 1, -1 do
		if self._inviteList[i].type == type then
			table.remove(self._inviteList, i)
		end
	end
end

--设置
local _inviteListSettingsMap = {
	[g_INVITE_SET_FRIEND] = "friend",
	[g_INVITE_SET_TEAM] = "team",
	[g_INVITE_SET_SOLO] = "single",
}
function i3k_game_context:syncInviteListSetting(bean)
	self._inviteListSettings = {}
	for k,v in pairs(_inviteListSettingsMap) do
		self._inviteListSettings[v] = {setting = bean[v] == 1, time = i3k_game_get_time()}
	end
end
function i3k_game_context:updateInviteListSetting(type)
	local set = self._inviteListSettings[_inviteListSettingsMap[type]]
	set.setting = not set.setting
	set.time = i3k_game_get_time()
end
function i3k_game_context:getInviteListSettting(type)
	local set = self._inviteListSettings[_inviteListSettingsMap[type]]
	return set.setting, set.time
end
----------------------------------------------------------------

--鬼岛驭灵
function i3k_game_context:getGhostSkillInfo()
	return self._spiritsInfo
end

function i3k_game_context:setGhostSkillState(id)
	self._spiritsInfo.skillFlag = id
end

function i3k_game_context:addCatchSpiritCall(count)
	self._spiritsInfo.daySummonedTimes = self._spiritsInfo.daySummonedTimes + count
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_CatchSpiritTask, "updateCatchCount")
end

function i3k_game_context:clearCatchSpiritCall()
	if self._spiritsInfo and self._spiritsInfo.daySummonedTimes then
		self._spiritsInfo.daySummonedTimes = 0
	end
end

function i3k_game_context:addCatchSpiritFragment(id, count)
	if self._spiritsInfo then
		if not self._spiritsInfo.spirits then
			self._spiritsInfo.spirits = {}
		end
		if not self._spiritsInfo.spirits[id] then
			self._spiritsInfo.spirits[id] = 0
		end
		self._spiritsInfo.spirits[id] = self._spiritsInfo.spirits[id] + count
	end
end

function i3k_game_context:setCatchSpiritPoint(points)
	self._catchSpiritPoint = points
end

function i3k_game_context:getCatchSpiritPoint()
	return self._catchSpiritPoint
end

function i3k_game_context:setCatchSpiritPointCD(pointCD)
	self._catchSpiritPointCD = pointCD
end

function i3k_game_context:getCatchSpiritPointCD()
	return self._catchSpiritPointCD
end

function i3k_game_context:changeCatchSpiritPointCD(point, time)
	if not self._catchSpiritPointCD then
		self._catchSpiritPointCD = {}
	end
	self._catchSpiritPointCD[point] = time
	local world = i3k_game_get_world()
	if world then
		world:changeCatchSpiritCD(point, time)
	end
end

function i3k_game_context:setCatchSpiritBoss(boss)
	self._catchSpiritBoss = boss
end

function i3k_game_context:getCatchSpiritBoss()
	return self._catchSpiritBoss or {}
end

function i3k_game_context:checkCallSpirit()
	local hero = i3k_game_get_player_hero()
	if hero then
		local heroPos = i3k_logic_pos_to_world_pos(hero._curPos)
		local points = g_i3k_game_context:getCatchSpiritPoint()
		local pointCD = g_i3k_game_context:getCatchSpiritPointCD()
		for k, _ in pairs(points) do
			local pos = i3k_db_catch_spirit_position[k].pos
			if (heroPos.x - pos[1]) ^ 2 + (heroPos.y - pos[2]) ^ 2 + (heroPos.z - pos[3]) ^ 2 < (i3k_db_catch_spirit_position[k].radius / 100) ^ 2 then
				if i3k_game_get_time() - (pointCD[k] or 0) < i3k_db_catch_spirit_base.dungeon.callCold then
					g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(18628, (pointCD[k] or 0) + i3k_db_catch_spirit_base.dungeon.callCold - i3k_game_get_time()))
				else
					if self._spiritsInfo.daySummonedTimes >= i3k_db_catch_spirit_base.dungeon.callTimes then
						g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(18625))
					else
						local count = 0
						if self._spiritsInfo and self._spiritsInfo.spirits then
							for k, v in pairs(self._spiritsInfo.spirits) do
								count = count + v
							end
						end
						if count < i3k_db_catch_spirit_base.spiritFragment.bagMaxCount then
							hero._behavior:Set(eEBRoot)
							local co = g_i3k_coroutine_mgr:StartCoroutine(function()
								g_i3k_coroutine_mgr.WaitForSeconds(0.2)
								local alist = {}
								table.insert(alist, {actionName = i3k_db_skills[i3k_db_catch_spirit_base.dungeon.callSkillId].action, actloopTimes = 1})
								table.insert(alist, {actionName = i3k_db_common.engine.defaultAttackIdleAction, actloopTimes = -1})
								hero:PlayActionList(alist, 1)
								if hero:IsOnRide() then
									g_i3k_coroutine_mgr.WaitForSeconds(i3k_db_skills[i3k_db_catch_spirit_base.dungeon.callSkillId].spell.time/1000)
								else
									g_i3k_coroutine_mgr.WaitForSeconds(i3k_db_skills[i3k_db_catch_spirit_base.dungeon.callSkillId].duration/1000)
								end
								i3k_sbean.send_ghost_spirit_summoned(k)
								hero._behavior:Clear(eEBRoot)
								g_i3k_coroutine_mgr:StopCoroutine(co)
							end)
						else
							g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(18647, i3k_db_catch_spirit_base.spiritFragment.bagMaxCount))
						end
					end
				end
				return
			end
		end
		g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(18627))
	end
end

function i3k_game_context:addCatchSpiritMonsterSkill(skillId)
	if self:GetWorldMapType() == g_CATCH_SPIRIT then
		if self._selectMonsterGuid then
			if self._catchSpiritMonster.count >= #i3k_db_catch_spirit_monster[self._selectMonsterId].skillList then
				self._catchSpiritMonster.count = 0
			end
			local classType = self:GetRoleType()
			local index = table.indexof(i3k_db_catch_spirit_skills[classType].baseSkills, skillId)
			if index then
				local skillList = i3k_db_catch_spirit_monster[self._selectMonsterId].skillList
				if skillList[self._catchSpiritMonster.count + 1] == index then
					--技能连招成功
					if #skillList == self._catchSpiritMonster.count + 1 then
						--连招完成放绝招
						local hero = i3k_game_get_player_hero()
						if hero then
							local triggerId = math.random(1, #i3k_db_catch_spirit_skills[classType].triggerSkills)
							local co = g_i3k_coroutine_mgr:StartCoroutine(function()
								g_i3k_coroutine_mgr.WaitForSeconds(i3k_db_skills[skillId].duration/1000)
								if self._catchSpiritMonster.count >= #i3k_db_catch_spirit_monster[self._catchSpiritMonster.id].skillList then
									self._catchSpiritMonster.count = 0
								end
								g_i3k_ui_mgr:RefreshUI(eUIID_CatchSpiritSkills)
								hero:UseGameInstanceSkill(i3k_db_catch_spirit_skills[classType].triggerSkills[triggerId])
								g_i3k_coroutine_mgr:StopCoroutine(co)
							end)
						end
					end
					self._catchSpiritMonster.count = self._catchSpiritMonster.count + 1
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_CatchSpiritSkills, "updateSkillEffect", self._catchSpiritMonster.count)
				else
					self._catchSpiritMonster.count = 0
				end
			end
			g_i3k_ui_mgr:RefreshUI(eUIID_CatchSpiritSkills)
		end
	end
end

function i3k_game_context:getCatchSpiritMonsterSkill()
	return self._catchSpiritMonster
end

function i3k_game_context:clearCatchSpiritMonsterSkill()
	self._catchSpiritMonster = {id = 0, guid = "", count = 0}
end

function i3k_game_context:SetSelectMonsterId(id, guid)
	self._selectMonsterId = id
	self._selectMonsterGuid = guid
	if id then
		if i3k_db_catch_spirit_monster[id] then
			if next(i3k_db_catch_spirit_monster[id].skillList) then
				if self._catchSpiritMonster.guid ~= guid then
					self._catchSpiritMonster.id = id
					self._catchSpiritMonster.guid = guid
					self._catchSpiritMonster.count = 0
				end
				g_i3k_ui_mgr:OpenUI(eUIID_CatchSpiritSkills)
				g_i3k_ui_mgr:RefreshUI(eUIID_CatchSpiritSkills)
			end
		end
	else
		g_i3k_ui_mgr:CloseUI(eUIID_CatchSpiritSkills)
	end
end

function i3k_game_context:GetSelectMonsterId()
	return self._selectMonsterId, self._selectMonsterGuid
end

function i3k_game_context:setMrgTaskCount(count)
	self._roleTask.marriageTask.leftCount = count

end

function i3k_game_context:getMrgTaskCount()
	return self._roleTask.marriageTask.leftCount or 0
end

function i3k_game_context:updateMrgTaskCount(count)
	self:setMrgTaskCount(count)
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask,"updateMrgTaskTag", true)
end

---------------------------密探风云----------------------------------
--获取技能
function i3k_game_context:getSpyStorySkills()
	local hero = i3k_game_get_player_hero()
	local skills = {}
	if hero and hero._inSpyStory and hero._bindSkills then
		for _, v in pairs(hero._bindSkills) do
			table.insert(skills, v)
		end
	end
	return skills
end

function i3k_game_context:setSpyStoryInfo(info)
	self._spyStoryInfo = info
end

function i3k_game_context:getSpyStoryInfo()
	return self._spyStoryInfo
end

function i3k_game_context:resetSpyStoryInfo()
	self._spyStoryInfo.dayEnterTimes = 0
	self._spyStoryInfo.dayScore = 0
	self._spyStoryInfo.dayRewards = {}
	self._spyStoryInfo.activityRewards = {}
end

function i3k_game_context:addSpyStoryDayEnterTimes()
	self._spyStoryInfo.dayEnterTimes = self._spyStoryInfo.dayEnterTimes + 1
	self._spyStoryInfo.finishCount = self._spyStoryInfo.finishCount + 1
end

function i3k_game_context:addSpyStoryDayScore(score)
	self._spyStoryInfo.dayScore = self._spyStoryInfo.dayScore + score
end

function i3k_game_context:takeSpyStoryDayReward(index)
	table.insert(self._spyStoryInfo.dayRewards, index)
end

function i3k_game_context:takeSpyStoryActivityReward(index)
	table.insert(self._spyStoryInfo.activityRewards, index)
end

--变身状态
function i3k_game_context:setSpyStoryTransformId(alterID)
	self._spyStoryBattle.alterID = alterID
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SpyStoryTask,"updateChangeState")
end

function i3k_game_context:getSpyStoryTransformState()
	return self._spyStoryBattle.alterID or 0
end

--变身次数
function i3k_game_context:setSpyStoryTransformTimes(times)
	self._spyStoryBattle.times = times
end

--变身次数
function i3k_game_context:getSpyStoryTransformTimes()
	return self._spyStoryBattle.times or  0
end

--密探矿任务特殊处理
function i3k_game_context:spyMineCompletedTask(id)
	local hero = i3k_game_get_player_hero()
	local world = i3k_game_get_world();
	local taskCfg = i3k_db_spy_story_task[hero:GetForceType()]
	if taskCfg then
		for k,v in pairs(taskCfg) do
			if v.type == 2 and v.arg1 == id then
				if v.showNpcId ~= 0 then
					local entityNPC2 = world:CreateDisposableNpc(v.showNpcId, v.showNpcId, {rotation = v.npcDir, position = i3k_world_pos_to_logic_pos(v.npcPos)}, i3k_world_pos_to_logic_pos(v.npcPos))
					local routePos = i3k_db_spy_story_find_point[v.pathId]
					local speed = entityNPC2:GetPropertyValue(ePropID_speed)
					entityNPC2:SetMovePoints(g_i3k_db.i3k_db_get_move_point_info(routePos, speed / 100), 1, true)
					break
				end
			elseif v.type == g_TASK_COLLECT_NPC and v.arg1 == id then
				if v.dialogueNpcId ~= 0 then
					local data = {}
					local mod = {}
					local dialogues = {}
					for i = 1 , 3 do
						local tmp_desc = string.format("finishTaskDialogue%s",i)
						local tmp_desc_model = string.format("finishTaskDialogue%sIcon",i)
						local finishTaskDialogue = v[tmp_desc]
						local finishTaskDialogueIcon = v[tmp_desc_model]
						if finishTaskDialogue and finishTaskDialogueIcon and finishTaskDialogue ~= 0 then
							table.insert(dialogues, i3k_db_dialogue[finishTaskDialogue][1])
							table.insert(mod, finishTaskDialogueIcon)
						end
					end
					local entityNPC2 = world:CreateDisposableNpc(v.dialogueNpcId, v.dialogueNpcId, {rotation = v.npcDir, position = hero._curPos}, hero._curPos)
					data.npcId = v.dialogueNpcId
					data.dialogues = dialogues
					data.mod = mod
					data.callback = function()
						local world = i3k_game_get_world();
						world:ReleaseEntity(entityNPC2)
						i3k_sbean.client_log_task(g_TASK_COLLECT_NPC, v.arg1, v.arg2, 1)
					end
					g_i3k_game_context:setSpyDialogueNpcData(data)
					break;
				end
			end
		end
	end
end

--保存采矿结束特殊npc对话
function i3k_game_context:setSpyDialogueNpcData(data)
	self._spyDialogueNpcData = data
end

function i3k_game_context:getSpyDialogueNpcData()
	return self._spyDialogueNpcData 
end

function i3k_game_context:setSpyStoryTasks(tasks)
	self._spyStoryTasks = tasks
end

function i3k_game_context:getSpyStoryTasks()
	return self._spyStoryTasks
end

function i3k_game_context:updateSpyStoryTaskInfo(taskID, taskValue)
	self._spyStoryTasks[taskID] = taskValue
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_SpyStoryTask, "updateTaskByID", taskID, taskValue)
end

function i3k_game_context:setSpyStoryScore(score)
	self._spyStoryScore = score
end

function i3k_game_context:getSpyStoryScore()
	return self._spyStoryScore
end

function i3k_game_context:setSpyStoryCampType(campType)
	self._spyStoryCampType = campType
end

function i3k_game_context:getSpyStoryCampType()
	return self._spyStoryCampType or 1
end

function i3k_game_context:updateSpyStoryTaskResponse()
	local data = self:GetFindPathData()
	if data.petID == 0 then
		return
	end
	local camp = self:getSpyStoryCampType()
	local cfg = i3k_db_spy_story_task[camp][data.petID]
	if cfg.type == g_TASK_KILL then
		self:SetAutoFight(true)
	elseif cfg.type == g_TASK_COLLECT or cfg.type == g_TASK_COLLECT_NPC then
		self:TaskCollect(cfg.arg1)
	end
end

--外传职业
function i3k_game_context:setBiographyCareerInfo(info)
	self._biographyCareer = info
	self:setBiographyCareerSkills()
end

function i3k_game_context:getBiographyCareerInfo()
	return self._biographyCareer
end

function i3k_game_context:setBiographyCareerLog(log)
	self._biographyCareerLog = log
end

function i3k_game_context:getBiographyCareerLog()
	return self._biographyCareerLog
end

--是否可以反悔
function i3k_game_context:isCanTransformBack(careerId)
	if self._biographyCareer and self._biographyCareer[careerId] and self._biographyCareer[careerId].taskId == 0 then
		if self._biographyCareer[careerId].startTime > 0 then
			if i3k_game_get_time() - self._biographyCareer[careerId].startTime <= i3k_db_wzClassLand[careerId].backTime then
				return g_BIOGIAPHY_STATE_WITHINTIME, i3k_db_wzClassLand[careerId].backTime + self._biographyCareer[careerId].startTime - i3k_game_get_time()
			else
				return g_BIOGIAPHY_STATE_OVERDUE
			end
		elseif self._biographyCareer[careerId].startTime == 0 then
			return g_BIOGIAPHY_STATE_FINISH
		else
			return g_BIOGIAPHY_STATE_CONFESSED
		end
	else
		return g_BIOGIAPHY_STATE_UNFINISH
	end
end

function i3k_game_context:isCanTransform()
	if self._biographyCareer then
		for k, v in pairs(self._biographyCareer) do
			local startTime = self._biographyCareer[k].startTime
			if v.taskId == 0 and startTime > 0 and i3k_game_get_time() - startTime <= i3k_db_wzClassLand[k].backTime then
				return false
			end
		end
	end
	return true
end

function i3k_game_context:setCurBiographyCareerId(id)
	self._curBiographyCareer = id
end

function i3k_game_context:getCurBiographyCareerId()
	return self._curBiographyCareer
end

function i3k_game_context:updateBiographyCareerProp()
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:updateBiographyCareerProp()
	end
end

function i3k_game_context:setBiographyCareerSkills()
	self._biographySkills = {}
	self._biographyQigong = {}
	for k, v in pairs(self._biographyCareer) do
		local taskId = v.taskId == 0 and #i3k_db_wzClassLand_task[k] or v.taskId
		for i, j in ipairs(i3k_db_wzClassLand[k].defultSkills) do
			if j ~= 0 then
				if not self._biographySkills[k] then
					self._biographySkills[k] = {}
				end
				table.insert(self._biographySkills[k], j)
			end
		end
		for i, j in ipairs(i3k_db_wzClassLand[k].defultXinfa) do
			if j ~= 0 then
				if not self._biographyQigong[k] then
					self._biographyQigong[k] = {}
				end
				table.insert(self._biographyQigong[k], j)
			end
		end
		for i, j in ipairs(i3k_db_wzClassLand_task[k]) do
			if i <= taskId then
				for m, n in ipairs(i3k_db_wzClassLand_prop[j.changeClassID].skills) do
					if n ~= 0 then
						if not self._biographySkills[k] then
							self._biographySkills[k] = {}
						end
						table.insert(self._biographySkills[k], n)
					end
				end
				for m, n in ipairs(i3k_db_wzClassLand_prop[j.changeClassID].xinfa) do
					if n ~= 0 then
						if not self._biographyQigong[k] then
							self._biographyQigong[k] = {}
						end
						table.insert(self._biographyQigong[k], n)
					end
				end
			end
		end
	end
end

function i3k_game_context:getBiographyCareerSkills()
	return self._biographySkills
end

function i3k_game_context:addBiographyCareerSkills(skills)
	for k, v in ipairs(skills) do
		table.insert(self._biographySkills[self._curBiographyCareer], v)
	end
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:InitSkills(false)
	end
end

function i3k_game_context:getBiographyCareerQigong()
	return self._biographyQigong
end

function i3k_game_context:addBiographyCareerQigong(qigong)
	for k, v in ipairs(qigong) do
		if not self._biographyQigong[self._curBiographyCareer] then
			self._biographyQigong[self._curBiographyCareer] = {}
		end
		table.insert(self._biographyQigong[self._curBiographyCareer], v)
	end
end

--外传职业装备技能
function i3k_game_context:changeBiographyCareerEquipSkills(index, skillId)
	local oldIndex = table.indexof(self._biographyCareer[self._curBiographyCareer].equipSkills, skillId)
	if oldIndex then
		self._biographyCareer[self._curBiographyCareer].equipSkills[oldIndex] = self._biographyCareer[self._curBiographyCareer].equipSkills[index]
	end
	self._biographyCareer[self._curBiographyCareer].equipSkills[index] = skillId
	--self:updateBiographyCareerProp()
	local hero = i3k_game_get_player_hero()
	hero:BindSkills(self._biographyCareer[self._curBiographyCareer].equipSkills)
	if hero._AutoFight then
		hero:InitPlayerAttackList()
		hero:AddAutofightTriggerSkill()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BiographySkills, "changeSkillSuccess")
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleSkills", self:getBiographyCareerEquipSkills(), self:GetRoleType())
end

function i3k_game_context:getBiographyCareerEquipSkills()
	if self._biographyCareer and self._biographyCareer[self._curBiographyCareer] then
		return self._biographyCareer[self._curBiographyCareer].equipSkills
	end
end

function i3k_game_context:changeBiographyCareerEquipQigong(skillId, state)
	if state then
		self._biographyCareer[self._curBiographyCareer].equipSpirits[skillId] = true
	else
		self._biographyCareer[self._curBiographyCareer].equipSpirits[skillId] = nil
	end
	local hero = i3k_game_get_player_hero()
	if hero then
		hero:UpdateTalentEffector()
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BiographyQigong, "changeQigongSuccess")
	--判断如果把装备的技能变成了被动则替换一个技能
	if state then
		local equipSkills = self._biographyCareer[self._curBiographyCareer].equipSkills
		local passiveSkill = g_i3k_game_context:GetRolePassiveSkills()
		local replaceSkills = {}
		for k, v in ipairs(equipSkills) do
			if passiveSkill[v] then
				for i, j in ipairs(self._biographySkills[self._curBiographyCareer]) do
					if not self:GetIsNotDrag(j) and not table.indexof(replaceSkills, j) and not table.indexof(equipSkills, j) then
						replaceSkills[k] = j
						break
					end
				end
			end 
		end
		if next(replaceSkills) then
			g_i3k_ui_mgr:PopupTipMessage(i3k_get_string(282))
			i3k_sbean.biography_class_skill_select(replaceSkills)
		end
	end
	--g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase, "updateRoleSkills", self:getBiographyCareerEquipSkills(), self:GetRoleType())
	--self:updateBiographyCareerProp()
end

function i3k_game_context:getBiographyCareerEquipQigong()
	if self._biographyCareer and self._biographyCareer[self._curBiographyCareer] then
		return self._biographyCareer[self._curBiographyCareer].equipSpirits
	end
end

--任务相关
function i3k_game_context:setBiographyTaskId(id)
	self._biographyCareer[self._curBiographyCareer].taskId = id
end

function i3k_game_context:setBiographyTaskValue(value)
	self._biographyCareer[self._curBiographyCareer].taskVal = value
end

function i3k_game_context:setBiographyTaskState(state)
	self._biographyCareer[self._curBiographyCareer].taskState = state
end

function i3k_game_context:getBiographyTask()
	if self._curBiographyCareer then
		local id = self._biographyCareer[self._curBiographyCareer].taskId
		local value = self._biographyCareer[self._curBiographyCareer].taskVal
		local state = self._biographyCareer[self._curBiographyCareer].taskState
		return id, value, state
	end
end

function i3k_game_context:updateBiographyTaskValue(task_type, target, mineIndex)
	if task_type ~= g_TASK_TOMORROW then
		local id, value, state = self:getBiographyTask()
		if id == 0 or state == 0 or not self._curBiographyCareer or not id then
			return
		end
		local cfg = i3k_db_wzClassLand_task[self._curBiographyCareer][id]
		if cfg.type ~= task_type then
			return
		end
		local is_true, is_finish, targetValue, shouldUpdateUI
			= self:updateCommonTaskValue(TASK_CATEGORY_BIOGRAPHY, task_type, cfg.arg1, cfg.arg2, value, target, mineIndex)
		if targetValue > value then
			self:LogTaskValue(TASK_CATEGORY_BIOGRAPHY, targetValue)
		end
		if shouldUpdateUI then
			if is_finish and (cfg.type == g_TASK_SHAPESHIFTING or cfg.type == g_TASK_KILL or cfg.type == g_TASK_CONVOY) then
				self:CheckSceneTriggerEffect(cfg, SCENE_EFFECT_CONDITION.doing)
			end
			g_i3k_ui_mgr:RefreshUI(eUIID_BiographyTask)
		end
		return is_true, is_finish
	else
		local is_true, is_finish = false, false
		if self._biographyCareer then
			for k, v in pairs(self._biographyCareer) do
				if v.taskId > 0 and v.taskState > 0 then
					if i3k_db_wzClassLand_task[k][v.taskId].type == g_TASK_TOMORROW then
						is_true, is_finish = true, true
						self._biographyCareer[k].taskVal = 1
					end
				end
			end
		end
		if is_finish then
			g_i3k_ui_mgr:RefreshUI(eUIID_BiographyTask)
		end
		return is_true, is_finish
	end
end

function i3k_game_context:updateBiographyTaskResponse()
	local id, value, state = self:getBiographyTask()
	if id == 0 then
		return
	end
	local cfg = i3k_db_wzClassLand_task[self._curBiographyCareer][id]
	if cfg.getTaskNpcID ~= 0 and state == 0 then
		g_i3k_game_context:OpenGetTaskDialogue(cfg, TASK_CATEGORY_BIOGRAPHY)
		return
	end
	local is_finish = self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, value)
	if is_finish then
		self:OpenFinishTaskDialogue(cfg, TASK_CATEGORY_BIOGRAPHY)
	elseif cfg.type == g_TASK_USE_ITEM_AT_POINT then
		if g_i3k_ui_mgr:GetUI(eUIID_BattleBase) then
			self._currTaskCat = TASK_CATEGORY_BIOGRAPHY
			g_i3k_ui_mgr:OpenUI(eUIID_BattleEquip) -- new battle
			g_i3k_ui_mgr:RefreshUI(eUIID_BattleEquip, cfg.arg1, TASK_CATEGORY_BIOGRAPHY)
		end
	elseif cfg.type == g_TASK_SHAPESHIFTING then--护送npc
		local data = i3k_sbean.task_conveynpc_req.new()
		data.npcId = cfg.arg1
		data.taskCat = TASK_CATEGORY_BIOGRAPHY
		i3k_game_send_str_cmd(data, i3k_sbean.task_conveynpc_res.getName())
	elseif cfg.type == g_TASK_COLLECT then
		self:TaskCollect(cfg.arg1)
	elseif cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		self:OpenNewNpcDialogue(cfg, TASK_CATEGORY_BIOGRAPHY, id)
	elseif cfg.type == g_TASK_EXPOSE_LETTER then
		
	elseif cfg.type == g_TASK_MATCH_TOKEN then
		
	end
end

function i3k_game_context:setBiographyFinished(id)
	self._biographyState = id
end

function i3k_game_context:checkOpenBiographyUI()
	if self._biographyState then
		g_i3k_ui_mgr:OpenUI(eUIID_OutCareerPractice)
		g_i3k_ui_mgr:RefreshUI(eUIID_OutCareerPractice, self._biographyState)
		self._biographyState = nil
	end
end

--是否显示首次通关奖励按钮
function i3k_game_context:checkIsShowFinishBtn(id)
	local tLvl = self:GetTransformLvl()
	local info = self:getFirstClearInfo(id)
	return tLvl >= i3k_db_first_clear_reward.openTransLevel and not (info and info.reward), info and info.enter and not info.reward
end
---------------------背包提示------------------
function i3k_game_context:setBagAutoSaleEquipTips(state)
	self._bagAutoSaleEquipTips = state
end

function i3k_game_context:getBagAutoSaleEquipTips()
	return self._bagAutoSaleEquipTips 
end

function i3k_game_context:setFirstClearInfo(info)
	self._firstClearInfo = info
end

function i3k_game_context:getFirstClearInfo(id)
	return self._firstClearInfo and self._firstClearInfo[id]
end

function i3k_game_context:refreshFirstClearInfo(id)
	if self._firstClearInfo[id] then
		self._firstClearInfo[id].reward = true
	else
		self._firstClearInfo[id] = {}
		self._firstClearInfo[id].enter = true
	end
end

-- 坐骑合集礼包
-- 返回字符串，或者nil
function i3k_game_context:checkPackageItem(itemID)
	local itemCfg = g_i3k_db.i3k_db_get_other_item_cfg(itemID)
	if itemCfg.type == UseItemHorse then -- 坐骑类型道具（只客户端使用） 检查该坐骑是否解锁
		local steedID = itemCfg.args1
		local info = self:getSteedInfoBySteedId(steedID)
		local huanhuaID = i3k_db_steed_cfg[steedID].huanhuaInitId
		local name = i3k_db_steed_huanhua[huanhuaID].name
		if info then return name end
	elseif itemCfg.type == UseItemPet then -- 宠物
		local petID = itemCfg.args1
		local havePet = self:IsHavePet(petID)
		local name = i3k_db_mercenaries[petID].name
		if havePet then return name end
	elseif g_i3k_db.i3k_db_check_item_use_as_weapon(itemID) then -- 神兵碎片
		local shenbingID = g_i3k_db.i3k_db_get_weapon_id_use_item(itemID)
		if shenbingID then
			local haveShenbing = self:IsHaveShenbing(shenbingID)
			local name = i3k_db_shen_bing[shenbingID].name
			if haveShenbing then return name end
		end
	end
	return nil
end
function i3k_game_context:transActiveItemName(itemID, count)
	local itemCfg = g_i3k_db.i3k_db_get_other_item_cfg(itemID)
	if itemCfg.type == UseItemHorse then -- 坐骑类型道具（只客户端使用） 检查该坐骑是否解锁
		local steedID = itemCfg.args1
		local huanhuaID = i3k_db_steed_cfg[steedID].huanhuaInitId
		local name = i3k_db_steed_huanhua[huanhuaID].name
		if count >= i3k_db_steed_cfg[steedID].tameNeedCount then
			return name
		else
			return nil
		end
	elseif itemCfg.type == UseItemPet then -- 宠物
		local petID = itemCfg.args1
		local name = i3k_db_mercenaries[petID].name
		if count >= i3k_db_mercenaries[petID].consumeCount then
			return name
		else
			return nil
		end
	elseif g_i3k_db.i3k_db_check_item_use_as_weapon(itemID) then -- 神兵碎片
		local shenbingID = g_i3k_db.i3k_db_get_weapon_id_use_item(itemID)
		if shenbingID then
			local name = i3k_db_shen_bing[shenbingID].name
			if count >= i3k_db_shen_bing[shenbingID].itemCount then
				return name
			else
				return nil
			end
		end
	end
end
-- return true, 需要弹出确认提示
function i3k_game_context:checkSteedPackages(packageID)
	local id = packageID
	if not id then return false end
	local items = g_i3k_db.i3k_db_get_gift_bag_items(id)
	if not items then return false end
	local nameTbl = {}
	for k, v in ipairs(items) do
		local itemID = v.itemID
		local itemCfg = g_i3k_db.i3k_db_get_other_item_cfg(itemID) -- 礼包里面可能配0
		if itemCfg then
			local steedID = itemCfg.args1
			-- 检查礼包道具
			local name = self:checkPackageItem(itemID)
			if name then 
				table.insert(nameTbl, name)
			end
			-- 检查背包中是否有道具
			local countBag = self:GetCommonItemCount(itemID)
			if countBag > 0 then 
				local trans = self:transActiveItemName(itemID, countBag)
				if trans then
					table.insert(nameTbl, trans)
				end
			end
			-- 检查仓库里是否有该道具
			local wareHouses = {g_PERSONAL_WAREHOUSE, g_PUBLIC_WAREHOUSE, g_HOMELAND_WAREHOUSE}
			for k, v in pairs(wareHouses) do
				local count = self:GetWareHouseItemCountSafe(itemID, v)
				if count > 0 then 
					local trans = self:transActiveItemName(itemID, count)
					if trans then
						table.insert(nameTbl, trans)
					end
				end
			end
		end
	end
	if #nameTbl == 0 then return nil end
	return table.concat(nameTbl, "、")
end
-- 各活动周奖励相关
function i3k_game_context:SetWeekRewardRedPoint(index, boo)
	self._weekRewardRedPoint[index] = boo
end
function i3k_game_context:GetWeekRewardRedPoint(index)
	return self._weekRewardRedPoint[index]
end
function i3k_game_context:SetWeekRewardTakeData(typeId, time, row)
	if self._weekRewardTakeData[typeId] == nil then
		self._weekRewardTakeData[typeId] = {times = time,  rows = row}
	else 
		self._weekRewardTakeData[typeId].times = time
		self._weekRewardTakeData[typeId].rows = row
	end
	self:UpdateWRRedPoint(typeId, time, row)
end
function i3k_game_context:GetWeekRewardTakeData(typeId)
	return self._weekRewardTakeData[typeId]
end
function i3k_game_context:UpdateWRRedPoint(typeId, times, rows)
	local alltimes = 0
	if times > 0 then
		for i = 1, #i3k_db_weekreward_table do
			if i3k_db_weekreward_table[i].typeId == typeId and times >= i3k_db_weekreward_table[i].condition[1] then
				alltimes = alltimes + 1
			end
		end
		if #rows < alltimes then 
			self:SetWeekRewardRedPoint(typeId, true)
		else
			self:SetWeekRewardRedPoint(typeId, false)
		end
	else
		self:SetWeekRewardRedPoint(typeId, false)
	end
end
function i3k_game_context:setSpringRollGroupID(groupID)
	self._springRollGroupID = groupID
end
function i3k_game_context:getSpringRollGroupID()
	return self._springRollGroupID or 0
end
function i3k_game_context:setSpringRollInfo(info)
	self._springRollInfo = info
end
function i3k_game_context:getSpringRollInfo()
	return self._springRollInfo
end
function i3k_game_context:getSpringRollNPCTimes(npcID)
	return self._springRollInfo.dayNpcFinishTime[npcID] or 0
end
function i3k_game_context:getSpringRollTotalTimes()
	return self._springRollInfo.lantern
end
function i3k_game_context:addSpringRollNPCTimes(npcID)
	if self._springRollInfo.dayNpcFinishTime[npcID] then
		self._springRollInfo.dayNpcFinishTime[npcID] = self._springRollInfo.dayNpcFinishTime[npcID] + 1
	else
		self._springRollInfo.dayNpcFinishTime[npcID] = 1
	end
end
function i3k_game_context:getSpringRollNPCInfo(npcID)
	local todaySpringRollGroup = i3k_db_spring_roll.npcConfig[self._springRollGroupID]
	if todaySpringRollGroup then
		return todaySpringRollGroup[npcID]
	end
	return nil
end
function i3k_game_context:refreshSpringRollLameFilled(index)
	self._springRollInfo.dayNeedIndex[index] = nil
	self._springRollInfo.lantern = self._springRollInfo.lantern - 1
end
function i3k_game_context:checkSpringRollOpen()
	local cfg = i3k_db_spring_roll.baseConfig
	local now = g_i3k_get_GMTtime(i3k_game_get_time())
	return now >= cfg.openTime and now <= cfg.endTime
end
function i3k_game_context:checkSpringRollNpc(id)
	local npc = self:getSpringRollNPCInfo(id)
	return npc ~= nil
end
function i3k_game_context:setSpringRollDropAwards(awards, semaphore)
	self._springRollAward = self._springRollAward or awards
	self._springRollSemaphore = self._springRollSemaphore or semaphore
	local ui = g_i3k_ui_mgr:GetUI(eUIID_SpringRollMain)
	if ui and self._springRollAward and self._springRollSemaphore then
		g_i3k_ui_mgr:AddTask(ui, {}, function (ui)
			g_i3k_ui_mgr:OpenUI(eUIID_TimingActivityTakeReward)
			g_i3k_ui_mgr:RefreshUI(eUIID_TimingActivityTakeReward, nil, self._springRollAward)
			self._springRollAward = nil
			self._springRollSemaphore = false
		end)
	end
end
function i3k_game_context:dayClearSpringRollData()
	self._springRollInfo.dayNpcFinishTime = {}
	g_i3k_ui_mgr:CloseUI(eUIID_SpringRollMain)
end


-----------新节日活动-------------------

function i3k_game_context:syncLoginNewFestivalTaskInfo(tasks)
	self:cleanNewFestivalAndRefresh()
	self._newFestival.tasks = tasks
	self:refreshNewFestivalTask()
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateTaskInfo")

end

-- 手动接取任务时候需要添加进去
function i3k_game_context:receiveNewFestivalTask(npcId, id)
	if not self._newFestival.tasks[npcId] then 
		self._newFestival.tasks[npcId] = {}
	end
	self._newFestival.tasks[npcId].id = id
	self._newFestival.tasks[npcId].state = g_POWER_NEW_FESTIVAL_STATE_UNACCEPT    
end

--开启任务
function i3k_game_context:StartNewFestivalTask(npcId) -- value可选
	local curTime = g_i3k_get_GMTtime(i3k_game_get_time())
	local info = self._newFestival.tasks[npcId] 
	self:addNewFestivalTask(npcId, info.id, curTime, info.value or 0)
end

-- 登陆同步和手动接取，都要调用这个接口添加进去
function i3k_game_context:addNewFestivalTask(npcId, id, receiveTime, value) -- value可选
	if not self._newFestivalTask then
		self._newFestivalTask = {}
	end
	local hash = g_i3k_db.i3k_db_get_new_festival_task_hash_id(id)
	self._newFestival.tasks[npcId].id = id
	self._newFestival.tasks[npcId].state = g_POWER_NEW_FESTIVAL_STATE_ACCEPT  
	self._newFestivalTask[hash] = { receiveTime = receiveTime, value = value, state = g_POWER_NEW_FESTIVAL_STATE_ACCEPT}
	self:AddTaskToDataList(hash, curTime)
end

function i3k_game_context:refreshNewFestivalTask()
	local curTime = g_i3k_get_GMTtime(i3k_game_get_time())
	local tasks = self._newFestival.tasks
	for k, v in pairs(tasks) do
		if v.state == 1 or v.state == 2 then -- 接取1， 0未接取，2完成，3领过奖了
			self:addNewFestivalTask(k, v.id, curTime, v.value)
		end
	end
end

-- 第二天刷新的逻辑
function i3k_game_context:cleanNewFestivalAndRefresh()
	if self._newFestival and self._newFestival.tasks then
		for k, v in pairs(self._newFestival.tasks) do
			-- v.state = g_POWER_NEW_FESTIVAL_STATE_UNACCEPT -- 设置为未接取
			g_i3k_logic:ChangePowerRepNpcTitleVisible(k, true)
		end
		self._newFestival.tasks = {}
	end
	if self._newFestivalTask then
		for k, v in pairs(self._newFestivalTask) do
			v.state = g_POWER_NEW_FESTIVAL_STATE_UNACCEPT -- 设置为未接取
			self:removeTaskData(k)
		end
		self._newFestivalTask = {}
	end
	g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateTaskInfo")
end


function i3k_game_context:setNewFestivalTaskState(hash, npcId, state)

	self._newFestival.tasks[npcId].state = state
	self._newFestivalTask[hash].state = state -- unknow
end

function i3k_game_context:getNewFestival()
	return self._newFestival
end

function i3k_game_context:getNewFestival_tasks()
	return self._newFestival.tasks
end
function i3k_game_context:getNewFestival_task(npcId)
	return self._newFestival.tasks[npcId]
end

function i3k_game_context:getAllNewFestivalTasks()
	return self._newFestivalTask or {}
end

function i3k_game_context:getNewFestivalTask_hash(hash)
	return self._newFestivalTask[hash]
end



function i3k_game_context:syncLoginNewFestivalPersonInfo(roleInfo)  
	self._newFestival.roleInfo = roleInfo
end

function i3k_game_context:GetNewFestivalActivePersonInfo()
	return self._newFestival.roleInfo
end

function i3k_game_context:GetNewFestivalActivePersonScore()
	return self._newFestival.roleInfo and self._newFestival.roleInfo.score or 0
end

function i3k_game_context:GetNewFestivalActivePersonRewards()
	return self._newFestival.roleInfo and self._newFestival.roleInfo.roleReward or {}
end


function i3k_game_context:GetNewFestivalActiveServerScore()
	return self._newFestival.wordScore or 0
end

function i3k_game_context:GetNewFestivalActiveServerRewards()
	return self._newFestival.roleInfo and self._newFestival.roleInfo.worldReward or {}
end

function i3k_game_context:SetNewFestivalActivePeronScore(score)
	if not self._newFestival.roleInfo then 
		self._newFestival.roleInfo = {}
	end
	self._newFestival.roleInfo.score = score
end

function i3k_game_context:SetNewFestivalActivePersonReward(score)
	self._newFestival.roleInfo.roleReward[score] = true
end

function i3k_game_context:SetNewFestivalActiveServerScore(score)
	self._newFestival.wordScore = score
end

function i3k_game_context:SetNewFestivalActiveServerReward(score)
	self._newFestival.roleInfo.worldReward[score] = true
end

function i3k_game_context:setNewFestivalTask(hash, value)
	self._newFestivalTask[hash].value = value
end

--检测当前圣诞树（或其他节日特殊Npc）当前显示状态
function i3k_game_context:CheckSpecialShowNpc()
	
	local score = g_i3k_game_context:GetNewFestivalActiveServerScore()
	
	local showLevel = 1
	for k,v in ipairs(i3k_db_new_festival_commit_server) do
		if v.commitValue <= score then
			showLevel = showLevel + 1
		end
	end
	g_i3k_logic:ChangeNpcPlayAction(i3k_db_new_festival_info.specialNpc,i3k_db_new_festival_info.action[showLevel])
end
function i3k_game_context:GetSpecialNpcShowAction()
	local showLevel = 1
	local score = g_i3k_game_context:GetNewFestivalActiveServerScore()
	for k,v in ipairs(i3k_db_new_festival_commit_server) do
		if v.commitValue <= score then
			showLevel = showLevel + 1
		end
	end
	return i3k_db_new_festival_info.action[showLevel]
end
--以下为任务方面函数

--任务完成领取奖励
function i3k_game_context:AddFinishTaskRewards(taskId)
	local taskCfg = i3k_db_new_festival_task[taskId]
	local rewards = g_i3k_db.i3k_db_cfgItemsToItems(taskCfg.rewards)
	if taskCfg.exp > 0 then
		table.insert(rewards, {id = 1000, count = taskCfg.exp}) -- 经验
	end
	if #(rewards) ~= 0 then
		g_i3k_ui_mgr:ShowGainItemInfo(rewards) -- 需要在套一层table
	end
end
-- 获取奖励信息，
-- arg1  领取的奖励分段值    
function i3k_game_context:AddReveivedRewards_Person(rewards)
	local tab = {}
	local rewards = g_i3k_db.i3k_db_cfgItemsToItems(rewards)
	if #(rewards) ~= 0 then
		g_i3k_ui_mgr:ShowGainItemInfo(rewards) -- 需要在套一层table
	end
end


function i3k_game_context:updateNewFestivalTaskResponse(hash)
	local taskCfg = g_i3k_db.i3k_db_new_festival_get_taskCfg_by_hash(hash)
	local cfg = g_i3k_db.i3k_db_task_info_convert_db(taskCfg)
	local curTask = self:getNewFestivalTask_hash(hash)
	local isFinished = self:IsTaskFinished(cfg.type, cfg.arg1, cfg.arg2, curTask.value)
	--[[g_TASK_KILL				= 1;--杀怪
	g_TASK_COLLECT 			= 2;--采集
	g_TASK_USE_ITEM 			= 7;--提交道具
	g_TASK_NEW_NPC_DIALOGUE	= 12;--新npc对话--]]
	if cfg.type == g_TASK_COLLECT then
		self:TaskCollect(cfg.arg1)
	elseif cfg.type == g_TASK_USE_ITEM then
		self:taskSubItem(TASK_CATEGORY_NEW_FESTIVAL, cfg.arg1, cfg.arg2)
	elseif cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		self:finishNewFestivalTaskDiaglogure(cfg)
	else
		if isFinished then
			--g_i3k_game_context:OpenFinishTaskDialogue(cfg, TASK_CATEGORY_POWER_REP)
			-- TODO
		end
	end
end

function i3k_game_context:updateNewFestivalTaskValue(type, id)
	local list = self:getAllNewFestivalTasks()
	local finishedCfg = {}
	for k, v in pairs(list) do
		local taskCfg = g_i3k_db.i3k_db_new_festival_get_taskCfg_by_hash(k)
		if taskCfg.taskConditionType == type and taskCfg.args[1] == id then
			local value = v.value
			local isFinished = self:IsTaskFinished(type, taskCfg.args[1], taskCfg.args[2], value)
			if not isFinished then
				value = value + 1
				self:setNewFestivalTask(k, value)
				isFinished = self:IsTaskFinished(type, taskCfg.args[1], taskCfg.args[2], value)
				if i3k_game_get_map_type() == g_FIELD then
					if isFinished then
						g_i3k_game_context:RefreshMissionEffect()
						self:SetAutoFight(false)
					end
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleTask, "updateNewFestivalTask", k, value, isFinished)
				end
				table.insert(finishedCfg, {isThis = taskCfg.args[1] == id, isFinished = isFinished})
			end
		end
	end

	return finishedCfg
end


function i3k_game_context:finishNewFestivalTaskDiaglogure(cfg)
	local dialogueList, motable = g_i3k_db.i3k_db_get_new_festival_task_finish_desc(cfg)
	local fun
	if cfg.type == g_TASK_NEW_NPC_DIALOGUE then
		fun = (function()
				local callBack = function()
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"playTaskFinishEffect")
					g_i3k_ui_mgr:InvokeUIFunction(eUIID_BattleBase,"onUpdateBatterEquipShow") --检测有没有新加入背包的物品
				end
			local data = i3k_sbean.task_dialog_req.new()
			data.npcId = cfg.arg1
			data.dialogId = cfg.arg2
			data.taskCat = TASK_CATEGORY_NEW_FESTIVAL
			data.__callback = callBack
			i3k_game_send_str_cmd(data, "task_dialog_res")
		end)
	end
	if #dialogueList ~= 0 then
		g_i3k_ui_mgr:OpenUI(eUIID_Dialogue1)
		g_i3k_ui_mgr:RefreshUI(eUIID_Dialogue1, dialogueList,motable,fun,TASK_CATEGORY_NEW_FESTIVAL)
	end
end


-----------新节日活动 END-------------------=======

--判断是否拥有纪念币相关道具
function i3k_game_context:getIsHadCommemorativeCoin()
	local coins = self:GetCommonItemCanUseCount(i3k_db_commecoin_cfg.buyConfig.getPropId)
	local changeCoins = self:GetCommonItemCanUseCount(i3k_db_commecoin_cfg.exchangeConfig.getPropId)
	return coins > 0 or changeCoins > 0
end
--使用万能币兑换道具
function i3k_game_context:UseCoinChangeBagItem(index, nums)
	for i = 1, 2 do
		local id = i3k_db_commecoin_changewoods[index]["goods_id" .. i]
		local price = i3k_db_commecoin_changewoods[index]["goods_count" .. i]
		self:UseBagMiscellaneous(id, price * nums)
	end
end
--兑换比例变化，刷新同步
function i3k_game_context:UpdateScaleToChangeCoin()
	local function callback()
		i3k_sbean.sync_activities_comCoin(true, true)
		g_i3k_ui_mgr:CloseUI(eUIID_ExChangeCoin)
	end
	local desc = i3k_get_string(19095)
	g_i3k_ui_mgr:ShowMessageBox1(desc, callback)
end
--判断是否展示纪念币活动
function i3k_game_context:IsShowSouvenorCoinAct()
	if self:GetLevel() >= i3k_db_commecoin_cfg.baseConfig.needLevel then
		local nowtime  = g_i3k_get_GMTtime(i3k_game_get_time())
		if i3k_db_commecoin_cfg.baseConfig.openDate < nowtime and nowtime < i3k_db_commecoin_cfg.baseConfig.closeDate then
			if nowtime > i3k_db_commecoin_cfg.baseConfig.buyCloseTime then
				return self:getIsHadCommemorativeCoin()
			end
			return true
		end
	end
	return false
end
function i3k_game_context:setSouvenirCoinOnLogin(info)
	self._souvenirCoinInfo = info
end
function i3k_game_context:getSouvenirCoinInfo()
	return self._souvenirCoinInfo
end
function i3k_game_context:getSouvenirCoinInfo(index)
	self._souvenirCoinInfo.takeHoldReward[index] = true
end
--判断纪念币活动有无宝箱可以领取
function i3k_game_context:IsCanTakeBoxForCoinAct()
	for i, e in ipairs(i3k_db_commecoin_addValueNode) do
		local canTake, isTaked = g_i3k_db.i3k_db_get_JNBbox_state(i, self._souvenirCoinInfo.canTakeHoldReward, self._souvenirCoinInfo.takeHoldReward)
		if canTake and not isTaked and e.isHadBox == 1 then
			return true
		end
	end
	return false
end
