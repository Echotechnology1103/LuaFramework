ExploitData = ExploitData or BaseClass()

function ExploitData:__init()
	if ExploitData.Instance then
		ErrorLog("[ExploitData] attempt to create singleton twice!")
		return
	end
	ExploitData.Instance = self
	self.daily_data = -1
end

function ExploitData:__delete()
end

--获取某一级功勋消耗配置
function ExploitData.GetExploitConsumeCfg(lv)
	local consumCfg = nil
	if MeritoriousCfg then
		consumCfg = MeritoriousCfg.MeritoriousConsumes[lv] and MeritoriousCfg.MeritoriousConsumes[lv]
	end
	return consumCfg
end

--获取增加每日功勋数列表
function ExploitData.GetAddExploitCountList()
	return MeritoriousCfg and MeritoriousCfg.clientShow
end

--获取某一级功勋属性加成配置
function ExploitData.GetAttrAddCfg(lv)
	local realCfg = {}
	local totalCfg = ExploitData.GetServerCfg() and ExploitData.GetServerCfg()[lv] or {}
	for k, v in pairs(totalCfg) do
		table.insert(realCfg, {type = v.type, value = v.value})
	end
	return realCfg
end

function ExploitData.GetServerCfg()
	if cc.FileUtils:getInstance():isFileExist("scripts/config/server/config/attr/MeritoriousAttrsConfig" .. ".lua") then
		return ConfigManager.Instance:GetServerConfig("attr/MeritoriousAttrsConfig")[1][1]
	end
end


function ExploitData:SetDailyData(protocol)
	self.daily_data = protocol.daily_count
end

function ExploitData:GetDailyData()
	return self.daily_data
end

function ExploitData:GetOneAchieveCfgByAchiID(achieveId)
	return AchieveData.GetAchieveConfig(achieveId) and AchieveData.GetAchieveConfig(achieveId)[1]
end

function ExploitData:GetRemindNum() 
	if IS_ON_CROSSSERVER == true then
		return 0
	end
	local role_lv = RoleData.Instance:GetAttr(OBJ_ATTR.CREATURE_LEVEL)
	if role_lv < MeritoriousCfg.activeLevel then return 0 end
	
	local exploitLv = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_MERITORIOUS_LEVEL) or 0			--功勋等级
	local exploitVal = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_MERITORIOUS_VALUE) or 0			--拥有功勋值
	local nextConsumCfg = ExploitData.GetExploitConsumeCfg(exploitLv + 1)

	if not nextConsumCfg then return 0 end
	
	return (exploitVal >= nextConsumCfg.consumes[1].count and role_lv >= nextConsumCfg.reqLevel) and 1 or 0

	-- local data = ExploitData.GetAddExploitCountList()

	
	-- local level = RoleData.Instance:GetAttr(OBJ_ATTR.CREATURE_LEVEL)
	-- local circle = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_CIRCLE)
	-- local is_finish = false
	-- for _,v in pairs(data) do
	-- 	local tar_level = v.level or 0
	-- 	local tar_circle = v.circle or 0
	-- 	if tar_circle > 0 then
	-- 		if circle >= tar_circle then
	-- 			is_finish = AchieveData.Instance:GetAwardState(v.achieveId).finish == 1 and true or false
	-- 			if not is_finish then
	-- 				return 1
	-- 			end	
	-- 		end	
	-- 	elseif level >= tar_level then	
	-- 		is_finish = AchieveData.Instance:GetAwardState(v.achieveId).finish == 1 and true or false
	-- 		if not is_finish then
	-- 			return 1
	-- 		end
	-- 	end	
	-- end

	-- return 0
end