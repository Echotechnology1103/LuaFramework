require("scripts/game/exploit/exploit_data")
require("scripts/game/exploit/exploit_view")
ExploitCtrl = ExploitCtrl or BaseClass(BaseController)

function ExploitCtrl:__init()
	if ExploitCtrl.Instance then
		ErrorLog("[ExploitCtrl]:Attempt to create singleton twice!")
	end
	ExploitCtrl.Instance = self

	self.data = ExploitData.New()
	self.view = ExploitView.New(ViewName.Exploit)
	self:RegisterAllProtocols()
	self:RegisterAllEvents()
end

function ExploitCtrl:__delete()
	if self.role_data_event then
		RoleData.Instance:UnNotifyAttrChange(self.role_data_event)
		self.role_data_event = nil
	end

	-- self.view:DeleteMe()
	-- self.view = nil

	self.data:DeleteMe()
	self.data = nil

    ExploitCtrl.Instance = nil
end

function ExploitCtrl:RegisterAllProtocols()
	self:RegisterProtocol(SCIssueExploitUpSucc, "OnIssueExploitUpSucc")
	self:RegisterProtocol(SCIssueExploitDailyData, "OnIssueExploitDailyData")
end

function ExploitCtrl:RegisterAllEvents()
	GlobalEventSystem:Bind(LoginEventType.RECV_MAIN_ROLE_INFO, BindTool.Bind(self.ExploitDailyDataReq, self))
	GlobalEventSystem:Bind(OtherEventType.PASS_DAY, BindTool.Bind(self.ExploitDailyDataReq, self))
	RemindManager.Instance:RegisterCheckRemind(BindTool.Bind(self.GetRemindNum, self), RemindName.Exploit)
	self.role_data_event = BindTool.Bind1(self.RoleDataChangeCallback, self)
	RoleData.Instance:NotifyAttrChange(self.role_data_event)
end

function ExploitCtrl:RoleDataChangeCallback(key, value)
	if key == OBJ_ATTR.ACTOR_MERITORIOUS_LEVEL then
		if self.view then
			self.view:FlushExploitLvInfo()
			RemindManager.Instance:DoRemind(RemindName.Exploit)
		end
	elseif key == OBJ_ATTR.ACTOR_MERITORIOUS_VALUE then
		RemindManager.Instance:DoRemind(RemindName.Exploit)
	end
end

function ExploitCtrl:GetRemindNum(remind_name)
	if remind_name == RemindName.Exploit then
		-- print("提醒数量", self.data:GetRemindNum())
		return self.data:GetRemindNum() 
	end
end

--------下发-----------

--功勋是否升级成功下发
function ExploitCtrl:OnIssueExploitUpSucc(protocol)
	-- if protocol.issue_state == 0 then
	-- 	self.view:Flush()
	-- end
end

--每日功勋数据
function ExploitCtrl:OnIssueExploitDailyData(protocol)
	self.data:SetDailyData(protocol)
	RemindManager.Instance:DoRemind(RemindName.Exploit)
	--self.view:Flush()
end


-----------请求------------

--功勋升级请求
function ExploitCtrl:UpgradeExploitReq()
	local protocol = ProtocolPool.Instance:GetProtocol(CSExploitUpgradeReq)
	protocol:EncodeAndSend()
end

--每日功勋数据请求
function ExploitCtrl:ExploitDailyDataReq()
	local protocol = ProtocolPool.Instance:GetProtocol(CSExploitDailyDataReq)
	protocol:EncodeAndSend()
end