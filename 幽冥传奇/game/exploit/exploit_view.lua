--暂时系统界面合并到角色页面2017/9/18
ExploitView = ExploitView or BaseClass(XuiBaseView)

function ExploitView:__init()
	self.texture_path_list[1] = 'res/xui/exploit.png'
	self.texture_path_list[2] = 'res/xui/equipment.png'
	self.texture_path_list[3] = "res/xui/red_package.png"
	self.is_async_load = false	
	self.config_tab = {
		-- {"common_ui_cfg", 1, {0}},
		{"exploit_ui_cfg", 1, {0}},
		-- {"common_ui_cfg", 2, {0}},
	}
	-- self.exploit_list = nil 
end

function ExploitView:__delete()
end

function ExploitView:ReleaseCallBack()
	-- if self.exploit_list then
	-- 	self.exploit_list:DeleteMe()
	-- 	self.exploit_list = nil 
	-- end
end

function ExploitView:LoadCallBack(index, loaded_times)
	if loaded_times <= 1 then
		-- self:CreateExploitList()
		XUI.AddClickEventListener(self.node_t_list.btn_close.node, BindTool.Bind1(self.OnClose, self), true)
		XUI.AddClickEventListener(self.node_t_list.btn_ques.node, BindTool.Bind1(self.OnQuesInfo, self), true)
		XUI.AddClickEventListener(self.node_t_list.btn_up_lv.node, BindTool.Bind1(self.UpExploit, self), true)
	end
end

function ExploitView:OpenCallBack()
	ExploitCtrl.Instance:ExploitDailyDataReq()
	AudioManager.Instance:PlayOpenCloseUiEffect()
end

function ExploitView:ShowIndexCallBack(index)
	self:Flush(index)
end

function ExploitView:CloseCallBack(is_all)
	AudioManager.Instance:PlayOpenCloseUiEffect()
end

function ExploitView:OnClose()
	self:Close()
end
function ExploitView:OnQuesInfo()
	DescTip.Instance:SetContent(Language.Exploit.InterpContents, Language.Exploit.InterpTitles)
end
function ExploitView:UpExploit()
	-- if IS_ON_CROSSSERVER then
	-- 	SysMsgCtrl.Instance:ErrorRemind(Language.Common.OnCrossServerTip)
	-- 	return 
	-- end	
	ExploitCtrl.Instance:UpgradeExploitReq()
end

function ExploitView:OnFlush(param_t, index)
	-- self:FlushExploitList()
	self:FlushExploitLvInfo()
end

-- function ExploitView:CreateExploitList()
-- 	if self.exploit_list == nil then
-- 		local ph = self.ph_list.ph_exploit_list
-- 		self.exploit_list = ListView.New()
-- 		self.exploit_list:Create(ph.x, ph.y, ph.w, ph.h, nil, ExploitRender, nil, nil, self.ph_list.ph_list_item)
-- 		self.exploit_list:GetView():setAnchorPoint(0, 0)
-- 		self.exploit_list:SetItemsInterval(5)
-- 		self.exploit_list:SetMargin(3)
-- 		self.exploit_list:SetJumpDirection(ListView.Top)
-- 		self.exploit_list:SetSelectCallBack(BindTool.Bind(self.SelectCallback, self))  --按钮回调
-- 		self.node_t_list.layout_bg_exploit.node:addChild(self.exploit_list:GetView(), 100)
-- 	end
-- end

-- function ExploitView:SelectCallback(item, index)
-- 	if not item or not item:GetData() then return end
-- 	local data = item:GetData()
-- 	if ActivityData.IsSwitchToOtherView(data.teleId) then
-- 		local tele_cfg = ActivityData.GetCommonTeleCfg(data.teleId)
-- 		ActivityCtrl.Instance:OpenOneActView(tele_cfg)
-- 	else
-- 		Scene.Instance:CommonSwitchTransmitSceneReq(data.teleId)
-- 	end
-- 	self:Close()
-- end

function ExploitView:FlushExploitLvInfo()
	local exploitLv = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_MERITORIOUS_LEVEL) --功勋等级
	local exploitVal = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_MERITORIOUS_VALUE)		--拥有功勋值
	local curConsumCfg = ExploitData.GetExploitConsumeCfg(exploitLv)
	local nexConsumCfg = ExploitData.GetExploitConsumeCfg(exploitLv + 1)
	if curConsumCfg then
		self.node_t_list.txt_1.node:setString(curConsumCfg.office_name)
	else
		self.node_t_list.txt_1.node:setString("")
	end
	local color = COLOR3B.OLIVE
	if nexConsumCfg then
		color = exploitVal < nexConsumCfg.consumes[1].count and COLOR3B.RED or COLOR3B.BRIGHT_GREEN
		self.node_t_list.txt_2.node:setString(nexConsumCfg.office_name)
		self.node_t_list.txt_consume_exploit.node:setString(nexConsumCfg.consumes[1].count)
	else
		self.node_t_list.txt_2.node:setString("")
		self.node_t_list.txt_consume_exploit.node:setString(Language.Common.AlreadyTopLv)
	end
	self.node_t_list.txt_had_exploit.node:setColor(color)
	self.node_t_list.txt_had_exploit.node:setString(exploitVal)
	local exploitCnt = ExploitData.Instance:GetDailyData()
	-- self.node_t_list.txt_exploit_count.node:setString(exploitCnt)
	
	local curContent = nil
	local nexContent = nil
	local curAttrCfg = ExploitData.GetAttrAddCfg(exploitLv) 
	if next(curAttrCfg) then
		curContent = RoleData.FormatAttrContent(curAttrCfg)
	else
		curContent = Language.Common.No
	end
	local nexAttrCfg = ExploitData.GetAttrAddCfg(exploitLv + 1)
	if next(nexAttrCfg) then
		nexContent = RoleData.FormatAttrContent(nexAttrCfg, {value_str_color = COLOR3B.GREEN})
	else
		nexContent = Language.Common.AlreadyTopLv
	end
	RichTextUtil.ParseRichText(self.node_t_list.rich_cur_txt.node, curContent, 24)
	RichTextUtil.ParseRichText(self.node_t_list.rich_next_txt.node, nexContent, 24)
end

-- function ExploitView:FlushExploitList()
-- 	local data = ExploitData.GetAddExploitCountList()

-- 	local filter_list = {}
-- 	local level = RoleData.Instance:GetAttr(OBJ_ATTR.CREATURE_LEVEL)
-- 	local circle = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_CIRCLE)
-- 	for _,v in pairs(data) do
-- 		local tar_level = v.level or 0
-- 		local tar_circle = v.circle or 0
-- 		if tar_circle > 0 then
-- 			if circle >= tar_circle then
-- 				table.insert(filter_list,v)
-- 			end	
-- 		elseif level >= tar_level then	
-- 			table.insert(filter_list,v)
-- 		end	
-- 	end	

-- 	local function sort_list()	
-- 		return function(c, d)
-- 			local bool_finish =  AchieveData.Instance:GetAwardState(c.achieveId) and AchieveData.Instance:GetAwardState(c.achieveId).finish
-- 			local bool_finish_1 = AchieveData.Instance:GetAwardState(d.achieveId) and AchieveData.Instance:GetAwardState(d.achieveId).finish
-- 			if bool_finish ~= bool_finish_1 then
-- 				return bool_finish < bool_finish_1
-- 			else
-- 				return c.achieveId < d.achieveId
-- 			end
-- 		end
-- 	end
-- 	table.sort(filter_list, sort_list()) 
	
-- 	self.exploit_list:SetDataList(filter_list)
-- end

-- ExploitRender = ExploitRender or BaseClass(BaseRender)
-- function ExploitRender:__init()
-- end

-- function ExploitRender:__delete()
-- end

-- function ExploitRender:CreateChild()
-- 	BaseRender.CreateChild(self)
-- end

-- function ExploitRender:OnFlush()
-- 	if not self.data then return end
-- 	if self.index % 2 == 0 then
-- 		self.node_tree.img9_bg.node:loadTexture(ResPath.GetCommon("bg_118"))
-- 	end
-- 	self.node_tree.img_bg.node:loadTexture(ResPath.GetExpliot("bg_".. self.data.icon))
-- 	local achieve_cfg = ExploitData.Instance:GetOneAchieveCfgByAchiID(self.data.achieveId)
-- 	RichTextUtil.ParseRichText(self.node_tree.txt_desc.node, self.data.describe)
-- 	self.node_tree.txt_acitivity_name.node:setString(self.data.name)
-- 	self.node_tree.txt_rewar_num.node:setString("+" .. achieve_cfg.awards[1].count)
-- 	local finish_cond = achieve_cfg.conds[1].count
-- 	local is_finish = AchieveData.Instance:GetAwardState(self.data.achieveId) and AchieveData.Instance:GetAwardState(self.data.achieveId).finish == 1 and true or false
-- 	local prog = nil 
-- 	if is_finish then 
-- 		prog = finish_cond .. "/" .. finish_cond
-- 	else
-- 		prog = AchieveData.Instance:GetAchieveFinishCount(achieve_cfg.conds[1].eventId).count .. "/" .. finish_cond
-- 	end
-- 	self.node_tree.txt_progress.node:setString(prog)
-- 	self:ShowFinishStamp(is_finish)
-- end

-- function ExploitRender:ShowFinishStamp(show)
-- 	local size = self.view:getContentSize()
-- 	if not self.stamp then
-- 		self.stamp = XUI.CreateImageView(size.width-50, size.height / 2 + 6, ResPath.GetCommon("stamp_7"), true)
-- 		self.view:addChild(self.stamp, 999)
-- 	end	

-- 	self.stamp:setVisible(show)
-- end

-- -- function ExploitRender:CreateSelectEffect() 
	
-- -- end
