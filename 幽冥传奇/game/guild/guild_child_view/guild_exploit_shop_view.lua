
GuildExploitShopPage = GuildExploitShopPage or BaseClass()

function GuildExploitShopPage:__init()
	self.view = nil
end	

function GuildExploitShopPage:__delete()
	--ClientCommonButtonDic[CommonButtonType.COMPOSE_XF_ACTIVATE_BTN] = nil
	self:RemoveEvent()
	self.view = nil
	
end	

--初始化页面接口
function GuildExploitShopPage:InitPage(view)
	--绑定要操作的元素
	self.view = view
	self.is_list_jump = 0
	
	self:InitEvent()
end	

-- --移除事件
function GuildExploitShopPage:RemoveEvent()
	if self.grid_scroll_list then
		self.grid_scroll_list:DeleteMe()
		self.grid_scroll_list = nil
	end

	if self.role_data_change_back then
		RoleData.Instance:UnNotifyAttrChange(self.role_data_change_back)
		self.role_data_change_back = nil 
	end
end

-- --初始化事件
function GuildExploitShopPage:InitEvent()
	self:CreatGridScroll()
	self.role_data_change_back = BindTool.Bind1(self.RoleDataChangeCallback,self)	
	RoleData.Instance:NotifyAttrChange(BindTool.Bind1(self.role_data_change_back, self))
end


function GuildExploitShopPage:UpdateData(data)
	if self.grid_scroll_list == nil then return end
	local data = ShopData.Instance:GetOneColumnData(9)
	local open_day = OtherData.Instance:GetOpenServerDays()
	local cfg_data = {}
	for k, v in pairs(data) do
		if open_day >= v.dayslimit[1] then
			if open_day <= v.dayslimit[2] or v.dayslimit[2] == -1 then
				table.insert(cfg_data, v)
			end
		end
	end
	self.grid_scroll_list:SetDataList(cfg_data)
	if self.is_list_jump == 0 then
		self.grid_scroll_list:JumpToTop()
	end

	local gongxun_num = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_GUILD_EXPLOIT)
	self.view.node_t_list.txt_num.node:setString(gongxun_num)
end

function GuildExploitShopPage:RoleDataChangeCallback()
	self.is_list_jump = 1
	self:UpdateData()
end

function GuildExploitShopPage:CreatGridScroll()
	local ph = self.view.ph_list.ph_guild_list
	local item_ui_cfg = self.view.ph_list.ph_item_guild_info
	local grid_scroll = GridScroll.New()
	-- ClientCommonButtonDic[CommonButtonType.SHOP_GRID] = grid_scroll
	grid_scroll:Create(ph.x + ph.w / 2, ph.y + ph.h / 2, ph.w, ph.h, 3, item_ui_cfg.h + 5, ExploitShopRender, ScrollDir.Vertical, false, item_ui_cfg)
	self.grid_scroll_list = grid_scroll
	self.grid_scroll_list:SetSelectCallBack(BindTool.Bind(self.SelectItemCallBack, self))
	self.view.node_t_list.layout_exploit_shop.node:addChild(grid_scroll:GetView(), 100)
end

function GuildExploitShopPage:SelectItemCallBack(item)
	if item == nil or item:GetData() == nil then return end
	local data = item:GetData()
	
	
end


------ExploitShopRender------------
ExploitShopRender = ExploitShopRender or BaseClass(BaseRender)
function ExploitShopRender:__init()
	self.item_cell = nil
end

function ExploitShopRender:__delete()
	if self.item_cell then
		self.item_cell:DeleteMe()
		self.item_cell = nil
	end
end

function ExploitShopRender:CreateChild()
	BaseRender.CreateChild(self)
	if self.cache_select and self.is_select then
		self.cache_select = false
		self:CreateSelectEffect()
	end
	
	self.item_cell = BaseCell.New()
	self.item_cell:SetPosition(self.ph_list.ph_item_cell.x, self.ph_list.ph_item_cell.y)
	-- self.item_cell:SetEventEnabled(false)
	self.item_cell:GetView():setAnchorPoint(cc.p(0,0))
	self.view:addChild(self.item_cell:GetView(), 100)
	
	XUI.AddClickEventListener(self.node_tree.buyBtn.node, BindTool.Bind(self.OnClickBuyBtn, self), true)
	
	local act_eff = RenderUnit.CreateEffect(920, self.view, 200, nil, nil, self.ph_list.ph_item_cell.x + self.ph_list.ph_item_cell.w / 2 , self.ph_list.ph_item_cell.y + self.ph_list.ph_item_cell.h / 2)
	
end

function ExploitShopRender:OnClickBuyBtn()
	if nil ~= self.click_callback then
		self.click_callback(self)
	end

	ViewManager.Instance:Open(ViewName.QuickBuy)
	ViewManager.Instance:FlushView(ViewName.QuickBuy, 0, "param", {self.data})
end

function ExploitShopRender:OnClick()
	if nil ~= self.click_callback then
		self.click_callback(self)
	end
end

function ExploitShopRender:OnFlush()	
	if nil == self.data then
		return
	end
	
	local item_config = ItemData.Instance:GetItemConfig(self.data.item)
	if nil == item_config then
		return
	end
	self.item_cell:SetData({["item_id"] = self.data.item, ["num"] = self.data.buyOnceCount, ["is_bind"] = self.data.price[1].bind and 1 or 0})

	self.node_tree.lbl_item_name.node:setColor(Str2C3b(string.sub(string.format("%06x", item_config.color), 1, 6)))
	self.node_tree.lbl_item_name.node:setString(item_config.name)

	local cost_path = ShopData.GetMoneyTypeIcon(self.data.price[1].type)
	self.node_tree.img_cost.node:loadTexture(cost_path)
	self.node_tree.lbl_item_cost.node:setColor(COLOR3B.WHITE)
	self.node_tree.lbl_item_cost.node:setString(self.data.price[1].price)

	local rest_buy = ""
	if self.data.dayLimitCount > 0 then
		rest_buy = string.format(Language.Common.RestCount, self.data.dayLimitCount - self.data.bought_time)
	end
	self.node_tree.lbl_rest_buy.node:setString(rest_buy)

	local guild_info = GuildData.Instance:GetGuildInfo()
	local limit_txt = ""
	if guild_info.cur_guild_level < self.data.needGuildLevel then
		limit_txt = string.format(Language.Guild.GuildShopLimit, self.data.needGuildLevel)
		self.node_tree.buyBtn.node:setGrey(true)
		self.node_tree.buyBtn.node:setEnabled(false)
	else
		limit_txt = ""
		self.node_tree.buyBtn.node:setGrey(false)
		self.node_tree.buyBtn.node:setEnabled(true)
	end
	self.node_tree.txt_limit_lev.node:setString(limit_txt)
end

function ExploitShopRender:CreateSelectEffect()
	if nil == self.node_tree.img9_bg then
		self.cache_select = true
		return
	end
	local size = self.node_tree.img9_bg.node:getContentSize()
	self.select_effect = XUI.CreateImageViewScale9(size.width / 2, size.height / 2, size.width, size.height, ResPath.GetCommon("img9_109"), true)
	self.select_effect:setScale(1.1)
	self.select_effect:setScaleX(1.05)
	if nil == self.select_effect then
		ErrorLog("BaseRender:CreateSelectEffect fail")
		return
	end

	self.node_tree.img9_bg.node:addChild(self.select_effect, 999)
end