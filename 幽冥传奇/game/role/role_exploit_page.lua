--角色功勋页面
RoleExploitPage = RoleExploitPage or BaseClass()

function RoleExploitPage:__init()
	self.view = nil
	self.exploit_list = nil 
end	


function RoleExploitPage:__delete()
	self:RemoveEvent()
	if self.exploit_list then
		self.exploit_list:DeleteMe()
		self.exploit_list = nil 
	end
	self.view = nil
end	

--初始化页面接口
function RoleExploitPage:InitPage(view)
	self.view = view
	self:CreateExploitList()
	self:InitEvent()
	ExploitCtrl.Instance:ExploitDailyDataReq()
end	

--初始化事件
function RoleExploitPage:InitEvent()
	XUI.AddClickEventListener(self.view.node_t_list.btn_up_lv.node, BindTool.Bind1(self.UpExploit, self), true)
	self.role_data_event = BindTool.Bind1(self.RoleDataChangeCallback, self)
	RoleData.Instance:NotifyAttrChange(self.role_data_event)
end	

--移除事件
function RoleExploitPage:RemoveEvent()
	if self.role_data_event then
		RoleData.Instance:UnNotifyAttrChange(self.role_data_event)
		self.role_data_event = nil
	end
end	

function RoleExploitPage:RoleDataChangeCallback(key, value)
	if key == OBJ_ATTR.ACTOR_MERITORIOUS_LEVEL 
		or key == OBJ_ATTR.ACTOR_MERITORIOUS_VALUE then
		self:UpdateData()
	end
end

--更新视图界面
function RoleExploitPage:UpdateData(data)
	self:FlushExploitList()
	self:FlushExploitLvInfo()
end	


function RoleExploitPage:CreateExploitList()
	if self.exploit_list == nil then
		local ph = self.view.ph_list.ph_exploit_list
		self.exploit_list = ListView.New()
		self.exploit_list:Create(ph.x, ph.y, ph.w, ph.h, nil, ExploitRender, nil, nil, self.view.ph_list.ph_list_item)
		self.exploit_list:GetView():setAnchorPoint(0, 0)
		self.exploit_list:SetItemsInterval(5)
		self.exploit_list:SetMargin(3)
		self.exploit_list:SetJumpDirection(ListView.Top)
		self.exploit_list:SetSelectCallBack(BindTool.Bind(self.SelectCallback, self))  --按钮回调
		self.view.node_t_list.layout_bg_exploit.node:addChild(self.exploit_list:GetView(), 100)
	end
end


function RoleExploitPage:UpExploit()
	if IS_ON_CROSSSERVER then
		SysMsgCtrl.Instance:ErrorRemind(Language.Common.OnCrossServerTip)
		return 
	end	
	ExploitCtrl.Instance:UpgradeExploitReq()
end


function RoleExploitPage:SelectCallback(item, index)
	if not item or not item:GetData() then return end
	local data = item:GetData()
	if ActivityData.IsSwitchToOtherView(data.teleId) then
		local tele_cfg = ActivityData.GetCommonTeleCfg(data.teleId)
		ActivityCtrl.Instance:OpenOneActView(tele_cfg)
	else
		Scene.Instance:CommonSwitchTransmitSceneReq(data.teleId)
	end
	self.view:Close()
end

function RoleExploitPage:FlushExploitLvInfo()
	local exploitLv = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_MERITORIOUS_LEVEL) --功勋等级
	local exploitVal = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_MERITORIOUS_VALUE)		--拥有功勋值
	local curConsumCfg = ExploitData.GetExploitConsumeCfg(exploitLv)
	local nexConsumCfg = ExploitData.GetExploitConsumeCfg(exploitLv + 1)
	if curConsumCfg then
		self.view.node_t_list.txt_1.node:setString(curConsumCfg.office_name)
	else
		self.view.node_t_list.txt_1.node:setString("")
	end
	local color = COLOR3B.OLIVE
	if nexConsumCfg then
		color = exploitVal < nexConsumCfg.consumes[1].count and COLOR3B.RED or COLOR3B.BRIGHT_GREEN
		self.view.node_t_list.txt_2.node:setString(nexConsumCfg.office_name)
		self.view.node_t_list.txt_consume_exploit.node:setString(nexConsumCfg.consumes[1].count)
	else
		self.view.node_t_list.txt_2.node:setString("")
		self.view.node_t_list.txt_consume_exploit.node:setString(Language.Common.AlreadyTopLv)
	end
	self.view.node_t_list.txt_had_exploit.node:setColor(color)
	self.view.node_t_list.txt_had_exploit.node:setString(exploitVal)
	local exploitCnt = ExploitData.Instance:GetDailyData()
	self.view.node_t_list.txt_exploit_count.node:setString(exploitCnt)
	
	local curContent = nil
	local nexContent = nil
	local curAttrCfg = ExploitData.GetAttrAddCfg(exploitLv) 
	if next(curAttrCfg) then
		curContent = RoleData.FormatAttrContent(curAttrCfg)
	else
		curContent = Language.Common.No
	end
	local nexAttrCfg = ExploitData.GetAttrAddCfg(exploitLv + 1)
	if next(nexAttrCfg) then
		nexContent = RoleData.FormatAttrContent(nexAttrCfg, {value_str_color = COLOR3B.GREEN})
	else
		nexContent = Language.Common.AlreadyTopLv
	end
	RichTextUtil.ParseRichText(self.view.node_t_list.rich_cur_txt.node, curContent, 24)
	RichTextUtil.ParseRichText(self.view.node_t_list.rich_next_txt.node, nexContent, 24)
end

function RoleExploitPage:FlushExploitList()
	local data = ExploitData.GetAddExploitCountList()

	local filter_list = {}
	local level = RoleData.Instance:GetAttr(OBJ_ATTR.CREATURE_LEVEL)
	local circle = RoleData.Instance:GetAttr(OBJ_ATTR.ACTOR_CIRCLE)
	for _,v in pairs(data) do
		local tar_level = v.level or 0
		local tar_circle = v.circle or 0
		if tar_circle > 0 then
			if circle >= tar_circle then
				table.insert(filter_list,v)
			end	
		elseif level >= tar_level then	
			table.insert(filter_list,v)
		end	
	end	

	local function sort_list()	
		return function(c, d)
			local bool_finish =  AchieveData.Instance:GetAwardState(c.achieveId) and AchieveData.Instance:GetAwardState(c.achieveId).finish
			local bool_finish_1 = AchieveData.Instance:GetAwardState(d.achieveId) and AchieveData.Instance:GetAwardState(d.achieveId).finish
			if bool_finish ~= bool_finish_1 then
				return bool_finish < bool_finish_1
			else
				return c.achieveId < d.achieveId
			end
		end
	end
	table.sort(filter_list, sort_list()) 
	
	self.exploit_list:SetDataList(filter_list)
end