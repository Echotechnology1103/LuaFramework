---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/11/10 10:52
---
BossBloodView = class("BossBloodView", BaseItem); --BossBloodView or class("BossBloodView", BaseItem);
local this = BossBloodView

local bloodPrefabTab = { "purpleblood", "yellowblood", "blueblood", "redblood", "greenblood", "orangeblood", };
local bossBloodLen = 261;

BossBloodView.bossConfig = {};
BossBloodView.bossConfig.hpmax = 0;--总血量
BossBloodView.bossConfig.current = 0;--当前血量
BossBloodView.bossConfig.every = 0;--每管血的数量
BossBloodView.bossConfig.hp_sum = 0;--总共多少管血量


BossBloodView.currentBlood = nil;
BossBloodView.secondBlood = nil;
BossBloodView.lastBlood = nil;

BossBloodView.bloodItems = {};

BossBloodView.VisibleBitState = {
    TopRightIcon    = BitState.State[1],
    CloseBlood      = BitState.State[2],
}

function BossBloodView:ctor(parent_node, object_info)

    self.abName = "blood";
    self.image_ab = "iconasset/icon_boss_head";
    self.assetName = "BossBloodView"
    self.layer = "UI"
    self.object_info = object_info;

    self.updateLis = {};
    --local bossConfig = {};--Config.db_creep[1002030];
    --bossConfig.hpmax = 100000000;
    --bossConfig.level = 31;
    --bossConfig.current = bossConfig.hpmax;
    --bossConfig.hp_sum = 99;
    --bossConfig.every = bossConfig.hpmax / bossConfig.hp_sum;
    --self.bossConfig = bossConfig;

    self.visible_state = BitState()

    self.events = {};
    self.schedules = {};
    self.bloods = {}
    BossBloodView.Instance = self;
    BossBloodView.super.Load(self)
end

function BossBloodView:dctor()
    if self.role_icon then
        self.role_icon:destroy()
        self.role_icon = nil
    end
    GlobalEvent:RemoveTabListener(self.events);
    if self.schedule then
        GlobalSchedule:Stop(self.schedule);
    end

    if self.ownner_blood then
        self.ownner_blood:destroy();
    end
    if self.lastBlood then
        self.lastBlood:destroy();
    end
    if self.secondBlood then
        self.secondBlood:destroy();
    end
    if self.currentBlood then
        self.currentBlood:destroy();
    end

    if self.shield_blood then
        self.shield_blood:destroy()
    end

    if self.bossHpUpdate and self.object_info then
        self.object_info:RemoveListener(self.bossHpUpdate);
    end

    if self.bossBuffsUpdate and self.object_info then
        self.object_info:RemoveListener(self.bossBuffsUpdate)
    end

    if self.belongHpUpdate and self.belong_info then
        self.belong_info:RemoveListener(self.belongHpUpdate);
    end

    if self.enemyHpUpdate and self.enemy_info then
        self.enemy_info:RemoveListener(self.enemyHpUpdate);
    end
    if self.objectInfoDestroy and self.object_info then
        self.object_info:RemoveListener(self.objectInfoDestroy);
    end
    self.objectInfoDestroy = nil;
    self.enemyHpUpdate = nil;
    self.enemy_info = nil;
    if self.bloods then
        for _, bloods in pairas(self.bloods) do
            for _, blood in pairs(bloods) do
                if blood then
                    blood:destroy()
                end
            end
        end
        self.bloods = nil
    end
end

function BossBloodView:ClearBlood()
    if self.bossHpUpdate and self.object_info then
        self.object_info:RemoveListener(self.bossHpUpdate);
    end

    if self.belongHpUpdate and self.belong_info then
        self.belong_info:RemoveListener(self.belongHpUpdate);
    end

    if self.enemyHpUpdate and self.enemy_info then
        self.enemy_info:RemoveListener(self.enemyHpUpdate);
    end
    self.enemyHpUpdate = nil;
    self.enemy_info = nil;

    self.object_info = nil;
    self.uid = nil;
    SetGameObjectActive(self.ownner, false);
    self.ownneruid = nil;

    self:Reset3Blood();
    SetGameObjectActive(self.angry, false);
end

function BossBloodView:Reset3Blood()
    if self.lastBlood then
        --self.lastBlood:destroy();
        SetVisible(self.lastBlood, false)
    end
    --self.lastBlood = nil;
    if self.secondBlood then
        --self.secondBlood:destroy();
        SetVisible(self.secondBlood, false)
    end
    --self.secondBlood = nil;
    if self.currentBlood then
        --self.currentBlood:destroy();
        SetVisible(self.currentBlood, false)
    end
    --self.currentBlood = nil;
end

function BossBloodView.GetInstance()
    if not BossBloodView.Instance then
        BossBloodView.Instance = BossBloodView(LayerManager:GetInstance():GetLayerByName(LayerManager.LayerNameList.UI));
        --HotUpdate.bossBlood = BossBloodView.Instance;
    end
    return BossBloodView.Instance;
end

function BossBloodView:LoadCallBack()
    self.nodes = {
        "ownner/percent", "boss/boss_head_mask/boss_head", "boss", "ownner", "boss/boss_blood_con", "ownner/blood_con",
        "ownner/ownner_level_txt", "ownner/head_mask/head", "ownner/blood_num", "boss/boss_level_txt",
        "boss/bossName", "boss/boss_blood_num", "purpleblood", "redblood", "greenblood", "yellowblood", "blueblood", "orangeblood",
        "boss/angry/angry_text", "boss/angry", "ownner/ownner_name", "cyanblood",

        "enemy", "enemy/enemy_head_mask", "enemy/blood_frame_bg", "enemy/enemy_level_txt", "enemy/enemybgframe/enemyframe", "enemy/enemy_blood_con/enemy_blood",
        "enemy/enemybgframe", "enemy/enemy_head_mask/enemyhead", "enemy/enemy_level_bg", "enemy/enemy_name", "enemy/enemy_blood_con", "enemy/enemy_name_bg",
        "boss/angry/angry_bg",
        "sheild","sheild/sheild_blood","sheild/shield_value",
    }
    self:GetChildren(self.nodes)

    --SetLocalPosition(self.transform, 0, 0, 0);
    --Notify.ShowText(GetSizeDeltaX(self.bg.transform))
    self:InitUI();

    SetAlignType(self.ownner, bit.bor(AlignType.Top, AlignType.Null));
    SetAlignType(self.enemy, bit.bor(AlignType.Top, AlignType.Null));
    SetAlignType(self.boss, bit.bor(AlignType.Top, AlignType.Null));

    -- self.auto_order_count = 19
    -- self:SetOrderByParentAuto()

    self:AddEvents();

    if self.isShow ~= nil then
        local bo = self.isShow
        self.isShow = nil
        self:ShowBlood(bo)
    else
        self:ShowBlood(false)
    end
    SetVisible(self.sheild, false)
    -- if not self.object_info then
    --     self:ShowBlood(false);
    -- end
end

function BossBloodView:InitValue(object_info)
    self:Reset3Blood();
    self.lastBlood = self:CreateBlood(self.boss_blood_con.transform, 8, 2);
    if self.bossConfig.hp_sum > 1 then
        self.secondBlood = self:CreateBlood(self.boss_blood_con.transform, (self.bossConfig.hp_sum - 1) % 6, 2);
        self.currentBlood = self:CreateBlood(self.boss_blood_con.transform, self.bossConfig.hp_sum % 6, 2);
    else
        self.currentBlood = self.lastBlood;
    end

    self.boss_blood_num.text = "X" .. tostring(self.bossConfig.hp_sum);
    if self.bossConfig.current > self.bossConfig.hpmax then
        self.bossConfig.current = self.bossConfig.hpmax
    end
    self.bossName.text = object_info.name;--string.format("%0.2f", ((self.bossConfig.current / self.bossConfig.hpmax * 100))) .. "%";--tostring((self.bossConfig.current / self.bossConfig.hpmax * 100)) .. "%";
    self.boss_level_txt.text = "Level: " .. tostring(object_info.level);

    if Config.db_creep[object_info.id] then
        self:UpdateBossHead(tostring(Config.db_creep[object_info.id].avatar));
    end

    --if object_info["ext"] and object_info["ext"]["belong_role"] then
    --    local belong_role = object_info["ext"]["belong_role"];
    --    if belong_role == "0" then
    --        belong_role = object_info["belong_role"]
    --    end
    --    local role = SceneManager:GetInstance():GetObject(belong_role);
    --    local role_info = SceneManager:GetInstance():GetObjectInfo(belong_role);
    --
    --    if self.preRoleBelong and self.preRoleBelong.object_info then
    --        if role_info and self.preRoleBelong.object_info.id == role_info.id then
    --
    --        else
    --            if self.preRoleBelong.name_container then
    --                self.preRoleBelong.name_container:ShowBelong(false);
    --            end
    --        end
    --    end
    --
    --    if role_info and role then
    --        local isInGuard = Vector2.Distance(role_info.coord , coord) < config.guard;
    --        role.name_container:ShowBelong(isInGuard);
    --        self.preRoleBelong = role;
    --    end
    --end

end

function BossBloodView:InitUI()
    self.percent = GetText(self.percent);
    --self.head = GetImage(self.head);
    self.blood_num = GetText(self.blood_num);
    self.ownner_level_txt = GetText(self.ownner_level_txt);
    self.ownner_name = GetText(self.ownner_name);
    self.shield_value = GetText(self.shield_value)

    self.blood_num.gameObject:SetActive(false);
    self.percent.gameObject:SetActive(false);

    self.bossName = GetText(self.bossName);
    self.boss_head = GetImage(self.boss_head);
    self.boss_blood_num = GetText(self.boss_blood_num);
    self.boss_level_txt = GetText(self.boss_level_txt);
    self.angry_bg = GetImage(self.angry_bg)

    self.bossName.gameObject:SetActive(true);

    self.purpleblood.gameObject:SetActive(false);
    self.redblood.gameObject:SetActive(false);
    self.greenblood.gameObject:SetActive(false);
    self.yellowblood.gameObject:SetActive(false);
    self.blueblood.gameObject:SetActive(false);
    self.orangeblood.gameObject:SetActive(false);
    SetGameObjectActive(self.cyanblood, false);

    self.angry_text = GetText(self.angry_text);

    SetGameObjectActive(self.angry, false);

    self.enemy_level_txt = GetText(self.enemy_level_txt);
    self.enemy_blood = BossBloodItem(self.enemy_blood);
    self.enemy_name = GetText(self.enemy_name);
    self.enemy_level_bg = GetImage(self.enemy_level_bg);
    --self.enemy_head = GetImage(self.enemyhead);
    self.shield_blood = BossBloodItem(self.sheild_blood)

    SetGameObjectActive(self.enemy);


    --关闭UI计时器
    --self.schedule = GlobalSchedule.StartFun(handler(self, self.HandleCheckClose), 0.3, -1);

    if self.object_info then
        self:UpdateShowTime(self.object_info);
        --self:HandleObjectInfo(self.object_info);
    end

    self.ownner_blood = self:CreateBlood(self.blood_con.transform, 8, 1);
    self.ownner.gameObject:SetActive(false);
end
--更新Boss血条
function BossBloodView:UpdateBossBlood(current, immi)
    local pre = self.bossConfig.current;
    local preHpSum = self.bossConfig.hp_sum;
    self.bossConfig.current = current;
    self.bossConfig.hp_sum = math.ceil(current / self.bossConfig.every);
    local diff = pre - current;

    --self.bossName.text = self.bossConfig.name;--string.format("%0.2f", ((self.bossConfig.current / self.bossConfig.hpmax * 100))) .. "%";
    self.boss_blood_num.text = "X" .. tostring(self.bossConfig.hp_sum);
    --大于2管血--elseif diff > self.bossConfig.every then --大于1管血,--血管数只要有变化就直接切
    if diff > (self.bossConfig.every * 2) or diff > self.bossConfig.every or preHpSum ~= self.bossConfig.hp_sum then

        if self.secondBlood then
            --self.secondBlood:destroy();
            SetVisible(self.secondBlood, false)
        end
        if self.currentBlood then
            --self.currentBlood:destroy();
            SetVisible(self.currentBlood, false)
        end

        if self.bossConfig.hp_sum > 1 then
            self.secondBlood = self:CreateBlood(self.boss_blood_con.transform, (self.bossConfig.hp_sum - 1) % 5, 2);
            self.currentBlood = self:CreateBlood(self.boss_blood_con.transform, self.bossConfig.hp_sum % 5, 2);
        else
            self.currentBlood = self.lastBlood;
        end
        local left = diff % self.bossConfig.every;
        if not self.currentBlood.is_dctored then
            self.currentBlood:UpdateCurrentBloodImmi((current % self.bossConfig.every), self.bossConfig.every);
        end
    else
        --少于1管血
        if not self.currentBlood.is_dctored then
            if not immi then
                self.currentBlood:UpdateCurrentBlood((current % self.bossConfig.every), self.bossConfig.every);
            else
                self.currentBlood:UpdateCurrentBloodImmi((current % self.bossConfig.every), self.bossConfig.every);
            end
        end
    end
end

function BossBloodView:CurrentBloodTweenFun()
    --if self.bossConfig.current <= 0 then
    --    self:destroy();
    --end
end

function BossBloodView:UpdateBelongBlood(current, max)
    --if current > max then
    --    print2(current , max);
    --end
    if self.ownner_blood then
        --print2("更新玩家血量 " .. tostring(current) .. "/" .. tostring(max));
        self.ownner_blood:UpdateCurrentBlood(current, max);
    end
end

function BossBloodView:UpdateEnemyBlood(current, max)
    if self.enemy_blood then
        --print2("更新玩家血量 " .. tostring(current) .. "/" .. tostring(max));
        self.enemy_blood:UpdateCurrentBlood(current, max);
    end
end
--更新归属者血条
function BossBloodView:UpdateOwnnerBlood(headId)

end

--更新boss头像
function BossBloodView:UpdateBossHead(headId)
    lua_resMgr:SetImageTexture(self, self.boss_head, self.image_ab, headId, true);
end
--更新归属者头像
function BossBloodView:UpdateOwnnerHead(object_info)
    --if headId == 1 then
    --    lua_resMgr:SetImageTexture(self, self.head, "main_image", "img_role_head_1", true);
    --elseif headId == 2 then
    --    lua_resMgr:SetImageTexture(self, self.head, "main_image", "img_role_head_2", true);
    --end

    if object_info and object_info.uid == self.ownneruid then
        return ;
    end
    self.ownneruid = object_info.uid;
    if self.role_icon then
        self.role_icon:destroy();
    end
    local param = {}
    --param['is_can_click'] = false
    --param['click_fun'] = call_back
    param["is_squared"] = false
    param["is_hide_frame"] = true
    param["size"] = 52
    param["role_data"] = object_info
    self.role_icon = RoleIcon(self.head)
    self.role_icon:SetData(param)
end
--更新玩家血条头像
function BossBloodView:UpdateEnemyHead(object_info)
    --if headId == 1 then
    --    lua_resMgr:SetImageTexture(self, self.enemy_head, "main_image", "img_role_head_1", true);
    --elseif headId == 2 then
    --    lua_resMgr:SetImageTexture(self, self.enemy_head, "main_image", "img_role_head_2", true);
    --end

    if self.enemy_icon then
        self.enemy_icon:destroy();
    end
    local param = {}
    --param['is_can_click'] = false
    --param['click_fun'] = call_back
    param["is_squared"] = false
    param["is_hide_frame"] = true
    param["size"] = 72
    param["role_data"] = object_info
    if object_info and not object_info.icon then
        object_info.icon = {};
        object_info.icon.md5 = "";
        if object_info.gender == 1 then
            object_info.icon.pic = 11;
        else
            object_info.icon.pic = 21;
        end
    end

    self.enemy_icon = RoleIcon(self.enemyhead)
    self.enemy_icon:SetData(param)
end
--1紫色2红色3绿色4黄色5蓝色6橙色
function BossBloodView:CreateBlood(_parent, color, type)
    --color = color or math.floor(math.random(1, 5));
    self.bloods[type] = self.bloods[type] or {}
    type = type or 2;
    local blood = nil;
    if color == 0 then
        blood = self.bloods[type][color] or BossBloodItem(newObject(self.purpleblood), type);
    elseif color == 3 then
        blood = self.bloods[type][color] or BossBloodItem(newObject(self.orangeblood), type);
    elseif color == 4 then
        blood = self.bloods[type][color] or BossBloodItem(newObject(self.greenblood), type);
    elseif color == 1 then
        blood = self.bloods[type][color] or BossBloodItem(newObject(self.yellowblood), type);
    elseif color == 5 then
        blood = self.bloods[type][color] or BossBloodItem(newObject(self.blueblood), type);
    elseif color == 2 then
        blood = self.bloods[type][color] or BossBloodItem(newObject(self.cyanblood), type);
    else
        blood = self.bloods[type][color] or BossBloodItem(newObject(self.redblood), type);
    end
    blood.transform:SetParent(_parent);
    SetLocalPosition(blood.transform, 0, 0, 0);
    SetLocalRotation(blood.transform, 0, 0, 0);
    SetLocalScale(blood.transform, 1, 1, 1)
    SetAsLastSibling(blood.transform)
    SetVisible(blood, true)
    blood:ResetData(type)
    self.bloods[type][color] = blood
    return blood;
end


function BossBloodView:AddEvents()
    GlobalEvent.AddEventListenerInTab(SceneEvent.MONSTER_HP_CHANGE, handler(self, self.HandleObjectInfo), self.events);
    GlobalEvent.AddEventListenerInTab(SceneEvent.MONSTER_BELONG_CHANGE, handler(self, self.HandleBossBelong), self.events);

    local function call_back()
        SetVisible(self.gameObject, false)
    end

    GlobalEvent.AddEventListenerInTab(EventName.GameReset, call_back, self.events);
    GlobalEvent.AddEventListenerInTab(EventName.SDKLogOut, call_back, self.events);

    local callback = function()
        if self.enemy_info then
            lua_panelMgr:GetPanelOrCreate(RoleMenuPanel, self.enemy, "Bottom"):Open(self.enemy_info)
        end

    end
    AddClickEvent(self.enemy.gameObject, callback)

    GlobalEvent.AddEventListenerInTab(EventName.ChangeSceneEnd, function()
        self:ClearBlood()
    end, self.events);
end

function BossBloodView:HandleClose(target, x, y)
    local localPos = self.transform.localPosition;

    local end_call_back = function()
        self:destroy();
    end

    local moveAction = cc.MoveTo(0.3, localPos.x, localPos.y - 100, localPos.z)
    --moveAction = cc.EaseIn(moveAction , 3);
    local finishAction = cc.CallFunc(end_call_back)
    local action = cc.Sequence(moveAction, finishAction);
    cc.ActionManager:GetInstance():addAction(action, self.transform);
end

function BossBloodView:HandleObjectInfo(object_info)
    if object_info and self.object_info then
        if self.object_info.id == object_info.id then
            self:UpdateBossBlood(object_info.hp);
        end
    end
end

function BossBloodView:HandleBossBelong(object_info)
    if object_info then
        if self.belong_info then
            --if self.belong_info.id == object_info.id then
            --    SetGameObjectActive(self.ownner , true);
            --else
            --更换归属
            local gender = self.belong_info.gender;
            self.belong_info:RemoveListener(self.belongHpUpdate);
            self.belong_info = object_info;
            self.belongHpUpdate = self.belong_info:BindData("hp", handler(self, self.HandleBindBelong));
            if self.bloodType == 1 or not self.bloodType then
                self.ownner.gameObject:SetActive(true);
            end
            self.ownner_level_txt.text = object_info.level;
            self.ownner_name.text = tostring(object_info.name);
            self:UpdateBelongBlood(self.belong_info.hp, self.belong_info.hpmax);
            if gender ~= self.belong_info.gender then
                self:UpdateOwnnerHead(self.belong_info);
            end

            --end
        else
            self.belong_info = object_info;
            self.belongHpUpdate = self.belong_info:BindData("hp", handler(self, self.HandleBindBelong));
            if self.bloodType or not self.bloodType == 1 then
                -- or not self.bloodType
                self.ownner.gameObject:SetActive(true);
            end
            self.ownner_level_txt.text = object_info.level;
            self.ownner_name.text = tostring(object_info.name);
            self:UpdateBelongBlood(self.belong_info.hp, self.belong_info.hpmax);
            self:UpdateOwnnerHead(self.belong_info);
        end

    else
        if self.belong_info then
            self.belong_info:RemoveListener(self.belongHpUpdate);
            self.belong_info = nil;
        end
        self.ownner.gameObject:SetActive(false);
    end

end

function BossBloodView:HandleCheckClose()
    if self.object_info then
        local bossConfig = Config.db_boss[self.object_info.id];
        local coord
        local config = Config.db_creep[self.object_info.id];
        if bossConfig then
            coord = String2Table(bossConfig.coord);
            coord = { x = coord[1], y = coord[2] };
        elseif self.object_info.coord then
            coord = self.object_info.coord
        end
        local main_role = SceneManager:GetInstance():GetMainRole();
        if main_role and coord and config then
            local main_role_data = main_role.object_info;
            --if Vector2.Distance()
            --print2(Vector2.Distance(main_role_data.coord, coord));
            if Vector2.Distance(main_role_data.coord, coord) > config.guard + 100 then
                GlobalEvent.BrocastEvent(DungeonEvent.CLOSE_BOSS_BLOOD);
            end
        end
    end


    --if self.updateTime then
    --    print2(os.time() - self.updateTime);
    --    if os.time() - self.updateTime > 1 then
    --        GlobalSchedule.StopFun(self.schedule);
    --        GlobalEvent.BrocastEvent(DungeonEvent.CLOSE_BOSS_BLOOD);
    --    end
    --end
    if self.bossConfig.current <= 0 then
        GlobalSchedule.StopFun(self.schedule);
        GlobalEvent.BrocastEvent(DungeonEvent.CLOSE_BOSS_BLOOD);
    end

end
--理轮值是同一个血条界面不会显示两个不同世界BOSS的血条的.
--让策划不要把两个世界boss配得太近
function BossBloodView:UpdateShowTime(object_info)
    self.updateTime = os.time();
    if not self.object_info then
        local bossConfig = {};--Config.db_creep[1002030];
        bossConfig.hpmax = object_info.hpmax;

        bossConfig.current = object_info.hp;
        local creep = Config.db_creep[object_info.id];
        if creep then
            bossConfig.hp_sum = creep.hp_sum;
            bossConfig.level = creep.level;
        else
            bossConfig.hp_sum = 1;
            bossConfig.level = 1;
        end

        bossConfig.every = bossConfig.hpmax / bossConfig.hp_sum;
        bossConfig.hp_sum = math.ceil(bossConfig.current / bossConfig.every);
        self.bossConfig = bossConfig;

        self:InitValue(object_info);
        self:UpdateBossBlood(object_info.hp, true);
        --只在初始化的时候加一次事件,不然就扑街了
        --if self.bossHpUpdate then
        --    object_info:RemoveListener(self.bossHpUpdate);
        --end
        self.bossHpUpdate = object_info:BindData("hp", handler(self, self.HandleBindHp));
        SetVisible(self.sheild, false)
        if creep.rarity == enum.CREEP_RARITY.CREEP_RARITY_TIMEBOSS 
            or creep.rarity == enum.CREEP_RARITY.CREEP_RARITY_SIEGEBOSS then
            self:HandleBindBuffs()
            self.bossBuffsUpdate = object_info:BindData("buffs", handler(self,self.HandleBindBuffs))
        end
        self.objectInfoDestroy = object_info:BindData("destroy", handler(self, self.HandleObjectInfoDestroy));
        if creep.rarity == enum.CREEP_RARITY.CREEP_RARITY_BOSS and tonumber(creep.opts) ~= 0 then
            local tab = String2Table(creep.opts);
            if #tab > 0 then
                SetGameObjectActive(self.angry, true);
                self.angry_text.text = tostring(tonumber(creep.opts));
            end
            local scene_id = SceneManager:GetInstance():GetSceneId()
            local scenecfg = Config.db_scene[scene_id]
            if scenecfg.stype == enum.SCENE_STYPE.SCENE_STYPE_BOSS_HOME then
                lua_resMgr:SetImageTexture(self,self.angry_bg, 'dungeon_image', 'vigor_icon',true)
            end
        else
            SetGameObjectActive(self.angry, false);
        end
        --else
        --    if self.bossHpUpdate and self.object_info then
        --        self.object_info:RemoveListener(self.bossHpUpdate);
        --    end
        --
        --    if self.belongHpUpdate and self.belong_info then
        --        self.belong_info:RemoveListener(self.belongHpUpdate);
        --    end
    end
    --if self.uid and  self.uid ~= object_info.uid then
    --    print2("为什么会出现这样的BUG");
    --end
    self.uid = object_info.uid;
    self.object_info = object_info;
end

function BossBloodView:ChangeInfo(object_info)
    if not self.object_info then
        print2("这个接口不应该出现啊");
        return ;
    end
    if self.bossHpUpdate and self.object_info then
        self.object_info:RemoveListener(self.bossHpUpdate);
    end

    if self.objectInfoDestroy and self.object_info then
        self.object_info:RemoveListener(self.objectInfoDestroy);
    end

    if self.belongHpUpdate and self.belong_info then
        self.belong_info:RemoveListener(self.belongHpUpdate);
    end

    if self.bossBuffsUpdate and self.object_info then
        self.object_info:RemoveListener(self.bossBuffsUpdate)
    end

    local bossConfig = {};--Config.db_creep[1002030];
    bossConfig.hpmax = object_info.hpmax;

    bossConfig.current = object_info.hp;
    local creep = Config.db_creep[object_info.id];
    if creep then
        bossConfig.hp_sum = creep.hp_sum;
        bossConfig.level = creep.level;
    else
        bossConfig.hp_sum = 1;
        bossConfig.level = 1;
    end

    bossConfig.every = bossConfig.hpmax / bossConfig.hp_sum;
    bossConfig.hp_sum = math.ceil(bossConfig.current / bossConfig.every);
    self.bossConfig = bossConfig;

    self:InitValue(object_info);
    --只在初始化的时候加一次事件,不然就扑街了
    --if self.bossHpUpdate then
    --    object_info:RemoveListener(self.bossHpUpdate);
    --end
    self.bossHpUpdate = object_info:BindData("hp", handler(self, self.HandleBindHp));
    self.objectInfoDestroy = object_info:BindData("destroy", handler(self, self.HandleObjectInfoDestroy));

    if creep.rarity == enum.CREEP_RARITY.CREEP_RARITY_BOSS and tonumber(creep.opts) ~= 0 then
        local tab = String2Table(creep.opts);
        if #tab > 0 then
            SetGameObjectActive(self.angry, true);
            self.angry_text.text = tostring(tonumber(creep.opts));
        end
    end

    self.uid = object_info.uid;
    self.object_info = object_info;

    self:HandleBindHp();
end
BossBloodView.__preHp = 0;
function BossBloodView:HandleBindHp()
    --if not self.is_dctored then
    self:UpdateBossBlood(self.object_info.hp);
    --print2(self.object_info.uid .. "__当前血量__" .. self.object_info.hp);
    --if self.__preHp ~= 0 and self.__preHp < self.object_info.hp then
    --    print2("原血量不对");
    --end
    --self.__preHp = self.object_info.hp;
    --end

end

function BossBloodView:HandleObjectInfoDestroy()
    if self.object_info then
        BloodCtrl:GetInstance():CloseBossBloodView(self.object_info);
    end
end

function BossBloodView:HandleBindBelong()
    --if not self.is_dctored then
    self:UpdateBelongBlood(self.belong_info.hp, self.belong_info.hpmax);
    --end
end
function BossBloodView:HandleBindEnemy()
    --if not self.is_dctored then
    self:UpdateEnemyBlood(self.enemy_info.hp, self.enemy_info.hpmax);
    --end
end

function BossBloodView:SetVisibleState(state,is_add)
    if is_add then
        self.visible_state:Add(state)
    else
        self.visible_state:Remove(state)
    end
    local bo = not self.visible_state:Contain()
    self:ShowBlood(bo)
end

function BossBloodView:ShowBlood(bool)
    bool = toBool(bool);

    if self.isShow == bool then
        return
    end

    self.isShow = bool;
    if self.gameObject then
        SetGameObjectActive(self.gameObject, bool);
    end
end
--bloodType 1 boss血条 2 人物血条
function BossBloodView:ShowBloodType(bloodType)
    self.bloodType = bloodType;
    SetVisible(self.sheild, false)
    if bloodType == 1 then
        SetGameObjectActive(self.boss, true);
        SetGameObjectActive(self.enemy, false);
    else
        SetGameObjectActive(self.boss, false);
        SetGameObjectActive(self.ownner, false);
        SetGameObjectActive(self.enemy, true);
    end
    SetAsFirstSibling(self.transform);
end

function BossBloodView:HandleEnemy(object_info)
    if object_info then
        if self.enemy_info then
            local gender = self.enemy_info.gender;
            self.enemy_info:RemoveListener(self.enemyHpUpdate);
            self.enemy_info = object_info;
            self.enemyHpUpdate = self.enemy_info:BindData("hp", handler(self, self.HandleBindEnemy));
            SetGameObjectActive(self.enemy, true);
            --self.enemy_level_txt.text = object_info.level;
            SetTopLevelImg(object_info.level , self.enemy_level_bg , self,self.enemy_level_txt);
            self.enemy_name.text = tostring(object_info.name);
            self:UpdateEnemyBlood(self.enemy_info.hp, self.enemy_info.hpmax);
            if gender ~= self.enemy_info.gender then
                self:UpdateEnemyHead(self.enemy_info);
            end

        else
            self.enemy_info = object_info;
            self.enemyHpUpdate = self.enemy_info:BindData("hp", handler(self, self.HandleBindEnemy));
            SetGameObjectActive(self.enemy, true);
            --self.enemy_level_txt.text = object_info.level;
            SetTopLevelImg(object_info.level , self.enemy_level_bg , self,self.enemy_level_txt);
            self.enemy_name.text = tostring(object_info.name);
            self:UpdateEnemyBlood(self.enemy_info.hp, self.enemy_info.hpmax);
            self:UpdateEnemyHead(self.enemy_info);
        end

    else
        if self.enemy_info then
            self.enemy_info:RemoveListener(self.enemyHpUpdate);
            self.enemy_info = nil;
        end
        SetGameObjectActive(self.enemy, false);
    end
end

function BossBloodView:HandleBindBuffs()
    if self.object_info then
        local buffer = (self.object_info:GetBuffByID(enum.BUFF_ID.BUFF_ID_CROSS_BOSS_SHIELD) or
             self.object_info:GetBuffByID(enum.BUFF_ID.BUFF_ID_SIEGEWAR_BOSS_SHIELD))
        if buffer then
            SetVisible(self.sheild, true)
            local cur = buffer.value
            local max = buffer.origin
            self.shield_value.text = string.format("%s/%s", math.floor(cur/10000), max/10000)
            self.shield_blood:UpdateCurrentBlood(cur, max)
        else
            SetVisible(self.sheild, false)
        end
    end
end