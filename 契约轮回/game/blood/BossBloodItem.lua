---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/11/10 10:52
---
BossBloodItem = BossBloodItem or class("BossBloodItem", Node);
local this1 = BossBloodItem

BossBloodItem.bossBloodLen = 236;
BossBloodItem.bloodHeight = 21;
BossBloodItem.max = 0;

--type == 1
--type == 2
--type == 3
BossBloodItem.__cache_count = 3
function BossBloodItem:ctor(obj, type)
    self.abName = "blood";
    self.image_ab = "blood_image";
    self.assetName = "BossBloodItem"
    self.layer = "UI"
    if obj then
        obj.gameObject:SetActive(true);
    end

    self.transform = obj.transform
    self.gameObject = self.transform.gameObject;
    self.transform_find = self.transform.Find;

    self.type = type;

    self.events = {};
    self.schedules = {};
    self:Init();
end

function BossBloodItem:__clear()
    BossBloodItem.super.__clear(self)
    self:ClearActions();
    self.transform = nil
    self.gameObject = nil
    self.light = nil;
    self.dark = nil;
end

function BossBloodItem:__reset(obj, type)
    BossBloodItem.super.__reset(self, obj, type)
    if obj then
        obj.gameObject:SetActive(true);
    end
    self.transform = obj.transform
    self.gameObject = self.transform.gameObject;
    self.transform_find = self.transform.Find;
    self.type = type
    self:Init()
end

function BossBloodItem:dctor()
    GlobalEvent:RemoveTabListener(self.events);
    if self.schedule then
        GlobalSchedule:Stop(self.schedule);
    end
    self.transform = nil
    self.gameObject = nil
    --self.tweenFinFun = nil;
    self:ClearActions();
    self.light = nil;
    self.dark = nil;
end

function BossBloodItem:ResetData(type)
    self.type = type
    self:InitUI()
end

function BossBloodItem:ClearActions()
    if self.actions then
        for k, v in pairs(self.actions) do
            cc.ActionManager:GetInstance():removeAction(v);
        end
    end
    self.actions = {};
end

function BossBloodItem:Init()
    self.is_loaded = true;
    self.nodes = {
        "dark", "light",
    }
    self:GetChildren(self.nodes);

    self.lightHeight = GetSizeDeltaY(self.light.transform);
    self.darkHeight = GetSizeDeltaY(self.dark.transform)
    --self.bloodHeight = GetSizeDeltaX(self.light.transform)

    --Notify.ShowText(GetSizeDeltaX(self.bg.transform))
    self:InitUI();

    self:AddEvents();
end

function BossBloodItem:InitUI()
    if self.type == 1 then
        self.bossBloodLen = 231;--ownner blood
        self.bloodHeight = 17;
    elseif self.type == 2 then
        --self.bossBloodLen = 263;--bossBlood
        --elseif type == 3 then
        self.bossBloodLen = GetSizeDeltaX(self.light.transform);

    elseif self.type == 3 then
        self.bossBloodLen = 125;--angryBlood length
    else
        --默认
        self.bossBloodLen = GetSizeDeltaX(self.light.transform);
    end

    self.dark = GetImage(self.dark);
    self.light = GetImage(self.light);
    self.dark.fillAmount = 1;
    self.light.fillAmount = 1;
    --self.dark.fillAmount = 1;
    if self.type == 3 then

    end

    local Y = tonumber(GetSizeDeltaY(self.light.transform));
    if self.type == 1 then
        SetSizeDelta(self.light.transform, 231, 17);
        SetSizeDelta(self.dark.transform, 231, 17);
    elseif self.type == 2 then
        --SetSizeDelta(self.light.transform, 263, Y);
        self.bossBloodLen = GetSizeDeltaX(self.light.transform);
    elseif self.type == 3 then
        self.bloodHeight = GetSizeDeltaY(self.dark.transform);
        self.bossBloodLen = GetSizeDeltaX(self.dark.transform);
        SetSizeDelta(self.light.transform, self.bossBloodLen, self.bloodHeight);
        SetSizeDelta(self.dark.transform, self.bossBloodLen, self.bloodHeight);
    else
        SetSizeDelta(self.light.transform, GetSizeDeltaX(self.light.transform), Y);
    end
    --print2(self.dark);
end

function BossBloodItem:AddEvents()

end

function BossBloodItem:SetBloodSize(width , height)

end

function BossBloodItem:UpdateCurrentBloodImmi(current, max)
    max = max or self.max;
    self.max = max;
    local currentNum = current / max;-- * self.bossBloodLen;

    --SetSizeDelta(self.light.transform, currentNum, self.lightHeight);
    --SetSizeDelta(self.dark.transform, currentNum, self.darkHeight);--self.bloodHeight
    self.light.fillAmount = currentNum;
    self.dark.fillAmount = currentNum;
end

function BossBloodItem:UpdateCurrentBlood(current, max)
    max = max or self.max;
    self.max = max;
    local currentNum = current / max;-- * self.bossBloodLen;
    --SetSizeDelta(self.light.transform, currentNum, self.bloodHeight);
    self.light.fillAmount = currentNum;-- / self.bloodHeight;
    if not self.actions then
        self.actions = {};
    else
        self:ClearActions();
    end

    local end_call = function()
        --print2(currentNum);
        --if self.tweenFinFun then
        --    self.tweenFinFun();
        --end
    end

    local moveAction = cc.ValueTo(0.3, currentNum, self.dark, "fillAmount");--cc.SizeTo(0.3, currentNum, self.bloodHeight);
    local finAction = cc.CallFunc(end_call);
    local action = cc.Sequence(moveAction, finAction);
    cc.ActionManager:GetInstance():addAction(action, self.dark.transform);
    self.actions[#self.actions + 1] = action;
end
