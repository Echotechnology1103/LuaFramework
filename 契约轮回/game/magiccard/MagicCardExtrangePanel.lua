---魔法卡兑换页
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/12/04 16:17
---
MagicCardExtrangePanel = MagicCardExtrangePanel or class("MagicCardExtrangePanel", BaseItem)
local this = MagicCardExtrangePanel

function MagicCardExtrangePanel:ctor(parent_node)
    self.abName = "magiccard";
    self.image_ab = "magiccard_image";
    self.assetName = "MagicCardExtrangePanel";
    self.layer = "UI";

    self.model = CardModel.GetInstance()
    self.events = {};
    self.schedules = {};
    self.preSelectedItem = nil;
    self.selectedItemPrice = 0;
    MagicCardExtrangePanel.super.Load(self);
end

function MagicCardExtrangePanel:dctor()
    self.model = nil;

    GlobalEvent:RemoveTabListener(self.events);
    self:StopAllSchedules()

    destroyTab(self.items);
    self.items = {};

    if self.magicitem then
        self.magicitem:destroy();
    end
    self.magicitem = nil;

    if self.preSelectedItem then
        self.preSelectedItem:destroy();
    end
    self.preSelectedItem = nil;
end

function MagicCardExtrangePanel:OnEnable()
    if self.own_price then
        self.own_price.text = tostring(CardModel:GetInstance().Value2);
    end

end

function MagicCardExtrangePanel:Open(data)
    self.data = data;
    WindowPanel.Open(self)
end

function MagicCardExtrangePanel:LoadCallBack()
    self.nodes = {
        --"s/star_6", "s/star_5", "s/star_3", "s/star_4", "s/star_2", "s/star_1", "s",
        "icon", "card_name", "ex_btn", "exchange_item", "ScrollView/Viewport/Content",
        "own_price", "own_add",

        "score", "price_label", "card_price", "des",
    }
    self:GetChildren(self.nodes)

    SetLocalPosition(self.transform, 0, 0, 0)

    self:InitUI();

    self:AddEvent();
end

function MagicCardExtrangePanel:InitUI()
    self.card_price = GetText(self.card_price);
    self.des = GetText(self.des);
    --self.starItems = {};
    --self.values = {};
    --self.labels = {};
    --for i = 1, 6, 1 do
    --    --self.starItems[i] = GetImage(self["star_" .. i]);
    --    SetGameObjectActive(self.starItems[i].gameObject, false);
    --    --self.values[i] = GetText(self["value_" .. i]);
    --    --self.labels[i] = GetText(self["label_" .. i]);
    --end

    self.own_price = GetText(self.own_price);

    self.own_price.text = tostring(CardModel:GetInstance().Value2);
    self.own_add = GetButton(self.own_add);

    self.card_name = GetText(self.card_name);

    self.ex_btn = GetButton(self.ex_btn);

    --self.magicitem = magicitem(self.icon);
    --self.magicitem:SetData()

    self.score = GetText(self.score);
    self:InitExchangeItems();
end

function MagicCardExtrangePanel:InitExchangeItems()
    destroyTab(self.items);
    self.items = {};
    SetGameObjectActive(self.exchange_item.gameObject, true);
    local exchangeData = CardModel.GetInstance().exchangeData;
    for i = 1, #exchangeData, 1 do
        local configtab = exchangeData[i];
        local exItem = ExchangeItem(newObject(self.exchange_item), configtab);
        self.items[i] = exItem;
        exItem.transform:SetParent(self.Content.transform);

        SetLocalScale(exItem.transform, 1, 1, 1);
        SetLocalPosition(exItem.transform, 0, 0, 0);
    end

    local rt = GetRectTransform(self.Content);
    rt.sizeDelta = Vector2(rt.sizeDelta.x, #exchangeData / 4 * 211);
    rt.anchoredPosition = Vector2(0, 0);
    self:SetItemSelected(self.items[1]);
    SetGameObjectActive(self.exchange_item.gameObject, false);
end

--@ling autofun
function MagicCardExtrangePanel:HandleSelectedItem(go, x, y, v)
    self:SetItemSelected(v);
end

MagicCardExtrangePanel.preSelectedItem = nil;
--@ling autofun
function MagicCardExtrangePanel:SetItemSelected(item)
    if self.preSelectedItem then
        self.preSelectedItem:SetSelected(false);
    end
    self.preSelectedItem = item;
    item:SetSelected(true);
    --self:HideAllText();
    --self:HideStars();

    local mallData = item.data;
    if mallData then
        local cardtab = String2Table(mallData.item);
        local cardID = cardtab[1];
        local cardData = Config.db_magic_card[cardID];
        local itemConfig = Config.db_item[cardID];
        if itemConfig then
            self.des.text = itemConfig.desc;
        end

        self.score.text = "Rating: " .. cardData.score;
        if cardData then
            self.card_name.text = cardData.name;
            SetColor(self.card_name , HtmlColorStringToColor("#" .. ColorUtil.GetColor(itemConfig.color)));
            --local basePropTab = String2Table(cardData.base);
            --local bestPropTab = String2Table(cardData.rare);
            --for k, v in pairs(bestPropTab) do
            --    table.insert(basePropTab, v);
            --end
            --for k, v in pairs(basePropTab) do
            --    SetGameObjectActive(self.labels[k], true);
            --    SetGameObjectActive(self.values[k], true);
            --    self.labels[k].text = PROP_ENUM[v[1]].label .. ":";
            --    if v[1] >= 13 then
            --        self.values[k].text = GetPreciseDecimal(tonumber(v[2]) / 100, 2) .. "%";
            --    else
            --        self.values[k].text = tostring(v[2]);
            --    end
            --end
            --
            --self:SetMaxStar(cardData.max_star);
        end

        --self.values[5].text = tostring(cardtab[2]);

        local priceTab = String2Table(mallData.price);
        if priceTab and #priceTab > 1 then
            --self.values[6].text = tostring(priceTab[2]);
            self.card_price.text = tostring(priceTab[2]);
            self.selectedItemPrice = tonumber(priceTab[2]);
        end

        if self.magicitem then
            self.magicitem:destroy();
        end
        self.magicitem = MagicCard(self.icon , cardData);
        self.magicitem:ShowCardName(false);
        self.magicitem:ShowCardLV(false);
        self.magicitem:ShowOwn(false);
        self.magicitem:ShowStars(true);

        --self.magicitem:SetData(cardData.id);
        --self.magicitem:UpdateNum(0);
    end
end

--function MagicCardExtrangePanel:HideAllText()
--    for i = 1, 4, 1 do
--        SetGameObjectActive(self.labels[i], false);
--        SetGameObjectActive(self.values[i], false);
--    end
--end

--function MagicCardExtrangePanel:HideStars()
--    for i = 1, 6, 1 do
--        SetGameObjectActive(self.starItems[i], false);
--    end
--end

function MagicCardExtrangePanel:SetMaxStar(num)

    --for i = 1, 6, 1 do
    --    if i <= num then
    --        SetGameObjectActive(self.starItems[i], true);
    --        SetAlpha(self.starItems[i], 1);
    --    else
    --        SetGameObjectActive(self.starItems[i], false);
    --    end
    --end

end

function MagicCardExtrangePanel:AddEvent()
    AddClickEvent(self.ex_btn.gameObject, handler(self, self.HandleExchange));
    AddClickEvent(self.own_add.gameObject, handler(self, self.HandleAddMoney));

    for k, v in pairs(self.items) do
        AddClickEvent(v.gameObject, handler(self, self.HandleSelectedItem, v));
    end
    AddEventListenerInTab(CardEvent.CARD_EXCHANGE, handler(self, self.HandleExchangeRefresh), self.events);
end

--@ling autofun
function MagicCardExtrangePanel:HandleAddMoney(go, x, y)
    OpenLink(230,1)
end

--@ling autofun 
function MagicCardExtrangePanel:HandleExchangeRefresh()
    --刷新价钱
    self.own_price.text = tostring(CardModel:GetInstance().Value2);
    Notify.ShowText("has been exchanged");
end

--@ling autofun
function MagicCardExtrangePanel:HandleExchange(go, x, y)
    if self.preSelectedItem then
        local mallData = self.preSelectedItem.data;

        if mallData then
            local cardtab = String2Table(mallData.item);
            local cardID = cardtab[1];
            --解锁确认
            local cardConfig = Config.db_magic_card[cardID];
            local data = DungeonModel:GetInstance().dungeon_info_list[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MAGICTOWER];
            if data and data.info then
                local curFloor = tonumber(data.info.cur_floor);
                if tonumber(cardConfig.gate) > curFloor then
                    Notify.ShowText("You need to clear" .. cardConfig.gate .. "in magic tower to exchange, current:" .. curFloor .. "Floor");
                    return ;
                end
            end

            local priceTab = String2Table(mallData.price);
            if priceTab and #priceTab > 1 then
                local price = tonumber(priceTab[2]);

                if CardModel:GetInstance().Value2 >= price then
                    --MagicCardCtrl:GetInstance():RequestMagicCardGetSet()
                    ShopController:GetInstance():RequestBuyGoods(mallData.id, tonumber(cardtab[2]));
                else
                    Notify.ShowText(string.format("Insufficient %s..." , enumName.ITEM[90010013]));
                end
            else
                Notify.ShowText("This is priceless, fail to redeem");
            end
        else
            Notify.ShowText("This item doesn't exist, please check");

        end
    end
end

function MagicCardExtrangePanel:StopAllSchedules()
    for i = 1, #self.schedules, 1 do
        GlobalSchedule:Stop(self.schedules[i]);
    end
    self.schedules = {};
end

ExchangeItem = ExchangeItem or class("ExchangeItem", Node)
local this = ExchangeItem

function ExchangeItem:ctor(obj, tab)
    self.transform = obj.transform
    self.gameObject = self.transform.gameObject;
    self.data = tab;
    self.image_ab = "magiccard_image";
    self.transform_find = self.transform.Find;
    self.events = {};
    self:Init();
    self:AddEvents();
end

function ExchangeItem:dctor()
    GlobalEvent:RemoveTabListener(self.events);
    if self.schedule then
        GlobalSchedule:Stop(self.schedule);
    end

    if self.carditem then
        self.carditem:destroy();
    end
    self.carditem = nil;
end

function ExchangeItem:Init()
    self.is_loaded = true;
    self.nodes = {
        "price_bg", "price", "name_bg", "selected", "cname", "price_icon", "card",
    }
    self:GetChildren(self.nodes);

    self:InitUI();
end

function ExchangeItem:InitUI()
    self.cname = GetText(self.cname);
    self.price = GetText(self.price);
    self.selected = GetImage(self.selected);
    SetGameObjectActive(self.selected, false);
    if self.data then
        local priceTab = String2Table(self.data.price);
        if priceTab and #priceTab > 1 then
            self.price.text = tostring(priceTab[2]);
        end
        local cardTab = String2Table(self.data.item)
        local cardID = cardTab[1];
        local cardConfig = Config.db_magic_card[cardID];
        self.carditem = CardIcon(self.card, cardConfig);
        self.carditem:ShowCardName(false);
        if cardConfig then
            if cardConfig.name then
                self.cname.text = tostring(cardConfig.name);
            end
        end
        self.carditem:ShowCardLV(false);
        local itemConfig = Config.db_item[cardID];
        if itemConfig then
            SetColor(self.cname , HtmlColorStringToColor("#" .. ColorUtil.GetColor(itemConfig.color)));
        end

        local data = DungeonModel:GetInstance().dungeon_info_list[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MAGICTOWER];
        if data and data.info then
            local curFloor = tonumber(data.info.cur_floor);
            if tonumber(cardConfig.gate) > curFloor then
                self.carditem:SetCardLock(cardConfig.gate);
            end
        end
    end
end

function ExchangeItem:SetSelected(bool)
    SetGameObjectActive(self.selected, bool);
end

function ExchangeItem:AddEvents()

end


