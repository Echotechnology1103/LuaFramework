---魔法卡数据类
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/12/04 16:01
---
CardModel = CardModel or class("CardModel", BaseModel)
local this = CardModel

CardModel.power = 0;

CardModel.combineData = {};
CardModel.BAG_ID = 103;
--镶嵌在身上的卡片
CardModel.EmbedCards = {};

CardModel.suite_id = 1;

CardModel.STONE_ID = {
    STONE_1 = 90010012,
    STONE_2 = 90010013,
    STONE_3 = 90010014,
}

CardModel.cardPanelData = {
    { id = 1, text = "Socket magic card" },
    { id = 2, text = "Star up magic card" },
    { id = 3, text = "Dismantle magic card" },
    { id = 4, text = "Exchange magic card" },
    { id = 5, text = "Combine magic card" },
}

CardModel.opened = 0;
--卡片背包的
CardModel.items = {};

CardModel.Value1 = 0;--魔晶石,用于强化的--90010012
CardModel.Value2 = 0;--融合魔晶--90010013
CardModel.Value3 = 0;--魔晶经验--90010014

CardModel.selectedColor = {};
CardModel.autoBag = 0;
--标签页为索引
CardModel.red_dot_list = {
};
--可以升星的颜色,
CardModel.CAN_UPSTAR_COLOR = 4;

function CardModel:ctor()
    CardModel.Instance = self
    self:Reset()

    self:InitCombine();
    self:InitExchange();
    self:InitHandbook();
    self:InitCardSkills();
    --1表示标签页,2表示那个位置
    self.red_dot_list[1] = { [1] = false, [2] = {} };--2[i]{ 0表示不要红点,1表示能镶嵌,2表示能升级,3表示能替换}
    self.red_dot_list[2] = { [1] = false, [2] = {} };
    self.red_dot_list[3] = { [1] = false, [2] = {} };
    self.red_dot_list[4] = { [1] = false, [2] = {} };
    self.red_dot_list[5] = { [1] = false, [2] = {} };
    
end

function CardModel:dctor()

end

function CardModel.GetInstance()
    if CardModel.Instance == nil then
        CardModel()
    end
    return CardModel.Instance
end

function CardModel:Reset()
    self.power = 0;

    --self.combineData = {};
 


    self.BAG_ID = 103;
    --镶嵌在身上的卡片
    self.EmbedCards = {};

    self.suite_id = 1;

    self.STONE_ID = {
        STONE_1 = 90010012,
        STONE_2 = 90010013,
        STONE_3 = 90010014,
    }

    self.cardPanelData = {
        { id = 1, text = "Socket magic card" },
        { id = 2, text = "Star up magic card" },
        { id = 3, text = "Dismantle magic card" },
        { id = 4, text = "Exchange magic card" },
        { id = 5, text = "Combine magic card" },
    }

    self.opened = 0;
    --卡片背包的
    self.items = {};

    self.Value1 = 0;--魔晶石,用于强化的--90010012
    self.Value2 = 0;--融合魔晶--90010013
    self.Value3 = 0;--魔晶经验--90010014

    self.selectedColor = {};
    self.autoBag = 0;
    --标签页为索引
    self.red_dot_list = {
    };
    self.red_dot_list[1] = { [1] = false, [2] = {} };--2[i]{ 0表示不要红点,1表示能镶嵌,2表示能升级,3表示能替换}
    self.red_dot_list[2] = { [1] = false, [2] = {} };
    self.red_dot_list[3] = { [1] = false, [2] = {} };
    self.red_dot_list[4] = { [1] = false, [2] = {} };
    self.red_dot_list[5] = { [1] = false, [2] = {} };
end

--@ling autofun
--收到卡片背包协议
function CardModel:HandleCardBags(data)
    self.opened = data.opened;
    self.items = data.items;
    BrocastModelEvent(CardEvent.CARD_BAG_EVENT);
    self:CheckReddot();
end

function CardModel:AddCardItem(p_item)
    table.insert(self.items, p_item);
    BrocastModelEvent(CardEvent.ADD_CARD, nil, p_item);
    self:CheckReddot();
end

function CardModel:DelectedCardItemByUid(uid)
    for k, v in pairs(self.items) do
        if v.uid == uid then
            local item = v;
            self.items[k] = nil;
            BrocastModelEvent(CardEvent.DELETE_CARD, nil, item, k)
            return ;
        end
    end
    self:CheckReddot();
end

function CardModel:GetCardItemByUid(uid)
    for i = 1, #self.items, 1 do
        if self.items[i].uid == uid then
            return self.items[i];
        end
    end
    return nil;
end

function CardModel:GetItemNumByItemID(itemID)
    local num = 0
    for i, v in pairs(self.items) do
        if v ~= 0 and v.id == itemID then
            num = num + v.num
        end
    end
    return num
end

function CardModel:GetEmbedNumByItemID(itemID)
    local num = 0
    for i, v in pairs(self.EmbedCards) do
        if v.id == itemID then
            num = num + v.num
        end
    end
    return num
end

--@ling autofun 
function CardModel:InitCombine()
    self.combineData = {};
    for k, v in pairs(Config.db_magic_card_combine) do
        if not self.combineData[v.type_id] then
            self.combineData[v.type_id] = {};
        end
        table.insert(self.combineData[v.type_id], v);
    end
    for k, v in pairs(self.combineData) do
        table.sort(v, SortCompareFun);
    end
end

function CardModel:InitExchange()
    self.exchangeData = {};
    for k, v in pairs(Config.db_mall) do
        if v.id >= 1000 and v.id < 1100 then
            table.insert(self.exchangeData, v);
        end
    end
    table.sort(self.exchangeData, OrderCompareFun);
end

function CardModel:InitHandbook()
    self.handbookData = {};
    for k, v in pairs(Config.db_magic_card_handbook) do
        table.insert(self.handbookData, v);
    end
    table.sort(self.handbookData, OrderCompareFun);
end
function CardModel:InitCardSkills()
    self.cardskills = {};
    for k, v in pairs(Config.db_magic_card_suite) do
        local skillstab = String2Table(v.skill_id);
        if skillstab then
            self.cardskills[v.id] = skillstab[1];
        end
    end
end

function CardModel:CheckPosCanEmbed(pos1, cardConfig1)
    if pos1 <= 2 then
        local pos2 = pos1 == 1 and 2 or 1;
        local card2 = self.EmbedCards[pos2];
        if not card2 then
            return true;
        end
        local cardConfig2 = Config.db_magic_card[card2.id];
        if self:CheckSameCardProp(cardConfig1, cardConfig2) then
            return false;
        else
            return true;
        end
    else
        for i = 3, 8, 1 do
            if i ~= pos1 then
                local card2 = self.EmbedCards[i];
                if card2 then
                    local cardConfig2 = Config.db_magic_card[card2.id];
                    if self:CheckSameCardProp(cardConfig1, cardConfig2) then
                        return false;
                    end
                end
            end
        end
        return true;
    end

    return false;
end

function CardModel:CheckSameCardProp(cardConfig1, cardConfig2)
    if not cardConfig2 or not cardConfig1 then
        return false;
    end

    local base1 = String2Table(cardConfig1.base);
    local base2 = String2Table(cardConfig2.base);

    for k, v in pairs(base1) do
        for k1, v1 in pairs(base2) do
            if v1[1] == v[1] then
                return true;
            end
        end
    end
    return false;
end

function GetAllOwnProp()
    local ownTab = {};
    for k, v in pairs(CardModel:GetInstance().EmbedCards) do
        GetOneCardOwnProp(v.id, ownTab);
    end
    return ownTab;
end
function GetOneCardOwnProp(cardid, tab)
    local cardConfig = Config.db_magic_card[cardid];
    if cardConfig then
        local base = String2Table(cardConfig.base);
        for k, v in pairs(base) do
            tab[v[1]] = true;
        end
    end

end
--设置卡片是否是拥有属性
function CardModel:SetCardIsOwnProp()
    local ownProp = GetAllOwnProp();
    local cardConfig = nil;
    for k, v in pairs(self.items) do
        v.isOwnProp = false;
        cardConfig = Config.db_magic_card[v.id];
        if cardConfig then
            local base = String2Table(cardConfig.base);
            for k1, v1 in pairs(base) do
                local prop = v1[1];
                if ownProp[prop] then
                    v.isOwnProp = true;
                end
            end
        end
    end
end

function IsFusionCard(cardid)
    local cardConfig = Config.db_magic_card[cardid];
    if cardConfig then
        return cardConfig.max_star >= 6;
    end
    return false;
end

function CheckCardColor(cardData1, cardData2)
    local cardConfig1 = Config.db_item[cardData1.id];
    local cardConfig2 = Config.db_item[cardData2.id];
    if cardConfig1 and cardConfig2 then
        return cardConfig1
    end
    return false;
end

function GetCardColor(cardData)
    if cardData then
        local itemConfig = Config.db_item[cardData.id];
        if itemConfig then
            return itemConfig.color;
        end
    end
    return 1;
end
function GetCardstype(cardData)
    if cardData then
        local itemConfig = Config.db_item[cardData.id];
        if itemConfig then
            return itemConfig.stype;
        end
    end
    return 10012;
end

--function GetCardStrength(cardData)
--    if cardData then
--        return cardData.extra;
--    end
--    return 1;
--end

function GetCardSlot(cardData)
    if cardData then
        local cardConfig = Config.db_magic_card[cardData.id];
        if cardConfig then
            return cardConfig.slot;
        end
    end
    return 0;
end

--function GetSortedBagCardList()
--    local tab = {};
--    for k, v in pairs(CardModel:GetInstance().items) do
--        table.insert(tab, v);
--    end
--    local index = 1;
--    table.sort(tab, SortCard);
--    return tab;
--end





--function SortCardFusion()
--    local isfusion1 = IsFusionCard(cardData1.id);
--    local isfusion2 = IsFusionCard(cardData2.id);
--    if isfusion1 and isfusion2 then
--        return cardData1.id > cardData2.id;
--    elseif isfusion1 or isfusion2 then
--        return isfusion1;
--    else
--        local color1 = GetCardColor(cardData1);
--        local color2 = GetCardColor(cardData2);
--        if color1 == color2 then
--            return cardData1.uid > cardData2.uid;
--        else
--            return color1 > color2;
--        end
--    end
--end

local function SortCardUid(cardData1, cardData2)
    if cardData1.id == cardData2.id then
        return tonumber(cardData1.uid) > tonumber(cardData2.uid);
    end
end

local function SortCardStrength(cardData1, cardData2)
    if cardData1.extra == cardData2.extra then
        return SortCardUid(cardData1, cardData2)
    else
        return cardData1.extra > cardData2.extra;
    end

end

local function SortCardId(cardData1, cardData2)
    if cardData1.id == cardData1.id then
        return SortCardStrength(cardData1, cardData2)
    else
        return cardData1.id > cardData2.id;
    end
end

local function SortCardColor(cardData1, cardData2)
    local color1 = GetCardColor(cardData1);
    local color2 = GetCardColor(cardData2);

    if color1 == color2 then
        return SortCardId(cardData1, cardData2);
    else
        return color1 > color2;
    end
end

local function SortCardFusion(cardData1, cardData2)
    local isfusion1 = IsFusionCard(cardData1.id);
    local isfusion2 = IsFusionCard(cardData2.id);
    if isfusion1 and isfusion2 then
        return SortCardColor(cardData1, cardData2);
    elseif isfusion1 or isfusion2 then
        return isfusion1;
    else
        return SortCardColor(cardData1, cardData2)
    end
end



--local function SortCardFusionFun(cardData1, cardData2, ...)
--    local tab = {...}
--    local fun = tab[1];
--
--    if fun then
--        local isfusion1 = IsFusionCard(cardData1.id);
--        local isfusion2 = IsFusionCard(cardData2.id);
--
--        if isfusion1 and isfusion2 then
--            return fun(cardData1, cardData2);
--        elseif isfusion1 or isfusion2 then
--            return isfusion1;
--        else
--            return fun(cardData1, cardData2)
--        end
--    else
--        return cardData1.uid > cardData2.uid;
--    end
--
--end

local function SortCardOwnProp(cardData1, cardData2)
    --其中一张是已有属性的状态下
    if cardData1.isOwnProp and cardData2.isOwnProp then
        return SortCardFusion(cardData1, cardData2)
    elseif cardData1.isOwnProp or cardData2.isOwnProp then
        return not cardData1.isOwnProp;
    else
        return SortCardFusion(cardData1, cardData2)
    end
end

local function SortCardSlot(cardData1, cardData2)
    local slot1 = GetCardSlot(cardData1);
    local slot2 = GetCardSlot(cardData2);
    if slot1 == 0 or slot2 == 0 then
        -- slot1 == slot2
        --return SortCardOwnProp(cardData1, cardData2)
        return slot1 > slot2;
    else
        return SortCardFusion(cardData1, cardData2);--slot1 > slot2;
    end

end



--卡片分解用的排序
function GetSortedBagCardList2()
    local tab = {};
    for k, v in pairs(CardModel:GetInstance().items) do
        table.insert(tab, v);
    end
    local index = 1;
    table.sort(tab, SortCardSlot);
    return tab;
end

function SortCard2(cardData1, cardData2)
    --其中一张是已有属性的状态下
    if cardData1.isOwnProp and cardData2.isOwnProp then
        local isfusion1 = IsFusionCard(cardData1.id);
        local isfusion2 = IsFusionCard(cardData2.id);
        if isfusion1 and isfusion2 then
            return cardData1.id > cardData2.id;
        elseif isfusion1 or isfusion2 then
            return isfusion1;
        else
            local color1 = GetCardColor(cardData1);
            local color2 = GetCardColor(cardData2);

            if color1 == color2 then
                return cardData1.uid > cardData2.uid;
            else
                return color1 > color2;
            end
        end
    elseif cardData1.isOwnProp or cardData2.isOwnProp then
        return not cardData1.isOwnProp;
    else
        local isfusion1 = IsFusionCard(cardData1.id);
        local isfusion2 = IsFusionCard(cardData2.id);
        if isfusion1 and isfusion2 then
            return cardData1.id > cardData2.id;
        elseif isfusion1 or isfusion2 then
            return isfusion1;
        else
            local color1 = GetCardColor(cardData1);
            local color2 = GetCardColor(cardData2);
            if color1 == color2 then
                return cardData1.uid > cardData2.uid;
            else
                return color1 > color2;
            end
        end
    end
end

function CardModel:CheckReddot()
    if self.setreddotschedule then
        GlobalSchedule.StopFun(self.setreddotschedule);
    end
    self.setreddotschedule = GlobalSchedule.StartFunOnce(handler(self, self.RCheckReddot), 0.2);
end

function CardModel:RCheckReddot()
    --print2("开始执行检查魔法卡红点");
    local openSlots = { false, false, false, false, false, false, false, false };

    --槽位是否开放了
    local data = DungeonModel:GetInstance().dungeon_info_list[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MAGICTOWER];
    if data and data.info then
        local curFloor = tonumber(data.info.cur_floor);
        for i = 1, 8 do
            if Config.db_magic_card_pos[i] then
                if curFloor > tonumber(Config.db_magic_card_pos[i].gate) then
                    openSlots[i] = true;
                end
            end
        end
    end
    for i = 1, 5 do
        self.red_dot_list[i][1] = false;
        self.red_dot_list[i][2] = {};
    end
    --可装备红点
    for i = 1, 8 do
        --self.red_dot_list[1][2] = {};
        if not self.EmbedCards[i] and openSlots[i] and self:IsHasPosCard(i) then
            --未镶嵌,同时有这个槽位的卡
            --要加个非同属性吧
            self.red_dot_list[1][1] = true;
            for _k, cardData in pairs(self.items) do
                local cardConfig = Config.db_magic_card[cardData.id];
                if cardConfig then
                    if self:CheckPosCanEmbed(i, cardConfig) then
                        if not self.red_dot_list[1][2][i] then
                            self.red_dot_list[1][2][i] = BitState(0);
                        end
                        self.red_dot_list[1][2][i]:Add(BitState.State[1]);--可镶嵌
                    end
                end
            end
        else
            --已镶嵌
            local embedData = self.EmbedCards[i];
            if embedData then
                local card = string.sub(tostring(embedData.id), 2, 3);
                local color = string.sub(tostring(embedData.id), 4, 4) or 1;
                local star = string.sub(tostring(embedData.id), 5, 5) or 0;

                for _k, cardData in pairs(self.items) do
                    local card1 = string.sub(tostring(cardData.id), 2, 3);
                    --强化等级高于这个卡
                    if cardData.id == embedData.id then
                        if cardData.extra > embedData.extra then
                            --self.red_dot_list[1][2][i] = true;
                            if not self.red_dot_list[1][2][i] then
                                self.red_dot_list[1][2][i] = BitState(0);
                            end
                            self.red_dot_list[1][2][i]:Add(BitState.State[3]);
                        end
                        --同卡片,不同星级颜色--可替换吧...
                    elseif card1 == card then
                        local color1 = string.sub(tostring(cardData.id), 4, 4) or 1;
                        local star1 = string.sub(tostring(cardData.id), 5, 5) or 0;
                        if tonumber(color1) >= tonumber(color) and tonumber(star1) >= tonumber(star) then
                            --and not (color1 == color and star1 == star)
                            --self.red_dot_list[1][2][i] = true;
                            if not self.red_dot_list[1][2][i] then
                                self.red_dot_list[1][2][i] = BitState(0);
                            end
                            self.red_dot_list[1][2][i]:Add(BitState.State[3]);
                        end
                    end
                end

                --可以强化
                local levelkey = embedData.id .. "@" .. (embedData.extra or 1);
                if Config.db_magic_card_strength[levelkey] then
                    local needTab = String2Table(Config.db_magic_card_strength[levelkey].cost);
                    if needTab then
                        if self.Value1 >= needTab[2] then
                            --self.red_dot_list[1][2][i] = true;
                            if not self.red_dot_list[1][2][i] then
                                self.red_dot_list[1][2][i] = BitState(0);
                            end
                            self.red_dot_list[1][2][i]:Add(BitState.State[2]);
                        end
                    end
                end

            end

        end
    end
    --可替代红点

    --可升级红点
    self:CheckUpgradeReddot();
    --可升星红点
    self:CheckUpStarReddot();
    --分解红点
    self:CheckDecomposeReddot();

    local isMainCardRed = false;
    for k, v in pairs(self.red_dot_list) do
        local flag = false;
        if v[2] and not table.isempty(v[2]) then
            for k1, v1 in pairs(v[2]) do
                if v1 then
                    flag = true;
                    v[1] = true;
                end
            end
        end
        if v[1] or flag then
            isMainCardRed = true;
            --break;
        end
    end
    GlobalEvent:Brocast(MainEvent.ChangeRedDot, "card", isMainCardRed)--主菜单
    GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 16, isMainCardRed);
    self:Brocast(CardEvent.UpdateRedDot)--标签页
end

function CardModel:IsHasPosCard(pos)
    local slot = 1;
    if pos < 3 then
        slot = 2
    end

    for k, v in pairs(self.items) do
        local cardConfig = Config.db_magic_card[v.id];
        if cardConfig.slot == slot then
            return true
        end
    end
    return false;
end

function CardModel:IsHasBetterCard(pos, cardid)

end

function CardModel:CheckDecomposeReddot()
    local num = 0;
    self.red_dot_list[3][1] = false;
    for k, v in pairs(self.items) do
        local cardConfig = Config.db_magic_card[v.id];
        if cardConfig.slot == 0 then
            num = num + 1;
        else
            local itemConfig = Config.db_item[v.id];
            if itemConfig then
                if itemConfig.color < 4 then
                    num = num + 1;
                end
            end
        end
    end
    if num >= 20 then
        self.red_dot_list[3][1] = true;
    end
end

function CardModel:CheckUpgradeReddot()
    for i = 1, 8 do
        if self.EmbedCards[i] then
            local cardData = self.EmbedCards[i];
            local cardConfig = Config.db_magic_card[cardData.id]

            local level = cardData.extra or 1;
            if Config.db_magic_card_strength[level] then
                local needTab = String2Table(Config.db_magic_card_strength[level].cost);
                if needTab then
                    if self.model.Value1 >= needTab[2] then
                        self.red_dot_list[1][1] = true;
                    end
                end
            end
        end

    end
end

function CardModel:CheckUpStarReddot()
    self.red_dot_list[2][2] = {};
    self.red_dot_list[2][1] = false;
    for i = 1, 8 do
        if self.EmbedCards[i] then
            local data = self.EmbedCards[i];
            local cardConfig = Config.db_magic_card[data.id];

            local nextConfig = Config.db_magic_card[cardConfig.next_star];
            if not nextConfig then
                --这张卡无法升星了
            else
                local flag = true;
                local costTab = String2Table(cardConfig.cost);
                for i = 1, #costTab, 1 do
                    local tab = costTab[i];
                    local num = CardModel:GetInstance():GetItemNumByItemID(tab[1])
                    if num < tab[2] or cardConfig.star == cardConfig.max_star then
                        flag = false;
                        --else

                    end
                end
                if flag then
                    self.red_dot_list[2][2][data.id] = true;
                    self.red_dot_list[2][1] = true;
                end
            end
        end
    end
end
