---魔法卡控制器,网络等
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/12/04 16:00
---
require('game.magiccard.RequireCard')

MagicCardCtrl = MagicCardCtrl or class("MagicCardCtrl", BaseController)
local this = MagicCardCtrl

local ConfigLanguage = require('game.config.language.CnLanguage');

function MagicCardCtrl:ctor()
    MagicCardCtrl.Instance = self;
    self.model = CardModel:GetInstance()
    self.events = {};
    self:AddEvents()
    self:RegisterAllProtocal();
end

function MagicCardCtrl:dctor()
    GlobalEvent:RemoveTabListener(self.events);
end

function MagicCardCtrl:GetInstance()
    if not MagicCardCtrl.Instance then
        MagicCardCtrl()
    end
    return MagicCardCtrl.Instance;
end

function MagicCardCtrl:RegisterAllProtocal()
    -- protobuff的模块名字，用到pb一定要写
    self.pb_module_name = "pb_1118_magiccard_pb";

    self:RegisterProtocal(proto.MAGIC_CARD_LIST, self.HandleCardList);
    self:RegisterProtocal(proto.MAGIC_CARD_PUTON, self.HandleCardPuton);
    self:RegisterProtocal(proto.MAGIC_CARD_UPSTAR, self.HandleCardUpstar);
    self:RegisterProtocal(proto.MAGIC_CARD_STRENGTH, self.HandleCardStrength);
    self:RegisterProtocal(proto.MAGIC_CARD_DECOMPOSE, self.HandleCardDecompose);
    self:RegisterProtocal(proto.MAGIC_CARD_SUITE, self.HandleCardSuite);
    self:RegisterProtocal(proto.MAGIC_CARD_COMBINE, self.HandleCardCombine);
    self:RegisterProtocal(proto.MAGIC_CARD_BAG_INFO, self.HandleCardBagInfo);
    self:RegisterProtocal(proto.MAGIC_CARD_GET_SET, self.HandleCardGetSet);
    self:RegisterProtocal(proto.MAGIC_CARD_DECOMPOSE_SET, self.HandleCardDecomposeSet);
    self:RegisterProtocal(proto.MAGIC_CARD_PUTOFF, self.HandleCardPutOff);
    self:RegisterProtocal(proto.MAGIC_POWER, self.HandleCardPower);
end

function MagicCardCtrl:AddEvents()
    AddEventListenerInTab(CardEvent.CARD_OPEN, handler(self, self.HandleCardPanelOpen), self.events);
    AddEventListenerInTab(CardEvent.HANDBOOK_OPEN, handler(self, self.HandleHandbookOpen), self.events);

    local function call_back()
        self.model:CheckReddot()
    end

    GlobalEvent:AddListener(BagEvent.UpdateGoods, call_back)
end

function MagicCardCtrl:GameStart()
    local function step()
        -- 开始游戏请求魔法卡数据
        BagController:GetInstance():RequestBagInfo(BagModel.cardBag);
        self:RequestCardBagInfo();
        self:RequestMagicCardGetSet();
        self:RequestCardList();
    end
    self.time_id = GlobalSchedule:StartOnce(step, Constant.GameStartReqLevel.VLow)
end

function MagicCardCtrl:CheckUpStarOpen()
    local count = 0;
    for k, v in pairs(CardModel:GetInstance().EmbedCards) do
        local itemConfig = Config.db_item[v.id]
        if itemConfig.color >= CardModel.CAN_UPSTAR_COLOR then
            count = count + 1;
        end
    end

    if count == 0 then
        --Notify.ShowText("紫色品质以上的魔法卡才可以升星");
        --self:SwitchCallBack(self.selectedTog, 1, true);
        return ConfigLanguage.Card.UP_STAR_TIP;
    end
end

function MagicCardCtrl:CheckCombineOpen()
    if Config.db_game["magiccard_com"] then
        local tab = Config.db_game["magiccard_com"];
        local level = String2Table(tab.val)[1];
        local dunData = DungeonModel:GetInstance().dungeon_info_list[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MAGICTOWER];
        if dunData then
            local cur_floor = dunData.info.cur_floor
            if cur_floor and level and tonumber(cur_floor) < tonumber(level) then
                return string.format(ConfigLanguage.Card.COMBINE_OPEN_TIP, tostring(level));
            end
        end

    end
end

function MagicCardCtrl:AddOpenPanelEvent()
    --local function callBack ()
    --    --print2("asdkjahsdkhaksdj");
    --    lua_panelMgr:GetPanelOrCreate(ExpDungeonPanel):Open()
    --end
    --
    --GlobalEvent:AddListener(DungeonEvent.OPEN_EXP_PANEL, callBack)
end

--@ling autofun
function MagicCardCtrl:HandleCardPanelOpen(data)
    lua_panelMgr:GetPanelOrCreate(CardPanel):Open(data);--{ label = 1, item_id = 10086 }
end
--未测试
function MagicCardCtrl:HandleHandbookOpen()
    --lua_panelMgr:GetPanelOrCreate(MagicCardHandBookPanel):Open();
    if self.handbook then
        self.handbook:destroy();
    end
    self.handbook = MagicCardHandBookPanel(LayerManager:GetInstance():GetLayerByName(LayerManager.LayerNameList.Top));
end

--function MagicCardCtrl:OpenDungeonPanel()
--    lua_panelMgr:GetPanelOrCreate(DungeonPanel):Open()
--end




--以下是协议处理部份
--@ling autofun
--请求卡片列表
function MagicCardCtrl:RequestCardList()
    local pb = self:GetPbObject("m_magic_card_list_tos");
    self:WriteMsg(proto.MAGIC_CARD_LIST, pb);
end
--@ling autofun
--处理卡片列表
function MagicCardCtrl:HandleCardList()
    local data = self:ReadMsg("m_magic_card_list_toc");
    for k, v in pairs(data.cards) do
        local cardData = v;
        self.model.EmbedCards[k] = v;
    end
    self.model:SetCardIsOwnProp();
    BrocastModelEvent(CardEvent.CARD_LIST, nil, data.cards);
    self.model:CheckReddot();
end
--@ling autofun
function MagicCardCtrl:RequestCardPuton(pos, uid)
    local pb = self:GetPbObject("m_magic_card_puton_tos");
    pb.pos = pos;
    pb.uid = uid;
    self:WriteMsg(proto.MAGIC_CARD_PUTON, pb);
end
--@ling autofun
function MagicCardCtrl:HandleCardPuton()
    local data = self:ReadMsg("m_magic_card_puton_toc");
    --需要加字段,卡槽位置
end
--@ling autofun
function MagicCardCtrl:RequestCardUpstar(pos)
    local pb = self:GetPbObject("m_magic_card_upstar_tos");
    pb.pos = pos;
    self:WriteMsg(proto.MAGIC_CARD_UPSTAR, pb);
end
--@ling autofun
function MagicCardCtrl:HandleCardUpstar()
    local data = self:ReadMsg("m_magic_card_upstar_toc");
    BrocastModelEvent(CardEvent.CARD_UP_STAR);
end
--@ling autofun
function MagicCardCtrl:RequestCardStrength(pos)
    local pb = self:GetPbObject("m_magic_card_strength_tos");
    pb.pos = pos;
    self:WriteMsg(proto.MAGIC_CARD_STRENGTH, pb);
end
--@ling autofun
function MagicCardCtrl:HandleCardStrength()
    local data = self:ReadMsg("m_magic_card_strength_toc");
    BrocastModelEvent(CardEvent.CARD_STRENGTH, nil, data);
    self.model:CheckReddot();
end
--@ling autofun
function MagicCardCtrl:RequestCardDecompose(uidTab)
    local pb = self:GetPbObject("m_magic_card_decompose_tos");
    for i = 1, #uidTab, 1 do
        pb.uid:append(uidTab[i]);
    end
    self:WriteMsg(proto.MAGIC_CARD_DECOMPOSE, pb);
end
--@ling autofun
function MagicCardCtrl:HandleCardDecompose()
    local data = self:ReadMsg("m_magic_card_decompose_toc");
    BrocastModelEvent(CardEvent.CARD_DECOMPOSE);
end

--@ling autofun
function MagicCardCtrl:RequestCardSuite()

end
--@ling autofun
function MagicCardCtrl:HandleCardSuite()
    local data = self:ReadMsg("m_magic_card_suite_toc");
    self.model.suite_id = data.suite_id;
    BrocastModelEvent(CardEvent.CARD_SUIT_ID);
end

--@ling autofun
function MagicCardCtrl:RequestCardCombine(r_item_id)
    local pb = self:GetPbObject("m_magic_card_combine_tos");
    pb.r_item_id = r_item_id;
    self:WriteMsg(proto.MAGIC_CARD_COMBINE, pb);
end
--@ling autofun
function MagicCardCtrl:HandleCardCombine()
    local data = self:ReadMsg("m_magic_card_combine_toc");
    BrocastModelEvent(CardEvent.CARD_COMBINE);
end

--@ling autofun
function MagicCardCtrl:RequestCardBagInfo()
    local pb = self:GetPbObject("m_magic_card_bag_info_tos");
    self:WriteMsg(proto.MAGIC_CARD_BAG_INFO, pb);
end
--@ling autofun
function MagicCardCtrl:HandleCardBagInfo()
    local data = self:ReadMsg("m_magic_card_bag_info_toc");
    local items = data.items;
    if items then
        if items[90010012] then
            self.model.Value1 = items[90010012];
        end
        if items[90010013] then
            self.model.Value2 = items[90010013];
        end
        if items[90010014] then
            self.model.Value3 = items[90010014];
        end
    end
    GlobalEvent:Brocast(BagEvent.UpdateGoods, 90010012);
end

function MagicCardCtrl:RequestMagicCardGetSet()
    local pb = self:GetPbObject("m_magic_card_get_set_tos");
    self:WriteMsg(proto.MAGIC_CARD_GET_SET, pb);
end
--optional int32 auto = 1;        //是否自动分解（0-否，1-是）
--repeated int32 color = 2;       //分解颜色品质
function MagicCardCtrl:HandleCardGetSet()
    local data = self:ReadMsg("m_magic_card_get_set_toc");
    CardModel:GetInstance().autoBag = data.auto;
    CardModel:GetInstance().selectedColor = data.color;
    BrocastModelEvent(CardEvent.CARD_GET_SET);
end
--optional int32 auto = 1;        //是否自动分解（0-否，1-是）
--repeated int32 color = 2;       //分解颜色品质
function MagicCardCtrl:RequestDecomposeSet(bag, colors)
    local pb = self:GetPbObject("m_magic_card_decompose_set_tos");
    if bag == 1 then
        pb.auto = 1;
    else
        pb.auto = 0;
    end
    for i = 1, #colors, 1 do
        if colors[i] then
            pb.color:append(i);
        end
    end
    self:WriteMsg(proto.MAGIC_CARD_DECOMPOSE_SET, pb);
end

function MagicCardCtrl:HandleCardDecomposeSet()
    local data = self:ReadMsg("m_magic_card_decompose_set_toc");
    BrocastModelEvent(CardEvent.CARD_GET_SET);
end

function MagicCardCtrl:HandleCardPutOff()
    local data = self:ReadMsg("m_magic_card_putoff_toc");
    local poss = data.pos;
    for i = 1, #poss, 1 do
        local pos = poss[i];
        self.model.EmbedCards[pos] = nil;
    end
    self.model:SetCardIsOwnProp();
    BrocastModelEvent(CardEvent.CARD_PUTOFF);
end

function MagicCardCtrl:HandleCardPower()
    local data = self:ReadMsg("m_magic_power_toc");
    local power = data.power;
    CardModel:GetInstance().power = power;
    BrocastModelEvent(CardEvent.CARD_POWER, nil, power);
end

--@ling autofun
--function MagicCardCtrl:HandleSweep()
--    local data = self:ReadMsg("m_dunge_sweep_toc");
--    local panel = lua_panelMgr:GetPanel(SweepResultPanel);
--    if panel then
--        panel:RefreshData(data);
--    else
--        lua_panelMgr:GetPanelOrCreate(SweepResultPanel):Open(data);
--    end
--end
--
--function MagicCardCtrl:RequestSweep(id , floor)
--    local pb = self:GetPbObject("m_dunge_sweep_tos");
--    pb.id = id;
--    pb.floor = floor;
--    self:WriteMsg(proto.DUNGE_SWEEP, pb);
--end
--
--function MagicCardCtrl:RequestBossAnger()
--    local pb = self:GetPbObject("m_boss_anger_tos", "pb_1204_boss_pb")
--    self:WriteMsg(proto.BOSS_ANGER, pb)
--end
--
--function MagicCardCtrl:HandleBossAnger()
--    local data = self:ReadMsg("m_boss_anger_toc", "pb_1204_boss_pb");
--    DungeonModel:GetInstance().angryData = data;
--    GlobalEvent:Brocast(DungeonEvent.DUNGEON_SAVAGE_ANGRY_DATA);
--end

