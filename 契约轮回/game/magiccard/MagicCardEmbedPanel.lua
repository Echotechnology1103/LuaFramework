---魔法卡UI
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/12/04 16:07
---
MagicCardEmbedPanel = MagicCardEmbedPanel or class("MagicCardEmbedPanel", BaseItem)
local this = MagicCardEmbedPanel

local lua_resMgr = LuaResourceManager:GetInstance()

function MagicCardEmbedPanel:ctor(parent_node)
    self.abName = "magiccard";
    self.image_ab = "magiccard_image";
    self.assetName = "MagicCardEmbedPanel"
    self.layer = "UI"
    self.model = CardModel.GetInstance()
    self.events = {};
    self.schedules = {};
    self.selectedCard = nil;
    self.cardSlots = {};--卡槽
    self.lockTexts = {};--锁
    self.cardAdds = {};--加
    self.isOpen = {};--8个格子是否开放
    self.embedCardUI = {};--卡片UI本身
    self.cardReddots = {};--红点
    self.selectedItemIndex = -1;
    MagicCardEmbedPanel.super.Load(self);
    --DungeonCtrl:GetInstance().MagicCardEmbedPanel = self;
end

function MagicCardEmbedPanel:dctor()
    self.model = nil;

    GlobalEvent:RemoveTabListener(self.events);
    self.selectedItemIndex = -1;
    self:StopAllSchedules()

    destroyTab(self.items);
    self.items = {};
    self.selectedCard = nil;
    self.cardSlots = {};
    self.isOpen = {};
    self.cardAdds = {};--锁
    if self.handbook then
        self.handbook:destroy();
    end

    destroyTab(self.linkimgtexts);
    self.linkimgtexts = nil;

    --if self.soulItem then
    --    self.soulItem:destroy();
    --end
    --self.soulItem = nil;

    if self.cardicon then
        self.cardicon:destroy();
    end
    self.cardicon = nil;

    if self.updatePowerEventId then
        RemoveModelListener(self.updatePowerEventId, MagictowerTreasureModel:GetInstance());
    end

    if self.skillView then
        self.skillView:destroy();
    end

    destroyTab(self.propItems);
    self.propItems = nil;

    self.cardSlots = nil;--卡槽
    self.lockTexts = nil;--锁
    self.cardAdds = nil;--加
    self.isOpen = nil;--8个格子是否开放

    for k,v in pairs(self.embedCardUI) do
        v:destroy()
    end
    self.embedCardUI = nil;--卡片UI本身

    destroyTab(self.cardReddots);
    self.cardReddots = nil;--红点
    self.labels = nil;
    self.values = nil;

    if self.upgrade_btn_red then
        self.upgrade_btn_red:destroy();
    end
    self.upgrade_btn_red = nil;
    if self.replace_btn_red then
        self.replace_btn_red:destroy();
    end
    self.replace_btn_red = nil;

    self:DestroyEffect();
end

function MagicCardEmbedPanel:DestroyEffect()
    if self.effect then
        self.effect:destroy();
    end
    self.effect = nil;
end

function MagicCardEmbedPanel:Open(data)
    self.data = data;
    WindowPanel.Open(self)
end

function MagicCardEmbedPanel:LoadCallBack()
    self.nodes = {
        --强化部份
        "strength/stren_name", "strength/upgrade_btn", "strength/values/value_1", "strength/replace_btn", "strength",
        "strength/values/value_4", "strength/values/value_2", "strength/values/value_3",
        "strength/icon", "strength/values/value_6", "strength/values/value_5",
        "strength/labels/label_6", "strength/labels/label_4", "strength/labels/label_5", "strength/labels/label_1", "strength/labels/label_3", "strength/labels/label_2",
        --镶嵌部份
        "embed/skill_icon", "embed/slots/card_slot_6", "embed/slots/card_slot_1", "embed/skillactivetext", "embed/slots/card_slot_2", "embed/slots/card_slot_5", "embed/slots/card_slot_8", "embed/slots/card_slot_4", "embed/slots/card_slot_3", "embed/slots/card_slot_7",
        "embed/added/card_slot_add_8", "embed/added/card_slot_add_4", "embed/added/card_slot_add_7", "embed/added/card_slot_add_1", "embed/added/card_slot_add_6", "embed/added/card_slot_add_3", "embed/added/card_slot_add_2", "embed/added/card_slot_add_5",
        "embed/lock/card_slot_lock_6", "embed/lock/card_slot_lock_1", "embed/lock/card_slot_lock_2", "embed/lock/card_slot_lock_5", "embed/lock/card_slot_lock_8", "embed/lock/card_slot_lock_4", "embed/lock/card_slot_lock_3", "embed/lock/card_slot_lock_7",
        --属性部份
        "prop", "prop/hanbook_btn", "prop/bag_btn", "prop/pv/prop_value_10", "prop/addsoul_btn", "prop/soul", "prop/soul_value",
        --"prop/pv/prop_value_8", "prop/pv/prop_value_1", "prop/pv/prop_value_9", "prop/pv/prop_value_6", "prop/pv/prop_value_7",
        --"prop/pv/prop_value_12", "prop/pv/prop_value_2", "prop/pv/prop_value_11", "prop/pv/prop_value_4", "prop/pv/prop_value_3", "prop/pv/prop_value_5",
        --其它
        "bg", "prop/soul/light",

        "strength/arrow/arrow1", "strength/arrow/arrow2", "strength/arrow", "strength/up", "strength/up/up_1", "strength/up/up_2", "power/power_text", "power",

        "strength/isBestProp",

        "bg/skilldes_bg/qianwangtxt", "bg/skillname_bg", "bg/skillname_bg/skill_name", "bg/skilldes_bg/skill_des", "bg/skilldes_bg",

        "prop/Scroll View/Viewport/Content",

        "embed/card_selected",
    }
    self:GetChildren(self.nodes);

    SetLocalPosition(self.transform, 0, 0, 0)

    --SetGameObjectActive(self.prop_item, false);
    self:InitUI();

    self:AddEvent();

    self:RefreshOpen();

    self:HandleCardList(self.model.EmbedCards);
end

function MagicCardEmbedPanel:InitUI()
    --强化部份
    self.stren_name = GetText(self.stren_name);
    self.labels = {};
    self.values = {};
    self.linkimgtexts = {};
    for i = 1, 6, 1 do
        self.labels[i] = GetText(self["label_" .. i]);
        local value_name = "value_" .. i;
        local linkimgtext = GetLinkText(self[value_name]);
        if linkimgtext then
            self.linkimgtexts[i] = LuaLinkImageText(self, linkimgtext, nil, handler(self, self.HandleTextCall));
            self.values[i] = linkimgtext;
        else
            self.values[i] = GetText(self[value_name]);
        end
    end

    self.isBestProp = GetText(self.isBestProp);

    self.skill_name = GetText(self.skill_name);
    SetGameObjectActive(self.skillname_bg, false);

    --SetGameObjectActive(self.values[6].gameObject, false);
    --SetGameObjectActive(self.labels[6].gameObject, false);
    self.upgrade_btn = GetButton(self.upgrade_btn);
    self.replace_btn = GetButton(self.replace_btn);

    self.upgrade_btn_red = RedDot(self.upgrade_btn.transform, nil, RedDot.RedDotType.Nor);
    self.upgrade_btn_red:SetPosition(62, 22);
    --self.upgrade_btn_red:SetRedDotParam(true);
    self.replace_btn_red = RedDot(self.replace_btn.transform, nil, RedDot.RedDotType.Nor);
    self.replace_btn_red:SetPosition(62, 22);
    --self.replace_btn_red:SetRedDotParam(true);

    SetGameObjectActive(self.strength, false);
    --属性部份

    --self.propLabels = {};
    --self.propValues = {};
    --for i = 1, 12, 1 do
    --    --self.propLabels[i] = GetText(self["prop_label_" .. i]);
    --    self.propValues[i] = GetText(self["prop_value_" .. i]);
    --end

    --也是战力值
    self.power_text = GetText(self.power_text);

    self.addsoul_btn = GetButton(self.addsoul_btn);

    self.cardSlots = {};
    for i = 1, 8, 1 do
        self.cardSlots[i] = GetImage(self["card_slot_" .. i]);
        self.cardAdds[i] = GetImage(self["card_slot_add_" .. i]);
        self.lockTexts[i] = GetText(self["card_slot_lock_" .. i]);
        self.cardReddots[i] = RedDot(self.cardSlots[i].transform, nil, RedDot.RedDotType.Nor);
        self.cardReddots[i]:SetPosition(46, 51);
    end

    --灵魂值
    self.soulItem = GetImage(self.light);--BossBloodItem(self.soul, 1);
    self.soul_value = GetText(self.soul_value);

    self:HandleUpdatePower();

    --技能是否已激活文本
    self.skillactivetext = GetImage(self.skillactivetext);

    SetGameObjectActive(self.skillactivetext);

    self.skill_icon = GetImage(self.skill_icon);
    SetGameObjectActive(self.skill_icon, true);
    self.hanbook_btn = GetButton(self.hanbook_btn);

    self.bag_btn = GetButton(self.bag_btn);

    self:SetPowerText();

    self:HandleSuit();

    SetGameObjectActive(self.arrow, false);
    SetGameObjectActive(self.up, false);

    self.card_selected = GetImage(self.card_selected);
    SetGameObjectActive(self.card_selected, false);
end

--@ling autofun
function MagicCardEmbedPanel:HandleDungeonData(dungeon_type, _data)
    if dungeon_type == enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MAGICTOWER then
        self:RefreshOpen();
    end
end

--@ling autofun
function MagicCardEmbedPanel:RefreshOpen()
    local data = DungeonModel:GetInstance().dungeon_info_list[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MAGICTOWER];
    if data and data.info then
        local curFloor = tonumber(data.info.cur_floor);
        for i = 1, 8 do
            if Config.db_magic_card_pos[i] then
                if curFloor > tonumber(Config.db_magic_card_pos[i].gate) then
                    self.isOpen[i] = true;
                    SetGameObjectActive(self.lockTexts[i], false);
                    lua_resMgr:SetImageTexture(self, self.cardSlots[i], self.image_ab, "magic_card_embed_prop_bg2", false);
                else
                    SetGameObjectActive(self.lockTexts[i], true);
                    self.lockTexts[i].text = "Unlock at: F" .. Config.db_magic_card_pos[i].gate;
                    self.isOpen[i] = false;
                    lua_resMgr:SetImageTexture(self, self.cardSlots[i], self.image_ab, "magic_card_embed_prop_bg1", false);
                end
            end
        end
        self:SetCardLockOrAdd();
    end
end

function MagicCardEmbedPanel:SetCardLockOrAdd()
    for i = 1, #self.isOpen, 1 do
        if self.isOpen[i] and not self.model.EmbedCards[i] then
            if i < 3 then
                lua_resMgr:SetImageTexture(self, self.cardAdds[i], self.image_ab, "magic_card_embed_core", false, nil, false);
                if self.model.red_dot_list[1][2][i] and self.model.red_dot_list[1][2][i]:Contain(BitState.State[1]) then
                    self.cardReddots[i]:SetRedDotParam(true);
                else
                    self.cardReddots[i]:SetRedDotParam(false);
                end
            else
                lua_resMgr:SetImageTexture(self, self.cardAdds[i], self.image_ab, "magic_card_embed_added", false, nil, false);
                self.cardReddots[i]:SetRedDotParam(false);
            end

        end
    end
end

function MagicCardEmbedPanel:SetPowerText()
    self.power_text.text = tostring(CardModel:GetInstance().power);
end

function MagicCardEmbedPanel:AddEvent()
    --print2("MagicCardEmbedPanel:AddEvent");
    for k, v in pairs(self.cardSlots) do
        AddClickEvent(v.gameObject, handler(self, self.HandleCardClick));--理论上需要添加了卡片才需要加这个点击事件
    end

    --for i = 1, 4 , 1 do
    --    self.values[i]:AddLoadSpriteFun(handler(self , self.HandlePropArrow));
    --end

    AddClickEvent(self.bg.gameObject, handler(self, self.HandleBgClick));

    AddClickEvent(self.upgrade_btn.gameObject, handler(self, self.HandleUpgrade));
    AddClickEvent(self.replace_btn.gameObject, handler(self, self.HandleReplace));

    AddClickEvent(self.hanbook_btn.gameObject, handler(self, self.HandleHandBook));
    AddClickEvent(self.bag_btn.gameObject, handler(self, self.HandleBag));

    AddEventListenerInTab(CardEvent.CARD_LIST, handler(self, self.HandleCardList), self.events);

    AddEventListenerInTab(DungeonEvent.UpdateDungeonData, handler(self, self.HandleDungeonData), self.events);
    AddEventListenerInTab(CardEvent.CARD_STRENGTH, handler(self, self.HandleCardStrength), self.events);
    AddEventListenerInTab(CardEvent.CARD_SUIT_ID, handler(self, self.HandleSuit), self.events);
    self.updatePowerEventId = AddEventListenerInTab(MagictowerTreasureEvent.UpdatePower, handler(self, self.HandleUpdatePower), self.events, MagictowerTreasureModel:GetInstance());

    AddClickEvent(self.addsoul_btn.gameObject, handler(self, self.HandleAddSoul));

    AddEventListenerInTab(CardEvent.CARD_POWER, function()
        self:SetPowerText();
    end, self.events);

    local updateNumCallBack = function(id)
        if id == 90010012 then

        end
    end
    AddEventListenerInTab(BagEvent.UpdateGoods, updateNumCallBack, self.events);

    AddClickEvent(self.skilldes_bg.gameObject, handler(self, self.HandleQianWang))
end

function MagicCardEmbedPanel:HandleSuit()
    if self.skillView then
        self.skillView:destroy();
    end
    self:DestroyEffect();
    --self.skillView = CardSkillView(self.transform);
    if self.model.suite_id == 0 then
        --未激活
        SetGameObjectActive(self.skillname_bg, true);
        RemoveClickEvent(self.skill_icon.gameObject);
        local call_back = function(go, x, y)
            --local suitConfig = Config.db_magic_card_suite[(self.model.suite_id + 1)];
            --if suitConfig then
            --    local skillID = suitConfig.skill_id;
            --    local skillConfig = Config.db_skill[skillID];
            --    if skillConfig then
            --        self.skill_name.text = skillConfig.name;
            --        local tipsPanel = lua_panelMgr:GetPanelOrCreate(TipsSkillPanel)
            --        tipsPanel:Open();
            --        tipsPanel:SetId(skillConfig.id, self.transform);
            --    end
            --end
            self.skillView = CardSkillView(LayerManager:GetInstance():GetLayerByName(LayerManager.LayerNameList.Top));
            --self.skillView:SetOrderByParentMax();
            --Notify.ShowText("技能未激活");
        end
        AddClickEvent(self.skill_icon.gameObject, call_back);
        ShaderManager:GetInstance():SetImageGray(self.skill_icon);
        SetGameObjectActive(self.skill_icon.gameObject, true);


    else
        SetGameObjectActive(self.skillname_bg, true);
        RemoveClickEvent(self.skill_icon.gameObject);
        ShaderManager:GetInstance():SetImageNormal(self.skill_icon);
        SetGameObjectActive(self.skill_icon, true);

        self.effect = UIEffect(self.skill_icon.transform, 20427, false);
        self.effect:SetConfig({ pos = { x = 0, y = 8, z = 0 } })
        local suitConfig = Config.db_magic_card_suite[self.model.suite_id];
        if suitConfig then
            local skillidTab = String2Table(suitConfig.skill_id);
            local skillID = skillidTab and skillidTab[1];
            local skillConfig = Config.db_skill[skillID];
            if skillConfig then
                self.skill_name.text = skillConfig.name;
                lua_resMgr:SetImageTexture(self, self.skill_icon, "iconasset/icon_skill", skillConfig.icon, false);
                --SetGameObjectActive(self.skillactivetext, true);
                local call_back = function(go, x, y)
                    --local tipsPanel = lua_panelMgr:GetPanelOrCreate(TipsSkillPanel)
                    --tipsPanel:Open();
                    --tipsPanel:SetId(skillConfig.id, self.transform);
                    self.skillView = CardSkillView(LayerManager:GetInstance():GetLayerByName(LayerManager.LayerNameList.Top));
                    --self.skillView:SetOrderByParentMax();
                end
                AddClickEvent(self.skill_icon.gameObject, call_back);
            else
                Notify.ShowText("Failed to find set skill");
            end
        else
            Notify.ShowText("Failed to find the set");
        end
    end
end

function MagicCardEmbedPanel:HandleQianWang(go, x, y)
    lua_panelMgr:GetPanelOrCreate(DungeonEntrancePanel):Open(1, 1);
end

--@ling autofun
function MagicCardEmbedPanel:HandlePropArrow(spriteName)
    local spr = resMgr:GetSprite(self.image_ab, spriteName);
    return spr;
end

--@ling autofun
function MagicCardEmbedPanel:HandleAddSoul(go, x, y)
    --Notify.ShowText("去商城购买");
    UnpackLinkConfig("230@1@true")
end

--@ling autofun
function MagicCardEmbedPanel:HandleUpdatePower()
    if MagictowerTreasureModel:GetInstance().mt_treasure_info then
        local power = tonumber(MagictowerTreasureModel:GetInstance().mt_treasure_info.power);
        self.soul_value.text = power;
        if power >= 400 then
            self.soulItem.fillAmount = 1;--:UpdateCurrentBloodImmi(100, 100);
        else
            self.soulItem.fillAmount = power / 400;--self.soulItem:UpdateCurrentBloodImmi(power, 400);
        end
    end
end

--@ling autofun--原来颜色是38BA3B
function MagicCardEmbedPanel:HandleCardStrength(data)
    if data then
        Notify.ShowText("Enhanced");
        local pos = data.pos;
        if self.embedCardUI[pos] then
            local cardData = CardModel.GetInstance().EmbedCards[pos];
            local card = self.embedCardUI[pos];
            local cardConfig = Config.db_magic_card[cardData.id]
            card:UpdateData(cardConfig);

            local level = cardData.extra or 1;
            if Config.db_magic_card_strength[level] then
                local needTab = String2Table(Config.db_magic_card_strength[level].cost);
                if needTab then
                    if self.model.Value1 > needTab[2] then
                        self.values[6].text = "<color=#3ab60e>"..self.model.Value1 .. "</color>/" .. needTab[2];--升级需要
                    else
                        self.values[6].text = "<color=#ff1212>" .. self.model.Value1 .. "</color>/" .. needTab[2];--升级需要
                    end
                end
            end
        end
    end
    self:CalcProp();
    self:UpdateReddot();
end

--@ling autofun
function MagicCardEmbedPanel:HandleCardList(cards)
    for i = 1, 8 do
        if cards[i] then
            self.cardReddots[i]:SetRedDotParam(false);
        end
    end
    if self.cardSlots then
        for k, v in pairs(cards) do
            if self.cardSlots[k] then
                if self.embedCardUI[k] then
                    self.embedCardUI[k]:destroy();
                end
                local cardConfig = Config.db_magic_card[v.id];
                local card = MagicCard(self.cardSlots[k].transform, cardConfig);
                card.cardData = v;
                card:SetCardSacle(0.5);
                --card:ShowStars(true);
                card:ShowCardLV(true);
                card:ShowCardName(false);
                card:SetCardLv(v.extra)
                self.embedCardUI[k] = card;
                SetGameObjectActive(self.cardAdds[k].gameObject, false);
                if self.model.red_dot_list[1][2][k] then
                    card:SetRedDotParam(true)
                else
                    card:SetRedDotParam(false)
                end
            end
        end
        if self.selectedItemIndex ~= -1 then
            if self.embedCardUI[self.selectedItemIndex] then
                self:SelectCardItem(self.embedCardUI[self.selectedItemIndex]);
            end
        end
    end
    self:CalcProp();
end

function MagicCardEmbedPanel:SortProp(props)
    local fun1 = function(tab1, tab2)
        if tab1[1] == 0 and tab2[1] == 0 then
            return tab1[2] < tab2[2];
        elseif tab1[1] == 0 or tab2[1] == 0 then
            return tab1[1] ~= 0;
        else
            return tab1[2] < tab2[2];
        end
    end
    table.sort(props, fun1);
    return props;
end

function MagicCardEmbedPanel:CalcProp()
    local cards = self.model.EmbedCards;
    local props = {
        [45] = { 0, 1, 45 },
        [46] = { 0, 2, 46 },
        [2000] = { 0, 3, 2000 },
        [1604] = { 0, 4, 1604 },
        [1304] = { 0, 5, 1304 },
        [1302] = { 0, 6, 1302 },
        [1306] = { 0, 7, 1306 },
        [1305] = { 0, 8, 1305 },
        [1404] = { 0, 9, 1404 },
        [1502] = { 0, 10, 1502 },
        [1406] = { 0, 11, 1406 },
        [1505] = { 0, 12, 1505 },
        [4] = { 0, 13, 4 },
        [2] = { 0, 14, 2 },
        [5] = { 0, 15, 5 },
        [6] = { 0, 16, 6 },
    };
    --print2("计算所有属性");
    for k, cardData in pairs(cards) do
        local cardConfig = Config.db_magic_card[cardData.id];
        local level = cardData.extra or 1;
        if cardConfig and cardConfig.base then
            local base = String2Table(cardConfig.base);
            for k, v in pairs(base) do
                local key = v[1];
                local value = v[2];
                --if not props[key] then
                --    props[key] = 0
                --end
                local tab = props[key];
                tab[1] = tab[1] + value + GetMagicCardStrengthProp(cardData.id, key, level);
            end
        end
    end
    local props2 = {};
    for k, v in pairs(props) do
        table.insert(props2, v)
    end
    props = self:SortProp(props2)
    destroyTab(self.propItems);
    self.propItems = {};
    --SetGameObjectActive(self.prop_item, true);
    local index = 0;
    --for k, v in pairs(props) do
    for i = 1, #props do
        local pt = props[i];
        local k = pt[3];
        local v = pt[1];
        local item = EmbedPropItem(self.Content);
        table.insert(self.propItems, item);
        --SetParent(item.transform, self.Content);
        --SetLocalScale(item.transform, 1, 1, 1);
        --SetLocalPosition(item.transform, 0, 0, 0);
        local label = PROP_ENUM[k].label;
        if string.utf8len(label) == 2 then
            label = table.concat(string.utf8list(label), "") .. "：";
        else
            label = PROP_ENUM[k].label .. "：";
        end

        --self.labels[index].text = label;

        local value = v;
        if k >= 13 then
            value = GetPreciseDecimal(tonumber(value) / 100, 2) .. "%";
            --value = string.gsub(value, "%.", "d")
        else
            --value = string.gsub(tostring(value), "%.", "d");
        end
        --self.values[index].text = value;
        item:SetData(label, value);
        index = index + 1;
    end
    --local rt = self.Content:GetComponent("RectTransform");
    --rt.sizeDelta = Vector2(rt.sizeDelta.x, #self.propItems * 35);
    --SetGameObjectActive(self.prop_item, false);
end

--@ling autofun
function MagicCardEmbedPanel:HandleBag(go, x, y)
    lua_panelMgr:GetPanelOrCreate(MagicCardBagPanel):Open(nil, 0);
end
--@ling autofun
function MagicCardEmbedPanel:HandleHandBook(go, x, y)
    BrocastModelEvent(CardEvent.HANDBOOK_OPEN);
end

--@ling autofun
function MagicCardEmbedPanel:HandleUpgrade(go, x, y)
    --print2("HandleUpgrade");
    if self.selectedItemIndex == -1 and self.embedCardUI[self.selectedItemIndex] then
        return ;
    end
    MagicCardCtrl:GetInstance():RequestCardStrength(self.selectedItemIndex)
end

--@ling autofun
function MagicCardEmbedPanel:HandleReplace(go, x, y)
    if self.selectedItemIndex == -1 then
        return ;
    end
    --SetGameObjectActive(self.prop.gameObject, true);
    --SetGameObjectActive(self.strength.gameObject, false);
    lua_panelMgr:GetPanelOrCreate(MagicCardBagPanel):Open(self.selectedItemIndex, 1);
end

--@ling autofun
--function MagicCardEmbedPanel:ClickCardStrength(card)
--    SetGameObjectActive(self.prop.gameObject, false);
--    SetGameObjectActive(self.strength.gameObject, true);
--
--    self:SelectCardItem(card);
--end

--@ling autofun magic_card_prop_next
function MagicCardEmbedPanel:SelectCardItem(card)
    --self.values[5].text = tostring(card.cardData.score);--这个是评分
    --self.values[5].text = tostring(tonumber(card.cardData.score + ));--这个是评分
    --self.values[6].text = tostring(10086);--这个是战力
    local stren = Config.db_magic_card_strength[card.data.id .. "@" .. card.cardLevel];
    if stren then
        self.values[5].text = tostring(tonumber(card.data.score + stren.fight));--这个是评分
    else
        self.values[5].text = tostring(tonumber(card.data.score));--这个是评分
    end

    self.stren_name.text = tostring(card.data.name);
    local cardConfig = card.data;

    for i = 2, 4 do
        SetGameObjectActive(self.values[i].gameObject, false);
        SetGameObjectActive(self.labels[i].gameObject, false);
    end

    local index = 1;
    local base = String2Table(cardConfig.base);
    local best = String2Table(cardConfig.rare);

    local level = card.cardData.extra or 1;

    for k, v in pairs(base) do
        local label = PROP_ENUM[v[1]].label;
        if string.utf8len(label) == 2 then
            label = table.concat(string.utf8list(label), "zz") .. "：";
        else
            label = PROP_ENUM[v[1]].label .. "：";
        end

        self.labels[index].text = label;

        local nextStr = GetMagicCardStrengthNextPropStr(card.data.id, v[1], level, v[2]);
        --<quad name=login:img_role_head_1 size=87 width=1 />
        local value = v[2] + GetMagicCardStrengthProp(card.data.id, v[1], level);
        if self.linkimgtexts[index] then
            self.linkimgtexts[index]:clear();
        end
        if v[1] >= 13 then
            value = GetPreciseDecimal(tonumber(value) / 100, 2) .. "%" .. nextStr;
            --value = string.gsub(value, "%.", "d")
        else
            --value = string.gsub(tostring(value), "%.", "d") .. nextStr;
            value = tostring(value) .. nextStr;
        end
        self.values[index].text = value;
        SetGameObjectActive(self.labels[index].gameObject, true);
        SetGameObjectActive(self.values[index].gameObject, true);

        index = index + 1;
    end
    index = 3;
    local flag = false;
    for k, v in pairs(best) do
        local label = PROP_ENUM[v[1]].label;
        if string.utf8len(label) == 2 then
            label = table.concat(string.utf8list(label), "zz") .. "：";
        else
            label = PROP_ENUM[v[1]].label .. "：";
        end

        self.labels[index].text = label;

        local nextStr = GetMagicCardStrengthNextPropStr(card.data.id, v[1], level, v[2]);
        local value = v[2] + GetMagicCardStrengthProp(card.data.id, v[1], level);
        if v[1] >= 13 then
            value = GetPreciseDecimal(tonumber(value) / 100, 2) .. "%" .. nextStr;
        else
            value = tostring(value) .. nextStr;
        end

        self.values[index].text = value;--string.gsub(tostring(value),"%." , "d");
        SetGameObjectActive(self.labels[index].gameObject, true);
        SetGameObjectActive(self.values[index].gameObject, true);

        index = index + 1;
        flag = true;
    end
    SetGameObjectActive(self.isBestProp, not flag);
    local levelkey = card.data.id .. "@" .. card.cardLevel;
    if Config.db_magic_card_strength[levelkey] then
        local needTab = String2Table(Config.db_magic_card_strength[levelkey].cost);
        if needTab then
            if self.model.Value1 >= needTab[2] then
                self.values[6].text = "<color=#3ab60e>" .. self.model.Value1 .. "</color>/" .. needTab[2];--升级需要
            else
                self.values[6].text = "<color=#ff1212>" .. self.model.Value1 .. "</color>/" .. needTab[2];--升级需要
            end
        end
    end

    if self.cardicon then
        --local cardConfig = Config.db_magic_card[self.data.id];
        self.cardicon:destroy();
    end
    self.cardicon = CardIcon(self.icon, card.data, card.cardData);
    self.cardicon:ShowCardName(false);
    self.cardicon:ShowCardLV(true);
    self.cardicon:SetCardLv(card.cardData.extra);

    self:UpdateReddot();
    --self.awarditem:SetData(cardConfig.id);
    --self.values[3].text = c
end

function GetMagicCardStrengthNextPropStr(cardId, prop, level, prop2)
    local key = cardId .. "@" .. (level + 1);
    local nextStr = "";
    if Config.db_magic_card_strength[key] then
        local attrTab = Config.db_magic_card_strength[key];
        local uBase = String2Table(attrTab.attrib);

        for i = 1, #uBase do
            local tab = uBase[i];
            if tab[1] == prop then
                if prop >= 13 then
                    nextStr = "  <quad name=magiccard:magic_card_prop_next size=22 width=1 />  " .. (GetPreciseDecimal(tonumber(tab[2]) / 100, 2) + GetPreciseDecimal(tonumber(prop2) / 100, 2)) .. "%";
                else
                    nextStr = "  <quad name=magiccard:magic_card_prop_next size=22 width=1 />  " .. (tonumber(tab[2]) + tonumber(prop2));
                end
            end
        end
        --<color=#00FF00> + </color>
        --"<color=#00FF00><size=26> → </size></color>"
        --"<quad name=magic_card_prop_next size=28 width=1 />"


    end
    --nextStr = string.gsub(tostring(nextStr), "%.", "d");
    return nextStr;
end

--function GetMagicCardStrengthPropStr(prop, level)
--    local key = prop .. "@" .. (level);
--    local nextStr = "";
--    if Config.db_magic_card_strength_attrib[key] then
--        local attrTab = Config.db_magic_card_strength_attrib[key];
--        local uBase = String2Table(attrTab.attrib);
--        --<color=#00FF00> + </color>
--        --"<color=#00FF00><size=26> → </size></color>"
--        --"<quad name=magic_card_prop_next size=28 width=1 />"
--        nextStr = "  <quad name=magic_card_prop_next size=26 width=1 />  " .. (GetPreciseDecimal(tonumber(uBase[2]) / 100, 2) + GetPreciseDecimal(tonumber(prop2) / 100, 2)) .. "%";
--    end
--    return tostring(nextStr);
--end
function GetMagicCardStrengthProp(cardId, prop, level)
    local key = cardId .. "@" .. (level);
    local nextStr = "";
    if Config.db_magic_card_strength[key] then
        local attrTab = Config.db_magic_card_strength[key];
        local uBase = String2Table(attrTab.attrib);
        for i = 1, #uBase do
            local tab = uBase[i];
            if tab[1] == prop then
                return tonumber(tab[2]);
            end
        end
    end
    return 0;
end

--@ling autofun
function MagicCardEmbedPanel:HandleCardClick(go, x, y)
    for i, v in ipairs(self.cardSlots) do
        if v.gameObject == go then
            self.selectedCard = self.embedCardUI[i];
            self.selectedItemIndex = i;
        end
    end

    if not self.isOpen[self.selectedItemIndex] then
        local mtconfig = Config.db_magic_card_pos[self.selectedItemIndex];
        if mtconfig then
            Notify.ShowText("You need to clear F" .. tostring(mtconfig.gate) .. " of Magic Tower");
        else
            Notify.ShowText("You need to clear");
        end
        return ;
    end
    SetGameObjectActive(self.card_selected.transform, false);
    local name = go.name;
    local idstr = string.gsub(name, "card_slot_", "");
    local id = tonumber(idstr);
    if id ~= 0 and id ~= nil then

    end
    if self.model.EmbedCards[id] then
        --如果有数据了直接显示强化
        SetGameObjectActive(self.prop.gameObject, false);
        SetGameObjectActive(self.strength.gameObject, true);
        self:SelectCardItem(self.selectedCard);
        SetGameObjectActive(self.card_selected, true);
        SetParent(self.card_selected.transform, self.cardSlots[id].transform);
        SetLocalPosition(self.card_selected.transform, 0, 0, 0);
        SetLocalScale(self.card_selected.transform , 1,1,1);
    else
        --否则显示镶嵌背包
        SetGameObjectActive(self.prop.gameObject, true);
        SetGameObjectActive(self.strength.gameObject, false);
        lua_panelMgr:GetPanelOrCreate(MagicCardBagPanel):Open(id, 2);
    end
end

--@ling autofun
function MagicCardEmbedPanel:HandleBgClick(go, x, y)
    self:CalcProp();
    SetGameObjectActive(self.card_selected.transform, false);
    SetGameObjectActive(self.prop.gameObject, true);
    SetGameObjectActive(self.strength.gameObject, false);
end

function MagicCardEmbedPanel:StopAllSchedules()
    for i = 1, #self.schedules, 1 do
        GlobalSchedule:Stop(self.schedules[i]);
    end
    self.schedules = {};
end

function MagicCardEmbedPanel:HandleTextCall()

end

function MagicCardEmbedPanel:UpdateReddot()
    local tab = CardModel.GetInstance().EmbedCards;--在身上的所有的卡片
    for i = 1, 8, 1 do
        if tab[i] then
            if self.model.red_dot_list[1][2][i] and (self.model.red_dot_list[1][2][i]:Contain(BitState.State[2]) or self.model.red_dot_list[1][2][i]:Contain(BitState.State[3])) then
                self.embedCardUI[i]:SetRedDotParam(true);
            else
                self.embedCardUI[i]:SetRedDotParam(false);
            end
        else
            if self.cardReddots[i] then
                if self.model.red_dot_list[1][2][i] and self.model.red_dot_list[1][2][i]:Contain(BitState.State[1]) then
                    self.cardReddots[i]:SetRedDotParam(true);
                else
                    self.cardReddots[i]:SetRedDotParam(false);
                end
            end
        end
    end

    local i = self.selectedItemIndex;
    if self.replace_btn_red then
        if self.model.red_dot_list[1][2][i] and self.model.red_dot_list[1][2][i]:Contain(BitState.State[3]) then
            self.replace_btn_red:SetRedDotParam(true);
        else
            self.replace_btn_red:SetRedDotParam(false);
        end
    end

    if self.upgrade_btn_red then
        if self.model.red_dot_list[1][2][i] and self.model.red_dot_list[1][2][i]:Contain(BitState.State[2]) then
            self.upgrade_btn_red:SetRedDotParam(true);
        else
            self.upgrade_btn_red:SetRedDotParam(false);
        end
    end

end
