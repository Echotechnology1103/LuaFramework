---魔法卡背包
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/12/04 16:07
---
MagicCardBagPanel = MagicCardBagPanel or class("MagicCardBagPanel", WindowPanel)
local this = MagicCardBagPanel

function MagicCardBagPanel:ctor(parent_node)
    self.abName = "magiccard";
    self.image_ab = "magiccard_image";
    self.assetName = "MagicCardBagPanel"
    self.layer = "UI"
    self.panel_type = 3;
    self.model = CardModel.GetInstance()
    self.events = {};
    self.schedules = {};

    self.separate_frame_schedule_id = nil --分帧实例化的定时器id

    --MagicCardBagPanel.super.Load(self)
end

function MagicCardBagPanel:dctor()
    self.model = nil;
    GlobalEvent:RemoveTabListener(self.events);
    self:StopAllSchedules()

    destroyTab(self.cardItems);
    self.cardItems = {};

    if self.preselectitem then
        self.preselectitem:destroy();
    end
    self.preselectitem = nil;

    if self.empty_girl then
        self.empty_girl:destroy();
    end
    self.empty_girl = nil;

    if self.separate_frame_schedule_id then
        GlobalSchedule:Stop(self.separate_frame_schedule_id)
        self.separate_frame_schedule_id = nil
    end
end

function MagicCardBagPanel:Open(pos, btnType)
    self.pos = pos;
    self.btnType = btnType;
    WindowPanel.Open(self);
end

function MagicCardBagPanel:LoadCallBack()
    self.nodes = {
        "replace_btn", "pos_drop", "ScrollView/Viewport/Content", "color_drop", "embed_btn", "nilText",
    }
    self:GetChildren(self.nodes);

    SetLocalPosition(self.transform, 0, 0, 0)

    self:SetTileTextImage(self.image_ab, "magic_card_bag_title");
    self:InitUI();

    self:AddEvent();

    self:HandleCardBag();

    self:SetPanelSize(815, 550);
end

function MagicCardBagPanel:InitUI()
    self:InitDropDown();
    SetGameObjectActive(self.replace_btn.gameObject, self.btnType == 1);
    SetGameObjectActive(self.embed_btn.gameObject, self.btnType == 2);
    SetGameObjectActive(self.nilText.gameObject, not self.pos);
end

function MagicCardBagPanel:InitDropDown()
    self.pos_drop = GetDropDown(self.pos_drop);
    self.color_drop = GetDropDown(self.color_drop);

    self.color_drop.options:Clear();
    local od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "All";
    self.color_drop.options:Add(od);
    od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "Red";
    self.color_drop.options:Add(od);
    od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "Orange";
    self.color_drop.options:Add(od);
    od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "Purple";
    self.color_drop.options:Add(od);
    od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "Blue";
    self.color_drop.options:Add(od);
    od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "Green";
    self.color_drop.options:Add(od);
    od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "White";
    self.color_drop.options:Add(od);

    self.pos_drop.options:Clear();
    od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "All";
    self.pos_drop.options:Add(od);
    od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "Core";
    self.pos_drop.options:Add(od);
    od = UnityEngine.UI.Dropdown.OptionData();
    od.text = "Common";
    self.pos_drop.options:Add(od);

    SetGameObjectActive(self.pos_drop.gameObject, false);
    SetGameObjectActive(self.color_drop.gameObject, false);
end

function MagicCardBagPanel:AddEvent()
    AddValueChange(self.pos_drop.gameObject, handler(self, self.HandlePosChange));
    AddValueChange(self.color_drop.gameObject, handler(self, self.HandleColorChange));

    AddClickEvent(self.replace_btn.gameObject, handler(self, self.HandleReplace));
    AddClickEvent(self.embed_btn.gameObject, handler(self, self.HandleEmbed));

    AddEventListenerInTab(CardEvent.DELETE_CARD, handler(self, self.HandleCardDelete), self.events);
    AddEventListenerInTab(CardEvent.ADD_CARD, handler(self, self.HandleCardAdd), self.events);
    AddEventListenerInTab(CardEvent.CARD_BAG_EVENT, handler(self, self.HandleCardBag), self.events);
end


--@ling autofun
function MagicCardBagPanel:HandleReplace(go, x, y)
    if self.preselectitem and self.pos then
        local cardConfig1 = Config.db_magic_card[self.preselectitem.data.id];
        if self.pos <= 2 and cardConfig1.slot == 1 then
            Notify.ShowText("Only core magic cards can be applied to this slot")
            return ;
        elseif self.pos > 2 and cardConfig1.slot == 2 then
            Notify.ShowText("Only normal magic cards can be applied to this slot")
            return ;
        end
        if not self.model:CheckPosCanEmbed(self.pos, cardConfig1) then
            Notify.ShowText("Unable to socket cards with same attributes")
            return ;
        end
        MagicCardCtrl:GetInstance():RequestCardPuton(self.pos, self.preselectitem.data.uid)
        self:Close();
    end
end

function MagicCardBagPanel:HandleEmbed(go, x, y)
    if self.preselectitem and self.pos then
        local cardConfig1 = Config.db_magic_card[self.preselectitem.data.id];
        if self.pos <= 2 and cardConfig1.slot == 1 then
            Notify.ShowText("Only core magic cards can be applied to this slot")
            return ;
        elseif self.pos > 2 and cardConfig1.slot == 2 then
            Notify.ShowText("Only normal magic cards can be applied to this slot")
            return ;
        end
        if not self.model:CheckPosCanEmbed(self.pos, cardConfig1) then
            Notify.ShowText("Unable to socket cards with same attributes")
            return ;
        end
        MagicCardCtrl:GetInstance():RequestCardPuton(self.pos, self.preselectitem.data.uid)
        self:Close();
    end
end

--@ling autofun 
function MagicCardBagPanel:HandleCardDelete(item, pos)
    for i = 1, #self.cardItems, 1 do
        local ci = self.cardItems[i];
        if ci.data.uid == item.uid then
            table.remove(self.cardItems, i);
            ci:destroy();
            return ;
        end
    end
end

--@ling autofun
function MagicCardBagPanel:HandleCardAdd(cardData)
    local cardConfig;
    if cardData then
        cardConfig = Config.db_magic_card[cardData.id];
        if cardConfig.slot == 0 or cardConfig.max_star == 0 then
            return ;
        end
    end

    local card = MagicCardItem(self.Content.transform, cardData, handler(self, self.HandleClickItem));
    for i = 1, 8 do
        if not self.model:CheckPosCanEmbed(i, cardConfig) then
            card:ShowOwn(true);
        end
    end
    card:ShowCardLV(true);
    card:SetSelected(false);
    self.cardItems[#self.cardItems + 1] = card;

    local rt = GetRectTransform(self.Content);
    rt.sizeDelta = Vector2(rt.sizeDelta.x, math.ceil(#self.cardItems / 5) * 200);
    SetAnchoredPosition(self.Content.transform, 0, 0);
end



--@ling autofun
function MagicCardBagPanel:HandleCardBag()
--[[     local items = self:GetSortedBagCardList();--self.model.items;

    local slot = nil;
    if self.pos then
        if tonumber(self.pos) < 3 then
            slot = 2;
        else
            slot = 1;
        end
    end
    self.cardItems = {};
    if items then
        for i = 1, #items, 1 do
            local cardData = items[i];
            local cardConfig = Config.db_magic_card[cardData.id];
            if slot then
                if cardConfig.slot == slot then
                    self:HandleCardAdd(cardData);
                end
            else
                self:HandleCardAdd(cardData);
            end

            --local card = MagicCardItem(self.Content.transform, cardData, handler(self, self.HandleClickItem));
            ----card.cardData = cardData;
            --card:SetSelected(false);
            --self.cardItems[i] = card;
        end
        local rt = GetRectTransform(self.Content);
        --rt.sizeDelta = Vector2(rt.sizeDelta.x, math.ceil(#items / 5) * 225);
    end
    --SetAnchoredPosition(self.Content.transform, 0, 0);
    if #items == 0 then
        self.empty_girl = EmptyGirl(self.transform, "你没有符合条件的魔法卡");
        self.empty_girl:SetPos(-200, 20, 0);
    end ]]

    self:SeparateFrameInstantia()
end

--分帧实例化
function MagicCardBagPanel:SeparateFrameInstantia(  )
    local items = self:GetSortedBagCardList();
    local num = #items
    if num <= 0 then
        self.empty_girl = EmptyGirl(self.transform, "You don't have eligible magic cards");
        self.empty_girl:SetPos(-200, 20, 0);
		return
	end

    local slot = nil;
    if self.pos then
        if tonumber(self.pos) < 3 then
            slot = 2;
        else
            slot = 1;
        end
    end

    self.cardItems = {}

    local function op_call_back(cur_frame_count,cur_all_count)
        local cardData = items[cur_all_count];
        local cardConfig = Config.db_magic_card[cardData.id];
        if slot then
            if cardConfig.slot == slot then
                self:HandleCardAdd(cardData);
            end
        else
            self:HandleCardAdd(cardData);
        end
       --logError("分帧实例化，count:"..cur_all_count)
	end
	local function all_frame_op_complete()
		self:SeparateFrameInstantiaComplete()
	end


	self.separate_frame_schedule_id =  SeparateFrameUtil.SeparateFrameOperate(op_call_back,nil,5,num,nil,all_frame_op_complete)
end

--分帧实例化结束
function MagicCardBagPanel:SeparateFrameInstantiaComplete(  )
    self.separate_frame_schedule_id = nil
end

MagicCardBagPanel.preselectitem = nil
function MagicCardBagPanel:HandleClickItem(item)
    if self.preselectitem then
        self.preselectitem:SetSelected(false);
    end
    self.preselectitem = item;
    item:SetSelected(true);
end

--@ling autofun
function MagicCardBagPanel:HandlePosChange(go, value)
    print2(value);
    if value == 0 then
        for k, v in pairs(self.cardItems) do
            if v.gameObject then
                SetGameObjectActive(v.gameObject, true);
            end
        end
    else
        for k, v in pairs(self.cardItems) do
            local data = v.data;
            if data then
                local cardConfig = Config.db_magic_card[data.id];
                if cardConfig and cardConfig.slot == value then
                    v:SetGameObjectActive(false);--刚好相反了
                else
                    v:SetGameObjectActive(true);--刚好相反了
                end
            end
        end
    end
end

--@ling autofun
function MagicCardBagPanel:HandleColorChange(go, value)
    print2(value);
    if value == 0 then
        for k, v in pairs(self.cardItems) do
            if v.gameObject then
                SetGameObjectActive(v.gameObject, true);
            end
        end
    else
        value = 7 - value;
        for k, v in pairs(self.cardItems) do
            local data = v.data;
            if data then
                local itemConfig = Config.db_item[data.id];
                if itemConfig and itemConfig.color == value then
                    v:SetGameObjectActive(true);
                else
                    v:SetGameObjectActive(false);
                end
            end
        end
    end
end

function MagicCardBagPanel:StopAllSchedules()
    for i = 1, #self.schedules, 1 do
        GlobalSchedule:Stop(self.schedules[i]);
    end
    self.schedules = {};
end

function MagicCardBagPanel:GetSortedBagCardList()
    local tab = {};
    for k, v in pairs(CardModel:GetInstance().items) do
        table.insert(tab, v);
    end
    --for i = 1, #tab do
    --    local itemConfig = Config.db_item[tab[i].id];
    --    print2(itemConfig.name);
    --    print2(tab[i].isOwnProp);
    --end
    self.ownProTab = {};
    if self.pos ~= 0 then
        if self.model.EmbedCards[self.pos] then
            local cardID = self.model.EmbedCards[self.pos].id;
            GetOneCardOwnProp(cardID , self.ownProTab)
        end

    end
    table.sort(tab, handler(self, self.SortCardOwnProp));
    --print2(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
    --for i = 1, #tab do
    --    local itemConfig = Config.db_item[tab[i].id];
    --    print2(itemConfig.name);
    --    print2(tab[i].isOwnProp);
    --end
    return tab;
end
function MagicCardBagPanel:IsReplaceProp(cardData)
    if cardData then
        local cardConfig = Config.db_magic_card[cardData.id];
        if cardConfig then
            local base = String2Table(cardConfig.base);
            for k, v in pairs(base) do
                if self.ownProTab[v[1]] then
                    return true;
                end
            end
        end
    end
    return false;
end

function MagicCardBagPanel:SortCardOwnProp(cardData1, cardData2)
    local isReplaceProp1 = self:IsReplaceProp(cardData1);
    local isReplaceProp2 = self:IsReplaceProp(cardData2);
    local isOwnProp1 = cardData1.isOwnProp and not isReplaceProp1;
    local isOwnProp2 = cardData2.isOwnProp and not isReplaceProp2;

    if isOwnProp1 and isOwnProp2 then
        return self:SortCardFusion(cardData1, cardData2)
    elseif isOwnProp1 or isOwnProp2 then
        return not cardData1.isOwnProp;
    else
        return self:SortCardFusion(cardData1, cardData2)
    end
end

function MagicCardBagPanel:SortCardFusion(cardData1, cardData2)
    local isfusion1 = IsFusionCard(cardData1.id);
    local isfusion2 = IsFusionCard(cardData2.id);
    if isfusion1 and isfusion2 then
        return self:SortCardColor(cardData1, cardData2);
    elseif isfusion1 or isfusion2 then
        return not isfusion2;
    else
        return self:SortCardColor(cardData1, cardData2);
    end
end

function MagicCardBagPanel:SortCardUid(cardData1, cardData2)
    --if cardData1.id == cardData2.id then
    return tonumber(cardData1.uid) > tonumber(cardData2.uid);
    --end
end

function MagicCardBagPanel:SortCardStrength(cardData1, cardData2)
    if cardData1.extra == cardData2.extra then
        return self:SortCardUid(cardData1, cardData2)
    else
        return cardData1.extra > cardData2.extra;
    end

end

function MagicCardBagPanel:SortCardId(cardData1, cardData2)
    if cardData1.id == cardData2.id then
        return self:SortCardStrength(cardData1, cardData2)
    else
        return cardData1.id > cardData2.id;
    end
end

function MagicCardBagPanel:SortCardColor(cardData1, cardData2)
    local color1 = GetCardColor(cardData1);
    local color2 = GetCardColor(cardData2);

    if color1 == color2 then
        return self:SortCardId(cardData1, cardData2);
    else
        return color1 > color2;
    end
end