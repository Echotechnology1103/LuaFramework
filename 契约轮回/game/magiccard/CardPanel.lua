---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/12/05 15:51
---
CardPanel = CardPanel or class("CardPanel", WindowPanel)
local this = CardPanel
local ConfigLanguage = require('game.config.language.CnLanguage');

function CardPanel:ctor()
    self.abName = "magiccard";
    self.image_ab = "magiccard_image";
    self.assetName = "CardPanel"
    self.layer = "UI"
    self.panel_type = 2;
    self.model = CardModel.GetInstance()
    self.events = {};
    self.schedules = {};

    --self.sidebar_data = {
    --    { text = ConfigLanguage.Card.MAGIC_CARD, id = 1, icon = "bag:bag_icon_bag_s", dark_icon = "bag:bag_icon_bag_n", show_toggle = 1 },
    --    { text = ConfigLanguage.Card.SUIT, id = 2, icon = "bag:bag_icon_ware_s", dark_icon = "bag:bag_icon_ware_n", },
    --}
end

function CardPanel:dctor()
    self.model = nil;
    GlobalEvent:RemoveTabListener(self.events);
    self:StopAllSchedules()
    if self.currentView then
        self.currentView:destroy();
    end
    if self.embedpanel then
        self.embedpanel:destroy();
        self.embedpanel = nil;
    end
    if self.upstarpanel then
        self.upstarpanel:destroy();
        self.upstarpanel = nil;
    end
    if self.decomposepanel then
        self.decomposepanel:destroy();
        self.decomposepanel = nil;
    end
    if self.combinepanel then
        self.combinepanel:destroy();
        self.combinepanel = nil;
    end
    if self.exchangepanel then
        self.exchangepanel:destroy();
        self.exchangepanel = nil;
    end

    if self.updatereddotevent then
        RemoveModelListener(self.updatereddotevent, CardModel:GetInstance());
    end
end

function CardPanel:Open(data)
    self.default_table_index = data and tonumber(data) or 1;
    WindowPanel.Open(self)
end

function CardPanel:LoadCallBack()
    self.nodes = {
    }
    self:GetChildren(self.nodes)

    SetLocalPosition(self.transform, 0, 0, 0)

    self:SetTileTextImage(self.image_ab, "magic_card_title");
    self:InitUI();

    self:AddEvent();

    BagController:GetInstance():RequestBagInfo(BagModel.cardBag);
    MagicCardCtrl:GetInstance():RequestCardBagInfo();
    MagicCardCtrl:GetInstance():RequestMagicCardGetSet();
    MagicCardCtrl:GetInstance():RequestCardList();
    self:SetSidebarLast();
    self:UpdateRedDot();
end

function CardPanel:UpdateRedDot()
    for i, v in pairs(self.model.red_dot_list) do
        if v[1] then
            self:SetIndexRedDotParam(i,true)
        else
            self:SetIndexRedDotParam(i,false)
        end
    end

    if self.currentView and self.currentView.UpdateReddot then
        self.currentView:UpdateReddot();
    end
end

function CardPanel:InitUI()

end

function CardPanel:AddEvent()
    self.updatereddotevent = CardModel:GetInstance():AddListener(CardEvent.UpdateRedDot, handler(self, self.UpdateRedDot));
    AddEventListenerInTab(CardEvent.CARD_DECOMPOSE, handler(self, self.HandleDecomposeRefresh), self.events);

    AddEventListenerInTab(CardEvent.CARD_UP_STAR, handler(self, self.HandleUpStarRefresh), self.events);
end

function CardPanel:StopAllSchedules()
    for i = 1, #self.schedules, 1 do
        GlobalSchedule:Stop(self.schedules[i]);
    end
    self.schedules = {};
end

function CardPanel:HandleDecomposeRefresh()
    self.model:CheckDecomposeReddot();
    if self.model.red_dot_list[3][1] then
        self:SetIndexRedDotParam(3,true)
    else
        self:SetIndexRedDotParam(3,false)
    end
end

function CardPanel:HandleUpStarRefresh()
    self.model:CheckUpStarReddot();
    if self.model.red_dot_list[2][1] then
        self:SetIndexRedDotParam(2,true)
    else
        self:SetIndexRedDotParam(2,false)
    end
end
---,toggle_id,update_toggle
---
---
---

function CardPanel:SwitchCallBack(index, toggle_id, update_toggle)
    if self.child_node then
        self.child_node:SetVisible(false)
    end
    self.currentView = nil;
    if index == 1 then


        --if update_toggle then
        --    self.toggle_group:SetData(CardModel.GetInstance().cardPanelData,self.selectedTog)
        --end
    elseif index == 2 then

        self.selectedIndex = 2;
    elseif index == 3 then

        self.selectedIndex = 3;

    elseif index == 4 then
        self.selectedIndex = 4;
    end

    index = index or 1;
    if index == 1 then
        if self.embedpanel then
            self.embedpanel:destroy();
            self.embedpanel = nil;
        end
        if self.embedpanel == nil then
            self.embedpanel = MagicCardEmbedPanel(self.child_transform);
        end
        self.selectedTog = index;
        self.currentView = self.embedpanel;
    elseif index == 2 then
        if self.upstarpanel then
            self.upstarpanel:destroy();
            self.upstarpanel = nil;
        end

        local count = 0;
        for k, v in pairs(CardModel:GetInstance().EmbedCards) do
            local itemConfig = Config.db_item[v.id]
            if itemConfig.color >= 4 then
                count = count + 1;
            end
        end

        --if count == 0 then
        --    Notify.ShowText("紫色品质以上的魔法卡才可以升星");
        --    self:SwitchCallBack(self.selectedTog, 1, true);
        --    return
        --else
            self.selectedTog = toggle_id;
        --end
        if self.upstarpanel == nil then
            self.upstarpanel = MagicCardUpstarPanel(self.child_transform);
        end

        self.currentView = self.upstarpanel;
    elseif index == 3 then
        if self.decomposepanel then
            self.decomposepanel:destroy();
            self.decomposepanel = nil;
        end
        if self.decomposepanel == nil then
            self.decomposepanel = MagicCardDecomposePanel(self.child_transform);
        end
        self.selectedTog = toggle_id;
        self.currentView = self.decomposepanel;
    elseif index == 4 then
        if self.exchangepanel then
            self.exchangepanel:destroy();
            self.exchangepanel = nil;
        end
        if self.exchangepanel == nil then
            self.exchangepanel = MagicCardExtrangePanel(self.child_transform);
        end
        self.selectedTog = toggle_id;
        self.currentView = self.exchangepanel;
    elseif index == 5 then
        if self.combinepanel then
            self.combinepanel:destroy();
            self.combinepanel = nil;
        end
        if self.combinepanel == nil then
            self.combinepanel = MagicCardCombinePanel(self.child_transform);
        end
        self.selectedTog = toggle_id;
        self.currentView = self.combinepanel;
    end
    self.selectedIndex = index;

    self:PopUpChild(self.currentView);
end