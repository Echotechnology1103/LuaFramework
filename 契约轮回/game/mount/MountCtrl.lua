---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2018/9/20 15:06
---
require('game.mount.RequireMount')

MountCtrl = MountCtrl or class("MountCtrl", BaseController)
local this = MountCtrl

function MountCtrl:ctor()
    MountCtrl.Instance = self;
    self.model = MountModel:GetInstance()
    self:AddEvents()
    self:RegisterAllProtocal()
end

function MountCtrl:dctor()

end

function MountCtrl:GetInstance()
    if not MountCtrl.Instance then
        MountCtrl()
    end
    return MountCtrl.Instance
end

function MountCtrl:RegisterAllProtocal()
    -- protobuff的模块名字，用到pb一定要写
    self.pb_module_name = "pb_1107_mount_pb"
    self:RegisterProtocal(proto.MOUNT_INFO, self.HandleMountInfo)
    self:RegisterProtocal(proto.MOUNT_TRAIN, self.HandleMountTrain)
    self:RegisterProtocal(proto.MOUNT_UPGRADE, self.HandleMountUpgrade)

    self:RegisterProtocal(proto.TRAIN_INFO, self.HandleTrainInfo);

    self:RegisterProtocal(proto.TRAIN_UPGRADE, self.HandleTrainUpgrade);

    self:RegisterProtocal(proto.MORPH_LIST, self.HandleMorphList);
    self:RegisterProtocal(proto.MORPH_ACTIVE, self.HandleMorphActive);
    self:RegisterProtocal(proto.MORPH_UPSTAR, self.HandleUpStar);

    self:RegisterProtocal(proto.MOUNT_FIGURE, self.HandleFigure);
    self:RegisterProtocal(proto.MORPH_FIGURE, self.HandleMorph);
    self:RegisterProtocal(proto.TRAIN_ATTR, self.HandleTrainAttr);
end

function MountCtrl:AddEvents()


    self:AddOpenMountPanelEvent()
end

function MountCtrl:AddOpenMountPanelEvent()
    local function callBack (idx , morphid)
        lua_panelMgr:GetPanelOrCreate(MountPanel):Open(idx , morphid)
    end

    GlobalEvent:AddListener(MountEvent.OPEN_MOUNT_PANEL, callBack)

    local callBack1 = function(subid , morphID)
        lua_panelMgr:GetPanelOrCreate(WingHuaXingPanel):Open(tonumber(subid) , tonumber(morphID));
    end

    GlobalEvent:AddListener(MountEvent.MOUNT_OPEN_HUAXING, callBack1)

    GlobalSchedule.StartFunOnce(handler(self, self.HandleReddotCheck), 3);

    local function call_back()
        self.model:UdpateGoods()
    end

    GlobalEvent:AddListener(BagEvent.UpdateGoods, call_back)
    local function call_back2()
        self.model:UpdateAllRedDot();
        RoleInfoController:GetInstance():CheckRedPoint();
    end
    AddModelEvent(WakeEvent.WakeSuccess, call_back2, WakeModel:GetInstance());

    local function callBack(id)
        --OpenTipModel:GetInstance():IsOpenSystem()
      --  logError(id)
        --print2(OpenTipModel:GetInstance():IsOpenSystem(570,1),"1111")
        if id == "1400@1" then
            self:RequestTrainInfo(enum.TRAIN.TRAIN_GOD)
            self:RequestMorphList(enum.TRAIN.TRAIN_GOD)
        end
        --dump(OpenTipModel:GetInstance().syslist)
    end
    GlobalEvent:AddListener(MainEvent.CheckLoadMainIcon, callBack);
end

function MountCtrl:HandleReddotCheck()


end


-- overwrite
function MountCtrl:GameStart()

    local function step()
        self:RequestMountInfo(enum.TRAIN.TRAIN_MOUNT)
        self:RequestMountInfo(enum.TRAIN.TRAIN_OFFHAND)

        self:RequestMorphList(enum.TRAIN.TRAIN_MOUNT);
        self:RequestMorphList(enum.TRAIN.TRAIN_OFFHAND);

        self:RequestMorphList(enum.TRAIN.TRAIN_WING);
        self:RequestMorphList(enum.TRAIN.TRAIN_TALIS);
        self:RequestMorphList(enum.TRAIN.TRAIN_WEAPON);


        self:RequestTrainInfo(enum.TRAIN.TRAIN_GOD)
        self:RequestMorphList(enum.TRAIN.TRAIN_GOD);


    end
    GlobalSchedule:StartOnce(step, Constant.GameStartReqLevel.Ordinary)
end
-- 1=骑乘; 2=下马
function MountCtrl:RequestMountRide(type)
    local pb = self:GetPbObject("m_mount_ride_tos")
    pb.type = type;
    self:WriteMsg(proto.MOUNT_RIDE, pb)
end

--请求坐骑信息
function MountCtrl:RequestMountInfo(requestType)
    local pb = self:GetPbObject("m_mount_info_tos")
    pb.type = requestType
    self:WriteMsg(proto.MOUNT_INFO, pb)

    --print('--MountCtrl 请求坐骑信息')
end

function MountCtrl:HandleMountInfo()
    local data = self:ReadMsg("m_mount_info_toc")
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        self.model.layer = data.order;
        if data.level ~= self.model.level then
            GlobalEvent:Brocast(MountEvent.MOUNT_STOP_AUTO);
        end
        self.model.level = data.level;
        self.model.exp = data.exp;

        self.model.trainData = data.train;

        self.model:SetRidingOrder(data.figure)
        --self.model:Brocast(MountEvent.GET_MOUNT_INFO);
        GlobalEvent:Brocast(MountEvent.MOUNT_PROP_CHANGE, data.type);

        local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        if mainrole_data and mainrole_data.figure and mainrole_data.figure.mount == 0 and data.figure ~= 0 then
            -- 不触发事件
            -- mainrole_data.figure.mount = data.figure
            local cf = Config.db_mount[data.figure .. "@0"]
            if cf then
                local t = {}
                t.model = cf.res
                t.skin = mainrole_data.figure.mount and mainrole_data.figure.mount.skin or 0
                t.show = mainrole_data.figure.mount and mainrole_data.figure.mount.show
                mainrole_data:ChangeData("figure.mount", t, true)
            end
        end
    elseif data.type == enum.TRAIN.TRAIN_OFFHAND then
        self.model.offhand_layer = data.order;
        if data.level ~= self.model.offhand_level then
            GlobalEvent:Brocast(MountEvent.MOUNT_STOP_AUTO);
        end
        self.model.offhand_level = data.level;
        self.model.offhand_exp = data.exp;

        self.model.offhand_trainData = data.train;

        self.model:SetOffhandOrder(data.figure)
        --self.model:Brocast(MountEvent.GET_MOUNT_INFO);
        GlobalEvent:Brocast(MountEvent.MOUNT_PROP_CHANGE, data.type);

        --需要人物那边确认做了才可以
        --local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        --if mainrole_data and mainrole_data.figure and mainrole_data.figure.offhand == 0 and data.figure ~= 0 then
        --    local cf = Config.db_offhand[data.figure .. "@0"]
        --    if cf then
        --        local t = {}
        --        t.model = cf.res
        --        t.skin = mainrole_data.figure.offhand and mainrole_data.figure.offhand.skin or 0
        --        t.show = mainrole_data.figure.offhand and mainrole_data.figure.offhand.show
        --        mainrole_data:ChangeData("figure.offhand",t,true)
        --    end
        --end
    end

    self.model:SetPbData(data)
    self.model:UpdateRedDotByData(data.type)
end

--请求坐骑升级
function MountCtrl:RequestMountUpgrade(item_id, type)
    local pb = self:GetPbObject("m_mount_upgrade_tos")
    pb.type = type
    pb.item_id = tonumber(item_id)
    self:WriteMsg(proto.MOUNT_UPGRADE, pb)
end

function MountCtrl:HandleMountUpgrade()
    local data = self:ReadMsg("m_mount_upgrade_toc")
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        self.model.layer = data.order; -- 阶位
        if data.level ~= self.model.level then
            GlobalEvent:Brocast(MountEvent.MOUNT_STOP_AUTO);
        end
        self.model.level = data.level; -- 星级

        if not self.model.exp then
            --Notify.ShowTextParent("增加了" .. data.exp .. "点经验");
            --self.mountPanel.propPanel:ShowAddExp("+" .. data.exp);
            GlobalEvent:Brocast(MountEvent.MOUNT_ADD_EXP, "+" .. data.exp);
        elseif data.exp - self.model.exp > 0 then
            GlobalEvent:Brocast(MountEvent.MOUNT_ADD_EXP, "+" .. (data.exp - self.model.exp));
            --self.mountPanel.propPanel:ShowAddExp("+" .. (data.exp - self.model.exp));
            --Notify.ShowTextParent("增加了" .. (data.exp - self.model.exp) .. "点经验");
        end

        self.model.exp = data.exp; -- 祝福值
    elseif data.type == enum.TRAIN.TRAIN_OFFHAND then
        self.model.offhand_layer = data.order; -- 阶位
        if data.level ~= self.model.offhand_level then
            GlobalEvent:Brocast(MountEvent.MOUNT_STOP_AUTO, data.type);
        end
        self.model.offhand_level = data.level; -- 星级

        if not self.model.offhand_exp then
            --Notify.ShowTextParent("增加了" .. data.exp .. "点经验");
            --self.mountPanel.propPanel:ShowAddExp("+" .. data.exp);
            GlobalEvent:Brocast(MountEvent.MOUNT_ADD_EXP, "+" .. data.exp);
        elseif data.exp - self.model.offhand_exp > 0 then
            GlobalEvent:Brocast(MountEvent.MOUNT_ADD_EXP, "+" .. (data.exp - self.model.offhand_exp));
            --self.mountPanel.propPanel:ShowAddExp("+" .. (data.exp - self.model.exp));
            --Notify.ShowTextParent("增加了" .. (data.exp - self.model.exp) .. "点经验");
        end

        self.model.offhand_exp = data.exp; -- 祝福值
    end

    self.model:UpdatePbData(data)
    self.model:UpdateRedDotByData(data.type)

    --升级完成
    GlobalEvent:Brocast(MountEvent.MOUNT_PROP_CHANGE, data.type);
end

--// 属性培养
--message m_train_attr_tos { //1109004
--required int32 type    = 1;
--required int32 item_id = 2;
--}
--
--message m_train_attr_toc { //1109004
--required int32 type    = 1;
--required int32 item_id = 2;
--required int32 level   = 3; // 新的培养等级
--}

--请求坐骑升级
function MountCtrl:RequestTrainAttr(item_id, type)
    local pb = self:GetPbObject("m_train_attr_tos", "pb_1109_train_pb")
    pb.type = type
    pb.item_id = tonumber(item_id)
    self:WriteMsg(proto.TRAIN_ATTR, pb)
end

function MountCtrl:HandleTrainAttr()
    local data = self:ReadMsg("m_train_attr_toc", "pb_1109_train_pb");
    local item_id = data.item_id;
    local level = data.level;

    if self.model.visionData[data.type] then
        local tab = self.model.visionData[data.type].train;
        tab[item_id] = level;
    end

    --升级完成
    GlobalEvent:Brocast(MountEvent.MOUNT_INFO_TRAIN_DATA, self.model.visionData[data.type]);
end

--请求坐骑培养
function MountCtrl:RequestMountTrain(item_id, type)
    local pb = self:GetPbObject("m_mount_train_tos")
    pb.type = type
    pb.item_id = tonumber(item_id)
    self:WriteMsg(proto.MOUNT_TRAIN, pb)
end

function MountCtrl:HandleMountTrain()
    local data = self:ReadMsg("m_mount_train_toc")
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        local item_id = data.item_id;
        local num = data.num;
        self.model.trainData[item_id] = num;
        --吃坐骑丹返回

        GlobalEvent:Brocast(MountEvent.MOUNT_USE_DAN, data.type, item_id);
    elseif data.type == enum.TRAIN.TRAIN_OFFHAND then
        local item_id = data.item_id;
        local num = data.num;
        self.model.offhand_trainData[item_id] = num;
        --吃坐骑丹返回

        GlobalEvent:Brocast(MountEvent.MOUNT_USE_DAN, data.type, item_id);
    end

end

--幻化部份enum.TRAIN
function MountCtrl:RequestTrainInfo(trainType)
    local pb = self:GetPbObject("m_train_info_tos", "pb_1109_train_pb")
    pb.type = tonumber(trainType);
    self:WriteMsg(proto.TRAIN_INFO, pb);
end
--[1] = "坐骑",[2] = "翅膀",[3] = "法宝",
function MountCtrl:HandleTrainInfo()
    local data = self:ReadMsg("m_train_info_toc", "pb_1109_train_pb");
    local train = data.train;
    self.model.visionData[train.type] = train;
    GlobalEvent:Brocast(MountEvent.MOUNT_INFO_TRAIN_DATA, data.train);
    if train.type == 1 then

    elseif train.type == 2 then

    elseif train.type == 3 then

    end
    GodModel:GetInstance():CheckRedPoint()
end
function MountCtrl:RequestTrainUpgrade(trainType, itemID)
    local pb = self:GetPbObject("m_train_upgrade_tos", "pb_1109_train_pb")
    pb.type = tonumber(trainType);
    pb.item_id = tonumber(itemID);
    self:WriteMsg(proto.TRAIN_UPGRADE, pb);

end

function MountCtrl:HandleTrainUpgrade()
    local data = self:ReadMsg("m_train_upgrade_toc", "pb_1109_train_pb");
    local train = data.train;
    self.model.visionData[train.type] = train;
    GlobalEvent:Brocast(MountEvent.MOUNT_INFO_TRAIN_DATA, data.train);
    if train.type == 1 then

    elseif train.type == 2 then

    elseif train.type == 3 then

    end
    GodModel:GetInstance():CheckRedPoint()
end

function MountCtrl:RequestMorphList(morphType)
    local pb = self:GetPbObject("m_morph_list_tos", "pb_1108_morph_pb")
    pb.type = tonumber(morphType);
    self:WriteMsg(proto.MORPH_LIST, pb);
end

function MountCtrl:HandleMorphList()
    local data = self:ReadMsg("m_morph_list_toc", "pb_1108_morph_pb");
    self.model:SetMorphRidingId(data.used_id)
    if data.used_id ~= 0 then
        self.model:SetRidingOrder(0);
    end
    if data.type == 2 or data.type == 3 or data.type == 4 or data.type == enum.TRAIN.TRAIN_GOD then
        self.model:SetPbData(data)
    end
    self.model:SetMorphPbDataList(data)
    self.model:UpdateRedDotByData(data.type)
    GlobalEvent.BrocastEvent(MountEvent.MORPH_ACTIVE_LIST, data);
    GodModel:GetInstance():CheckRedPoint()
end

function MountCtrl:RequestMorphActive(morphType, morphid)
    local pb = self:GetPbObject("m_morph_active_tos", "pb_1108_morph_pb")
    pb.type = tonumber(morphType);
    pb.id = tonumber(morphid);
    self:WriteMsg(proto.MORPH_ACTIVE, pb);
end

function MountCtrl:HandleMorphActive()
    local data = self:ReadMsg("m_morph_active_toc", "pb_1108_morph_pb");
    local tab = {
        exp = 0,
        id = data.id,
        star = 0
    }
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        local tab = MountModel.GetInstance().morphData;
        if tab and not tab[data.id] then
            table.insert(MountModel.GetInstance().morphData, tab);
        end
    elseif data.type == enum.TRAIN.TRAIN_OFFHAND then
        local tab = MountModel.GetInstance().morphOffHandData;
        if tab and not tab[data.id] then
            table.insert(MountModel.GetInstance().morphOffHandData, tab);
        end
    end
    self.model:UpdateUseID(data)
    self.model:SetMorphPbData(data.type, tab)
    self.model:UpdateRedDotByData(data.type)

    GlobalEvent.BrocastEvent(MountEvent.MORPH_ACTIVE_DATA, data);
end

function MountCtrl:RequestUpStar(morphType, morphid, itemID)
    local pb = self:GetPbObject("m_morph_upstar_tos", "pb_1108_morph_pb")
    pb.type = tonumber(morphType);
    pb.id = tonumber(morphid);
    if itemID then
        pb.item_id = tonumber(itemID)
    end

    self:WriteMsg(proto.MORPH_UPSTAR, pb);
end

function MountCtrl:HandleUpStar()
    local data = self:ReadMsg("m_morph_upstar_toc", "pb_1108_morph_pb");
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        local morph = data.morph;
        local preMorph = MountModel.GetInstance():GetMorphData(morph.id);
        if preMorph.star ~= morph.star then
            GlobalEvent.BrocastEvent(MountEvent.MOUNT_STOP_AUTO);
        end
        MountModel.GetInstance():SetMorphData(morph);
    elseif data.type == enum.TRAIN.TRAIN_OFFHAND then
        local morph = data.morph;
        local preMorph = MountModel.GetInstance():GetOffHandMorphData(morph.id);
        if preMorph.star ~= morph.star then
            GlobalEvent.BrocastEvent(MountEvent.MOUNT_STOP_AUTO);
        end
        MountModel.GetInstance():SetOffHandMorphData(morph);
    elseif data.type == enum.TRAIN.TRAIN_WING then

    end

    self.model:SetMorphPbData(data.type, data.morph)

    GlobalEvent.BrocastEvent(MountEvent.MORPH_UPSTAR_DATA, data);

    self.model:UpdateRedDotByData(data.type)
    GodModel:GetInstance():CheckRedPoint()
    --为什么要写下面这个重复的判断
    --因为,如果下面这句SET data放在上面,然后MountPropPanel.UpdateVisionProp就会认为这个已经激活
    --但是事实上
    --if data.type == enum.TRAIN.TRAIN_MOUNT then
    --    MountModel.GetInstance():SetMorphData(morph);
    --elseif data.type == enum.TRAIN.TRAIN_WING then
    --
    --end
end

function MountCtrl:RequestFigure(order, type)
    local pb = self:GetPbObject("m_mount_figure_tos")
    pb.type = type
    pb.order = order
    self:WriteMsg(proto.MOUNT_FIGURE, pb)
end

function MountCtrl:HandleFigure()
    local data = self:ReadMsg("m_mount_figure_toc")
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        self.model:SetRidingOrder(data.order)
        local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        if mainrole_data then
            local t = {}
            t.model = data.res
            t.skin = mainrole_data.figure.mount and mainrole_data.figure.mount.skin or 0
            t.show = mainrole_data.figure.mount and mainrole_data.figure.mount.show
            mainrole_data:ChangeData("figure.mount", t);
            self.model:SetMorphRidingId(0);
            self.model:SetMorphMountModel(0);
        end
    else
        self.model:SetOffhandOrder(data.order)
        --等人物那边做完
        local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        if mainrole_data then
            local t = {}
            t.model = data.res
            t.skin = mainrole_data.figure.offhand and mainrole_data.figure.offhand.skin or 0
            t.show = mainrole_data.figure.offhand and mainrole_data.figure.offhand.show
            mainrole_data:ChangeData("figure.offhand", t);
            self.model:SetMorphOffhandId(0);
            self.model:SetMorphOffhandModel(0);
        end
    end
    GlobalEvent:Brocast(MountEvent.MOUNT_CHANGE_FIGURE, data.type)
end

function MountCtrl:RequestMorph(type, id)
    local pb = self:GetPbObject("m_morph_figure_tos", "pb_1108_morph_pb")
    pb.type = type;
    pb.id = id;
    self:WriteMsg(proto.MORPH_FIGURE, pb)
end

function MountCtrl:HandleMorph()
    local data = self:ReadMsg("m_morph_figure_toc", "pb_1108_morph_pb")
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        --暂时只支持坐骑
        self.model:SetRidingOrder(data.id)
        local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        if mainrole_data then
            local t = {}
            t.model = data.res
            t.show = mainrole_data.figure.mount and mainrole_data.figure.mount.show;
            t.skin = mainrole_data.figure.mount and mainrole_data.figure.mount.skin or 0
            mainrole_data:ChangeData("figure.mount", t)
            self.model:SetMorphMountModel(t.model);
        end

        self.model:SetMorphRidingId(data.id)
        GlobalEvent:Brocast(MountEvent.MOUNT_CHANGE_FIGURE,data.type)
    elseif data.type == enum.TRAIN.TRAIN_WING then
        local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        if mainrole_data then
            local t = {}
            t.model = data.res
            t.show = mainrole_data.figure.wing and mainrole_data.figure.wing.show;
            t.skin = mainrole_data.figure.wing and mainrole_data.figure.wing.skin or 0
            mainrole_data:ChangeData("figure.wing", t)
        end
        self.model:IsMorphWingModel(data.res)
        self.model:SetMorphWingId(data.id)
        self.model:UpdateUseID(data)
        GlobalEvent:Brocast(MountEvent.MOUNT_CHANGE_FIGURE,data.type)
    elseif data.type == enum.TRAIN.TRAIN_TALIS then
        local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        if mainrole_data then
            local t = {}
            t.model = data.res
            t.show = mainrole_data.figure.talis and mainrole_data.figure.talis.show;
            t.skin = mainrole_data.figure.talis and mainrole_data.figure.talis.skin or 0
            mainrole_data:ChangeData("figure.talis", t)
        end
        self.model:SetMorphTalisModel(data.res)
        self.model:SetMorphTalis(data.id)
        self.model:UpdateUseID(data)
        GlobalEvent:Brocast(MountEvent.MOUNT_CHANGE_FIGURE,data.type)
    elseif data.type == enum.TRAIN.TRAIN_WEAPON then
        local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        if mainrole_data then
            local t = {}
            t.model = data.res
            t.show = mainrole_data.figure.weapon and mainrole_data.figure.weapon.show;
            t.skin = mainrole_data.figure.weapon and mainrole_data.figure.weapon.skin or 0
            mainrole_data:ChangeData("figure.weapon", t)
        end
        self.model:SetMorphWeaponModel(data.res)
        self.model:SetMorphWeapon(data.id)
        self.model:UpdateUseID(data)
        GlobalEvent:Brocast(MountEvent.MOUNT_CHANGE_FIGURE,data.type)
    elseif data.type == enum.TRAIN.TRAIN_OFFHAND then
        --暂时只支持坐骑
        self.model:SetOffhandOrder(data.id)
        --local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        --if mainrole_data then
        --    local t = {}
        --    t.model = data.res
        --    t.show = mainrole_data.figure.offhand and mainrole_data.figure.offhand.show;
        --    t.skin = mainrole_data.figure.offhand and mainrole_data.figure.offhand.skin or 0
        --    mainrole_data:ChangeData("figure.offhand", t)
            self.model:SetMorphOffhandModel(data.res);
        --end

        self.model:SetMorphOffhandId(data.id)
        GlobalEvent:Brocast(MountEvent.MOUNT_CHANGE_FIGURE,data.type)
    elseif data.type == enum.TRAIN.TRAIN_GOD then
        self.model.pb_data[data.type].used_id = data.id
        GlobalEvent:Brocast(MountEvent.MOUNT_CHANGE_FIGURE)
    end

end

