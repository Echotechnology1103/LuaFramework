---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2018/9/20 15:20
---
MountModel = MountModel or class("MountModel", BaseModel)
local this = MountModel

MountModel.layer = 1                   --坐骑阶位
MountModel.level = 0                    --坐骑等级

MountModel.offhand_layer = 1                   --副手阶位
MountModel.offhand_level = 0                    --副手等级

MountModel.exp = 0                      --祝福值
MountModel.offhand_exp = 0                      --祝福值
MountModel.trainData = {}               --培养数据, key=ItemID, val=Num
MountModel.offhand_trainData = {}               --培养数据, key=ItemID, val=Num

MountModel.allMount = {};
MountModel.allOffHand = {};

MountModel.allVisionMount = {};
MountModel.allVisionOffHand = {};

MountModel.morphData = {};
MountModel.morphOffHandData = {};
--当前选中的坐骑ID
MountModel.currentMountID = 0;
MountModel.currentOffHandID = 0;
--2 翅膀,3法宝,4神兵
MountModel.visionData = {};
MountModel.visionTrainID = {};

MountModel.OFFHAND_MAX_LEVEL = 13;
MountModel.MOUNT_MAX_LEVEL = 13;

MountModel.WING_ACTIVE_ITEM_ID_1 = 51101;
MountModel.WING_ACTIVE_ITEM_ID_2 = 51102;
MountModel.WING_ACTIVE_ITEM_ID_3 = 51103;
MountModel.WING_ACTIVE_ITEM_ID_4 = 51104;
MountModel.WING_ACTIVE_ITEM_ID_5 = 51105;

function MountModel:ctor()
    MountModel.Instance = self
    self:Reset()

    self.riding_order = 0
    self.morph_riding_id = 0
    for k, v in pairs(Config.db_mount) do
        if not self.allMount[v.order] then
            self.allMount[v.order] = {}
        end
    end

    for k, v in pairs(Config.db_offhand) do
        if not self.allOffHand[v.order] then
            self.allOffHand[v.order] = {}
        end
    end

    for k, v in pairs(Config.db_mount_morph) do
        if not self.allVisionMount[v.id] then
            self.allVisionMount[v.id] = {}
        end
    end
    self.db_mount_morph = {};
    for k, v in ipairs(Config.db_mount_morph) do
        table.insert(self.db_mount_morph , v);
    end

    for k, v in pairs(Config.db_offhand_morph) do
        if not self.allVisionOffHand[v.id] then
            self.allVisionOffHand[v.id] = {}
        end
    end
    self.db_offhand_morph = {};
    for k, v in pairs(Config.db_offhand_morph) do
        table.insert(self.db_offhand_morph , v);
    end

    self.MOUNT_TRAIN_ID = {};
    for k, v in pairs(Config.db_mount_train) do
        table.insert(self.MOUNT_TRAIN_ID, k);
    end
    table.sort(self.MOUNT_TRAIN_ID);

    self.OFFHAND_TRAIN_ID = {};
    for k, v in pairs(Config.db_offhand_train) do
        table.insert(self.OFFHAND_TRAIN_ID, k);
    end
    table.sort(self.OFFHAND_TRAIN_ID)

    self.visionTrainID = {};
    self.WING_TRAIN_ID = {};
    for k, v in pairs(Config.db_wing_train) do
        table.insert(self.WING_TRAIN_ID, k);
    end
    table.sort(self.WING_TRAIN_ID)
    self.visionTrainID[enum.TRAIN.TRAIN_WING] = self.WING_TRAIN_ID;
    self.TALIS_TRAIN_ID = {};
    for k, v in pairs(Config.db_talis_train) do
        table.insert(self.TALIS_TRAIN_ID, k);
    end
    table.sort(self.TALIS_TRAIN_ID)
    self.visionTrainID[enum.TRAIN.TRAIN_TALIS] = self.TALIS_TRAIN_ID;
    self.WEAPON_TRAIN_ID = {};
    for k, v in pairs(Config.db_weapon_train) do
        table.insert(self.WEAPON_TRAIN_ID, k);
    end
    table.sort(self.WEAPON_TRAIN_ID);
    self.visionTrainID[enum.TRAIN.TRAIN_WEAPON] = self.WEAPON_TRAIN_ID;

    self.morph_skill = {};
    for k, v in pairs(Config.db_mount_star) do
        if v.skill ~= 0 then
            self.morph_skill[v.id] = {};
            self.morph_skill[v.id]["skill"] = v.skill;
            self.morph_skill[v.id]["level"] = v.star;
        end
    end

    self.morph_offhand_skill = {};
    for k, v in pairs(Config.db_offhand_star) do
        if v.skill ~= 0 then
            self.morph_offhand_skill[v.id] = {};
            self.morph_offhand_skill[v.id]["skill"] = v.skill;
            self.morph_offhand_skill[v.id]["level"] = v.star;
        end
    end
end

function MountModel:Reset()
    -- 进阶服务器信息
    self.pb_data = {}
    -- 活动服务器信息
    self.pb_morph_data = {}
    -- 红点
    self.red_dot_list = {}
    -- 红点用到的相关物品
    self.use_goods_list = {}
end

function MountModel.GetInstance()
    if MountModel.Instance == nil then
        MountModel()
    end
    return MountModel.Instance
end

function MountModel:CheckIsActive(mountID)
    for k, v in pairs(self.morphData) do
        if v.id == mountID then
            return true;
        end
    end
    return false;
end

function MountModel:GetMorphData(mountID)
    for k, v in pairs(self.morphData) do
        if v.id == mountID then
            return v;
        end
    end
end

function MountModel:SetMorphData(morph)
    for k, v in pairs(self.morphData) do
        if v.id == morph.id then
            self.morphData[k] = morph;
            return v;
        end
    end
end

function MountModel:CheckOffhandIsActive(mountID)
    for k, v in pairs(self.morphOffHandData) do
        if v.id == mountID then
            return true;
        end
    end
    return false;
end

function MountModel:GetOffHandMorphData(mountID)
    for k, v in pairs(self.morphOffHandData) do
        if v.id == mountID then
            return v;
        end
    end
end

function MountModel:SetOffHandMorphData(morph)
    for k, v in pairs(self.morphOffHandData) do
        if v.id == morph.id then
            self.morphOffHandData[k] = morph;
            return v;
        end
    end
end

--设置正在使用的坐骑
function MountModel:SetRidingOrder(order)
    self.riding_order = order
    --self.morph_riding_id = 0
end

function MountModel:IsRiding(order)
    return order == self.riding_order
end

----设置正在使用的副手
--function MountModel:SetWearingOrder(order)
--    self.wearing_order = order
--end
--
--function MountModel:IsWearing(order)
--    return order == self.wearing_order
--end

--设置正在使用的副手
function MountModel:SetOffhandOrder(order)
    self.offhand_order = order
    --self.morph_offhand_id = 0
end

function MountModel:IsOffhand(order)
    return order == self.offhand_order
end

--正在使用的幻化坐骑
function MountModel:SetMorphRidingId(id)
    --self.riding_order = 0
    self.morph_riding_id = id
end


function MountModel:IsMorphRiding(id)
    return id == self.morph_riding_id
end


--正在使用的幻化副手
function MountModel:SetMorphOffhandId(id)
    --self.offhand_order = 0
    self.morph_offhand_id = id
end

function MountModel:IsMorphOffhand(id)
    return id == self.morph_offhand_id
end

--正常使用的翅膀
function MountModel:SetMorphWingId(id)
    self.morph_wing_id = id
end

function MountModel:IsMorphWing(id)
    return id == self.morph_wing_id;
end

--正在穿带的坐骑模型
function MountModel:SetMorphMountModel(id)
    self.morph_mount_model_id = id;
end

function MountModel:IsMorphMountModel(id)
    return id == self.morph_mount_model_id;
end

--正在穿带的副手模型
function MountModel:SetMorphOffhandModel(id)
    self.morph_offhand_model_id = id;
end

function MountModel:IsMorphOffhandModel(id)
    return id == self.morph_offhand_model_id;
end

--正在穿带的翅膀模型
function MountModel:SetMorphWingModel(id)
    self.morph_wing_model_id = id;
end

function MountModel:IsMorphWingModel(id)
    return id == self.morph_wing_model_id;
end
--正在穿带的法宝
function MountModel:IsMorphTalis(id)
    return id == self.morph_talis_id;
end

function MountModel:SetMorphTalis(id)
    self.morph_talis_id = id;
end
--正在穿带的法宝模型
function MountModel:SetMorphTalisModel(id)
    self.morph_talis_model_id = id;
end

function MountModel:IsMorphTalisModel(id)
    return id == self.morph_talis_model_id;
end
--正在穿带的武器
function MountModel:IsMorphWeapon(id)
    return id == self.morph_weapon_id;
end

function MountModel:SetMorphWeapon(id)
    self.morph_weapon_id = id;
end

--正在穿带的神兵模型
function MountModel:SetMorphWeaponModel(id)
    self.morph_weapon_model_id = id;
end

function MountModel:IsMorphWeaponModel(id)
    return id == self.morph_weapon_model_id;
end

-- 保存进阶服务端数据
function MountModel:SetPbData(data)
    self.pb_data[data.type] = data
end
--  当前在使用的 id
function MountModel:GetCurIDByType(type)
    local use_id  = self.pb_data[type].used_id
    if use_id then
        return use_id
    end
end
-- 更新正在使用的id
function MountModel:UpdateUseID(data)
    self.pb_data[data.type].used_id = data.id
end
-- 是否是 正在使用的id
function MountModel:IsHaveMorphID(id)
    for i, v in pairs(self.pb_data) do
        if v.used_id == id then
            return true
        end
    end
    return false
end


function MountModel:UpdatePbData(pb_data)
    local data = self.pb_data[pb_data.type]
    data.order = pb_data.order
    data.level = pb_data.level
end

function MountModel:SetMorphPbDataList(data)
    self.pb_morph_data[data.type] = data.morphs
end

function MountModel:SetMorphPbData(type, morph)
    local list = self.pb_morph_data[type]
    if table.isempty(list) then
        return
    end
    for k, v in pairs(list) do
        if v.id == morph.id then
            list[k] = morph;
            return
        end
    end
    table.insert(list, morph)
end

function MountModel:CheckIsActiveByType(type, id)
    return self:GetMorphDataByType(type, id) ~= nil
end

function MountModel:GetMorphDataByType(type, id)
    local list = self.pb_morph_data[type]
    if table.isempty(list) then
        return nil
    end
    for k, v in pairs(list) do
        if v.id == id then
            return v
        end
    end
    return nil;
end

function MountModel:UdpateGoods()
    for id, last_num in pairs(self.use_goods_list) do
        local num = BagModel:GetInstance():GetItemNumByItemID(id)
        if last_num ~= num then
            self:UpdateAllRedDot()
            return
        end
    end
end

function MountModel:UpdateAllRedDot()
    for type, v in pairs(self.pb_data) do
        self:UpdateRedDotByData(type, true)
    end
end
--{
--	["order"]=1,
--	["exp"]=0,
--	["type"]=1,
--	["figure"]=1,
--	["train"]=
--	{
--
--	},
--	["level"]=0
--}
function MountModel:UpdateRedDotByData(type)
    local data = self.pb_data[type]
    local cost_tab = {
        [enum.TRAIN.TRAIN_MOUNT] = {
            [1] = MountInfoPanel.TRAIN_ID,
            [2] = MountInfoPanel.TRAIN_ID_1,
        },
        [enum.TRAIN.TRAIN_OFFHAND] = {
            [1] = OffhandPanel.TRAIN_ID,
            [2] = OffhandPanel.TRAIN_ID_1,
        },
    }

    -- 可以增加的祝福值
    local wash_num = 0
    local check_cost_tab = cost_tab[type]
    if check_cost_tab then
        for k, id in pairs(check_cost_tab) do
            local num = BagModel:GetInstance():GetItemNumByItemID(id)
            self.use_goods_list[id] = num
            local cf = Config.db_item[id]
            local effect = cf and cf.effect or 0--配置表里增加的能量
            wash_num = num * effect + wash_num
        end
    end

    -- 1表示进阶
    -- 2表示活动
    -- 3表示丹
    self.red_dot_list[type] = self.red_dot_list[type] or {}
    self.red_dot_list[type][1] = {}
    self.red_dot_list[type][2] = {}
    self.red_dot_list[type][3] = {};

    local cf_tab = {
        [enum.TRAIN.TRAIN_MOUNT] = Config.db_mount,
        --[enum.TRAIN.TRAIN_WING] = Config.db_wing,
        --[enum.TRAIN.TRAIN_TALIS] = Config.db_talis,
        --[enum.TRAIN.TRAIN_WEAPON] = Config.db_weapon,
        [enum.TRAIN.TRAIN_OFFHAND] = Config.db_offhand,
    }
    local config_f = cf_tab[type]
    -- 先判断进阶红点
    if config_f then
        local key = data.order .. "@" .. data.level
        local cf = config_f[key]
        if cf and wash_num >= cf.exp - data.exp then
            self.red_dot_list[type][1][data.order] = true
        end
    end

    -- 判断活动红点--幻化系列
    local t = {
        [enum.TRAIN.TRAIN_MOUNT] = Config.db_mount_morph,
        [enum.TRAIN.TRAIN_WING] = Config.db_wing_morph,
        [enum.TRAIN.TRAIN_TALIS] = Config.db_talis_morph,
        [enum.TRAIN.TRAIN_WEAPON] = Config.db_weapon_morph,
        [enum.TRAIN.TRAIN_OFFHAND] = Config.db_offhand_morph,
    }
    local star_cf_tab = {
        [enum.TRAIN.TRAIN_MOUNT] = Config.db_mount_star,
        [enum.TRAIN.TRAIN_WING] = Config.db_wing_star,
        [enum.TRAIN.TRAIN_TALIS] = Config.db_talis_star,
        [enum.TRAIN.TRAIN_WEAPON] = Config.db_weapon_star,
        [enum.TRAIN.TRAIN_OFFHAND] = Config.db_offhand_star,
    }

    local dan_id_tab = {
        [enum.TRAIN.TRAIN_MOUNT] = self.MOUNT_TRAIN_ID,
        [enum.TRAIN.TRAIN_WING] = self.WING_TRAIN_ID,
        [enum.TRAIN.TRAIN_TALIS] = self.TALIS_TRAIN_ID,
        [enum.TRAIN.TRAIN_WEAPON] = self.WEAPON_TRAIN_ID,
        [enum.TRAIN.TRAIN_OFFHAND] = self.OFFHAND_TRAIN_ID,
    }
    --属性丹
    local dantab = dan_id_tab[type];
    if dantab then
        for i = 1, #dantab do
            local itemId = dantab[i];
            local num = BagModel:GetInstance():GetItemNumByItemID(itemId);
            if num > 0 then
                self.red_dot_list[type][3][itemId] = true;
            else
                self.red_dot_list[type][3][itemId] = false;
            end
            self.use_goods_list[itemId] = num;
        end
    end

    local sex = RoleInfoModel.GetSex();
    local check_tab = t[type]
    if not table.isempty(check_tab) then
        local len = #check_tab
        for i = 1, len do
            local info = check_tab[i]
            local morph_data = MountModel.GetInstance():GetMorphDataByType(type, info.id)
            if morph_data then
                local star_f = star_cf_tab[type]
                local key = info.id .. "@" .. morph_data.star
                local star_cf = star_f[key]
                if star_cf and wash_num >= star_cf.exp - morph_data.exp then
                    self.red_dot_list[type][2][info.id] = true
                end
            else
                local cost = String2Table(info.cost)
                if not table.isempty(cost) then
                    cost = { cost }
                    local id_red_dot = true
                    for k, v in pairs(cost) do
                        local id = v[1]
                        local need_num = v[2]
                        local num = BagModel:GetInstance():GetItemNumByItemID(id)
                        if num < need_num then
                            self.use_goods_list[id] = num
                            id_red_dot = false
                            break
                        end
                    end
                    self.red_dot_list[type][2][info.id] = id_red_dot
                end
            end
        end
        if len == 0 then
            --翅膀神兵法宝
            for k, v in pairs(check_tab) do
                local info = check_tab[k];
                local reqs = String2Table(info.reqs);
                local sexflag = 2;
                if not table.isempty(reqs) and reqs[1][1] == "gender" then
                    --sexflag = 1;
                    if sex ~= reqs[1][2] then
                        sexflag = 1;
                    end
                end

                if sexflag == 2 then
                    local morph_data = MountModel.GetInstance():GetMorphDataByType(type, info.id)
                    if morph_data then
                        local startab = star_cf_tab[type];
                        if morph_data.star < 5 then
                            local huaxingTab = startab[info.id .. "@" .. morph_data.star];
                            local cost = String2Table(info.cost)
                            if huaxingTab then
                                cost = String2Table(huaxingTab.cost)
                            end
                            if not table.isempty(cost) then
                                cost = { cost }
                                local id_red_dot = false
                                for k, v in pairs(cost) do
                                    local id = v[1]
                                    local need_num = v[2];
                                    local num = BagModel:GetInstance():GetItemNumByItemID(id)
                                    self.use_goods_list[id] = num
                                    if num >= need_num then
                                        id_red_dot = true
                                        break
                                    end
                                end
                                self.red_dot_list[type][2][info.id] = id_red_dot
                            end
                        else
                            self.red_dot_list[type][2][info.id] = false;
                        end
                    else
                        local cost = String2Table(info.cost)

                        local wake = RoleInfoModel:GetInstance():GetRoleValue("wake");
                        local wakeFlag = true;
                        if reqs then
                            if #reqs == 2 and _G.type(reqs[1]) ~= "table" then
                                reqs = { reqs };
                            end
                            for k, v in pairs(reqs) do
                                if v[1] == "wake" then
                                    if wake < v[2] then
                                        wakeFlag = false;--觉醒等级不够
                                    end
                                end
                            end
                        end
                        if not table.isempty(cost) then
                            cost = { cost }
                            local id_red_dot = true
                            for k, v in pairs(cost) do
                                local id = v[1]
                                local need_num = v[2]
                                local num = BagModel:GetInstance():GetItemNumByItemID(id)
                                self.use_goods_list[id] = num
                                if num < need_num or not wakeFlag then
                                    id_red_dot = false
                                    break
                                end
                            end
                            self.red_dot_list[type][2][info.id] = id_red_dot
                        end
                    end
                elseif sexflag == 0 then
                    local cost = String2Table(info.cost)

                    local wake = RoleInfoModel:GetInstance():GetRoleValue("wake");
                    local wakeFlag = true;
                    if reqs then
                        if #reqs == 2 and _G.type(reqs[1]) ~= "table" then
                            reqs = { reqs };
                        end
                        for k, v in pairs(reqs) do
                            if v[1] == "wake" then
                                if wake < v[2] then
                                    wakeFlag = false;--觉醒等级不够
                                end
                            end
                        end
                    end
                    if not table.isempty(cost) then
                        cost = { cost }
                        local id_red_dot = true
                        for k, v in pairs(cost) do
                            local id = v[1]
                            local need_num = v[2]
                            local num = BagModel:GetInstance():GetItemNumByItemID(id)
                            self.use_goods_list[id] = num
                            if num < need_num or not wakeFlag then
                                id_red_dot = false
                                break
                            end
                        end
                        self.red_dot_list[type][2][info.id] = id_red_dot
                    end
                end
            end

        end
    end
    local roleLevel = RoleInfoModel:GetInstance():GetMainRoleLevel();
    if roleLevel < (GetSysOpenDataById("130@1") or 1)  then
        self.red_dot_list[1] = {};
    end
    if roleLevel < (GetSysOpenDataById("100@2") or 1)  then
        self.red_dot_list[2] = {};
    end
    if roleLevel < (GetSysOpenDataById("100@3") or 1)  then
        self.red_dot_list[3] = {};
    end
    --print2(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
    --print2(OpenTipModel.GetInstance():IsOpenSystem(100,4));
    if not OpenTipModel.GetInstance():IsOpenSystem(100,4) then-- roleLevel < (GetSysOpenDataById("100@4") or 1) and
        self.red_dot_list[4] = {};
    end
    --if roleLevel < (GetSysOpenDataById("130@2") or 1)  then
    if not OpenTipModel.GetInstance():IsOpenSystem(130,2)  then
        self.red_dot_list[5] = {};
    end

    local main_show_red_dot, roleinfo_red = self:IsShowMainReddot()
    --if main_show_red_dot then
    --    main_show_red_dot = self:IsShowMainReddot()
    --end
    GlobalEvent:Brocast(MainEvent.ChangeRedDot, "mount", main_show_red_dot)--主菜单

    if roleinfo_red then
        GlobalEvent:Brocast(MainEvent.ChangeRedDot, "role_info", roleinfo_red)--主菜单,角色信息
    end

    self:Brocast(MountEvent.UpdateRedDot, type)--标签页

    self:CheckStrong();
end

function MountModel:IsShowMainReddot()
    local main_red, roleinfo_red = false, false;
    for type, type_list in pairs(self.red_dot_list) do
        if type == 2 or type == 3 or type == 4 then
            for tabid, list in pairs(type_list) do
                for k, v in pairs(list) do
                    if v then
                        roleinfo_red = true;
                    end
                end
            end
        else
            for tabid, list in pairs(type_list) do
                for k, v in pairs(list) do
                    if v then
                        main_red = true
                    end
                end
            end
        end
    end
    return main_red, roleinfo_red;
end

--[[
    @author LaoY
    @des    第二参数 第三参数 不传表示大模块红点
    @param1 type    坐骑或者副手 enum.TRAIN.TRAIN_MOUNT enum.TRAIN.TRAIN_OFFHAND
    @param2 tabid   1是进阶 2是活动
    @param3 param   进阶传 阶数；活动传 id 
--]]
function MountModel:GetReddotState(type, tabid, param)
    if not self.red_dot_list[type] then
        return false
    end
    if not tabid then
        for tabid, list in pairs(self.red_dot_list[type]) do
            for k, v in pairs(list) do
                if v then
                    return v
                end
            end
        end
        return false
    end
    if table.isempty(self.red_dot_list[type][tabid]) then
        return false
    end
    if not param then
        for k, v in pairs(self.red_dot_list[type][tabid]) do
            if v then
                return v
            end
        end
        return false
    end
    return self.red_dot_list[type][tabid][param]
end

function MountModel:CheckStrong()
    --坐骑变强
    if self:GetReddotState(1) then
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 4, true)
    else
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 4, false)
    end
    --副手变强
    if self:GetReddotState(5) then
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 11, true)
    else
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 11, false)
    end
    --翅膀幻化
    if self:GetReddotState(2, 1) or self:GetReddotState(2, 3) then
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 5, true)
    else
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 5, false)
    end
    --法宝幻化
    if self:GetReddotState(3, 1) or self:GetReddotState(3, 3) then
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 6, true)
    else
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 6, false)
    end
    --神兵幻化
    if self:GetReddotState(4, 1) or self:GetReddotState(4, 3) then
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 7, true)
    else
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 7, false)
    end
    --翅膀化形
    if self:GetReddotState(2, 2) then
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 8, true)
    else
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 8, false)
    end
    --法宝化形
    if self:GetReddotState(3, 2) then
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 9, true)
    else
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 9, false)
    end
    --神兵化形
    if self:GetReddotState(4, 2) then
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 10, true)
    else
        GlobalEvent:Brocast(MainEvent.ChangeSystemShowInStronger, 10, false)
    end
end
