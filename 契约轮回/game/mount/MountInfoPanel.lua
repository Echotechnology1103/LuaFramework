---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2018/9/20 11:18
---

MountInfoPanel = MountInfoPanel or class("MountInfoPanel", BaseItem)
local this = MountInfoPanel

MountInfoPanel.navTab = 1;
MountInfoPanel.TRAIN_ID = 50000;
MountInfoPanel.TRAIN_ID_1 = 50001;
MountInfoPanel.TRAIN_ID_2 = 50002;

function MountInfoPanel:ctor(parent_node, layer, defaultSelectedID)
    self.abName = "mount"
    self.assetName = "MountInfoPanel"
    self.layer = layer
    self.events = {};
    self.model = MountModel:GetInstance();
    self.mountTogItems = {};
    self.schedules = {};
    self.height = 0
    self.defaultSelectedID = defaultSelectedID;
    if self.defaultSelectedID then
        MountInfoPanel.navTab = 2;
    end
    self.model_event_list = {}
    self.toggle_red_dot = {}

    MountInfoPanel.super.Load(self);
end

function MountInfoPanel:OnEnable()
    --print2("MountInfoPanel:OnEnable");
    self:HandleTogBtnClick(nil, nil, nil, 1);
    self:InitMaterial();
    self:InitDan();
    self:HandleMountPropChange(enum.TRAIN.TRAIN_MOUNT);
end

function MountInfoPanel:dctor()
    GlobalEvent:RemoveTabListener(self.events);

    for k, v in pairs(self.mountTogItems) do
        v:destroy();
    end
    self.mountTogItems = nil;
    self:StopAllSchedules()
    MountInfoPanel.navTab = 1;

    if self.mountModel then
        self.mountModel:destroy();
    end
    destroyTab(self.danItems);
    self.danItems = nil;

    if self.piaoZiSchedule then
        GlobalSchedule:Stop(self.piaoZiSchedule);
    end

    self.model:RemoveTabListener(self.model_event_list);

    for k, v in pairs(self.toggle_red_dot) do
        v:destroy()
    end
    self.toggle_red_dot = {}

    if self.autoBtn_reddot then
        self.autoBtn_reddot:destroy()
        self.autoBtn_reddot = nil
    end

    if self.jihuoBtn_reddot then
        self.jihuoBtn_reddot:destroy()
        self.jihuoBtn_reddot = nil
    end
    if self.upStarBtn_reddot then
        self.upStarBtn_reddot:destroy()
        self.upStarBtn_reddot = nil
    end
    self:ClearItemList();

    if self.staritem then
        self.staritem:destroy();
    end
    self.staritem = nil;

    self.textList = nil;
end
function MountInfoPanel:ClearItemList()
    if not self.itemList then
        return ;
    end
    destroyTab(self.itemList);
    self.itemList = nil;
end

function MountInfoPanel:LoadCallBack()
    self.nodes = {
        "mountTogItem_0", "PropItems", "ScrollView/Viewport/Content", "zhanliItems", "mount_ride_btn",
        "buyBtn", "mountView", "itemContainer", "jie", "dan_container", "starContainer", "upStarBtn", "upStarBtn/upStar_label", "mountDes",
        "exp/exp_bar", "exp/progressText", "bg/skillBtn", "mountName", "autoBtn/autoText", "autoBtn", "expCon/TextObj", "expCon",
        "jihuoBtn", "jihuoBtn/jihuo_label", "mount_vision_btn", "togbtns/tog_text_1", "togbtns/tog_text_2", "togbtns/tog_btn", "togbtns",
        --"starContainer/star_8", "starContainer/star_2", "starContainer/star_3", "starContainer/star_6",
        --"starContainer/star_9", "starContainer/star_4", "starContainer/star_7", "starContainer/star_1", "starContainer/star_5", "starContainer/star_10",
        "prop_bg/mount_bg","quality",
    }
    self:GetChildren(self.nodes);

    self.toggle_red_dot[1] = RedDot(self.togbtns, nil, RedDot.RedDotType.Nor)
    self.toggle_red_dot[1]:SetPosition(-12, 10)

    self.toggle_red_dot[2] = RedDot(self.togbtns, nil, RedDot.RedDotType.Nor)
    self.toggle_red_dot[2]:SetPosition(66, 10)

    self.autoBtn_reddot = RedDot(self.autoBtn, nil, RedDot.RedDotType.Nor)
    self.autoBtn_reddot:SetPosition(55, 12)

    self.jihuoBtn_reddot = RedDot(self.jihuoBtn, nil, RedDot.RedDotType.Nor)
    self.jihuoBtn_reddot:SetPosition(55, 12)

    self.upStarBtn_reddot = RedDot(self.upStarBtn, nil, RedDot.RedDotType.Nor)
    self.upStarBtn_reddot:SetPosition(55, 12)

    MountCtrl:GetInstance():RequestMorphList(enum.TRAIN.TRAIN_MOUNT);

    self:InitUI();
    self:AddEvent();

    local res = "mount_bg";
    lua_resMgr:SetImageTexture(self, self.mount_bg, "iconasset/icon_big_bg_" .. res, res, false);
end

function MountInfoPanel:SetReddot()
    for k, redot in pairs(self.toggle_red_dot) do
        local bo = self.model:GetReddotState(enum.TRAIN.TRAIN_MOUNT, k)
        redot:SetRedDotParam(bo)
    end
    local auto_bo = false
    if MountInfoPanel.navTab == 1 then

        for k, item in pairs(self.mountTogItems) do
            local bo = self.model:GetReddotState(enum.TRAIN.TRAIN_MOUNT, MountInfoPanel.navTab, item.param)
            item:SetRedDotParam(bo)
            if not auto_bo then
                auto_bo = bo
            end
        end
        self.autoBtn_reddot:SetRedDotParam(auto_bo)
        self.jihuoBtn_reddot:SetRedDotParam(false)
        self.upStarBtn_reddot:SetRedDotParam(false)
    else
        for k, item in pairs(self.mountTogItems) do
            local bo = self.model:GetReddotState(enum.TRAIN.TRAIN_MOUNT, MountInfoPanel.navTab, item.param)
            item:SetRedDotParam(bo)
        end
        self.autoBtn_reddot:SetRedDotParam(false)
        if self.currentSelectedTogItem then
            local cur_mount_id = self.currentSelectedTogItem.param
            local bo = self.model:GetReddotState(enum.TRAIN.TRAIN_MOUNT, MountInfoPanel.navTab, cur_mount_id)
            if not self.model:CheckIsActiveByType(enum.TRAIN.TRAIN_MOUNT, cur_mount_id) then
                self.jihuoBtn_reddot:SetRedDotParam(bo)
                self.upStarBtn_reddot:SetRedDotParam(false)
            else
                self.jihuoBtn_reddot:SetRedDotParam(false)
                self.upStarBtn_reddot:SetRedDotParam(toBool(bo))
            end
        end
    end
end

function MountInfoPanel:InitUI()
    self.textList = {};

    self.mount_bg = GetImage(self.mount_bg);

    self.mount_vision_btn = GetButton(self.mount_vision_btn);
    SetGameObjectActive(self.mount_vision_btn, false);
    self.mount_ride_btn = GetButton(self.mount_ride_btn);
    self.buyBtn = GetButton(self.buyBtn);
    self.upStarBtn = GetButton(self.upStarBtn);
    self.mountDes = GetText(self.mountDes);
    self.jihuoBtn = GetButton(self.jihuoBtn);
    self.exp_bar = GetImage(self.exp_bar);
    self.progressText = GetText(self.progressText);
    self.autoBtn = GetButton(self.autoBtn);
    self.autoText = GetText(self.autoText);
    self.upStar_label = GetText(self.upStar_label);
	self.qualityImg = GetImage(self.quality)
    SetGameObjectActive(self.upStarBtn.gameObject, false);

    SetGameObjectActive(self.jihuoBtn.gameObject, false);

    self.TextObj.gameObject:SetActive(false);

    self.skillBtn = GetImage(self.skillBtn);
    self.mountName = GetText(self.mountName);

    self.jie = GetText(self.jie);--当前坐骑阶数 : 3阶2星

    self.PropItems = PropItems(self.PropItems);
    SetLocalPosition(self.PropItems.transform, -14, 0, 0)
    self.PropItems:HideBgs(3);
    self.PropItems:HideLines(5);

    self.staritem = MountStarsItem(self.starContainer);
    self.staritem:ShowStars(10, false);
    self.staritem:OpenStars(0);
    self.zhanliItems = ZhanLiItems(self.zhanliItems, false);
    self.zhanliItems:UpdateZhanli(0, 0);

    self.tog_btn = GetImage(self.tog_btn);
    self.tog_text_1 = GetText(self.tog_text_1);
    self.tog_text_2 = GetText(self.tog_text_2);

    SetColor(self.tog_text_1, 0x99, 0x48, 0x29, 255);
    SetColor(self.tog_text_2, 0xEB, 0xD3, 0x9A, 255);
	SetLocalPositionY(self.mount_ride_btn.transform, -145)

    self:InitTogType();
    self:HandleTogBtnClick(nil, nil, nil, MountInfoPanel.navTab);
    --self:InitTog();
    self:InitMaterial();
    self:InitDan();
    self:HandleMountPropChange(enum.TRAIN.TRAIN_MOUNT);
end

function MountInfoPanel:InitModel()
    if not self.currentSelectedMountID then
        return ;
    end
    local mountID = self.currentSelectedMountID;
    local level = 0;
    local configTab = nil;

    
    if mountID < MountModel:GetInstance().layer then
        level = 9;
    elseif mountID == MountModel:GetInstance().layer then
        level = MountModel:GetInstance().level
    end

    configTab = Config.db_mount[mountID.. "@" .. level];

    self.mountName.text = string.format(ConfigLanguage.Mount.ShowPanelName, configTab.name, configTab.order)

    --if self.currentSelectedMountID == mountID then
    --    return ;
    --end
    self.ratio = configTab.ratio;
    --self.currentSelectedMountID = mountID;
    if self.mountModel then
        self.mountModel:destroy();
    end

    local config = {};
    config.rotate = { x = 0, y = 135, z = 0 };
    config.offset = { x = 4000, y = -40, z = -250 };
    config.scale = { x = self.ratio, y = self.ratio, z = self.ratio };
    config.far = 20;
    self.mountModel = UIMountCameraPerspective(self.mountView.transform, nil, "model_mount_" .. configTab.res, enum.ITEM_STYPE.ITEM_STYPE_MOUNT_MORPH);
    self.mountModel:SetConfig(config)

    --self.mountModel = UIMountModel(self.mountView.transform, "model_mount_" .. configTab.res, handler(self, self.LoadModelCallBack));

    --放设置属性那块吧?
    --self.jie.text = "当前坐骑阶数 : " .. mountID .. "阶0星";--mountID .. "zi";
    --self.jie.text = "当前坐骑阶数 : " .. string.format(ConfigLanguage.Mount.OrderLevel, self.model.layer, self.model.level)
end

function MountInfoPanel:InitMorphModel()
    if not self.currentSelectedMountID then
        return ;
    end
    local mountID = self.currentSelectedMountID;
    local level = 0;
    local configTab = nil;
    if self.model.db_mount_morph[mountID] then
        configTab = self.model.db_mount_morph[mountID];
        --self.mountName.text = configTab.name;
        local morph = MountModel.GetInstance():GetMorphData(configTab.id);
        if morph then
            self.mountName.text = string.format(ConfigLanguage.Mount.ShowPanelName, configTab.name or "", morph.star or 0)
        else
            self.mountName.text = string.format(ConfigLanguage.Mount.ShowPanelName, configTab.name or "", 0)
        end

        self.jie.text = "";
        --self.mountDes.text = "策划没有配置";
        SetVisible(self.mountskill_tips, false)

        if self.mountModel then
            self.mountModel:destroy();
        end
        self.ratio = configTab.ratio;
        --self.mountModel = UIMountModel(self.mountView.transform, "model_mount_" .. configTab.res, handler(self, self.LoadModelCallBack));
        local config = {};
        config.rotate = { x = 0, y = 135, z = 0 };
        config.offset = { x = 4000, y = -40, z = -250 };
        config.scale = { x = self.ratio, y = self.ratio, z = self.ratio };
        config.far = 100;
        self.mountModel = UIMountCameraPerspective(self.mountView.transform, nil, "model_mount_" .. configTab.res, enum.ITEM_STYPE.ITEM_STYPE_MOUNT_MORPH);
        self.mountModel:SetConfig(config)
    end
end

function MountInfoPanel:LoadModelCallBack()
    local ratio = self.ratio or 100;
    SetLocalPosition(self.mountModel.transform, -4011, -238, 950)
    local v3 = self.mountModel.transform.localScale;
    SetLocalScale(self.mountModel.transform, 150 * (ratio / 100), 150 * (ratio / 100), 150 * (ratio / 100));
    SetLocalRotation(self.mountModel.transform, 0, 135, 0);
    self.mountModel:SetCameraLayer();
end
local lastX = 0;
function MountInfoPanel:AddEvent()

    local call_back1 = function(target, x, y)
        if self.currentSelectedMountID then
            if MountInfoPanel.navTab == 1 then
                MountCtrl:GetInstance():RequestFigure(self.currentSelectedMountID, enum.TRAIN.TRAIN_MOUNT);
            else
                local configTab = self.model.db_mount_morph[self.currentSelectedMountID];
                if configTab then
                    MountCtrl:GetInstance():RequestMorph(enum.TRAIN.TRAIN_MOUNT, configTab.id);
                else
                    Notify.ShowText("Failed to find the mount ID")
                end
            end
        end
    end
    AddClickEvent(self.mount_ride_btn.gameObject, call_back1);

    local prop_call_back = function(type)
        if type == enum.TRAIN.TRAIN_MOUNT and MountInfoPanel.navTab == 1 then
            local mountTogItem;
            for i = 1, #self.mountTogItems, 1 do
                mountTogItem = self.mountTogItems[i];

                if i <= MountModel:GetInstance().layer then
                    mountTogItem:SetIsLock(false);
                else
                    mountTogItem:SetIsLock(true);
                end
            end
            mountTogItem = self.mountTogItems[MountModel:GetInstance().layer];
            self.mountTogItems[MountModel:GetInstance().layer]:SetIsSelected(true);
            self:HandleTogClick(mountTogItem.gameObject, 0, 0, mountTogItem);
        end
    end
    self.events[#self.events + 1] = GlobalEvent:AddListener(MountEvent.MOUNT_PROP_CHANGE, prop_call_back);

    --收到服务端坐骑激活列表
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(MountEvent.MORPH_ACTIVE_LIST, handler(self, self.HandleMountActiveList));

    --激活的事件
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(MountEvent.MORPH_ACTIVE_DATA, handler(self, self.HandleMorphActive));

    local function call_back(type)
        if type == enum.TRAIN.TRAIN_MOUNT then

            if MountInfoPanel.navTab == 1 then
                for i = 1, #self.mountTogItems do
                    local mountTogItem = self.mountTogItems[i]
                    mountTogItem:SetRiding(MountModel:GetInstance():IsRiding(i))
                end
                SetGameObjectActive(self.mount_ride_btn.gameObject, not MountModel:GetInstance():IsRiding(self.currentSelectedMountID));
            else
                local config = nil;
                for i = 1, #self.mountTogItems do
                    local mountTogItem = self.mountTogItems[i]
                    config = self.model.db_mount_morph[i];
                    mountTogItem:SetRiding(MountModel:GetInstance():IsMorphRiding(config and config.id or self.currentSelectedMountID))
                end
                config = self.model.db_mount_morph[self.currentSelectedMountID];
                SetGameObjectActive(self.mount_ride_btn.gameObject, not MountModel:GetInstance():IsMorphRiding(config and config.id or self.currentSelectedMountID));
            end
        end
    end
    self.events[#self.events + 1] = GlobalEvent:AddListener(MountEvent.MOUNT_CHANGE_FIGURE, call_back)

    local handleBuyClick = function(target, x, y)
        --坐骑进阶丹
        UnpackLinkConfig("180@1@2@2@2210")
    end
    AddClickEvent(self.buyBtn.gameObject, handleBuyClick);

    local auto_50000 = function()
        if BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID) ~= 0 then
            MountCtrl:GetInstance():RequestMountUpgrade(MountInfoPanel.TRAIN_ID, enum.TRAIN.TRAIN_MOUNT);
        else
            GlobalSchedule:Stop(self.schedules[1]);
            self.schedules[1] = nil;
            self.autoText.text = "Auto star-up";

            self:CheckQuickBuy(false,MountInfoPanel.TRAIN_ID)

        end
    end

    local auto_50001 = function()
        if BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID_1) ~= 0 then
            MountCtrl:GetInstance():RequestMountUpgrade(MountInfoPanel.TRAIN_ID_1, enum.TRAIN.TRAIN_MOUNT);
        else
            GlobalSchedule:Stop(self.schedules[2]);
            self.schedules[2] = nil;
            self.autoText.text = "Auto star-up";

            self:CheckQuickBuy(false,MountInfoPanel.TRAIN_ID_1)
        end
    end

    local handleAutoClick = function(target, x, y)
        if self.schedules[1] or self.schedules[2] then
            self:StopAllSchedule();
            self.autoText.text = "Auto star-up";
            return ;
        end
        local layer = self.model.layer
        local level = self.model.level;
        if level == MountModel.MOUNT_MAX_LEVEL then
            local key = (layer + 1) .. "@" .. 0;
            if not Config.db_mount[key] then
                Notify.ShowText("Max Tier reached");
                return ;
            end
        end

        local id

        if self.itemList[1]:GetIsSelected() then

            id = MountInfoPanel.TRAIN_ID

            if BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID) ~= 0 then
                --MountCtrl:GetInstance():RequestMountUpgrade(MountInfoPanel.TRAIN_ID,enum.TRAIN.TRAIN_MOUNT);
                self.schedules[1] = GlobalSchedule:Start(auto_50000, 0.1, -1);
                self.autoText.text = "Stop";
            elseif BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID_1) ~= 0 then
                
                --这个为0，另一个不为0才提示
                Notify.ShowText("This item doesn't exist, please tap to buy");
            end
        elseif self.itemList[2]:GetIsSelected() then

            id = MountInfoPanel.TRAIN_ID_1

            if BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID_1) ~= 0 then
                --MountCtrl:GetInstance():RequestMountUpgrade(MountInfoPanel.TRAIN_ID_1,enum.TRAIN.TRAIN_MOUNT);
                self.schedules[2] = GlobalSchedule:Start(auto_50001, 0.1, -1);
                self.autoText.text = "Stop";
            elseif BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID) ~= 0 then
                
                --这个为0，另一个不为0才提示
                Notify.ShowText("This item doesn't exist, please tap to buy");
            end
        end

        self:CheckQuickBuy(false,id)
    end
    AddClickEvent(self.autoBtn.gameObject, handleAutoClick);

    self.events[#self.events + 1] = GlobalEvent:AddListener(MountEvent.MOUNT_PROP_CHANGE, handler(self, self.HandleMountPropChange));
    self.events[#self.events + 1] = GlobalEvent:AddListener(MountEvent.MOUNT_USE_DAN, handler(self, self.HandleMountPropChange));
    self.events[#self.events + 1] = GlobalEvent:AddListener(MountEvent.MOUNT_STOP_AUTO, handler(self, self.StopAllSchedule));
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(MountEvent.MORPH_UPSTAR_DATA, handler(self, self.HandleUpstar));

    local addText = function(text)
        self:ShowAddExp(text);
    end
    self.events[#self.events + 1] = GlobalEvent:AddListener(MountEvent.MOUNT_ADD_EXP, addText);

    --注释这个消息,现在不发了
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(MountEvent.MOUNT_OR_VISION, handler(self, self.MountOrVision))

    local jihuo_callBack = function()
        local config = self.model.db_mount_morph[self.currentSelectedMountID];
        if config then
            MountCtrl:GetInstance():RequestMorphActive(enum.TRAIN.TRAIN_MOUNT, config.id);
        else
            Notify.ShowText("Failed to find the mount")
        end
    end
    AddClickEvent(self.jihuoBtn.gameObject, jihuo_callBack);

    local upStar_50000 = function()
        local mountID = 0;
        local config = self.model.db_mount_morph[self.currentSelectedMountID];
        if config then
            if MountModel.GetInstance():CheckIsActive(config.id) then
                mountID = config.id;
            else
                GlobalSchedule:Stop(self.schedules[3]);
                self.schedules[3] = nil;
                Notify.ShowText("The mount is not activated yet");
                return ;
            end
        else
            GlobalSchedule:Stop(self.schedules[3]);
            self.schedules[3] = nil;
            Notify.ShowText("Failed to find the mount configuration")
            return ;
        end

        if BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID) ~= 0 then
            MountCtrl:GetInstance():RequestUpStar(enum.TRAIN.TRAIN_MOUNT, mountID, MountInfoPanel.TRAIN_ID, enum.TRAIN.TRAIN_MOUNT);--MountCtrl:GetInstance():RequestMountUpgrade(MountInfoPanel.TRAIN_ID_1);
        else
            GlobalSchedule:Stop(self.schedules[3]);
            self.schedules[3] = nil;
            self.upStar_label.text = "Auto star-up";
            self:CheckUpStarLabel();

         self:CheckQuickBuy(true,MountInfoPanel.TRAIN_ID)
        end
    end

    local upStar_50001 = function()
        local mountID = 0;
        local config = self.model.db_mount_morph[self.currentSelectedMountID];
        if config then
            if MountModel.GetInstance():CheckIsActive(config.id) then
                mountID = config.id;
            else
                GlobalSchedule:Stop(self.schedules[4]);
                self.schedules[4] = nil;
                Notify.ShowText("The mount is not activated yet");
                return ;
            end
        else
            GlobalSchedule:Stop(self.schedules[4]);
            self.schedules[4] = nil;
            Notify.ShowText("Failed to find the mount configuration")
            return ;
        end

        if BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID_1) ~= 0 then
            MountCtrl:GetInstance():RequestUpStar(enum.TRAIN.TRAIN_MOUNT, mountID, MountInfoPanel.TRAIN_ID_1, enum.TRAIN.TRAIN_MOUNT);--MountCtrl:GetInstance():RequestMountUpgrade(50001);
        else
            GlobalSchedule:Stop(self.schedules[4]);
            self.schedules[4] = nil;
            self.upStar_label.text = "Auto star-up";
            self:CheckUpStarLabel();

            self:CheckQuickBuy(true,MountInfoPanel.TRAIN_ID_1)
        end
    end

    local upStar_call_back = function(target, x, y)
        if self.schedules[3] or self.schedules[4] then
            self:StopAllSchedule();
            return ;
        end

        if self.upStar_label.text == "Max Stars" then
            Notify.ShowText("Max Stars");
            return ;
        end

        local id

        if self.itemList[1]:GetIsSelected() then

            id = MountInfoPanel.TRAIN_ID

            if BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID) ~= 0 then
                --MountCtrl:GetInstance():RequestMountUpgrade(MountInfoPanel.TRAIN_ID,enum.TRAIN.TRAIN_MOUNT);
                self.schedules[3] = GlobalSchedule:Start(upStar_50000, 0.1, -1);
                self.upStar_label.text = "Stop";

            elseif BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID_1) ~= 0 then
                
                --这个为0，另一个不为0才提示
                Notify.ShowText("This item doesn't exist, please tap to buy");
            end
        elseif self.itemList[2]:GetIsSelected() then

            id = MountInfoPanel.TRAIN_ID_1

            if BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID_1) ~= 0 then
                --MountCtrl:GetInstance():RequestMountUpgrade(MountInfoPanel.TRAIN_ID_1 , enum.TRAIN.TRAIN_MOUNT);
                self.schedules[4] = GlobalSchedule:Start(upStar_50001, 0.1, -1);
                self.upStar_label.text = "Stop";
            elseif BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID) ~= 0 then
                
                --这个为0，另一个不为0才提示
                Notify.ShowText("This item doesn't exist, please tap to buy");
            end
        end

        self:CheckQuickBuy(true,id)
    end
    --AddClickEvent(self.autoBtn.gameObject, handleAutoClick);
    AddClickEvent(self.upStarBtn.gameObject, upStar_call_back);

    local updateNumCallBack = function()
        for k, v in pairs(self.itemList) do
            local awardItem = v;
            local num = BagModel:GetInstance():GetItemNumByItemID(v.db_id);
            awardItem:UpdateNum0(num);
        end
    end
    AddEventListenerInTab(BagEvent.UpdateGoods, updateNumCallBack, self.events);

    AddClickEvent(self.mount_vision_btn.gameObject, handler(self, self.HandleVisionBtn));

    local function call_back()
        self:SetReddot()
    end
    self.model_event_list[#self.model_event_list + 1] = self.model:AddListener(MountEvent.UpdateRedDot, call_back)
end

function MountInfoPanel:StopAllSchedules()
    if self.schedules[1] then
        GlobalSchedule:Stop(self.schedules[1]);
    end
    if self.schedules[2] then
        GlobalSchedule:Stop(self.schedules[2]);
    end
    self.schedules = {};
end

function MountInfoPanel:ClearTog()
    destroyTab(self.mountTogItems);
    self.mountTogItems = {};
end

function MountInfoPanel:InitTogType()
    AddClickEvent(self.tog_text_1.gameObject, handler(self, self.HandleTogBtnClick, 1));
    AddClickEvent(self.tog_text_2.gameObject, handler(self, self.HandleTogBtnClick, 2));
end
MountInfoPanel.TogImgPos = {
    [1] = -44,
    [2] = 34,
}

function MountInfoPanel:HandleTogBtnClick(go, x, y, index)
    cc.ActionManager:GetInstance():removeAllActionsFromTarget(self.tog_btn.transform)
    local value_action = cc.MoveTo(0.1, MountInfoPanel.TogImgPos[index], GetLocalPositionY(self.tog_btn.transform), GetLocalPositionZ(self.tog_btn.transform))
    cc.ActionManager:GetInstance():addAction(value_action, self.tog_btn.transform)
    self.currentSelectedMountID = 1;
    if 1 == index then
        SetColor(self.tog_text_1, 0x99, 0x48, 0x29, 255);
        SetColor(self.tog_text_2, 0xEB, 0xD3, 0x9A, 255);
        self:HandleMountPropChange(enum.TRAIN.TRAIN_MOUNT)
    else
        SetColor(self.tog_text_1, 0xEB, 0xD3, 0x9A, 255);--EBD39A
        SetColor(self.tog_text_2, 0x99, 0x48, 0x29, 255);
        self:UpdateVisionProp();
    end

    MountInfoPanel.navTab = index;
    --初始化
    self:InitTog();
end

function MountInfoPanel:InitTog()
    self:ClearTog();
    self.mountTogItem_0.gameObject:SetActive(true);
    local mountTogItem;
    --local model = MountModel:GetInstance();
    self.height = 0
    if MountInfoPanel.navTab == 1 then
        for i = 1, #MountModel:GetInstance().allMount, 1 do
            mountTogItem = MountTogItem(newObject(self.mountTogItem_0.gameObject), i);
            mountTogItem.gameObject.name = "mountTogItem_" .. i;
            mountTogItem.transform:SetParent(self.Content.transform)
            if i == 1 then
                mountTogItem:SetIsOn(true);
            else
                mountTogItem:SetIsOn(false);
            end
            mountTogItem:SetName(Config.db_mount[i .. "@0"].name);
            mountTogItem:SetHead(Config.db_mount[i .. "@0"].res)
            if i > 5 then
                mountTogItem:SetBG("di_5");
            end

            mountTogItem:SetJie(i);
            mountTogItem:SetParam(i)
            if i <= MountModel:GetInstance().layer then
                mountTogItem:SetIsLock(false);
            else
                mountTogItem:SetIsLock(true);
            end
            mountTogItem:SetRiding(MountModel:GetInstance():IsRiding(i))
            self.mountTogItems[i] = mountTogItem;
            self.height = self.height + mountTogItem:GetHeight()
            SetLocalScale(mountTogItem.transform, 1, 1, 1);
            SetLocalPosition(mountTogItem.transform, 0, 0, 0);
            AddClickEvent(mountTogItem.gameObject, handler(self, self.HandleTogClick, mountTogItem));
        end
        if self.mountTogItems[MountModel:GetInstance().layer] then
            mountTogItem = self.mountTogItems[MountModel:GetInstance().layer];
            self.mountTogItems[MountModel:GetInstance().layer]:SetIsSelected(true);
            self:HandleTogClick(mountTogItem.gameObject, 0, 0, mountTogItem);
        else
            mountTogItem = self.mountTogItems[1];
            self:HandleTogClick(mountTogItem.gameObject, 0, 0, mountTogItem);
        end
		SetVisible(self.quality, false)
    else
        local sortFun = function(a1, a2)
            local mount_id1 = a1.id
            local mount_id2 = a2.id
            local isActive1 = MountModel:GetInstance():CheckIsActive(mount_id1);
            local isActive2 = MountModel:GetInstance():CheckIsActive(mount_id2);
            if isActive2 == isActive1 then
                return mount_id1 < mount_id2;
            elseif isActive2 ~= isActive1 then
                return isActive1
            else
                return mount_id1 < mount_id2;
            end
        end
        table.sort(self.model.db_mount_morph, sortFun)
		SetVisible(self.quality, true)
        for i = 1, #self.model.db_mount_morph, 1 do
            local mount_id = self.model.db_mount_morph[i].id
            mountTogItem = MountTogItem(newObject(self.mountTogItem_0.gameObject), i);
            mountTogItem.gameObject.name = "mountTogItem_" .. i;
            mountTogItem.transform:SetParent(self.Content.transform);
            mountTogItem:SetIsOn(false);
            mountTogItem:SetName(self.model.db_mount_morph[i].name);
            mountTogItem:SetHead(self.model.db_mount_morph[i].res);

            self.mountTogItems[i] = mountTogItem;

            --改成遍历激活列表吧?
            --self.mountTogItems[1]:SetIsSelected(false);
            mountTogItem:SetParam(mount_id)
            if MountModel:GetInstance():CheckIsActive(mount_id) then
                mountTogItem:SetIsLock(false);
                mountTogItem:SetIsSelected(true);
                scrollToIndex = i;
            else
                mountTogItem:SetIsLock(true);
            end

            local morph = self.model:GetMorphData(mount_id);
            if morph then
                mountTogItem:SetJie(morph.star);
            end

            mountTogItem:SetRiding(MountModel:GetInstance():IsMorphRiding(self.model.db_mount_morph[i].id))
            SetLocalScale(mountTogItem.transform, 1, 1, 1);
            SetLocalPosition(mountTogItem.transform, 0, 0, 0);

            AddClickEvent(mountTogItem.gameObject, handler(self, self.HandleTogClick, mountTogItem));
        end
        local flag = false;
        if self.defaultSelectedID then
            for i = #self.model.db_mount_morph, 1, -1 do
                local mount_id = self.model.db_mount_morph[i].id
                if self.defaultSelectedID == mount_id then
                    flag = true;
                    self:HandleTogClick(self.mountTogItems[i].gameObject, 0, 0, self.mountTogItems[i]);
                    break ;
                end
            end
        else
            for i = #self.model.db_mount_morph, 1, -1 do
                local mount_id = self.model.db_mount_morph[i].id
                if MountModel:GetInstance():CheckIsActive(mount_id) then
                    flag = true;
                    self:HandleTogClick(self.mountTogItems[i].gameObject, 0, 0, self.mountTogItems[i]);
                    break ;
                end
            end
        end

        if not flag then
            self:HandleTogClick(self.mountTogItems[1].gameObject, 0, 0, self.mountTogItems[1]);
        end
    end

    self:ReLayout()

    self.mountTogItem_0.gameObject:SetActive(false);
end

function MountInfoPanel:MountOrVision()
    --self:InitTog();
end

function MountInfoPanel:HandleMountActiveList(data)
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        local tab = data.morphs;
        MountModel:GetInstance().morphData = tab;

        if MountInfoPanel.navTab == 2 then
            for k, v in pairs(self.mountTogItems) do
                --如果ID一样就直接setlock false

            end

            for k, v in pairs(tab) do
                --MountModel:GetInstance().morphData[v.id] = v;
                local item = self:GetMountItemByVisionID(v.id);
                if item then
                    item:SetIsLock(false);
                end
            end

        end

    end
end
--id = 1234之类
function MountInfoPanel:GetMountItem(mountid)
    if MountInfoPanel.navTab == 2 then
        if self.mountTogItems[mountid] then
            return self.mountTogItems[mountid]
        end
    end
    return nil;
end
--获取坐骑togitem,id是self.model.db_mount_morph里面的ID
function MountInfoPanel:GetMountItemByVisionID(id)
    for k, v in pairs(self.mountTogItems) do
        local config = self.model.db_mount_morph[v.mountID];
        if config and config.id == id then
            return v;
        end
    end
    return nil;
end

function MountInfoPanel:HandleMorphActive(data)
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        local item = self:GetMountItemByVisionID(data.id);
        if item then
            item:SetIsLock(false);
            local morph = MountModel.GetInstance():GetMorphData(data.id)
            item:SetJie(morph.star);
            --self:RefreshData(item);
        end

        local config = self.model.db_mount_morph[self.currentSelectedMountID];
        if config and config.id == data.id then
            self:UpdateVisionProp(MountModel.GetInstance().currentMountID);

            self.jihuoBtn.gameObject:SetActive(false);
            self.upStarBtn.gameObject:SetActive(true);
            self.buyBtn.gameObject:SetActive(true);
            self:CheckUpStarLabel();
            local morph = MountModel.GetInstance():GetMorphData(data.id)
            self:RefreshStarAndExp(morph);
            --激活自动请求上座
            MountCtrl:GetInstance():RequestMorph(enum.TRAIN.TRAIN_MOUNT, config.id);
        end
    end
    self:InitMaterial();

end

function MountInfoPanel:ReLayout()
    self.Content.sizeDelta = Vector2(self.Content.sizeDelta.x, #self.mountTogItems * 99)
end

function MountInfoPanel:RefreshMountDesc()
    if not self.currentSelectedMountID then
        return ;
    end
    --最后才读配能配置
    if MountInfoPanel.navTab == 1 then
        local configTab = Config.db_mount[self.currentSelectedMountID .. "@" .. 0];
        if configTab then
            local skill = configTab.skill;
            local skillDes = Config.db_skill[tonumber(skill)];
            if skillDes then
                self.mountDes.text = skillDes.desc;
                --self.mountskill.text = skillDes.name
            else
                self.mountDes.text = "HP +400"
            end
            lua_resMgr:SetImageTexture(self, self.skillBtn, "iconasset/icon_skill", skillDes.icon, true);
            --if mountID <= MountModel:GetInstance().layer then
            --    SetVisible(self.mountskill_tips, false)
            --else
            --    SetVisible(self.mountskill_tips, true)
            --    self.mountskill_tips_text.text = string.format(ConfigLanguage.Mount.SkillTips, configTab.order)
            --end
        end
    else
        local configTab = self.model.db_mount_morph[self.currentSelectedMountID];
        if configTab then
            local morph = MountModel:GetInstance():GetMorphData(configTab.id);
            --if morph then
            local skillTab = MountModel:GetInstance().morph_skill[configTab.id];
            if skillTab then
                local skill = skillTab["skill"];
                local skillDes = Config.db_skill[tonumber(skill)];
                if skillDes then
                    local star = 0;
                    if morph then
                        star = morph.star;
                    end
                    lua_resMgr:SetImageTexture(self, self.skillBtn, "iconasset/icon_skill", skillDes.icon, false);
                    if tonumber(skillTab["level"]) > tonumber(star) then
                        --未激活
                        self.mountDes.text = skillDes.desc .. "<color=#ff0000>(" .. skillTab["level"] .. "Star Activate)</color>";
                    else
                        --已激活
                        self.mountDes.text = skillDes.desc;
                    end
                else
                    self.mountDes.text = "HP +400"
                end
            end
            --end
        end
    end

end

function MountInfoPanel:RefreshBtn()
    if MountInfoPanel.navTab == 1 then
        self.upStarBtn.gameObject:SetActive(false);
        self.buyBtn.gameObject:SetActive(true);
        self.jihuoBtn.gameObject:SetActive(false);
        self.autoBtn.gameObject:SetActive(true);
    else
        local config = self.model.db_mount_morph[self.currentSelectedMountID];

        if config and MountModel.GetInstance():CheckIsActive(config.id) then
            --mountTogItem.isActive
            self.jihuoBtn.gameObject:SetActive(false);
            self.upStarBtn.gameObject:SetActive(true);
            self.buyBtn.gameObject:SetActive(true);
        else
            self.jihuoBtn.gameObject:SetActive(true);
            self.upStarBtn.gameObject:SetActive(false);
            self.buyBtn.gameObject:SetActive(false);
        end
        self.autoBtn.gameObject:SetActive(false);
        local morph = MountModel.GetInstance():GetMorphData(config.id);
        self:RefreshStarAndExp(morph);
        self:CheckUpStarLabel();
    end
end

MountInfoPanel.currentSelectedTogItem = nil;
function MountInfoPanel:HandleTogClick(go, x, y, mti)
    for k, v in pairs(self.mountTogItems) do
        v:SetIsOn(false);
    end
    mti:SetIsOn(true);
    if self.currentSelectedTogItem ~= mti then

        self.currentSelectedTogItem = mti;
        self.currentSelectedMountID = mti.mountID;
        if MountInfoPanel.navTab == 1 then
            self:InitModel();
        else
            self:InitMorphModel();
        end

        self:RefreshMountDesc();
        self:InitMaterial();
        if MountInfoPanel.navTab == 1 then
            self:HandleMountPropChange(enum.TRAIN.TRAIN_MOUNT);
            SetGameObjectActive(self.mount_ride_btn.gameObject, not self.model:IsRiding(mti.mountID));

            --SetGameObjectActive(self.skill_bg_2, true);
            --SetGameObjectActive(self.dan_container, true);
            --SetGameObjectActive(self.skill_title_2, true);
        else
            self:UpdateVisionProp();
            local mountResID = mti.mountID;
            if self.model.db_mount_morph[mti.mountID] then
                mountResID = self.model.db_mount_morph[mti.mountID].res
            end

            SetGameObjectActive(self.mount_ride_btn.gameObject, not (self.model:IsMorphRiding(mti.mountID) or self.model:IsMorphMountModel(mountResID)));
            --SetGameObjectActive(self.skill_bg_2, false);
            --SetGameObjectActive(self.dan_container, false);
            --SetGameObjectActive(self.skill_title_2, false);
        end
    end
    self:RefreshBtn();
    self:SetReddot()
end
--这个是活动的啊,槽
function MountInfoPanel:UpdateVisionProp()
    local mountID = self.currentSelectedMountID;
    local model = MountModel:GetInstance();
    local config = self.model.db_mount_morph[mountID];
    local id = config.id;
    local star = 0;

	local res = "mount_".. config.quality
	local function call_back(sp)
		self.qualityImg.sprite = sp
		self.qualityImg:SetNativeSize()
	end
	lua_resMgr:SetImageTexture(self, self.qualityImg, "mount_image" , res, true, call_back, false)
	
    --消耗的物品在上面,这里不用管了,只做属性的改变
    local propTab;
    local nextTab;
    local starTab = Config.db_mount_star[id .. "@" .. star];
    if not MountModel.GetInstance():CheckIsActive(id) then
        --更新战力
        --self.zhanliText.text = "0";
        --更新数据
        propTab = String2Table(starTab.attrs);

        if #propTab < 5 then
            self.PropItems:HideLines(4);
        end
        table.sort(propTab, PropCompareFun);

        nextTab = Config.db_mount_star[id .. "@" .. (star + 1)];

        if propTab and nextTab then
            self.PropItems:UpdateValues(starTab, nextTab, true)
        end

        if nextTab then
            self.zhanliItems:UpdateZhanli(GetPowerByConfigList(propTab), 0);--策划说不要了GetPowerByConfigList(nextTab) - GetPowerByConfigList(propTab)--self.zhanliItems:UpdateZhanli(starTab.power, (nextTab.power - starTab.power));
        end
    else
        local morph = MountModel.GetInstance():GetMorphData(id);
        star = morph.star;
        starTab = Config.db_mount_star[id .. "@" .. star];
        --更新数据
        propTab = String2Table(starTab.attrs);
        table.sort(propTab, PropCompareFun);

        nextTab = Config.db_mount_star[id .. "@" .. (star + 1)];

        --if propTab and nextTab then
        self.PropItems:UpdateValues(starTab, nextTab, true)
        --end

        --if nextTab then
        --    self.zhanliItems:UpdateZhanli(starTab.power, (nextTab.power - starTab.power));
        --else
        --    self.zhanliItems:UpdateZhanli(0, 0);
        --end

        if nextTab then
            self.zhanliItems:UpdateZhanli(GetPowerByConfigList(propTab), 0);--GetPowerByConfigList(nextTab) - GetPowerByConfigList(propTab)
        else
            self.zhanliItems:UpdateZhanli(GetPowerByConfigList(propTab), 0);
        end
    end
end

function MountInfoPanel:HandleMountPropChange(type)
    if type ~= enum.TRAIN.TRAIN_MOUNT then
        return ;
    end
    local model = MountModel:GetInstance();
    local config = Config.db_mount[model.layer .. "@" .. model.level]
    if not config then
        return ;
    end
    local propTab = String2Table(config.attrs);
    table.sort(propTab, PropCompareFun);
    local nextConfig = nil;
    if model.layer == MountModel.MOUNT_MAX_LEVEL then

    else
        if model.level == MountModel.MOUNT_MAX_LEVEL then
            nextConfig = Config.db_mount[(model.layer + 1) .. "@0"]
        else
            nextConfig = Config.db_mount[model.layer .. "@" .. (model.level + 1)]
        end
    end
    local nextPropTab = nil;
    if nextConfig then
        nextPropTab = String2Table(nextConfig.attrs);
        table.sort(nextPropTab, PropCompareFun);
    end

    local danAddedProp = {};
    for k, v in pairs(model.trainData) do
        local trainTab = Config.db_mount_train[k];
        if trainTab then
            local attrTabs = String2Table(trainTab.attrs);
            for k1, attrTab in pairs(attrTabs) do
                local k1 = attrTab[1]
                local v1 = attrTab[2];
                danAddedProp[k1] = danAddedProp[k1] or 0;
                danAddedProp[k1] = danAddedProp[k1] + v1 * v;

                if self.danItems then
                    for i = 1, #self.danItems do
                        if k == self.danItems[i].db_id then
                            self.danItems[i]:SetNumText(v);
                        end
                        local num = BagModel:GetInstance():GetItemNumByItemID(self.danItems[i].db_id);
                        if num > 0 then
                            self.danItems[i]:ShowCanUse(num);
                        else
                            self.danItems[i]:HideCanUse();
                        end
                    end
                end
            end
        end
    end

    if propTab  then
        self.PropItems:UpdateValuesMount(config, nextConfig, danAddedProp, true);
    end
    --战力都要算
    if nextPropTab then
        self.zhanliItems:UpdateZhanli(GetPowerByConfigList(propTab), 0);--策划说不要了GetPowerByConfigList(nextPropTab) - GetPowerByConfigList(propTab)
    else
        self.zhanliItems:UpdateZhanli(GetPowerByConfigList(propTab), 0);
    end
    --更新星星
    self.staritem:OpenStars(model.level);

    local fullExp = Config.db_mount[model.layer .. "@" .. model.level].exp;--{order = 1, level = 0, name = [[1阶0星]], exp = 21, attrs = [[{4,0},{2,0},{6,0},{5,0}]]},
    --print2("full exp = " .. fullExp)
    self.exp_bar.fillAmount = model.exp / fullExp;
    self.progressText.text = model.exp .. "/" .. fullExp;
    --self.curstep.text = string.format(ConfigLanguage.Mount.OrderLevel, model.layer, model.level)
    --self.jie.text = "当前坐骑阶数 : " .. model.layer .. "阶" .. model.level .. "星";--mountID .. "zi";
    self.jie.text = "Current mount tier: " .. string.format(ConfigLanguage.Mount.OrderLevel, model.layer, model.level)
    --有一种情况为空,就是用道具跳转进来的时候
    if self.itemList then
        for i = 1, #self.itemList, 1 do
            local item = self.itemList[i];
            local num = BagModel:GetInstance():GetItemNumByItemID(item.db_id);
            item:UpdateNum0(num);
        end
    end
end

function MountInfoPanel:RefreshStarAndExp(morph)
    if MountInfoPanel.navTab == 1 then
        self.staritem:AllOn(false);
        self.staritem:OpenStars(MountModel:GetInstance().level);
    else
        if morph then
            self.staritem:OpenStars(morph.star);
            local config = Config.db_mount_star[morph.id .. "@" .. morph.star];
            if config then
                if config.exp == 0 then
                    self.exp_bar.fillAmount = 1;
                    self.progressText.text = "";
                else
                    self.exp_bar.fillAmount = morph.exp / config.exp;
                    self.progressText.text = morph.exp .. "/" .. config.exp;
                end
            end
        else
            self.staritem:OpenStars(0);
            self.exp_bar.fillAmount = 0;
            self.progressText.text = "";
        end
    end
    self:RefreshMountDesc();
end

function MountInfoPanel:InitDan()
    destroyTab(self.danItems);
    self.danItems = {};
    local trainTab = MountModel:GetInstance().trainData;
    for i = 1, #MountModel:GetInstance().MOUNT_TRAIN_ID do
        local itemId = MountModel:GetInstance().MOUNT_TRAIN_ID[i];
        local awardItem = AwardItem(self.dan_container);
        awardItem:SetData(itemId, 0);
        local num = BagModel:GetInstance():GetItemNumByItemID(itemId);
        if num > 0 then
            awardItem:ShowCanUse(num);
        end
        local click_call = function(go, x, y)
            if awardItem.iscanusenum then
                MountCtrl:GetInstance():RequestMountTrain(awardItem.db_id, enum.TRAIN.TRAIN_MOUNT);
            else
                awardItem:ShowTips();
            end
        end
        self.danItems[i] = awardItem;
        AddClickEvent(awardItem.gameObject, click_call);

        if trainTab[itemId] then
            awardItem:SetNumText(trainTab[itemId]);
        end
    end
end

function MountInfoPanel:InitMaterial()
    --if not self.currentSelectedMountID then
    --    return;
    --end

    self:ClearItemList();
    local item;
    self.itemList = {};

    local selectedCall_back = function(gameObject, x, y)
        for i = 1, #self.itemList, 1 do
            if self.itemList[i].gameObject == gameObject and self.itemList[i]:GetIsSelected() then
                self.itemList[i]:ShowTips();
                break ;
            end
        end
        for i = 1, #self.itemList, 1 do
            self.itemList[i]:SetIsSelected(false);
        end
        for i = 1, #self.itemList, 1 do
            if self.itemList[i].gameObject == gameObject then
                self.itemList[i]:SetIsSelected(true);
            end
        end
        self:StopAllSchedule();
    end
    local config = self.model.db_mount_morph[self.currentSelectedMountID];
    if MountInfoPanel.navTab == 2 and config and not MountModel.GetInstance():CheckIsActive(config.id) then
        local cost = String2Table(config.cost);
        local itemID = cost[1];
        local costNum = cost[2];
        item = AwardItem(self.itemContainer);
        item:SetData(itemID, 0);
        self.itemList[1] = item;
        local num = BagModel:GetInstance():GetItemNumByItemID(itemID);
        item:SetNumText(num .. "/" .. costNum);
        item:SetIsSelected(false);
        AddClickEvent(item.gameObject, selectedCall_back);
    else
        item = AwardItem(self.itemContainer);
        item:SetData(MountInfoPanel.TRAIN_ID, 0);
        self.itemList[1] = item;
        local num = BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID);
        item:UpdateNum0(num);
        item:SetIsSelected(false);
        AddClickEvent(item.gameObject, selectedCall_back);
        item = AwardItem(self.itemContainer);
        item:SetData(MountInfoPanel.TRAIN_ID_1, 0);
        self.itemList[2] = item;
        local num1 = BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID_1);
        item:UpdateNum0(num1);
        item:SetIsSelected(false);
        AddClickEvent(item.gameObject, selectedCall_back);
        if num > 0 then
            self.itemList[1]:SetIsSelected(true);
        elseif num1 > 0 then
            self.itemList[2]:SetIsSelected(true);
        else
            self.itemList[1]:SetIsSelected(true);
        end
    end
end

function MountInfoPanel:StopAllSchedule()
    if self.schedules[1] then
        GlobalSchedule:Stop(self.schedules[1]);
    end
    if self.schedules[2] then
        GlobalSchedule:Stop(self.schedules[2]);
    end
    if self.schedules[3] then
        GlobalSchedule:Stop(self.schedules[3]);
    end
    if self.schedules[4] then
        GlobalSchedule:Stop(self.schedules[4]);
    end
    self.schedules = {};
    self.autoText.text = "Auto star-up";
    self.upStar_label.text = "Auto star-up";
    self:CheckUpStarLabel();
end

function MountInfoPanel:CheckUpStarLabel()
    local config = self.model.db_mount_morph[self.currentSelectedMountID];
    if config then
        local id = config.id;

        local morph = MountModel.GetInstance():GetMorphData(id);
        if morph then
            local starConfig = Config.db_mount_star[morph.id .. "@" .. morph.star];
            if starConfig then
                local nextConfig = Config.db_mount_star[morph.id .. "@" .. (morph.star + 1)];
                if not nextConfig then
                    --and morph.exp == starConfig.exp
                    self.upStar_label.text = "Max Stars";
                else
                    if self.upStar_label.text ~= "Stop" then
                        self.upStar_label.text = "Auto star-up";
                    end
                end
            end
        end
    end
end

function MountInfoPanel:HandleUpstar(data)
    if data.type == enum.TRAIN.TRAIN_MOUNT then
        local morph = data.morph;
        self:RefreshStarAndExp(morph);
        local item;
        for i = 1, #self.itemList do
            item = self.itemList[i];
            local num = BagModel:GetInstance():GetItemNumByItemID(item.db_id);
            item:UpdateNum0(num);
        end

        item = self:GetMountItemByVisionID(morph.id);
        if item then
            item:SetJie(morph.star);
        end
        if MountInfoPanel.navTab == 1 then
            self:HandleMountPropChange(enum.TRAIN.TRAIN_MOUNT);
        else
            self:UpdateVisionProp();
        end

        self:CheckUpStarLabel();
    end
end

function MountInfoPanel:ShowAddExp(text1)
    local textObj = self:CreateText();
    textObj.transform:SetParent(self.expCon.transform);
    textObj.gameObject:SetActive(true);
    SetLocalPosition(textObj.transform, 0, 0, 0);
    SetLocalScale(textObj.transform, 1, 1, 1);
    SetLocalRotation(textObj.transform, 0, 0, 0);
    textObj.text = tostring(text1);
    self.textList[#self.textList + 1] = textObj;

    if not self.piaoZiSchedule then
        self.piaoZiSchedule = GlobalSchedule:Start(handler(self, self.UpdateTextList), 0.033, -1);
    end

end

function MountInfoPanel:CreateText()
    return newObject(self.TextObj):GetComponent('Text');
end

function MountInfoPanel:UpdateTextList()
    local removeIndex = 0;
    for i = 1, #self.textList, 1 do
        local text = self.textList[i];
        local color = text.color;
        local pos = text.transform.localPosition;

        color.a = color.a - 0.1;
        pos.y = pos.y + 1;
        text.color = color;
        text.transform.localPosition = pos;
        if color.a < 0 then
            removeIndex = i;
        end
    end
    for i = 1, removeIndex, 1 do
        destroy(self.textList[1]);
        table.remove(self.textList, 1)
    end
    if #self.textList == 0 then
        GlobalSchedule:Stop(self.piaoZiSchedule);
        self.piaoZiSchedule = nil;
    end
end

function MountInfoPanel:HandleVisionBtn(go, x, y)
    local panel = lua_panelMgr:GetPanel(WingHuaXingPanel);
    if panel then
        panel:Close();
    end
    lua_panelMgr:GetPanelOrCreate(WingHuaXingPanel):Open(1)
end

--获取快捷购买的数据
function MountInfoPanel:GetQuickBuyData(is_activity)
    local data = {}
    local mountId 
    local res  --模型资源名
    local name -- 坐骑名
    local layer --坐骑阶级
    local star --坐骑星级
    local propTable --坐骑属性列表

    if is_activity == false then
        --普通坐骑
        mountId = MountModel:GetInstance().layer
        if mountId < 10 then
             mountId = mountId + 1
        end
        local mountConfig = Config.db_mount[mountId .. "@" .. 0];
        res = mountConfig.res
        name = mountConfig.name
        layer = mountId
        propTable = String2Table(mountConfig.attrs)
    else
        --活动坐骑
        mountId  = self.currentSelectedMountID
        local mountConfig = self.model.db_mount_morph[mountId];
        res = mountConfig.res
        name = mountConfig.name

        local id = mountConfig.id;
        local morph = MountModel.GetInstance():GetMorphData(id);
        star = morph.star;
        if star < 10 then
            star = star + 1
        end
        local starTab = Config.db_mount_star[id .. "@" .. star];

        propTable = String2Table(starTab.attrs)
    end

    data.path = "model_mount_" .. res
    data.type = enum.ITEM_STYPE.ITEM_STYPE_MOUNT_MORPH
    data.name = name
    data.layer = layer
    data.star = star
    data.propTable = propTable

    return data
end

--检查是否弹出快捷购买
function MountInfoPanel:CheckQuickBuy(is_activity,id)
    if BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID) == 0
        and BagModel:GetInstance():GetItemNumByItemID(MountInfoPanel.TRAIN_ID_1) == 0
    then
        local data = self:GetQuickBuyData(is_activity)
        data.id = id
           
        GlobalEvent:Brocast(QuickBuyEvent.OpenQuickBuyPanel,data)
    end
end