---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2018/9/19 12:00
---
MountPanel = MountPanel or class("MountPanel", WindowPanel)
local MountPanel = MountPanel
local ConfigLanguage = require('game.config.language.CnLanguage');

function MountPanel:ctor()
    self.abName = "mount"
    self.assetName = "MountPanel"
    self.layer = "UI"

    self.panel_type = 2;

    self.model = MountModel.GetInstance()
    self.events = {};
    self.schedules = {};

    self.model_event_list = {}
    --self.sidebar_data = {
    --    { text = ConfigLanguage.Mount.MOUNT, id = 1, },
    --    --{ text = ConfigLanguage.Mount.SKIN, id = 2, },
    --    { text = ConfigLanguage.Mount.LEFT_HAND, id = 2, },
    --}
end

function MountPanel:dctor()
    GlobalEvent:RemoveTabListener(self.events);

    self.model:RemoveTabListener(self.model_event_list);
    self.model = nil;

    self:StopAllSchedules();
end

function MountPanel:Open(subid , selectedID)
    self.default_table_index = subid or 1;
    self.defaultSelectedID = selectedID;
    WindowPanel.Open(self)
end

function MountPanel:LoadCallBack()
    self.nodes = {

    }
    self:GetChildren(self.nodes)

    --SetLocalPosition(self.transform, 0, 0, 0)

    self:AddEvent()

    self:SetReddot()

    --self:LoadMountPanel()
    --self:LoadPropPanel()
    --self:LoadNavPanel()


    --local checkuiLoadComplete = function()
    --    if self.mountShow.gameObject and self.navPanel.gameObject and self.propPanel.gameObject then
    --        MountCtrl:GetInstance():RequestMorphList(enum.TRAIN.TRAIN_MOUNT);
    --        self:StopAllSchedules();
    --    end
    --end
    --self.schedules[#self.schedules + 1] = GlobalSchedule:Start(checkuiLoadComplete, 0.033, -1);


    --self:SetBackgroundImage("mount_image", "bg");

    --self:SetTileIcon("mount_image", "ba_icon_bag");

end

function MountPanel:AddEvent()
    local function callBack (index)
       lua_panelMgr:GetPanelOrCreate(MountUsePanel):Open()
    end

    self.events[#self.events + 1] = GlobalEvent:AddListener(MountEvent.OPEN_USE_PANEL, callBack)

    local function callBack1 (index)
        if self.use_panel then
            self.use_panel:destroy();
        end
        self.use_panel = nil;
    end

    self.events[#self.events + 1] = GlobalEvent:AddListener(MountEvent.CLOSE_USE_PANEL, callBack1)

    local function call_back()
        self:SetReddot()
    end
    self.model_event_list[#self.model_event_list+1] = self.model:AddListener(MountEvent.UpdateRedDot, call_back)
end

function MountPanel:SetReddot()
    local bo = self.model:GetReddotState(enum.TRAIN.TRAIN_MOUNT)
    self:SetIndexRedDotParam(1,bo)
    bo = self.model:GetReddotState(enum.TRAIN.TRAIN_OFFHAND)
    self:SetIndexRedDotParam(2,bo)
end

function MountPanel:LoadMountPanel()
    --self.mountShow = MountShowPanel(self.child_transform, "UI")
end
function MountPanel:LoadPropPanel()
    --self.propPanel = MountPropPanel(self.child_transform, "UI")
end
function MountPanel:LoadNavPanel()
    --self.navPanel = MountNavPanel(self.child_transform, "UI")
end

function MountPanel:OpenCallBack()
    self:UpdateView()
end

function MountPanel:UpdateView()

end

--function MountPanel:ShowUsePanel()
--    if not self.use_panel then
--        self.use_panel = MountUsePanel(self.transform,"UI")
--    end
--    MountPanel:PopUpChild(self.use_panel)
--end
--
--function MountPanel:CloseUsePanel()
--    if self.use_panel then
--        self.use_panel:destroy();
--    end
--    self.use_panel = nil;
--end

function MountPanel:CloseCallBack()
    if self.mountView then
        self.mountView:destroy()
        self.mountView = nil
    end

    if self.offhandView then
        self.offhandView:destroy();
        self.offhandView = nil;
    end
end

function MountPanel:StopAllSchedules()
    for k,v in pairs(self.schedules) do
        GlobalSchedule:Stop(v);
    end
    self.schedules = {};
end

function MountPanel:SwitchCallBack(index, toggle_id, update_toggle)
    if self.child_node then
        self.child_node:SetVisible(false)
    end
    if index == 10086 then
        MountCtrl:GetInstance():RequestTrainInfo(enum.TRAIN.TRAIN_WING);
        self.isRequestWing = true;
        self.currentPanel = enum.TRAIN.TRAIN_WING;
        self.currentEnum = OldVisionPanel.WING_ENUM;
        self:UpdateItems(self.currentEnum);
        self:InitModelView();
    elseif index == 1 then
       --[[ if self.mountView then
            self.mountView:destroy();
            self.mountView = nil;
        end
        --]]
        --请求坐骑信息
        MountCtrl:GetInstance():RequestMountInfo(enum.TRAIN.TRAIN_MOUNT);

        if not self.mountView then
            self.mountView = MountInfoPanel(self.transform , "UI" , self.defaultSelectedID);
        end
        self:PopUpChild(self.mountView);
        --MountCtrl:GetInstance():RequestTrainInfo(enum.TRAIN.TRAIN_TALIS);
        --self.isRequestTails = true;
        --self.currentPanel = enum.TRAIN.TRAIN_TALIS;
        --self.currentEnum = OldVisionPanel.FABAO_ENUM;
        --self:UpdateItems(self.currentEnum);
        --self:InitModelView();
        self:SetTileTextImage("mount_image", "zuoqi" , false);
    elseif index == 2 then
        self:SetTileTextImage("mount_image", "fushou" , false);
       --[[ if self.offhandView then
            self.offhandView:destroy();
            self.offhandView = nil;
        end--]]
        MountCtrl:GetInstance():RequestMountInfo(enum.TRAIN.TRAIN_OFFHAND);
        if not self.offhandView then
            self.offhandView = OffhandPanel(self.transform , "UI", self.defaultSelectedID);
        end
        self:PopUpChild(self.offhandView);
    else
        print2(index);

    end

end
