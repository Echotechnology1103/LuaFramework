---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2018/9/20 11:18
---

WingHuaXingPanel = WingHuaXingPanel or class("WingHuaXingPanel", WindowPanel)
local this = WingHuaXingPanel
WingHuaXingPanel.currentPanel = enum.TRAIN.TRAIN_WING;
WingHuaXingPanel.currentSelectedIndex = 1;

function WingHuaXingPanel:ctor(parent_node, layer)
    self.abName = "mount"
    self.assetName = "WingHuaXingPanel"
    self.layer = "UI"
    self.panel_type = 1;
    self.events = {};
    self.is_hide_other_panel = true;
   -- self.is_show_money = false;
    --self.sidebar_data = {
    --    { text = ConfigLanguage.Vision.XING_PAN, id = 1, },
    --    { text = ConfigLanguage.Vision.FA_BAO, id = 2, },
    --    { text = ConfigLanguage.Vision.WEAPON, id = 3, },
    --}
    self.is_show_money = {
        { Constant.GoldType.Coin, true },
        { Constant.GoldType.BGold, true },
        { Constant.GoldType.Gold, true },
    }
    self.currentPanel = enum.TRAIN.TRAIN_WING;
    self.toggle_red_dot = {}
end

function WingHuaXingPanel:dctor()
    if self.items then
        for k, v in pairs(self.items) do
            v:destroy();
        end
    end

    if self.modelView then
        self.modelView:destroy();
    end
    self.modelView = nil;
    GlobalEvent:RemoveTabListener(self.events);
    BrocastModelEvent(MountEvent.HUAXING_CLOSE);
    self.currentSelectedItemData = nil;
    self.currentSelectedItem = nil;
    if self.upstar_red then
        self.upstar_red:destroy()
        self.upstar_red = nil
    end
    destroyTab(self.toggle_red_dot);
    self.toggle_red_dot = nil;

    if self.jihuoBtn_red then
        self.jihuoBtn_red:destroy();
    end
    self.jihuoBtn_red = nil;

    if self.updatereddotevent then
        RemoveModelListener(self.updatereddotevent, MountModel:GetInstance());
    end

    if self.setreddotschedule then
        GlobalSchedule.StopFun(self.setreddotschedule);
    end
    self.setreddotschedule = nil;

    self.togbtns = nil;
    self.togSel = nil
    if self.costItem then
        self.costItem:destroy();
    end
    self.costItem = nil;
end

function WingHuaXingPanel:Open(tabIndex, morphID)
    self.default_table_index = tabIndex;
    self.selectedMorphid = morphID;
    WindowPanel.Open(self)
end
--selected color FFE463  --not selected E2DCBF
--togcolor 994829 , EBD39A
function WingHuaXingPanel:LoadCallBack()
    self.nodes = {
        --"zhanliUp","zhanliText","upStarBtn","PropItems","huaBtn", "jihuoBtn","icon","hideTog","empty","right/exp",
        "wingCon","titleObj",
        "wing_title_text",
        "zhanliItems",
        "right", "right/PropItems", "right/hideTog", "right/jihuoBtn", "right/huaBtn", "right/icon", "right/empty", "right/des", "right/title",
        "right/upStarBtn", "right/upStarBtn/upstar_label",
        "right/exp", "right/exp/progressText", "right/exp/exp_bg", "right/exp/exp_bar",
        "bg/full_bg",
        --"exp/progressText", "exp/exp_bg", "exp/exp_bar",
        "left/more_btn",
        "left",
        --"togs/wing", "togs/weapon", "togs/talis", "togs/offhand", "togs/other","item_0",
        "right/togs", "right/togs/other", "right/togs/offhand", "right/togs/weapon", "right/togs/wing", "right/togs/talis",
        "left/ScrollView", "left/ScrollView/Viewport/Content", "left/item_0",

        "right/prop_bg/basetext", "right/prop_bg/hightext",
        "right/togs/wing/select","right/togs/talis/select1","right/togs/weapon/select2","right/togs/offhand/select3","right/togs/other/select4",
    }
    self:GetChildren(self.nodes)
    --SetLocalPosition(self.transform, 0, 0, -1000);

    self:InitUI();
    self:InitTogBtn();
    self:AddEvent();
    local res = "huaxing_panel_bg";
    self:SetBackgroundImage("iconasset/icon_big_bg_" .. res, res, false);

    self:HideTitleBarAndMoney();
    SetAlignType(self.titleObj, bit.bor(AlignType.Left, AlignType.Top))
    SetAlignType(self.left, bit.bor(AlignType.Left, AlignType.Top));
    SetAlignType(self.right, bit.bor(AlignType.Right, AlignType.Null));

    --SetAlignType(self.right, bit.bor(AlignType.Right, AlignType.Top));
    --self:SetTileTextImage("mount_image", "huaxing_title");
    --if self.default_table_index ~= 1 then
    --    self:SetTabIndex(self.default_table_index)
    --end
    --self.tabIndex = nil;
    --self:SetTileText("幻    化");
    BrocastModelEvent(MountEvent.HUAXING_OPEN);

    self.upstar_red = RedDot(self.upStarBtn.transform, nil, RedDot.RedDotType.Nor)
    self.upstar_red:SetPosition(60, 20);
    --self.upstar_red:SetRedDotParam(true);

    self.jihuoBtn_red = RedDot(self.jihuoBtn.transform, nil, RedDot.RedDotType.Nor);
    self.jihuoBtn_red:SetPosition(60, 20);

    self.won_com_y = GetLocalPositionY(self.wingCon.transform)
    --self.jihuoBtn_red:SetRedDotParam(true);
    --self:SetReddot();

    --lua_resMgr:SetImageTexture(self, self.mount_bg, "iconasset/icon_big_bg_" .. res, res, false);
end
function WingHuaXingPanel:InitUI()
    self.zhanliItems = ZhanLiItems(self.zhanliItems, false);

    self.hideTog = GetToggle(self.hideTog);
    SetGameObjectActive(self.hideTog, false);

    self.PropItems = PropItems(self.PropItems);

    self.PropItems:HideLines(0);

    self.progressText = GetText(self.progressText);
    self.exp_bar = GetImage(self.exp_bar);

    --self.modelView = UIWingModel(self.wingCon, 10001, handler(self, self.LoadModelCallBack));

    self.wing_title_text = GetText(self.wing_title_text);

    self.huaBtn = GetButton(self.huaBtn);
    self.jihuoBtn = GetButton(self.jihuoBtn);
    self.upStarBtn = GetButton(self.upStarBtn);

    self.upstar_label = GetText(self.upstar_label);

    --self.tog_btn = GetImage(self.tog_btn);

    --self.wing = GetToggle(self.wing);
    --self.weapon = GetToggle(self.weapon);
    --self.talis = GetToggle(self.talis);
    --self.offhand = GetToggle(self.offhand);
    --self.other = GetToggle(self.other);
    self.togbtns = {};
    self.togbtns[1] = GetToggle(self.wing);
    self.togbtns[2] = GetToggle(self.talis);
    self.togbtns[3] = GetToggle(self.weapon);
    self.togbtns[4] = GetToggle(self.offhand);
    self.togbtns[5] = GetToggle(self.other);
    self.togSel = {}
    self.togSel[1] = self.select
    self.togSel[2] = self.select1
    self.togSel[3] = self.select2
    self.togSel[4] = self.select3
    self.togSel[5] = self.select4


    SetGameObjectActive(self.togbtns[4].gameObject, false);
    SetGameObjectActive(self.togbtns[5].gameObject, false);

    for i = 1, 5 do
        AddClickEvent(self.togbtns[i].gameObject, handler(self, self.HandleTogChange, i));
        self.togbtns[i].isOn = false;
        self.toggle_red_dot[i] = RedDot(self.togbtns[i].transform, nil, RedDot.RedDotType.Nor);
        self.toggle_red_dot[i]:SetPosition(17, 58);
        --self.toggle_red_dot[i]:SetRedDotParam(true);
    end
    if self.default_table_index and self.default_table_index > 0 and self.default_table_index < 4 then
        --可以小于6
       -- self.togbtns[self.default_table_index].isOn = true;
        for i = 1, #self.togbtns do
            self.togbtns[i].isOn = false;
            SetVisible(self.togSel[i].gameObject, false)
        end
        self.togbtns[self.default_table_index].isOn = true;
        SetVisible(self.togSel[self.default_table_index].gameObject, true)
    else
        self.togbtns[1].isOn = true;
    end

    self.hightext = GetText(self.hightext);

    SetGameObjectActive(self.empty, false);

    --for i = 1, 3 do
    --    local name = "tog_txt_" .. i;
    --    self[name] = GetText(self[name]);
    --    AddClickEvent(self[name].gameObject , handler(self,self.HandleTogChange , i));
    --
    --    if i == (self.currentPanel-1) then
    --        SetColor(self[name] , 0x99 , 0x48 , 0x29 , 255);
    --    else
    --        SetColor(self[name] , 0xEB , 0xD3 , 0x9A , 255);--EBD39A
    --    end
    --end

    --self.wing_title_text.text = ""

    --读取开放等级
    local level = RoleInfoModel:GetInstance():GetMainRoleLevel();

    local openLevel = GetSysOpenDataById("100@7");

    if level >= openLevel then
        SetGameObjectActive(self.togbtns[1].gameObject, true);
    else
        SetGameObjectActive(self.togbtns[1].gameObject, false);
    end

    openLevel = GetSysOpenDataById("100@3");

    if level >= openLevel then
        SetGameObjectActive(self.togbtns[2].gameObject, true);
    else
        SetGameObjectActive(self.togbtns[2].gameObject, false);
    end

    openLevel = GetSysOpenDataById("100@4");

    if level >= openLevel then
        SetGameObjectActive(self.togbtns[3].gameObject, true);
    else
        SetGameObjectActive(self.togbtns[3].gameObject, false);
    end
end

function WingHuaXingPanel:InitTogBtn()

end

function WingHuaXingPanel:ClearTogItems()
    if self.items then
        for k, v in pairs(self.items) do
            v:destroy();
        end
    end
    self.items = nil;
end

function WingHuaXingPanel:InitTogItems()
    self:ClearTogItems();
    local dataTab = nil;
    if self.currentPanel == enum.TRAIN.TRAIN_WING then
        dataTab = Config.db_wing_morph
    elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
        dataTab = Config.db_talis_morph;
    else
        dataTab = Config.db_weapon_morph;
    end
    self.items = {};
    local allTrainTab = {};
    for k, v in pairs(dataTab) do
        if v.show and v.show == 0 then

        else
            if self.currentPanel == enum.TRAIN.TRAIN_WING then
                local sexTab = String2Table(v.reqs);
                if sexTab and sexTab[1][2] == RoleInfoModel.GetSex() then
                    table.insert(allTrainTab, v);
                end
            else
                table.insert(allTrainTab, v);
            end
        end
    end
    table.sort(allTrainTab, IDCompareFun);

    self.item_0.gameObject:SetActive(true);
    self.defaultSelected = 1;
    --生成Tab菜单
    for i = 1, #allTrainTab, 1 do
        local tab = allTrainTab[i];
        local item = newObject(self.item_0.gameObject);
        item.gameObject.name = "item_" .. i;
        self.items[i] = WingItem(item, tab);
        self.items[i].transform:SetParent(self.Content.transform);
        SetLocalScale(self.items[i].transform, 1, 1, 1);
        local costTab = String2Table(tab.cost);
        if self.currentPanel == enum.TRAIN.TRAIN_WING then
            if costTab and self.selectedMorphid == costTab[1] then
                self.defaultSelected = i;
            end
        else
            if self.selectedMorphid == tab.id then
                self.defaultSelected = i;
            end
        end
        --if self.selectedMorphid == tab.id then
        --    self.defaultSelected = i;
        --end
        self.items[i]:UpdateStar(0);

        SetLocalPositionZ(self.items[i].transform,0)
    end
    self.selectedMorphid = nil;

    local rt = self.Content:GetComponent("RectTransform");
    rt.sizeDelta = Vector2(rt.sizeDelta.x, #allTrainTab * 130);

    self.item_0.gameObject:SetActive(false);

 --   SetLocalPosition(self.Content.transform, -60, -10, 0);

    self:HandleWingItemClick(self.items[self.defaultSelected]);
    self:SetReddot();
    self:HandleWear();
end

function WingHuaXingPanel:InitModelView(id)
    self:ClearModelView();
    local config = {};
    config.scale = { x = 100, y = 100, z = 100 };
    config.rotate = { x = 0, y = 0, z = 0 };
    config.offset = { x = 4000, y = 80, z = -450 };
    config.rotate = { x = 0, y = 180, z = 0 };
    config.cameraPos = { x = 2000, y = 1000, z = 0 };
    local res = nil;
    local stype = nil;
    if self.currentPanel == enum.TRAIN.TRAIN_WING then
        local cf = Config.db_wing_morph[id]
        res = cf.res
        if cf.angle then
            config.rotate.y = cf.angle
        end
        stype = enum.ITEM_STYPE.ITEM_STYPE_WING_MORPH;
        config.offset = { x = 4000, y = 1060, z = -450 };
        SetLocalPositionY(self.wingCon.transform, self.won_com_y)
        --翅膀模型
        --self.modelView = UIWingModel(self.wingCon, res, handler(self, self.LoadModelCallBack));
    elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
        res = Config.db_talis_morph[id].res
        stype = enum.ITEM_STYPE.ITEM_STYPE_TALIS_MORPH;
        config.offset = { x = 4000, y = 1040, z = -450 };
       -- config.pos = {x = 2000, y = 934, z = 0 }
        config.carmera_size = 0.9
        SetLocalPositionY(self.wingCon.transform, self.won_com_y)
        --法宝模型
        --self.modelView = UIFabaoModel(self.wingCon, res, handler(self, self.LoadModelCallBack));
    else
        res = Config.db_weapon_morph[id].res
        stype = enum.ITEM_STYPE.ITEM_STYPE_WEAPON_MORPH;
        config.offset = { x = 4000, y = 1160, z = -450 };
        SetLocalPositionY(self.wingCon.transform, self.won_com_y - 160)
        --神兵模型
        --self.modelView = UIWingModel(self.wingCon, res, handler(self, self.LoadModelCallBack), "model_weapon_", "model_weapon_r_");
    end

    self.modelView = UIMountCamera(self.wingCon.transform, nil, res, stype, nil, true);
    self.modelView:SetConfig(config)
end

function WingHuaXingPanel:ClearModelView()
    if self.modelView then
        self.modelView:destroy();
    end
end
WingHuaXingPanel.autoSet = false;
function WingHuaXingPanel:AddEvent()
    local calb = function()
        print2("");
    end
    --收到服务端激活列表
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(MountEvent.MORPH_ACTIVE_LIST, handler(self, self.HandleMorphActiveList));--calb);


    local valuechange = function(go, bool)
        if self.autoSet then

        else
            if bool then

            else

            end
        end
    end
    AddValueChange(self.hideTog.gameObject, valuechange);

    --升星按钮事件
    local up_callback = function(target, x, y)
        local item = self:GetItemById(self.modelViewID);
        local itemData = item.wingTab;
        local morph = MountModel:GetInstance():GetMorphDataByType(self.currentPanel, itemData.id);
        local cost1 = String2Table(itemData.cost)
        local coststr, req = self:GetCost(item);
        if string.isempty(coststr) or self.upstar_label.text == "Max Stars" then
            Notify.ShowText("Max Stars");
            return ;
        end
        local cost = String2Table(coststr);
        if cost and #cost == 2 then
            local num = BagModel:GetInstance():GetItemNumByItemID(cost[1]);
            if num < cost[2] then
                Notify.ShowText("Insufficient material,unable to star up");
                return ;
            end
        end
        if self.currentPanel == enum.TRAIN.TRAIN_WING then
            MountCtrl:GetInstance():RequestUpStar(enum.TRAIN.TRAIN_WING, itemData.id);
        elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
            MountCtrl:GetInstance():RequestUpStar(enum.TRAIN.TRAIN_TALIS, itemData.id);
        else
            MountCtrl:GetInstance():RequestUpStar(enum.TRAIN.TRAIN_WEAPON, itemData.id);
        end
    end
    AddClickEvent(self.upStarBtn.gameObject, up_callback);

    --幻化按钮事件
    local hua_callback = function(target, x, y)
        local item = self:GetItemById(self.modelViewID);
        local itemData = item.wingTab;
        if item and item.isActive ~= 1 then
            --MountCtrl:GetInstance():RequestUpStar(enum.TRAIN.TRAIN_WING , self.modelViewID);
            if self.currentPanel == enum.TRAIN.TRAIN_WING then
                --Notify.ShowText("翅膀幻化");
                MountCtrl:GetInstance():RequestMorph(enum.TRAIN.TRAIN_WING, itemData.id);
            elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
                MountCtrl:GetInstance():RequestMorph(enum.TRAIN.TRAIN_TALIS, itemData.id);
            elseif self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
                MountCtrl:GetInstance():RequestMorph(enum.TRAIN.TRAIN_WEAPON, itemData.id);
            else
                --Notify.ShowText("神兵幻化");
            end
            --Notify.ShowText("幻化按钮点击");
        elseif item then
            if self.currentPanel == enum.TRAIN.TRAIN_WING then
                Notify.ShowText("Activate first" .. item.wingTab.reqs_text .. "Wings");
            elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
                Notify.ShowText("Activate first" .. "Talisman");
            else
                Notify.ShowText("Activate first" .. "Artifact");
            end

        else
            if self.currentPanel == enum.TRAIN.TRAIN_WING then
                print2("找不到该翅膀" .. self.modelViewID);
            elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
                print2("找不到该法宝" .. self.modelViewID);
            else
                print2("找不到该神兵" .. self.modelViewID);
            end

        end
    end
    AddClickEvent(self.huaBtn.gameObject, hua_callback);

    AddEventListenerInTab(MountEvent.MOUNT_CHANGE_FIGURE, handler(self, self.HandleWear), self.events);

    --激活按钮事件
    local jihuo_callback = function(target, x, y)
        local item = self:GetItemById(self.modelViewID);
        local itemData = item.wingTab;
        if self.currentPanel == enum.TRAIN.TRAIN_WING then
            MountCtrl:GetInstance():RequestMorphActive(enum.TRAIN.TRAIN_WING, itemData.id);
        elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
            MountCtrl:GetInstance():RequestMorphActive(enum.TRAIN.TRAIN_TALIS, itemData.id);
        else
            MountCtrl:GetInstance():RequestMorphActive(enum.TRAIN.TRAIN_WEAPON, itemData.id);
        end

    end
    AddClickEvent(self.jihuoBtn.gameObject, jihuo_callback);


    --点击侧边栏的事件
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(MountEvent.WING_ITEM_CLICK, handler(self, self.HandleWingItemClick))

    --激活的事件
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(MountEvent.MORPH_ACTIVE_DATA, handler(self, self.HandleMorphActive))

    self.events[#self.events + 1] = GlobalEvent.AddEventListener(MountEvent.MORPH_UPSTAR_DATA, handler(self, self.HandleUpstar))

    local function call_back(type)
        if type == 2 or type == 3 or type == 4 then
            self:SetReddot()
            if self.currentSelectedItem then
                self:RefreshData(self.currentSelectedItem);
            end
        end

    end
    self.updatereddotevent = MountModel:GetInstance():AddListener(MountEvent.UpdateRedDot, call_back);
end

function WingHuaXingPanel:HandleMorphActiveList(data)
    if data.type == enum.TRAIN.TRAIN_WING or data.type == enum.TRAIN.TRAIN_TALIS or data.type == enum.TRAIN.TRAIN_WEAPON then
        local tab = data.morphs;

        for i = 1, #self.items, 1 do
            local wingItem = self.items[i];
            local id = wingItem.wingTab.id;
            local contain = false;
            local morph = MountModel:GetInstance():GetMorphDataByType(self.currentPanel, id);
            if morph then
                wingItem:UpdateStar(morph.star);
                wingItem:SetisActive(0);
            else
                --就是未拥有
                local cost = String2Table(wingItem.wingTab.cost)
                print2(Table2String(cost))
                local num = BagModel:GetInstance():GetItemNumByItemID(cost[1])
                if num >= cost[2] then
                    wingItem:SetisActive(2);
                else
                    wingItem:SetisActive(1);
                end
            end
            --for j = 1, #tab, 1 do
            --    if tab[j]["id"] == id then
            --        contain = true;
            --        morph = tab[j];
            --        break ;
            --    end
            --end
            --if contain then
            --    --wingItem:SetisActive(0);
            --    wingItem:UpdateStar(morph.star);
            --    --self:RefreshData(wingItem);
            --else
            --    --未激活
            --    --wingItem:SetisActive(1);
            --end
        end
        self:RefreshData(self.items[self.defaultSelected or 1]);
        --elseif data.type == enum.TRAIN.TRAIN_TALIS then

        self:SetReddot();
    end
end

function WingHuaXingPanel:HandleWear()
    local is_huaxing = true
    for i = 1, #self.items, 1 do
        local wingItem = self.items[i];
        local id = wingItem.wingTab.id;
        local res = wingItem.wingTab.res;
        if MountModel:GetInstance():GetCurIDByType(self.currentPanel) == id then
            wingItem:ShowWear(true);
            is_huaxing = false
        else
            wingItem:ShowWear(false);
        end
        --[[
        if self.currentPanel == enum.TRAIN.TRAIN_WING then
            if MountModel:GetInstance():GetCurIDByType(self.currentPanel) == id then
                wingItem:ShowWear(true);
                is_huaxing = false
            else
         
                wingItem:ShowWear(false);
            end
        elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
            if MountModel:GetInstance():IsMorphTalis(id) or MountModel:GetInstance():IsMorphTalisModel(res) then
                wingItem:ShowWear(true);
                is_huaxing = false
            else
                wingItem:ShowWear(false);
            end
        elseif self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
            if MountModel:GetInstance():IsMorphWeapon(id) or MountModel:GetInstance():IsMorphWeaponModel(res) then
                wingItem:ShowWear(true);
                is_huaxing = false
            else
                wingItem:ShowWear(false);
            end
        end--]] -- 之前繁琐的F
    end
    SetVisible(self.huaBtn.gameObject, is_huaxing)
end

function WingHuaXingPanel:GetItemById(id)
    for i = 1, #self.items, 1 do
        if self.items[i].wingTab.id == id then
            return self.items[i];
        end
    end
end
function WingHuaXingPanel:HandleMorphActive(data)
    if data.type == enum.TRAIN.TRAIN_WING or data.type == enum.TRAIN.TRAIN_TALIS or data.type == enum.TRAIN.TRAIN_WEAPON then
        local item = self:GetItemById(data.id);
        if item then
            item:SetisActive(3);
            self:RefreshData(item);
        end
        MountCtrl:GetInstance():RequestMorph(data.type, data.id); -- 自动幻化
    end

end

function WingHuaXingPanel:HandleUpstar(data)
    if data.type == enum.TRAIN.TRAIN_WING or data.type == enum.TRAIN.TRAIN_TALIS or data.type == enum.TRAIN.TRAIN_WEAPON then
        local morph = data.morph;
        if morph then
            local item = self:GetItemById(morph.id);
            if item then
                item:SetisActive(0);
                item:UpdateStar(morph.star);
                self:RefreshData(item);
            end
            self:SetReddot();
        end
    end
end

function WingHuaXingPanel:RefreshData(wingItem)
    local tab = wingItem.wingTab;
    if tab.order == -1 then
        self.wing_title_text.text = "Events·" .. tab.name;
    elseif tab.order == 0 then
        self.wing_title_text.text = tab.name;
    else
        self.wing_title_text.text =  "T"..tostring(tab.order).."·" .. tab.name;
    end

    local id = tab.id;
    local morph = MountModel:GetInstance():GetMorphDataByType(self.currentPanel, id);
    local star = wingItem.starNum or 0;
    if morph then
        star = morph.star;
    end
    if star == 5 then
        wingItem:SetisActive(0);
    end
    local huaxingTab;
    if self.currentPanel == enum.TRAIN.TRAIN_WING then
        huaxingTab = Config.db_wing_star[id .. "@" .. star];
    elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
        huaxingTab = Config.db_talis_star[id .. "@" .. star];
    else
        huaxingTab = Config.db_weapon_star[id .. "@" .. star];
    end

    if wingItem.isActive == 1 or wingItem.isActive == 2 or wingItem.isActive == nil then
        self.jihuoBtn.gameObject:SetActive(true);
        self.upStarBtn.gameObject:SetActive(false);
    else
        self.jihuoBtn.gameObject:SetActive(false);
        self.upStarBtn.gameObject:SetActive(true);
    end

    self:RefreshUpstarLabel(wingItem);

    local nextTab;

    if huaxingTab then
        --更新右下角消耗图标
        self:UpdateCost(huaxingTab);
        --未激活状态
        if wingItem.isActive == 1 or wingItem.isActive == 2 then
            --
            --更新战力
            --self.zhanliText.text = "0";
            self.hightext.text = "Activate:";
            -- = Config.db_wing_star[id .. "@" .. (star + 1)];
            if self.currentPanel == enum.TRAIN.TRAIN_WING then
                nextTab = Config.db_wing_star[id .. "@" .. (star + 1)];
            elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
                nextTab = Config.db_talis_star[id .. "@" .. (star + 1)];
            else
                nextTab = Config.db_weapon_star[id .. "@" .. (star + 1)];
            end

            self.PropItems:UpdateValuesSingle(huaxingTab, true);

            if nextTab then
                self.zhanliItems:UpdateZhanli(0, huaxingTab.power);--(nextTab.power - huaxingTab.power)
            else
                self.zhanliItems:UpdateZhanli(huaxingTab.power, 0)
            end

        else
            self.hightext.text = "Advance cost";
            --更新战力
            --self.zhanliText.text = huaxingTab.power;
            --local nextTab = Config.db_wing_star[id .. "@" .. (star + 1)];
            if self.currentPanel == enum.TRAIN.TRAIN_WING then
                nextTab = Config.db_wing_star[id .. "@" .. (star + 1)];
            elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
                nextTab = Config.db_talis_star[id .. "@" .. (star + 1)];
            else
                nextTab = Config.db_weapon_star[id .. "@" .. (star + 1)];
            end
            ----更新数据
            --local propTab = String2Table(huaxingTab.attrs);
            --table.sort(propTab, PropCompareFun);
            --
            --for i = 1, #propTab, 1 do
            --    local tab1 = propTab[i];
            --    local k = tab1[1];
            --    local v = tab1[2];
            --    self.labelTab[i].gameObject:SetActive(true);
            --    self.labelTab[i].text = PROP_ENUM[k].label;
            --    self.valueTab[i].gameObject:SetActive(true);
            --    self.valueTab[i].text = tostring(v);
            --
            --end

            self.PropItems:UpdateValues(huaxingTab, nextTab);

            if nextTab then
                --self.zhanliUp.text = tostring(nextTab.power - huaxingTab.power);
                self.zhanliItems:UpdateZhanli(huaxingTab.power, (nextTab.power - huaxingTab.power));
                --local nextPropTab = String2Table(nextTab.attrs);
                --table.sort(nextPropTab, PropCompareFun);
                --for i = 1, #nextPropTab, 1 do
                --    local tab2 = nextPropTab[i];
                --    local v1 = tab2[2];
                --    self.upValueTab[i].gameObject:SetActive(true);
                --    self.upValueTab[i].text = tostring(v1 - propTab[i][2]);
                --    self.upTab[i].gameObject:SetActive(true);
                --end
            else
                self.zhanliItems:UpdateZhanli(huaxingTab.power, 0)
                --self.zhanliUp.text = "";
            end
        end
    end
    self:SetBtnState(wingItem)

    if morph then
        wingItem:UpdateStar(morph.star);
    end
    --SetGameObjectActive(self.huaBtn, wingItem.isWear);
    local is_have = MountModel:GetInstance():IsHaveMorphID(tab.id)
    SetVisible(self.huaBtn.gameObject,not is_have)
end

function WingHuaXingPanel:HandleWingItemClick(wingItem)
    local tab = wingItem.wingTab;
    self.currentSelectedItem = wingItem;
    self.currentSelectedItemData = tab;
    if self.modelViewID == tab.id then
        return ;
    end
    --if self.modelView then
    --    self.modelView:destroy();
    --end
    self.modelViewID = tab.id;
    self:InitModelView(tab.id);

    --self.modelView = UIWingModel(self.wingCon.transform, 10001, handler(self, self.LoadModelCallBack));

    self:RefreshData(wingItem);

    local cost = String2Table(wingItem.wingTab.cost)
    if not table.isempty(cost) then
        cost = { cost }
        local id_red_dot = true
        for k, v in pairs(cost) do
            local id = v[1]
            local need_num = v[2];
            local num = BagModel:GetInstance():GetItemNumByItemID(id)
            if num >= need_num then
                self.jihuoBtn_red:SetRedDotParam(true);
                self.upstar_red:SetRedDotParam(true);
            else
                self.jihuoBtn_red:SetRedDotParam(false);
                self.upstar_red:SetRedDotParam(false);
            end
        end
    else
        self.jihuoBtn_red:SetRedDotParam(false);
        self.upstar_red:SetRedDotParam(false);
    end

    --self:RefreshUpstarLabel(wingItem);
    local is_have = MountModel:GetInstance():IsHaveMorphID(tab.id)
    SetVisible(self.huaBtn.gameObject,not is_have)

    self:SetReddot();
    --判断要不要显示图标


    --判断激活按钮显示还是幻化按钮显示
end

function WingHuaXingPanel:UpdateCost(wingstarTab)
    --更新icon
    if self.costItem then
        self.costItem:destroy();
    end
    local cost = String2Table(wingstarTab.cost);
    if cost and not table.isempty(cost) then

        self.costItem = GoodsIconSettorTwo(self.icon.transform)
        local param = {}
        --param["model"] = self.model;
        param["item_id"] = cost[1];
        --param["num"] = num1;
        param["can_click"] = true;
        param["bind"] = true;
        param["size"] = { x = 80, y = 80 }
        self.costItem:SetIcon(param);

        --self.costItem = AwardItem(self.icon.transform);
        --self.costItem:SetData(cost[1], 0);
        local num = BagModel:GetInstance():GetItemNumByItemID(cost[1]);
        --self.costItem:SetNumText(num .. "/" .. cost[2]);
        --self.costItem:UpdateNum(num .. "/" .. cost[2]);
        if num > 0 then--tonumber(cost[2])
            --    self.costItem:SetTextColor(Color(1, 1, 1, 1))
            self.costItem:SetIconNormal();
            --self.hightext.text = "进阶消耗";
            --    --SetGameObjectActive(self.empty, false);
        else
            --    self.costItem:SetTextColor(Color(1, 0, 0, 1))
            self.costItem:SetIconGray();
            --self.hightext.text = "激活消耗";
            --    --SetGameObjectActive(self.empty, true);
        end
        --self.costItem:SetNumText("");
        --self.costItem:AddClickTips();
        self.progressText.text = (num .. "/" .. cost[2]);
        self.exp_bar.fillAmount = num / cost[2];
    elseif wingstarTab.star == 5 then
        local id = wingstarTab.id;
        local star = 4;
        local huaxingTab;
        if self.currentPanel == enum.TRAIN.TRAIN_WING then
            huaxingTab = Config.db_wing_star[id .. "@" .. star];
        elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
            huaxingTab = Config.db_talis_star[id .. "@" .. star];
        else
            huaxingTab = Config.db_weapon_star[id .. "@" .. star];
        end
        if huaxingTab then
            cost = String2Table(huaxingTab.cost);
            if cost and not table.isempty(cost) then
                self.costItem = AwardItem(self.icon.transform);
                self.costItem:SetData(cost[1], 0);
                --local num = BagModel:GetInstance():GetItemNumByItemID(cost[1]);
                --self.costItem:SetNumText(num .. "/" .. cost[2]);
                --if num >= tonumber(cost[2]) then
                --    self.costItem:SetTextColor(Color(1, 1, 1, 1))
                --    self.costItem:SetIconGray(false);
                --    --SetGameObjectActive(self.empty, false);
                --else
                --    self.costItem:SetTextColor(Color(1, 0, 0, 1))
                --    self.costItem:SetIconGray(true);
                --    --SetGameObjectActive(self.empty, true);
                --end
                --self.costItem:SetNumText("");
                --self.costItem:AddClickTips();
                --self.progressText.text = (num .. "/" .. cost[2]);
                --self.exp_bar.fillAmount = num / cost[2];

            end
        end

    end
end

function WingHuaXingPanel:LoadModelCallBack()
    if self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
        local ratio = Config.db_weapon_morph[self.modelViewID].ratio
        SetLocalPosition(self.modelView.transform, -5008, -13, 400)
        local v3 = self.modelView.transform.localScale;
        local scale = math.floor(150 * ratio / 100)
        SetLocalScale(self.modelView.transform, 100, 100, 100);
        SetLocalRotation(self.modelView.transform, 0, 180, 0);
        self.modelView:AddAnimation({ "idle2" }, false, "idle2", 0)--,"casual"--"show" ,
        self.modelView.animator:CrossFade("idle2", 0)
    elseif self.currentPanel == enum.TRAIN.TRAIN_WING then
        SetLocalPosition(self.modelView.transform, -5010, -40, 400)
        local v3 = self.modelView.transform.localScale;
        local ratio = Config.db_wing_morph[self.modelViewID].ratio
        local scale = 100;--math.floor(245 * ratio / 100)
        SetLocalScale(self.modelView.transform, scale, scale, scale);
        SetLocalRotation(self.modelView.transform, 0, -180, 0);
    else
        SetLocalPosition(self.modelView.transform, -5012, -61.3, 267.7)
        local v3 = self.modelView.transform.localScale;
        local ratio = Config.db_talis_morph[self.modelViewID].ratio
        local scale = 100;--math.floor(350 * ratio / 100)
        SetLocalScale(self.modelView.transform, scale, scale, scale);
        SetLocalRotation(self.modelView.transform, 5.5, 188.3, -1.3);
        self.modelView:AddAnimation({ "show", "idle" }, false, "idle", 0)
    end
    self:HandleWear();
end

function WingHuaXingPanel:SwitchCallBack(index)
    --if self.child_node then
    --    self.child_node:SetVisible(false)
    --end
    if index == 1 then
        self.currentPanel = enum.TRAIN.TRAIN_WING;

        self:InitTogItems();
        ----翅膀模型
        self.modelViewID = self.items[self.defaultSelected or 1].wingTab.id;
        self:InitModelView(self.items[self.defaultSelected or 1].wingTab.id);
        self:RefreshData(self.items[self.defaultSelected or 1]);

        MountCtrl:GetInstance():RequestMorphList(enum.TRAIN.TRAIN_WING);
    elseif index == 2 then
        self.currentPanel = enum.TRAIN.TRAIN_TALIS;

        self:InitTogItems();
        ----翅膀模型
        self.modelViewID = self.items[self.defaultSelected or 1].wingTab.id;
        self:InitModelView(self.items[self.defaultSelected or 1].wingTab.id);
        self:RefreshData(self.items[self.defaultSelected or 1]);

        MountCtrl:GetInstance():RequestMorphList(enum.TRAIN.TRAIN_TALIS);
    elseif index == 3 then

        self.currentPanel = enum.TRAIN.TRAIN_WEAPON;

        self:InitTogItems();
        ----翅膀模型
        self.modelViewID = self.items[self.defaultSelected or 1].wingTab.id;
        self:InitModelView(self.items[self.defaultSelected or 1].wingTab.id);
        self:RefreshData(self.items[self.defaultSelected or 1]);

        MountCtrl:GetInstance():RequestMorphList(enum.TRAIN.TRAIN_WEAPON);
    else
        print2(index);
    end
end
WingHuaXingPanel.TogImgPos = {
    [1] = -563,
    [2] = -470,
    [3] = -380,
}
function WingHuaXingPanel:HandleTogChange(go, x, y, index)
    for i = 1, #self.togbtns do
        self.togbtns[i].isOn = false;
         SetVisible(self.togSel[i].gameObject, false)
    end
    self.togbtns[index].isOn = true;
    SetVisible(self.togSel[index].gameObject, true)

    if index == 4 or index == 5 then
        Notify.ShowText("This function is not opened yet");
        return ;
    end

    --for i = 1, 3 do
    --    local name = "tog_txt_" .. i;
    --    if i == index then
    --        SetColor(self[name] , 0x99 , 0x48 , 0x29 , 255);
    --    else
    --        SetColor(self[name] , 0xEB , 0xD3 , 0x9A , 255);--EBD39A
    --    end
    --end

    self:SwitchCallBack(index);
end

function WingHuaXingPanel:RefreshUpstarLabel(wingItem)
    if wingItem.starNum == 5 then
        self.upstar_label.text = "Max Stars";
        self.PropItems:HideCompare(false);
        SetGameObjectActive(self.progressText, false);
    else
        self.upstar_label.text = "Upgrade";
        self.PropItems:HideCompare(true);
        SetGameObjectActive(self.progressText, true);
    end
end

function WingHuaXingPanel:SetBtnState(wingItem)
    for i, v in pairs(self.items) do
        if v == wingItem then
            v:Select(true)
        else
            v:Select(false)
        end
    end
end
function WingHuaXingPanel:SetReddot()
    --if self.setreddotschedule then
    --    GlobalSchedule.StopFun(self.setreddotschedule);
    --end
    --self.setreddotschedule = GlobalSchedule.StartFunOnce(handler(self, self.RSetReddot), 0.01);
    self:RSetReddot();
end

function WingHuaXingPanel:RSetReddot()
    GlobalSchedule.StopFun(self.setreddotschedule);
    self.setreddotschedule = nil;
    --self.toggle_red_dot[i]:SetRedDotParam(true);
    if MountModel:GetInstance():GetReddotState(2, 2) then
        self.toggle_red_dot[1]:SetRedDotParam(true);
    else
        self.toggle_red_dot[1]:SetRedDotParam(false);
    end
    if MountModel:GetInstance():GetReddotState(3, 2) then
        self.toggle_red_dot[2]:SetRedDotParam(true);
    else
        self.toggle_red_dot[2]:SetRedDotParam(false);
    end
    if MountModel:GetInstance():GetReddotState(4, 2) then
        self.toggle_red_dot[3]:SetRedDotParam(true);
    else
        self.toggle_red_dot[3]:SetRedDotParam(false);
    end

    for k, wingitem in pairs(self.items) do
        local id = wingitem.wingTab.id;
        local bool = MountModel:GetInstance():GetReddotState(self.currentPanel, 2, id);
        wingitem:ShowReddot(bool);
        local morph = MountModel:GetInstance():GetMorphDataByType(self.currentPanel, id);

        if morph then
            if bool and morph.star < 5 then
                wingitem:SetisActive(3);
            else
                wingitem:SetisActive(0);
                --print2(1);
                --print2(wingitem.wingTab.name);
            end
        else
            if bool then
                wingitem:SetisActive(2);
                --print2(2);
                --print2(wingitem.wingTab.name);
            else
                wingitem:SetisActive(1);
                --print2(3);
                --print2(wingitem.wingTab.name);
            end
        end
        --if morph then
        --    if bool then
        --        wingitem:SetisActive(3);
        --    end
        --else
        --    if bool then
        --        wingitem:SetisActive(2);
        --    end
        --end
    end

    if self.currentSelectedItem then
        local coststr, reqs = self:GetCost(self.currentSelectedItem);
        local cost = String2Table(coststr);

        if not table.isempty(cost) then
            cost = { cost }
            local id_red_dot = true
            for k, v in pairs(cost) do
                local id = v[1]
                local need_num = v[2];
                local num = BagModel:GetInstance():GetItemNumByItemID(id);
                local wake = RoleInfoModel:GetInstance():GetRoleValue("wake");
                local wakeFlag = true;
                if reqs then
                    if #reqs == 2 and type(reqs[1]) ~= "table" then
                        reqs = { reqs };
                    end
                    for k, v in pairs(reqs) do
                        if v[1] == "wake" then
                            if wake < v[2] then
                                wakeFlag = false;
                            end
                        end
                    end
                end

                --有就要显示红点了
                if num >= need_num and wakeFlag then
                    self.jihuoBtn_red:SetRedDotParam(true);
                    self.upstar_red:SetRedDotParam(true);
                else
                    self.jihuoBtn_red:SetRedDotParam(false);
                    self.upstar_red:SetRedDotParam(false);
                end
            end
        else
            self.jihuoBtn_red:SetRedDotParam(false);
            self.upstar_red:SetRedDotParam(false);
        end
    end

end

function WingHuaXingPanel:GetCost(wingItem)
    local wingTab = wingItem.wingTab;
    local id = wingTab.id;
    local morph = MountModel:GetInstance():GetMorphDataByType(self.currentPanel, id);
    local star = morph and morph.star or 0;
    local huaxingTab;
    if self.currentPanel == enum.TRAIN.TRAIN_WING then
        huaxingTab = Config.db_wing_star[id .. "@" .. star];
    elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
        huaxingTab = Config.db_talis_star[id .. "@" .. star];
    else
        huaxingTab = Config.db_weapon_star[id .. "@" .. star];
    end
    local reqs = nil;
    if star == 0 then
        reqs = String2Table(wingTab.reqs);
    end
    return huaxingTab.cost, reqs;
end


