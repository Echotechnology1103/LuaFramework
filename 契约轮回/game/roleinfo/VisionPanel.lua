---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2018/9/19 12:00
---
VisionPanel = VisionPanel or class("VisionPanel", BaseItem)
local this = VisionPanel

VisionPanel.WING_ENUM = {
    MAT_1 = 51000,
    MAT_2 = 51001,
    MAT_3 = 51002,
}
VisionPanel.FABAO_ENUM = {
    MAT_1 = 52000,
    MAT_2 = 52001,
    MAT_3 = 52002,
}
VisionPanel.WEAPON_ENUM = {
    MAT_1 = 53000,
    MAT_2 = 53001,
    MAT_3 = 53002,
}

VisionPanel.currentEnum = VisionPanel.WING_ENUM;

function VisionPanel:ctor(parent_node, tabIndex)
    self.abName = "roleinfo"
    self.image_ab = "roleinfo_image";
    self.assetName = "VisionPanel"
    self.layer = "UI"
    self.panel_type = 2;
    self.itemIndex = 1
    self.tabIndex = tabIndex;

    self.currentPanel = enum.TRAIN.TRAIN_WING;
    self.model = MountModel.GetInstance()
    self.events = {};
    --MountCtrl:GetInstance().VisionPanel = self;
    VisionPanel.super.Load(self);
    --self.sidebar_data = {
    --    { text = ConfigLanguage.Mount.CHIBANG, id = 1, icon = "bag:bag_icon_bag_s", dark_icon = "bag:bag_icon_bag_n", },
    --    { text = ConfigLanguage.Mount.FA_BAO, id = 2, icon = "bag:bag_icon_ware_s", dark_icon = "bag:bag_icon_ware_n", },
    --    { text = ConfigLanguage.Mount.WEAPON, id = 3, icon = "bag:bag_icon_hs_s", dark_icon = "bag:bag_icon_hs_n", },
    --    --{ text = ConfigLanguage.Mount.BAI_GUI, id = 4, icon = "bag:bag_icon_hs_s", dark_icon = "bag:bag_icon_hs_n", },
    --}
end

function VisionPanel:dctor()
    self.model = nil;
    GlobalEvent:RemoveTabListener(self.events);

    self:ClearModelView();
    --下面两个暂时没用了
    self.isRequestTails = false;
    self.isRequestWing = false;

    self:CloseCallBack();
    destroyTab(self.danItems);
    self.danItems = nil;

    if self.upgradeBtn_red then
        self.upgradeBtn_red:destroy()
        self.upgradeBtn_red = nil
    end

    if self.huaxingBtn_reddot then
        self.huaxingBtn_reddot:destroy()
        self.huaxingBtn_reddot = nil
    end

    self.skillicons = nil;
end

--function VisionPanel:Open(subid)
--    self.default_table_index = subid or 1;
--    WindowPanel.Open(self)
--end

function VisionPanel:LoadCallBack()
    self.nodes = {
        "name_text", "huaxingBtn", "wear_btn", "wingCon", "upgradeBtn", "upgradeBtn/upgradeTxt", "lvText",
        "hideTog", "MatContainer", --/icon1", "MatContainer/icon2", "MatContainer/icon3",
        "zhanliItems", "PropItems", "skill_bg", "exp/exp_bg", "exp/progressText", "exp/exp_bar", "dan_container",
        "skill_bg/skill_icon_2", "skill_bg/skill_icon_5", "skill_bg/skill_icon_1", "skill_bg/skill_icon_4", "skill_bg/skill_icon_3",
        "vision_bg",
    }
    self:GetChildren(self.nodes)

    SetLocalPosition(self.transform, 0, 0, 0)

    --self:SetTileIcon("mount_image", "ba_icon_bag");
    --self:SetTileTextImage("mount_image", "waixing");


    self.upgradeBtn_red = RedDot(self.upgradeBtn, nil, RedDot.RedDotType.Nor)
    self.upgradeBtn_red:SetPosition(60, 20)

    self:InitUI();

    self:AddEvent();

    --self:SetBackgroundImage("mount_image", "huanhua_bg");

    --self:SetTileText("外形");
    self:SwitchCallBack(self.tabIndex);

    local res = "wing_panel_bg";
    lua_resMgr:SetImageTexture(self, self.vision_bg, "iconasset/icon_big_bg_" .. res, res, false);
end

function VisionPanel:InitUI()
    self.vision_bg = GetImage(self.vision_bg);
    self.name_text = GetImage(self.name_text);

    self.upgradeTxt = GetText(self.upgradeTxt);
    self.upgradeBtn = GetButton(self.upgradeBtn);
    --进度条附近
    self.lvText = GetText(self.lvText);
    self.lvText.text = "Lv.1";
    self.progressText = GetText(self.progressText);
    self.progressText.text = "0/100";
    self.exp_bar = GetImage(self.exp_bar);

    self.huaxingBtn = GetButton(self.huaxingBtn);

    self.hideTog = GetToggle(self.hideTog);
    --SetGameObjectActive(self.hideTog.gameObject , false);
    --self.icon1 = GetImage(self.icon1);
    --self.icon2 = GetImage(self.icon2);
    --self.icon3 = GetImage(self.icon3);

    self.skillicons = {};
    for i = 1, 5 do
        local iconname = "skill_icon_" .. i;
        self.skillicons[i] = GetImage(self[iconname]);
    end

    self:InitItemList();
    --self:UpdateItems();

    self.PropItems = PropItems(self.PropItems);
    self.PropItems:HideLines(4);
    self.PropItems:HideBgs(3);
    self.zhanliItems = ZhanLiItems(self.zhanliItems, false);

    SetGameObjectActive(self.skill_bg, true);

    self.huaxingBtn_reddot = RedDot(self.huaxingBtn.transform, nil, RedDot.RedDotType.Nor)
    self.huaxingBtn_reddot:SetPosition(28, 20);

    if MountModel:GetInstance():GetReddotState(self.currentPanel, 2) then
        self.huaxingBtn_reddot:SetRedDotParam(true);
    else
        self.huaxingBtn_reddot:SetRedDotParam(false);
    end
end

function VisionPanel:InitSkills()
    local skills = RoleInfoModel:GetInstance().skillSystemTab[self.currentPanel];
    if skills then
        for i = 1, #self.skillicons do
            lua_resMgr:SetImageTexture(self, self.skillicons[i], "iconasset/icon_skill", skills[i].skillid, true, nil, false)
        end
    end
end

function VisionPanel:InitModelView()
    self:ClearModelView();
    local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
    SetGameObjectActive(self.hideTog.gameObject, true);
    local config = {};
    config.rotate = { x = 0, y = 180, z = 0 };
    config.offset = { x = 4000, y = 0, z = 0 };
    config.cameraPos = { x = 4000, y = -1000, z = 0 };
    if self.currentPanel == enum.TRAIN.TRAIN_WING then
        self.defaultID = mainrole_data.gender == 1 and 21000 or 22000;
        local resid = Config.db_wing_morph[self.defaultID].res;
        --翅膀模型
        if mainrole_data and mainrole_data.figure and mainrole_data.figure.wing and mainrole_data.figure.wing.model ~= 0 and mainrole_data.figure.wing.show then
            --self.currentModelID = mainrole_data.figure.wing.model;
            --self.modelView = UIWingModel(self.wingCon, mainrole_data.figure.wing.model, handler(self, self.LoadModelCallBack));
            self.isAutoSetTog = true;
            self.hideTog.isOn = false;
            self.isAutoSetTog = false;
        else
            self.isAutoSetTog = true;
            --self.hideTog.isOn = false;
            self.hideTog.isOn = true;
            self.isAutoSetTog = false;
        end
        config.offset = { x = 6000, y = -940, z = -500 };
        config.scale = { x = 100, y = 100, z = 100 };
        --self.modelView = UIWingModel(self.wingCon, resid, handler(self, self.LoadModelCallBack));
        self.modelView = UIMountCamera(self.wingCon.transform, nil, resid, enum.ITEM_STYPE.ITEM_STYPE_WING_MORPH, nil, true);
        self.modelView:SetConfig(config)
        self.currentModelID = resid;
        local id = MountModel:GetInstance():GetCurIDByType(2)
        SetVisible(self.wear_btn.gameObject,    id ~= self.defaultID)
    elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
        self.defaultID = 30000;
        local resid = Config.db_talis_morph[self.defaultID].res;
        --法宝模型
        if mainrole_data and mainrole_data.figure and mainrole_data.figure.talis and mainrole_data.figure.talis.model ~= 0 and mainrole_data.figure.talis.show then
            --self.currentModelID = mainrole_data.figure.talis.model;
            --self.modelView = UIFabaoModel(self.wingCon, mainrole_data.figure.talis.model, handler(self, self.LoadModelCallBack));
            self.isAutoSetTog = true;
            self.hideTog.isOn = false;
            self.isAutoSetTog = false;
        else
            self.isAutoSetTog = true;
            --self.hideTog.isOn = false;
            self.hideTog.isOn = true;
            self.isAutoSetTog = false;

        end
        --self.modelView = UIFabaoModel(self.wingCon, resid, handler(self, self.LoadModelCallBack));
        config.offset = { x = 6000, y = -940, z = -550 };
        config.scale = { x = 100, y = 100, z = 100 };
        self.modelView = UIMountCamera(self.wingCon.transform, nil, resid, enum.ITEM_STYPE.ITEM_STYPE_TALIS_MORPH, nil, true);
        self.modelView:SetConfig(config)
        self.currentModelID = resid;

        local id = MountModel:GetInstance():GetCurIDByType(3)
        SetVisible(self.wear_btn.gameObject,   id ~= self.defaultID)
    elseif self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
        --神兵模型
        self.defaultID = 40000 + mainrole_data.gender * 1000;
        local resid = Config.db_weapon_morph[self.defaultID].res;
        --local defaultID = mainrole_data.gender == 1 and 11001 or 12001;
        --if mainrole_data and mainrole_data.figure and mainrole_data.figure.weapon and mainrole_data.figure.weapon.model == defaultID then
        --    SetGameObjectActive(self.hideTog.gameObject , false);
        --elseif mainrole_data and mainrole_data.figure and not mainrole_data.figure.weapon then
        SetGameObjectActive(self.hideTog.gameObject, false);
        --end
        --if mainrole_data and mainrole_data.figure and mainrole_data.figure.weapon and mainrole_data.figure.weapon.model ~= 0 then
        --    self.currentModelID = mainrole_data.figure.weapon.model;
        --    self.modelView = UIWingModel(self.wingCon, self.currentModelID, handler(self, self.LoadModelCallBack), "model_weapon_", "model_weapon_r_");
        --    self.isAutoSetTog = true;
        --    self.hideTog.isOn = false;
        --    self.isAutoSetTog = false;
        --else
        self.isAutoSetTog = true;
        --self.hideTog.isOn = false;
        self.hideTog.isOn = false;
        self.isAutoSetTog = false;
        --self.modelView = UIWingModel(self.wingCon, resid, handler(self, self.LoadModelCallBack), "model_weapon_", "model_weapon_r_");
        config.offset = { x = 6000, y = -920, z = -450 };
        config.scale = { x = 100, y = 100, z = 100 };
        self.modelView = UIMountCamera(self.wingCon.transform, nil, resid, enum.ITEM_STYPE.ITEM_STYPE_WEAPON_MORPH, nil, true);
        self.modelView:SetConfig(config)
        self.currentModelID = resid;

        local id = MountModel:GetInstance():GetCurIDByType(4)
        SetVisible(self.wear_btn.gameObject,   id ~= self.defaultID)
        --end
    else
        logError("不正确的类型" .. tostring(self.currentPanel));
        --self.modelView = UIWingModel(self.wingCon, 10000, handler(self, self.LoadModelCallBack));
    end
    --lua_resMgr:SetImageTexture(self, self.name_text, self.image_ab, "vision_title_" .. self.currentPanel, false, nil, false);
end

--function VisionPanel:LoadModelCallBack()
--    if self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
--        SetLocalPosition(self.modelView.transform, -2108, -44, 394)
--        local v3 = self.modelView.transform.localScale;
--        SetLocalScale(self.modelView.transform, 100, 100, 100);
--        SetLocalRotation(self.modelView.transform, 0, 180, 0);
--        self.modelView:AddAnimation({ "show", "idle2" }, false, "idle2", 0)--,"casual"
--        self.modelView.animator:CrossFade("idle2", 0)
--    elseif self.currentPanel == enum.TRAIN.TRAIN_WING then
--        SetLocalPosition(self.modelView.transform, -2108, -61, 367)
--        local v3 = self.modelView.transform.localScale;
--        SetLocalScale(self.modelView.transform, 100, 100, 100);
--        SetLocalRotation(self.modelView.transform, 0, 180, 0);
--        self.modelView:AddAnimation({ "show", "idle" }, false, "idle", 0)
--    else
--        SetLocalPosition(self.modelView.transform, -2108, -46, 210)
--        local v3 = self.modelView.transform.localScale;
--        SetLocalScale(self.modelView.transform, 100, 100, 100);
--        SetLocalRotation(self.modelView.transform, 5.5, 180, -1.3);
--        self.modelView:AddAnimation({ "show", "idle" }, false, "idle", 0)--,"casual"
--    end
--end

function VisionPanel:InitDan()
    destroyTab(self.danItems);
    self.danItems = {};
    local idTab = nil;

    if self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
        idTab = MountModel:GetInstance().WEAPON_TRAIN_ID;
    elseif self.currentPanel == enum.TRAIN.TRAIN_WING then
        idTab = MountModel:GetInstance().WING_TRAIN_ID;
    else
        idTab = MountModel:GetInstance().TALIS_TRAIN_ID;
    end

    local trainTab = MountModel:GetInstance().visionData[self.currentPanel] or {};
    for i = 1, #idTab do
        local itemId = idTab[i];
        local awardItem = AwardItem(self.dan_container);
        awardItem:SetData(itemId, 0);
        local num = BagModel:GetInstance():GetItemNumByItemID(itemId);
        if num > 0 then
            awardItem:ShowCanUse(num);
        end
        local click_call = function(go, x, y)
            if awardItem.iscanusenum then
                MountCtrl:GetInstance():RequestTrainAttr(awardItem.db_id, self.currentPanel);
            else
                awardItem:ShowTips();
            end
        end
        self.danItems[i] = awardItem;
        AddClickEvent(awardItem.gameObject, click_call);

        if trainTab[itemId] then
            awardItem:SetNumText(trainTab[itemId]);
        end
    end


end

function VisionPanel:InitItemList()
    self.itemList = {};
    local item = AwardItem(self.MatContainer.transform);
    self.itemList[1] = item;

    item = AwardItem(self.MatContainer.transform);
    self.itemList[2] = item;

    item = AwardItem(self.MatContainer.transform);
    self.itemList[3] = item;
end

function VisionPanel:ClearItems()
    if self.itemList then
        for k, v in pairs(self.itemList) do
            v:destroy();
        end
    end
    self.itemList = {};
end

function VisionPanel:UpdateItems(itemTab)
    itemTab = itemTab or self.WING_ENUM;
    local item = self.itemList[1];
    item:SetData(itemTab.MAT_1, 0);
    local num = BagModel:GetInstance():GetItemNumByItemID(itemTab.MAT_1);
    item:UpdateNum0(num);
    item:SetIsSelected(false);
    item = self.itemList[2];
    item:SetData(itemTab.MAT_2, 0);
    local num1 = BagModel:GetInstance():GetItemNumByItemID(itemTab.MAT_2);
    item:UpdateNum0(num1);
    item:SetIsSelected(false);
    item = self.itemList[3];
    item:SetData(itemTab.MAT_3, 0);
    local num2 = BagModel:GetInstance():GetItemNumByItemID(itemTab.MAT_3);
    item:UpdateNum0(num2);
    item:SetIsSelected(false);
    if num > 0 then
        self.itemList[1]:SetIsSelected(true);
        self.currentItem = itemTab.MAT_1;
    elseif num1 > 0 then
        self.itemList[2]:SetIsSelected(true);
        self.currentItem = itemTab.MAT_2;
    elseif num2 > 0 then
        self.itemList[3]:SetIsSelected(true);
        self.currentItem = itemTab.MAT_3;
    else
        self.currentItem = itemTab.MAT_1;
        self.itemList[1]:SetIsSelected(true);
    end
    if num > 0 or num1 > 0 or num2 > 0 then
        self:SetBtnState(true);
    else
        self:SetBtnState(false);
    end
end

function VisionPanel:RefreshItemNum(itemTab)
    local num = BagModel:GetInstance():GetItemNumByItemID(itemTab.MAT_1);
    if self.itemList[1] then
        self.itemList[1]:UpdateNum0(num);
    end
    local num2 = BagModel:GetInstance():GetItemNumByItemID(itemTab.MAT_2);
    if self.itemList[2] then
        self.itemList[2]:UpdateNum0(num2);
    end
    local num3 = BagModel:GetInstance():GetItemNumByItemID(itemTab.MAT_3);
    if self.itemList[3] then
        self.itemList[3]:UpdateNum0(num3);
    end

    if num > 0 or num2 > 0 or num3 > 0 then
        self.upgradeBtn_red:SetRedDotParam(true)
    else
        self.upgradeBtn_red:SetRedDotParam(false)
    end
end

local lastX = 0;
function VisionPanel:AddEvent()

    local function callBack (index)
        lua_panelMgr:GetPanelOrCreate(WingHuaXingPanel):Open((tonumber(self.currentPanel) - 1));
    end
    AddClickEvent(self.huaxingBtn.gameObject, callBack);

    local trainCallBack = function(data)
        self:UpdateData(data);
    end

    self.events[#self.events + 1] = GlobalEvent:AddListener(MountEvent.MOUNT_INFO_TRAIN_DATA, trainCallBack)

    AddValueChange(self.hideTog.gameObject, handler(self, self.HandleTogChange));

    --[[local call_back1 = function(target, x, y)
        if lastX == 0 then
            lastX = x;
            return ;
        end
        local x1 = x - lastX;

        self.modelView.transform:Rotate(0, -x1, 0);

        lastX = x;
    end

    AddDragEvent(self.wingView.gameObject, call_back1);

    local call_back2 = function(target, x, y)
        lastX = 0;
    end
    AddDragEndEvent(self.wingView.gameObject, call_back2);--]]

    AddClickEvent(self.upgradeBtn.gameObject, handler(self, self.HandleBtnClick));

    local call_back = function(target, x, y)

        for i = 1, #self.itemList, 1 do
            if self.itemList[i].gameObject == target and self.itemList[i]:GetIsSelected() then
                self.itemList[i]:ShowTips();
                break ;
            end
        end

        for i = 1, #self.itemList, 1 do
            self.itemList[i]:SetIsSelected(false);
        end

        if target == self.itemList[1].gameObject then
            self.currentItem = self.currentEnum.MAT_1;
            self.itemList[1]:SetIsSelected(true);
            self.itemIndex = 1
        elseif target == self.itemList[2].gameObject then
            self.currentItem = self.currentEnum.MAT_2;
            self.itemList[2]:SetIsSelected(true);
            self.itemIndex = 2
        elseif target == self.itemList[3].gameObject then
            self.currentItem = self.currentEnum.MAT_3;
            self.itemList[3]:SetIsSelected(true);
            self.itemIndex = 3
        else
            self.currentItem = self.currentEnum.MAT_1;
            self.itemList[1]:SetIsSelected(true);
            self.itemIndex = 1
        end
        self:RefreshBtn()

    end

    for i = 1, #self.itemList, 1 do
        AddClickEvent(self.itemList[i].gameObject, call_back);
        --self.itemList[i]:SetIsSelected(false);
    end

    local changeFigure = function()
        self:InitModelView();
    end

    AddEventListenerInTab(MountEvent.MOUNT_CHANGE_FIGURE, changeFigure, self.events);

    local huaxingOpenCallback = function()
        SetGameObjectActive(self.wingCon, false);
    end
    AddEventListenerInTab(MountEvent.HUAXING_OPEN, huaxingOpenCallback, self.events)
    local huaxingCloseCallback = function()
        SetGameObjectActive(self.wingCon, true);
    end
    AddEventListenerInTab(MountEvent.HUAXING_CLOSE, huaxingCloseCallback, self.events);

    local updateNumCallBack = function()
        GlobalSchedule.StartFunOnce(handler(self, self.UpdateReddot), 0.1);

        if not self.itemList then
            return ;
        end
        local flag = false
        for k, v in pairs(self.itemList) do
            local awardItem = v;
            local num = BagModel:GetInstance():GetItemNumByItemID(v.db_id);
            awardItem:UpdateNum0(num);
            if num > 0 then
                flag = true;
            end
        end
        self:SetBtnState(flag);
    end
    AddEventListenerInTab(BagEvent.UpdateGoods, updateNumCallBack, self.events);

    --  穿戴成默认的
    local function call_back()
        local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        if self.currentPanel == enum.TRAIN.TRAIN_WING then
            local id = mainrole_data.gender == 1 and 21000 or 22000;
            MountCtrl:GetInstance():RequestMorph(enum.TRAIN.TRAIN_WING, id);
        elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
            local id = 30000;
            MountCtrl:GetInstance():RequestMorph(enum.TRAIN.TRAIN_TALIS, id);
        elseif self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
            local id  = 40000 + mainrole_data.gender * 1000;
            MountCtrl:GetInstance():RequestMorph(enum.TRAIN.TRAIN_WEAPON, id);
        else
            print2("error")
        end
    end
   AddClickEvent(self.wear_btn.gameObject, call_back)

end
VisionPanel.isAutoSetTog = false;
function VisionPanel:HandleTogChange(go, bool)
    --if not self.isAutoSetTog then
    --    if bool then
    --        MountCtrl:GetInstance():RequestMorph(self.currentPanel, 0);
    --    else
    --        MountCtrl:GetInstance():RequestMorph(self.currentPanel, self.currentModelID);
    --    end
    --end

    if self.isAutoSetTog then

    else

        if bool then
            MountCtrl:GetInstance():RequestMorph(self.currentPanel, 0);
        else
            MountCtrl:GetInstance():RequestMorph(self.currentPanel, self.defaultID);
        end
        --local mainrole_data = RoleInfoModel:GetInstance():GetMainRoleData()
        --local t = {}
        --t.model = 0;
        --t.skin = 0
        --if bool then
        --    if mainrole_data and mainrole_data.figure then
        --        if self.currentPanel == enum.TRAIN.TRAIN_WING then
        --            self.model:SetMorphWingId(mainrole_data.figure.wing and mainrole_data.figure.wing.model or 0);
        --            mainrole_data:ChangeData("figure.wing", t)
        --        elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
        --            self.model:SetMorphWingId(mainrole_data.figure.talis and mainrole_data.figure.talis.model or 0);
        --            mainrole_data:ChangeData("figure.talis", t)
        --        elseif self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
        --            self.model:SetMorphWingId(mainrole_data.figure.weapon and mainrole_data.figure.weapon.model or 0);
        --            mainrole_data:ChangeData("figure.weapon", t)
        --        end
        --    end
        --else
        --    if self.currentPanel == enum.TRAIN.TRAIN_WING then
        --        if mainrole_data then
        --            t.model = self.model.morph_wing_id;
        --            t.skin = 0
        --            mainrole_data:ChangeData("figure.wing", t)
        --        end
        --    elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
        --        if mainrole_data then
        --            t.model = self.model.morph_talis_id;
        --            t.skin = 0
        --            mainrole_data:ChangeData("figure.talis", t)
        --        end
        --    elseif self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
        --        if mainrole_data then
        --            t.model = self.model.morph_weapon_id;
        --            t.skin = 0
        --            mainrole_data:ChangeData("figure.weapon", t)
        --        end
        --    end
        --
        --end
    end

end

local isAuto = false;
--升级
function VisionPanel:HandleBtnClick(target, x, y)
    if not self.upgradeBtn.enabled then
        self.upgradeTxt.text = "Max Lvl";
        return ;
    end
  --[[  local itemTab;
    if self.currentPanel == enum.TRAIN.TRAIN_WING then
        itemTab = VisionPanel.WING_ENUM;
    elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
        itemTab = VisionPanel.FABAO_ENUM;
    else
        itemTab = VisionPanel.WEAPON_ENUM;
    end

    local num = BagModel:GetInstance():GetItemNumByItemID(itemTab.MAT_1);
    if self.itemList[1] then
        self.itemList[1]:UpdateNum0(num);
    end
    local num2 = BagModel:GetInstance():GetItemNumByItemID(itemTab.MAT_2);
    if self.itemList[2] then
        self.itemList[2]:UpdateNum0(num2);
    end
    local num3 = BagModel:GetInstance():GetItemNumByItemID(itemTab.MAT_3);
    if self.itemList[3] then
        self.itemList[3]:UpdateNum0(num3);
    end

    if not (num > 0 or num2 > 0 or num3 > 0) then
        Notify.ShowText("材料数量不足");
        print2("材料不足");
        return ;
    end
    --]]

    local num = BagModel:GetInstance():GetItemNumByItemID(self.currentItem);
    if num == 0 then
        local config = self.itemList[self.itemIndex]:GetConfig()
        Notify.ShowText(config.name.."Not enough");
        return ;
    end

    if self.currentItem then
        isAuto = not isAuto;
        if not isAuto then
            self.upgradeTxt.text = "Upgrade";
            return ;
        else
            self.upgradeTxt.text = "Cancel";
        end

        local num = BagModel:GetInstance():GetItemNumByItemID(self.currentItem);
        if num == 0 then
            Notify.ShowText("MaterialNot enough");
            return ;
        end
    else
        Notify.ShowText("你No one.选MedUpgrade Material");
        return
    end

    if self.currentPanel == enum.TRAIN.TRAIN_WING then
        MountCtrl:GetInstance():RequestTrainUpgrade(enum.TRAIN.TRAIN_WING, self.currentItem);
    elseif self.currentPanel == enum.TRAIN.TRAIN_WEAPON then
        --神兵
        MountCtrl:GetInstance():RequestTrainUpgrade(enum.TRAIN.TRAIN_WEAPON, self.currentItem);
    else
        --法宝
        MountCtrl:GetInstance():RequestTrainUpgrade(enum.TRAIN.TRAIN_TALIS, self.currentItem);
    end
end

function VisionPanel:Repeat()
    if not isAuto then
        return ;
    end
    if self.currentItem then
        local num = BagModel:GetInstance():GetItemNumByItemID(self.currentItem);
        if num == 0 then
            isAuto = false;
            self.upgradeTxt.text = "Upgrade";
            self.currentItem = nil;
            if self.currentItem == self.WING_ENUM.MAT_1 then
                self.itemList[1]:SetIsSelected(false);
            elseif self.currentItem == self.WING_ENUM.MAT_2 then
                self.itemList[2]:SetIsSelected(false);
            elseif self.currentItem == self.WING_ENUM.MAT_3 then
                self.itemList[3]:SetIsSelected(false);
            end
            return ;
        end
        if self.currentPanel == enum.TRAIN.TRAIN_WING then
            MountCtrl:GetInstance():RequestTrainUpgrade(enum.TRAIN.TRAIN_WING, self.currentItem);
        elseif self.currentPanel == enum.TRAIN.TRAIN_TALIS then
            MountCtrl:GetInstance():RequestTrainUpgrade(enum.TRAIN.TRAIN_TALIS, self.currentItem);
        else
            MountCtrl:GetInstance():RequestTrainUpgrade(enum.TRAIN.TRAIN_WEAPON, self.currentItem);
        end
    end
end

function VisionPanel:CheckLevel()
    if data.level >= 100 then
        self.upgradeTxt.text = "Max Lvl";
        return ;
    end
end

function VisionPanel:UpdateData(trainMsg)
    local data = trainMsg;
    self.lvText.text = "Lv." .. tostring(data.level);
    self:UpdateSkill(data.level);

    local tab = nil;
    local nextTab = nil;
    local propTab = nil;
    local nextpropTab = nil;

    local danAddedProp = self:GetDanData(trainMsg.type)

    if data.type == enum.TRAIN.TRAIN_WING then
        tab = Config.db_wing[data.level];
        local tab1 = Config.db_wing[data.level + 1];
        if tab and tab1 then
            self.exp_bar.fillAmount = data.exp / tab.exp;
            self.progressText.text = data.exp .. "/" .. tab.exp;

            nextTab = Config.db_wing[data.level + 1];
            self.PropItems:UpdateValuesMount(tab, nextTab, danAddedProp)

            propTab = String2Table(tab.attrs);
            table.sort(propTab, PropCompareFun);

            if nextTab then
                nextpropTab = String2Table(nextTab.attrs);
                table.sort(nextpropTab, PropCompareFun);

                self.zhanliItems:UpdateZhanli(GetPowerByConfigList(propTab), GetPowerByConfigList(nextpropTab) - GetPowerByConfigList(propTab));
                --self.zhanliItems:UpdateZhanli(tab.power, (nextTab.power - tab.power));
            end
            --if nextTab then
            --    self.zhanliUp.text = tostring(nextTab.power - tab.power);
            --end
            self.upgradeBtn.enabled = true;
        else
            self.upgradeTxt.text = "Max Lvl";
            self.upgradeBtn.enabled = false;
            self.progressText.text = 0 .. "/" .. tab.exp;
            self.exp_bar.fillAmount = 0;
        end
    elseif data.type == enum.TRAIN.TRAIN_TALIS then
        tab = Config.db_talis[data.level];
        local tab1 = Config.db_talis[data.level + 1];
        if tab and tab1 then
            self.exp_bar.fillAmount = data.exp / tab.exp;
            self.progressText.text = data.exp .. "/" .. tab.exp;

            nextTab = Config.db_talis[data.level + 1];
            self.PropItems:UpdateValuesMount(tab, nextTab, danAddedProp)

            propTab = String2Table(tab.attrs);
            table.sort(propTab, PropCompareFun);

            if nextTab then
                nextpropTab = String2Table(nextTab.attrs);
                table.sort(nextpropTab, PropCompareFun);

                self.zhanliItems:UpdateZhanli(GetPowerByConfigList(propTab), GetPowerByConfigList(nextpropTab) - GetPowerByConfigList(propTab));
                --self.zhanliItems:UpdateZhanli(tab.power, (nextTab.power - tab.power));
            end
            --if nextTab then
            --    self.zhanliItems:UpdateZhanli(tab.power, (nextTab.power - tab.power))
            --end
            self.upgradeBtn.enabled = true;
        else
            self.upgradeTxt.text = "Max Lvl";
            self.upgradeBtn.enabled = false;
            self.progressText.text = 0 .. "/" .. tab.exp;
            self.exp_bar.fillAmount = 0;
            --if nextTab then
            --    self.zhanliUp.text = tostring(nextTab.power - tab.power);
            --end
        end
    elseif data.type == enum.TRAIN.TRAIN_WEAPON then
        tab = Config.db_weapon[data.level];
        local tab1 = Config.db_weapon[data.level + 1];
        if tab and tab1 then
            self.exp_bar.fillAmount = data.exp / tab.exp;
            self.progressText.text = data.exp .. "/" .. tab.exp;

            nextTab = Config.db_weapon[data.level + 1];
            self.PropItems:UpdateValuesMount(tab, nextTab, danAddedProp)

            propTab = String2Table(tab.attrs);
            table.sort(propTab, PropCompareFun);

            if nextTab then
                nextpropTab = String2Table(nextTab.attrs);
                table.sort(nextpropTab, PropCompareFun);

                self.zhanliItems:UpdateZhanli(GetPowerByConfigList(propTab), GetPowerByConfigList(nextpropTab) - GetPowerByConfigList(propTab));
                --self.zhanliItems:UpdateZhanli(tab.power, (nextTab.power - tab.power));
            end
            --if nextTab then
            --    self.zhanliItems:UpdateZhanli(tab.power, (nextTab.power - tab.power))
            --end
            self.upgradeBtn.enabled = true;
        else
            self.upgradeTxt.text = "Max Lvl";
            self.upgradeBtn.enabled = false;
            self.progressText.text = 0 .. "/" .. tab.exp;
            self.exp_bar.fillAmount = 0;
            --if nextTab then
            --    self.zhanliUp.text = tostring(nextTab.power - tab.power);
            --end
        end
    end

    self:RefreshItemNum(self.currentEnum);

    self.schedule = GlobalSchedule.StartFunOnce(handler(self, self.Repeat), 0.2);
end

function VisionPanel:UpdateSkill(currentLv)

    local skills = RoleInfoModel:GetInstance().skillSystemTab[self.currentPanel];
    for i = 1, #self.skillicons do
        RemoveClickEvent(self.skillicons[i].gameObject);
    end
    if skills then
        for i = 1, #skills do
            local skilltab = skills[i];-- {system = 2, id = 1, type = [[{level,1}]], sort = 400100},
            local leveltab = String2Table(skilltab.type);
            if leveltab and #leveltab > 1 then
                local level = leveltab[2];
                local child = GetChild(self.skillicons[i] , "skill_level_text")
                if currentLv >= level then
                    SetGameObjectActive(child, false);
                    ShaderManager:GetInstance():SetImageNormal(self.skillicons[i]);
                else
                    local childText = GetText(child);
                    childText.text = "Lv." .. level;
                    ShaderManager:GetInstance():SetImageGray(self.skillicons[i]);
                end
            end
            AddClickEvent(self.skillicons[i].gameObject, handler(self, self.HandleSkillClick, skilltab));
        end
    end
end

function VisionPanel:HandleSkillClick(go, x, y, skillTab)
    --print2(skillTab.skillid);

    local skillID = skillTab.skillid;
    local skillConfig = Config.db_skill[skillID];
    if skillConfig then
        local tipsPanel = lua_panelMgr:GetPanelOrCreate(TipsSkillPanel)
        tipsPanel:Open();
        tipsPanel:SetId(skillConfig.id, go.transform);
    end
end

function VisionPanel:CloseCallBack()
    if self.huaxing then
        self.huaxing:destroy()
        self.huaxing = nil
    end
end

function VisionPanel:ClearModelView()
    if self.modelView then
        self.modelView:destroy();
    end
end

function VisionPanel:SwitchCallBack(index)
    self.tabIndex = index;
    if not self.is_loaded then
        return ;
    end

    --if self.child_node then
    --    self.child_node:SetVisible(false)
    --end
    --按钮文本重置
    isAuto = false;
    self.upgradeTxt.text = "Upgrade";
    --print2(self);
    --print2(enum.TRAIN.TRAIN_WING);
    --print2(Table2String(enum.TRAIN));
    if index == 1 then
        MountCtrl:GetInstance():RequestTrainInfo(enum.TRAIN.TRAIN_WING);
        self.isRequestWing = true;
        --end

        self.currentPanel = enum.TRAIN.TRAIN_WING;
        self.currentEnum = VisionPanel.WING_ENUM;
        --self:InitItemList();
        self:UpdateItems(self.currentEnum);
        self:InitModelView();
        self:InitDan();
        self:InitSkills();
        lua_resMgr:SetImageTexture(self, self.name_text, self.image_ab, "vision_title_2", false);
        --self.currentItem = self.currentEnum.MAT_1;
    elseif index == 2 then
        MountCtrl:GetInstance():RequestTrainInfo(enum.TRAIN.TRAIN_TALIS);
        self.isRequestTails = true;
        --end

        self.currentPanel = enum.TRAIN.TRAIN_TALIS;
        self.currentEnum = VisionPanel.FABAO_ENUM;
        --self:InitItemList();
        self:UpdateItems(self.currentEnum);
        self:InitModelView();
        self:InitDan();
        self:InitSkills();
        lua_resMgr:SetImageTexture(self, self.name_text, self.image_ab, "vision_title_3", false);
        --self.currentItem = self.currentEnum.MAT_1;
    elseif index == 3 then
        MountCtrl:GetInstance():RequestTrainInfo(enum.TRAIN.TRAIN_WEAPON);
        self.isRequestTails = true;

        self.currentPanel = enum.TRAIN.TRAIN_WEAPON;
        self.currentEnum = VisionPanel.WEAPON_ENUM;
        --self:InitItemList();
        self:UpdateItems(self.currentEnum);
        self:InitModelView();
        self:InitDan();
        self:InitSkills();
        lua_resMgr:SetImageTexture(self, self.name_text, self.image_ab, "vision_title_4", false);
        --self.currentItem = self.currentEnum.MAT_1;
    else
        print2(index);

    end
    self:UpdateReddot();
end

function VisionPanel:GetDanData(type)
    local danAddedProp = {};
    local configTab = nil;
    if type == enum.TRAIN.TRAIN_TALIS then
        configTab = Config.db_talis_train;
    elseif type == enum.TRAIN.TRAIN_WEAPON then
        configTab = Config.db_weapon_train;
    elseif type == enum.TRAIN.TRAIN_WING then
        configTab = Config.db_wing_train;
    end

    if self.model.visionData[type] and self.model.visionData[type].train and configTab then
        local train = self.model.visionData[type].train;
        for k, v in pairs(train) do
            local trainTab = configTab[k];
            if trainTab then
                local attrTabs = String2Table(trainTab.attrs);
                for a, attrTab in pairs(attrTabs) do
                    local k1 = attrTab[1]
                    local v1 = attrTab[2];
                    danAddedProp[k1] = danAddedProp[k1] or 0;
                    danAddedProp[k1] = danAddedProp[k1] + v1 * v;

                    if self.danItems then
                        for i = 1, #self.danItems do
                            if k == self.danItems[i].db_id then
                                self.danItems[i]:SetNumText(v);
                            end
                            local num = BagModel:GetInstance():GetItemNumByItemID(self.danItems[i].db_id);
                            if num > 0 then
                                self.danItems[i]:ShowCanUse(num);
                            else
                                self.danItems[i]:HideCanUse();
                            end
                        end
                    end
                end
            end
        end
    end

    return danAddedProp;
end

function VisionPanel:UpdateReddot()
    if not self.huaxingBtn_reddot then
        return ;
    end
    if MountModel:GetInstance():GetReddotState(self.currentPanel, 2) then
        self.huaxingBtn_reddot:SetRedDotParam(true);
    else
        self.huaxingBtn_reddot:SetRedDotParam(false);
    end
end

function VisionPanel:SetBtnState(bool)
    --SetButtonEnable(self.upgradeBtn , bool);
    --self.upgradeBtn.interactable = toBool(bool);
end

function VisionPanel:RefreshBtn()
    if not self.upgradeBtn.enabled then
        self.upgradeTxt.text = "Max Lvl";
        return
    else
        self.upgradeTxt.text = "Upgrade";
    end
end