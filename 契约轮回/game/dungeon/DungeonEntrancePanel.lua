---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/11/19 17:33
---
DungeonEntrancePanel = DungeonEntrancePanel or class("DungeonEntrancePanel", WindowPanel)
local this = DungeonEntrancePanel

local ConfigLanguage = require('game.config.language.CnLanguage');

function DungeonEntrancePanel:ctor(parent_node, layer)
    self.abName = "dungeon"
    self.image_ab = "dungeon_image";
    self.assetName = "DungeonEntrancePanel"
    self.layer = "UI"
    self.panel_type = 2;
    self.events = {};
    self.selectedIndex = 1;
	self.model = DungeonModel:GetInstance()
end

function DungeonEntrancePanel:dctor()
    if self.events then
        GlobalEvent:RemoveTabListener(self.events)
        self.events = {}
    end

    destroyTab(self.items);

    if self.expentrancepanel then
        self.expentrancepanel:destroy();
    end
    self.expentrancepanel = nil;

    if self.goldentrancepanel then
        self.goldentrancepanel:destroy();
    end
    self.goldentrancepanel = nil;

    if self.godsPanel then
        self.godsPanel:destroy()
    end
    self.godsPanel = nil

    if self.magictowerpanel then
        self.magictowerpanel:destroy();
    end
    self.magictowerpanel = nil;

    if self.equipentrancepanel then
        self.equipentrancepanel:destroy();
    end
    self.equipentrancepanel = nil;

    if self.advanceentrancepanel then
        self.advanceentrancepanel:destroy();
    end
    self.advanceentrancepanel = nil;

    if self.petentrancepanel then
        self.petentrancepanel:destroy();
    end
    self.petentrancepanel = nil;

    if self.stigmasPanel then
        self.stigmasPanel:destroy();
    end
    self.stigmasPanel = nil;

    GlobalEvent:RemoveTabListener(self.events);
end

function DungeonEntrancePanel:Open(tabIndex, toggle_id, bossid)
    WindowPanel.Open(self)
    tabIndex = tabIndex or 1;
    self.default_table_index = tabIndex;
    self.default_toggle_index = toggle_id;
    self.default_boss_id = bossid;
end

function DungeonEntrancePanel:LoadCallBack()
    self.nodes = {
        --"des/deslevel","des/descontent","left/left_text","togs/tog_1","countdown/countdowntext","countdown","consume/entrance_consume_btn",
        --"left/entrance_left_btn","des/award_con/award_item_bg","consume/consume_text","des","enter_btn","des/award_con","togs/tog_2",
    }
    self:GetChildren(self.nodes)

    SetLocalPosition(self.transform, 0, 0, 0);

    self:InitUI();
    self:AddEvent();

    self:SetTileTextImage("dungeon_image", "dungeon_entrance_title");
-- 打开界面请求数据  为了toggle 上的红点显示
    local level = RoleInfoModel:GetInstance():GetMainRoleLevel() or 1;
    local dungeon_type = enum.SCENE_STYPE.SCENE_STYPE_DUNGE_GOD
    if tonumber(GetSysOpenDataById("150@13")) <= level then
        DungeonCtrl:GetInstance():RequestDungeonPanel(dungeon_type);
    end
	local i = 1  -- 获取有多少波数
	while Config.db_dunge_wave[30601 .."@".. i] do
		i = i +1
	end
	self.model.maxWave = i - 1


    self:UpdateReddot();

    -- -- -- 设置红点类型 默认都是普通红点。需要数字红点另外设置
    -- self:SetIndexSetRedDotType(1,RedDot.RedDotType.Num)

    -- -- -- 设置右边栏红点，第一个参数是右边栏id，第二个参数：如果是普通红点，填bool；如果是数字红点，填number
    -- self:SetIndexRedDotParam(1,100)

    -- -- -- 设置toggle红点，第一个参数是右边栏id，第二个参数toggle id，第三个参数：如果是普通红点，填bool；如果是数字红点，填number
    -- self:SetToggleRedDotParam(1,1,true)
    -- self:SetToggleRedDotParam(1,2,true)
end

function DungeonEntrancePanel:InitUI()

end

function DungeonEntrancePanel:OpenCallBack()
    self:SetToggleGroupPosition(-18, 215)
end

function DungeonEntrancePanel:AddEvent()
    local function call_back()
        self:Close()
    end
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(DungeonEvent.ENTER_DUNGEON_SCENE, call_back);

    AddEventListenerInTab(DungeonEvent.UpdateReddot, handler(self, self.UpdateReddot), self.events);


end

-- function DungeonEntrancePanel:UpdateDungeon(id, data)
--     if self.selectedIndex == 1 then
--         if id == 11004 or id == 11008 then
--             if self.view then
--                 self.view:UpdateData(id, data);
--             end
--         end
--     end
-- end

-- function DungeonEntrancePanel:UpdateDungeonInfo(id, data)
--     if self.selectedIndex == 1 then
--         if id == 11004 or id == 11008 then
--             if self.view then
--                 self.view:UpdateInfo(id, data);
--             end
--         end
--     end
-- end

function DungeonEntrancePanel:CheckTest()
    return false
end

function DungeonEntrancePanel:SwitchCallBack(index, toggle_id, update_toggle)
    if self.child_node then
        self.child_node:SetVisible(false)
    end
    self.view = nil

    if index == 1 then
        if toggle_id == 1 then
            if not self.magictowerpanel then
                self.magictowerpanel = MagicTowerPanel(self.child_transform, "UI", 1);
            end
            self.view = self.magictowerpanel
        elseif toggle_id == 2 then
            if not self.expentrancepanel then
                self.expentrancepanel = ExpEntrancePanel(self.child_transform, "UI", 1);
            end
            self.view = self.expentrancepanel
        elseif toggle_id == 3 then
            if not self.advanceentrancepanel then
                self.advanceentrancepanel = AdvanceEntrancePanel(self.child_transform, "UI", 1);
            end
            self.view = self.advanceentrancepanel
        elseif toggle_id == 4 then
            if not self.goldentrancepanel then
                self.goldentrancepanel = GoldEntrancePanel(self.child_transform, "UI", 1);
            end
            self.view = self.goldentrancepanel
        elseif toggle_id == 5 then
            if not self.stigmasPanel then
                self.stigmasPanel = StigmasPanel(self.child_transform, "UI", 1);
            end
            self.view = self.stigmasPanel
        elseif toggle_id == 6 then
            if not self.godsPanel then
                self.godsPanel = GodsPanel(self.child_transform, "UI", 1);
            end
            self.view = self.godsPanel
        end

        --if update_toggle then
        --    local data = {
        --        { id = 1, text = "魔法塔" },
        --        { id = 2, text = "经验试炼" },
        --        { id = 3, text = "金币副本" },
        --    }
        --    self:SetToggleGroup(data, toggle_id)
        --end
    elseif index == 2 then
        if toggle_id == 1 then
            if not self.equipentrancepanel then
                self.equipentrancepanel = EquipEntrancePanel(self.child_transform, "UI");
            end
            self.equipentrancepanel:SetData(1, self.default_boss_id)
            self.view = self.equipentrancepanel
        elseif toggle_id == 2 then
            --[[if not self.petentrancepanel then
                self.petentrancepanel = PetEntrancePanel(self.child_transform, "UI");
            end--]]
            if not self.equipentrancepanel then
                self.equipentrancepanel = EquipEntrancePanel(self.child_transform, "UI");
            end
            self.equipentrancepanel:SetData(2, self.default_boss_id)
            self.view = self.equipentrancepanel
        end

        local tab = DungeonModel:GetInstance().red_dot_list;
        if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_EQUIP] then
            self:SetToggleRedDotParam(2, 1, true);
        else
            self:SetToggleRedDotParam(2, 1, false);
        end
        if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_PET] then
            self:SetToggleRedDotParam(2, 2, true);
        else
            self:SetToggleRedDotParam(2, 2, false);
        end
        --if update_toggle then
        --    local data = {
        --        { id = 1, text = "装备副本" },
        --    }
        --    self:SetToggleGroup(data, toggle_id)
        --end
    elseif index == 3 then
        self.selectedIndex = 3;
    else
        print2(index);
    end
    self:PopUpChild(self.view)
end

function DungeonEntrancePanel:UpdateReddot()
    local tab = DungeonModel:GetInstance().red_dot_list;

    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MAGICTOWER] or tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_EXP] or tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_COIN] or tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MOUNT]
    or tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_SOUL]  then
        self:SetIndexRedDotParam(1, true);
    else
        self:SetIndexRedDotParam(1, false);
    end
    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_PET] or tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_EQUIP] then
        self:SetIndexRedDotParam(2, true)
    else
        self:SetIndexRedDotParam(2, false)
    end
    --装备本
    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_EQUIP] then
        self:SetToggleRedDotParam(2, 1, true);
    else
        self:SetToggleRedDotParam(2, 1, false);
    end
    --宠物本
    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_PET] then
        self:SetToggleRedDotParam(2, 2, true);
    else
        self:SetToggleRedDotParam(2, 2, false);
    end

    --魔法塔
    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MAGICTOWER] then
        self:SetToggleRedDotParam(1, 1, true);
    else
        self:SetToggleRedDotParam(1, 1, false);
    end
    --经验本
    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_EXP] then
        self:SetToggleRedDotParam(1, 2, true);
    else
        self:SetToggleRedDotParam(1, 2, false);
    end
    --进阶本
    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MOUNT] then
        self:SetToggleRedDotParam(1, 3, true);
    else
        self:SetToggleRedDotParam(1, 3, false);
    end
    --金币本
    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_COIN] then
        self:SetToggleRedDotParam(1, 4, true);
    else
        self:SetToggleRedDotParam(1, 4, false);
    end

    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_SOUL] then
        self:SetToggleRedDotParam(1, 5, true);
    else
        self:SetToggleRedDotParam(1, 5, false);
    end
    -- 神灵之路
    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_GOD] then
        self:SetToggleRedDotParam(1, 6, true);
    else
        self:SetToggleRedDotParam(1, 6, false);
    end
end