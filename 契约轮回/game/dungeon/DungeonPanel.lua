---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2018/10/10 10:53
---
DungeonPanel = DungeonPanel or class("DungeonPanel", WindowPanel)
local this = DungeonPanel
local ConfigLanguage = require('game.config.language.CnLanguage');
function DungeonPanel:ctor()
    self.abName = "dungeon";
    self.image_ab = "dungeon_image";
    self.assetName = "DungeonPanel"
    self.layer = "UI"
    self.panel_type = 2;
    self.model = DungeonModel.GetInstance()
    self.sel_idx = nil
    self.events = {};
    self.schedules = {};

    --self.sidebar_data = {
    --    { text = ConfigLanguage.Dungeon.WORLD_BOSS, id = 1, icon = "bag:bag_icon_bag_s", dark_icon = "bag:bag_icon_bag_n", },
    --    { text = ConfigLanguage.Dungeon.HOME, id = 2, icon = "bag:bag_icon_ware_s", dark_icon = "bag:bag_icon_ware_n", },
    --    { text = ConfigLanguage.Dungeon.WILD, id = 3, icon = "bag:bag_icon_ware_s", dark_icon = "bag:bag_icon_ware_n", },
    --    { text = ConfigLanguage.Dungeon.PERSONAL, id = 5, icon = "bag:bag_icon_ware_s", dark_icon = "bag:bag_icon_ware_n", },
    --    { text = ConfigLanguage.Dungeon.DROP_RECORD, id = 4, icon = "bag:bag_icon_ware_s", dark_icon = "bag:bag_icon_ware_n", },
    --}
end

function DungeonPanel:dctor()
    self.sel_idx = nil
    self.model = nil;
    GlobalEvent:RemoveTabListener(self.events);
    self:StopAllSchedules()
    if self.currentView then
        self.currentView:destroy();
    end

    if self.monster then
        self.monster:destroy();
    end
    destroyTab(self.fixDrops);
    self.fixDrops = nil;

    destroyTab(self.dropItems);
    self.dropItems = nil;

    self.valueTab = nil;
    self.labelTab = nil;
end

function DungeonPanel:OnDisable()
    if self.map_bg then
        self.map_bg.transform:SetParent(self.transform);
    end
end
function DungeonPanel:OnEnable()
    local parent = self.transform:Find("PanelBackgroundTwo(Clone)/img_bg_2");
    if parent then
        self.map_bg.transform:SetParent(parent.transform);
    end
end

function DungeonPanel:Open(tab_index, toggle_id, boss_id)
    --if tab_index == 1 then
    --    self.default_table_index = 1;
    --    --没有顶部toggle，为默认选中的boss的idx
    --    --self.default_toggle_index = toggle_id
    --else
    --
    --end
    if tab_index == 3 then
        --宠物
        if LoginModel:GetInstance():GetOpenTime() < 8 then
            Notify.ShowText("This function unlocks 8 days later")
            return
        end
    end
    self.default_table_index = tab_index or 1;
    boss_id = boss_id or 1
    if boss_id <= 20 then
        --顶部toggle Id
        if toggle_id == 13 then
            self.default_toggle_index = 4;
        else
            self.default_toggle_index = toggle_id
        end

    else

        self.selectedBossID = boss_id

        local boss = Config.db_boss[boss_id];

        if boss then
            if tab_index == 1 then
                if boss.type == 5 then
                    self.default_toggle_index = 4;
                else
                    self.default_toggle_index = boss.type;
                end
            elseif tab_index == 3 then
                if boss.type == 4 then
                    self.default_toggle_index = 1;
                end
            end
        end
        self.default_table_index = 1;
    end
    WindowPanel.Open(self)
end

function DungeonPanel:LoadCallBack()
    self.nodes = {
        "bossView/valueCon/heart", "bossView/valueCon/hit", "bossView/valueCon/def", "bossView/valueCon/dod", "bossView/labelCon/label_4", "bossView/labelCon/label_5",
        "bossView/labelCon/label_6", "awardCon/awardbg", "bossView/labelCon/label_3", "bossView", "awardCon", "dropBtn", "killlog", "bossInfo", "map_bg",
        "bossView/valueCon/attack", "bossView/valueCon/life", "bossView/labelCon/label_1", "awardCon/drops", "awardCon/icon_0", "bossCon", "bossView/labelCon/label_2",
        "staticCon", "staticCon/staticdrops",
        "killtip/tip_text", "killtip",

        "is_care",
    }
    self:GetChildren(self.nodes)

    SetLocalPosition(self.transform, 0, 0, 0)

    --self:SetTileText("副本");
    self:SetTileTextImage("dungeon_image", "boss_title");
    self:InitUI();

    self:AddEvent();

    lua_resMgr:SetImageTexture(self, self.map_bg, "iconasset/icon_big_bg_boss_bg", "boss_bg", false);
    SetLocalPositionY(self.map_bg.transform, 6)
    self:UpdateReddot();
    --self:SwitchCallBack(1, self.default_tog_index)
end

function DungeonPanel:InitUI()
    self.map_bg = GetImage(self.map_bg);
    --原来的的值
    self.valueTab = {}
    self.life = GetText(self.life);
    self.valueTab[2] = self.life;
    self.attack = GetText(self.attack);
    self.valueTab[1] = self.attack;
    self.def = GetText(self.def);
    self.valueTab[3] = self.def;
    self.dod = GetText(self.dod);
    self.valueTab[5] = self.dod;
    self.heart = GetText(self.heart);
    self.valueTab[4] = self.heart;
    self.hit = GetText(self.hit);
    self.valueTab[6] = self.hit;

    self.care = GetToggle(self.is_care);

    self.gridlayoutgroup = GetGridLayoutGroup(self.drops);

    --标签
    self.labelTab = {};
    for i = 1, 6, 1 do
        local name = "label_" .. i;
        self.labelTab[i] = GetText(self[name]);
        if i > 5 then
            self.labelTab[i].gameObject:SetActive(false);
            self.valueTab[i].gameObject:SetActive(false);
        else
            self.valueTab[i].text = "0";
        end
    end

    self.map_bg = GetImage(self.map_bg);

    local parent = self.transform:Find("PanelBackgroundTwo(Clone)/img_bg_2");
    if parent then
        self.map_bg.transform:SetParent(parent.transform);
    end

    self.dropBtn = GetButton(self.dropBtn);
    self.killlog = GetButton(self.killlog);
    self.bossInfo = GetButton(self.bossInfo);

end

function DungeonPanel:HaneleBossCare(data)
    if self.selectedIndex == 1 and self.selectedTog == 1 then
        if self.currentView:GetSelectedID() == data.id then
            self:SetIsCare(data.op == 1);
        end
    end
end

function DungeonPanel:DropCallBack(target, x, y)
    if self.awardCon then
        --and not self.awardbg.gameObject.activeSelf
        self.bossView.gameObject:SetActive(false);
        self.awardCon.gameObject:SetActive(true);

        if self.selectedIndex ~= 2 then
            SetGameObjectActive(self.killtip, false);
        end
    else
        print2("没有找到awardCon")
    end
    self.dropBtn.gameObject:SetActive(false);
    self.bossInfo.gameObject:SetActive(true);
    if self.selectedIndex == 1 then
        SetGameObjectActive(self.care.gameObject, true);
    end
    SetGameObjectActive(self.bossCon, false);
    if self.selectedIndex == 2 then
        SetGameObjectActive(self.staticCon, true);
    end

    SetGameObjectActive(self.killlog, true);
end

function DungeonPanel:BossInfoCallBack()
    if self.bossView then
        --and not self.bossView.gameObject.activeSelf
        self.bossView.gameObject:SetActive(true);
        self.awardCon.gameObject:SetActive(false);
        SetGameObjectActive(self.killtip, false);

    else
        print2("没有找到bossView")
    end
    SetGameObjectActive(self.care.gameObject, false);
    if self.currentView and self.currentView.assetName == "PersonalBossPanel" then
        SetGameObjectActive(self.killlog, false);
    else
        SetGameObjectActive(self.killlog, true);
    end
    self.dropBtn.gameObject:SetActive(true);
    self.bossInfo.gameObject:SetActive(false);
    SetGameObjectActive(self.bossCon, true);
    SetGameObjectActive(self.staticCon, false);


end

function DungeonPanel:BeastCallBack(bool)
    bool = toBool(bool);
    if not bool then
        self:BossInfoCallBack();
    end
    SetGameObjectActive(self.care, bool);
    SetGameObjectActive(self.staticCon, bool);
    SetGameObjectActive(self.bossView, bool);
    SetGameObjectActive(self.awardCon, bool);
    SetGameObjectActive(self.dropBtn, bool);
    SetGameObjectActive(self.bossInfo, bool)
    SetGameObjectActive(self.bossView, bool);
    SetGameObjectActive(self.killlog, bool);

end

function DungeonPanel:AddEvent()

    self.events[#self.events + 1] = GlobalEvent.AddEventListener(DungeonEvent.WORLD_BOSS_CARE, handler(self, self.HaneleBossCare));

    --local drop_call_back = function(target, x, y)
    --    if self.awardCon then
    --        --and not self.awardbg.gameObject.activeSelf
    --        self.bossView.gameObject:SetActive(false);
    --        self.awardCon.gameObject:SetActive(true);
    --
    --        if self.selectedIndex ~= 2 then
    --            SetGameObjectActive(self.killtip, false);
    --        end
    --    else
    --        print2("没有找到awardCon")
    --    end
    --    self.dropBtn.gameObject:SetActive(false);
    --    self.bossInfo.gameObject:SetActive(true);
    --    SetGameObjectActive(self.care.gameObject , true);
    --    SetGameObjectActive(self.bossCon, false);
    --    if self.selectedIndex == 2 then
    --        SetGameObjectActive(self.staticCon, true);
    --    end
    --end

    AddClickEvent(self.dropBtn.gameObject, handler(self, self.DropCallBack));

    local bossInfo_call_back = function(target, x, y)

    end

    AddClickEvent(self.bossInfo.gameObject, handler(self, self.BossInfoCallBack));

    local killlog_call_back = function(target, x, y)
        if self.currentView then
            local item = self.currentView.items[self.currentView.selectedItemIndex];
            if item then
                local bossTab = item.data;
                DungeonCtrl:GetInstance():RequestBossKill(bossTab.id);
            else
                Notify.ShowText("Boss is not found");
            end
        end
    end
    AddClickEvent(self.killlog.gameObject, killlog_call_back);

    --先隐藏一种吧
    self:DropCallBack();

    self.events[#self.events + 1] = GlobalEvent.AddEventListener(DungeonEvent.WORLD_BOSS_DROP, handler(self, self.HandleDungeonDrop));

    local function call_back()
        self:Close()
    end
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(DungeonEvent.ENTER_DUNGEON_SCENE, call_back);

    AddEventListenerInTab(EventName.ChangeSceneEnd, handler(self, self.Close), self.events);

    local care_call_back = function(target, bool)
        if not self.robotSetValue and self.selectedIndex == 1  then--and (self.selectedTog == 1 or self.selectedTog == 4)
            if bool then
                DungeonCtrl:GetInstance():RequestBossCare(self.currentView:GetSelectedBossType(), self.currentView:GetSelectedID(), 1);
            else
                DungeonCtrl:GetInstance():RequestBossCare(self.currentView:GetSelectedBossType(), self.currentView:GetSelectedID(), 2);
            end
        end
    end
    AddValueChange(self.care.gameObject, care_call_back);
    AddEventListenerInTab(DungeonEvent.UpdateReddot, handler(self, self.UpdateReddot), self.events);
end
DungeonPanel.robotSetValue = false;
function DungeonPanel:SetIsCare(bool)
    self.robotSetValue = true;
    bool = toBool(bool);
    self.care.isOn = bool;
    self.robotSetValue = false;
end

function DungeonPanel:RefreshProp(item)
    local bossTab = item.data;
    local monsterTab = Config.db_creep_attr[bossTab.id];
    self.valueTab[1].text = tostring(monsterTab.att);
    self.valueTab[2].text = tostring(monsterTab.hpmax);
    self.valueTab[3].text = tostring(monsterTab.def);
    self.valueTab[4].text = tostring(monsterTab.hit);
    self.valueTab[5].text = tostring(monsterTab.miss);
end

function DungeonPanel:InitModelView(item, isPet, index)
    self.isPet = isPet
    if item then
        local tab = item.data;
        local monsterTab = Config.db_creep[tab.id];
        local scale = 1
        if index then
            scale = tab.res_ratio
        else
            scale = Config.db_boss[tab.id].res_ratio
        end
        if self.monster then
            self.monster:destroy();
        end
        --self.monster = UIMonsterModel(self.bossCon, monsterTab.figure, handler(self, self.HandleMonsterLoaded));
        local config = {};
        --config.scale = { x = data.res_ratio, y = data.res_ratio, z = data.res_ratio};
        --config.rotate =  { x = 0, y = 135, z = 0};
        config.pos = { x = -1968, y = -218, z = 300 };
        config.far = 20;
        config.carmera_size = 4
        if self.isPet then
            config.scale = { x = tab.res_ratio, y = tab.res_ratio, z = tab.res_ratio};
            config.rotate = { x = 22, y = 170, z = -8 };
        else
            config.rotate = { x = 0, y = item.yRotate or 135, z = 0 };
            config.scale = { x = scale, y = scale, z = scale};
        end
        config.trans_offset = {x=48.6, y=78.8}
        config.trans_x = 750
        config.trans_y = 750

        self.monster = UIModelCommonCamera(self.bossCon, nil, monsterTab.figure);--data.icon
        self.monster:SetConfig(config)

        self:SetMoneyConLast(self.transform);
        --self.monster.res_ratio = tab.res_ratio;
        --self.monster.res_yRotate = item.yRotate
    else
        if self.monster then
            self.monster:destroy();
        end
        self.monster = nil;
    end
end

function DungeonPanel:HandleMonsterLoaded()
    SetLocalPosition(self.monster.transform, -1920, -70, 950)
    local v3 = self.monster.transform.localScale;
    if self.monster.res_ratio then
        SetLocalScale(self.monster.transform, self.monster.res_ratio, self.monster.res_ratio, self.monster.res_ratio);
    else
        SetLocalScale(self.monster.transform, 100, 100, 100);
    end
    if self.isPet then
        SetLocalRotation(self.monster.transform, 22, 170, -8);
    else
        SetLocalRotation(self.monster.transform, 0, self.monster.res_yRotate or 135, 0);
    end

    self.monster:AddAnimation({ "idle" }, false, nil, 0)

    self:SetMoneyConLast(self.transform);
end

function DungeonPanel:InitDrops(item)
    if self.dropItems then
        for k, v in pairs(self.dropItems) do
            v:destroy();
        end
    end
    self.dropItems = {};
    --local item = self.items[self.selectedItemIndex];
    if item then
        local tab = item.data;
        if tab then
            local dropsTab = String2Table(tab.show);
            for i = 1, #dropsTab, 1 do
                --local aitem = AwardItem(self.drops.transform);
                --self.dropItems[i] = aitem;
                --aitem:SetData(dropsTab[i], 0);
                --local num1 = BagModel:GetInstance():GetItemNumByItemID(dropsTab[i]);
                --aitem:UpdateNum(num1);
                --aitem:AddClickTips();
                local num1 = BagModel:GetInstance():GetItemNumByItemID(dropsTab[i]);
                local aitem = GoodsIconSettorTwo(self.drops.transform)
                local param = {}
                --param["model"] = self.model;
                param["item_id"] = dropsTab[i];
                --param["num"] = num1;
                param["can_click"] = true;
                param["bind"] = 2;
                param["size"] = { x = 80, y = 80 }
                aitem:SetIcon(param);
                self.dropItems[i] = aitem;
                --item.transform:SetParent(self.drops.transform);
                SetLocalScale(aitem.transform, 1, 1, 1);
            end
        end
    end
    self.icon_0.gameObject:SetActive(false);
end

function DungeonPanel:InitPersonalDrops(data)
    destroyTab(self.dropItems);
    self.dropItems = {};
    --local item = self.items[self.selectedItemIndex];
    local tab = data;
    if tab then
        local dropsTab = String2Table(tab.reward_show);
        for i = 1, #dropsTab, 1 do
            --local aitem = AwardItem(self.drops.transform);
            --self.dropItems[i] = aitem;
            --aitem:SetData(dropsTab[i], 0);
            --local num1 = BagModel:GetInstance():GetItemNumByItemID(dropsTab[i]);
            --aitem:UpdateNum(num1);
            --aitem:AddClickTips();
            --item.transform:SetParent(self.drops.transform);
            local aitem = GoodsIconSettorTwo(self.drops.transform)
            local param = {}
            param["item_id"] = dropsTab[i];
            param["can_click"] = true;
            param["size"] = { x = 80, y = 80 };
            param["bind"] = true;
            aitem:SetIcon(param);
            self.dropItems[i] = aitem;
            SetLocalScale(aitem.transform, 1, 1, 1);
        end
    end
    self.icon_0.gameObject:SetActive(false);
end

function DungeonPanel:InitFixDrops(data)
    destroyTab(self.fixDrops);
    self.fixDrops = {};

    local tab = data;
    if tab then
        local dropsTab = String2Table(tab.reward_fixed);
        if #dropsTab == 2 and _G.type(dropsTab[1]) ~= "table" then
            dropsTab = { dropsTab };
        end
        for i = 1, #dropsTab, 1 do
            local drop = dropsTab[i]
            local aitem = AwardItem(self.staticdrops.transform);
            self.fixDrops[i] = aitem;
            aitem:SetData(drop[1], drop[2]);
            --local num1 = BagModel:GetInstance():GetItemNumByItemID(drop[1]);
            --aitem:UpdateNum(num1);
            aitem:AddClickTips();
            --item.transform:SetParent(self.drops.transform);
            SetLocalScale(aitem.transform, 1, 1, 1);
        end
    end
end

function DungeonPanel:ShowKillTip(bool)
    SetGameObjectActive(self.killtip, toBool(bool));
end

function DungeonPanel:SetBG(item)
    local bossTab = item.data;
    lua_resMgr:SetImageTexture(self, self.map_bg, self.image_ab, "boss_bg", true, nil, false);
end

function DungeonPanel:HandleDungeonDrop(data)
    --if self.selectedIndex == 1 and self.selectedTog == 5 then
    --    self.currentView:RefreshData(data);
    --end
    if self.currentView and self.currentView.assetName == "DropLogPanel" then
        self.currentView:RefreshData(data.logs);
    end
end

function DungeonPanel:ShowWorldBossView()
    self.bossView.gameObject:SetActive(false);
    self.awardCon.gameObject:SetActive(true);
    self.dropBtn.gameObject:SetActive(false);
    self.bossInfo.gameObject:SetActive(true);
    self.bossCon.gameObject:SetActive(false);
    self.killlog.gameObject:SetActive(true);
    self.map_bg.gameObject:SetActive(true);
    SetGameObjectActive(self.staticCon, false);
    SetGameObjectActive(self.killtip, false);
    SetLocalPosition(self.awardCon.transform, 12.3, 102, 0);

    self.gridlayoutgroup.padding.top = 30;
    self.gridlayoutgroup.spacing = { x = 5.22, y = 10.51 };
end

function DungeonPanel:ShowHomeBossView()
    self.bossView.gameObject:SetActive(false);
    self.awardCon.gameObject:SetActive(true);
    self.dropBtn.gameObject:SetActive(false);
    self.bossInfo.gameObject:SetActive(true);
    self.bossCon.gameObject:SetActive(false);
    self.killlog.gameObject:SetActive(true);
    self.map_bg.gameObject:SetActive(true);
    SetGameObjectActive(self.staticCon, false);
    SetGameObjectActive(self.killtip, false);
    SetLocalPosition(self.awardCon.transform, 12.3, 102, 0);

    self.gridlayoutgroup.padding.top = 30;
    self.gridlayoutgroup.spacing = { x = 5.22, y = 10.51 };
end

function DungeonPanel:ShowSavageBossView()
    self.bossView.gameObject:SetActive(false);
    self.awardCon.gameObject:SetActive(true);
    self.dropBtn.gameObject:SetActive(false);
    self.bossInfo.gameObject:SetActive(true);
    self.bossCon.gameObject:SetActive(false);
    self.killlog.gameObject:SetActive(true);
    self.map_bg.gameObject:SetActive(true);
    SetGameObjectActive(self.staticCon, false);
    SetGameObjectActive(self.killtip, false);
    --SetLocalPosition(self.awardCon.transform, 12.3, 152, 0);
    SetLocalPosition(self.awardCon.transform, 12.3, 102, 0);
    self.gridlayoutgroup.padding.top = 30;
    self.gridlayoutgroup.spacing = { x = 5.22, y = 10.51 };
end

function DungeonPanel:ShowDropView()
    self.bossView.gameObject:SetActive(false);
    self.awardCon.gameObject:SetActive(false);
    self.dropBtn.gameObject:SetActive(false);
    self.bossInfo.gameObject:SetActive(false);
    self.bossCon.gameObject:SetActive(false);
    self.killlog.gameObject:SetActive(false);
    self.map_bg.gameObject:SetActive(false);
    SetGameObjectActive(self.staticCon, false);
    SetGameObjectActive(self.killtip, false);
    SetLocalPosition(self.awardCon.transform, 12.3, 152, 0);

    self.gridlayoutgroup.padding.top = 30;
    self.gridlayoutgroup.spacing = { x = 5.22, y = 10.51 };
end

function DungeonPanel:ShowPersonalBossView()
    self.bossView.gameObject:SetActive(false);
    self.awardCon.gameObject:SetActive(true);
    self.dropBtn.gameObject:SetActive(false);
    self.bossInfo.gameObject:SetActive(true);
    self.bossCon.gameObject:SetActive(false);
    self.killlog.gameObject:SetActive(false);
    self.map_bg.gameObject:SetActive(true);
    SetGameObjectActive(self.staticCon, true);
    SetGameObjectActive(self.killtip, false);
    --GridLayoutGroup g;

    self.gridlayoutgroup.padding.top = 0;
    self.gridlayoutgroup.spacing = { x = 0, y = 0 };
    SetLocalPosition(self.awardCon.transform, 12.3, 0, 0);
end

function DungeonPanel:ShowPetBossView()
    self.bossView.gameObject:SetActive(false);
    self.awardCon.gameObject:SetActive(true);
    self.dropBtn.gameObject:SetActive(false);
    self.bossInfo.gameObject:SetActive(true);
    self.bossCon.gameObject:SetActive(false);
    self.killlog.gameObject:SetActive(true);
    self.map_bg.gameObject:SetActive(true);
    SetGameObjectActive(self.staticCon, false);
    SetGameObjectActive(self.killtip, false);

    SetLocalPosition(self.awardCon.transform, 12.3, 102, 0);

    self.gridlayoutgroup.padding.top = 30;
    self.gridlayoutgroup.spacing = { x = 5.22, y = 10.51 };
end
--

--
--function DungeonPanel:ShowModel(bool)
--    bool = toBool(bool);
--    self.bossCon.gameObject:SetActive(bool);
--end

function DungeonPanel:StopAllSchedules()
    for i = 1, #self.schedules, 1 do
        GlobalSchedule:Stop(self.schedules[i]);
    end
    self.schedules = {};
end

function DungeonPanel:AfterOpen()
    DungeonPanel.super.AfterOpen(self);
    self.default_table_index = nil;
    self.default_toggle_index = nil;
    self.selectedBossID = nil;
end

function DungeonPanel:SwitchCallBack(index, toggle_id, update_toggle)
    if self.currentView then
        self.currentView:destroy();
    end
    self.currentView = nil

    if index == 1 then
        if toggle_id == 1 then
            self.currentView = WorldBossPanel(self.transform, self, self.selectedBossID);
            self.default_toggle_index = nil
            self:PopUpChild(self.currentView);
            self.selectedIndex = 1;
            self.selectedTog = toggle_id;
            self:ShowWorldBossView();
        elseif toggle_id == 2 then
            self.currentView = HomeBossPanel(self.transform, self, self.selectedBossID);
            self:PopUpChild(self.currentView);
            self.selectedTog = toggle_id;
            self.selectedIndex = 1;
            self:ShowHomeBossView()
        elseif toggle_id == 3 then
            self.currentView = SavageBossPanel(self.transform, self, self.selectedBossID);
            self:PopUpChild(self.currentView);
            self.selectedTog = toggle_id;
            self.selectedIndex = 1;
            self:ShowSavageBossView();
        elseif toggle_id == 4 then
            self.currentView = BeastIslandPanel(self.transform, self, self.selectedBossID);
            self:PopUpChild(self.currentView);
            self.selectedTog = toggle_id;
            self.selectedIndex = 1;
            self:ShowSavageBossView();

        elseif toggle_id == 5 then
            self.selectedIndex = 1;
            self.selectedTog = toggle_id;
            self.currentView = DungeonDropLogPanel(self.transform, "UI");
            self:ShowDropView();
            self.PopUpChild(self.currentView);
        end
    elseif index == 2 then
        if toggle_id == 1 then
            self.selectedIndex = 2
            self.selectedTog = 1;
            self.currentView = PersonalBossPanel(self.transform, self)
            self:PopUpChild(self.currentView)

            self:ShowPersonalBossView()
        elseif toggle_id == 2 then
            self.selectedIndex = 1;
            self.selectedTog = 4;
            self.currentView = DungeonDropLogPanel(self.transform, "UI");
            self:ShowDropView();
            self.PopUpChild(self.currentView);
        end
    elseif index == 3 then
        if toggle_id == 1 then
            self.selectedIndex = 3
            self.selectedTog = 1
            self.currentView = PetBossPanel(self.transform, self)
            self:ShowPetBossView()
            self.PopUpChild(self.currentView)
        elseif toggle_id == 2 then
            self.selectedIndex = 1;
            self.selectedTog = 4;
            self.currentView = DungeonDropLogPanel(self.transform, "UI");
            self.currentView:SetLogType(1)
            self:ShowDropView();
            self.PopUpChild(self.currentView);
        elseif toggle_id == 3 then
            self.selectedIndex = 3;
            self.selectedTog = 4;
            self.currentView = PetEggLogPanel(self.transform, "UI");
            self:ShowDropView();
            self.PopUpChild(self.currentView);
        end
    end
end

function DungeonPanel:UpdateReddot()
    local tab = DungeonModel:GetInstance().red_dot_list;
    --dump(tab)
    if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_ROLE_BOSS] then
        self:SetIndexRedDotParam(2, true);
        self:SetToggleRedDotParam(2, 1, true);
    else
        self:SetIndexRedDotParam(2, false);
        self:SetToggleRedDotParam(2, 1, false);
    end
    if tab[enum.SCENE_STYPE.SCENE_STYPE_BOSS_WORLD] then
        self:SetIndexRedDotParam(1, true);
        self:SetToggleRedDotParam(1, 1, true);
    else
        self:SetIndexRedDotParam(1, false);
        self:SetToggleRedDotParam(1, 1, false);
    end

    if tab[enum.BOSS_TYPE.BOSS_TYPE_BEAST] then
        self:SetIndexRedDotParam(1, true);
        if RoleInfoModel:GetInstance():GetMainRoleLevel() >= 350 then
            self:SetToggleRedDotParam(1, 4, true);
        else
            self:SetToggleRedDotParam(1, 4, false);
        end
    else
        self:SetIndexRedDotParam(1, false);
        self:SetToggleRedDotParam(1, 4, false);
    end

    if tab[enum.SCENE_STYPE.SCENE_STYPE_BOSS_PET] then
        self:SetIndexRedDotParam(3, true);
        self:SetToggleRedDotParam(3, 1, true);
    else
        self:SetIndexRedDotParam(3, false);
        self:SetToggleRedDotParam(3, 1, false);
    end

    ----金币本
    --if tab[enum.SCENE_STYPE.SCENE_STYPE_DUNGE_COIN] then
    --    self:SetToggleRedDotParam(1, 4, true);
    --else
    --    self:SetToggleRedDotParam(1, 4, false);
    --end
end

