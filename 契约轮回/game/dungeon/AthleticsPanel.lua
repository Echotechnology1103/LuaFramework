---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/11/19 17:33
---
AthleticsPanel = AthleticsPanel or class("AthleticsPanel", WindowPanel)
local this = AthleticsPanel

local ConfigLanguage = require('game.config.language.CnLanguage');

function AthleticsPanel:ctor(parent_node, layer)
    self.abName = "dungeon"
    self.image_ab = "dungeon_image";
    self.assetName = "AthleticsPanel"
    self.layer = "UI"
    self.panel_type = 2;
    self.events = {};
    self.selectedIndex = 1;
    self.is_hide_model_effect = false

end

function AthleticsPanel:dctor()
    if self.events then
        GlobalEvent:RemoveTabListener(self.events)
        self.events = {}
    end

    destroyTab(self.items);

    if self.meleepanel then
        self.meleepanel:destroy();
    end
    self.meleepanel = nil;

    if self.arenaPanel then
        self.arenaPanel:destroy();
    end
    self.arenaPanel = nil;

    if self.peakArenaPanel then
        self.peakArenaPanel:destroy();
    end
    self.peakArenaPanel = nil;

    if self.warriorPanel then
        self.warriorPanel:destroy();
    end
    self.warriorPanel = nil;

    if self.CompetePanel then
        self.CompetePanel:destroy();
    end
    self.CompetePanel = nil;


    GlobalEvent:RemoveTabListener(self.events);
end

function AthleticsPanel:Open(tabIndex, toggle_id, iscross, is_show_btn_cd)
    WindowPanel.Open(self)
    tabIndex = tabIndex or 1;
    self.default_table_index = tabIndex;
    self.default_toggle_index = toggle_id or 1;
    self.isCross = iscross;
    self.is_show_btn_cd = is_show_btn_cd
end

function AthleticsPanel:LoadCallBack()
    self.nodes = {
    }
    self:GetChildren(self.nodes)

    SetLocalPosition(self.transform, 0, 0, 0);

    self:InitUI();
    self:AddEvent();

    self:SetTileTextImage("dungeon_image", "dungeon_melee_title");

    self:SwitchCallBack(1, self.default_toggle_index, true);
    self:ArenaRedInfo()
end
function AthleticsPanel:UpdateRedDot()

end

function AthleticsPanel:InitUI()

end

function AthleticsPanel:OnEnable()
    if self.child_node then
        self.child_node:OnEnable()
    end
end

function AthleticsPanel:OnDisable()
    if self.child_node then
        self.child_node:OnDisable()
    end
end

function AthleticsPanel:AddEvent()
    local function call_back(sceneID)
        --local config = Config.db_scene[sceneID]
        --if not config then
        --print2("不存在场景配置" .. tostring(sceneID));
        --return
        --end
        --if config.type == enum.SCENE_TYPE.SCENE_TYPE_ACT and config.stype == enum.SCENE_STYPE.SCENE_STYPE_COMBAT1V1 then
        --return
        --end
        self:Close()
    end
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(DungeonEvent.ENTER_DUNGEON_SCENE, call_back);
    self.events[#self.events + 1] = GlobalEvent.AddEventListener(ArenaEvent.ArenaRedInfo, handler(self, self.ArenaRedInfo))
end

--竞技场红点
function AthleticsPanel:ArenaRedInfo()
    local model = ArenaModel:GetInstance()
    if model.isRankReward or model.isBigGodReward or model.isHightReward or model.isChallenge or model.isTopChallenge then
        self:SetToggleRedDotParam(1, 1, true);
    else
        self:SetToggleRedDotParam(1, 1, false);
    end

    if ActivityModel:GetInstance():GetActivity(10111) then
        self:SetToggleRedDotParam(1, 2, true);
    else
        self:SetToggleRedDotParam(1, 2, false);
    end

    if PeakArenaModel:GetInstance():GetRedPoint() then
        self:SetToggleRedDotParam(1, 4, true);
    else
        self:SetToggleRedDotParam(1, 4, false);
    end

    if ActivityModel:GetInstance():GetActivity(10231) then
        self:SetToggleRedDotParam(1, 3, true);
    else
        self:SetToggleRedDotParam(1, 3, false);
    end


    if CompeteModel:GetInstance():isRedPoint() then
        self:SetToggleRedDotParam(1, 5, true);
    else
        self:SetToggleRedDotParam(1, 5, false);
    end
end

function AthleticsPanel:CheckTest()
    return false
end

function AthleticsPanel:ShowToggleGroup(toggle_id, data)
    self:CreateToggleGroup();
    if self.toggle_group then
        self.toggle_group:SetData(data, toggle_id)
    end
end

function AthleticsPanel:SwitchCallBack(index, toggle_id, update_toggle)
    if self.child_node then
        self.child_node:SetVisible(false)
    end
    self.view = nil
    --self:SetTabIndex(1,true);

    if index == 1 then
        toggle_id = 1
        if toggle_id == 2 then
            if not self.meleepanel then
                self.meleepanel = MeleeEntrancePanel(self.child_transform, "UI", self.isCross, self.is_show_btn_cd);
            end
            self.view = self.meleepanel;
            --elseif toggle_id == 3 then
            --    if not self.equipentrancePanel then
            --        self.equipentrancePanel = EquipEntrancePanel(self.child_transform, "UI", 1);
            --    end
            --    self.view = self.equipentrancePanel;
        elseif toggle_id == 1 then
            if not self.arenaPanel then
                self.arenaPanel = ArenaPanel(self.child_transform, "UI");
            end
            self.view = self.arenaPanel;
        elseif toggle_id == 3 then
            if not self.warriorPanel then
                self.warriorPanel = WarriorMainPanel(self.child_transform, "UI");
            end
            self.view = self.warriorPanel;
        elseif toggle_id == 4 then
            if not self.peakArenaPanel then
                self.peakArenaPanel = PeakArenaMainPanel(self.child_transform, "UI");
            end
            self.view = self.peakArenaPanel;
        elseif toggle_id == 5 then
            if not self.CompetePanel then
                self.CompetePanel = CompetePanel(self.child_transform, "UI");
            end
            self.view = self.CompetePanel;
        end

        if update_toggle then
            local data = {
                { id = 1, text = "Arena" },
                -- { id = 2, text = "Brawl Battleground" },
                -- { id = 3, text = "Altar of Bravery" },
                -- { id = 4, text = "Ace Duel" },
                -- { id = 5, text = "Diamond Ring" },
            }
            self:ShowToggleGroup(toggle_id, data)
        end
    else
        --print2(index);
    end
    self:PopUpChild(self.view)
end
