---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/11/19 17:34
---
MeleeEntrancePanel = MeleeEntrancePanel or class("MeleeEntrancePanel", BaseItem)
local this = MeleeEntrancePanel
--{id = 10111, type = 1, group = 103, key = [[meleewar]], name = [[乱斗战场(本服)]], desc = [[乱斗战场(本服)]],
--reqs = [[]], cycle = 2, days = [[2,4,6]], divide_time = [[]], divide_rule = 1, divide_num = 1, divide_min = 1,
--start_predict = [[{19,55,00}]], start_time = [[{20,00,00}]], start_offset = [[]], stop_predict = [[{20,12,00}]], stop_time = [[{20,15,00}]], scene = 30311}
local ConfigLanguage = require('game.config.language.CnLanguage');
function MeleeEntrancePanel:ctor(parent_node, layer, iscross, is_show_btn_cd)
    self.abName = "dungeon"
    self.image_ab = "dungeon_image";
    self.assetName = "MeleeEntrancePanel"
    self.layer = "UI"
    self.panel_type = 2;
    self.isCross = iscross;
    self.events = {};
    self.currentSelect = nil;
    self.is_show_btn_cd = is_show_btn_cd
    self.cd_time = 10
    MeleeEntrancePanel.super.Load(self);
    self.model = DungeonModel:GetInstance()
end

function MeleeEntrancePanel:dctor()
    if self.enter_cd then
        self.enter_cd:destroy()
        self.enter_cd = nil
    end
    destroyTab(self.items);
    self.items = nil;
    destroyTab(self.rankAwards);
    self.rankAwards = nil;
    destroyTab(self.awarditems);
    self.awarditems = nil;
    GlobalEvent:RemoveTabListener(self.events);
end

function MeleeEntrancePanel:Open(tabIndex)
end

function MeleeEntrancePanel:LoadCallBack()
    self.nodes = {
        "time/activitytime", "des/tip_text", "enter_btn", "entrance_bg", "time/timetext", "awardCon", "awardCon1",

        "rank/rank_title",
        "rank/rank_3", "rank/rank_2", "rank/rank_1_award/Viewport/award_con_1", "rank/rank_1", "rank/rank_2_award/Viewport/award_con_2", "rank/zhanliItems/zhanliText", "rank/rank_3_award/Viewport/award_con_3",
    }
    self:GetChildren(self.nodes);

    SetLocalPosition(self.transform, 0, 0, 0);

    self:InitUI();
    self:AddEvent();

    local res = "dungeon_melee_bg";
    lua_resMgr:SetImageTexture(self, self.entrance_bg, "iconasset/icon_big_bg_" .. res, res, false);
end

function MeleeEntrancePanel:InitUI()
    self:IsShowEnterCD()
    self.entrance_bg = GetImage(self.entrance_bg);
    self.activitytime = GetText(self.activitytime);
    self.tip_text = GetText(self.tip_text);
    self.enter_btn = GetButton(self.enter_btn);
    self.entrance_bg = GetImage(self.entrance_bg);
    self.timetext = GetText(self.timetext);
    self.zhanliText = GetText(self.zhanliText);

    self.rank_title = GetImage(self.rank_title);

    self.data = Config.db_activity[DungeonModel.MELEE_SELF_ACTIVITY_ID];
    if self.isCross then
        self.data = Config.db_activity[DungeonModel.MELEE_CROSS_ACTIVITY_ID];
    end
    if self.data then
        local timetab = String2Table(self.data.time);
        local start_time = timetab[1] or {};
        local stop_time = timetab[2] or {};
        if not table.isempty(start_time) and not table.isempty(stop_time) then
            self.activitytime.text = string.format("%02d", start_time[1]) .. ":" .. string.format("%02d", start_time[2]) .. "-" .. string.format("%02d", stop_time[1]) .. ":" .. string.format("%02d", stop_time[2]);
        end
        local days = String2Table(self.data.days);
        local timetextstr = "every";
        if table.isempty(days) then
            timetextstr = "Mon. to Sun.";
        end
        for i = 1, #days do
            timetextstr = timetextstr .. ChineseNumber(days[i]);
            if i ~= #days then
                timetextstr = timetextstr .. "."
            end
        end
        --self.timetext.text = timetextstr;

        local reward_show = String2Table(self.data.reward_show)
        self:InitAwards(reward_show);
        self.zhanliText.text = 0;--RoleInfoModel:GetInstance():GetRoleValue("power")
        self:InitRankAward();
        --local titleConfig = Config.db_title[46000];
    end
    self.tip_text.text = ConfigLanguage.Dungeon.MELEE_ENTRANCE_TIP;
end

function MeleeEntrancePanel:IsShowEnterCD()
    if self.enter_cd then
        self.enter_cd:StopSchedule()
    end
    if self.is_show_btn_cd then
        local param = {}
        param.formatText = "Enter (%d sec)"
        self.enter_cd = CountDownText(self.enter_btn, param)
        local function call_back()
            self.enter_cd:StopSchedule()
            self:HandleEnter()
        end
        self.enter_cd:StartSechudle(self.cd_time + os.time(), call_back)
    end
end

function MeleeEntrancePanel:InitAwards(awardTab)
    destroyTab(self.awarditems);
    self.awarditems = {};
    local tab = awardTab;
    for i = 1, #tab, 1 do
        local awardItem = GoodsIconSettorTwo(self.awardCon);
        local param = {}
        param["item_id"] = tab[i][1];
        param["can_click"] = true;
        param["bind"] = true;
        param["size"] = { x = 80, y = 80 }
        awardItem:SetIcon(param);
        --local num = BagModel:GetInstance():GetItemNumByItemID(tab[i]);
        --awardItem:SetData(tab[i][1], 0);--tab[i + 1]
        --awardItem:AddClickTips(self.awardCon1.transform);
        table.insert(self.awarditems, awardItem);
    end
end

function MeleeEntrancePanel:InitRankAward()
    destroyTab(self.rankAwards);
    self.rankAwards = {};

    --local tab = awardTab;
    for i = 1, 3, 1 do
        local rankTab = Config.db_melee_score[i];
        if rankTab then
            local rankAwardTab = String2Table(rankTab.final_mail_reward);
            if self.isCross then
                rankAwardTab = String2Table(rankTab.cross_final_mail_reward);
            end
            for j = 1, #rankAwardTab do
                local awardItem = GoodsIconSettorTwo(self["award_con_" .. i]);
                local param = {}
                param["item_id"] = rankAwardTab[j][1];
                param["can_click"] = true;
                param["bind"] = true;
                param["size"] = { x = 80, y = 80 }
                if enumName.ITEM[rankAwardTab[j][1]] then
                else
                    param["num"] = rankAwardTab[j][2];
                end

                awardItem:SetIcon(param);
                table.insert(self.rankAwards, awardItem);
            end
            if rankTab.title_show and rankTab.title_show ~= 0 then
                local titleConfig = Config.db_title[rankTab.title_show];
                if titleConfig then
                    self.zhanliText.text = titleConfig.fight;
                else
                    self.zhanliText.text = 0;
                end

            end
        end
        if i == 1 and rankTab then
            lua_resMgr:SetImageTexture(self, self.rank_title, Constant.TITLE_IMG_PATH, rankTab.title_show, false, nil, false);
        end
    end
end

function MeleeEntrancePanel:AddEvent()
    AddClickEvent(self.enter_btn.gameObject, handler(self, self.HandleEnter))
end

function MeleeEntrancePanel:HandleEnter(target, x, y)
    --调用活动端看活动是否开启
    local roleLevel = RoleInfoModel:GetInstance():GetMainRoleLevel();
    local actTab = Config.db_activity[DungeonModel.MELEE_SELF_ACTIVITY_ID];
    if self.isCross then
        actTab = Config.db_activity[DungeonModel.MELEE_CROSS_ACTIVITY_ID];
    end

    if actTab then
        local sceneConfig = Config.db_scene[actTab.scene];
        if sceneConfig then
            local reqs = String2Table(sceneConfig.reqs);
            if reqs[1] == "level" then
                if roleLevel < reqs[2] then
                    Notify.ShowText("Level too low" .. reqs[2] .. ", unable to enter");
                    return ;
                end
            end
        else
            Notify.ShowText("Failed to find scene configuration, please check");
        end

        if not ActivityModel:GetInstance():GetActivity(actTab.id) then
            local timetab = String2Table(actTab.time);
            local start_time = timetab[1] or {};
            local stop_time = timetab[2] or {};
            local days = String2Table(self.data.days);
            local timetextstr = "every";
            if table.isempty(days) then
                timetextstr = "Mon. to Sun.";
            end
            for i = 1, #days do
                timetextstr = timetextstr .. ChineseNumber(days[i]);
                if i ~= #days then
                    timetextstr = timetextstr .. "."
                end
            end
            if not table.isempty(start_time) and not table.isempty(stop_time) then
                local timestr = string.format("%02d", start_time[1]) .. ":" .. string.format("%02d", start_time[2]) .. "-" .. string.format("%02d", stop_time[1]) .. ":" .. string.format("%02d", stop_time[2]);
                Notify.ShowText(string.format("Brawl Battleground starts at %s’s %s", timetextstr, timestr));
            else
                Notify.ShowText("Brawl Battleground is not opened");
            end
            return
        end

        if self.isCross then
            SceneControler:GetInstance():RequestSceneChange(actTab.scene, enum.SCENE_CHANGE.SCENE_CHANGE_ACT, nil, nil, DungeonModel.MELEE_CROSS_ACTIVITY_ID);
        else
            SceneControler:GetInstance():RequestSceneChange(actTab.scene, enum.SCENE_CHANGE.SCENE_CHANGE_ACT, nil, nil, DungeonModel.MELEE_SELF_ACTIVITY_ID);
        end
    else
        Notify.ShowText("Failed to find this event, please check your configuration");
    end


end
