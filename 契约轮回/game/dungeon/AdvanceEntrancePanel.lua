---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 18/11/19 17:34
---
AdvanceEntrancePanel = AdvanceEntrancePanel or class("AdvanceEntrancePanel", BaseItem)
local this = AdvanceEntrancePanel

AdvanceEntrancePanel.DungeID = {
    30401,
    30402,
    30403,
    30404,
}

function AdvanceEntrancePanel:ctor(parent_node, layer)
    self.abName = "dungeon"
    self.image_ab = "dungeon_image";
    self.assetName = "AdvanceEntrancePanel"
    self.layer = "UI"
    self.panel_type = 2;
    self.events = {};
    self.starList = {}
    self.isfirst = true
    self.currentSelect = nil;
    AdvanceEntrancePanel.super.Load(self);
    self.model = DungeonModel:GetInstance()

    self.dungeon_type = enum.SCENE_STYPE.SCENE_STYPE_DUNGE_MOUNT;
    DungeonCtrl:GetInstance():RequestDungeonMount();
end

function AdvanceEntrancePanel:dctor()
    destroyTab(self.items);
    self.items = nil;
    destroyTab(self.awarditems);
    self.awarditems = nil;
    destroyTab(self.staritems);
    self.staritems = nil;
    destroyTab(self.previewItems);
    self.previewItems = nil;
    self.starList = nil

    GlobalEvent:RemoveTabListener(self.events);

    if self.fetchEvent then
        RemoveModelListener(self.fetchEvent, self.model);
    end
    self.fetchEvent = nil;
    self.isfirst = true
    if self.enter_btn_reddot then
        self.enter_btn_reddot:destroy();
    end
    self.enter_btn_reddot = nil;
end

function AdvanceEntrancePanel:Open(tabIndex)

end

function AdvanceEntrancePanel:LoadCallBack()
    self.nodes = {
        "awarditem_0", "items/item_1", "items/item_3", "items/item_4", "saodang_btn", "enter_btn", "cishuText", "items/item_2", "awardCon",
        "saodang/saodang_times", "saodang", "des/preview_item", "Scroll View/Viewport/Content",
        "entrance_bg",
        "des/prop_level",
    }
    self:GetChildren(self.nodes);

    SetLocalPosition(self.transform, 0, 0, 0);

    self:InitUI();
    self:AddEvent();
    self:HandleData();

    local res = "advance_entrance_bg";
    lua_resMgr:SetImageTexture(self, self.entrance_bg, "iconasset/icon_big_bg_" .. res, res, false);
end

function AdvanceEntrancePanel:AddEvent()
    AddEventListenerInTab(EntranceEvent.ENTRANCE_ADVANCE_DATA, handler(self, self.HandleData), self.events);

    AddClickEvent(self.enter_btn.gameObject, handler(self, self.HandleEnterClick));

    AddClickEvent(self.saodang_btn.gameObject, handler(self, self.HandleSweepClick))

    AddEventListenerInTab(DungeonEvent.DUNGEON_SWEEP_REFRESH, handler(self, self.InitSaoDangQuan), self.events);

    self.fetchEvent = AddModelEvent(DungeonEvent.FetchResult, handler(self, self.HandleFetch), self.model);
    AddEventListenerInTab(DungeonEvent.UpdateReddot, handler(self, self.UpdateReddot), self.events);
end

function AdvanceEntrancePanel:InitUI()
    self.entrance_bg = GetImage(self.entrance_bg);
    SetGameObjectActive(self.awarditem_0, false);

    self.prop_level = GetText(self.prop_level);

    self.cishuText = GetText(self.cishuText);--扫荡战力:<color=#BD430C>55555</color>/66666

    SetGameObjectActive(self.saodang.gameObject, false);
    self.saodang_times = GetText(self.saodang_times);

    self.advanceItems = {};
    for i = 1, 4 do
        local itemName = "item_" .. i;
        local item = AdvanceItem(self[itemName]);
        self.advanceItems[i] = item;
        AddClickEvent(self.advanceItems[i].gameObject, handler(self, self.HandleItemClick, i));
    end

    local level = RoleInfoModel:GetInstance():GetMainRoleLevel();
    local sweeptab = nil;
    for i = 1, #Config.db_dunge_mount_sweep do
        sweeptab = Config.db_dunge_mount_sweep[i];
        if sweeptab.minlv <= level and sweeptab.maxlv >= level then
            break ;
        end
    end
    local viplv = RoleInfoModel:GetInstance():GetMainRoleVipLevel();
    local role_power = RoleInfoModel:GetInstance():GetRoleValue("power");
    if level > 150 then

        if sweeptab then
            if role_power >= sweeptab.power then
                self.cishuText.text = "Farming CP:<color=#BD430C>" .. GetShowNumber(role_power) .. "</color>/" .. GetShowNumber(sweeptab.power);
            else
                self.cishuText.text = "Farming CP:<color=#ff0000>" .. GetShowNumber(role_power) .. "</color>/" .. GetShowNumber(sweeptab.power);
            end

        else
            self.cishuText.text = "";
        end
    else
        --self.cishuText.text = "等级不足,无法扫荡";
        self.cishuText.text = "Farming CP:<color=#BD430C>" .. role_power .. "</color>/" .. sweeptab.power;
    end

  --  self:HandleItemClick(self.advanceItems[1].gameObject, 0, 0, 1);
    self.enter_btn_reddot = RedDot(self.enter_btn.transform, nil, RedDot.RedDotType.Nor)
    self.enter_btn_reddot:SetPosition(60, 18)
    --self.enter_btn_reddot:SetRedDotParam(true);


    --self:SetReqsText();
end

function AdvanceEntrancePanel:SetReqsText()
    --等级要求:人物等级><color=#C45521>140级</color>
    local config = Config.db_scene[AdvanceEntrancePanel.DungeID[self.currentSelect]];
    local lv = 120;
    if config and config.reqs then
        local reqs = String2Table(config.reqs);
        if #reqs == 2 and _G.type(reqs[1]) ~= "table" then
            reqs = { reqs };
        end
        for k, v in pairs(reqs) do
            if v[1] == "level" then
                lv = tonumber(v[2]);
            end
        end
    end
    if self.prop_level then
        self.prop_level.text = "Level Required:Level><color=#C45521>" .. lv .. "Level</color>"
    end
end

function AdvanceEntrancePanel:HandleItemClick(go, x, y, index)
    for k, v in pairs(self.advanceItems) do
        v:SetSelected(false);
    end
    self.currentSelect = index;
    self.advanceItems[index]:SetSelected(true);

    self:InitPreviewAward();
    self:InitSaoDangQuan();
    self:SetReqsText();
end

function AdvanceEntrancePanel:HandleData()
    self:InitAwards();
    local data = DungeonModel:GetInstance().advanceData;

    local enter = data.enter;
    local star = data.star;
    local fetch = data.fetch;

    if enter then

    end
    local allStar = 0;
    if star then
        for k, v in pairs(AdvanceEntrancePanel.DungeID) do
            local starNum = star[v];
            allStar = allStar + starNum;
            if self.advanceItems[k] then
                self.advanceItems[k]:SetStar(starNum);
                if starNum == 3 then
                    self.starList[k] = true
                else
                    self.starList[k] = false
                end
            end
        end
    end
    self:SetFirst()
end

function AdvanceEntrancePanel:SetFirst()
    if self.isfirst == false then return end
    local curIndex = 0
    if #self.starList ~= 0  then
        for i = 1, #self.starList do
            if self.starList[i] == false then
                curIndex = i
                break
            end
        end
    end
    if curIndex == 0 then
        self:HandleItemClick(self.advanceItems[1].gameObject, 0, 0, 1);
    else
        self:HandleItemClick(self.advanceItems[curIndex].gameObject, 0, 0, curIndex);
    end
    self.isfirst = false
end


function AdvanceEntrancePanel:InitAwards()
    destroyTab(self.staritems);
    self.staritems = {};
    SetGameObjectActive(self.awarditem_0, true);

    local data = DungeonModel:GetInstance().advanceData;

    local enter = data.enter;
    local star = data.star;
	local fetch = {}
	for i = 1, #data.fetch do
		local id = data.fetch[i] / 3
		fetch[id] = data.fetch[i]
	end
    
    local allStar = 0;
    if star then
        for k, v in pairs(star) do
            allStar = allStar + v;
        end
    end

    local configs = Config.db_dunge_mount_star_reward;
    for i = 1, #configs, 1 do
        local tab = configs[i];
        local starItem = AdvanceStarItem(newObject(self.awarditem_0), tab);
        SetParent(starItem.transform, self.awardCon);
        SetLocalScale(starItem.transform, 1, 1, 1);
        SetLocalPosition(starItem.transform, 0, 0, 0);
        if star and star[AdvanceEntrancePanel.DungeID[i]] then
            starItem:SetText(tonumber(allStar));
        end
        --已领奖励就不加事件了
        if fetch and fetch[i] then
            starItem:AddEvents();
            starItem:SetText("Claimed");
            starItem:SetGray();
        else
            if allStar < (i * 3) then
                starItem:AddEvents();
            else
                starItem:SetText2("<color=#31E91D>Claimable</color>")
                starItem:ShowEffect();
                AddClickEvent(starItem.gameObject, handler(self, self.HandleStarReward, i));
            end
        end

        table.insert(self.staritems, starItem);
    end
    SetGameObjectActive(self.awarditem_0, false);
end

function AdvanceEntrancePanel:InitSaoDangQuan()
    local tab = Config.db_dunge[AdvanceEntrancePanel.DungeID[self.currentSelect]];
    if tab then
        local sweep = String2Table(tab.sweep_cost);
        if sweep and #sweep > 1 then
            local num = BagModel:GetInstance():GetItemNumByItemID(sweep[1]);
            self.saodang_times.text = num .. "/" .. sweep[2];
        end
    end
    DungeonCtrl:GetInstance():RequestDungeonMount();
end

function AdvanceEntrancePanel:InitPreviewAward()
    destroyTab(self.previewItems);
    self.previewItems = {};
    local dungeID = AdvanceEntrancePanel.DungeID[self.currentSelect];
    local config = Config.db_dunge[dungeID];
    if config and config.reward_show then
        local reward_show = String2Table(config.reward_show);
        for i = 1, #reward_show do
            local tab = reward_show[i];
            local awarditem = AwardItem(self.Content);
            awarditem:SetData(tab[1], 0);
            awarditem:AddClickTips();
            table.insert(self.previewItems, awarditem);
        end
    end
    SetSizeDeltaX(self.Content, 8 * #self.previewItems)
end

function AdvanceEntrancePanel:HandleStarReward(go, x, y, index)
    local data = DungeonModel:GetInstance().advanceData;
    local fetch = data.fetch;
    local allStar = 0;
    for k, v in pairs(data.star) do
        allStar = allStar + v;
    end
    if fetch and not fetch[AdvanceEntrancePanel.DungeID[index]] then
        if allStar >= index * 3 then
            DungeonCtrl:GetInstance():RequestFetch(self.dungeon_type, index * 3);
        else
            Notify.ShowText("Insufficient stars, Clear the dungeon and claim 3-star");
        end
    end
end

function AdvanceEntrancePanel:HandleFetch(stype, data)
    if stype == self.dungeon_type then
        Notify.ShowText("Claimed");
        --刷新数据
        local advanceData = DungeonModel:GetInstance().advanceData;
        local fetch = advanceData.fetch;
        fetch[#fetch + 1] = data.type;
		DungeonModel:GetInstance().advanceData.fetch = fetch
        self:InitAwards();
    end
end

--@ling autofun
function AdvanceEntrancePanel:HandleAddLeft()
    local data = self.model.dungeon_info_list[self.dungeon_type]
    if data then
        lua_panelMgr:GetPanelOrCreate(DungeonEntranceBuyTip):Open(data.info, enum.VIP_RIGHTS.VIP_RIGHTS_29);
    end
end

function AdvanceEntrancePanel:HandleEnterClick(go, x, y)
    local data = DungeonModel:GetInstance().advanceData;
    if not data or table.isempty(data) then
        return ;
    end

    local fetch = data.fetch;
    local enter = data.enter;
    local star = data.star;

    if star then
        if star[AdvanceEntrancePanel.DungeID[self.currentSelect]] == 3 then
            Notify.ShowText("Dungeon reached 3-star, you can no longer enter for today");
            return ;
        end
    end

    local call_back = function()
        DungeonCtrl:GetInstance():RequestEnterDungeon(self.dungeon_type, nil, AdvanceEntrancePanel.DungeID[self.currentSelect]);
    end

    local dungeID = AdvanceEntrancePanel.DungeID[self.currentSelect];
    local config = Config.db_dunge[dungeID];
    local costid = 90010004;
    local num = 50;
    if config then
        local tab = String2Table(config.enter_buy);
        costid = tab[1];
        num = tab[2];
    end
    if enter then
        --已经进入过
        local enterTime = enter[AdvanceEntrancePanel.DungeID[self.currentSelect]];
        if enterTime and tonumber(enterTime) > 0 then
            Dialog.ShowTwo("Tip", "Today you already challenged it, challenge again will cost you" .. tostring(num) .. tostring(enumName.ITEM[costid]) .. "proceed?", "Confirm", call_back, nil, "Cancel", nil);
            return ;
        end
    end

    call_back();
end

function AdvanceEntrancePanel:HandleSweepClick(go, x, y)
    local data = DungeonModel:GetInstance().advanceData;
    local roleLevel = RoleInfoModel:GetInstance():GetMainRoleLevel();

    local vipLevel = RoleInfoModel:GetInstance():GetMainRoleVipLevel();

    local sweeptab = nil;
    if roleLevel < 150 then
        sweeptab = Config.db_dunge_mount_sweep[1];
    else
        for i = 1, #Config.db_dunge_mount_sweep do
            sweeptab = Config.db_dunge_mount_sweep[i];
            if sweeptab.minlv <= roleLevel and sweeptab.maxlv >= roleLevel then
                break ;
            end
        end
    end

    local role_power = RoleInfoModel:GetInstance():GetRoleValue("power");
    if role_power < sweeptab.power then
        if vipLevel >= sweeptab.viplv then

        else
            Notify.ShowText("Insufficient CP, unable to raid");
            return ;
        end
    end
    DungeonCtrl:GetInstance():RequestSweep(self.dungeon_type, self.currentSelect);
end

function AdvanceEntrancePanel:UpdateReddot()
    local tab = DungeonModel:GetInstance().red_dot_list;
    if tab and tab[self.dungeon_type] then
        self.enter_btn_reddot:SetRedDotParam(true);
    else
        self.enter_btn_reddot:SetRedDotParam(false);
    end
end