---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Admin.
--- DateTime: 2019/12/18 19:55

ChildActRankPanel = ChildActRankPanel or class("ChildActRankPanel", BaseItem)
local ChildActRankPanel = ChildActRankPanel

function ChildActRankPanel:ctor(parent_node, actID,actID2)
    self.abName = "sevenDayActive"
    self.assetName = "ChildActRankView"
    self.layer = "UI"
    self.events = {}
    self.actID = actID     -- 单服
    self.actID2 = actID2   -- 跨服
    self.model = SevenDayActiveModel:GetInstance()
    self.openData = OperateModel:GetInstance():GetAct(self.actID)
    self.data = OperateModel:GetInstance():GetActInfo(self.actID)

    self.openData2 = OperateModel:GetInstance():GetAct(self.actID2)
    self.data2 = OperateModel:GetInstance():GetActInfo(self.actID2)
    self.rewardItems = {}
	self.rewardItems2 = {}
    self.cur_rankId = 0
    self.rankItems = {}
    self.rankItems2 = {}
	self.myRankData = {}
    ChildActRankPanel.super.Load(self)
end

function ChildActRankPanel:dctor()
    GlobalEvent:RemoveTabListener(self.events)
	for _, item in pairs(self.rewardItems) do
		item:destroy()
	end
	for _, item in pairs(self.rankItems) do
		if item then
			item:destroy()
			item = nil
		end
	end
    for _, item in pairs(self.rankItems2) do
		if item then
			item:destroy()
			item = nil
		end
    end
	for _, item in pairs(self.rewardItems2) do
		item:destroy()
	end

	self.rewardItems = {}
	self.rewardItems2 = {}
	self.rankItems = {}
    self.rankItems2 = {}

    self.myRankData = {}

    if self.StencilMask then
        destroy(self.StencilMask)
        self.StencilMask = nil
    end
    if self.StencilMask2 then
        destroy(self.StencilMask2)
        self.StencilMask = nil
    end

    if self.schedules then
        GlobalSchedule:Stop(self.schedules);
    end
end

function ChildActRankPanel:LoadCallBack()
    self.nodes = {
        "tog/tog1/select","tog/tog1/unselect","tog/tog1/click","tog/tog2/select2","tog/tog2/unselect2",
        "tog/tog2/click2","left/Scroll View/Viewport/leftContent","left/leftItem","right/Scroll View/Viewport2/rightContent",
        "right/rightItem","mid/ScrollView/Viewport/midContent","mid/rank","mid/power","mid/midItem",
        "left/Scroll View/Viewport","right/Scroll View/Viewport2","mid/ScrollView2/Viewport/midContent2",
        "mid/ScrollView","mid/ScrollView2","mid/powerTex","mid/rtime",
    }
    self:GetChildren(self.nodes)
    self.rankTex  = GetText(self.rank)
    self.powerTex1 = GetText(self.power)
    self.rtimeTex = GetText(self.rtime)
    self.powerTex2 = GetText(self.powerTex)

    local c = OperateModel:GetInstance():GetConfig(self.actID)
    local rankNum = String2Table(c.reqs)[1][1]
    RankController:GetInstance():RequestRankListInfo(c.rank,0)
    local c2 = OperateModel:GetInstance():GetConfig(self.actID2)
    RankController:GetInstance():RequestRankListInfo(c2.rank,0)
    local rankNum2 = String2Table(c2.reqs)[1][1]

    self.powerTex2.text = string.format("When Children CP reaches <color=#eb0000>%d</color> and you can list on Server Rankings; reaches <color=#eb0000>%d</color>, you can list on Cross-Server Rankings", rankNum, rankNum2)

    self:SetMask()
    self:AddEvent()
    self:InitPanel()

    self.schedules = GlobalSchedule:Start(handler(self, self.CountDown), 0.2, -1);
end

function ChildActRankPanel:AddEvent()
    local function call_back()
        self:UpdateView(1)
    end
    AddClickEvent(self.click.gameObject, call_back)
    local function call_back()
        self:UpdateView(2)
    end
    AddClickEvent(self.click2.gameObject, call_back)


    self.events[#self.events+1] = GlobalEvent.AddEventListener(RankEvent.RankReturnList,handler(self,self.RankReturnList))
end

function ChildActRankPanel:SetMask()
    self.StencilId = GetFreeStencilId()
    self.StencilMask = AddRectMask3D(self.Viewport.gameObject)
    self.StencilMask.id = self.StencilId

    self.StencilId2 = GetFreeStencilId()
    self.StencilMask2 = AddRectMask3D(self.Viewport2.gameObject)
    self.StencilMask2.id = self.StencilId
end


function ChildActRankPanel:InitPanel()
    local rewardCfg = OperateModel:GetInstance():GetRewardConfig(self.actID)
    local rewardCfg2 = OperateModel:GetInstance():GetRewardConfig(self.actID2)
	
    for i, v in pairs(rewardCfg) do
        self.rewardItems[v.id] = ChildActRankRewItem(self.leftItem.gameObject,self.leftContent)
        self.rewardItems[v.id]:SetData(v, self.StencilId, i)
    end

    for i, v in pairs(rewardCfg2) do
        self.rewardItems2[v.id] = ChildActRankRewItem(self.rightItem.gameObject,self.rightContent)
        self.rewardItems2[v.id]:SetData(v, self.StencilId2, i)
    end

    self:UpdateView(1)
end

function ChildActRankPanel:RankReturnList(data)
    local  cfg = OperateModel:GetInstance():GetConfig(self.actID)
    local rankId = cfg.rank
    local rankCfg = RankModel:GetInstance():GetRankById(rankId)
    local size = rankCfg.size
    if data.id == rankId then
		self:SetMyInfo(data.mine)
        local list = data.list
        local ranklen = table.nums(list)
        for i = 1, size do
            if not self.rankItems[i] then
                self.rankItems[i] = ChildActRankIten(self.midItem.gameObject,self.midContent,"UI")
            end
            if i <= ranklen then
                self.rankItems[i]:SetData(list[i],self.actID)
            else
                self.rankItems[i]:SetData(nil,self.actID,1,i)
            end
        end
        self.myRankData[1] = data.mine
    end

    local  cfg2 = OperateModel:GetInstance():GetConfig(self.actID2)
    local rankId2 = cfg2.rank
    local rankCfg2 = RankModel:GetInstance():GetRankById(rankId2)
    local size2 = rankCfg2.size
    if data.id == rankId2 then
        local list2 = data.list
        local ranklen2 = table.nums(list2)
        for i = 1, size2 do
            if not self.rankItems2[i] then
                self.rankItems2[i] = ChildActRankIten(self.midItem.gameObject,self.midContent2,"UI")
            end
            if i <= ranklen2 then
                self.rankItems2[i]:SetData(list2[i],self.actID2, nil, nil, true)
            else
                self.rankItems2[i]:SetData(nil,self.actID2,1,i)
            end
        end
        self.myRankData[2] = data.mine
    end

end
	
function ChildActRankPanel:UpdateView(idx)
    SetVisible(self.select, idx == 1)
    SetVisible(self.unselect, idx ~= 1)
    SetVisible(self.select2, idx == 2)
    SetVisible(self.unselect2, idx ~= 2)
    SetVisible(self.ScrollView, idx == 1)
    SetVisible(self.ScrollView2, idx == 2)

	self:SetMyInfo(self.myRankData[idx])
    if idx == 1 then
        SetLocalPositionY(self.midContent.transform, 0)
    else
        SetLocalPositionY(self.midContent2.transform, 0)
    end
end

function ChildActRankPanel:SetMyInfo(data)
    if data then
        local str = ""
        if data.rank == 0 then
            str = "Didn't make list"
        else
            str = data.rank
        end
        self.rankTex.text  = str
        self.powerTex1.text = data.sort
    end
end

function ChildActRankPanel:CountDown(data)
    local timeTab = nil;
    local timestr = "";
    local formatTime = "%d";
    timeTab = TimeManager:GetLastTimeData(os.time(), self.openData.act_etime);
    if table.isempty(timeTab) then
        Notify.ShowText("The event is over");
        -- self.rtime.text = "活动剩余：已结束"
        self.rtimeTex.text = string.format("<color=#%s>%s</color>","ff0000","Ended")
        GlobalSchedule.StopFun(self.schedules);
    else
        if timeTab.day then
            timestr = timestr .. string.format(formatTime, timeTab.day) .. "Days";
        end
        if timeTab.hour then
            timestr = timestr .. string.format(formatTime, timeTab.hour) .. "hr";
        end
        if timeTab.min then
            timestr = timestr .. string.format(formatTime, timeTab.min) .. "min";
        end
        if timeTab.sec and not timeTab.day and not timeTab.hour and not timeTab.min then
            timestr = "1 pts"
        end
        --if timeTab.sec then
        --    timestr = timestr .. string.format(formatTime, timeTab.sec);
        --end
        local color  = "53ff67"
        if not timeTab.day then
            color = "ff0000"
        end
        self.rtimeTex.text = string.format("<color=#%s>%s</color>",color,timestr)
        -- self.rtime.text = "活动剩余：" .. timestr;
    end
end