---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2022/2/28 17:40
--- 免费捕捉
---
FreeCaptureWindow = FreeCaptureWindow or BaseClass(BaseView)

function FreeCaptureWindow:__init()
    self.win_type = WinType.Mini
    self.is_full_screen	= true
    self.view_tag = ViewMgrTag.DIALOGUE_TAG
    self.layout_name = "freecapture/free_capture_window"
    self.res_list = {
        { path = PathTool.getPlistImgForDownLoad("freecapture","freecapture"), type = ResourcesType.plist},
        { path = PathTool.getPlistImgForDownLoad("freecapture","freecapture_bg"), type = ResourcesType.single},
    }
    self.controller = FreeCaptureController:getInstance()
end

function FreeCaptureWindow:open_callback()
    self.background = self.root_wnd:getChildByName("background")
    self.background:setScale(display.getMaxScale())
    self.main_container = self.root_wnd:getChildByName("main_container")
    self:playEnterAnimatianByObj(self.main_container , 2)

    local image_bg = self.main_container:getChildByName("image_bg")
    local res = PathTool.getPlistImgForDownLoad("freecapture","freecapture_bg")
    self.image_bg_load = loadSpriteTextureFromCDN(image_bg, res, ResourcesType.single, self.image_bg_load)

    self.tip = self.main_container:getChildByName("tip")
    self.tab_page = self.main_container:getChildByName("tab_page")
    self.btn_left = self.tab_page:getChildByName("btn_left")
    self.btn_right = self.tab_page:getChildByName("btn_right")
    self.btn_close = self.main_container:getChildByName("btn_close")

    self.good_cons = self.main_container:getChildByName("good_cons")
    local scroll_view_size = self.good_cons:getContentSize()
    local setting = {
        item_class = FreeCaptureItem,      -- 单元类
        start_x = 0,                  -- 第一个单元的X起点
        space_x = 0,                    -- x方向的间隔
        start_y = 0,                    -- 第一个单元的Y起点
        space_y = 0,                   -- y方向的间隔
        item_width = FreeCaptureItem.width,               -- 单元的尺寸width
        item_height = FreeCaptureItem.height,              -- 单元的尺寸height
        row = 1,                        -- 行数，作用于水平滚动类型
        --col = 1,                         -- 列数，作用于垂直滚动类型
        --once_num = 1,
        --need_dynamic = true
    }
    self.common_scrollview = CommonScrollViewLayout.new(self.good_cons, cc.p(0,0) , ScrollViewDir.horizontal, ScrollViewStartPos.top, scroll_view_size, setting, cc.p(0, 0))

    self.result_container = self.root_wnd:getChildByName("result_container")
    self.result_container:setVisible(false)
    self.background_0 = self.result_container:getChildByName("background_0")

    local space, start_x, start_y = 20, 40, 300
    self.result_item_list = {}
    for i=1, 10 do
        local item = BackPackItem.new(false,true)
        item:setAnchorPoint(cc.p(0.5,0.5))
        item:setDefaultTip()
        self.result_container:addChild(item)
        local _x = start_x + BackPackItem.Width * 0.5 + ((i - 1) % 5) * (BackPackItem.Width + space)
        local _y = start_y - math.floor((i - 1) / 5) * (BackPackItem.Height + space + 20)
        item:setPosition(cc.p(_x, _y))
        self.result_item_list[i] = item
    end
end

function FreeCaptureWindow:register_event()
    if not self.Free_Capture_Data_Event then
        self.Free_Capture_Data_Event = GlobalEvent:getInstance():Bind(FreeCaptureEvent.Free_Capture_Data,function(data)
            self:update(data)
        end)
    end
    if not self.Free_Capture_Result_Event then
        self.Free_Capture_Result_Event = GlobalEvent:getInstance():Bind(FreeCaptureEvent.Free_Capture_Result,function(data)
            self:showResult(data)
        end)
    end
    registerButtonEventListener(self.background_0, function()
        self.result_container:setVisible(false)
    end, false,2)
    registerButtonEventListener(self.background, function()
        self.controller:openFreeCaptureWindow(false)
    end, false,2)
    registerButtonEventListener(self.btn_close, function()
        self.controller:openFreeCaptureWindow(false)
    end, false,2)

    registerButtonEventListener(self.btn_left, function()
        self:back()
    end, false,2)
    registerButtonEventListener(self.btn_right, function()
        self:next()
    end, false,2)
end

function FreeCaptureWindow:openRootWnd()
    self.controller:sender23240()
end

function FreeCaptureWindow:back()
    local xx = self.common_scrollview:getCurContainerPosX()
    local offset_x = FreeCaptureItem.width - (xx % FreeCaptureItem.width)
    local yy = self.common_scrollview:getCurContainerPosY()
    self.common_scrollview:updateMove(cc.p(offset_x,yy), 0.6)
end

function FreeCaptureWindow:next()
    local xx = self.common_scrollview:getCurContainerPosX()
    local offset_x = xx % FreeCaptureItem.width
    if offset_x == 0 then
        offset_x = FreeCaptureItem.width
    end
    local yy = self.common_scrollview:getCurContainerPosY()
    self.common_scrollview:updateMove(cc.p(-offset_x,yy), 0.6)
end

function FreeCaptureWindow:update(data)
    if data == nil then return end

    self.data_list = {}
    if data.info_list and next(data.info_list) ~= nil then
        table.sort( data.info_list , function(a,b) return a.lev < b.lev end )
        for i,v in ipairs(data.info_list) do
            self.data_list[i] = {}
            self.data_list[i].level = v.lev
            self.data_list[i].status = v.status
            --self.data_list[i].items = {}
            if data.rewards and next(data.rewards) ~= nil then
                for j,w in ipairs(data.rewards) do
                    if w.lev == v.lev then
                        self.data_list[i].items = w.rewards_sub_list
                    end
                end
            end
        end
    end
    --dump(self.data_list)
    self.common_scrollview:setData(self.data_list)

    --等级条件
    local role_vo = RoleController:getInstance():getRoleVo()
    local lev = role_vo and role_vo.lev or 0
    local temp = 0
    for k, v in pairs(self.data_list) do
        temp = v.level
        if lev < v.level then
            break
        end
    end
    self.tip:setString(string.format(TI18N("达到%s级可免费捕捉"),temp))

    --展示定位
    local index = 1
    local mark = false
    for i,v in ipairs(self.data_list) do
        if v.status == 1 then
            index = i
            break
        end
        if v.status == 0 and mark ~= true then
            index = i
            mark = true
        end
    end
    local yy = self.common_scrollview:getCurContainerPosY()
    self.common_scrollview:updateMove(cc.p(-((index-1)*FreeCaptureItem.width),yy), 0.6)
end

function FreeCaptureWindow:showResult(data)
    for i, v in ipairs(self.result_item_list) do
        v:setBaseData(data.rewards[i].base_id,data.rewards[i].num)
        v.config = Config.ItemData.data_get_data(data.rewards[i].base_id)
    end
    self.result_container:setVisible(true)
end

function FreeCaptureWindow:close_callback()
    if self.image_bg_load then
        self.image_bg_load:DeleteMe()
        self.image_bg_load = nil
    end
    if self.result_item_list and next(self.result_item_list) ~= nil then
        for i, v in ipairs(self.result_item_list) do
            v:DeleteMe()
            v = nil
        end
    end
    self.result_item_list = nil
    if self.Free_Capture_Data_Event then
        GlobalEvent:getInstance():UnBind(self.Free_Capture_Data_Event)
        self.Free_Capture_Data_Event = nil
    end
    if self.Free_Capture_Result_Event then
        GlobalEvent:getInstance():UnBind(self.Free_Capture_Result_Event)
        self.Free_Capture_Result_Event = nil
    end
    self.controller:openFreeCaptureWindow(false)
end


----------------------@ 子项
FreeCaptureItem =
class(
        "FreeCaptureItem",
        function()
            return ccui.Widget:create()
        end
)
FreeCaptureItem.width = 194
FreeCaptureItem.height = 320

function FreeCaptureItem:ctor()
    self:configUI()
    self:register_event()
end

function FreeCaptureItem:configUI()
    self.root_wnd = createCSBNote(PathTool.getTargetCSB("freecapture/free_capture_item"))
    self:addChild(self.root_wnd)
    self:setCascadeOpacityEnabled(true)
    self:setContentSize(cc.size(FreeCaptureItem.width, FreeCaptureItem.height))
    self:setAnchorPoint(0, 0)

    self.container = self.root_wnd:getChildByName("container")
    self.image_cover = self.container:getChildByName("image_cover")
    self.text_result = self.container:getChildByName("text_result")
    self.text_result:setString(TI18N("捕捉结果"))
    self.btn_capture = self.container:getChildByName("btn_capture")
    self.text_capture = self.btn_capture:getChildByName("text_capture")

    self.item_con = self.container:getChildByName("item_con")
    self.item = BackPackItem.new(false,true)
    self.item:setAnchorPoint(cc.p(0.5,0.5))
    self.item:setPosition(self.item_con:getContentSize().width/2, self.item_con:getContentSize().height/2)
    self.item:setDefaultTip()
    self.item:setSwallowTouches(false)
    self.item_con:addChild(self.item)
end

function FreeCaptureItem:register_event()
    registerButtonEventListener(self.btn_capture, function()
        playButtonSound2()
        self:capture()
    end,true)

    registerButtonEventListener(self.text_result, function()
        playButtonSound2()
        self:showResult()
    end,true)
end

-- 检测宝可梦背包是否已满
function FreeCaptureItem:checkHeroBagIsFull(  )
    local max, count = HeroController:getInstance():getModel():getHeroMaxCount()
    if max - count < 10 then
        local str = TI18N("宝可梦列表已满，可通过提升VIP等级或购买增加宝可梦携带数量，是否前往购买？")
        local call_back = function()
            MainuiController:getInstance():changeMainUIStatus(MainuiConst.btn_index.partner)
            FreeCaptureController:getInstance():openFreeCaptureWindow(false)
        end
        CommonAlert.show(str, TI18N("前往"), call_back, TI18N("取消"), nil, CommonAlert.type.common)
        return true
    end
    return false
end

function FreeCaptureItem:capture()
    if self:checkHeroBagIsFull() then return end
    FreeCaptureController:getInstance():sender23241(self.data.level)
end

function FreeCaptureItem:showResult()
    local data = {}
    data.partner_bids = {}
    data.rewards = {}
    for i,v in ipairs(self.data.items) do
        data.rewards[i] = {}
        data.rewards[i].base_id = v.item_id
        data.rewards[i].num = 1
    end
    GlobalEvent:getInstance():Fire(FreeCaptureEvent.Free_Capture_Result, data)
end

function FreeCaptureItem:setData(data)
    if not data then
        return
    end

    self.data = data
    if data.status == 0 then
        self.image_cover:setVisible(true)
        self.text_capture:setString(string.format(TI18N("%s级"),data.level))
        self.text_capture:disableEffect(cc.LabelEffect.OUTLINE)
        setChildUnEnabled(true, self.btn_capture)
        self.btn_capture:setTouchEnabled(false)
        self:showBtnEffect(self.btn_capture, false)
    elseif data.status == 1 then
        self.image_cover:setVisible(true)
        self.text_capture:setString(TI18N("捕捉10次"))
        self.text_capture:enableOutline(Config.ColorData.data_new_color4[11], 1)
        setChildUnEnabled(false, self.btn_capture)
        self.btn_capture:setTouchEnabled(true)
        self:showBtnEffect(self.btn_capture, true)
    elseif data.status == 2 then
        self.image_cover:setVisible(false)
        self.text_capture:setString(TI18N("已领取"))
        self.text_capture:disableEffect(cc.LabelEffect.OUTLINE)
        setChildUnEnabled(true, self.btn_capture)
        self.btn_capture:setTouchEnabled(false)
        self:showBtnEffect(self.btn_capture, false)
    end

    if data.items and next(data.items) ~= nil then
        local item_id = self:searchHighestId()
        self.item:setBaseData(item_id,1)
    end
end

--寻找第一个最高星的道具
function FreeCaptureItem:searchHighestId()
    local star, index = 0, 0
    for i,v in ipairs(self.data.items) do
        local cfg = Config.ItemData.data_get_data(v.item_id)
        if cfg.eqm_jie > star then
            star = cfg.eqm_jie
            index = i
        end
    end
    return self.data.items[index].item_id
end

function FreeCaptureItem:showBtnEffect(obj, bool)
    if not obj then return end
    if bool == true then
        if obj.arenapeak_effect == nil then
            local size = obj:getContentSize()
            -- obj.arenapeak_effect = createEffectSpine("E24756", cc.p(size.width * 0.5, size.height * 0.5), cc.p(0.5, 0.5), true, PlayerAction.action)
            obj.arenapeak_effect = createEffectSpine("E51304", cc.p(size.width * 0.5, size.height * 0.5), cc.p(0.5, 0.5), true, PlayerAction.action)
            obj.arenapeak_effect:setScale(0.8)
            obj:addChild(obj.arenapeak_effect, 1)
            obj:getChildByName("text_capture"):setLocalZOrder(999)
        else
            obj.arenapeak_effect:setAnimation(0, PlayerAction.action, true)
        end
    else
        if obj.arenapeak_effect then
            obj.arenapeak_effect:setVisible(false)
            obj.arenapeak_effect:removeFromParent()
            obj.arenapeak_effect = nil
        end
    end
end

function FreeCaptureItem:DeleteMe()
    if self.item ~= nil then
        self.item:DeleteMe()
        self.item = nil
    end
    if self.data ~= nil then
        self.data = nil
    end
    self:removeAllChildren()
    self:removeFromParent()
end