local UIPropModel = {}
local var = {}
local propKey = {
	"Medicine1",
	"Medicine2",
	"Medicine3",
	"Medicine4"
}

local function updatePropIcon()
	local propId, num, hasItem, pos, shortCut
	for i = 1, 4 do
		hasItem = false
		propId = nil
		-- propId = UserConfig.getConf(propKey[i])
		shortCut = NetClient.mShortCut[Const.SHORT_SKILL_END + i]
		if shortCut and shortCut.param ~= 0 then
			propId = shortCut.param
		end
		if propId then
			num = NetClient:getTypeItemNum(propId)
			if num > 0 then
				var.btnProps[i].lblPropsNum:setString(num);
				local itemdef = NetClient:getItemDefByID(propId)
				if itemdef then
					if itemdef.mDC > 0 and itemdef.mDC < 8 then
						var.btnProps[i].cdtime = itemdef.mDC
					else
						var.btnProps[i].cdtime = 1
					end
					if not (var.btnProps[i].mIconID == itemdef.mIconID) then
						var.btnProps[i].mIconID = itemdef.mIconID
						var.btnProps[i].imgIcon:loadTexture("picicon/"..itemdef.mIconID..".png", ccui.TextureResType.localType)
						--var.btnProps[i].imgIcon:setPositionX(var.btnProps[i]:getContentSize().width/2)
					end
				end
				pos = NetClient:getNetItemById(propId)
				if pos then
					var.btnProps[i].netItem = NetClient.mItems[pos];
					hasItem = true
				end
			end
		end
		if not hasItem then
			var.btnProps[i].lblPropsNum:setString("");
			var.btnProps[i].imgIcon:loadTexture("null", ccui.TextureResType.plistType)
			var.btnProps[i].netItem = nil
			var.btnProps[i].mIconID = nil
		end
	end
end

local function handlePropsVisible(visible)
	if var.btnControlProps then
		var.btnControlProps:stopAllActions()

		for i = 1, 3 do
			var.propModel:getWidgetByName("btn_props" .. i):setVisible(visible)
		end

		var.btnControlProps.showProps = visible

		if visible then
			var.btnControlProps:setPositionX(-15):setScaleX(1)
		else
			var.btnControlProps:setPositionX(285):setScaleX(-1)
		end
	end
end

local function doDelayHideBasicFunc()
	var.btnControlProps:stopAllActions()
	var.btnControlProps:runAction(cca.seq({
		cca.delay(5),
		cca.cb(function ()
			handlePropsVisible(false)
		end)
	}))
end

local function showCoolDown(sender, cdTime, callBack)
	sender.mark:show()
	sender:setPressedActionEnabled(false)

	sender.isCD = true

	sender.mark:runAction(cc.Sequence:create(cc.ProgressFromTo:create(cdTime + 0.5, 100, 0), cc.CallFunc:create(function ()
		sender.isCD = false

		sender.mark:hide()
		sender:setPressedActionEnabled(true)

		if callBack then
			callBack()
		end
	end)))
end

local function pushPropButtons (sender)
	print("pushPropButton")

	if sender.isCD then
		return
	end

	if sender.netItem then
		NetClient:BagUseItem(sender.netItem.position, sender.netItem.mTypeID, 1)
		showCoolDown(sender, sender.cdtime, function ()
		end)
	else
		NetClient:dispatchEvent({
			str = "panel_quickset",
			name = Notify.EVENT_OPEN_PANEL,
			mParam = {
				type = 2
			}
		})
	end
end

local function addProgressTimer(sender)
	if not sender.mark then
		local size = sender:getContentSize()
		sender.mark = cc.ProgressTimer:create(cc.Sprite:create("picicon/mark_circle.png")):setReverseDirection(true):setScale(0.8):align(display.CENTER, 0.5 * size.width, 0.5 * size.height):addTo(sender, 100):hide()

		sender.mark:setType(cc.PROGRESS_TIMER_TYPE_RADIAL)
	end
end

local function pushQuickButton1(sender)
	if sender:getName() == "main_autofight" then
		if MainRole._autoFight then
			MainRole.stopAutoFight()
		else
			MainRole.startAutoFight()
		end
	elseif sender:getName() == "main_autopick" then
		if MainRole._autoPick then
			MainRole.stopAutoPick()
		else
			MainRole.startAutoPick()
		end
	end
end

local function initBoxProps()
	for i = 1, 4 do
		var.btnProps[i] = var.propModel:getWidgetByName("btn_props" .. i)

		var.btnProps[i]:setPressedActionEnabled(true)

		var.btnProps[i].imgIcon = var.btnProps[i]:getWidgetByName("img_icon"):setScale(0.75)
		var.btnProps[i].lblPropsNum = var.btnProps[i]:getWidgetByName("lbl_props_num")

		UIRedPoint.addUIPoint(var.btnProps[i], pushPropButtons)
		addProgressTimer(var.btnProps[i])
	end
end

function UIPropModel.init(propModel)
		var = {
			propModel,
			btnProps = {},
			-- propModel = slot0
		}
		var.propModel = propModel
		if var.propModel then
			initBoxProps()
			updatePropIcon()
			cc.EventProxy.new(NetClient, propModel):addEventListener(Notify.EVENT_SET_SHORTCUT, updatePropIcon):addEventListener(Notify.EVENT_QUICKBUTTON_STATE, handleQuickButtonState):addEventListener(Notify.EVENT_ITEM_CHANGE, function (event)
				updatePropIcon()
			end)
		end
	end
return UIPropModel
